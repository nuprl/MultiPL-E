language: sh
name: HumanEval_159_eat
results:
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $2 -le $3 ]\n  then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n\
    \    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]; then\n            if [ $2 -gt $3 ]; then\n  \
    \              echo \"[$(($1 + $3)), 0]\"\n            else\n                echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n            fi\n        else\n           \
    \ echo \"Error: Constrain is not respected\"\n        fi\n    else\n        echo\
    \ \"Error: Constrain is not respected\"\n    fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n \
    \ fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To save the result, you must assign the final value to the RESULT variable\n\
    \  # Example: RESULT=\"some value\"\n  #\n  # The following are examples of results\n\
    \  # RESULT=\"[11, 4]\"\n  # RESULT=\"[12, 1]\"\n  # RESULT=\"[11, 0]\"\n  # RESULT=\"\
    [7, 0]\"\n  #\n  # You can use the echo command to debug\n  # Example: echo \"\
    Debug messages...\"\n  #\n  # You MUST NOT modify the following part of the code\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzeefamoq.sh: line 164: syntax error near unexpected token `}''

    /tmp/tmpzeefamoq.sh: line 164: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To assign a value to a variable, use the syntax \"variable_name=value\"\n\
    \  # For example:\n  # number_of_carrots_eaten=5\n  # number_of_carrots_needed=6\n\
    \  # number_of_carrots_remaining=10\n  # echo \"I have eaten $number_of_carrots_eaten\
    \ carrots, I need to eat $number_of_carrots_needed carrots, and there are $number_of_carrots_remaining\
    \ carrots left\"\n  # You can use the echo command to print text to the console.\n\
    \  # You can use the return command to return a value from the function.\n  #\
    \ You can use the syntax \"return value1 value2 ...\" to return multiple values.\n\
    \  # For example:\n  # return $number_of_carrots_eaten $number_of_carrots_remaining\n\
    \  # This will return 2 values: the first value will be stored in $1, the second\
    \ value will be stored in $2, etc...\n  # You can access the arguments using the\
    \ variables $1, $2, etc...\n  # To assign a value to a variable, use the syntax\
    \ \"variable_name=value\"\n  # For example:\n  # number_of_carrots_eaten=5\n \
    \ # number_of_carrots_needed=6\n  # number_of_carrots_remaining=10\n  # echo \"\
    I have eaten $number_of_carrots_eaten carrots, I need to eat $number_of_carrots_needed\
    \ carrots, and there are $number_of_carrots_remaining carrots left\"\n  # You\
    \ can use the echo command to print text to the console.\n  # You can use the\
    \ return command to return a value from the function.\n  # You can use the syntax\
    \ \"return value1 value2 ...\" to return multiple values.\n  # For example:\n\
    \  # return $number_of_carrots_eaten $number_of_carrots_remaining\n  # This will\
    \ return 2 values: the first value will be stored in $1, the second value will\
    \ be stored in $2, etc...\n\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzfsgfzaq.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpzfsgfzaq.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local eaten=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$eaten, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: You have to enter positive integers\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here...\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000\
    \ ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n\
    \      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$((\
    \ $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"Error: Invalid input\"\n  fi\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local result=()\n  if [ $remaining -ge\
    \ $need ]; then\n    result[0]=$((number + need))\n    result[1]=$((remaining\
    \ - need))\n  else\n    result[0]=$((number + remaining))\n    result[1]=0\n \
    \ fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    # To print results to the standard output you can use echo\n    #\
    \ Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can use echo to print the result\n  # Example: echo \"Hello World!\"\
    \n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000\
    \ ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1\
    \ + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain failed\"\n \
    \   fi\n  else\n    echo \"Error: Constrain failed\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if\
    \ [ $2 -le $3 ]; then\n            echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n\
    \        else\n            echo \"[$(( $1 + $3 )), 0]\"\n        fi\n    else\n\
    \        echo \"Invalid input\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: the number\
    \ of carrots that you have eaten, the number of carrots that you need to eat,\
    \ the number of remaining carrots thet exist in stock must be positive integers\"\
    \n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'result'\n  # Example:\
    \ result=\"my value\"\n  result=\"$1,$2\"\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local result=()\n  if [[ $total -ge $need ]]; then\n    result=($need $((total\
    \ - need)))\n  else\n    result=($total 0)\n  fi\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000\
    \ ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$((\
    \ $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1 + $3 )), 0]\"\
    \n      fi\n    else\n      echo \"Constrain: 0 <= number <= 1000, 0 <= need <=\
    \ 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Constrain: 0 <= number\
    \ <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000\
    \ ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1\
    \ + $2)), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(($1 + $3)), 0]\"\n\
    \      fi\n    else\n      echo \"Error: Constrain: 0 <= number <= 1000, 0 <=\
    \ need <= 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Error: Constrain:\
    \ 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi\n}\n\n\
    candidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12\
    \ 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: Invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'result'\n  # Example:\
    \ result=\"my value\"\n  result=\"[$(($1+$2)), $(($3-$2))]\"\n  echo $result\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n   \
    \ echo \"[$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: invalid input\"\
    \n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n   \
    \ echo \"[$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'result'\n  # Example:\
    \ result=\"my return value\"\n  result=\"$1,$2\"\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -le $3 ];\
    \ then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo \"[$((\
    \ $1 + $3 )), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: one of the\
    \ arguments is not an integer\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  # your code here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$1, $3]\"\
    \n  else\n    if [ $3 -ge $2 ]\n    then\n      echo \"[$2, $(( $3 - $2 ))]\"\n\
    \    else\n      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  number=$1\n  need=$2\n\
    \  remaining=$3\n  if [ $remaining -ge $need ]; then\n    echo \"[$((number +\
    \ need)), $((remaining - need))]\"\n  else\n    echo \"[$((number + remaining)),\
    \ 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\"\
    \ \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\"\
    \ ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'result'\n  # Example return\
    \ value:\n  # result=\"my return value\"\n  # echo \"$1\"\n  # echo \"$2\"\n \
    \ # echo \"$3\"\n  # echo \"$4\"\n  # echo \"$5\"\n  # echo \"$6\"\n  # echo \"\
    $7\"\n  # echo \"$8\"\n  # echo \"$9\"\n  # echo \"${10}\"\n  # echo \"${11}\"\
    \n  # echo \"${12}\"\n  # echo \"${13}\"\n  # echo \"${14}\"\n  # echo \"${15}\"\
    \n  # echo \"${16}\"\n  # echo \"${17}\"\n  # echo \"${18}\"\n  # echo \"${19}\"\
    \n  # echo \"${20}\"\n  # echo \"${21}\"\n  # echo \"${22}\"\n  # echo \"${23}\"\
    \n  # echo \"${24}\"\n  # echo \"${25}\"\n  # echo \"${26}\"\n  # echo \"${27}\"\
    \n  # echo \"${28}\"\n  # echo \"${29}\"\n  # echo \"${30}\"\n  # echo \"${31}\"\
    \n  # echo \"${32}\"\n  # echo \"${33}\"\n  # echo \"${34}\"\n  # echo \"${35}\"\
    \n  # echo \"${36}\"\n  # echo \"${37}\"\n  # echo \"${38}\"\n  # echo \"${39}\"\
    \n  # echo \"${40}\"\n  # echo \"${41}\"\n  # echo \"${42}\"\n  # echo \"${43}\"\
    \n  # echo \"${44}\"\n  # echo \"${45}\"\n  # echo \"${46}\"\n  # echo \"${47}\"\
    \n  # echo \"${48}\"\n  # echo \"${49}\"\n  # echo \"${50}\"\n  # echo \"${51}\"\
    \n  # echo \"${52}\"\n  # echo \"${53}\"\n  # echo \"${54}\"\n  # echo \"${55}\"\
    \n  # echo \"${56}\"\n  # echo \"${57}\"\n  # echo \"${\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpil6kjn2u.sh: line 92: syntax error near unexpected token `}''

    /tmp/tmpil6kjn2u.sh: line 92: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$((number + remaining))\n\
    \    local left=$((total - need))\n    if [[ $left -lt 0 ]]; then\n        left=0\n\
    \    fi\n    echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] &&\
    \ [ $2 -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $3 -ge $2 ]\n    then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if\
    \ [ $2 -le $3 ]; then\n            echo \"[$(($1 + $2)), $(($3 - $2))]\"\n   \
    \     else\n            echo \"[$(($1 + $3)), 0]\"\n        fi\n    else\n   \
    \     echo \"Invalid input\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n \
    \   [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not respected\"\n    fi\n  else\n    echo \"Error: Constrain is not respected\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: The input is not valid\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local eaten=$((number + remaining))\n\
    \  if [ $eaten -lt $need ]; then\n    echo \"[$eaten, 0]\"\n  else\n    echo \"\
    [$((number + need)), $((eaten - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local result=()\n    if [ $remaining\
    \ -lt $need ]; then\n        result[0]=$((number + remaining))\n        result[1]=0\n\
    \    else\n        result[0]=$((number + need))\n        result[1]=$((remaining\
    \ - need))\n    fi\n    echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n   \
    \ echo \"[$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$(($number + $need))\n\
    \    local left=$(($remaining - $need))\n    if [ $left -lt 0 ]; then\n      \
    \  left=0\n    fi\n    echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To save the result, you can assign it to the variable $RESULT\n  #\n  # Example:\n\
    \  # RESULT=$(($1+$2))\n  if [ $1 -ge $2 ]; then\n    RESULT=\"[$1, $3]\"\n  elif\
    \ [ $2 -le $3 ]; then\n    RESULT=\"[$(($1+$2)), $(($3-$2))]\"\n  else\n    RESULT=\"\
    [$(($1+$3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  if [ $remaining -lt $need ]; then\n\
    \    echo \"[$((number + remaining)), 0]\"\n  else\n    echo \"[$((number + need)),\
    \ $((remaining - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=0\n  local left=0\n  if\
    \ [ $remaining -gt $need ]; then\n    total=$((number + need))\n    left=$((remaining\
    \ - need))\n  else\n    total=$((number + remaining))\n    left=0\n  fi\n  echo\
    \ \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Invalid input\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $3 -ge $2 ]\n\
    \  then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1\
    \ + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # Use echo to print the result\n  # For example:\n  # echo \"Hello world!\"\
    \n  echo \"Hello world!\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n    \
    \  echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Constrain: 0 <= number\
    \ <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo\
    \ \"Constrain: 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$((number + need))\n\
    \    local left=$((remaining - need))\n    if [ $left -lt 0 ]; then\n        left=0\n\
    \    fi\n    echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]; then\n            if [ $2 -le $3 ]; then\n  \
    \              echo \"[$(($1 + $2)), $(($3 - $2))]\"\n            else\n     \
    \           echo \"[$(($1 + $3)), 0]\"\n            fi\n        else\n       \
    \     echo \"Constrain: 0 <= number <= 1000\"\n        fi\n    else\n        echo\
    \ \"Constrain: 0 <= number <= 1000\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\"\
    \ ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n   \
    \ echo \"[$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'return'\n  # Example:\
    \ return=\"my return value\"\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n \n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaju_h5l4.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpaju_h5l4.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign the result to a variable and echo it like this:\
    \ result=$variable\n  # echo $result\n  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local result=()\n  if [ $number -ge $need ]; then\n    result[0]=$number\n\
    \    result[1]=$remaining\n  else\n    if [ $remaining -ge $need ]; then\n   \
    \   result[0]=$(( $number + $need ))\n      result[1]=$(( $remaining - $need ))\n\
    \    else\n      result[0]=$(( $number + $remaining ))\n      result[1]=0\n  \
    \  fi\n  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -gt $3 ]\n    then\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    else\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: invalid input\"\
    \n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local eaten=$((total - need))\n  if [[ $eaten -lt 0 ]]; then\n    echo \"[$total,\
    \ 0]\"\n  else\n    echo \"[$total, $eaten]\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # Use echo to print the result, example:\n  # echo \"1,2\"\n  # echo\
    \ \"3,4\"\n  # echo \"5,6\"\n  # ...\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu_b3r1iw.sh: line 189: syntax error near unexpected token `}''

    /tmp/tmpu_b3r1iw.sh: line 189: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: 0 <= number <= 1000,\
    \ 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local result=()\n  if [ $remaining -ge\
    \ $need ]; then\n    result[0]=$((number + need))\n    result[1]=$((remaining\
    \ - need))\n  else\n    result[0]=$((number + remaining))\n    result[1]=0\n \
    \ fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n    echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )),\
    \ 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -le 0 ]\
    \ || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"Error: invalid input\"\n \
    \   exit 1\n  fi\n  if [ $1 -ge $2 ]; then\n    echo \"Error: invalid input\"\n\
    \    exit 1\n  fi\n  if [ $1 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $2 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $1 -ge 1000 ] || [ $2 -ge 1000 ] || [ $3 -ge 1000 ];\
    \ then\n    echo \"Error: invalid input\"\n    exit 1\n  fi\n  if [ $1 -le 0 ]\
    \ || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"Error: invalid input\"\n \
    \   exit 1\n  fi\n  if [ $1 -ge $2 ]; then\n    echo \"Error: invalid input\"\n\
    \    exit 1\n  fi\n  if [ $1 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $2 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $1 -ge 1000 ] || [ $2 -ge 1000 ] || [ $3 -ge 1000 ];\
    \ then\n    echo \"Error: invalid input\"\n    exit 1\n  fi\n  if [ $1 -le 0 ]\
    \ || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"Error: invalid input\"\n \
    \   exit 1\n  fi\n  if [ $1 -ge $2 ]; then\n    echo \"Error: invalid input\"\n\
    \    exit 1\n  fi\n  if [ $1 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $2 -ge $3 ]; then\n    echo \"Error: invalid input\"\
    \n    exit 1\n  fi\n  if [ $1 -ge 1000 ] || [ $2 -ge 1000 ] || [ $3 -ge 1000 ];\
    \ then\n    echo \"Error: invalid input\"\n    exit 1\n  fi\n \n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local left=$((total - need))\n  if [ $left -ge 0 ]; then\n    echo \"[$((number\
    \ + need)), $left]\"\n  else\n    echo \"[$total, 0]\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: all arguments must be greater than or\
    \ equal to 0\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not satisfied\"\n    fi\n  else\n    echo \"Error: Constrain is not satisfied\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$(($number + $need))\n \
    \ local left=$(($remaining - $need))\n  if [ $left -lt 0 ]; then\n    left=0\n\
    \  fi\n  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -gt $3 ]; then\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    else\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    fi\n  else\n    echo \"Error: wrong input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n\
    \      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  number=$1\n  need=$2\n\
    \  remaining=$3\n  if [ $remaining -ge $need ]; then\n    echo \"[$((number +\
    \ need)), $((remaining - need))]\"\n  else\n    echo \"[$((number + remaining)),\
    \ 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\"\
    \ \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\"\
    \ ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, assign a value to the variable 'value'\n  # Example: value=\"\
    my return value\"\n  value=\"$1 $2 $3\"\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\"\
    \ ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local left=$((total - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -lt 0 ]\
    \ || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"Error: all arguments must\
    \ be greater than 0\"\n    exit 1\n  fi\n  if [ $1 -gt 1000 ] || [ $2 -gt 1000\
    \ ] || [ $3 -gt 1000 ]; then\n    echo \"Error: all arguments must be less than\
    \ 1000\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ];\
    \ then\n    echo \"Error: all arguments must be greater than 0\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq 1000 ] && [ $2 -eq 1000 ] && [ $3 -eq 1000 ]; then\n    echo\
    \ \"Error: all arguments must be less than 1000\"\n    exit 1\n  fi\n  if [ $1\
    \ -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error: all arguments must be different\"\
    \n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error:\
    \ all arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [\
    \ $2 -eq $3 ]; then\n    echo \"Error: all arguments must be different\"\n   \
    \ exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error: all\
    \ arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n    echo \"Error: all arguments must be different\"\n    exit\
    \ 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error: all arguments\
    \ must be different\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ];\
    \ then\n    echo \"Error: all arguments must be different\"\n    exit 1\n  fi\n\
    \  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error: all arguments must\
    \ be different\"\n    exit 1\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n \
    \   [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$((number + need))\n\
    \    local left=$((remaining - need))\n    if [[ $left -lt 0 ]]; then\n      \
    \  left=0\n    fi\n    echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n    \
    \  echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n\
    \  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, $3\n  # Example:\n\
    \  # echo $1, $2, $3\n  # echo \"I ate $1 carrots, I need to eat $2 more carrots,\
    \ and there are $3 carrots left\"\n  #\n  # Your code must output the result using\
    \ the following syntax:\n  # echo [total number of eaten carrots after your meals,\
    \ the number of carrots left after your meals]\n  #\n  # Example:\n  # echo [11,\
    \ 4]\n  #\n  # Good luck!\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1fz24qg1.sh: line 167: syntax error near unexpected token `}''

    /tmp/tmp1fz24qg1.sh: line 167: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\
    \n  else\n    echo \"[$(( $1 + $3 )), 0]\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    echo \"Not yet implemented\"\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]; then\n            if [ $2 -le $3 ]; then\n  \
    \              echo \"[$(($1 + $2)), $(($3 - $2))]\"\n            else\n     \
    \           echo \"[$(($1 + $3)), 0]\"\n            fi\n        else\n       \
    \     echo \"Error: the number of carrots that you have eaten, the number of carrots\
    \ that you need to eat, and the number of remaining carrots thet exist in stock\
    \ must be less than or equal to 1000\"\n        fi\n    else\n        echo \"\
    Error: the number of carrots that you have eaten, the number of carrots that you\
    \ need to eat, and the number of remaining carrots thet exist in stock must be\
    \ greater than or equal to 0\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$1, 0]\"\n  elif [ $3 -ge $2 ]\n\
    \  then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo \"[$(( $1 + $3 )),\
    \ 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\"\
    \ \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\"\
    \ ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$(($number + $need))\n \
    \ local left=$(($remaining - $need))\n  if [ $left -lt 0 ]; then\n    left=0\n\
    \  fi\n  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  echo \"Not implemented\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -le $3 ];\
    \ then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1 +\
    \ $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3\
    \ ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n       \
    \ echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain:\
    \ 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n    fi\n \
    \ else\n    echo \"Error: Constrain: 0 <= number <= 1000, 0 <= need <= 1000, 0\
    \ <= remaining <= 1000\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [[ $1 -lt 0 || $1 -gt 1000 || $2 -lt 0 || $2 -gt 1000 || $3 -lt\
    \ 0 || $3 -gt 1000 ]]; then\n    echo \"Error: input value is out of range\"\n\
    \    exit 1\n  fi\n  if [[ $1 -eq 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n    echo\
    \ \"Error: input value is invalid\"\n    exit 1\n  fi\n  if [[ $1 -eq 0 && $2\
    \ -eq 0 && $3 -gt 0 ]]; then\n    echo \"Error: input value is invalid\"\n   \
    \ exit 1\n  fi\n  if [[ $1 -eq 0 && $2 -gt 0 && $3 -eq 0 ]]; then\n    echo \"\
    Error: input value is invalid\"\n    exit 1\n  fi\n  if [[ $1 -gt 0 && $2 -eq\
    \ 0 && $3 -eq 0 ]]; then\n    echo \"Error: input value is invalid\"\n    exit\
    \ 1\n  fi\n  if [[ $1 -gt 0 && $2 -gt 0 && $3 -eq 0 ]]; then\n    echo \"Error:\
    \ input value is invalid\"\n    exit 1\n  fi\n  if [[ $1 -gt 0 && $2 -eq 0 &&\
    \ $3 -gt 0 ]]; then\n    echo \"Error: input value is invalid\"\n    exit 1\n\
    \  fi\n  if [[ $1 -eq 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n    echo \"Error: input\
    \ value is invalid\"\n    exit 1\n  fi\n  if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt\
    \ 0 ]]; then\n    if [[ $1 -eq $2 ]]; then\n      echo \"[$1, $3]\"\n    elif\
    \ [[ $1 -gt $2 ]]; then\n      echo \"[$2, $3]\"\n    elif [[ $1 -lt $2 ]]; then\n\
    \      if [[ $3 -eq 0 ]]; then\n        echo \"[$1, $3]\"\n      elif [[ $3 -gt\
    \ 0 ]]; then\n        if [[ $1 -eq $3 ]]; then\n          echo \"[$1, $3\n}\n\n\
    candidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12\
    \ 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0c9lythe.sh: line 86: unexpected EOF while looking for matching
    `"''

    /tmp/tmp0c9lythe.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not satisfied\"\n    fi\n  else\n    echo \"Error: Constrain is not satisfied\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"Error:\
    \ invalid input\"\n    exit 1\n  fi\n  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] ||\
    \ [ $3 -gt 1000 ]; then\n    echo \"Error: invalid input\"\n    exit 1\n  fi\n\
    \  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $2 -eq 0 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $3 -eq 0 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $1 -eq $3 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $2 -eq $3 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n    echo \"Error: invalid\
    \ input\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo\
    \ \"Error: invalid input\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3\
    \ ] && [ $1 -eq $3 ]; then\n    echo \"Error: invalid input\"\n    exit 1\n  fi\n\
    \  if [ $1 -eq $2 ] && [ $2 -eq $3 ] && [ $1 -eq $3 ] && [ $1 -eq 0 ]; then\n\
    \    echo \"Error: invalid input\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [\
    \ $2 -eq\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8_k3npca.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmp8_k3npca.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local result=()\n  if [[ $total -ge $need ]]; then\n    result+=(\"$need\"\
    )\n    result+=(\"$((total - need))\")\n  else\n    result+=(\"$total\")\n   \
    \ result+=(\"0\")\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    # You can access the arguments with $1, $2, $3, etc...\n    # You\
    \ can print with echo\n    # You can return your result with echo \"result\"\n\
    \    # You can use other bash builtins\n    # You can use other programs by using\
    \ their absolute path\n    # (example: /bin/ls)\n    # You can write your code\
    \ here and test it with the tests provided\n    # in the Tests tab.\n    # When\
    \ you're ready to submit, copy your code below\n    # and paste it in the solution\
    \ box.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptypk76g5.sh: line 167: syntax error near unexpected token `}''

    /tmp/tmptypk76g5.sh: line 167: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3\
    \ ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n       \
    \ echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain:\
    \ 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n    fi\n \
    \ else\n    echo \"Error: Constrain: 0 <= number <= 1000, 0 <= need <= 1000, 0\
    \ <= remaining <= 1000\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To assign a value to a variable, use the syntax \"variable_name=value\"\n\
    \  # For example:\n  #   number=5\n  #   echo $number\n  #   > 5\n  #\n  #   echo\
    \ \"I ate $number carrots\"\n  #   > I ate 5 carrots\n  #\n  #   echo \"I need\
    \ to eat $1 more carrots\"\n  #   > I need to eat 2 more carrots\n  #\n  #   echo\
    \ \"There are $3 carrots left\"\n  #   > There are 10 carrots left\n  #\n  # \
    \  echo \"I ate all the carrots\"\n  #   > I ate all the carrots\n  #\n  #   echo\
    \ \"I'm still hungry\"\n  #   > I'm still hungry\n  #\n  #   echo \"I'm full\"\
    \n  #   > I'm full\n  #\n  #   echo \"I ate $((number + 1)) carrots\"\n  #   >\
    \ I ate 6 carrots\n  #\n  #   echo \"I ate $((number + $1)) carrots\"\n  #   >\
    \ I ate 7 carrots\n  #\n  #   echo \"I ate $((number + $1 + $3)) carrots\"\n \
    \ #   > I ate 15 carrots\n  #\n  #   echo \"I ate $((number + $1 + $3 - $2)) carrots\"\
    \n  #   > I ate 13 carrots\n  #\n  #   echo \"I ate $((number + $1 + $3 - $2 -\
    \ 1)) carrots\"\n  #   > I ate 12 carrots\n  #\n  #   echo \"I ate $((number +\
    \ $1 + $3 - $2 - 1)) carrots\"\n  #   > I ate 12 carrots\n  #\n  #   echo \"I\
    \ ate $((number + $1 + $3 - $2 - 1)) carrots\"\n  #   > I ate 12 carrots\n  #\n\
    \  #   echo \"I ate $((number + $1 + $3 - $2 - 1)) carrots\"\n  #   > I ate 12\
    \ carrots\n  #\n  #   echo \"I ate $((number + $1 +\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg05jp7m5.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmpg05jp7m5.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local eaten=0\n  if [ $total -ge $need ]; then\n    eaten=$need\n  else\n \
    \   eaten=$total\n  fi\n  echo \"[$eaten, $((total - eaten))]\"\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge $2 ]; then\n    echo \"[$2, 0]\"\n  elif [ $3 -ge $2 ];\
    \ then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n  fi\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$((number + need))\n\
    \    local left=$((remaining - need))\n    if [ $left -lt 0 ]; then\n        left=0\n\
    \    fi\n    echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Constrain: 0 <= number\
    \ <= 1000\"\n    fi\n  else\n    echo \"Constrain: 0 <= number <= 1000\"\n  fi\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [ $total -lt $need ]; then\n    echo \"[$total, 0]\"\n  else\n    echo \"\
    [$((number + need)), $((total - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]; then\n            if [ $2 -le $3 ]; then\n  \
    \              echo \"[$(($1 + $2)), $(($3 - $2))]\"\n            else\n     \
    \           echo \"[$(($1 + $3)), 0]\"\n            fi\n        else\n       \
    \     echo \"Error: Constrain is not respected\"\n        fi\n    else\n     \
    \   echo \"Error: Constrain is not respected\"\n    fi\n}\n\ncandidate() {\n \
    \   eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\"\
    ) = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -le $3 ];\
    \ then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1 +\
    \ $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [ $total -lt $need ]; then\n    echo \"[$total, 0]\"\n  else\n    local\
    \ left=$((total - need))\n    echo \"[$((number + need)), $left]\"\n  fi\n}\n\n\
    candidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12\
    \ 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"Error:\
    \ input must be positive integers\"\n    exit 1\n  fi\n  if [ $1 -gt 1000 ] ||\
    \ [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"Error: input must be less\
    \ than 1000\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: need\
    \ must be less than remaining\"\n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n\
    \    echo \"Error: number must be less than remaining\"\n    exit 1\n  fi\n  if\
    \ [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: input\
    \ must not be 0\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error:\
    \ number must not be equal to need\"\n    exit 1\n  fi\n  if [ $2 -eq $3 ]; then\n\
    \    echo \"Error: need must not be equal to remaining\"\n    exit 1\n  fi\n \
    \ if [ $1 -eq $3 ]; then\n    echo \"Error: number must not be equal to remaining\"\
    \n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ]; then\n    echo \"Error:\
    \ number and need must not be 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $3\
    \ -eq 0 ]; then\n    echo \"Error: number and remaining must not be 0\"\n    exit\
    \ 1\n  fi\n  if [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: need and\
    \ remaining must not be 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo\
    \ \"Error: number must not be 0\"\n    exit 1\n  fi\n  if [ $2 -eq 0 ]; then\n\
    \    echo \"Error: need must not be 0\"\n    exit 1\n  fi\n  if [ $3 -eq 0 ];\
    \ then\n    echo \"Error: remaining must not be 0\"\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu2vyou0g.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmpu2vyou0g.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n    \
    \  echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 +\
    \ $3 )), 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3\
    \ ]; then\n        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n   \
    \     echo \"[$(( $1 + $3 )), 0]\"\n      fi\n    else\n      echo \"Error: Constrain\
    \ is not respected\"\n    fi\n  else\n    echo \"Error: Constrain is not respected\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n \
    \ fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -gt $3 ];\
    \ then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n    echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: Invalid input\"\n \
    \ fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local total=$((number + remaining))\n\
    \    if [ $total -lt $need ]; then\n        echo \"[$total, 0]\"\n    else\n \
    \       echo \"[$((number + need)), $((total - need))]\"\n    fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [ $total -lt $need ]; then\n    echo \"[$total, 0]\"\n  else\n    echo \"\
    [$((number + need)), $((total - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    echo \"[$total,\
    \ 0]\"\n  else\n    echo \"[$total, $left]\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -gt $3 ];\
    \ then\n    echo \"[$(( $1 + $3 )), 0]\"\n  else\n    echo \"[$(( $1 + $2 )),\
    \ $(( $3 - $2 ))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n \
    \   [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: input must\
    \ be positive integers\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n\
    \  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]\n  then\n    if [ $2 -le $3 ]\n    then\n    \
    \  echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 +\
    \ $3 )), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\n\
    candidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12\
    \ 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000\
    \ ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$((\
    \ $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1 + $3 )), 0]\"\
    \n      fi\n    else\n      echo \"Constrain: 0 <= number <= 1000, 0 <= need <=\
    \ 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Constrain: 0 <= number\
    \ <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not satisfied\"\n    fi\n  else\n    echo \"Error: Constrain is not satisfied\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [[ $total -ge $need ]]; then\n    echo \"[$((total - remaining)), $((total\
    \ - need))]\"\n  else\n    echo \"[$total, 0]\"\n  fi\n}\n\ncandidate() {\n  \
    \  eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\"\
    ) = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n \
    \ fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n    \
    \  echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"Error\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To assign a value to a variable, use the syntax \"variable=value\"\n  # For\
    \ example:\n  #   number=$1\n  #   need=$2\n  #   remaining=$3\n  #   result=\"\
    $number carrots eaten, $remaining carrots remaining\"\n  #   echo $result\n  #\n\
    \  # To access the value of a variable, use the syntax \"$variable\"\n  # For\
    \ example:\n  #   echo $result\n  #\n  # To output the result, use the syntax\
    \ \"echo [string]\"\n  # For example:\n  #   echo \"The result is $result\"\n\
    \  #\n  # Good luck!\n  number=$1\n  need=$2\n  remaining=$3\n  if [ $remaining\
    \ -ge $need ]\n  then\n    echo \"[$((number+need)), $((remaining-need))]\"\n\
    \  else\n    echo \"[$((number+remaining)), 0]\"\n  fi\n}\n\ncandidate() {\n \
    \   eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\"\
    ) = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local eaten=$((number + remaining))\n\
    \  if [[ $eaten -ge $need ]]; then\n    echo \"[$need, $((eaten - need))]\"\n\
    \  else\n    echo \"[$eaten, 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local result=()\n  if [ $remaining -ge\
    \ $need ]; then\n    result=($((number + need)) $((remaining - need)))\n  else\n\
    \    result=($((number + remaining)) 0)\n  fi\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # You can access the arguments using the variables $1, $2, etc...\n\
    \  # To return a value, use the return command, e.g return 42\n  # return 42\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmbc9li91.sh: line 188: syntax error near unexpected token `}''

    /tmp/tmpmbc9li91.sh: line 188: `}''

    '
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(( $3 - $2 ))]\"\n\
    \  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n   \
    \ echo \"[$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Invalid input\"\n\
    \    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -gt $3 ]\n  then\n    echo \"[$(( $1 + $3 )), 0]\"\n  else\n\
    \    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  fi\n}\n\ncandidate() {\n   \
    \ eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\"\
    ) = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  echo \"eat($1, $2, $3)\" | bc\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Runtime error (func=(main), adr=12): Function eat not defined.

    '
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n\
    \  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $2 -gt $3\
    \ ]; then\n        echo \"[$(($1 + $3)), 0]\"\n    else\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$1, $3]\"\n  else\n    if [ $3\
    \ -ge $2 ]\n    then\n      echo \"[$2, $((3-2))]\"\n    else\n      echo \"[$((1+3)),\
    \ 0]\"\n    fi\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Please enter positive integers\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  if [ $remaining -lt $need ]; then\n\
    \    echo \"[$((number + remaining)), 0]\"\n  else\n    echo \"[$((number + need)),\
    \ $((remaining - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((total - remaining))\n  if [ $left -gt 0 ]; then\n    echo \"[$total,\
    \ 0]\"\n  else\n    echo \"[$total, $((remaining - total))]\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local result=()\n  if [ $remaining -gt\
    \ $need ]; then\n    result+=($((number + need)))\n    result+=($((remaining -\
    \ need)))\n  else\n    result+=($((number + remaining)))\n    result+=(0)\n  fi\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not satisfied\"\n    fi\n  else\n    echo \"Error: Constrain is not satisfied\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 0
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n\
    \    local need=$2\n    local remaining=$3\n    local result=()\n    if [[ $remaining\
    \ -ge $need ]]; then\n        result[0]=$((number + need))\n        result[1]=$((remaining\
    \ - need))\n    else\n        result[0]=$((number + remaining))\n        result[1]=0\n\
    \    fi\n    echo ${result[@]}\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$(($number + $need))\n \
    \ local left=$(($remaining - $need))\n  if [ $total -gt $remaining ]; then\n \
    \   echo \"[$remaining, 0]\"\n  else\n    echo \"[$total, $left]\"\n  fi\n}\n\n\
    candidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12\
    \ 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 2
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  # $1 is an integer\n  # $2 is an integer\n  # $3 is an integer\n  #\
    \ return an array of two integers\n  # the first integer is the total number of\
    \ eaten carrots after your meals\n  # the second integer is the number of carrots\
    \ left after your meals\n  # if there are not enough remaining carrots, you will\
    \ eat all remaining carrots, but will still be hungry.\n  # Example:\n  # * eat(5,\
    \ 6, 10) -> [11, 4]\n  # * eat(4, 8, 9) -> [12, 1]\n  # * eat(1, 10, 10) -> [11,\
    \ 0]\n  # * eat(2, 11, 5) -> [7, 0]\n  # Variables:\n  # @number : integer\n \
    \ # the number of carrots that you have eaten.\n  # @need : integer\n  # the number\
    \ of carrots that you need to eat.\n  # @remaining : integer\n  # the number of\
    \ remaining carrots thet exist in stock\n  # Constrain:\n  # * 0 <= number <=\
    \ 1000\n  # * 0 <= need <= 1000\n  # * 0 <= remaining <= 1000\n  # Have fun :)\n\
    \  #\n  # $1 is an integer\n  # $2 is an integer\n  # $3 is an integer\n  # return\
    \ an array of two integers\n  # the first integer is the total number of eaten\
    \ carrots after your meals\n  # the second integer is the number of carrots left\
    \ after your meals\n  # if there are not enough remaining carrots, you will eat\
    \ all remaining carrots, but will still be hungry.\n  # Example:\n  # * eat(5,\
    \ 6, 10) -> [11, 4]\n  # * eat(4, 8, 9) -> [12, 1]\n  # * eat(1, 10, 10) -> [11,\
    \ 0]\n  # * eat(2, 11, 5) -> [7, 0]\n  # Variables:\n  # @number : integer\n \
    \ # the number of carrots that you have eaten.\n  # @need : integer\n  # the number\
    \ of carrots that you need to eat.\n  # @remaining : integer\n  # the number of\
    \ remaining carrots thet exist in stock\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfvs0u35c.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmpfvs0u35c.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  # your code here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ];\
    \ then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n \
    \     if [ $2 -le $3 ]; then\n        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\
    \n      else\n        echo \"[$(( $1 + $3 )), 0]\"\n      fi\n    else\n     \
    \ echo \"Error: Constrain: 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining\
    \ <= 1000\"\n    fi\n  else\n    echo \"Error: Constrain: 0 <= number <= 1000,\
    \ 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: the number of carrots that you have eaten,\
    \ the number of carrots that you need to eat, and the number of remaining carrots\
    \ thet exist in stock must be greater than or equal to 0\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $2 -gt $3\
    \ ]; then\n        echo \"[$(($1 + $3)), 0]\"\n    else\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  if\
    \ [ $total -gt $remaining ]; then\n    echo \"[$remaining, 0]\"\n  else\n    echo\
    \ \"[$total, $((remaining - total))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\"\
    \ ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local eaten=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$eaten, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if\
    \ [ $2 -le $3 ]; then\n            echo \"[$(($1 + $2)), $(($3 - $2))]\"\n   \
    \     else\n            echo \"[$(($1 + $3)), 0]\"\n        fi\n    else\n   \
    \     echo \"Error\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ];\
    \ then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain is\
    \ not respected\"\n    fi\n  else\n    echo \"Error: Constrain is not respected\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  number=$1\n  need=$2\n\
    \  remaining=$3\n  if [ $remaining -lt $need ]; then\n    echo \"[$((number +\
    \ remaining)), 0]\"\n  else\n    echo \"[$((number + need)), $((remaining - need))]\"\
    \n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [[ $total -ge $need ]]; then\n    echo \"[$((total - remaining)), $((total\
    \ - need))]\"\n  else\n    echo \"[$total, 0]\"\n  fi\n}\n\ncandidate() {\n  \
    \  eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\"\
    ) = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"[0, 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\"\
    \ ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le\
    \ 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -gt $3 ];\
    \ then\n        echo \"[$(($1 + $3)), 0]\"\n      else\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n      fi\n    fi\n  fi\n}\n\ncandidate() {\n    eat\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") =\
    \ \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n\
    \      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"Error: eat($1,\
    \ $2, $3)\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000\
    \ ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1 + $3)), 0]\"\n  \
    \    fi\n    else\n      echo \"Error: Constrain\"\n    fi\n  else\n    echo \"\
    Error: Constrain\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo\
    \ \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $2 -le $3\
    \ ]; then\n        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n     \
    \   echo \"[$(( $1 + $3 )), 0]\"\n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  echo \"($1+$2) $3\" | awk '{if ($1>$2) print $2,0; else print $1,$2-$1}'\n\
    }\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [ $total -lt $need ]; then\n    echo \"[$total, 0]\"\n  else\n    echo \"\
    [$((number + need)), $((total - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n \
    \ echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  if [ $2 -le $3 ];\
    \ then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo \"[$((\
    \ $1 + $3 )), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n    echo \"\
    [$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # Write your code\
    \ here\n  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n\
    \  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $2 -le $3 ]\n  then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n\
    \    echo \"[$(($1 + $3)), 0]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n\
    \    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\"\
    \ \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"\
    4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  echo \"eat($1, $2,\
    \ $3)\"\n  if [ $1 -ge $2 ]; then\n    echo \"[$1, $3]\"\n  elif [ $3 -ge $2 ];\
    \ then\n    echo \"[$2, $((3 - 2))]\"\n  else\n    echo \"[$3, 0]\"\n  fi\n}\n\
    \ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
    12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
    \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"\
    9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  if [ $total -lt $need ]; then\n    echo \"[$total, 0]\"\n  else\n    echo \"\
    [$((number + need)), $((total - need))]\"\n  fi\n}\n\ncandidate() {\n    eat \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11\
    \ 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate\
    \ \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") =\
    \ \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  # your code here\n\
    \  if [ $2 -gt $3 ]\n  then\n    echo \"[$(($1+$3)), 0]\"\n  else\n    echo \"\
    [$(($1+$2)), $(($3-$2))]\"\n  fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n   \
    \ [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"\
    10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n\
    \    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local left=$((total - need))\n  if [[ $left -lt 0 ]]; then\n    echo \"[$total,\
    \ 0]\"\n  else\n    echo \"[$((number + remaining)), $left]\"\n  fi\n}\n\ncandidate()\
    \ {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\"\
    \ \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n\
    \    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"\
    2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998891
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate\
    \ \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") =\
    \ \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate\
    \ \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"\
    5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n  \
    \          echo \"[$(($1 + $2)), $(($3 - $2))]\"\n        else\n            echo\
    \ \"[$(($1 + $3)), 0]\"\n        fi\n    else\n        echo \"Error: invalid input\"\
    \n    fi\n}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\"\
    \ \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n\
    \    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\"\
    \ \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
- exit_code: 1
  program: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
    \ meals.\n# you should return an array of [ total number of eaten carrots after\
    \ your meals,\n# the number of carrots left after your meals ]\n# if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12,\
    \ 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n\
    # @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n\
    # the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
    \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
    # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
    \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    # Write your code\
    \ here\n    # To print results to the standard output you can use echo\n    #\
    \ Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n\
    \    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"\
    10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n   \
    \ [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\"\
    \ \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\"\
    \ ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998890
