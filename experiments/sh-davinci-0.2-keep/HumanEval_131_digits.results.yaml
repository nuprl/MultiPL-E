language: sh
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  while (( n > 0 )); do\n    local -i\
    \ digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit ))\n  \
    \  (( n /= 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i number=$1\n  local -i digit=0\n  while (( number\
    \ > 0 )); do\n    digit=$(( number % 10 ))\n    if (( digit % 2 == 1 )); then\n\
    \      sum=$(( sum * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( result *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i prod=1\n  local -i n=$1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    (( n /= 10 ))\n \
    \ done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local product=1\n    local digit\n    while [ $n -gt 0 ];\
    \ do\n        digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i n=$1\n    local -i r=0\n    local -i d\n    while (( n > 0 )); do\n\
    \        d=$(( n % 10 ))\n        (( d % 2 == 1 )) && (( r *= d ))\n        n=$((\
    \ n / 10 ))\n    done\n    echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  if [[ $1 =~ ^[0-9]+$ ]]; then\n    local -i sum=1\n    local -i number=$1\n\
    \    while [ $number -gt 0 ]; do\n      local -i digit=$((number % 10))\n    \
    \  if [ $((digit % 2)) -eq 1 ]; then\n        sum=$((sum * digit))\n      fi\n\
    \      number=$((number / 10))\n    done\n    echo $sum\n  else\n    echo \"digits:\
    \ invalid argument\"\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    if (( digit % 2 )); then\n      prod *= digit\n    fi\n    n\
    \ /= 10\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: 'b''/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not
    found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not found\n/tmp/tmpwer1qkr0.sh:
    line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh: line 18: n: command not
    found\n/tmp/tmpwer1qkr0.sh: line 16: prod: command not found\n/tmp/tmpwer1qkr0.sh:
    line 18: n: command not found\n/tmp/tmpwer1q'
  stdout: None
  timestamp: 1659992289
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n %\
    \ 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      sum=$((sum * digit))\n  \
    \  fi\n    n=$((n / 10))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local product=1\n    local digit\n    while [ $n -gt 0 ];\
    \ do\n        digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    if (( digit % 2 )); then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i sum=1\n    for (( i=0; i<${#1}; i++ )); do\n        (( ${1:$i:1}\
    \ % 2 )) && (( sum *= ${1:$i:1} ))\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n  \
    \  n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i r=0\n  local -i d=0\n  while (( n > 0 )); do\n  \
    \  (( d = n % 10 ))\n    (( n /= 10 ))\n    (( d % 2 == 1 )) && (( r *= d ))\n\
    \  done\n  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( result *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( result *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$(( product\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    number=$((number / 10))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$(( product\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local number=$1\n    local product=1\n    while [ $number -gt 0 ]; do\n \
    \       local digit=$((number % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n\
    \            product=$((product * digit))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local number=$1\n  local product=1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    number=$((number / 10))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i n=$1\n    local -i prod=1\n    local -i digit\n    while (( n >\
    \ 0 )); do\n        digit=$(( n % 10 ))\n        if (( digit % 2 != 0 )); then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod *= digit\n    fi\n\
    \    n /= 10\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: 'b''/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bb'
  stdout: None
  timestamp: 1659992290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  # your code here\n  echo $1 | sed 's/[0-9]/& /g' | sed 's/[02468]//g' | tr\
    \ -d ' ' | sed 's/^0*//' | sed 's/\\(.*\\)/\\1/' | awk '{n=1; for (i=1; i<=NF;\
    \ i++) n*=$i; print n}'\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while (( n > 0 )); do\n   \
    \ digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local result=1\n    local num=$1\n    while [ $num -gt 0 ]; do\n        local\
    \ digit=$((num % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n           \
    \ result=$((result * digit))\n        fi\n        num=$((num / 10))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local prod=1\n    local digit\n    while [ $n -gt 0 ]; do\n\
    \        digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n      \
    \      prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n \
    \   echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  while (( num > 0 )); do\n    local -i\
    \ digit=$(( num % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n    ((\
    \ num /= 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i n=$1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n    (( n /= 10 ))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  local -i digit\n  while (( num > 0 ));\
    \ do\n    digit=$(( num % 10 ))\n    (( digit % 2 )) && (( sum *= digit ))\n \
    \   num=$(( num / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  while (( n > 0 )); do\n    local -i\
    \ digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit ))\n  \
    \  (( n /= 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    if (( digit % 2 != 0 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i total=1\n  local -i num=$1\n  while (( num > 0 )); do\n    local -i\
    \ digit=$(( num % 10 ))\n    if (( digit % 2 != 0 )); then\n      (( total *=\
    \ digit ))\n    fi\n    (( num /= 10 ))\n  done\n  echo $total\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while ((n > 0)); do\n\
    \    digit=$((n % 10))\n    ((digit % 2 == 1)) && ((prod *= digit))\n    n=$((n\
    \ / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i r=0\n  while (( n > 0 )); do\n    (( r += n % 2 ))\n\
    \    (( n /= 10 ))\n  done\n  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i r=0\n  local -i d\n  while ((n > 0)); do\n    d=$((n\
    \ % 10))\n    ((d % 2)) && ((r *= d))\n    n=$((n / 10))\n  done\n  echo $r\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( result *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i n=$1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n    (( n /= 10 ))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  local digit\n  while [ $n -gt 0 ]; do\n   \
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i d=$((\
    \ n % 10 ))\n    (( d % 2 )) && (( prod *= d ))\n    (( n /= 10 ))\n  done\n \
    \ echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$(( product\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local num=$1\n  local prod=1\n  while [ $num -gt 0 ]; do\n    local digit=$((num\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    num=$((num / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n   \
    \ digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local number=$1\n    local digit\n    local product=1\n    while [ $number\
    \ -gt 0 ]; do\n        digit=$((number % 10))\n        if [ $((digit % 2)) -ne\
    \ 0 ]; then\n            product=$((product * digit))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit=0\n  while [ $n -gt 0 ]; do\n\
    \    digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n    (( n /= 10 ))\n\
    \  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n  \
    \  n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while (( n > 0 )); do\n    local digit=$(( n %\
    \ 10 ))\n    if (( digit % 2 != 0 )); then\n      (( sum *= digit ))\n    fi\n\
    \    (( n /= 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i r=0\n  while (( n > 0 )); do\n    local -i d=$((\
    \ n % 10 ))\n    (( d % 2 == 1 )) && (( r *= d ))\n    (( n /= 10 ))\n  done\n\
    \  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  # your code here\n  echo \"$1\" | grep -o '[13579]' | tr -d '\\n' | sed 's/\\\
    (.\\)/\\1 * /g' | bc\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local r=0\n  while [ $n -gt 0 ]; do\n    local d=$((n % 10))\n\
    \    if [ $((d % 2)) -ne 0 ]; then\n      r=$((r * d))\n    fi\n    n=$((n / 10))\n\
    \  done\n  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i r=0\n  local -i d\n  while (( n > 0 )); do\n    ((\
    \ d = n % 10 ))\n    (( d % 2 == 1 )) && (( r *= d ))\n    (( n /= 10 ))\n  done\n\
    \  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local num=$1\n  while [ $num -gt 0 ]; do\n    local digit=$((\
    \ num % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local sum=1\n  local num=$1\n  while [ $num -gt 0 ]; do\n    local digit=$((num\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      sum=$((sum * digit))\n\
    \    fi\n    num=$((num / 10))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while (( n > 0 )); do\n    digit=$((\
    \ n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n    n=$(( n / 10\
    \ ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  for ((i=0; i<${#n}; i++)); do\n    local digit=${n:$i:1}\n\
    \    if [[ $digit -eq 0 ]]; then\n      continue\n    fi\n    if [[ $((digit %\
    \ 2)) -eq 1 ]]; then\n      result=$((result * digit))\n    fi\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i n=$1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n   \
    \ n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  local -i digit\n  while (( num > 0 ));\
    \ do\n    digit=$(( num % 10 ))\n    (( digit % 2 )) && (( sum *= digit ))\n \
    \   num=$(( num / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i product=1\n    local -i digit\n    local -i number=$1\n    while\
    \ (( number > 0 )); do\n        digit=$(( number % 10 ))\n        if (( digit\
    \ % 2 == 1 )); then\n            (( product *= digit ))\n        fi\n        ((\
    \ number /= 10 ))\n    done\n    echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n        local d=$((n\
    \ % 10))\n        if [ $((d % 2)) -ne 0 ]; then\n            prod=$((prod * d))\n\
    \        fi\n        n=$((n / 10))\n    done\n    echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n %\
    \ 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      sum=$((sum * digit))\n  \
    \  fi\n    n=$((n / 10))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local product=1\n  local digit\n  local number=$1\n  while [ $number -gt 0\
    \ ]; do\n    digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n \
    \     product=$((product * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local product=1\n    local digit\n    while [ $n -gt 0 ];\
    \ do\n        digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while [ $n -gt 0 ];\
    \ do\n    digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local product=1\n  local number=$1\n  local digit\n  while [ $number -gt 0\
    \ ]; do\n    digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \      product=$(( product * digit ))\n    fi\n    number=$(( number / 10 ))\n\
    \  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local product=1\n    local digit\n    while (( n > 0 ));\
    \ do\n        digit=$(( n % 10 ))\n        (( digit % 2 == 1 )) && (( product\
    \ *= digit ))\n        n=$(( n / 10 ))\n    done\n    echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local num=$1\n  local result=1\n  while [ $num -gt 0 ]; do\n    local digit=$((\
    \ num % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local product=1\n  local digit\n  for (( i=0; i<${#1}; i++ )); do\n    digit=${1:$i:1}\n\
    \    if (( digit % 2 != 0 )); then\n      product=$(( product * digit ))\n   \
    \ fi\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( result *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local res=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      res=$(( res * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $res\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  if [ $1 -lt 0 ]; then\n    echo \"ERROR: $1 is not a positive integer\"\n \
    \   exit 1\n  fi\n  local sum=1\n  for (( i=0; i<${#1}; i++ )); do\n    local\
    \ digit=${1:$i:1}\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      sum=$(( sum\
    \ * digit ))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  if [ $1 -lt 0 ]; then\n    echo \"Error: argument must be a positive integer\"\
    \n    return 1\n  fi\n  local product=1\n  local digit\n  for (( digit=0; digit<${#1};\
    \ digit++ )); do\n    local d=${1:$digit:1}\n    if [ $((d%2)) -eq 1 ]; then\n\
    \      product=$((product*d))\n    fi\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  if [ $1 -lt 0 ]; then\n    echo \"Error: argument must be a positive integer.\"\
    \n    exit 1\n  fi\n  local result=1\n  local digit\n  while [ $1 -gt 0 ]; do\n\
    \    digit=$(( $1 % 10 ))\n    if [ $(( $digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ $result * $digit ))\n    fi\n    1=$(( $1 / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: 'b''/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not
    found\n/tmp/tmphobqur7a.sh: line 22: 1=0: command not found\n/tmp/tmphobqur7a.sh:
    line 22: 1=0: command not f'
  stdout: None
  timestamp: 1659992290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n        local digit=$((n\
    \ % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n            prod=$((prod\
    \ * digit))\n        fi\n        n=$((n / 10))\n    done\n    echo $prod\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local sum=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      sum=$(( sum * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    number=$((number / 10))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local res=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      res=$(( res * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $res\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  while (( num > 0 )); do\n    local -i\
    \ digit=$(( num % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n    ((\
    \ num /= 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit=0\n  while [ $n -gt 0 ]; do\n\
    \    digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=\"$1\"\n  local sum=1\n  while [ \"$n\" -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      sum=$(( sum * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i sum=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( sum *= digit ))\n   \
    \ n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local result=1\n    local num=$1\n    while [ $num -gt 0 ]; do\n        local\
    \ digit=$((num % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n           \
    \ result=$((result * digit))\n        fi\n        num=$((num / 10))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod *= digit\n    fi\n\
    \    n /= 10\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: 'b''/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh: line 18: n: command not
    found\n/tmp/tmpxz5bbtkt.sh: line 16: prod: command not found\n/tmp/tmpxz5bbtkt.sh:
    line 18: n: command not found\n/tmp/tmpxz5bb'
  stdout: None
  timestamp: 1659992290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i n=$1\n    local -i prod=1\n    local -i digit\n    while (( n >\
    \ 0 )); do\n        digit=$(( n % 10 ))\n        (( digit % 2 )) && (( prod *=\
    \ digit ))\n        n=$(( n / 10 ))\n    done\n    echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  local -i digit\n  while (( num > 0 ));\
    \ do\n    digit=$(( num % 10 ))\n    (( digit % 2 )) && (( sum *= digit ))\n \
    \   num=$(( num / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  for (( i=0; i<${#1}; i++ )); do\n    (( ${1:$i:1} % 2 ))\
    \ && (( sum *= ${1:$i:1} ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i n=$1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    if (( digit % 2 != 0 )); then\n      sum=$(( sum * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  while (( n > 0 )); do\n    local -i\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 )); then\n      (( product *= digit\
    \ ))\n    fi\n    (( n /= 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local d=$(( n % 10\
    \ ))\n    if [ $(( d % 2 )) -eq 1 ]; then\n      prod=$(( prod * d ))\n    fi\n\
    \    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i sum=1\n    local -i num=$1\n    while (( num > 0 )); do\n      \
    \  local -i digit=$(( num % 10 ))\n        if (( digit % 2 == 1 )); then\n   \
    \         (( sum *= digit ))\n        fi\n        (( num /= 10 ))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$(( prod * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i result=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    if (( digit % 2 )); then\n      (( result *=\
    \ digit ))\n    fi\n    (( n /= 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local product=1\n  local digit\n  local number=$1\n  while [ $number -gt 0\
    \ ]; do\n    digit=$((number % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n \
    \     product=$((product * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n\n  echo $product\n}\n\ncandidate() {\n   \
    \ digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ]; do\n    digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local num=$1\n    local prod=1\n    while [ $num -gt 0 ]; do\n        local\
    \ digit=$((num % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n           \
    \ prod=$((prod * digit))\n        fi\n        num=$((num / 10))\n    done\n  \
    \  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  while (( n > 0 )); do\n    local -i\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 != 0 )); then\n      product=$(( product\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  local -i digit\n  while (( num > 0 ));\
    \ do\n    digit=$(( num % 10 ))\n    (( digit % 2 )) && (( sum *= digit ))\n \
    \   num=$(( num / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( product *= digit ))\n\
    \    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( prod *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local number=$1\n  while [ $number -gt 0 ]; do\n    local\
    \ digit=$((number % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    number=$((number / 10))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local -i n=$1\n    local -i r=0\n    local -i d=0\n    while (( n > 0 ));\
    \ do\n        d=n%10\n        (( d%2 == 1 )) && (( r*=d ))\n        (( n/=10 ))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i sum=1\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 )) && (( sum *= digit ))\n    n=$((\
    \ n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local digit=$((n\
    \ % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product * digit))\n\
    \    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992284
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product=1\n  local digit\n  while [ $n -gt 0 ]; do\n  \
    \  digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i product=1\n  local -i n=$1\n  while (( n > 0 )); do\n    local -i\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 == 1 )); then\n      (( product *=\
    \ digit ))\n    fi\n    (( n /= 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      sum=$(( sum * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  echo \"$1\" | grep -o '[13579]' | tr -d '\\n' | wc -m\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      sum=$(( sum * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local result=1\n  local num=$1\n  while [ $num -gt 0 ]; do\n    local digit=$((\
    \ num % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local digit=$((\
    \ n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local sum=1\n  while [ $n -gt 0 ]; do\n    local digit=$(( n\
    \ % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      sum=$(( sum * digit\
    \ ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i product=1\n  local -i digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( product *= digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  while [ $num -gt 0 ]; do\n    local -i\
    \ digit=$((num % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      sum=$((sum\
    \ * digit))\n    fi\n    num=$((num / 10))\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local -i digit=$((\
    \ n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n    (( n /= 10 ))\n\
    \  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i sum=1\n  local -i num=$1\n  while [ $num -gt 0 ]; do\n    local -i\
    \ digit=$((num % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      sum=$((sum\
    \ * digit))\n    fi\n    num=$((num / 10))\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local -i n=$1\n  local -i sum=0\n  local -i digit\n  while (( n > 0 )); do\n\
    \    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( sum += digit ))\n   \
    \ n=$(( n / 10 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992285
