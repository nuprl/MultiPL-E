name: HumanEval_1_separate_paren_groups
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Input to this function is a string containing multiple groups\
  \ of nested parentheses. Your goal is to\n# separate those group into separate strings\
  \ and return the list of those.\n# Separate groups are balanced (each open brace\
  \ is properly closed) and not nested within each other\n# Ignore any spaces in the\
  \ input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# ['()', '(())',\
  \ '(()())']\n#\n# $1 is a string\nseparate_paren_groups() {\n"
tests: "}\n\ncandidate() {\n    separate_paren_groups \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"(()()) ((())) () ((())()())\"\
  \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"() (()) ((())) (((())))\"\
  \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"(()(())((())))\" ]]\n    [[ $(candidate\
  \ \"( ) (( )) (( )( ))\") = \"() (()) (()())\" ]]\n}\n\nrun_test"
completions: ["    # your code here\n    echo \"Not implemented\"", "    # TODO: Your\
    \ code here\n    # Hint: You may want to use a stack to solve this problem\n \
    \   # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to use a stack to solve\
    \ this problem\n    # Hint: You may want to use a stack to solve this problem\n\
    \    # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to use a stack to solve\
    \ this problem\n    # Hint: You may want to use a stack to solve this problem\n\
    \    # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to use a stack to solve\
    \ this problem\n    # Hint: You may want to use a stack to solve this problem\n\
    \    # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to use a stack to solve\
    \ this problem\n    # Hint: You may want to use a stack to solve this problem\n\
    \    # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to use a stack to solve\
    \ this problem\n    # Hint: You may want to use a stack to solve this problem\n\
    \    # Hint: You may want to use a stack to solve this problem\n    # Hint: You\
    \ may want to use a stack to solve this problem\n    # Hint: You may want to use\
    \ a stack to solve this problem\n    # Hint: You may want to", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the following to check if a string is\
    \ balanced:\n    # python -c \"import sys; from paren_checker import is_balanced;\
    \ print(is_balanced(sys.argv[1]))\" \"$1\"\n    #\n    # Hint: You can use the\
    \ following to check if a string is balanced:\n    # python -c \"import sys; from\
    \ paren_checker import is_balanced; print(is_balanced(sys.argv[1]))\" \"$1\"\n\
    \    #\n    # Hint: You can use the following to check if a string is balanced:\n\
    \    # python -c \"import sys; from paren_checker import is_balanced; print(is_balanced(sys.argv[1]))\"\
    \ \"$1\"\n    #\n    # Hint: You can use the following to check if a string is\
    \ balanced:\n    # python -c \"import sys; from paren_checker import is_balanced;\
    \ print(is_balanced(sys.argv[1]))\" \"$1\"\n    #\n    # Hint: You can use the\
    \ following to check if a string is balanced:\n    # python -c \"import sys; from\
    \ paren_checker import is_balanced; print(is_balanced(sys.argv[1]))\" \"$1\"\n\
    \    #\n    # Hint: You can use the following to check if a string is balanced:\n\
    \    # python -c \"import sys; from paren_checker import is_balanced; print(is_balanced(sys.argv[1]))\"\
    \ \"$1\"\n    #\n    # Hint: You can use the following to check if a string is\
    \ balanced:\n    # python -c \"import sys; from paren_checker import is_balanced;\
    \ print(is_balanced(sys.argv[1]))\" \"$1\"\n    #\n    # Hint: You can use the\
    \ following to check if a string is balanced:\n    # python -c \"import sys; from\
    \ paren_checker import is_balanced; print(is_balanced(sys.argv[1]))\" \"$1\"\n\
    \    #\n    # Hint: You can use the following to check if a", "    # TODO: Write\
    \ your code here\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # Write your code here\n    echo \"Not implemented\"",
  "    # TODO: your code here\n    # Hint: use the `grep` command to find the groups\
    \ of parentheses\n    # Hint: use the `sed` command to remove the spaces from\
    \ the input string\n    # Hint: use the `tr` command to remove the spaces from\
    \ the input string\n    # Hint: use the `grep` command to find the groups of parentheses\n\
    \    # Hint: use the `sed` command to remove the spaces from the input string\n\
    \    # Hint: use the `tr` command to remove the spaces from the input string\n\
    \    # Hint: use the `grep` command to find the groups of parentheses\n    # Hint:\
    \ use the `sed` command to remove the spaces from the input string\n    # Hint:\
    \ use the `tr` command to remove the spaces from the input string\n    # Hint:\
    \ use the `grep` command to find the groups of parentheses\n    # Hint: use the\
    \ `sed` command to remove the spaces from the input string\n    # Hint: use the\
    \ `tr` command to remove the spaces from the input string\n    # Hint: use the\
    \ `grep` command to find the groups of parentheses\n    # Hint: use the `sed`\
    \ command to remove the spaces from the input string\n    # Hint: use the `tr`\
    \ command to remove the spaces from the input string\n    # Hint: use the `grep`\
    \ command to find the groups of parentheses\n    # Hint: use the `sed` command\
    \ to remove the spaces from the input string\n    # Hint: use the `tr` command\
    \ to remove the spaces from the input string\n    # Hint: use the `grep` command\
    \ to find the groups of parentheses\n    # Hint: use the `sed` command to remove\
    \ the spaces from the input string\n    # Hint: use the `tr` command to remove\
    \ the spaces from the input string\n    # Hint: use the `grep` command to find\
    \ the groups of parentheses\n    # Hint: use the `sed` command to remove the spaces\
    \ from the input string\n    # Hint: use the `tr` command to remove the spaces\
    \ from the input string\n    # Hint: use the `grep` command to find the groups\
    \ of parentheses\n    # Hint: use the `sed` command", "    # TODO: implement this\
    \ function\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # your code here\n    echo \"Not implemented\"",
  "    local input=$1\n    local output=()\n    local current_group=\"\"\n    local\
    \ open_parens=0\n    local close_parens=0\n    for (( i=0; i<${#input}; i++ ));\
    \ do\n        local char=${input:$i:1}\n        if [[ $char == \"(\" ]]; then\n\
    \            open_parens=$((open_parens+1))\n        elif [[ $char == \")\" ]];\
    \ then\n            close_parens=$((close_parens+1))\n        fi\n        current_group+=$char\n\
    \        if [[ $open_parens == $close_parens ]]; then\n            output+=(\"\
    $current_group\")\n            current_group=\"\"\n            open_parens=0\n\
    \            close_parens=0\n        fi\n    done\n    echo \"${output[@]}\"",
  "    # Write your code here\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    # Hint: You may want to use the `tr` command to remove spaces\
    \ from the input string\n    # Hint: You may want to use the `sed` command to\
    \ remove the outermost parentheses from each group\n    # Hint: You may want to\
    \ use the `grep` command to find the groups\n    # Hint: You may want to use the\
    \ `sort` command to sort the groups\n    # Hint: You may want to use the `uniq`\
    \ command to remove duplicates from the list\n    # Hint: You may want to use\
    \ the `xargs` command to return the list as a string\n    # Hint: You may want\
    \ to use the `tr` command to remove the newline character from the string\n  \
    \  # Hint: You may want to use the `echo` command to format the string as a Python\
    \ list\n    # Hint: You may want to use the `sed` command to remove the surrounding\
    \ quotes from the string\n    # Hint: You may want to use the `sed` command to\
    \ remove the surrounding brackets from the string\n    # Hint: You may want to\
    \ use the `sed` command to remove the spaces from the string\n    echo $1 | tr\
    \ -d ' ' | sed 's/^(//' | sed 's/)$//' | grep -o '\\(.*\\)' | sort | uniq | xargs\
    \ | tr -d '\\n' | echo \"[\"`sed 's/^\"//' | sed 's/\"$//'`\"]\" | sed 's/ /,\
    \ /g'", "    # TODO: implement this function\n    echo \"Not implemented\"", " \
    \   # TODO: Your code here\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"Not implemented\"", "    # your code here\n    echo\
    \ \"Not yet implemented\"", "    # TODO: implement this function\n    echo \"\
    TODO\"", "  # your code here\n  echo $1 | tr -d ' '", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # To debug:\
    \ echo \"Debug messages...\" >&2\n    echo \"Not implemented\"", "    # TODO:\
    \ Implement this function\n    echo \"Not implemented\"", "    # Write your code\
    \ here\n    # You can use the following command to split the string into an array\n\
    \    # arr=($(echo $1 | tr -d ' '))\n    # You can use the following command to\
    \ print the array\n    # echo ${arr[@]}\n    # You can use the following command\
    \ to print the length of the array\n    # echo ${#arr[@]}\n    # You can use the\
    \ following command to print the length of an element in the array\n    # echo\
    \ ${#arr[0]}\n    # You can use the following command to print the first element\
    \ in the array\n    # echo ${arr[0]}\n    # You can use the following command\
    \ to print the last element in the array\n    # echo ${arr[-1]}\n    # You can\
    \ use the following command to print the last element in the array\n    # echo\
    \ ${arr[-1]}\n    # You can use the following command to print the last element\
    \ in the array\n    # echo ${arr[-1]}\n    # You can use the following command\
    \ to print the last element in the array\n    # echo ${arr[-1]}\n    # You can\
    \ use the following command to print the last element in the array\n    # echo\
    \ ${arr[-1]}\n    # You can use the following command to print the last element\
    \ in the array\n    # echo ${arr[-1]}\n    # You can use the following command\
    \ to print the last element in the array\n    # echo ${arr[-1]}\n    # You can\
    \ use the following command to print the last element in the array\n    # echo\
    \ ${arr[-1]}\n    # You can use the following command to print the last element\
    \ in the array\n    # echo ${arr[-1]}\n    # You can use the following command\
    \ to print the last element in the array\n    # echo ${arr[-1]}\n    # You can\
    \ use the following command to print the last element in the array\n    # echo\
    \ ${arr[-1]}\n    # You can use the following command to print the last element\
    \ in the array\n    # echo ${arr[-1]}\n    # You can use the following command\
    \ to print the last element in the array\n    # echo ${arr[-1]}\n    # You can\
    \ use the following command to print the last element in the array\n", "    #\
    \ TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: Implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  "    # TODO: Implement this function\n    # Hint: You can use the following command\
    \ to remove all spaces from the input string\n    # $1 | tr -d ' '\n    # Hint:\
    \ You can use the following command to find the index of the first closing parenthesis\n\
    \    # $1 | grep -o ')' | head -n 1\n    # Hint: You can use the following command\
    \ to find the index of the last opening parenthesis\n    # $1 | grep -o '(' |\
    \ tail -n 1\n    # Hint: You can use the following command to find the index of\
    \ the last closing parenthesis\n    # $1 | grep -o ')' | tail -n 1\n    # Hint:\
    \ You can use the following command to find the index of the first opening parenthesis\n\
    \    # $1 | grep -o '(' | head -n 1\n    # Hint: You can use the following command\
    \ to find the index of the first opening parenthesis after the first closing parenthesis\n\
    \    # $1 | grep -o '(' | tail -n +2 | head -n 1\n    # Hint: You can use the\
    \ following command to find the index of the last closing parenthesis before the\
    \ last opening parenthesis\n    # $1 | grep -o ')' | tail -n +2 | head -n 1\n\
    \    # Hint: You can use the following command to find the index of the first\
    \ opening parenthesis after the first closing parenthesis\n    # $1 | grep -o\
    \ '(' | tail -n +2 | head -n 1\n    # Hint: You can use the following command\
    \ to find the index of the last closing parenthesis before the last opening parenthesis\n\
    \    # $1 | grep -o ')' | tail -n +2 | head -n 1\n    # Hint: You can use the\
    \ following command to find the index of the first opening parenthesis after the\
    \ first closing parenthesis\n    # $1 | grep -o '(' | tail -n +2 | head -n 1\n\
    \    # Hint: You can use the following command to find the index of the last closing\
    \ parenthesis before the last opening parenthesis\n    # $1 | grep -o ')' | tail\
    \ -n +2 | head -n 1\n    # Hint: You can use the following command to find the\
    \ index of the first opening", "    # Write your code here\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    echo $1\
    \ | tr -d ' ' | sed -e 's/)(/)\\n(/g'", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # your code here\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    # Your\
    \ code here\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    # Hint:\
    \ use the following command to extract the contents of a group of parentheses\n\
    \    # echo $1 | sed -e 's/.*(\\(.*\\)).*/\\1/'\n    echo $1 | sed -e 's/[^()]//g'\
    \ | sed -e 's/\\(/\\n(\\1/g' | sed -e 's/\\)/\\1)\\n/g' | sed -e '/^$/d' | sed\
    \ -e 's/^(//' | sed -e 's/)$//'", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    local\
    \ string=$1\n    local result=()\n    local group=\"\"\n    local paren_count=0\n\
    \    for (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} == \"\
    (\" ]]; then\n            ((paren_count++))\n            group+=\"(\"\n      \
    \  elif [[ ${string:$i:1} == \")\" ]]; then\n            ((paren_count--))\n \
    \           group+=\")\"\n        fi\n        if [[ $paren_count == 0 ]]; then\n\
    \            result+=(\"$group\")\n            group=\"\"\n        fi\n    done\n\
    \    echo \"${result[@]}\"", "    # TODO: Your code here\n    echo \"Not implemented\"",
  "    echo $1 | tr -d ' ' | sed -e 's/)(/)\\n(/g'", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # Your code here\n    echo \"Not implemented\"", "    # TODO: implement this\
    \ function\n    echo \"Not implemented\"", "    # TODO: Your code here\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # TODO: Implement this function\n    # Hint: Use the `grep` command to find\
    \ the groups of parentheses\n    # Hint: Use the `tr` command to remove spaces\n\
    \    # Hint: Use the `sed` command to remove the outer parentheses\n    # Hint:\
    \ Use the `tr` command to convert the string into a list\n    # Hint: Use the\
    \ `sort` command to sort the list\n    # Hint: Use the `uniq` command to remove\
    \ duplicates\n    # Hint: Use the `tr` command to convert the list back into a\
    \ string\n    echo \"$1\" | tr -d ' ' | grep -o '\\([^()]*\\)' | sed 's/^(//'\
    \ | sed 's/)$//' | tr '\\n' ' ' | sort | uniq | tr ' ' '\\n'", "    # your code\
    \ here\n    echo \"Not yet implemented\"", "    # TODO: Write code here\n    #\
    \ Hint: Use the following command to remove all spaces from the input string\n\
    \    # $1 is a string\n    # $1=${1// /}\n    # Hint: Use the following command\
    \ to check if a string is empty\n    # [ -z \"$1\" ]\n    # Hint: Use the following\
    \ command to check if a string starts with a certain character\n    # [[ $1 ==\
    \ '('* ]]\n    # Hint: Use the following command to check if a string ends with\
    \ a certain character\n    # [[ $1 == *')' ]]\n    # Hint: Use the following command\
    \ to remove the first character from a string\n    # ${1:1}\n    # Hint: Use the\
    \ following command to remove the last character from a string\n    # ${1::-1}\n\
    \    # Hint: Use the following command to append a string to a list\n    # list=(\"\
    ${list[@]}\" \"$1\")\n    # Hint: Use the following command to print a list\n\
    \    # echo \"${list[@]}\"\n    # Hint: Use the following command to print a list\
    \ in a single line\n    # echo \"${list[@]}\" | tr ' ' '\\n'\n    # Hint: Use\
    \ the following command to sort a list\n    # list=($(echo \"${list[@]}\" | tr\
    \ ' ' '\\n' | sort))\n    # Hint: Use the following command to remove duplicates\
    \ from a list\n    # list=($(echo \"${list[@]}\" | tr ' ' '\\n' | sort | uniq))\n\
    \    # Hint: Use the following command to remove duplicates from a list\n    #\
    \ list=($(echo \"${list[@]}\" | tr ' ' '\\n' | sort | uniq))\n    # Hint: Use\
    \ the following command to remove duplicates from a list\n    # list=($(echo \"\
    ${list[@]}\" | tr ' ' '\\n' | sort | uniq))\n    # Hint: Use the following command\
    \ to remove duplicates from a list\n    # list=($(echo \"${list[@]}\" | tr ' '\
    \ '\\n' | sort | uniq))\n    # H", "    # Write your code here\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n", "    # TODO: Implement this function\n    # Hint: You can use a stack\
    \ to solve this problem\n    # Hint: You can use a stack to solve this problem\n\
    \    # Hint: You can use a stack to solve this problem\n    # Hint: You can use\
    \ a stack to solve this problem\n    # Hint: You can use a stack to solve this\
    \ problem\n    # Hint: You can use a stack to solve this problem\n    # Hint:\
    \ You can use a stack to solve this problem\n    # Hint: You can use a stack to\
    \ solve this problem\n    # Hint: You can use a stack to solve this problem\n\
    \    # Hint: You can use a stack to solve this problem\n    # Hint: You can use\
    \ a stack to solve this problem\n    # Hint: You can use a stack to solve this\
    \ problem\n    # Hint: You can use a stack to solve this problem\n    # Hint:\
    \ You can use a stack to solve this problem\n    # Hint: You can use a stack to\
    \ solve this problem\n    # Hint: You can use a stack to solve this problem\n\
    \    # Hint: You can use a stack to solve this problem\n    # Hint: You can use\
    \ a stack to solve this problem\n    # Hint: You can use a stack to solve this\
    \ problem\n    # Hint: You can use a stack to solve this problem\n    # Hint:\
    \ You can use a stack to solve this problem\n    # Hint: You can use a stack to\
    \ solve this problem\n    # Hint: You can use a stack to solve this problem\n\
    \    # Hint: You can use a stack to solve this problem\n    # Hint: You can use\
    \ a stack to solve this problem\n    # Hint: You can use a stack to solve this\
    \ problem\n    # Hint: You can use a stack to solve this problem\n    # Hint:\
    \ You can use a stack to solve this problem\n    # Hint: You can use a stack to\
    \ solve this problem\n    # Hint: You can use a stack to solve this problem\n\
    \    # Hint: You can use a stack to solve this problem\n    # Hint: You can use\
    \ a stack to solve this problem\n    # Hint: You can use a stack to solve this\
    \ problem\n    # Hint: You can", "    # TODO: Implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    local input=\"$1\"\n    local output=()\n    local i=0\n    local j=0\n   \
    \ local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local\
    \ p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n\
    \    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n \
    \   local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n\
    \    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n\
    \    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n\
    \    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n\
    \    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n\
    \    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local\
    \ ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n\
    \    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local\
    \ mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n\
    \    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local\
    \ vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n\
    \    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local\
    \ eeee", "    local string=\"$1\"\n    local result=()\n    local current_group=\"\
    \"\n    local paren_count=0\n    for (( i=0; i<${#string}; i++ )); do\n      \
    \  local char=\"${string:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n\
    \            paren_count=$((paren_count+1))\n        elif [[ \"$char\" == \")\"\
    \ ]]; then\n            paren_count=$((paren_count-1))\n        fi\n        current_group=\"\
    $current_group$char\"\n        if [[ \"$paren_count\" == 0 ]]; then\n        \
    \    result+=(\"$current_group\")\n            current_group=\"\"\n        fi\n\
    \    done\n    echo \"${result[@]}\"", "    # Your code here\n    echo \"Not implemented\"",
  "    local input=$1\n    local output=()\n    local temp=\"\"\n    local count=0\n\
    \    local i=0\n    local len=${#input}\n    for ((i=0; i<len; i++)); do\n   \
    \     if [[ ${input:$i:1} == \"(\" ]]; then\n            ((count++))\n       \
    \ elif [[ ${input:$i:1} == \")\" ]]; then\n            ((count--))\n        fi\n\
    \        temp+=\"${input:$i:1}\"\n        if [[ $count == 0 ]]; then\n       \
    \     output+=(\"$temp\")\n            temp=\"\"\n        fi\n    done\n    echo\
    \ \"${output[@]}\"", "    # TODO: implement this function\n    # Hint: use a stack\
    \ to keep track of open parentheses\n    # Hint: use a list to keep track of the\
    \ separated groups\n    # Hint: use the split_string function to split the string\
    \ into characters\n    # Hint: use the is_open_paren function to determine if\
    \ a character is an open parenthesis\n    # Hint: use the is_close_paren function\
    \ to determine if a character is a close parenthesis\n    # Hint: use the is_empty_stack\
    \ function to determine if the stack is empty\n    # Hint: use the push_stack\
    \ function to push an item onto the stack\n    # Hint: use the pop_stack function\
    \ to pop an item off the stack\n    # Hint: use the peek_stack function to peek\
    \ at the top item on the stack\n    # Hint: use the append_list function to append\
    \ an item to the list\n    # Hint: use the join_list function to join the list\
    \ into a string\n    # Hint: use the is_empty_list function to determine if the\
    \ list is empty\n    # Hint: use the remove_list function to remove an item from\
    \ the list\n    # Hint: use the get_list_length function to get the length of\
    \ the list\n    # Hint: use the get_list_item function to get an item from the\
    \ list\n    # Hint: use the is_equal function to compare two strings\n    # Hint:\
    \ use the is_not_equal function to compare two strings\n    # Hint: use the is_equal\
    \ function to compare two strings\n    # Hint: use the is_not_equal function to\
    \ compare two strings\n    # Hint: use the is_equal function to compare two strings\n\
    \    # Hint: use the is_not_equal function to compare two strings\n    # Hint:\
    \ use the is_equal function to compare two strings\n    # Hint: use the is_not_equal\
    \ function to compare two strings\n    # Hint: use the is_equal function to compare\
    \ two strings\n    # Hint: use the is_not_equal function to compare two strings\n\
    \    # Hint: use the is_equal function to compare two strings\n    # Hint: use\
    \ the is_not_equal function to compare two strings\n   ", "    # TODO: Write your\
    \ code here\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    # Hint:\
    \ use the `grep` command to find the strings you want\n    # Hint: use the `sed`\
    \ command to remove the strings you want\n    # Hint: use the `tr` command to\
    \ remove spaces\n    # Hint: use the `rev` command to reverse the string\n   \
    \ # Hint: use the `rev` command to reverse the string\n    # Hint: use the `rev`\
    \ command to reverse the string\n    # Hint: use the `rev` command to reverse\
    \ the string\n    # Hint: use the `rev` command to reverse the string\n    # Hint:\
    \ use the `rev` command to reverse the string\n    # Hint: use the `rev` command\
    \ to reverse the string\n    # Hint: use the `rev` command to reverse the string\n\
    \    # Hint: use the `rev` command to reverse the string\n    # Hint: use the\
    \ `rev` command to reverse the string\n    # Hint: use the `rev` command to reverse\
    \ the string\n    # Hint: use the `rev` command to reverse the string\n    # Hint:\
    \ use the `rev` command to reverse the string\n    # Hint: use the `rev` command\
    \ to reverse the string\n    # Hint: use the `rev` command to reverse the string\n\
    \    # Hint: use the `rev` command to reverse the string\n    # Hint: use the\
    \ `rev` command to reverse the string\n    # Hint: use the `rev` command to reverse\
    \ the string\n    # Hint: use the `rev` command to reverse the string\n    # Hint:\
    \ use the `rev` command to reverse the string\n    # Hint: use the `rev` command\
    \ to reverse the string\n    # Hint: use the `rev` command to reverse the string\n\
    \    # Hint: use the `rev` command to reverse the string\n    # Hint: use the\
    \ `rev` command to reverse the string\n    # Hint: use the `rev` command to reverse\
    \ the string\n    # Hint: use the `rev` command to reverse the string\n    # Hint:\
    \ use the `rev` command to reverse the string\n    # Hint: use the `rev` command\
    \ to reverse the string\n    #", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    # Hint: you\
    \ may want to use a stack to keep track of open parentheses\n    # Hint: you may\
    \ want to use a list to keep track of the separate groups\n    # Hint: you may\
    \ want to use a counter to keep track of the number of open parentheses\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n    #\
    \ Hint: you may want to use a string to keep track of the current group\n   ",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    local\
    \ string=\"$1\"\n    local result=()\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n\
    \    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n\
    \    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n\
    \    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n\
    \    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n\
    \    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local\
    \ ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n\
    \    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local\
    \ mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n\
    \    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local\
    \ vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n\
    \    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local\
    \ eeee", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # Write your code here\n    echo \"Not implemented\"", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    # Hint: use a stack\n    # Hint: use a list to store the results\n    # Hint:\
    \ use a string to store the current group\n    # Hint: use a loop to iterate through\
    \ the input string\n    # Hint: use a loop to iterate through the stack\n    #\
    \ Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n    # Hint: use a loop to iterate through the stack\n  \
    \  # Hint: use a loop to iterate through the list\n    # Hint: use a loop to iterate\
    \ through the string\n", "    # TODO: Implement this function\n    # Hint: Use\
    \ a stack\n    # Hint: Use a variable to keep track of the current group\n   \
    \ # Hint: Use a variable to keep track of the current group\n    # Hint: Use a\
    \ variable to keep track of the current group\n    # Hint: Use a variable to keep\
    \ track of the current group\n    # Hint: Use a variable to keep track of the\
    \ current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the", "    #\
    \ TODO: implement this function\n    # Hint: use the following command to get\
    \ the number of open parentheses in a string:\n    # echo \"$1\" | grep -o '('\
    \ | wc -l\n    # Hint: use the following command to get the number of close parentheses\
    \ in a string:\n    # echo \"$1\" | grep -o ')' | wc -l\n    # Hint: use the following\
    \ command to remove the first and last parentheses from a string:\n    # echo\
    \ \"$1\" | sed 's/^(//' | sed 's/)$//'\n    # Hint: use the following command\
    \ to remove the last character from a string:\n    # echo \"$1\" | sed 's/.$//'\n\
    \    # Hint: use the following command to remove the first character from a string:\n\
    \    # echo \"$1\" | sed 's/^.//'\n    # Hint: use the following command to get\
    \ the last character from a string:\n    # echo \"$1\" | sed 's/.$//'\n    # Hint:\
    \ use the following command to get the first character from a string:\n    # echo\
    \ \"$1\" | sed 's/^.//'\n    # Hint: use the following command to get the length\
    \ of a string:\n    # echo \"$1\" | wc -c\n    # Hint: use the following command\
    \ to get the substring of a string:\n    # echo \"$1\" | cut -c2-\n    # Hint:\
    \ use the following command to get the substring of a string:\n    # echo \"$1\"\
    \ | cut -c1\n    # Hint: use the following command to get the substring of a string:\n\
    \    # echo \"$1\" | cut -c2-\n    # Hint: use the following command to get the\
    \ substring of a string:\n    # echo \"$1\" | cut -c1\n    # Hint: use the following\
    \ command to get the substring of a string:\n    # echo \"$1\" | cut -c2-\n  \
    \  # Hint: use the following command to get the substring of a string:\n    #\
    \ echo \"$1\" | cut -c1\n    # Hint: use the following command to get the substring\
    \ of a string:\n    # echo", "    # TODO: write your code here\n    local input=$1\n\
    \    local output=()\n    local temp=\"\"\n    local count=0\n    for ((i=0; i<${#input};\
    \ i++)); do\n        if [[ ${input:$i:1} == \"(\" ]]; then\n            count=$((count+1))\n\
    \        elif [[ ${input:$i:1} == \")\" ]]; then\n            count=$((count-1))\n\
    \        fi\n        temp=\"$temp${input:$i:1}\"\n        if [[ $count == 0 ]];\
    \ then\n            output+=(\"$temp\")\n            temp=\"\"\n        fi\n \
    \   done\n    echo \"${output[@]}\"", "    # TODO: Implement this function\n \
    \   echo \"Not implemented\"", "    # TODO: Implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "  echo $1\
    \ | tr -d ' ' | sed -e 's/)(/)\\n(/g'", "    # TODO: Implement this function\n\
    \    # Hint: You can use the following command to get the number of open parentheses\
    \ in a string:\n    # echo \"$1\" | grep -o '(' | wc -l\n    # Hint: You can use\
    \ the following command to get the number of close parentheses in a string:\n\
    \    # echo \"$1\" | grep -o ')' | wc -l\n    # Hint: You can use the following\
    \ command to remove the first character from a string:\n    # echo \"$1\" | cut\
    \ -c 2-\n    # Hint: You can use the following command to remove the last character\
    \ from a string:\n    # echo \"$1\" | rev | cut -c 2- | rev\n    # Hint: You can\
    \ use the following command to remove the first and last character from a string:\n\
    \    # echo \"$1\" | cut -c 2- | rev | cut -c 2- | rev\n    # Hint: You can use\
    \ the following command to get the length of a string:\n    # echo \"$1\" | wc\
    \ -c\n    # Hint: You can use the following command to get the first character\
    \ of a string:\n    # echo \"$1\" | cut -c 1\n    # Hint: You can use the following\
    \ command to get the last character of a string:\n    # echo \"$1\" | rev | cut\
    \ -c 1 | rev\n    # Hint: You can use the following command to get the first and\
    \ last character of a string:\n    # echo \"$1\" | cut -c 1 | rev | cut -c 1 |\
    \ rev\n    # Hint: You can use the following command to get the first and last\
    \ character of a string:\n    # echo \"$1\" | cut -c 1 | rev | cut -c 1 | rev\n\
    \    # Hint: You can use the following command to get the first and last character\
    \ of a string:\n    # echo \"$1\" | cut -c 1 | rev | cut -c 1 | rev\n    # Hint:\
    \ You can use the following command to get the first and last character of a string:\n\
    \    # echo \"$1\" | cut -c 1 | rev | cut -c 1 | rev\n    # Hint: You can use\
    \ the following command to get the first and last character of a string:\n   ",
  "    # TODO: Your code here\n    echo \"Not implemented\"", "    # TODO: implement\
    \ this function\n    # Hint: you can use the following variables:\n    # $1: the\
    \ input string\n    # $OPEN_PAREN: the character '('\n    # $CLOSE_PAREN: the\
    \ character ')'\n    # $OPEN_BRACKET: the character '['\n    # $CLOSE_BRACKET:\
    \ the character ']'\n    # $OPEN_BRACE: the character '{'\n    # $CLOSE_BRACE:\
    \ the character '}'\n    # $OPEN_ANGLE: the character '<'\n    # $CLOSE_ANGLE:\
    \ the character '>'\n    # $OPEN_SQUARE: the character '['\n    # $CLOSE_SQUARE:\
    \ the character ']'\n    # $OPEN_CURLY: the character '{'\n    # $CLOSE_CURLY:\
    \ the character '}'\n    # $OPEN_ANGULAR: the character '<'\n    # $CLOSE_ANGULAR:\
    \ the character '>'\n    # $OPEN_CHEVRON: the character '['\n    # $CLOSE_CHEVRON:\
    \ the character ']'\n    # $OPEN_DIAMOND: the character '{'\n    # $CLOSE_DIAMOND:\
    \ the character '}'\n    # $OPEN_DOUBLE_ANGLE: the character '<'\n    # $CLOSE_DOUBLE_ANGLE:\
    \ the character '>'\n    # $OPEN_DOUBLE_SQUARE: the character '['\n    # $CLOSE_DOUBLE_SQUARE:\
    \ the character ']'\n    # $OPEN_DOUBLE_CURLY: the character '{'\n    # $CLOSE_DOUBLE_CURLY:\
    \ the character '}'\n    # $OPEN_DOUBLE_ANGULAR: the character '<'\n    # $CLOSE_DOUBLE_ANGULAR:\
    \ the character '>'\n    # $OPEN_DOUBLE_CHEVRON: the character '['\n    # $CLOSE_DOUBLE_CHEVRON:\
    \ the character ']'\n    # $OPEN_DOUBLE_DIAMOND: the character '{'\n    # $CLOSE_D",
  "    # TODO: Implement this function\n    echo \"TODO\"", "    echo $1 | sed -e\
    \ 's/[()]//g' | sed -e 's/\\(.*\\)/(\\1)/g' | sed -e 's/\\(.*\\)/\\1)/g'", " \
    \   # TODO: implement this function\n    echo \"Not implemented\"", "    local\
    \ str=\"$1\"\n    local result=()\n    local current_group=\"\"\n    local open_parens=0\n\
    \    local close_parens=0\n    local i=0\n    local len=${#str}\n    while [ $i\
    \ -lt $len ]; do\n        local char=${str:$i:1}\n        if [ \"$char\" == \"\
    (\" ]; then\n            open_parens=$((open_parens + 1))\n        elif [ \"$char\"\
    \ == \")\" ]; then\n            close_parens=$((close_parens + 1))\n        fi\n\
    \        current_group=\"$current_group$char\"\n        if [ $open_parens -eq\
    \ $close_parens ]; then\n            result+=(\"$current_group\")\n          \
    \  current_group=\"\"\n            open_parens=0\n            close_parens=0\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo \"${result[@]}\"", "  #\
    \ TODO: implement this function\n  # Hint: use the following command to extract\
    \ the first group of parentheses\n  # echo \"$1\" | sed -e 's/^\\([^()]*\\).*$/\\\
    1/'\n  # Hint: use the following command to remove the first group of parentheses\n\
    \  # echo \"$1\" | sed -e 's/^[^()]*\\(.*\\)$/\\1/'\n  # Hint: use the following\
    \ command to remove all spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n\
    \  # Hint: use the following command to remove all spaces from a string\n  # echo\
    \ \"$1\" | sed -e 's/ //g'\n  # Hint: use the following command to remove all\
    \ spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n  # Hint: use the following\
    \ command to remove all spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n\
    \  # Hint: use the following command to remove all spaces from a string\n  # echo\
    \ \"$1\" | sed -e 's/ //g'\n  # Hint: use the following command to remove all\
    \ spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n  # Hint: use the following\
    \ command to remove all spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n\
    \  # Hint: use the following command to remove all spaces from a string\n  # echo\
    \ \"$1\" | sed -e 's/ //g'\n  # Hint: use the following command to remove all\
    \ spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n  # Hint: use the following\
    \ command to remove all spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n\
    \  # Hint: use the following command to remove all spaces from a string\n  # echo\
    \ \"$1\" | sed -e 's/ //g'\n  # Hint: use the following command to remove all\
    \ spaces from a string\n  # echo \"$1\" | sed -e 's/ //g'\n", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: Implement this function\n\
    \    # Hint: Use a stack to keep track of open parentheses\n    # Hint: Use a\
    \ queue to keep track of the groups\n    # Hint: Use a counter to keep track of\
    \ the number of open parentheses\n    # Hint: Use a counter to keep track of the\
    \ number of closed parentheses\n    # Hint: Use a counter to keep track of the\
    \ number of open parentheses\n    # Hint: Use a counter to keep track of the number\
    \ of closed parentheses\n    # Hint: Use a counter to keep track of the number\
    \ of open parentheses\n    # Hint: Use a counter to keep track of the number of\
    \ closed parentheses\n    # Hint: Use a counter to keep track of the number of\
    \ open parentheses\n    # Hint: Use a counter to keep track of the number of closed\
    \ parentheses\n    # Hint: Use a counter to keep track of the number of open parentheses\n\
    \    # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint: Use a counter to keep track of the number of open parentheses\n \
    \   # Hint: Use a counter to keep track of the number of closed parentheses\n\
    \    # Hint", "    # TODO: Your code here\n    # Hint: You can use the following\
    \ to check if a string is empty:\n    # if [ -z \"$string\" ]; then ...\n    #\n\
    \    # Hint: You can use the following to check if a string contains a substring:\n\
    \    # if [[ $string == *\"substring\"* ]]; then ...\n    #\n    # Hint: You can\
    \ use the following to remove the first and last characters of a string:\n   \
    \ # string=${string:1:-1}\n    #\n    # Hint: You can use the following to get\
    \ the length of a string:\n    # length=${#string}\n    #\n    # Hint: You can\
    \ use the following to get the index of the first occurrence of a substring in\
    \ a string:\n    # index=$(expr index \"$string\" \"substring\")\n    #\n    #\
    \ Hint: You can use the following to get a substring of a string:\n    # substring=${string:start:length}\n\
    \    #\n    # Hint: You can use the following to append a string to an array:\n\
    \    # array+=(\"$string\")\n    #\n    # Hint: You can use the following to print\
    \ an array:\n    # printf '%s\\n' \"${array[@]}\"\n    #\n    # Hint: You can\
    \ use the following to print an array, one element per line:\n    # printf '%s\\\
    n' \"${array[@]}\"\n    #\n    # Hint: You can use the following to print an array,\
    \ one element per line, with line numbers:\n    # printf '%s\\n' \"${!array[@]}\"\
    \ \"${array[@]}\"\n    #\n    # Hint: You can use the following to print an array,\
    \ one element per line, with line numbers and array indices:\n    # printf '%s\\\
    n' \"${!array[@]}\" \"${array[@]}\"\n    #\n    # Hint: You can use the following\
    \ to print an array, one element per line, with line numbers and array indices,\n\
    \    #       and with the array index on the left and the array element on the\
    \ right:\n    # printf '%s\\t%s\\", "    # your code here\n    echo \"Not implemented\"",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ Implement this function\n    # Hint: Use a stack\n    # Hint: Use a list to\
    \ store the results\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n    # Hint: Use a variable to keep track of the current group\n\
    \    # Hint: Use a variable to keep track of the current group\n    # Hint: Use\
    \ a variable to keep track of the current group\n    # Hint: Use a variable to\
    \ keep track of the current group\n    # Hint: Use a variable to keep track of\
    \ the current group\n", "    local str=\"$1\"\n    local result=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n\
    \    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n\
    \    local dddd=0\n    local eeee", "    # TODO: Implement this function\n   \
    \ # Hint: Use grep and sed\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    # Hint: you may want to use a stack\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function\n    # Hint: you\
    \ may want to use a helper function\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a helper function", "    # TODO: your\
    \ code here\n    # Hint: you can use the following command to split a string into\
    \ an array\n    # arr=($(echo $1 | sed 's/\\(/\\n\\(/g'))\n    # echo ${arr[@]}\n\
    \    #\n    # Hint: you can use the following command to remove the first and\
    \ last characters of a string\n    # echo ${1:1:-1}\n    #\n    # Hint: you can\
    \ use the following command to count the number of characters in a string\n  \
    \  # echo ${#1}\n    #\n    # Hint: you can use the following command to check\
    \ if a string starts with a given character\n    # [[ $1 == '('* ]]\n    #\n \
    \   # Hint: you can use the following command to check if a string ends with a\
    \ given character\n    # [[ $1 == *')' ]]\n    #\n    # Hint: you can use the\
    \ following command to check if a string contains a given character\n    # [[\
    \ $1 == *'('* ]]\n    #\n    # Hint: you can use the following command to check\
    \ if a string contains a given substring\n    # [[ $1 == *'('*')'* ]]\n    #\n\
    \    # Hint: you can use the following command to check if a string contains a\
    \ given substring\n    # [[ $1 == *'('*')'* ]]\n    #\n    # Hint: you can use\
    \ the following command to check if a string contains a given substring\n    #\
    \ [[ $1 == *'('*')'* ]]\n    #\n    # Hint: you can use the following command\
    \ to check if a string contains a given substring\n    # [[ $1 == *'('*')'* ]]\n\
    \    #\n    # Hint: you can use the following command to check if a string contains\
    \ a given substring\n    # [[ $1 == *'('*')'* ]]\n    #\n    # Hint: you can use\
    \ the following command to check if a string contains a given substring\n    #\
    \ [[ $1 == *'('*')'* ]]\n    #\n    # Hint: you can use the following command\
    \ to check if a string contains a given subst", "    # Your code here\n    echo\
    \ \"Not implemented\"", "    local input=$1\n    local output=()\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n \
    \   local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n\
    \    local dddd=0\n    local eeee=0", "    # TODO: implement this function\n \
    \   echo \"Not implemented\"", "    local str=$1\n    local result=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n\
    \    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n\
    \    local dddd=0\n    local eeee=0", "    # TODO: Write your code here\n    echo\
    \ \"Not implemented\"", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"TODO\"", "    local input=$1\n\
    \    local output=()\n    local current_group=\"\"\n    local paren_count=0\n\n\
    \    for (( i=0; i<${#input}; i++ )); do\n        local char=${input:$i:1}\n \
    \       if [[ $char == \"(\" ]]; then\n            (( paren_count++ ))\n     \
    \   elif [[ $char == \")\" ]]; then\n            (( paren_count-- ))\n       \
    \ fi\n        current_group+=$char\n        if [[ $paren_count == 0 ]]; then\n\
    \            output+=(\"$current_group\")\n            current_group=\"\"\n  \
    \      fi\n    done\n\n    echo \"${output[@]}\"", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "    # TODO: Implement this function\n    echo \"Not\
    \ implemented\"", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n  \
    \  echo \"Not implemented\"", "    # TODO: implement this function\n    echo \"\
    Not implemented\"", "    # Your code here\n    echo \"Not implemented\"", "  \
    \  # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ your code here\n    echo \"Not implemented\"", "    # TODO: implement this function\n\
    \    echo \"TODO: implement this function\"", "    # Write your code here\n  \
    \  echo \"Not yet implemented\"", "    # TODO: Implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented yet\"", "  local\
    \ str=\"$1\"\n  local result=()\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local\
    \ dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n\
    \  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local\
    \ oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n\
    \  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local\
    \ zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n\
    \  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n \
    \ local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local\
    \ ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n\
    \  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n \
    \ local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local eeee",
  "    # TODO: implement this function\n    # Hint: you can use a stack to keep track\
    \ of open parentheses\n    # Hint: you can use a list to keep track of groups\n\
    \    # Hint: you can use a string to keep track of the current group\n    # Hint:\
    \ you can use the string.split() function to split a string into a list of characters\n\
    \    # Hint: you can use the string.join() function to join a list of characters\
    \ into a string\n    # Hint: you can use the list.append() function to add an\
    \ element to a list\n    # Hint: you can use the list.pop() function to remove\
    \ the last element of a list\n    # Hint: you can use the list.remove() function\
    \ to remove an element from a list\n    # Hint: you can use the list.index() function\
    \ to find the index of an element in a list\n    # Hint: you can use the len()\
    \ function to get the length of a list\n    # Hint: you can use the range() function\
    \ to iterate over a list\n    # Hint: you can use the range() function to iterate\
    \ over a string\n    # Hint: you can use the range() function to iterate over\
    \ a list of characters\n    # Hint: you can use the range() function to iterate\
    \ over a list of strings\n    # Hint: you can use the range() function to iterate\
    \ over a list of lists\n    # Hint: you can use the range() function to iterate\
    \ over a list of lists of characters\n    # Hint: you can use the range() function\
    \ to iterate over a list of lists of strings\n    # Hint: you can use the range()\
    \ function to iterate over a list of lists of lists\n    # Hint: you can use the\
    \ range() function to iterate over a list of lists of lists of characters\n  \
    \  # Hint: you can use the range() function to iterate over a list of lists of\
    \ lists of strings\n    # Hint: you can use the range() function to iterate over\
    \ a list of lists of lists of lists\n    # Hint: you can use the range() function\
    \ to iterate over a list of lists of lists of lists of characters\n    # Hint:\
    \ you can use the range() function to iterate over a list of", "    echo $1 |\
    \ sed 's/[()]//g'", "    # TODO: implement this function\n    echo \"Not yet implemented\"",
  "    # TODO: Write code here\n    # Hint: You can use the following variables in\
    \ your code\n    # $1: input string\n    # $separated_groups: list of strings\
    \ separated by space\n    # $separated_group: a string containing a single group\
    \ of parentheses\n    # $paren_count: number of parentheses in a single group\n\
    \    # $paren_group: a string containing a single group of parentheses\n    #\
    \ $paren_group_list: list of strings separated by space\n    # $paren_group_list_len:\
    \ number of strings in the list\n    # $paren_group_list_item: a string containing\
    \ a single group of parentheses\n    # $paren_group_list_item_len: number of parentheses\
    \ in a single group\n    # $paren_group_list_item_paren_count: number of parentheses\
    \ in a single group\n    # $paren_group_list_item_paren_count_list: list of strings\
    \ separated by space\n    # $paren_group_list_item_paren_count_list_len: number\
    \ of strings in the list\n    # $paren_group_list_item_paren_count_list_item:\
    \ a string containing a single group of parentheses\n    # $paren_group_list_item_paren_count_list_item_len:\
    \ number of parentheses in a single group\n    # $paren_group_list_item_paren_count_list_item_paren_count:\
    \ number of parentheses in a single group\n    # $paren_group_list_item_paren_count_list_item_paren_count_list:\
    \ list of strings separated by space\n    # $paren_group_list_item_paren_count_list_item_paren_count_list_len:\
    \ number of strings in the list\n    # $paren_group_list_item_paren_count_list_item_paren_count_list_item:\
    \ a string containing a single group of parentheses\n    # $paren_group_list_item_paren_count_list_item_paren_count_list_item_len:\
    \ number of parentheses in a single group\n    # $paren_group_list_item_paren_count_list_item_paren_count_list_item_paren_count:\
    \ number of parentheses in a single group\n    #", "  # your code here\n  echo\
    \ \"Not implemented\"", "    # TODO: Implement this function\n    # Hint: Use\
    \ a stack to keep track of the open parentheses.\n    # Hint: Use a list to keep\
    \ track of the separated groups.\n    # Hint: Use a string to keep track of the\
    \ current group.\n    # Hint: Use the following functions:\n    #       - stack_push\n\
    \    #       - stack_pop\n    #       - list_append\n    #       - string_concat\n\
    \    #       - string_length\n    #       - string_substring\n    #       - string_equal\n\
    \    #       - string_equal_ignore_case\n    #       - string_to_lower\n    #\
    \       - string_to_upper\n    #       - string_trim\n    #       - string_split\n\
    \    #       - string_replace\n    #       - string_contains\n    #       - string_contains_ignore_case\n\
    \    #       - string_is_empty\n    #       - string_is_not_empty\n    #     \
    \  - string_is_blank\n    #       - string_is_not_blank\n    #       - string_is_numeric\n\
    \    #       - string_is_not_numeric\n    #       - string_is_alpha\n    #   \
    \    - string_is_not_alpha\n    #       - string_is_alphanumeric\n    #      \
    \ - string_is_not_alphanumeric\n    #       - string_is_lowercase\n    #     \
    \  - string_is_not_lowercase\n    #       - string_is_uppercase\n    #       -\
    \ string_is_not_uppercase\n    #       - string_is_whitespace\n    #       - string_is_not_whitespace\n\
    \    #       - string_is_numeric_whitespace\n    #       - string_is_not_numeric_whitespace\n\
    \    #       - string_is_alpha_whitespace\n    #       - string_is_not_alpha_whitespace\n\
    \    #       - string_is_alphanumeric_whitespace\n    #       - string_is_not_alphanumeric_whitespace\n\
    \    #       - string_is_lowercase_whitespace\n", "    # TODO: implement this\
    \ function\n    echo \"Not implemented\"", "    # Your code here\n    echo \"\
    Not implemented\"", "    # TODO: implement this function\n    # Hint: use the\
    \ `grep` command to find all the groups of parentheses\n    # Hint: use the `tr`\
    \ command to remove spaces from the input string\n    # Hint: use the `sed` command\
    \ to remove the outermost parentheses from each group\n    # Hint: use the `sort`\
    \ command to sort the groups by length\n    # Hint: use the `uniq` command to\
    \ remove duplicates\n    # Hint: use the `xargs` command to convert the newline-separated\
    \ list into a space-separated list\n    # Hint: use the `tr` command to remove\
    \ the spaces from the output\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group\n    # Hint: use the `sed` command to add back the\
    \ spaces between each group", "    # TODO: implement this function\n    # Hint:\
    \ use the `grep` command to find the groups of parentheses\n    # Hint: use the\
    \ `tr` command to remove spaces\n    # Hint: use the `sed` command to remove the\
    \ outermost parentheses\n    # Hint: use the `tr` command to convert the string\
    \ into a list\n    # Hint: use the `sort` command to sort the list\n    # Hint:\
    \ use the `uniq` command to remove duplicates\n    # Hint: use the `tr` command\
    \ to convert the list back into a string\n    # Hint: use the `sed` command to\
    \ remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed` command to remove the commas\n    # Hint:\
    \ use the `sed` command to remove the spaces\n    # Hint: use the `sed` command\
    \ to remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed` command to remove the commas\n    # Hint:\
    \ use the `sed` command to remove the spaces\n    # Hint: use the `sed` command\
    \ to remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed` command to remove the commas\n    # Hint:\
    \ use the `sed` command to remove the spaces\n    # Hint: use the `sed` command\
    \ to remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed` command to remove the commas\n    # Hint:\
    \ use the `sed` command to remove the spaces\n    # Hint: use the `sed` command\
    \ to remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed` command to remove the commas\n    # Hint:\
    \ use the `sed` command to remove the spaces\n    # Hint: use the `sed` command\
    \ to remove the brackets and spaces\n    # Hint: use the `sed` command to remove\
    \ the quotes\n    # Hint: use the `sed", "  local str=\"$1\"\n  local result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n  local eeee", "    # your code here\n    echo\
    \ \"Not implemented\"", "    # TODO: Your code here\n    echo \"Not implemented\"",
  "    # TODO: Write code here\n    # Hint: You may want to use the `tr` command to\
    \ remove spaces\n    # Hint: You may want to use the `sed` command to remove spaces\n\
    \    # Hint: You may want to use the `sed` command to separate groups\n    # Hint:\
    \ You may want to use the `sed` command to remove trailing spaces\n    # Hint:\
    \ You may want to use the `sed` command to remove leading spaces\n    # Hint:\
    \ You may want to use the `sed` command to remove empty lines\n    # Hint: You\
    \ may want to use the `sed` command to remove newlines\n    # Hint: You may want\
    \ to use the `sed` command to remove empty lines\n    # Hint: You may want to\
    \ use the `sed` command to remove newlines\n    # Hint: You may want to use the\
    \ `sed` command to remove empty lines\n    # Hint: You may want to use the `sed`\
    \ command to remove newlines\n    # Hint: You may want to use the `sed` command\
    \ to remove empty lines\n    # Hint: You may want to use the `sed` command to\
    \ remove newlines\n    # Hint: You may want to use the `sed` command to remove\
    \ empty lines\n    # Hint: You may want to use the `sed` command to remove newlines\n\
    \    # Hint: You may want to use the `sed` command to remove empty lines\n   \
    \ # Hint: You may want to use the `sed` command to remove newlines\n    # Hint:\
    \ You may want to use the `sed` command to remove empty lines\n    # Hint: You\
    \ may want to use the `sed` command to remove newlines\n    # Hint: You may want\
    \ to use the `sed` command to remove empty lines\n    # Hint: You may want to\
    \ use the `sed` command to remove newlines\n    # Hint: You may want to use the\
    \ `sed` command to remove empty lines\n    # Hint: You may want to use the `sed`\
    \ command to remove newlines\n    # Hint: You may want to use the `sed` command\
    \ to remove empty lines\n    # Hint: You may want to use the `sed` command to\
    \ remove newlines\n    # Hint:", "    # your code here\n    echo \"Not implemented\"",
  "    # Your code here\n    # Hint: Use a stack\n    # Hint: Use a counter\n    #\
    \ Hint: Use a list\n    # Hint: Use a string\n    # Hint: Use a for loop\n   \
    \ # Hint: Use an if statement\n    # Hint: Use a while loop\n    # Hint: Use a\
    \ function\n    # Hint: Use a function\n    # Hint: Use a function\n    # Hint:\
    \ Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n   \
    \ # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a function\n    # Hint: Use a function\n    # Hint: Use a function\n\
    \    # Hint: Use a", "    # TODO: implement this function\n    # Hint: use the\
    \ following command to remove all spaces from the input string\n    # $1=${1//\
    \ /}\n    # Hint: use the following command to remove the first and last characters\
    \ from the input string\n    # $1=${1:1:-1}\n    # Hint: use the following command\
    \ to find the index of the first occurrence of a character in a string\n    #\
    \ ${1/<character>*/}\n    # Hint: use the following command to find the index\
    \ of the last occurrence of a character in a string\n    # ${1//*<character>/}\n\
    \    # Hint: use the following command to find the length of a string\n    # ${#1}\n\
    \    # Hint: use the following command to find the substring of a string\n   \
    \ # ${1:<start>:<length>}\n    # Hint: use the following command to find the index\
    \ of the first occurrence of a character in a string\n    # ${1/<character>*/}\n\
    \    # Hint: use the following command to find the index of the last occurrence\
    \ of a character in a string\n    # ${1//*<character>/}\n    # Hint: use the following\
    \ command to find the length of a string\n    # ${#1}\n    # Hint: use the following\
    \ command to find the substring of a string\n    # ${1:<start>:<length>}\n   \
    \ # Hint: use the following command to find the index of the first occurrence\
    \ of a character in a string\n    # ${1/<character>*/}\n    # Hint: use the following\
    \ command to find the index of the last occurrence of a character in a string\n\
    \    # ${1//*<character>/}\n    # Hint: use the following command to find the\
    \ length of a string\n    # ${#1}\n    # Hint: use the following command to find\
    \ the substring of a string\n    # ${1:<start>:<length>}\n    # Hint: use the\
    \ following command to find the index of the first occurrence of a character in\
    \ a string\n    # ${1/<character>*/}\n    # Hint: use the following command to\
    \ find the index of the last occurrence of a character in a string\n    #", " \
    \   # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ implement this function\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: Implement this function\n\
    \    echo \"Not yet implemented\"", "    # TODO: implement this function\n   \
    \ echo \"Not implemented\"", "    echo $1 | tr -d ' ' | sed 's/\\(/\\n(\\n/g'\
    \ | sed 's/\\)/\\n)\\n/g' | grep -v '^$' | sed 's/^(//g' | sed 's/)$//g'", " \
    \   # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ implement this function\n    echo \"Not implemented\"", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\"", "    # Write your code here\n    # Hint: You can\
    \ use the following command to remove all spaces from the input string\n    #\
    \ $1=\"${1// /}\"\n    # Hint: You can use the following command to remove the\
    \ outermost parentheses from a string\n    # $1=\"${1:1:${#1}-2}\"\n    # Hint:\
    \ You can use the following command to get the length of a string\n    # ${#1}\n\
    \    # Hint: You can use the following command to get the substring of a string\n\
    \    # ${1:start_index:length}\n    # Hint: You can use the following command\
    \ to check if a string starts with a certain character\n    # [[ $1 == *\"(\"\
    * ]]\n    # Hint: You can use the following command to check if a string ends\
    \ with a certain character\n    # [[ $1 == *\")\"* ]]\n    # Hint: You can use\
    \ the following command to append an element to an array\n    # array+=(\"$element\"\
    )\n    # Hint: You can use the following command to print an array\n    # echo\
    \ \"${array[@]}\"\n    # Hint: You can use the following command to print the\
    \ length of an array\n    # echo \"${#array[@]}\"\n    # Hint: You can use the\
    \ following command to print the index of an element in an array\n    # echo \"\
    ${!array[@]}\"\n    # Hint: You can use the following command to print the value\
    \ of an element in an array\n    # echo \"${array[index]}\"\n    # Hint: You can\
    \ use the following command to remove an element from an array\n    # unset array[index]\n\
    \    # Hint: You can use the following command to check if an array contains an\
    \ element\n    # echo \"${array[@]}\" | grep -q \"$element\"\n    # Hint: You\
    \ can use the following command to check if an array is empty\n    # [[ -z \"\
    ${array[@]}\" ]]\n    # Hint: You can use the following command to remove all\
    \ elements from an array\n    # unset array\n    # Hint: You can use the following\
    \ command to remove all elements from an array\n    # unset array\n    # H", " \
    \   # TODO: implement this function\n    echo \"Not implemented\"", "    local\
    \ input=$1\n    local output=()\n    local current_group=\"\"\n    local open_parens=0\n\
    \    local close_parens=0\n    local i=0\n    local char=\"\"\n\n    # iterate\
    \ over each character in the input string\n    for ((i=0; i<${#input}; i++));\
    \ do\n        char=${input:$i:1}\n\n        # if the character is an open paren,\
    \ increment the open parens counter\n        if [[ $char == \"(\" ]]; then\n \
    \           open_parens=$((open_parens + 1))\n        fi\n\n        # if the character\
    \ is a close paren, increment the close parens counter\n        if [[ $char ==\
    \ \")\" ]]; then\n            close_parens=$((close_parens + 1))\n        fi\n\
    \n        # if the open parens counter is greater than the close parens counter,\
    \ add the character to the current group\n        if [[ $open_parens -gt $close_parens\
    \ ]]; then\n            current_group+=$char\n        fi\n\n        # if the close\
    \ parens counter is greater than the open parens counter, add the current group\
    \ to the output array\n        if [[ $close_parens -gt $open_parens ]]; then\n\
    \            output+=($current_group)\n            current_group=\"\"\n      \
    \      open_parens=0\n            close_parens=0\n        fi\n    done\n\n   \
    \ echo ${output[@]}", "    local input=$1\n    local output=()\n    local count=0\n\
    \    local temp=\"\"\n    for (( i=0; i<${#input}; i++ )); do\n        if [[ ${input:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${input:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        temp+=\"${input:$i:1}\"\
    \n        if [[ $count -eq 0 ]]; then\n            output+=(\"$temp\")\n     \
    \       temp=\"\"\n        fi\n    done\n    echo \"${output[@]}\"", "    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # Write your code here\n    echo \"Not implemented\"",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ Write your code here\n    # Hint: You can use the following variables:\n   \
    \ # $1 - the input string\n    # $separated_paren_groups - the list of separated\
    \ groups\n    # $separated_paren_group - the current group being built\n    #\
    \ $paren_count - the number of open parentheses in the current group\n    # $char\
    \ - the current character being processed\n    # $prev_char - the previous character\
    \ being processed\n    # $next_char - the next character being processed\n   \
    \ # $i - the current index of the character being processed\n    # $len - the\
    \ length of the input string\n    #\n    # Hint: You can use the following functions:\n\
    \    # add_to_separated_paren_group() - adds the current character to the current\
    \ group\n    # add_to_separated_paren_groups() - adds the current group to the\
    \ list of groups\n    # reset_separated_paren_group() - resets the current group\
    \ to an empty string\n    #\n    # Hint: You can use the following control flow\
    \ statements:\n    # if, elif, else, for, while, break, continue\n    #\n    #\
    \ Hint: You can use the following operators:\n    # -eq, -ne, -gt, -lt, -ge, -le,\
    \ ==, !=, >, <, >=, <=, +, -, *, /, %, **, +=, -=, *=, /=, %=, **=\n    #\n  \
    \  # Hint: You can use the following string operators:\n    # =~, !~, ${var:pos:len},\
    \ ${var:pos}, ${var#pattern}, ${var##pattern}, ${var%pattern}, ${var%%pattern},\n\
    \    # ${#var}, ${var:0:1}, ${var: -1:1}, ${var:0:-1}, ${var: -2:-1}, ${var:0-2:1},\
    \ ${var: -3:-2}, ${var:0-3:1}\n    #\n    # Hint: You can use the following string\
    \ functions:\n    # expr match \"$var\" '$regex'\n    #\n    # Hint: You can use\
    \ the following arithmetic functions:\n    # expr", "  # your code here\n  echo\
    \ \"Not Implemented\"", "    # Write your code here\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    local\
    \ input=$1\n    local result=()\n    local temp=\"\"\n    local count=0\n    for\
    \ ((i=0; i<${#input}; i++)); do\n        if [[ ${input:$i:1} == \"(\" ]]; then\n\
    \            ((count++))\n        elif [[ ${input:$i:1} == \")\" ]]; then\n  \
    \          ((count--))\n        fi\n        temp+=${input:$i:1}\n        if [[\
    \ $count == 0 ]]; then\n            result+=(\"$temp\")\n            temp=\"\"\
    \n        fi\n    done\n    echo \"${result[@]}\"", "    # TODO: implement this\
    \ function\n    echo \"TODO\"", "    # TODO: Write your code here\n    echo \"\
    Not implemented\"", "    # TODO: implement this function\n    echo \"TODO: implement\
    \ this function\"", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  "    # TODO: Implement this function\n    # Hint: You might want to use a stack\n\
    \    # Hint: You might want to use a stack\n    # Hint: You might want to use\
    \ a stack\n    # Hint: You might want to use a stack\n    # Hint: You might want\
    \ to use a stack\n    # Hint: You might want to use a stack\n    # Hint: You might\
    \ want to use a stack\n    # Hint: You might want to use a stack\n    # Hint:\
    \ You might want to use a stack\n    # Hint: You might want to use a stack\n \
    \   # Hint: You might want to use a stack\n    # Hint: You might want to use a\
    \ stack\n    # Hint: You might want to use a stack\n    # Hint: You might want\
    \ to use a stack\n    # Hint: You might want to use a stack\n    # Hint: You might\
    \ want to use a stack\n    # Hint: You might want to use a stack\n    # Hint:\
    \ You might want to use a stack\n    # Hint: You might want to use a stack\n \
    \   # Hint: You might want to use a stack\n    # Hint: You might want to use a\
    \ stack\n    # Hint: You might want to use a stack\n    # Hint: You might want\
    \ to use a stack\n    # Hint: You might want to use a stack\n    # Hint: You might\
    \ want to use a stack\n    # Hint: You might want to use a stack\n    # Hint:\
    \ You might want to use a stack\n    # Hint: You might want to use a stack\n \
    \   # Hint: You might want to use a stack\n    # Hint: You might want to use a\
    \ stack\n    # Hint: You might want to use a stack\n    # Hint: You might want\
    \ to use a stack\n    # Hint: You might want to use a stack\n    # Hint: You might\
    \ want to use a stack\n    # Hint: You might want to use a stack\n    # Hint:\
    \ You might want to use a stack\n    # Hint: You might want to use a stack\n \
    \   # Hint: You might want to use a stack\n    # Hint: You might want", "  # Write\
    \ your code here\n  echo \"Not implemented\"", "    local input=$1\n    local\
    \ output=()\n    local current_group=\"\"\n    local open_paren_count=0\n    local\
    \ close_paren_count=0\n    local i=0\n    for ((i=0; i<${#input}; i++)); do\n\
    \        local char=${input:$i:1}\n        if [[ $char == \"(\" ]]; then\n   \
    \         open_paren_count=$((open_paren_count+1))\n        elif [[ $char == \"\
    )\" ]]; then\n            close_paren_count=$((close_paren_count+1))\n       \
    \ fi\n        current_group+=$char\n        if [[ $open_paren_count -eq $close_paren_count\
    \ ]]; then\n            output+=($current_group)\n            current_group=\"\
    \"\n            open_paren_count=0\n            close_paren_count=0\n        fi\n\
    \    done\n    echo \"${output[@]}\"", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: Implement this function\n    # Hint: You\
    \ may want to use the `tr` command to remove spaces from the input string\n  \
    \  # Hint: You may want to use the `sed` command to remove the outermost parentheses\
    \ from each group\n    # Hint: You may want to use the `grep` command to find\
    \ the groups of parentheses\n    # Hint: You may want to use the `grep` command\
    \ to find the groups of parentheses\n    # Hint: You may want to use the `grep`\
    \ command to find the groups of parentheses\n    # Hint: You may want to use the\
    \ `grep` command to find the groups of parentheses\n    # Hint: You may want to\
    \ use the `grep` command to find the groups of parentheses\n    # Hint: You may\
    \ want to use the `grep` command to find the groups of parentheses\n    # Hint:\
    \ You may want to use the `grep` command to find the groups of parentheses\n \
    \   # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `grep` command to", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    # Write your code here\n\
    \    # You can use the following command to get the number of opening parentheses\n\
    \    # echo \"$1\" | grep -o '(' | wc -l\n    # You can use the following command\
    \ to get the number of closing parentheses\n    # echo \"$1\" | grep -o ')' |\
    \ wc -l\n    # You can use the following command to get the number of spaces\n\
    \    # echo \"$1\" | grep -o ' ' | wc -l\n    # You can use the following command\
    \ to remove spaces from the string\n    # echo \"$1\" | sed 's/ //g'\n    # You\
    \ can use the following command to remove the first character from the string\n\
    \    # echo \"$1\" | cut -c 2-\n    # You can use the following command to remove\
    \ the last character from the string\n    # echo \"$1\" | rev | cut -c 2- | rev\n\
    \    # You can use the following command to get the first character from the string\n\
    \    # echo \"$1\" | cut -c 1\n    # You can use the following command to get\
    \ the last character from the string\n    # echo \"$1\" | rev | cut -c 1 | rev\n\
    \    # You can use the following command to get the length of the string\n   \
    \ # echo \"$1\" | wc -c\n    # You can use the following command to get the substring\
    \ from the string\n    # echo \"$1\" | cut -c 2-5\n    # You can use the following\
    \ command to get the substring from the string\n    # echo \"$1\" | cut -c 2-5\n\
    \    # You can use the following command to get the substring from the string\n\
    \    # echo \"$1\" | cut -c 2-5\n    # You can use the following command to get\
    \ the substring from the string\n    # echo \"$1\" | cut -c 2-5\n    # You can\
    \ use the following command to get the substring from the string\n    # echo \"\
    $1\" | cut -c 2-5\n    # You can use the following command to get the substring\
    \ from the string\n    # echo \"$1\" | cut -c 2-5\n    # You can use the following\
    \ command to get the substring from the string\n    # echo \"$1\" | cut -c 2-5\n\
    \    #", "    # Write your code here\n    # You can use the following command\
    \ to split the string into an array of characters\n    # chars=($(echo $1 | fold\
    \ -w1))\n    # You can use the following command to join an array of characters\
    \ into a string\n    # str=\"$(printf \"%s\" \"${chars[@]}\")\"\n    # You can\
    \ use the following command to remove the first character of a string\n    # str=${str:1}\n\
    \    # You can use the following command to remove the last character of a string\n\
    \    # str=${str::-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use the following command to remove the first\
    \ and last character of a string\n    # str=${str:1:-1}\n    # You can use the\
    \ following command to remove the first and last character of a string\n    #\
    \ str=${str:1:-1}\n    # You can use", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: Implement this function\n    # Hint:\
    \ Use a stack\n    # Hint: Use a list to store the results\n    # Hint: Use a\
    \ variable to store the current group\n    # Hint: Use a variable to store the\
    \ current index\n    # Hint: Use a variable to store the current character\n \
    \   # Hint: Use a variable to store the current group\n    # Hint: Use a variable\
    \ to store the current index\n    # Hint: Use a variable to store the current\
    \ character\n    # Hint: Use a variable to store the current group\n    # Hint:\
    \ Use a variable to store the current index\n    # Hint: Use a variable to store\
    \ the current character\n    # Hint: Use a variable to store the current group\n\
    \    # Hint: Use a variable to store the current index\n    # Hint: Use a variable\
    \ to store the current character\n    # Hint: Use a variable to store the current\
    \ group\n    # Hint: Use a variable to store the current index\n    # Hint: Use\
    \ a variable to store the current character\n    # Hint: Use a variable to store\
    \ the current group\n    # Hint: Use a variable to store the current index\n \
    \   # Hint: Use a variable to store the current character\n    # Hint: Use a variable\
    \ to store the current group\n    # Hint: Use a variable to store the current\
    \ index\n    # Hint: Use a variable to store the current character\n    # Hint:\
    \ Use a variable to store the current group\n    # Hint: Use a variable to store\
    \ the current index\n    # Hint: Use a variable to store the current character\n\
    \    # Hint: Use a variable to store the current group\n    # Hint: Use a variable\
    \ to store the current index\n    # Hint: Use a variable to store the current\
    \ character\n    # Hint: Use a variable to store the current group\n    # Hint:\
    \ Use a variable to store the current index\n    # Hint: Use a variable to store\
    \ the current character\n    # Hint: Use a variable to store the current group\n\
    \    # Hint: Use a variable to store the current index\n    # Hint: Use a variable\
    \ to store the current character\n    # Hint: Use a variable to store the current\
    \ group\n    # Hint", "    # Write your code here\n    # To print results to the\
    \ standard output you can use echo\n    # To debug: echo \"Debug messages...\"\
    \ >&2\n    echo \"Not implemented\"", "    local input=$1\n    local output=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n  \
    \  local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n\
    \    local cccc=0\n    local dddd=0\n    local eeee=0", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    # your code here\n    echo\
    \ $1 | tr -d ' ' | sed 's/)(/)\\n(/g'", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\"", "    # TODO: implement this function\n    echo\
    \ \"Not implemented\"", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ implement this function\n    # Hint: you can use a stack to keep track of the\
    \ current group\n    # Hint: you can use a list to keep track of all the groups\n\
    \    # Hint: you can use the `append` function to add an element to a list\n \
    \   # Hint: you can use the `pop` function to remove the last element from a list\n\
    \    # Hint: you can use the `push` function to add an element to a stack\n  \
    \  # Hint: you can use the `pop` function to remove the last element from a stack\n\
    \    # Hint: you can use the `peek` function to get the last element from a stack\n\
    \    # Hint: you can use the `is_empty` function to check if a stack is empty\n\
    \    # Hint: you can use the `is_empty` function to check if a list is empty\n\
    \    # Hint: you can use the `join` function to join a list into a string\n  \
    \  # Hint: you can use the `split` function to split a string into a list\n  \
    \  # Hint: you can use the `len` function to get the length of a list\n    # Hint:\
    \ you can use the `len` function to get the length of a string\n    # Hint: you\
    \ can use the `range` function to get a list of numbers\n    # Hint: you can use\
    \ the `range` function to get a list of numbers\n    # Hint: you can use the `range`\
    \ function to get a list of numbers\n    # Hint: you can use the `range` function\
    \ to get a list of numbers\n    # Hint: you can use the `range` function to get\
    \ a list of numbers\n    # Hint: you can use the `range` function to get a list\
    \ of numbers\n    # Hint: you can use the `range` function to get a list of numbers\n\
    \    # Hint: you can use the `range` function to get a list of numbers\n    #\
    \ Hint: you can use the `range` function to get a list of numbers\n    # Hint:\
    \ you can use the `range` function to get a list of numbers\n    # Hint: you can\
    \ use the `range` function to get a list of numbers\n    # Hint: you can", " \
    \   # TODO: implement this function\n    echo \"Not implemented\"", "    local\
    \ input=$1\n    local output=()\n    local current_group=\"\"\n    local open_parens=0\n\
    \    local close_parens=0\n    local i=0\n    local c=''\n\n    for ((i=0; i<${#input};\
    \ i++)); do\n        c=${input:$i:1}\n        if [[ $c == '(' ]]; then\n     \
    \       open_parens=$((open_parens + 1))\n        elif [[ $c == ')' ]]; then\n\
    \            close_parens=$((close_parens + 1))\n        fi\n\n        current_group=\"\
    $current_group$c\"\n\n        if [[ $open_parens -eq $close_parens ]]; then\n\
    \            output+=($current_group)\n            current_group=\"\"\n      \
    \      open_parens=0\n            close_parens=0\n        fi\n    done\n\n   \
    \ echo \"${output[@]}\"", "    # TODO: implement this function\n    # Hint: you\
    \ may want to use a stack\n    # Hint: you may want to use a queue\n    # Hint:\
    \ you may want to use a list\n    # Hint: you may want to use a string\n    #\
    \ Hint: you may want to use a variable\n    # Hint: you may want to use a function\n\
    \    # Hint: you may want to use a loop\n    # Hint: you may want to use a condition\n\
    \    # Hint: you may want to use a command\n    # Hint: you may want to use a\
    \ pipe\n    # Hint: you may want to use a redirect\n    # Hint: you may want to\
    \ use a here document\n    # Hint: you may want to use a here string\n    # Hint:\
    \ you may want to use a variable\n    # Hint: you may want to use a variable\n\
    \    # Hint: you may want to use a variable\n    # Hint: you may want to use a\
    \ variable\n    # Hint: you may want to use a variable\n    # Hint: you may want\
    \ to use a variable\n    # Hint: you may want to use a variable\n    # Hint: you\
    \ may want to use a variable\n    # Hint: you may want to use a variable\n   \
    \ # Hint: you may want to use a variable\n    # Hint: you may want to use a variable\n\
    \    # Hint: you may want to use a variable\n    # Hint: you may want to use a\
    \ variable\n    # Hint: you may want to use a variable\n    # Hint: you may want\
    \ to use a variable\n    # Hint: you may want to use a variable\n    # Hint: you\
    \ may want to use a variable\n    # Hint: you may want to use a variable\n   \
    \ # Hint: you may want to use a variable\n    # Hint: you may want to use a variable\n\
    \    # Hint: you may want to use a variable\n    # Hint: you may want to use a\
    \ variable\n    # Hint: you may want to use a variable\n    # Hint: you may want\
    \ to use a variable\n    # Hint: you may want to use a variable\n    # Hint: you",
  "    # Write your code here\n    echo \"Not implemented\"", "    # TODO: implement\
    \ this function\n    # Hint: use the following command to extract a substring\
    \ of a string\n    # ${string:start:length}\n    # For example:\n    # $ s='abcdefghijklmnopqrstuvwxyz'\n\
    \    # $ echo ${s:0:3}\n    # abc\n    # $ echo ${s:3:3}\n    # def\n    # $ echo\
    \ ${s:6:3}\n    # ghi\n    # $ echo ${s:9:3}\n    # jkl\n    # $ echo ${s:12:3}\n\
    \    # mno\n    # $ echo ${s:15:3}\n    # pqr\n    # $ echo ${s:18:3}\n    # stu\n\
    \    # $ echo ${s:21:3}\n    # vwx\n    # $ echo ${s:24:3}\n    # yz\n    # $\
    \ echo ${s:27:3}\n    #\n    # Hint: use the following command to get the length\
    \ of a string\n    # ${#string}\n    # For example:\n    # $ s='abcdefghijklmnopqrstuvwxyz'\n\
    \    # $ echo ${#s}\n    # 26\n    # $ s='abc'\n    # $ echo ${#s}\n    # 3\n\
    \    # $ s=''\n    # $ echo ${#s}\n    # 0\n    #\n    # Hint: use the following\
    \ command to get the index of the first occurrence of a substring in a string\n\
    \    # ${string#substring}\n    # For example:\n    # $ s='abcdefghijklmnopqrstuvwxyz'\n\
    \    # $ echo ${s#a}\n    # bcdefghijklmnopqrstuvwxyz\n    # $ echo ${s#b}\n \
    \   # abcdefghijklmnopqrstuvwxyz\n    # $ echo ${s#c}\n    # abcdefghijklmnopqrstuvwxyz\n\
    \    # $ echo ${s#d}\n    # abcdefghijklmnopqrstuvwxyz", "  # TODO: Implement\
    \ this function\n  # Hint: You can use the following bash commands:\n  #     \
    \  - sed\n  #       - grep\n  #       - tr\n  #       - cut\n  #       - sort\n\
    \  #       - uniq\n  #       - wc\n  #       - awk\n  #       - echo\n  #    \
    \   - cat\n  #       - seq\n  #       - head\n  #       - tail\n  #       - rev\n\
    \  #       - tr\n  #       - cut\n  #       - sort\n  #       - uniq\n  #    \
    \   - wc\n  #       - awk\n  #       - echo\n  #       - cat\n  #       - seq\n\
    \  #       - head\n  #       - tail\n  #       - rev\n  #       - tr\n  #    \
    \   - cut\n  #       - sort\n  #       - uniq\n  #       - wc\n  #       - awk\n\
    \  #       - echo\n  #       - cat\n  #       - seq\n  #       - head\n  #   \
    \    - tail\n  #       - rev\n  #       - tr\n  #       - cut\n  #       - sort\n\
    \  #       - uniq\n  #       - wc\n  #       - awk\n  #       - echo\n  #    \
    \   - cat\n  #       - seq\n  #       - head\n  #       - tail\n  #       - rev\n\
    \  #       - tr\n  #       - cut\n  #       - sort\n  #       - uniq\n  #    \
    \   - wc\n  #       - awk\n  #       - echo\n  #       - cat\n  #       - seq\n\
    \  #       - head\n  #       - tail\n  #       - rev\n  #       - tr\n  #    \
    \   - cut\n  #       - sort\n  #       - uniq\n  #       - wc\n  #       - awk\n\
    \  #       - echo\n  #       - cat\n  #       - seq\n  #       - head\n  #   \
    \    - tail\n  #       - rev\n  #       - tr\n  #       - cut\n  #       - sort\n\
    \  #       - uniq\n ", "    # TODO: implement this function\n    echo \"Not implemented\"",
  "    # TODO: implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ Implement this function\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    # Hint: You may want to use the `tr` command to remove spaces\n\
    \    # Hint: You may want to use the `sed` command to remove the outermost parentheses\n\
    \    # Hint: You may want to use the `grep` command to find the groups of parentheses\n\
    \    # Hint: You may want to use the `xargs` command to remove the leading and\
    \ trailing whitespace\n    # Hint: You may want to use the `sort` command to sort\
    \ the groups of parentheses\n    # Hint: You may want to use the `uniq` command\
    \ to remove duplicates\n    # Hint: You may want to use the `tr` command to remove\
    \ the newline character\n    # Hint: You may want to use the `sed` command to\
    \ remove the leading and trailing whitespace\n    # Hint: You may want to use\
    \ the `sed` command to remove the leading and trailing whitespace\n    # Hint:\
    \ You may want to use the `sed` command to remove the leading and trailing whitespace\n\
    \    # Hint: You may want to use the `sed` command to remove the leading and trailing\
    \ whitespace\n    # Hint: You may want to use the `sed` command to remove the\
    \ leading and trailing whitespace\n    # Hint: You may want to use the `sed` command\
    \ to remove the leading and trailing whitespace\n    # Hint: You may want to use\
    \ the `sed` command to remove the leading and trailing whitespace\n    # Hint:\
    \ You may want to use the `sed` command to remove the leading and trailing whitespace\n\
    \    # Hint: You may want to use the `sed` command to remove the leading and trailing\
    \ whitespace\n    # Hint: You may want to use the `sed` command to remove the\
    \ leading and trailing whitespace\n    # Hint: You may want to use the `sed` command\
    \ to remove the leading and trailing whitespace\n    # Hint: You may want to use\
    \ the `sed` command to remove the leading and trailing whitespace\n    # Hint:\
    \ You may want to use the `sed` command to remove the leading and trailing whitespace\n\
    \    # Hint: You may want to use the `sed` command to remove the leading and trailing\
    \ whitespace\n    # Hint: You may want to use the `", "    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\""]
stop_tokens:
- "\n}"
