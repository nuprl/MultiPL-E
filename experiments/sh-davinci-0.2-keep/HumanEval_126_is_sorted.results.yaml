language: sh
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if [[ $curr -lt $prev ]]; then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i duplicates=0\n    for ((i=1; i<len; i++));\
    \ do\n        curr=${arr[i]}\n        if [[ $curr -lt $prev ]]; then\n       \
    \     echo \"False\"\n            return 0\n        elif [[ $curr -eq $prev ]];\
    \ then\n            duplicates=$((duplicates+1))\n        fi\n        prev=$curr\n\
    \    done\n    if [[ $duplicates -gt 0 ]]; then\n        echo \"False\"\n    \
    \    return 0\n    fi\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i duplicates=0\n  local -i sorted=1\n\n  for ((i=1;\
    \ i<len; i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      sorted=0\n\
    \      break\n    elif ((curr == prev)); then\n      duplicates+=1\n    fi\n \
    \   prev=$curr\n  done\n\n  if ((duplicates > 0)); then\n    sorted=0\n  fi\n\n\
    \  if ((sorted == 1)); then\n    echo \"True\"\n  else\n    echo \"False\"\n \
    \ fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i count=0\n  local -i sorted=1\n  local -i dup=0\n  local -i dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_index_prev=0\n  local -i dup_index_next=0\n\
    \  local -i dup_index_prev_prev=0\n  local -i dup_index_next_next=0\n  local -i\
    \ dup_index_prev_prev_prev=0\n  local -i dup_index_next_next_next=0\n  local -i\
    \ dup_index_prev_prev_prev_prev=0\n  local -i dup_index_next_next_next_next=0\n\
    \  local -i dup_index_prev_prev_prev_prev_prev=0\n  local -i dup_index_next_next_next_next_next=0\n\
    \  local -i dup_index_prev_prev_prev_prev_prev_prev=0\n  local -i dup_index_next_next_next_next_next_next=0\n\
    \  local -i dup_index_prev_prev_prev_prev_prev_prev_prev=0\n  local -i dup_index_next_next_next_next_next_next_next=0\n\
    \  local -i dup_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i dup_index_next_next_next_next_next_next_next_next=0\n\
    \  local -i dup_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ -i dup_index_next_next_next_next_next_next_next_next_next=0\n  local -i dup_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local -i dup_index_next_next_next_next_next_next_next_next_next_next=0\n\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  while (( i < len\
    \ )); do\n    curr=${arr[i]}\n    if (( curr < prev )); then\n      sorted=0\n\
    \      break\n    elif (( curr == prev )); then\n      (( dup++ ))\n      if ((\
    \ dup > 1 )); then\n        sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n\
    \    (( i++ ))\n  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n \
    \   local -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n    if [[ \"\
    ${#array[@]}\" -eq \"${#uniq[@]}\" ]]; then\n        for ((i=0; i<\"${#array[@]}\"\
    ; i++)); do\n            if [[ \"${array[$i]}\" -ne \"${sorted[$i]}\" ]]; then\n\
    \                echo \"False\"\n                return\n            fi\n    \
    \    done\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      ((dup++))\n    fi\n    prev=$curr\n  done\n  if ((dup\
    \ > 0)); then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n \
    \ local sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if\
    \ [[ \"$list\" == \"$sorted\" ]]; then\n    echo \"True\"\n  else\n    echo \"\
    False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i count=0\n  local -i is_sorted=1\n\
    \  while [[ $i -lt $len ]]; do\n    curr=${array[$i]}\n    next=${array[$i+1]}\n\
    \    if [[ $curr -eq $prev ]]; then\n      count=$count+1\n      if [[ $count\
    \ -gt 1 ]]; then\n        is_sorted=0\n        break\n      fi\n    elif [[ $curr\
    \ -gt $next ]]; then\n      is_sorted=0\n      break\n    fi\n    prev=$curr\n\
    \    i=$i+1\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      dup=1\n    fi\n    prev=$curr\n  done\n  if ((dup));\
    \ then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ '))\n  if [[ \"${arr[*]}\" == \"${sorted[*]}\" ]]; then\n    echo True\n  else\n\
    \    echo False\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local len=${#arr[@]}\n  local prev=${arr[0]}\n  local curr=0\n\
    \  local is_sorted=true\n  while [ $i -lt $len ]; do\n    curr=${arr[$i]}\n  \
    \  if [ $curr -lt $prev ]; then\n      is_sorted=false\n      break\n    fi\n\
    \    prev=$curr\n    i=$((i+1))\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn90fo_5i.sh: line 25: [: too many arguments

    /tmp/tmpn90fo_5i.sh: line 25: [: too many arguments

    '
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i count=0\n  local -i flag=0\n  for ((i=0; i<len; i++))\n  do\n    for\
    \ ((j=i+1; j<len; j++))\n    do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n  \
    \    then\n        flag=1\n        break\n      fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n      break\n    fi\n  done\n  if [[ $flag -eq 1 ]]\n  then\n\
    \    echo \"False\"\n  else\n    for ((i=0; i<len; i++))\n    do\n      for ((j=i+1;\
    \ j<len; j++))\n      do\n        if [[ ${arr[$i]} -eq ${arr[$j]} ]]\n       \
    \ then\n          count=$count+1\n        fi\n      done\n      if [[ $count -gt\
    \ 1 ]]\n      then\n        flag=1\n        break\n      fi\n      count=0\n \
    \   done\n    if [[ $flag -eq 1 ]]\n    then\n      echo \"False\"\n    else\n\
    \      echo \"True\"\n    fi\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i\
    \ sorted=1\n  local -i dup=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1;\
    \ j<len; j++)); do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n       \
    \ sorted=0\n      fi\n      if [[ ${array[i]} -eq ${array[j]} ]]; then\n     \
    \   dup=1\n      fi\n    done\n  done\n  if [[ $sorted -eq 1 ]] && [[ $dup -eq\
    \ 0 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i duplicates=0\n    local\
    \ -i sorted=1\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n     \
    \   next=${arr[i+1]}\n        if ((curr == prev)); then\n            ((duplicates++))\n\
    \        fi\n        if ((curr < prev)); then\n            sorted=0\n        \
    \    break\n        fi\n        prev=$curr\n    done\n    if ((duplicates > 0));\
    \ then\n        sorted=0\n    fi\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i dup=0\n    local -i sorted=1\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        next=${arr[i+1]}\n\
    \        if [[ $curr -eq $prev ]]; then\n            ((dup++))\n        fi\n \
    \       if [[ $curr -lt $prev ]]; then\n            sorted=0\n            break\n\
    \        fi\n        prev=$curr\n    done\n    if [[ $dup -gt 0 ]]; then\n   \
    \     sorted=0\n    fi\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ ${#arr[@]} -eq\
    \ ${#uniq[@]} ]]; then\n    for ((i=0; i<${#arr[@]}; i++)); do\n      if [[ ${arr[$i]}\
    \ -ne ${sorted[$i]} ]]; then\n        echo false\n        return\n      fi\n \
    \   done\n    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i dup=0\n  local -i sorted=1\n\
    \  while (( i < len )); do\n    curr=${arr[i]}\n    if (( curr < prev )); then\n\
    \      sorted=0\n      break\n    fi\n    if (( curr == prev )); then\n      dup=1\n\
    \    fi\n    prev=$curr\n    (( i++ ))\n  done\n  if (( sorted == 1 )); then\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ \"${#arr[@]}\"\
    \ -eq \"${#uniq[@]}\" ]]; then\n    for ((i=0; i<\"${#arr[@]}\"; i++)); do\n \
    \     if [[ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]]; then\n        echo \"False\"\
    \n        return\n      fi\n    done\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i last=${array[0]}\n\
    \    local -i current\n    local -i duplicates=0\n    for ((i=1; i<len; i++));\
    \ do\n        current=${array[i]}\n        if ((current < last)); then\n     \
    \       echo \"False\"\n            return\n        elif ((current == last));\
    \ then\n            ((duplicates++))\n        fi\n        last=$current\n    done\n\
    \    if ((duplicates > 0)); then\n        echo \"False\"\n    else\n        echo\
    \ \"True\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local\
    \ -i is_duplicate=0\n    local -i is_ascending=1\n    local -i is_descending=1\n\
    \n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        next=${arr[i+1]}\n\
    \        if [[ $curr -eq $prev ]]; then\n            is_duplicate=1\n        fi\n\
    \        if [[ $curr -lt $prev ]]; then\n            is_ascending=0\n        fi\n\
    \        if [[ $curr -gt $prev ]]; then\n            is_descending=0\n       \
    \ fi\n        prev=$curr\n    done\n\n    if [[ $is_duplicate -eq 1 ]]; then\n\
    \        is_sorted=0\n    elif [[ $is_ascending -eq 0 && $is_descending -eq 0\
    \ ]]; then\n        is_sorted=0\n    fi\n\n    echo $is_sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  arr=($1)\n\
    \  local i\n  local prev=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n   \
    \ if [[ ${arr[i]} -lt $prev ]]; then\n      echo False\n      return\n    fi\n\
    \    prev=${arr[i]}\n  done\n  echo True\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=0\n  \
    \  local -i curr=0\n    local -i next=0\n    local -i prev_dup=0\n    local -i\
    \ curr_dup=0\n    local -i next_dup=0\n    local -i dup_count=0\n    local -i\
    \ dup_count_prev=0\n    local -i dup_count_curr=0\n    local -i dup_count_next=0\n\
    \    local -i dup_count_prev_prev=0\n    local -i dup_count_curr_prev=0\n    local\
    \ -i dup_count_next_prev=0\n    local -i dup_count_prev_curr=0\n    local -i dup_count_curr_curr=0\n\
    \    local -i dup_count_next_curr=0\n    local -i dup_count_prev_next=0\n    local\
    \ -i dup_count_curr_next=0\n    local -i dup_count_next_next=0\n    local -i dup_count_prev_prev_prev=0\n\
    \    local -i dup_count_prev_prev_curr=0\n    local -i dup_count_prev_prev_next=0\n\
    \    local -i dup_count_prev_curr_prev=0\n    local -i dup_count_prev_curr_curr=0\n\
    \    local -i dup_count_prev_curr_next=0\n    local -i dup_count_prev_next_prev=0\n\
    \    local -i dup_count_prev_next_curr=0\n    local -i dup_count_prev_next_next=0\n\
    \    local -i dup_count_curr_prev_prev=0\n    local -i dup_count_curr_prev_curr=0\n\
    \    local -i dup_count_curr_prev_next=0\n    local -i dup_count_curr_curr_prev=0\n\
    \    local -i dup_count_curr_curr_curr=0\n    local\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i dup=0\n    local -i sorted=1\n\
    \    while [ $i -lt $len ]; do\n        curr=${arr[$i]}\n        if [ $i -eq $((len-1))\
    \ ]; then\n            next=$curr\n        else\n            next=${arr[$((i+1))]}\n\
    \        fi\n        if [ $curr -lt $prev ]; then\n            sorted=0\n    \
    \        break\n        elif [ $curr -eq $prev ]; then\n            dup=1\n  \
    \      fi\n        prev=$curr\n        i=$((i+1))\n    done\n    if [ $sorted\
    \ -eq 1 ] && [ $dup -eq 0 ]; then\n        echo True\n    else\n        echo False\n\
    \    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=0\n  \
    \  local -i curr=0\n    local -i next=0\n    local -i dup=0\n    local -i sorted=1\n\
    \    for ((i=0; i<len; i++)); do\n        curr=${arr[$i]}\n        if ((i > 0));\
    \ then\n            prev=${arr[$((i-1))]}\n            if ((curr == prev)); then\n\
    \                ((dup++))\n            fi\n        fi\n        if ((i < len-1));\
    \ then\n            next=${arr[$((i+1))]}\n            if ((curr > next)); then\n\
    \                ((sorted=0))\n            fi\n        fi\n    done\n    if ((dup\
    \ > 0)); then\n        ((sorted=0))\n    fi\n    echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=($1)\n\
    \  local prev=${array[0]}\n  for i in \"${array[@]:1}\"; do\n    if [[ $i -le\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=$i\n  done\n\
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt\
    \ $len ]; do\n    curr=${array[$i]}\n    if [ $i -lt $((len - 1)) ]; then\n  \
    \    next=${array[$((i + 1))]}\n    fi\n    if [ $curr -lt $prev ]; then\n   \
    \   is_sorted=0\n      break\n    elif [ $curr -eq $prev ]; then\n      if [ $curr\
    \ -eq $next ]; then\n        is_sorted=0\n        break\n      fi\n    fi\n  \
    \  prev=$curr\n    i=$((i + 1))\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=0\n  local -i\
    \ curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  local -i is_ascending=1\n  local -i is_descending=1\n\n  if [ $len -eq 1 ];\
    \ then\n    echo \"True\"\n    return\n  fi\n\n  for ((i=0; i<len; i++)); do\n\
    \    prev=${arr[$((i-1))]}\n    curr=${arr[$i]}\n    next=${arr[$((i+1))]}\n\n\
    \    if [ $i -eq 0 ]; then\n      continue\n    fi\n\n    if [ $curr -eq $prev\
    \ ]; then\n      is_duplicate=1\n    fi\n\n    if [ $curr -lt $prev ]; then\n\
    \      is_ascending=0\n    fi\n\n    if [ $curr -gt $prev ]; then\n      is_descending=0\n\
    \    fi\n\n    if [ $is_duplicate -eq 1 ] || [ $is_ascending -eq 0 ] && [ $is_descending\
    \ -eq 0 ]; then\n      is_sorted=0\n      break\n    fi\n  done\n\n  if [ $is_sorted\
    \ -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local\
    \ -i sorted=1\n    local -i duplicates=0\n    local -i current=0\n    local -i\
    \ next=0\n    for ((i=0; i<n; i++)); do\n        current=${array[$i]}\n      \
    \  for ((j=i+1; j<n; j++)); do\n            next=${array[$j]}\n            if\
    \ [[ $current -eq $next ]]; then\n                ((duplicates++))\n         \
    \   fi\n        done\n    done\n    if [[ $duplicates -gt 0 ]]; then\n       \
    \ sorted=0\n    else\n        for ((i=0; i<n-1; i++)); do\n            current=${array[$i]}\n\
    \            next=${array[$i+1]}\n            if [[ $current -gt $next ]]; then\n\
    \                sorted=0\n                break\n            fi\n        done\n\
    \    fi\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -a sorted=(\"${array[@]}\")\n  local -a sorted_uniq=(\"${array[@]}\"\
    )\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i\
    \ m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local\
    \ -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n\
    \  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i\
    \ kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n \
    \ local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i\
    \ tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n \
    \ local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local\
    \ -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n\
    \  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local prev=0\n  for\
    \ num in $1; do\n    if [[ $num -le $prev ]]; then\n      echo False\n      return\n\
    \    fi\n    prev=$num\n  done\n  echo True\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i prev=${arr[0]}\n    for ((i=1; i<len; i++)); do\n        if ((prev\
    \ >= arr[i])); then\n            return 1\n        fi\n        prev=${arr[i]}\n\
    \    done\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [ \"${#arr[@]}\"\
    \ -ne \"${#uniq[@]}\" ]; then\n    echo \"False\"\n  else\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n      if [ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]; then\n       \
    \ echo \"False\"\n        return\n      fi\n    done\n    echo \"True\"\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        if ((prev >= arr[i])); then\n      \
    \      echo \"False\"\n            return\n        fi\n        prev=${arr[i]}\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $prev ]]; then\n\
    \            echo \"False\"\n            return\n        fi\n        prev=${arr[i]}\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i cnt=0\n    local -i prev=0\n    local -i curr=0\n    local\
    \ -i next=0\n    local -i sorted=1\n    local -i dup=0\n    for ((i=0; i<len;\
    \ i++)); do\n        curr=${arr[i]}\n        prev=${arr[i-1]}\n        next=${arr[i+1]}\n\
    \        if [[ $curr -eq $prev ]]; then\n            cnt=$((cnt+1))\n        else\n\
    \            cnt=0\n        fi\n        if [[ $cnt -gt 1 ]]; then\n          \
    \  dup=1\n        fi\n        if [[ $curr -lt $prev ]]; then\n            sorted=0\n\
    \        fi\n    done\n    if [[ $sorted -eq 1 ]]; then\n        echo \"True\"\
    \n    elif [[ $dup -eq 1 ]]; then\n        echo \"False\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i sorted=1\n  local -i duplicates=0\n\
    \n  for ((i=1; i<len; i++)); do\n    curr=${array[i]}\n    next=${array[i+1]}\n\
    \    if [[ $curr -lt $prev ]]; then\n      sorted=0\n      break\n    elif [[\
    \ $curr -eq $prev ]]; then\n      duplicates=1\n    fi\n    prev=$curr\n  done\n\
    \n  if [[ $sorted -eq 1 && $duplicates -eq 0 ]]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if ((curr < prev)); then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i len=${#array[@]}\n  local -i i\n  local -i prev=${array[0]}\n\
    \  for ((i=1; i<len; i++)); do\n    if [[ ${array[i]} -lt $prev ]]; then\n   \
    \   echo \"False\"\n      return\n    fi\n    prev=${array[i]}\n  done\n  echo\
    \ \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n\
    \    local sorted_count=$(echo \"$sorted\" | wc -w)\n    local list_count=$(echo\
    \ \"$list\" | wc -w)\n    if [[ \"$sorted_count\" -eq \"$list_count\" ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i result=1\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if [[ $curr -lt $prev ]]; then\n      result=0\n\
    \      break\n    elif [[ $curr -eq $prev ]]; then\n      ((count++))\n      if\
    \ [[ $count -gt 1 ]]; then\n        result=0\n        break\n      fi\n    fi\n\
    \    prev=$curr\n  done\n  echo $result\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if ((curr < prev)); then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  local -i is_ascending=1\n  local -i is_descending=1\n\n  while [ $i -lt $len\
    \ ]; do\n    curr=${array[$i]}\n    if [ $i -lt $((len - 1)) ]; then\n      next=${array[$((i\
    \ + 1))]}\n    fi\n    if [ $curr -eq $prev ]; then\n      is_duplicate=1\n  \
    \  fi\n    if [ $curr -lt $prev ]; then\n      is_ascending=0\n    fi\n    if\
    \ [ $curr -gt $prev ]; then\n      is_descending=0\n    fi\n    prev=$curr\n \
    \   i=$((i + 1))\n  done\n\n  if [ $is_duplicate -eq 1 ]; then\n    is_sorted=0\n\
    \  elif [ $is_ascending -eq 1 ]; then\n    is_sorted=1\n  elif [ $is_descending\
    \ -eq 1 ]; then\n    is_sorted=1\n  else\n    is_sorted=0\n  fi\n\n  echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_num=0\n\
    \  local -i max_num_count=0\n  local -i max_num_prev=0\n  local -i max_num_curr=0\n\
    \  local -i max_num_count_prev=0\n  local -i max_num_count_curr=0\n  local -i\
    \ max_num_count_prev_curr=0\n  local -i max_num_count_curr_prev=0\n  local -i\
    \ max_num_count_prev_curr_prev=0\n  local -i max_num_count_curr_prev_curr=0\n\
    \  local -i max_num_count_prev_curr_prev_curr=0\n  local -i max_num_count_curr_prev_curr_prev=0\n\
    \  local -i max_num_count_prev_curr_prev_curr_prev=0\n  local -i max_num_count_curr_prev_curr_prev_curr=0\n\
    \  local -i max_num_count_prev_curr_prev_curr_prev_curr=0\n  local -i max_num_count_curr_prev_curr_prev_curr_prev=0\n\
    \  local -i max_num_count_prev_curr_prev_curr_prev_curr_prev=0\n  local -i max_num_count_curr_prev_curr_prev_curr_prev_curr=0\n\
    \  local -i max_num_count_prev_curr_prev_curr_prev_curr_prev_curr=0\n  local -i\
    \ max_num_count_curr_prev_curr_prev_curr_prev_curr_prev=0\n  local -i max_num_count_prev_curr_prev_curr_prev\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n  \
    \  local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n    local -i flag50\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    # sort the list\n\
    \    sorted=$(echo \"$1\" | tr ' ' '\\n' | sort -n)\n    # check if the list is\
    \ equal to the sorted list\n    if [ \"$1\" = \"$sorted\" ]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i dup=0\n  local -i sorted=1\n  for ((i=1;\
    \ i<len; i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      sorted=0\n\
    \      break\n    fi\n    if ((curr == prev)); then\n      dup=1\n    fi\n   \
    \ prev=$curr\n  done\n  if ((dup == 1)); then\n    sorted=0\n  fi\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n   \
    \ local -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n    if [[ ${#arr[@]}\
    \ -eq ${#uniq[@]} ]]; then\n        for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \       if [[ ${arr[$i]} -ne ${sorted[$i]} ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        done\n        echo \"True\"\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  for ((i=1; i<len; i++)); do\n    if [[ ${arr[i]} -lt $prev ]]; then\n     \
    \ echo false\n      return\n    fi\n    prev=${arr[i]}\n  done\n  echo true\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpedve62ld.sh: line 20: local: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    '
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array\n\
    \    IFS=' ' read -r -a array <<< \"$1\"\n    local -i i=0\n    local -i len=${#array[@]}\n\
    \    local -i prev=${array[0]}\n    local -i curr\n    local -i is_sorted=1\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${array[i]}\n        if ((curr\
    \ < prev)); then\n            is_sorted=0\n            break\n        fi\n   \
    \     prev=$curr\n    done\n    echo \"$is_sorted\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n    next=${arr[i+1]}\n   \
    \ if [[ $curr -lt $prev ]]; then\n      is_sorted=0\n      break\n    elif [[\
    \ $curr -eq $prev ]]; then\n      if [[ $curr -eq $next ]]; then\n        is_duplicate=1\n\
    \      fi\n    fi\n    prev=$curr\n  done\n  if [[ $is_sorted -eq 1 && $is_duplicate\
    \ -eq 0 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    local -i is_duplicate=0\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        if ((curr <\
    \ prev)); then\n            is_sorted=0\n            break\n        elif ((curr\
    \ == prev)); then\n            is_duplicate=1\n        fi\n        prev=$curr\n\
    \    done\n    if ((is_duplicate)); then\n        is_sorted=0\n    fi\n    echo\
    \ $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n    if [[ $i -le\
    \ $prev ]]; then\n      return 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      dup=1\n    fi\n    prev=$curr\n  done\n  if ((dup ==\
    \ 1)); then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local prev=${arr[0]}\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i\
    \ -le $prev ]]; then\n            echo \"False\"\n            return\n       \
    \ fi\n        prev=$i\n    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted_arr=(\"${arr[@]}\")\n  local -i i=0\n  local -i j=0\n\
    \  local -i len=${#arr[@]}\n  local -i sorted_len=${#sorted_arr[@]}\n  local -i\
    \ dup_count=0\n  local -i dup_index=0\n  local -i sorted_dup_count=0\n  local\
    \ -i sorted_dup_index=0\n  local -i sorted_dup_value=0\n  local -i dup_value=0\n\
    \  local -i sorted_dup_value=0\n  local -i sorted_dup_index=0\n  local -i sorted_dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_count=0\n  local -i dup_value=0\n  local\
    \ -i sorted_dup_value=0\n  local -i sorted_dup_index=0\n  local -i sorted_dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_count=0\n  local -i dup_value=0\n  local\
    \ -i sorted_dup_value=0\n  local -i sorted_dup_index=0\n  local -i sorted_dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_count=0\n  local -i dup_value=0\n  local\
    \ -i sorted_dup_value=0\n  local -i sorted_dup_index=0\n  local -i sorted_dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_count=0\n  local -i dup_value=0\n  local\
    \ -i sorted_dup_value=0\n  local -i sorted_dup_index=0\n  local -i sorted_dup_count=0\n\
    \  local -i dup_index=0\n  local -i dup_count=0\n  local -i dup_value=0\n  local\
    \ -i sorted_dup_value=0\n  local -i sorted_dup_index\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ \"${#arr[@]}\"\
    \ -eq \"${#uniq[@]}\" ]]; then\n    for ((i=0; i<\"${#arr[@]}\"; i++)); do\n \
    \     if [[ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]]; then\n        echo false\n\
    \        return\n      fi\n    done\n    echo true\n  else\n    echo false\n \
    \ fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      dup=1\n    fi\n    prev=$curr\n  done\n  if ((dup ==\
    \ 1)); then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i count=0\n    local -i flag=0\n    local -i flag1=0\n    for ((i=0; i<len;\
    \ i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n            if\
    \ [[ ${arr[i]} -eq ${arr[j]} ]]\n            then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count -gt 1 ]]\n        then\n \
    \           flag=1\n            break\n        fi\n        count=0\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"False\"\n    else\n      \
    \  for ((i=0; i<len-1; i++))\n        do\n            if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n            then\n                flag1=1\n                break\n     \
    \       fi\n        done\n        if [[ $flag1 -eq 1 ]]\n        then\n      \
    \      echo \"False\"\n        else\n            echo \"True\"\n        fi\n \
    \   fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local prev=${arr[0]}\n    for i in \"${arr[@]:1}\"; do\n        if\
    \ [[ $i -lt $prev ]]; then\n            echo \"False\"\n            return\n \
    \       fi\n        prev=$i\n    done\n    echo \"True\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local prev=${arr[0]}\n  local curr\n  for curr in \"${arr[@]:1}\"; do\n\
    \    if [[ $curr -le $prev ]]; then\n      return 1\n    fi\n    prev=$curr\n\
    \  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [ \"${#arr[@]}\"\
    \ -eq \"${#uniq[@]}\" ]; then\n    for ((i=0; i<\"${#arr[@]}\"; i++)); do\n  \
    \    if [ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]; then\n        echo \"False\"\
    \n        return\n      fi\n    done\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n    local\
    \ -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n\
    \    local -i flag48=0\n    local -i flag49=0\n    local -i flag50=\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ \"${#arr[@]}\"\
    \ -ne \"${#uniq[@]}\" ]]; then\n    echo \"False\"\n  elif [[ \"${arr[*]}\" ==\
    \ \"${sorted[*]}\" ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n \
    \ fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local -a uniq=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ \"${#arr[@]}\" -eq \"${#uniq[@]}\"\
    \ ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local len=${#arr[@]}\n    local i=0\n    local prev=${arr[0]}\n    for ((i=1;\
    \ i<len; i++)); do\n        if (( arr[i] < prev )); then\n            echo \"\
    False\"\n            return\n        fi\n        prev=${arr[i]}\n    done\n  \
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  local\
    \ -i i\n  local -i len\n  local -i prev\n  local -i curr\n  local -i is_sorted\n\
    \  arr=($1)\n  len=${#arr[@]}\n  is_sorted=1\n  for ((i=0; i<len; i++)); do\n\
    \    curr=${arr[$i]}\n    if ((i > 0)); then\n      if ((curr < prev)); then\n\
    \        is_sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n  done\n\
    \  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt\
    \ $len ]; do\n    curr=${array[$i]}\n    if [ $i -lt $((len - 1)) ]; then\n  \
    \    next=${array[$((i + 1))]}\n    fi\n    if [ $curr -lt $prev ]; then\n   \
    \   is_sorted=0\n      break\n    elif [ $curr -eq $prev ] && [ $curr -eq $next\
    \ ]; then\n      is_sorted=0\n      break\n    fi\n    prev=$curr\n    i=$((i\
    \ + 1))\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n   \
    \ local -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n    if [ \"${#arr[@]}\"\
    \ -eq \"${#uniq[@]}\" ]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -a sorted_array=(\"${array[@]}\")\n  local -a sorted_array_no_duplicates=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty=(\"${array[@]}\"\
    )\n  local -a sorted_array_no_duplicates_no_empty_no_zero=(\"${array[@]}\")\n\
    \  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative=(\"${array[@]}\"\
    )\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string_no_char=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string_no_char_no_infinity=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string_no_char_no_infinity_no_nan=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string_no_char_no_infinity_no_nan_no_undefined=(\"\
    ${array[@]}\")\n  local -a sorted_array_no_duplicates_no_empty_no_zero_no_negative_no_decimal_no_string_no_char_no_infinity_no_nan_no_undefined_no_null=(\"\
    ${array[@]}\")\n  local -a sorted_array_no\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n\
    \    local prev=0\n    local curr=0\n    local is_sorted=true\n    local is_duplicate=false\n\
    \    for i in $list; do\n        curr=$i\n        if [ $curr -eq $prev ]; then\n\
    \            is_duplicate=true\n        fi\n        if [ $curr -lt $prev ]; then\n\
    \            is_sorted=false\n        fi\n        prev=$curr\n    done\n    if\
    \ [ $is_duplicate = true ]; then\n        is_sorted=false\n    fi\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i count=0\n  local -i is_sorted=1\n  for ((i=0; i<len; i++)); do\n  \
    \  count=0\n    for ((j=0; j<len; j++)); do\n      if [[ ${arr[i]} -eq ${arr[j]}\
    \ ]]; then\n        ((count++))\n      fi\n    done\n    if [[ count -gt 1 ]];\
    \ then\n      is_sorted=0\n      break\n    fi\n  done\n  if [[ is_sorted -eq\
    \ 1 ]]; then\n    for ((i=0; i<len-1; i++)); do\n      if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]; then\n        is_sorted=0\n        break\n      fi\n    done\n  fi\n  echo\
    \ $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local len=${#arr[@]}\n    local i=0\n    local prev=${arr[0]}\n   \
    \ for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $prev ]]; then\n  \
    \          echo \"False\"\n            return\n        fi\n        prev=${arr[i]}\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  for ((i=1; i<len; i++));\
    \ do\n    curr=${arr[i]}\n    next=${arr[i+1]}\n    if [[ $curr -lt $prev ]];\
    \ then\n      is_sorted=0\n      break\n    elif [[ $curr -eq $prev ]]; then\n\
    \      if [[ $curr -eq $next ]]; then\n        is_sorted=0\n        break\n  \
    \    fi\n    fi\n    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=0\n  \
    \  local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local -i\
    \ is_duplicate=0\n    for ((i=0; i<len; i++)); do\n        curr=${arr[$i]}\n \
    \       if ((i > 0)); then\n            prev=${arr[$((i-1))]}\n            if\
    \ ((curr < prev)); then\n                is_sorted=0\n                break\n\
    \            fi\n            if ((curr == prev)); then\n                is_duplicate=1\n\
    \            fi\n        fi\n        if ((i < len-1)); then\n            next=${arr[$((i+1))]}\n\
    \            if ((curr > next)); then\n                is_sorted=0\n         \
    \       break\n            fi\n            if ((curr == next)); then\n       \
    \         is_duplicate=1\n            fi\n        fi\n    done\n    if ((is_sorted\
    \ == 1 && is_duplicate == 0)); then\n        echo \"True\"\n    else\n       \
    \ echo \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local\
    \ -i is_duplicate=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n\
    \        next=${arr[i+1]}\n        if ((curr < prev)); then\n            is_sorted=0\n\
    \            break\n        elif ((curr == prev)); then\n            is_duplicate=1\n\
    \        fi\n        prev=$curr\n    done\n    if ((is_duplicate == 1)); then\n\
    \        is_sorted=0\n    fi\n    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if [[ $curr -lt $prev ]]; then\n      echo \"False\"\n      return\n    elif\
    \ [[ $curr -eq $prev ]]; then\n      dup=1\n    fi\n    prev=$curr\n  done\n \
    \ if [[ $dup -eq 1 ]]; then\n    echo \"False\"\n  else\n    echo \"True\"\n \
    \ fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      sorted=0\n\
    \      break\n    elif ((curr == prev)); then\n      dup=1\n    fi\n    prev=$curr\n\
    \  done\n  if ((dup)); then\n    sorted=0\n  fi\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr\n    while (( i < len )); do\n        curr=${arr[i]}\n    \
    \    if (( curr < prev )); then\n            echo \"False\"\n            return\n\
    \        fi\n        prev=$curr\n        (( i++ ))\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  while [ $i -lt $len\
    \ ]; do\n    curr=${arr[$i]}\n    if [ $curr -eq $prev ]; then\n      (( dup++\
    \ ))\n    elif [ $curr -lt $prev ]; then\n      sorted=0\n    fi\n    prev=$curr\n\
    \    (( i++ ))\n  done\n  if [ $dup -gt 1 ]; then\n    sorted=0\n  fi\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array\n\
    \    IFS=' ' read -r -a array <<< \"$1\"\n    local -i i\n    local -i len=${#array[@]}\n\
    \    local -i prev=${array[0]}\n    local -i curr\n    for ((i=1; i<len; i++));\
    \ do\n        curr=${array[i]}\n        if ((curr < prev)); then\n           \
    \ echo \"False\"\n            return\n        fi\n        prev=$curr\n    done\n\
    \    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n   \
    \ local -i sorted=1\n    local -i duplicate=0\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ ${array[i]} -gt ${array[j]}\
    \ ]]; then\n                sorted=0\n            fi\n            if [[ ${array[i]}\
    \ -eq ${array[j]} ]]; then\n                duplicate=1\n            fi\n    \
    \    done\n    done\n    if [[ $sorted -eq 1 ]] && [[ $duplicate -eq 0 ]]; then\n\
    \        echo True\n    else\n        echo False\n    fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i prev=${array[0]}\n\
    \    local -i curr=0\n    local -i dup=0\n    for ((i=1; i<len; i++)); do\n  \
    \      curr=${array[i]}\n        if ((curr < prev)); then\n            echo \"\
    False\"\n            return\n        elif ((curr == prev)); then\n           \
    \ dup=1\n        fi\n        prev=$curr\n    done\n    if ((dup)); then\n    \
    \    echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=(\"\
    $@\")\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n   \
    \ local -i sorted=1\n    local -i duplicates=0\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ ${array[i]} -gt ${array[j]}\
    \ ]]; then\n                sorted=0\n            fi\n            if [[ ${array[i]}\
    \ -eq ${array[j]} ]]; then\n                duplicates=1\n            fi\n   \
    \     done\n    done\n    if [[ sorted -eq 1 && duplicates -eq 0 ]]; then\n  \
    \      echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n \
    \ local sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[\
    \ \"$list\" == \"$sorted\" ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt $len\
    \ ]; do\n    curr=${arr[$i]}\n    if [ $i -lt $((len-1)) ]; then\n      next=${arr[$((i+1))]}\n\
    \    fi\n    if [ $curr -lt $prev ]; then\n      is_sorted=0\n      break\n  \
    \  elif [ $curr -eq $prev ]; then\n      if [ $curr -eq $next ]; then\n      \
    \  is_sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n    i=$((i+1))\n\
    \  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i cnt=0\n    local -i prev=0\n    local -i curr=0\n    local\
    \ -i next=0\n    local -i is_dup=0\n    local -i is_sorted=1\n    local -i is_ascending=1\n\
    \    local -i is_descending=1\n    local -i is_equal=1\n    local -i is_equal_prev=1\n\
    \    local -i is_equal_next=1\n    local -i is_equal_prev_next=1\n    local -i\
    \ is_equal_prev_curr=1\n    local -i is_equal_curr_next=1\n    local -i is_equal_prev_curr_next=1\n\
    \    local -i is_equal_prev_curr_next_dup=1\n    local -i is_equal_prev_curr_next_dup_ascending=1\n\
    \    local -i is_equal_prev_curr_next_dup_descending=1\n    local -i is_equal_prev_curr_next_dup_ascending_descending=1\n\
    \    local -i is_equal_prev_curr_next_dup_ascending_descending_equal=1\n    local\
    \ -i is_equal_prev_curr_next_dup_ascending_descending_equal_sorted=1\n    local\
    \ -i is_equal_prev_curr_next_dup_ascending_descending_equal_sorted_equal=1\n \
    \   local -i is_equal_prev_curr_next_dup_ascending_descending_equal_sorted_equal_dup=1\n\
    \    local -i is_equal_prev_curr_next_dup_ascending_descending_equal_sorted_equal_dup_ascending=1\n\
    \    local -i is_equal_prev_curr_next_dup_ascending_descending_equal_sorted_equal_du\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=0\n  \
    \  local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local -i\
    \ is_duplicate=0\n    local -i is_duplicate_prev=0\n    local -i is_duplicate_next=0\n\
    \    local -i is_duplicate_prev_prev=0\n    local -i is_duplicate_next_next=0\n\
    \    local -i is_duplicate_prev_prev_prev=0\n    local -i is_duplicate_next_next_next=0\n\
    \    local -i is_duplicate_prev_prev_prev_prev=0\n    local -i is_duplicate_next_next_next_next=0\n\
    \    local -i is_duplicate_prev_prev_prev_prev_prev=0\n    local -i is_duplicate_next_next_next_next_next=0\n\
    \    local -i is_duplicate_prev_prev_prev_prev_prev_prev=0\n    local -i is_duplicate_next_next_next_next_next_next=0\n\
    \    local -i is_duplicate_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ is_duplicate_next_next_next_next_next_next_next=0\n    local -i is_duplicate_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i is_duplicate_next_next_next_next_next_next_next_next=0\n    local\
    \ -i is_duplicate_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ is_duplicate_next_next_next_next_next_next_next_next_next=0\n    local -i is_duplicate_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  for ((i=1; i<len; i++)); do\n    curr=${array[i]}\n    next=${array[i+1]}\n\
    \    if [[ $curr -lt $prev ]]; then\n      is_sorted=0\n      break\n    elif\
    \ [[ $curr -eq $prev ]]; then\n      if [[ $curr -eq $next ]]; then\n        is_duplicate=1\n\
    \      fi\n    fi\n    prev=$curr\n  done\n  if [[ $is_sorted -eq 1 && $is_duplicate\
    \ -eq 0 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n\
    \  local sorted=true\n  for ((i=0; i<${#list[@]}-1; i++)); do\n    if [[ ${list[$i]}\
    \ -gt ${list[$i+1]} ]]; then\n      sorted=false\n      break\n    fi\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n'\
    \ ' '))\n    if [[ \"${arr[*]}\" == \"${sorted[*]}\" ]]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i duplicates=0\n  local -i sorted=1\n\n  for ((i=1;\
    \ i<len; i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      sorted=0\n\
    \      break\n    elif ((curr == prev)); then\n      duplicates=1\n    fi\n  \
    \  prev=$curr\n  done\n\n  if ((sorted == 1 && duplicates == 0)); then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if ((curr < prev)); then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i duplicates=0\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      ((duplicates++))\n    fi\n    prev=$curr\n  done\n  if\
    \ ((duplicates > 0)); then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt\
    \ $len ]; do\n    curr=${arr[$i]}\n    if [ $i -lt $((len - 1)) ]; then\n    \
    \  next=${arr[$((i + 1))]}\n    fi\n    if [ $i -gt 0 ]; then\n      if [ $curr\
    \ -lt $prev ]; then\n        is_sorted=0\n        break\n      fi\n    fi\n  \
    \  if [ $i -lt $((len - 1)) ]; then\n      if [ $curr -eq $next ]; then\n    \
    \    is_sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n    i=$((i\
    \ + 1))\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n \
    \ local sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[\
    \ $list == $sorted ]]; then\n    echo True\n  else\n    echo False\n  fi\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt $len\
    \ ]; do\n    curr=${arr[$i]}\n    if [ $i -lt $((len-1)) ]; then\n      next=${arr[$((i+1))]}\n\
    \    fi\n    if [ $curr -lt $prev ]; then\n      is_sorted=0\n      break\n  \
    \  elif [ $curr -eq $prev ]; then\n      if [ $curr -eq $next ]; then\n      \
    \  is_sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n    i=$((i+1))\n\
    \  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n\
    \        if ((curr < prev)); then\n            echo \"False\"\n            return\n\
    \        fi\n        prev=$curr\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  IFS='\
    \ ' read -r -a arr <<< \"$1\"\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"\
    ; do\n    if [[ $i -le $prev ]]; then\n      echo false\n      return\n    fi\n\
    \    prev=$i\n  done\n  echo true\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  while (( i < len )); do\n    curr=${arr[i]}\n\
    \    if (( curr < prev )); then\n      echo \"False\"\n      return\n    elif\
    \ (( curr == prev )); then\n      (( dup++ ))\n      if (( dup > 1 )); then\n\
    \        echo \"False\"\n        return\n      fi\n    fi\n    (( i++ ))\n   \
    \ prev=$curr\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -u))\n  if [[ \"${#arr[@]}\"\
    \ -ne \"${#sorted[@]}\" ]]; then\n    echo \"False\"\n  else\n    echo \"True\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i flag=0\n  for ((i=1; i<len; i++));\
    \ do\n    curr=${arr[i]}\n    next=${arr[i+1]}\n    if [[ $curr -eq $prev ]];\
    \ then\n      flag=1\n    elif [[ $curr -gt $prev ]]; then\n      if [[ $flag\
    \ -eq 1 ]]; then\n        echo \"False\"\n        return\n      fi\n    else\n\
    \      echo \"False\"\n      return\n    fi\n    prev=$curr\n  done\n  echo \"\
    True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  local -i is_duplicate_found=0\n  local -i is_duplicate_found_once=0\n  local\
    \ -i is_duplicate_found_twice=0\n  local -i is_duplicate_found_thrice=0\n  local\
    \ -i is_duplicate_found_four_times=0\n  local -i is_duplicate_found_five_times=0\n\
    \  local -i is_duplicate_found_six_times=0\n  local -i is_duplicate_found_seven_times=0\n\
    \  local -i is_duplicate_found_eight_times=0\n  local -i is_duplicate_found_nine_times=0\n\
    \  local -i is_duplicate_found_ten_times=0\n  local -i is_duplicate_found_eleven_times=0\n\
    \  local -i is_duplicate_found_twelve_times=0\n  local -i is_duplicate_found_thirteen_times=0\n\
    \  local -i is_duplicate_found_fourteen_times=0\n  local -i is_duplicate_found_fifteen_times=0\n\
    \  local -i is_duplicate_found_sixteen_times=0\n  local -i is_duplicate_found_seventeen_times=0\n\
    \  local -i is_duplicate_found_eighteen_times=0\n  local -i is_duplicate_found_nineteen_times=0\n\
    \  local -i is_duplicate_found_twenty_times=0\n  local -i is_duplicate_found_twenty_one_times=0\n\
    \  local -i is_duplicate_found_twenty_two_times=0\n \n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i dup=0\n    for ((i=1; i<len; i++)); do\n  \
    \      curr=${arr[i]}\n        if ((curr < prev)); then\n            echo \"False\"\
    \n            return\n        elif ((curr == prev)); then\n            dup=1\n\
    \        fi\n        prev=$curr\n    done\n    if ((dup)); then\n        echo\
    \ \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted_arr=(\"${arr[@]}\")\n  local -a unique_arr=(\"${arr[@]}\"\
    )\n  local -a unique_sorted_arr=(\"${arr[@]}\")\n  local -a unique_sorted_arr_rev=(\"\
    ${arr[@]}\")\n  local -a unique_sorted_arr_rev_dup=(\"${arr[@]}\")\n  local -a\
    \ unique_sorted_arr_dup=(\"${arr[@]}\")\n  local -a unique_sorted_arr_dup_rev=(\"\
    ${arr[@]}\")\n  local -a unique_sorted_arr_dup_rev_dup=(\"${arr[@]}\")\n  local\
    \ -a unique_sorted_arr_dup_rev_dup_rev=(\"${arr[@]}\")\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup=(\"\
    ${arr[@]}\")\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev=(\"${arr[@]}\"\
    )\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_dup=(\"${arr[@]}\")\n\
    \  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_dup_rev=(\"${arr[@]}\")\n\
    \  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_dup_rev_dup=(\"${arr[@]}\"\
    )\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_dup_rev_dup_rev=(\"${arr[@]}\"\
    )\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_dup_rev_dup_rev_dup=(\"\
    ${arr[@]}\")\n  local -a unique_sorted_arr_dup_rev_dup_rev_dup_rev_du\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  while (( ++i < len )); do\n    if (( prev >= arr[i] )); then\n      echo \"\
    False\"\n      return\n    fi\n    prev=${arr[i]}\n  done\n  echo \"True\"\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i len=${#array[@]}\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local\
    \ -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local\
    \ -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n\
    \  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i\
    \ bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n \
    \ local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for (( i=1; i<len; i++ ));\
    \ do\n        curr=${arr[$i]}\n        if (( curr <= prev )); then\n         \
    \   is_sorted=0\n            break\n        fi\n        prev=$curr\n    done\n\
    \    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n \
    \ local sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if\
    \ [[ \"$list\" == \"$sorted\" ]]; then\n    echo \"True\"\n  else\n    echo \"\
    False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local len=${#arr[@]}\n  local prev=${arr[0]}\n  for ((i=1;\
    \ i<len; i++)); do\n    if [[ ${arr[i]} -le $prev ]]; then\n      echo \"False\"\
    \n      return\n    fi\n    prev=${arr[i]}\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    next=${arr[i+1]}\n    if ((curr < prev));\
    \ then\n      is_sorted=0\n      break\n    elif ((curr == prev && curr == next));\
    \ then\n      is_sorted=0\n      break\n    fi\n    prev=$curr\n  done\n  echo\
    \ $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i dup=0\n    local -i sorted=1\n    for ((i=1;\
    \ i<len; i++)); do\n        curr=${arr[i]}\n        if ((curr < prev)); then\n\
    \            sorted=0\n            break\n        elif ((curr == prev)); then\n\
    \            dup=1\n        fi\n        prev=$curr\n    done\n    if ((dup ==\
    \ 1)); then\n        sorted=0\n    fi\n    echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i prev=0\n    local -i curr=0\n    local -i\
    \ len=${#arr[@]}\n    local -i dup=0\n    local -i sorted=1\n    for ((i=0; i<len;\
    \ i++)); do\n        curr=${arr[$i]}\n        if ((curr == prev)); then\n    \
    \        ((dup++))\n        fi\n        if ((curr < prev)); then\n           \
    \ ((sorted=0))\n        fi\n        prev=$curr\n    done\n    if ((dup > 1));\
    \ then\n        ((sorted=0))\n    fi\n    echo $sorted\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local i=0\n  local len=${#arr[@]}\n  local prev=${arr[0]}\n  local curr=0\n\
    \  local is_sorted=true\n  for ((i=1; i<len; i++)); do\n    curr=${arr[$i]}\n\
    \    if [[ $curr -lt $prev ]]; then\n      is_sorted=false\n      break\n    fi\n\
    \    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted\n  local -i i=0\n  local -i j=0\n  local -i len=${#arr[@]}\n\
    \  local -i prev=0\n  local -i curr=0\n  local -i next=0\n  local -i dup=0\n \
    \ local -i sorted=1\n  local -i is_sorted=1\n\n  # check for duplicates\n  for\
    \ ((i=0; i<len; i++)); do\n    curr=${arr[$i]}\n    for ((j=i+1; j<len; j++));\
    \ do\n      next=${arr[$j]}\n      if [[ $curr -eq $next ]]; then\n        dup=1\n\
    \        break\n      fi\n    done\n    if [[ $dup -eq 1 ]]; then\n      break\n\
    \    fi\n  done\n\n  # check for sorted\n  if [[ $dup -eq 0 ]]; then\n    for\
    \ ((i=0; i<len; i++)); do\n      curr=${arr[$i]}\n      if [[ $i -gt 0 ]]; then\n\
    \        prev=${arr[$i-1]}\n        if [[ $curr -lt $prev ]]; then\n         \
    \ sorted=0\n          break\n        fi\n      fi\n    done\n  fi\n\n  if [[ $dup\
    \ -eq 1 ]]; then\n    is_sorted=0\n  elif [[ $sorted -eq 0 ]]; then\n    is_sorted=0\n\
    \  fi\n\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    for ((i=1; i<len; i++)); do\n \
    \       curr=${arr[i]}\n        next=${arr[i+1]}\n        if ((curr < prev));\
    \ then\n            echo \"False\"\n            return\n        elif ((curr ==\
    \ prev)); then\n            if ((curr == next)); then\n                echo \"\
    False\"\n                return\n            fi\n        fi\n        prev=$curr\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local prev=${arr[0]}\n    local curr=\n    for curr in ${arr[@]:1}; do\n\
    \        if [[ $curr -le $prev ]]; then\n            return 1\n        fi\n  \
    \      prev=$curr\n    done\n    return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i prev=0\n    local\
    \ -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local -i is_duplicate=0\n\
    \    local -i is_last=0\n    for ((i=0; i<n; i++)); do\n        curr=${arr[$i]}\n\
    \        if ((i==0)); then\n            prev=$curr\n        else\n           \
    \ prev=${arr[$((i-1))]}\n        fi\n        if ((i==n-1)); then\n           \
    \ is_last=1\n        fi\n        if ((is_last==0)); then\n            next=${arr[$((i+1))]}\n\
    \        fi\n        if ((curr<prev)); then\n            is_sorted=0\n       \
    \ fi\n        if ((curr==prev)); then\n            is_duplicate=1\n        fi\n\
    \        if ((is_last==1 && is_duplicate==1)); then\n            is_sorted=0\n\
    \        fi\n    done\n    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i max=0\n  local -i max_count=0\n\
    \  local -i max_index=0\n  local -i max_prev=0\n  local -i max_curr=0\n  local\
    \ -i max_count_prev=0\n  local -i max_count_curr=0\n  local -i max_count_index=0\n\
    \  local -i max_count_prev_index=0\n  local -i max_count_curr_index=0\n  local\
    \ -i max_count_prev_index_curr=0\n  local -i max_count_prev_index_prev=0\n  local\
    \ -i max_count_curr_index_curr=0\n  local -i max_count_curr_index_prev=0\n  local\
    \ -i max_count_prev_index_curr_curr=0\n  local -i max_count_prev_index_curr_prev=0\n\
    \  local -i max_count_prev_index_prev_curr=0\n  local -i max_count_prev_index_prev_prev=0\n\
    \  local -i max_count_curr_index_curr_curr=0\n  local -i max_count_curr_index_curr_prev=0\n\
    \  local -i max_count_curr_index_prev_curr=0\n  local -i max_count_curr_index_prev_prev=0\n\
    \  local -i max_count_prev_index_curr_curr_curr=0\n  local -i max_count_prev_index_curr_curr_prev=0\n\
    \  local -i max_count_prev_index_curr_prev_curr=0\n  local -i max_count_prev_index_curr_prev_prev=0\n\
    \  local -i max_count_prev_index_prev_curr_curr=0\n \n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i dup=0\n    local -i sorted=1\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        if ((curr ==\
    \ prev)); then\n            ((dup++))\n        fi\n        if ((curr < prev));\
    \ then\n            sorted=0\n            break\n        fi\n        prev=$curr\n\
    \    done\n    if ((dup > 0)); then\n        sorted=0\n    fi\n    echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i j=0\n  local -i len=${#array[@]}\n  local -i\
    \ dup=0\n  local -i sorted=1\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1;\
    \ j<len; j++)); do\n      if [[ ${array[i]} -eq ${array[j]} ]]; then\n       \
    \ ((dup++))\n      fi\n    done\n  done\n  if [[ $dup -gt 0 ]]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  for ((i=0; i<len-1; i++)); do\n    if [[ ${array[i]}\
    \ -gt ${array[i+1]} ]]; then\n      sorted=0\n      break\n    fi\n  done\n  if\
    \ [[ $sorted -eq 1 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n \
    \ fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=($1)\n\
    \    local -a sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -u))\n    if [[\
    \ \"${#array[@]}\" -ne \"${#sorted[@]}\" ]]; then\n        echo \"False\"\n  \
    \  else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array\n\
    \  IFS=' ' read -r -a array <<< \"$1\"\n  local len=${#array[@]}\n  local i=0\n\
    \  local prev=${array[0]}\n  local curr\n  while (( i < len )); do\n    curr=${array[i]}\n\
    \    if (( curr < prev )); then\n      echo \"False\"\n      return\n    fi\n\
    \    prev=$curr\n    (( i++ ))\n  done\n  echo \"True\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr\n\
    \    local -i i\n    local -i len\n    local -i prev\n    local -i curr\n    local\
    \ -i is_sorted\n\n    arr=($1)\n    len=${#arr[@]}\n    is_sorted=1\n    prev=${arr[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        if ((curr <\
    \ prev)); then\n            is_sorted=0\n            break\n        fi\n     \
    \   prev=$curr\n    done\n    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  while (( i < len )); do\n    curr=${arr[i]}\n\
    \    if (( curr < prev )); then\n      echo \"False\"\n      return\n    elif\
    \ (( curr == prev )); then\n      dup=1\n    fi\n    prev=$curr\n    (( i++ ))\n\
    \  done\n  if (( dup == 1 )); then\n    echo \"False\"\n  else\n    echo \"True\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n \
    \ if [[ \"$list\" == \"$sorted\" ]]; then\n    echo True\n  else\n    echo False\n\
    \  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n   \
    \ local -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n    if [[ ${#arr[@]}\
    \ -eq ${#uniq[@]} ]]; then\n        if [[ \"${arr[*]}\" == \"${sorted[*]}\" ]];\
    \ then\n            echo \"True\"\n        else\n            echo \"False\"\n\
    \        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a nums=($1)\n\
    \  local -i i=0\n  local -i len=${#nums[@]}\n  local -i prev=${nums[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  while [ $i -lt $len\
    \ ]; do\n    curr=${nums[$i]}\n    if [ $i -lt $((len - 1)) ]; then\n      next=${nums[$((i\
    \ + 1))]}\n    fi\n    if [ $curr -lt $prev ]; then\n      is_sorted=0\n     \
    \ break\n    elif [ $curr -eq $prev ] && [ $curr -eq $next ]; then\n      is_sorted=0\n\
    \      break\n    fi\n    prev=$curr\n    i=$((i + 1))\n  done\n  echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=0\n  local -i curr=0\n\
    \  local -i next=0\n  local -i dup=0\n  for ((i=0; i<len; i++)); do\n    curr=${arr[$i]}\n\
    \    if ((i > 0)); then\n      prev=${arr[$((i-1))]}\n      if ((curr == prev));\
    \ then\n        dup=1\n      fi\n    fi\n    if ((i < len-1)); then\n      next=${arr[$((i+1))]}\n\
    \      if ((curr > next)); then\n        echo \"False\"\n        return\n    \
    \  fi\n    fi\n  done\n  if ((dup == 1)); then\n    echo \"False\"\n  else\n \
    \   echo \"True\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr\n  local -i dup=0\n  for ((i=1; i<len; i++)); do\n    curr=${array[i]}\n\
    \    if ((curr < prev)); then\n      echo \"False\"\n      return\n    elif ((curr\
    \ == prev)); then\n      dup=1\n    fi\n    prev=$curr\n  done\n  if ((dup));\
    \ then\n    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n  local\
    \ -i is_first=1\n  while [ $i -lt $len ]; do\n    curr=${arr[$i]}\n    if [ $is_first\
    \ -eq 1 ]; then\n      is_first=0\n    else\n      if [ $curr -eq $prev ]; then\n\
    \        is_duplicate=1\n      fi\n      if [ $curr -lt $prev ]; then\n      \
    \  is_sorted=0\n      fi\n    fi\n    prev=$curr\n    i=$((i+1))\n  done\n  if\
    \ [ $is_sorted -eq 1 ] && [ $is_duplicate -eq 0 ]; then\n    echo \"True\"\n \
    \ else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local prev=${arr[0]}\n  local curr=0\n  local is_sorted=true\n  for curr in\
    \ ${arr[@]:1}; do\n    if [[ $curr -le $prev ]]; then\n      is_sorted=false\n\
    \      break\n    fi\n    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  while (( i < len )); do\n    curr=${arr[i]}\n\
    \    if (( curr < prev )); then\n      echo \"False\"\n      return\n    elif\
    \ (( curr == prev )); then\n      (( dup++ ))\n      if (( dup > 1 )); then\n\
    \        echo \"False\"\n        return\n      fi\n    fi\n    (( i++ ))\n   \
    \ prev=$curr\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i prev=${arr[0]}\n    local -i curr=0\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        curr=${arr[i]}\n        if ((curr < prev)); then\n      \
    \      echo False\n            return\n        fi\n        prev=$curr\n    done\n\
    \    echo True\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array\n\
    \  IFS=' ' read -r -a array <<< \"$1\"\n  local -i i\n  local -i j\n  local -i\
    \ len=${#array[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++));\
    \ do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n        echo \"False\"\
    \n        return\n      fi\n    done\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local\
    \ -i is_duplicate=0\n    local -i is_last=0\n\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        next=${arr[i+1]}\n        is_last=$((i == len-1))\n\
    \n        if [[ $curr -eq $prev ]]; then\n            is_duplicate=1\n       \
    \ fi\n\n        if [[ $curr -lt $prev ]]; then\n            is_sorted=0\n    \
    \    fi\n\n        if [[ $is_duplicate -eq 1 && $is_last -eq 1 ]]; then\n    \
    \        is_sorted=0\n        fi\n\n        prev=$curr\n    done\n\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if ((curr < prev)); then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  while [ $i -lt $len ]; do\n    curr=${arr[$i]}\n    if [ $i -lt $((len - 1))\
    \ ]; then\n      next=${arr[$((i + 1))]}\n    fi\n    if [ $curr -lt $prev ];\
    \ then\n      is_sorted=0\n      break\n    elif [ $curr -eq $prev ]; then\n \
    \     is_duplicate=1\n    fi\n    prev=$curr\n    i=$((i + 1))\n  done\n  if [\
    \ $is_duplicate -eq 1 ]; then\n    is_sorted=0\n  fi\n  echo $is_sorted\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i count=0\n\
    \  local -i prev=0\n  local -i curr=0\n  local -i next=0\n  local -i sorted=1\n\
    \  local -i duplicates=0\n  local -i duplicates_found=0\n  local -i duplicates_allowed=0\n\
    \  local -i duplicates_allowed_found=0\n  local -i duplicates_allowed_found_prev=0\n\
    \  local -i duplicates_allowed_found_curr=0\n  local -i duplicates_allowed_found_next=0\n\
    \  local -i duplicates_allowed_found_prev_next=0\n  local -i duplicates_allowed_found_curr_next=0\n\
    \  local -i duplicates_allowed_found_prev_curr=0\n  local -i duplicates_allowed_found_prev_curr_next=0\n\
    \  local -i duplicates_allowed_found_prev_curr_next_prev=0\n  local -i duplicates_allowed_found_prev_curr_next_curr=0\n\
    \  local -i duplicates_allowed_found_prev_curr_next_next=0\n  local -i duplicates_allowed_found_prev_curr_next_prev_curr=0\n\
    \  local -i duplicates_allowed_found_prev_curr_next_prev_next=0\n  local -i duplicates_allowed_found_prev_curr_next_curr_next=0\n\
    \  local -i duplicates_allowed_found_prev_curr_next_prev_curr_next=0\n  local\
    \ -i duplicates_allowed_found_prev_curr_next_prev_curr_next_prev=0\n  local -i\
    \ duplicates_allowed_found_prev_curr_next_prev_curr_next_curr=0\n  local -i duplicates_allowed_found_prev_curr_next_prev_curr_next_next=0\n\
    \  local -i duplicates_allowed_found_\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i max=0\n  local -i max_index=0\n\
    \  local -i max_count=0\n  local -i max_index_count=0\n  local -i max_index_count_index=0\n\
    \  local -i max_index_count_index_count=0\n  local -i max_index_count_index_count_index=0\n\
    \  local -i max_index_count_index_count_index_count=0\n  local -i max_index_count_index_count_index_count_index=0\n\
    \  local -i max_index_count_index_count_index_count_index_count=0\n  local -i\
    \ max_index_count_index_count_index_count_index_count_index=0\n  local -i max_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local -i max_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local\
    \ -i is_duplicate=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n\
    \        next=${arr[i+1]}\n        if [[ $curr -lt $prev ]]; then\n          \
    \  is_sorted=0\n            break\n        elif [[ $curr -eq $prev ]]; then\n\
    \            if [[ $curr -eq $next ]]; then\n                is_duplicate=1\n\
    \            fi\n        fi\n        prev=$curr\n    done\n    if [[ $is_sorted\
    \ -eq 1 ]] && [[ $is_duplicate -eq 0 ]]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n    if [[ $i -eq\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    if [[ $i -lt\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=$i\n  done\n\
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i dup=0\n    local -i sorted=1\n    while [ $i\
    \ -lt $len ]; do\n        curr=${arr[$i]}\n        if [ $curr -eq $prev ]; then\n\
    \            dup=1\n        elif [ $curr -lt $prev ]; then\n            sorted=0\n\
    \        fi\n        prev=$curr\n        i=$((i+1))\n    done\n    if [ $sorted\
    \ -eq 1 ] && [ $dup -eq 0 ]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i flag=0\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      flag=1\n\
    \      break\n    elif ((curr == prev)); then\n      count=$((count+1))\n    \
    \  if ((count > 1)); then\n        flag=1\n        break\n      fi\n    fi\n \
    \   prev=$curr\n  done\n  if ((flag == 0)); then\n    echo True\n  else\n    echo\
    \ False\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local prev=${arr[0]}\n    for i in \"${arr[@]:1}\"; do\n        if\
    \ [[ $i -lt $prev ]]; then\n            echo \"False\"\n            return\n \
    \       fi\n        prev=$i\n    done\n    echo \"True\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i count=0\n    local -i flag=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                flag=1\n               \
    \ break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n        then\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"False\"\n    else\n        for ((i=0; i<len; i++))\n        do\n\
    \            for ((j=i+1; j<len; j++))\n            do\n                if [[\
    \ ${arr[i]} -eq ${arr[j]} ]]\n                then\n                    count=$((count+1))\n\
    \                fi\n            done\n            if [[ $count -gt 1 ]]\n   \
    \         then\n                flag=1\n                break\n            fi\n\
    \            count=0\n        done\n        if [[ $flag -eq 1 ]]\n        then\n\
    \            echo \"False\"\n        else\n            echo \"True\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    while [ $i -lt $len ]; do\n\
    \        curr=${arr[$i]}\n        if [ $curr -lt $prev ]; then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n        ((i++))\n    done\n\
    \    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=($1)\n\
    \  local -i len=${#array[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  while (( i < len\
    \ )); do\n    curr=${arr[i]}\n    if (( curr < prev )); then\n      sorted=0\n\
    \      break\n    elif (( curr == prev )); then\n      (( dup++ ))\n      if ((\
    \ dup > 1 )); then\n        sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n\
    \    (( i++ ))\n  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i count=0\n    local -i flag=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n            then\n                flag=1\n               \
    \ break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n        then\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"False\"\n    else\n        for ((i=0; i<len; i++))\n        do\n\
    \            for ((j=i+1; j<len; j++))\n            do\n                if [[\
    \ ${arr[i]} -eq ${arr[j]} ]]\n                then\n                    count=$count+1\n\
    \                fi\n            done\n            if [[ $count -gt 1 ]]\n   \
    \         then\n                flag=1\n                break\n            fi\n\
    \            count=0\n        done\n        if [[ $flag -eq 1 ]]\n        then\n\
    \            echo \"False\"\n        else\n            echo \"True\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i count=0\n    local -i prev=0\n    local -i curr=0\n   \
    \ local -i next=0\n    local -i prev_count=0\n    local -i curr_count=0\n    local\
    \ -i next_count=0\n    local -i prev_dup=0\n    local -i curr_dup=0\n    local\
    \ -i next_dup=0\n    local -i prev_dup_count=0\n    local -i curr_dup_count=0\n\
    \    local -i next_dup_count=0\n    local -i prev_dup_count_next=0\n    local\
    \ -i curr_dup_count_next=0\n    local -i next_dup_count_next=0\n    local -i prev_dup_count_prev=0\n\
    \    local -i curr_dup_count_prev=0\n    local -i next_dup_count_prev=0\n    local\
    \ -i prev_dup_count_prev_next=0\n    local -i curr_dup_count_prev_next=0\n   \
    \ local -i next_dup_count_prev_next=0\n    local -i prev_dup_count_prev_next_next=0\n\
    \    local -i curr_dup_count_prev_next_next=0\n    local -i next_dup_count_prev_next_next=0\n\
    \    local -i prev_dup_count_prev_next_next_next=0\n    local -i curr_dup_count_prev_next_next_next=0\n\
    \    local -i next_dup_count_prev_next_next_next=0\n    local -i prev_dup_count_prev_next_next_next_next=0\n\
    \    local -i curr_dup_count_prev_next_next_next_next=0\n    local -i next_dup_count_prev\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -u))\n   \
    \ if [[ \"${#arr[@]}\" -ne \"${#sorted[@]}\" ]]; then\n        echo \"False\"\n\
    \    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local -i i\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n  \
    \  for ((i=1; i<len; i++)); do\n        if ((prev >= arr[i])); then\n        \
    \    echo \"False\"\n            return\n        fi\n        prev=${arr[i]}\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -u))\n   \
    \ [[ \"${#arr[@]}\" -eq \"${#sorted[@]}\" ]] && [[ \"${arr[*]}\" == \"${sorted[*]}\"\
    \ ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i sorted=1\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      sorted=0\n\
    \      break\n    fi\n    if ((curr == prev)); then\n      ((count++))\n     \
    \ if ((count > 1)); then\n        sorted=0\n        break\n      fi\n    else\n\
    \      count=0\n    fi\n    prev=$curr\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  while (( i < len\
    \ )); do\n    curr=${arr[i]}\n    if (( curr < prev )); then\n      sorted=0\n\
    \      break\n    elif (( curr == prev )); then\n      dup=1\n    fi\n    prev=$curr\n\
    \    (( i++ ))\n  done\n  if (( sorted == 1 && dup == 1 )); then\n    echo \"\
    False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr\n\
    \    arr=($1)\n    local -i len=${#arr[@]}\n    local -i i\n    for ((i=0; i<len-1;\
    \ i++)); do\n        if (( arr[i] > arr[i+1] )); then\n            echo \"False\"\
    \n            return\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=true\n\
    \  local prev=$1\n  shift\n  for num in $@; do\n    if [ $prev -ge $num ]; then\n\
    \      sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n\
    \    local sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    if\
    \ [[ $list == $sorted ]]; then\n        echo True\n    else\n        echo False\n\
    \    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=($1)\n\
    \    local len=${#arr[@]}\n    local prev=${arr[0]}\n    local curr\n    for ((i=1;\
    \ i<len; i++)); do\n        curr=${arr[i]}\n        if [[ $curr -lt $prev ]];\
    \ then\n            echo \"False\"\n            return\n        fi\n        prev=$curr\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i len=${#array[@]}\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  local -i count=0\n  local -i flag=0\n  local -i temp=0\n  local -i temp1=0\n\
    \  local -i temp2=0\n  local -i temp3=0\n  local -i temp4=0\n  local -i temp5=0\n\
    \  local -i temp6=0\n  local -i temp7=0\n  local -i temp8=0\n  local -i temp9=0\n\
    \  local -i temp10=0\n  local -i temp11=0\n  local -i temp12=0\n  local -i temp13=0\n\
    \  local -i temp14=0\n  local -i temp15=0\n  local -i temp16=0\n  local -i temp17=0\n\
    \  local -i temp18=0\n  local -i temp19=0\n  local -i temp20=0\n  local -i temp21=0\n\
    \  local -i temp22=0\n  local -i temp23=0\n  local -i temp24=0\n  local -i temp25=0\n\
    \  local -i temp26=0\n  local -i temp27=0\n  local -i temp28=0\n  local -i temp29=0\n\
    \  local -i temp30=0\n  local -i temp31=0\n  local -i temp32=0\n  local -i temp33=0\n\
    \  local -i temp34=0\n  local -i temp35=0\n  local -i temp36=0\n  local -i temp37=0\n\
    \  local -i temp38=0\n  local -i temp39=0\n  local -i temp40=0\n  local -i temp41=0\n\
    \  local -i temp42=0\n  local -i temp43=0\n  local -i temp44=0\n  local -i temp45=0\n\
    \  local -i temp46=0\n  local -i temp47=0\n  local -i temp48=0\n  local -i temp49=\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a array\n\
    \    IFS=' ' read -r -a array <<< \"$1\"\n    local -i i=0\n    local -i len=${#array[@]}\n\
    \    local -i prev=${array[0]}\n    local -i curr\n    local -i dup=0\n    while\
    \ (( i < len )); do\n        curr=${array[i]}\n        if (( curr < prev )); then\n\
    \            echo \"False\"\n            return\n        elif (( curr == prev\
    \ )); then\n            (( dup++ ))\n            if (( dup > 1 )); then\n    \
    \            echo \"False\"\n                return\n            fi\n        fi\n\
    \        (( i++ ))\n        prev=$curr\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i count=0\n    local -i flag=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[i]}\
    \ -gt ${arr[j]} ]\n            then\n                flag=1\n                break\n\
    \            fi\n        done\n        if [ $flag -eq 1 ]\n        then\n    \
    \        break\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n     \
    \   echo \"False\"\n    else\n        for ((i=0; i<len; i++))\n        do\n  \
    \          for ((j=i+1; j<len; j++))\n            do\n                if [ ${arr[i]}\
    \ -eq ${arr[j]} ]\n                then\n                    count=$((count+1))\n\
    \                fi\n            done\n            if [ $count -gt 1 ]\n     \
    \       then\n                flag=1\n                break\n            fi\n\
    \            count=0\n        done\n        if [ $flag -eq 1 ]\n        then\n\
    \            echo \"False\"\n        else\n            echo \"True\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i dup=0\n  local -i sorted=1\n  while (( i < len )); do\n\
    \    curr=${arr[i]}\n    if (( curr <= prev )); then\n      if (( curr == prev\
    \ )); then\n        (( dup++ ))\n      else\n        (( sorted = 0 ))\n      fi\n\
    \    fi\n    (( prev = curr ))\n    (( i++ ))\n  done\n  (( dup > 0 )) && (( sorted\
    \ = 0 ))\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [ \"${#arr[@]}\"\
    \ -ne \"${#uniq[@]}\" ]; then\n    echo \"False\"\n  else\n    for ((i=0; i<\"\
    ${#arr[@]}\"; i++)); do\n      if [ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]; then\n\
    \        echo \"False\"\n        return\n      fi\n    done\n    echo \"True\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i is_sorted=1\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      is_sorted=0\n\
    \      break\n    elif ((curr == prev)); then\n      count=$((count + 1))\n  \
    \    if ((count > 1)); then\n        is_sorted=0\n        break\n      fi\n  \
    \  fi\n    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=0\n  \
    \  local -i curr=0\n    local -i next=0\n    local -i is_sorted=1\n    local -i\
    \ is_duplicate=0\n    local -i is_ascending=1\n    local -i is_descending=1\n\n\
    \    if [ $len -eq 1 ]; then\n        echo \"True\"\n        return 0\n    fi\n\
    \n    for ((i=0; i<len; i++)); do\n        prev=${arr[$i-1]}\n        curr=${arr[$i]}\n\
    \        next=${arr[$i+1]}\n\n        if [ $curr -eq $prev ]; then\n         \
    \   is_duplicate=1\n        fi\n\n        if [ $curr -lt $prev ]; then\n     \
    \       is_ascending=0\n        fi\n\n        if [ $curr -gt $prev ]; then\n \
    \           is_descending=0\n        fi\n\n        if [ $is_duplicate -eq 1 ]\
    \ || [ $is_ascending -eq 0 ] && [ $is_descending -eq 0 ]; then\n            is_sorted=0\n\
    \            break\n        fi\n    done\n\n    if [ $is_sorted -eq 1 ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n    if [[ $i -le\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=$i\n  done\n\
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=$(echo\
    \ $1 | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ $1 == $sorted ]]; then\n\
    \    echo True\n  else\n    echo False\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n   \
    \ local -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n    if [[ \"${#arr[@]}\"\
    \ -eq \"${#uniq[@]}\" ]]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
    \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n \
    \ local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n\
    \  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local\
    \ -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n \
    \ local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=0; j<len; j++)); do\n      for ((k=0;\
    \ k<len; k++)); do\n        for ((l=0; l<len; l++)); do\n          for ((m=0;\
    \ m<len; m++)); do\n            for ((n=0; n<len; n++)); do\n              for\
    \ ((o=0; o<len; o++)); do\n                for ((p=0; p<len; p++)); do\n     \
    \             for ((q=0; q<len; q++)); do\n                    for ((r=0; r<len;\
    \ r++)); do\n                      for ((s=0; s<len; s++)); do\n             \
    \           for ((t=0; t<len; t++)); do\n                          for ((u=0;\
    \ u<len; u++)); do\n                            for ((v=0; v<len; v++)); do\n\
    \                              for ((w=0; w<len; w++)); do\n                 \
    \               for ((x=0; x<len; x++)); do\n                                \
    \  for ((y=0; y<len; y++)); do\n                                    for ((z=0;\
    \ z<len; z++)); do\n                                      if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]] &&\n                                         [[ ${arr[j]} -gt ${arr[k]}\
    \ ]] &&\n                                         [[ ${arr[k]} -gt ${\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplmaib2i7.sh: line 57: syntax error in conditional expression

    /tmp/tmplmaib2i7.sh: line 60: syntax error near `candidate(''

    /tmp/tmplmaib2i7.sh: line 60: `candidate() {''

    '
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  for ((i=1; i<len; i++));\
    \ do\n    curr=${arr[i]}\n    next=${arr[i+1]}\n    if [[ $curr -lt $prev ]];\
    \ then\n      is_sorted=0\n      break\n    elif [[ $curr -eq $prev ]]; then\n\
    \      if [[ $curr -eq $next ]]; then\n        is_sorted=0\n        break\n  \
    \    fi\n    fi\n    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    while [ $i -lt $len ]; do\n\
    \        curr=${arr[$i]}\n        if [ $curr -lt $prev ]; then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n        i=$i+1\n    done\n\
    \    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i prev=${array[0]}\n\
    \  local -i curr=0\n  local -i next=0\n  local -i is_sorted=1\n  local -i is_duplicate=0\n\
    \  while [ $i -lt $len ]; do\n    curr=${array[$i]}\n    if [ $i -lt $((len -\
    \ 1)) ]; then\n      next=${array[$((i + 1))]}\n    fi\n    if [ $curr -lt $prev\
    \ ]; then\n      is_sorted=0\n      break\n    elif [ $curr -eq $prev ]; then\n\
    \      is_duplicate=1\n    fi\n    prev=$curr\n    i=$((i + 1))\n  done\n  if\
    \ [ $is_duplicate -eq 1 ]; then\n    is_sorted=0\n  fi\n  echo $is_sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -u))\n  if [[ \"${#arr[@]}\"\
    \ -ne \"${#sorted[@]}\" ]]; then\n    echo \"False\"\n  else\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n      if [[ \"${arr[$i]}\" -ne \"${sorted[$i]}\" ]]; then\n     \
    \   echo \"False\"\n        return\n      fi\n    done\n    echo \"True\"\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i prev=${arr[0]}\n  local\
    \ -i curr=0\n  local -i is_sorted=1\n  for ((i=1; i<len; i++)); do\n    curr=${arr[i]}\n\
    \    if ((curr < prev)); then\n      is_sorted=0\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  for ((i=1; i<len; i++)); do\n    if [[ ${arr[i]} -lt $prev ]]; then\n     \
    \ echo \"False\"\n      return\n    fi\n    prev=${arr[i]}\n  done\n  echo \"\
    True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=()\n\
    \  local -i i=0\n  local -i len=0\n  local -i prev=0\n  local -i curr=0\n  local\
    \ -i is_sorted=1\n  arr=($1)\n  len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n\
    \    curr=${arr[$i]}\n    if ((curr < prev)); then\n      is_sorted=0\n      break\n\
    \    fi\n    prev=$curr\n  done\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#array[@]}\n  local -i last_num=${array[0]}\n\
    \  local -i curr_num=0\n  local -i is_sorted=1\n  for ((i=1; i<len; i++)); do\n\
    \    curr_num=${array[i]}\n    if ((curr_num < last_num)); then\n      is_sorted=0\n\
    \      break\n    fi\n    last_num=$curr_num\n  done\n  echo $is_sorted\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    for ((i=1; i<len; i++)); do\n\
    \        curr=${arr[i]}\n        if [[ $curr -eq $prev ]]; then\n            is_sorted=0\n\
    \            break\n        elif [[ $curr -lt $prev ]]; then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n    done\n    echo $is_sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=0\n  local -i\
    \ curr=0\n  local -i next=0\n  local -i dup=0\n  local -i sorted=1\n  for ((i=0;\
    \ i<len; i++)); do\n    curr=${arr[$i]}\n    next=${arr[$((i+1))]}\n    if [[\
    \ $i -gt 0 ]]; then\n      prev=${arr[$((i-1))]}\n    fi\n    if [[ $curr -eq\
    \ $prev ]]; then\n      dup=1\n    fi\n    if [[ $curr -gt $next ]]; then\n  \
    \    sorted=0\n    fi\n  done\n  if [[ $sorted -eq 1 && $dup -eq 0 ]]; then\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i is_sorted=1\n    while (( i < len )); do\n\
    \        curr=${arr[i]}\n        if (( curr < prev )); then\n            is_sorted=0\n\
    \            break\n        fi\n        prev=$curr\n        (( i++ ))\n    done\n\
    \    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i count=0\n  local -i max=0\n  local -i max_count=0\n\
    \  local -i max_index=0\n  local -i max_count_index=0\n  local -i max_count_prev=0\n\
    \  local -i max_count_curr=0\n  local -i max_prev=0\n  local -i max_curr=0\n \
    \ local -i max_count_prev_index=0\n  local -i max_count_curr_index=0\n  local\
    \ -i max_prev_index=0\n  local -i max_curr_index=0\n  local -i max_count_prev_count=0\n\
    \  local -i max_count_curr_count=0\n  local -i max_prev_count=0\n  local -i max_curr_count=0\n\
    \  local -i max_count_prev_count_index=0\n  local -i max_count_curr_count_index=0\n\
    \  local -i max_prev_count_index=0\n  local -i max_curr_count_index=0\n  local\
    \ -i max_count_prev_count_prev=0\n  local -i max_count_curr_count_curr=0\n  local\
    \ -i max_prev_count_prev=0\n  local -i max_curr_count_curr=0\n  local -i max_count_prev_count_prev_index=0\n\
    \  local -i max_count_curr_count_curr_index=0\n  local -i max_prev_count_prev_index=0\n\
    \  local -i max_curr_count_curr_index=0\n  local -i max_count_prev_count_prev_count=0\n\
    \  local -i max_count_curr_count_curr_count=0\n  local -i max_prev_count_prev_count=0\n\
    \  local -i\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"\
    $@\")\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i prev=${arr[0]}\n\
    \  local -i curr=0\n  local -i dup=0\n  local -i ret=0\n\n  for ((i=1; i<len;\
    \ i++)); do\n    curr=${arr[i]}\n    if ((curr < prev)); then\n      ret=1\n \
    \     break\n    elif ((curr == prev)); then\n      dup=1\n    fi\n    prev=$curr\n\
    \  done\n\n  if ((dup == 1)); then\n    ret=1\n  fi\n\n  echo $ret\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local -a array=(\"\
    $@\")\n  local -a sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n  local\
    \ -a uniq=($(printf \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [ \"${#array[@]}\"\
    \ -ne \"${#uniq[@]}\" ]; then\n    echo \"False\"\n  elif [ \"${array[*]}\" =\
    \ \"${sorted[*]}\" ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted_list=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n\
    \  if [[ \"$list\" == \"$sorted_list\" ]]; then\n    echo \"True\"\n  else\n \
    \   echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992530
