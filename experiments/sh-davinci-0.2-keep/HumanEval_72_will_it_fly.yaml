name: HumanEval_72_will_it_fly
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Write a function that returns True if the object q will fly,\
  \ and False otherwise.\n# The object q will fly if it's balanced (it is a palindromic\
  \ list) and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n# Example:\n# will_it_fly([1, 2], 5) \u279E False \n# # 1+2 is less than the\
  \ maximum possible weight, but it's unbalanced.\n# will_it_fly([3, 2, 3], 1) \u279E\
  \ False\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
  # will_it_fly([3, 2, 3], 9) \u279E True\n# # 3+2+3 is less than the maximum possible\
  \ weight, and it's balanced.\n# will_it_fly([3], 5) \u279E True\n# # 3 is less than\
  \ the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated\
  \ list\n# $2 is an integer\nwill_it_fly() {\n"
tests: "}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"\
  5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
  \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
completions: ["    local list=\"$1\"\n    local max_weight=\"$2\"\n    local sum=0\n\
    \    local is_balanced=1\n    local list_len=0\n    local i=0\n    local j=0\n\
    \    local list_arr=()\n    local list_arr_len=0\n    local list_arr_half_len=0\n\
    \    local list_arr_half_len_minus_one=0\n    local list_arr_half_len_plus_one=0\n\
    \    local list_arr_half_len_plus_two=0\n    local list_arr_half_len_plus_three=0\n\
    \    local list_arr_half_len_plus_four=0\n    local list_arr_half_len_plus_five=0\n\
    \    local list_arr_half_len_plus_six=0\n    local list_arr_half_len_plus_seven=0\n\
    \    local list_arr_half_len_plus_eight=0\n    local list_arr_half_len_plus_nine=0\n\
    \    local list_arr_half_len_plus_ten=0\n    local list_arr_half_len_plus_eleven=0\n\
    \    local list_arr_half_len_plus_twelve=0\n    local list_arr_half_len_plus_thirteen=0\n\
    \    local list_arr_half_len_plus_fourteen=0\n    local list_arr_half_len_plus_fifteen=0\n\
    \    local list_arr_half_len_plus_sixteen=0\n    local list_arr_half_len_plus_seventeen=0\n\
    \    local list_arr_half_len_plus_eighteen=0\n    local list_arr_half_len_plus_nineteen=0\n\
    \    local list_arr_half_len_plus_twenty=0\n    local list_arr_half_len_plus_twenty_one=0\n\
    \    local list_arr_half_len_plus_twenty_two=0\n    local list_arr_half_len_plus_twenty_three=0\n\
    \    local list_arr_half_len_plus_twenty_four=0\n    local list_arr_", "  local\
    \ list=$1\n  local weight=$2\n  local sum=0\n  local i=0\n  local j=$((${#list}-1))\n\
    \  local balanced=1\n  for ((i=0; i<${#list}; i++)); do\n    if [[ ${list:$i:1}\
    \ != ${list:$j:1} ]]; then\n      balanced=0\n      break\n    fi\n    ((j--))\n\
    \  done\n  for i in $list; do\n    ((sum+=i))\n  done\n  if [[ $sum -le $weight\
    \ && $balanced -eq 1 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n\
    \  fi", "    local list=$1\n    local weight=$2\n    local sum=0\n    local balanced=1\n\
    \    local i=0\n    local j=0\n    local len=0\n    local middle=0\n    local\
    \ middle_index=0\n    local middle_element=0\n    local middle_element_2=0\n \
    \   local middle_element_2_index=0\n    local middle_element_2_index_2=0\n   \
    \ local middle_element_2_index_2_2=0\n    local middle_element_2_index_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2_2_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2_2_2_2=0\n\
    \    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2_2_2_2_2=0\n    local middle_element_2_index_2_2_2_2_2_2_2_2_2_2_2_2_2_2_2=0\n\
    \    local middle_element", "  local -n arr=$1\n  local w=$2\n  local sum=0\n\
    \  local i=0\n  local j=0\n  local len=${#arr[@]}\n  local mid=$((len/2))\n  local\
    \ is_palindrome=1\n  for i in ${arr[@]}; do\n    sum=$((sum+i))\n  done\n  if\
    \ [[ $sum -gt $w ]]; then\n    echo \"False\"\n    return\n  fi\n  for ((i=0;\
    \ i<mid; i++)); do\n    if [[ ${arr[i]} -ne ${arr[len-i-1]} ]]; then\n      is_palindrome=0\n\
    \      break\n    fi\n  done\n  if [[ $is_palindrome -eq 1 ]]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi", "  local -a list=($1)\n  local\
    \ -i weight=$2\n  local -i sum=0\n  local -i i=0\n  local -i j=$((${#list[@]}-1))\n\
    \  while ((i<j)); do\n    if [[ ${list[i]} -ne ${list[j]} ]]; then\n      return\
    \ 1\n    fi\n    ((i++))\n    ((j--))\n  done\n  for i in ${list[@]}; do\n   \
    \ ((sum+=i))\n  done\n  ((sum<=weight))", "  local list=$1\n  local max_weight=$2\n\
    \  local sum=0\n  local list_len=0\n  local i=0\n  local j=0\n  local mid=0\n\
    \  local is_palindrome=1\n  local is_balanced=1\n  local is_heavy=1\n  local list_arr\n\
    \  local list_arr_len\n\n  list_arr=($list)\n  list_arr_len=${#list_arr[@]}\n\
    \  list_len=$(($list_arr_len / 2))\n\n  for ((i=0; i<list_len; i++)); do\n   \
    \ j=$(($list_arr_len - $i - 1))\n    if [[ ${list_arr[$i]} -ne ${list_arr[$j]}\
    \ ]]; then\n      is_palindrome=0\n      break\n    fi\n  done\n\n  if [[ $is_palindrome\
    \ -eq 1 ]]; then\n    for i in ${list_arr[@]}; do\n      sum=$(($sum + $i))\n\
    \    done\n    if [[ $sum -le $max_weight ]]; then\n      is_heavy=0\n    fi\n\
    \  else\n    is_balanced=0\n  fi\n\n  if [[ $is_balanced -eq 1 && $is_heavy -eq\
    \ 0 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi", "  local q=$1\n\
    \  local w=$2\n  local sum=0\n  local i=0\n  local j=0\n  local len=0\n  local\
    \ balanced=0\n  local flying=0\n  local q_array=()\n  local q_array_rev=()\n \
    \ local q_array_len=0\n  local q_array_rev_len=0\n  local q_array_len_half=0\n\
    \  local q_array_rev_len_half=0\n  local q_array_len_half_plus_one=0\n  local\
    \ q_array_rev_len_half_plus_one=0\n  local q_array_len_half_minus_one=0\n  local\
    \ q_array_rev_len_half_minus_one=0\n  local q_array_len_half_plus_one_value=0\n\
    \  local q_array_rev_len_half_plus_one_value=0\n  local q_array_len_half_minus_one_value=0\n\
    \  local q_array_rev_len_half_minus_one_value=0\n  local q_array_len_half_plus_one_value_plus_one=0\n\
    \  local q_array_rev_len_half_plus_one_value_plus_one=0\n  local q_array_len_half_minus_one_value_plus_one=0\n\
    \  local q_array_rev_len_half_minus_one_value_plus_one=0\n  local q_array_len_half_plus_one_value_minus_one=0\n\
    \  local q_array_rev_len_half_plus_one_value_minus_one=0\n  local q_array_len_half_minus_one_value_minus_one=0\n\
    \  local q_array_rev_len_half_minus_one_value_minus_one=0\n  local q_array_len_half_plus_one_value_plus_one_plus_one=0\n\
    \  local q_array_rev_len_half_plus_one_value_plus_one_plus_one=0\n  local q_array_len_half_minus_one_value",
  "    local list=$1\n    local max_weight=$2\n    local sum=0\n    local balanced=false\n\
    \    local i=0\n    local j=0\n    local len=0\n    local mid=0\n    local left=0\n\
    \    local right=0\n    local left_sum=0\n    local right_sum=0\n    local left_str=''\n\
    \    local right_str=''\n    local left_str_rev=''\n    local right_str_rev=''\n\
    \    local left_str_len=0\n    local right_str_len=0\n    local left_str_rev_len=0\n\
    \    local right_str_rev_len=0\n    local left_str_rev_mid=0\n    local right_str_rev_mid=0\n\
    \    local left_str_rev_left=0\n    local right_str_rev_left=0\n    local left_str_rev_right=0\n\
    \    local right_str_rev_right=0\n    local left_str_rev_left_sum=0\n    local\
    \ right_str_rev_left_sum=0\n    local left_str_rev_right_sum=0\n    local right_str_rev_right_sum=0\n\
    \    local left_str_rev_left_str=''\n    local right_str_rev_left_str=''\n   \
    \ local left_str_rev_right_str=''\n    local right_str_rev_right_str=''\n    local\
    \ left_str_rev_left_str_rev=''\n    local right_str_rev_left_str_rev=''\n    local\
    \ left_str_rev_right_str_rev=''\n    local right_str_rev_right_str_rev=''\n  \
    \  local left_str_rev_left_str_len=0\n    local right_str_rev_left_str_len=0\n\
    \    local left_str_rev_right_str_len=0\n    local right_str_rev_right_str_len=0\n\
    \    local left_str_rev_left_str_rev_len=0\n    local right_str_rev_left_str_rev_len=0\n\
    \    local left_str", "  local list=$1\n  local max_weight=$2\n  local sum=0\n\
    \  local i=0\n  local j=$((${#list}-1))\n  while [ $i -lt $j ]; do\n    if [ ${list:$i:1}\
    \ -ne ${list:$j:1} ]; then\n      return 1\n    fi\n    i=$((i+1))\n    j=$((j-1))\n\
    \  done\n  for i in $list; do\n    sum=$((sum+i))\n  done\n  [ $sum -le $max_weight\
    \ ]", "  local -a arr=(\"$@\")\n  local -i sum=0\n  local -i max_weight=$2\n \
    \ local -i len=${#arr[@]}\n  local -i i=0\n  local -i j=$((len-1))\n  local -i\
    \ mid=$((len/2))\n  local -i is_palindrome=1\n  for ((i=0; i<mid; i++)); do\n\
    \    if [[ ${arr[i]} -ne ${arr[j]} ]]; then\n      is_palindrome=0\n      break\n\
    \    fi\n    j=$((j-1))\n  done\n  for ((i=0; i<len; i++)); do\n    sum=$((sum+arr[i]))\n\
    \  done\n  if [[ $sum -le $max_weight && $is_palindrome -eq 1 ]]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi", "    local list=$1\n    local max_weight=$2\n\
    \    local sum=0\n    local list_len=0\n    local is_balanced=1\n    local i=0\n\
    \    local j=0\n    local mid=0\n    local len=0\n    local left=0\n    local\
    \ right=0\n    local left_sum=0\n    local right_sum=0\n    local left_val=0\n\
    \    local right_val=0\n    local is_fly=0\n    for i in $list; do\n        let\
    \ sum+=$i\n        let list_len+=1\n    done\n    if [ $((list_len%2)) -eq 0 ];\
    \ then\n        mid=$((list_len/2))\n        left=$((mid-1))\n        right=$mid\n\
    \        for ((i=0; i<mid; i++)); do\n            left_val=$(echo $list | cut\
    \ -d ' ' -f $((i+1)))\n            right_val=$(echo $list | cut -d ' ' -f $((list_len-i)))\n\
    \            let left_sum+=$left_val\n            let right_sum+=$right_val\n\
    \            if [ $left_val -ne $right_val ]; then\n                is_balanced=0\n\
    \                break\n            fi\n        done\n    else\n        mid=$((list_len/2))\n\
    \        left=$mid\n        right=$((mid+1))\n        for ((i=0; i<mid; i++));\
    \ do\n            left_val=$(echo $list | cut -d ' ' -f $((i+1)))\n          \
    \  right_val=$(echo $list | cut -d ' ' -f $((list_len-i)))\n            let left_sum+=$left_val\n\
    \            let right_sum+=$right_val\n            if [ $left_val -ne $right_val\
    \ ]; then\n                is_balanced=0\n                break\n            fi\n\
    \        done\n    fi\n    if [ $is_balanced -eq 1 ] && [ $sum -le $max_weight\
    \ ]; then\n        is_fly=1\n    fi\n    echo $is_fly", "  local list=$1\n  local\
    \ weight=$2\n  local sum=0\n  local balanced=false\n  local i=0\n  local j=0\n\
    \  local len=0\n  local tmp=0\n  local tmp2=0\n  local tmp3=0\n  local tmp4=0\n\
    \  local tmp5=0\n  local tmp6=0\n  local tmp7=0\n  local tmp8=0\n  local tmp9=0\n\
    \  local tmp10=0\n  local tmp11=0\n  local tmp12=0\n  local tmp13=0\n  local tmp14=0\n\
    \  local tmp15=0\n  local tmp16=0\n  local tmp17=0\n  local tmp18=0\n  local tmp19=0\n\
    \  local tmp20=0\n  local tmp21=0\n  local tmp22=0\n  local tmp23=0\n  local tmp24=0\n\
    \  local tmp25=0\n  local tmp26=0\n  local tmp27=0\n  local tmp28=0\n  local tmp29=0\n\
    \  local tmp30=0\n  local tmp31=0\n  local tmp32=0\n  local tmp33=0\n  local tmp34=0\n\
    \  local tmp35=0\n  local tmp36=0\n  local tmp37=0\n  local tmp38=0\n  local tmp39=0\n\
    \  local tmp40=0\n  local tmp41=0\n  local tmp42=0\n  local tmp43=0\n  local tmp44=0\n\
    \  local tmp45=0\n  local tmp46=0\n  local tmp47=0\n  local tmp48=0\n  local tmp49=0\n\
    \  local tmp50=0\n  local tmp51=0\n  local tmp52=0\n  local tmp53=0\n  local tmp54=0\n\
    \  local tmp55=0\n  local tmp56=0\n  local tmp57=0\n  local tmp58=0\n  local tmp59=0\n\
    \  local tmp60=0\n  local tmp61=0\n  local tmp62=0\n  local tmp63=0\n  local tmp64=0\n\
    \  local tmp65=0\n  local tmp66=0\n  local tmp67=0\n ", "  local -a q=($1)\n \
    \ local w=$2\n  local sum=0\n  local i=0\n  local j=$(( ${#q[@]} - 1 ))\n  local\
    \ balanced=1\n  for (( i=0; i<${#q[@]}; i++ )); do\n    sum=$(( sum + q[i] ))\n\
    \    if (( q[i] != q[j] )); then\n      balanced=0\n    fi\n    j=$(( j - 1 ))\n\
    \  done\n  if (( sum <= w && balanced == 1 )); then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi", "  local list=$1\n  local max_weight=$2\n  local sum=0\n\
    \  local list_len=0\n  local i=0\n  local j=0\n  local is_palindrome=0\n  local\
    \ is_balanced=0\n  local is_under_weight=0\n  local is_flying=0\n  for i in $list;\
    \ do\n    ((sum+=i))\n    ((list_len++))\n  done\n  ((j=list_len-1))\n  for i\
    \ in $list; do\n    if [[ $i -eq ${list[$j]} ]]; then\n      ((is_palindrome++))\n\
    \    fi\n    ((j--))\n  done\n  if [[ $is_palindrome -eq $list_len ]]; then\n\
    \    ((is_balanced++))\n  fi\n  if [[ $sum -le $max_weight ]]; then\n    ((is_under_weight++))\n\
    \  fi\n  if [[ $is_balanced -eq 1 && $is_under_weight -eq 1 ]]; then\n    ((is_flying++))\n\
    \  fi\n  if [[ $is_flying -eq 1 ]]; then\n    echo True\n  else\n    echo False\n\
    \  fi", "  local q=$1\n  local w=$2\n  local sum=0\n  local i=0\n  local j=0\n\
    \  local len=0\n  local balanced=1\n  local arr=()\n  local tmp=0\n  arr=($q)\n\
    \  len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    sum=$((sum+arr[i]))\n  done\n\
    \  if ((sum>w)); then\n    return 1\n  fi\n  for ((i=0, j=len-1; i<len/2; i++,\
    \ j--)); do\n    if ((arr[i]!=arr[j])); then\n      balanced=0\n      break\n\
    \    fi\n  done\n  return $balanced", "  local -a arr=($1)\n  local -i sum=0\n\
    \  local -i max_weight=$2\n  local -i len=${#arr[@]}\n  local -i i=0\n  local\
    \ -i j=$((len-1))\n  local -i mid=$((len/2))\n  local -i is_palindrome=1\n  local\
    \ -i is_balanced=1\n  while [ $i -lt $mid ]; do\n    if [ ${arr[$i]} -ne ${arr[$j]}\
    \ ]; then\n      is_palindrome=0\n      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n\
    \  done\n  for i in ${arr[@]}; do\n    sum=$((sum+i))\n  done\n  if [ $sum -gt\
    \ $max_weight ]; then\n    is_balanced=0\n  fi\n  if [ $is_balanced -eq 1 ] &&\
    \ [ $is_palindrome -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi", "  local list=$1\n  local max_weight=$2\n  local total=0\n  local balanced=true\n\
    \  local list_len=$(echo $list | wc -w)\n  local half_len=$((list_len / 2))\n\
    \  local i=1\n  local j=$((list_len - 1))\n  local left\n  local right\n  for\
    \ n in $list; do\n    total=$((total + n))\n    if [ $i -le $half_len ]; then\n\
    \      left=$n\n    else\n      right=$n\n    fi\n    if [ $i -gt $half_len ];\
    \ then\n      if [ $left -ne $right ]; then\n        balanced=false\n      fi\n\
    \      j=$((j - 1))\n      left=$(echo $list | cut -d ' ' -f $j)\n    fi\n   \
    \ i=$((i + 1))\n  done\n  if [ $total -le $max_weight ] && $balanced; then\n \
    \   echo True\n  else\n    echo False\n  fi", "  local list=$1\n  local weight=$2\n\
    \  local sum=0\n  local i=0\n  local j=0\n  local len=0\n  local balanced=1\n\
    \  local list_array=()\n  local list_array_len=0\n  local list_array_half_len=0\n\
    \  local list_array_half_len_minus_one=0\n  local list_array_half_len_plus_one=0\n\
    \  local list_array_half_len_plus_two=0\n  local list_array_half_len_plus_three=0\n\
    \  local list_array_half_len_plus_four=0\n  local list_array_half_len_plus_five=0\n\
    \  local list_array_half_len_plus_six=0\n  local list_array_half_len_plus_seven=0\n\
    \  local list_array_half_len_plus_eight=0\n  local list_array_half_len_plus_nine=0\n\
    \  local list_array_half_len_plus_ten=0\n  local list_array_half_len_plus_eleven=0\n\
    \  local list_array_half_len_plus_twelve=0\n  local list_array_half_len_plus_thirteen=0\n\
    \  local list_array_half_len_plus_fourteen=0\n  local list_array_half_len_plus_fifteen=0\n\
    \  local list_array_half_len_plus_sixteen=0\n  local list_array_half_len_plus_seventeen=0\n\
    \  local list_array_half_len_plus_eighteen=0\n  local list_array_half_len_plus_nineteen=0\n\
    \  local list_array_half_len_plus_twenty=0\n  local list_array_half_len_plus_twenty_one=0\n\
    \  local list_array_half_len_plus_twenty_two=0\n  local list_array_half_len_plus_twenty_three=0\n\
    \  local list_array_half_len_plus_twenty_four=0\n  local list_array_half_len_plus_twenty_five",
  "  local list=$1\n  local max_weight=$2\n  local sum=0\n  local list_len=0\n  local\
    \ i=0\n  local j=0\n  local mid=0\n  local left=0\n  local right=0\n  local balanced=0\n\
    \  local balanced_str=\"\"\n  local balanced_str_len=0\n  local balanced_str_mid=0\n\
    \  local balanced_str_left=0\n  local balanced_str_right=0\n  local balanced_str_left_len=0\n\
    \  local balanced_str_right_len=0\n  local balanced_str_left_mid=0\n  local balanced_str_right_mid=0\n\
    \  local balanced_str_left_left=0\n  local balanced_str_left_right=0\n  local\
    \ balanced_str_right_left=0\n  local balanced_str_right_right=0\n  local balanced_str_left_left_len=0\n\
    \  local balanced_str_left_right_len=0\n  local balanced_str_right_left_len=0\n\
    \  local balanced_str_right_right_len=0\n  local balanced_str_left_left_mid=0\n\
    \  local balanced_str_left_right_mid=0\n  local balanced_str_right_left_mid=0\n\
    \  local balanced_str_right_right_mid=0\n  local balanced_str_left_left_left=0\n\
    \  local balanced_str_left_left_right=0\n  local balanced_str_left_right_left=0\n\
    \  local balanced_str_left_right_right=0\n  local balanced_str_right_left_left=0\n\
    \  local balanced_str_right_left_right=0\n  local balanced_str_right_right_left=0\n\
    \  local balanced_str_right_right_right=0\n  local balanced_str_left_left_left_len=0\n\
    \  local balanced_str_left_left_right_len=0\n  local balanced_str_left_right_left_len=0\n\
    \  local balanced_str_left_right_right_len=0\n  local balanced_str_right_left_left_len=0\n",
  "  local list=$1\n  local max_weight=$2\n  local sum=0\n  local list_len=0\n  local\
    \ list_len_half=0\n  local list_len_half_minus_one=0\n  local list_len_half_plus_one=0\n\
    \  local list_len_minus_one=0\n  local list_len_minus_two=0\n  local list_len_minus_three=0\n\
    \  local list_len_minus_four=0\n  local list_len_minus_five=0\n  local list_len_minus_six=0\n\
    \  local list_len_minus_seven=0\n  local list_len_minus_eight=0\n  local list_len_minus_nine=0\n\
    \  local list_len_minus_ten=0\n  local list_len_minus_eleven=0\n  local list_len_minus_twelve=0\n\
    \  local list_len_minus_thirteen=0\n  local list_len_minus_fourteen=0\n  local\
    \ list_len_minus_fifteen=0\n  local list_len_minus_sixteen=0\n  local list_len_minus_seventeen=0\n\
    \  local list_len_minus_eighteen=0\n  local list_len_minus_nineteen=0\n  local\
    \ list_len_minus_twenty=0\n  local list_len_minus_twenty_one=0\n  local list_len_minus_twenty_two=0\n\
    \  local list_len_minus_twenty_three=0\n  local list_len_minus_twenty_four=0\n\
    \  local list_len_minus_twenty_five=0\n  local list_len_minus_twenty_six=0\n \
    \ local list_len_minus_twenty_seven=0\n  local list_len_minus_twenty_eight=0\n\
    \  local list_len_minus_twenty_nine=0\n  local list_len_minus_thirty=0\n  local\
    \ list_len_minus_thirty_one=0\n  local list_len_minus_thirty_two=0\n  local list_len_minus_thirty_three=0\n\
    \ "]
stop_tokens:
- "\n}"
