name: HumanEval_161_solve
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"\
  ab\") = \"AB\"\n# solve(\"#a@C\") = \"#A@c\"\n#\n# $1 is a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    local str=$1\n    local rev=\"\"\n    local len=${#str}\n    local\
    \ i=0\n    local ch=\"\"\n    local ch_code=0\n    local ch_code_rev=0\n    local\
    \ ch_rev=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_special=0\n    local is_reversed=0\n    local\
    \ is_reversed_str=\"\"\n    local is_reversed_str_rev=\"\"\n    local is_reversed_str_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev=\"\"\n    local is_reversed_str_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev=\"\"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev=\"\"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\"\n    local\
    \ is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=\"\
    \"\n    local is_reversed_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_", "   \
    \ local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr a-z A-Z)\n            else\n                res+=$(echo $c | tr A-Z\
    \ a-z)\n            fi\n        else\n            res+=$c\n        fi\n      \
    \  i=$((i+1))\n    done\n    echo $res", "    # write your code here\n    echo\
    \ $1 | tr -d '\\n' | tr -d '\\r' | tr -d '\\t' | tr -d ' ' | tr -d '\\0' | tr\
    \ '[:upper:]' '[:lower:]' | rev", "  echo $1 | tr '[:upper:]' '[:lower:]' | rev",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    local\
    \ str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n    local\
    \ ch=\"\"\n    local ch_ascii=\"\"\n    local ch_ascii_new=\"\"\n    local ch_new=\"\
    \"\n    for ((i=0; i<len; i++)); do\n        ch=${str:$i:1}\n        ch_ascii=$(printf\
    \ \"%d\" \"'$ch\")\n        if [[ $ch_ascii -ge 65 && $ch_ascii -le 90 ]]; then\n\
    \            ch_ascii_new=$((ch_ascii+32))\n        elif [[ $ch_ascii -ge 97 &&\
    \ $ch_ascii -le 122 ]]; then\n            ch_ascii_new=$((ch_ascii-32))\n    \
    \    else\n            ch_ascii_new=$ch_ascii\n        fi\n        ch_new=$(printf\
    \ \\\\$(printf '%03o' $ch_ascii_new))\n        res=$res$ch_new\n    done\n   \
    \ echo $res", "    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    local str=$1\n\
    \    local res=\"\"\n    local i=0\n    local len=${#str}\n    local c=\"\"\n\
    \    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_all_special=1\n    local is_all_digit=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_letter=1\n\
    \    local is_all_special_or_digit=1\n    local is_all_special_or_letter=1\n \
    \   local is_all_digit_or_letter=1\n    local is_all_special_or_digit_or_letter=1\n\
    \    local is_all_special_or_digit_or_upper=1\n    local is_all_special_or_digit_or_lower=1\n\
    \    local is_all_special_or_upper=1\n    local is_all_special_or_lower=1\n  \
    \  local is_all_digit_or_upper=1\n    local is_all_digit_or_lower=1\n    local\
    \ is_all_upper_or_lower=1\n    local is_all_upper_or_lower_or_special=1\n    local\
    \ is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_special_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit_or_letter=1\n    local is_all_upper_or_lower_or_special_or_letter=1\n\
    \    local is_all_upper_or_lower_or_digit_or_letter=1\n    local is_all_upper_or_lower_or_special_or_digit_or_letter=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit_or_letter=1\n    local is_all_upper_or_lower_or_special_or_digit_or_letter=1\n\
    \    local is_all_upper_or_lower_or_special_or_", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=$1\n    local result=\"\
    \"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n  \
    \      if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                result+=\"${char^^}\"\n            else\n            \
    \    result+=\"${char,,}\"\n            fi\n        else\n            result+=\"\
    $char\"\n        fi\n    done\n    echo $result", "    local str=$1\n    local\
    \ len=${#str}\n    local res=''\n    local i=0\n    local ch=''\n    local code=0\n\
    \    local new_code=0\n    local new_ch=''\n    local is_letter=0\n    local is_upper=0\n\
    \    local is_lower=0\n    local is_number=0\n    local is_special=0\n    local\
    \ is_empty=0\n    local is_all_letter=1\n    local is_all_number=1\n    local\
    \ is_all_special=1\n    local is_all_upper=1\n    local is_all_lower=1\n    local\
    \ is_all_same=1\n    local is_all_same_letter=1\n    local is_all_same_number=1\n\
    \    local is_all_same_special=1\n    local is_all_same_upper=1\n    local is_all_same_lower=1\n\
    \    local is_all_same_case=1\n    local is_all_same_type=1\n    local is_all_same_letter_case=1\n\
    \    local is_all_same_number_case=1\n    local is_all_same_special_case=1\n \
    \   local is_all_same_letter_type=1\n    local is_all_same_number_type=1\n   \
    \ local is_all_same_special_type=1\n    local is_all_same_letter_case_type=1\n\
    \    local is_all_same_number_case_type=1\n    local is_all_same_special_case_type=1\n\
    \    local is_all_same_case_type=1\n    local is_all_same_letter_case_type=1\n\
    \    local is_all_same_number_case_type=1\n    local is_all_same_special_case_type=1\n\
    \    local is_all_same_case_type=1\n    local is_all_same_letter_case_type=1\n\
    \    local is_all_same_number_case_type=1\n    local is_all_same_special_case_type=1\n\
    \    local is_all_same_", "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local\
    \ is_letter=0\n  local char\n  local char_code\n  local char_code_new\n  local\
    \ char_new\n  local is_letter_found=0\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n\
    \    char_code=$(printf \"%d\" \"'$char\")\n    if [ $char_code -ge 65 ] && [\
    \ $char_code -le 90 ]; then\n      char_code_new=$((char_code + 32))\n      char_new=$(printf\
    \ \\\\$(printf '%03o' $char_code_new))\n      is_letter_found=1\n    elif [ $char_code\
    \ -ge 97 ] && [ $char_code -le 122 ]; then\n      char_code_new=$((char_code -\
    \ 32))\n      char_new=$(printf \\\\$(printf '%03o' $char_code_new))\n      is_letter_found=1\n\
    \    else\n      char_new=$char\n    fi\n    result=\"$result$char_new\"\n   \
    \ i=$((i + 1))\n  done\n  if [ $is_letter_found -eq 0 ]; then\n    result=$(echo\
    \ $result | rev)\n  fi\n  echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "  local str=$1\n  local res=\"\"\n\
    \  local i=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n    local ch=${str:$i:1}\n\
    \    if [[ $ch =~ [a-zA-Z] ]]; then\n      if [[ $ch =~ [a-z] ]]; then\n     \
    \   res+=$(echo $ch | tr [a-z] [A-Z])\n      else\n        res+=$(echo $ch | tr\
    \ [A-Z] [a-z])\n      fi\n    else\n      res+=$ch\n    fi\n    i=$((i+1))\n \
    \ done\n  echo $res", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi",
  "    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    local c\n    local ascii\n    local is_letter\n    while [ $i -lt $len ];\
    \ do\n        c=${str:$i:1}\n        ascii=$(printf \"%d\" \"'$c\")\n        is_letter=$(echo\
    \ $ascii | grep -E \"^[a-zA-Z]$\")\n        if [ -n \"$is_letter\" ]; then\n \
    \           if [ $ascii -ge 65 -a $ascii -le 90 ]; then\n                c=$(printf\
    \ \\\\$(printf '%03o' \"$((ascii+32))\"))\n            else\n                c=$(printf\
    \ \\\\$(printf '%03o' \"$((ascii-32))\"))\n            fi\n        fi\n      \
    \  result=$result$c\n        i=$((i+1))\n    done\n    echo $result", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    # write\
    \ your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "  echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=$1\n\
    \    local result=\"\"\n    local i=0\n    local len=${#str}\n    for ((i=0; i<len;\
    \ i++)); do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z] ]];\
    \ then\n            if [[ $char =~ [a-z] ]]; then\n                result+=$(echo\
    \ $char | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n        \
    \    result+=$char\n        fi\n    done\n    echo $result", "  # write your code\
    \ here\n  echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    local str=$1\n   \
    \ local len=${#str}\n    local res=\"\"\n    local i=0\n    local chr=\"\"\n \
    \   local chr_code=0\n    local chr_code_new=0\n    local chr_new=\"\"\n    local\
    \ is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n\
    \    local is_special=0\n    local is_reversed=0\n    local is_reversed_digit=0\n\
    \    local is_reversed_special=0\n    local is_reversed_letter=0\n    local is_reversed_upper=0\n\
    \    local is_reversed_lower=0\n    local is_reversed_digit_upper=0\n    local\
    \ is_reversed_digit_lower=0\n    local is_reversed_special_upper=0\n    local\
    \ is_reversed_special_lower=0\n    local is_reversed_letter_upper=0\n    local\
    \ is_reversed_letter_lower=0\n    local is_reversed_upper_lower=0\n    local is_reversed_lower_upper=0\n\
    \    local is_reversed_digit_special=0\n    local is_reversed_special_digit=0\n\
    \    local is_reversed_letter_digit=0\n    local is_reversed_digit_letter=0\n\
    \    local is_reversed_letter_special=0\n    local is_reversed_special_letter=0\n\
    \    local is_reversed_upper_digit=0\n    local is_reversed_digit_upper=0\n  \
    \  local is_reversed_upper_special=0\n    local is_reversed_special_upper=0\n\
    \    local is_reversed_lower_digit=0\n    local is_reversed_digit_lower=0\n  \
    \  local is_reversed_lower_special=0\n    local is_reversed_special_lower=0\n\
    \    local is_reversed_upper_letter=0\n    local is_reversed_letter_upper=0\n\
    \    local is_re", "  # write your code here\n  echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "    local str=$1\n    local result=\"\"\n  \
    \  local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        local\
    \ c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                result+=${c^^}\n            else\n         \
    \       result+=${c,,}\n            fi\n        else\n            result+=$c\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $result", "    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=$1\n  local\
    \ len=${#str}\n  local i=0\n  local j=0\n  local res=\"\"\n  local c=\"\"\n  local\
    \ is_letter=0\n  local is_upper=0\n  local is_lower=0\n  local is_digit=0\n  local\
    \ is_special=0\n  local is_reversed=0\n  local is_empty=0\n  local is_all_letters=0\n\
    \  local is_all_digits=0\n  local is_all_special=0\n  local is_all_upper=0\n \
    \ local is_all_lower=0\n  local is_all_mixed=0\n  local is_all_mixed_upper=0\n\
    \  local is_all_mixed_lower=0\n  local is_all_mixed_upper_lower=0\n  local is_all_mixed_upper_lower_special=0\n\
    \  local is_all_mixed_upper_lower_digit=0\n  local is_all_mixed_upper_lower_digit_special=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper=0\n  local is_all_mixed_upper_lower_digit_special_lower=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower=0\n  local is_all_mixed_upper_lower_digit_special_upper_lower_special=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_special_digit=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_special_digit_upper=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_special_digit_lower=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_special_digit_upper_lower=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_special_digit_upper_lower_special=0\n\
    \  local is_all_mixed_upper_lower_digit_special_upper_lower_", "    echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "  echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    local str=$1\n    local len=${#str}\n  \
    \  local res=\"\"\n    local i=0\n    local ch=\"\"\n    local ch_code=0\n   \
    \ local ch_code_new=0\n    local ch_new=\"\"\n    local is_letter=0\n    local\
    \ is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_special=0\n\
    \    local is_all_special=1\n    local is_all_digit=1\n    local is_all_upper=1\n\
    \    local is_all_lower=1\n    local is_all_letter=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter=1\n    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special_or_letter=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special_or",
  "    local s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\
    \"\n    local u=\"\"\n    local n=\"\"\n    local d=\"\"\n    local p=\"\"\n \
    \   local t=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local\
    \ a=\"\"\n    local b=\"\"\n    local e=\"\"\n    local f=\"\"\n    local g=\"\
    \"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local m=\"\"\n \
    \   local o=\"\"\n    local q=\"\"\n    local r=\"\"\n    local v=\"\"\n    local\
    \ w=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local A=\"\
    \"\n    local B=\"\"\n    local C=\"\"\n    local D=\"\"\n    local E=\"\"\n \
    \   local F=\"\"\n    local G=\"\"\n    local H=\"\"\n    local I=\"\"\n    local\
    \ J=\"\"\n    local K=\"\"\n    local L=\"\"\n    local M=\"\"\n    local N=\"\
    \"\n    local O=\"\"\n    local P=\"\"\n    local Q=\"\"\n    local R=\"\"\n \
    \   local S=\"\"\n    local T=\"\"\n    local U=\"\"\n    local V=\"\"\n    local\
    \ W=\"\"\n    local X=\"\"\n    local Y=\"\"\n    local Z=\"\"\n    local _=\"\
    \"\n    local -i len=${#s}\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n\
    \        l=${c,,}\n        u=${c^^}\n        n=${c//[^0-9]/}\n        d=${c//[^0-9]/}\n\
    \        p=${c//[^0-9]/}\n        t=${c//[^0-9]/}\n        x=${c//[^0-9]/}\n \
    \       y=${c//[^0-9]/}\n        z=${c//[^0-9]/}\n        a=${c//[^0-9]/}\n  \
    \      b=${c//[^0-9]/}\n        e=${c//[^0-9]/}\n        f=${c//[^0-9]/}\n   \
    \     g=${c//[^", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo $1 | rev\n  fi",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | rev", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"Hello world\"", "  echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'", "  local str=$1\n  local len=${#str}\n\
    \  local res=\"\"\n  local i=0\n  local c=\"\"\n  local c_code=0\n  local c_code_new=0\n\
    \  local c_new=\"\"\n  local is_letter=0\n  local is_upper=0\n  local is_lower=0\n\
    \  local is_digit=0\n  local is_punct=0\n  local is_space=0\n  local is_other=0\n\
    \  local is_print=0\n  local is_graph=0\n  local is_cntrl=0\n  local is_xdigit=0\n\
    \  local is_alnum=0\n  local is_alpha=0\n  local is_ascii=0\n  local is_blank=0\n\
    \  local is_cntrl=0\n  local is_digit=0\n  local is_graph=0\n  local is_lower=0\n\
    \  local is_print=0\n  local is_punct=0\n  local is_space=0\n  local is_upper=0\n\
    \  local is_xdigit=0\n  local is_alnum=0\n  local is_alpha=0\n  local is_ascii=0\n\
    \  local is_blank=0\n  local is_cntrl=0\n  local is_digit=0\n  local is_graph=0\n\
    \  local is_lower=0\n  local is_print=0\n  local is_punct=0\n  local is_space=0\n\
    \  local is_upper=0\n  local is_xdigit=0\n  local is_alnum=0\n  local is_alpha=0\n\
    \  local is_ascii=0\n  local is_blank=0\n  local is_cntrl=0\n  local is_digit=0\n\
    \  local is_graph=0\n  local is_lower=0\n  local is_print=0\n  local is_punct=0\n\
    \  local is_space=0\n  local is_upper=0\n  local is_xdigit=0\n  local is_alnum=0\n\
    \  local is_alpha=0\n  local is_ascii=0\n  local is", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", '  # your code here', "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo \"$1\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo $1 | tr '[:upper:]' '[:lower:]' | rev",
  "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n  \
    \  while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        let i++\n    done\n    echo $res", "    echo $1\
    \ | tr '[:upper:]' '[:lower:]' | rev", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]'", "  echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "  local str=$1\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\
    \  local char=\"\"\n  local char_code=\"\"\n  local char_code_new=\"\"\n  local\
    \ char_new=\"\"\n  for (( i=0; i<len; i++ )); do\n    char=${str:$i:1}\n    char_code=$(printf\
    \ \"%d\" \"'$char\")\n    if [[ $char_code -ge 65 && $char_code -le 90 ]]; then\n\
    \      char_code_new=$(( $char_code + 32 ))\n      char_new=$(printf \\\\$(printf\
    \ '%03o' $char_code_new))\n    elif [[ $char_code -ge 97 && $char_code -le 122\
    \ ]]; then\n      char_code_new=$(( $char_code - 32 ))\n      char_new=$(printf\
    \ \\\\$(printf '%03o' $char_code_new))\n    else\n      char_new=$char\n    fi\n\
    \    result=\"$result$char_new\"\n  done\n  echo $result", "  local str=$1\n \
    \ local len=${#str}\n  local i=0\n  local res=\"\"\n  local char=\"\"\n  local\
    \ char_code=0\n  local char_code_new=0\n  local char_new=\"\"\n  local is_letter=0\n\
    \  local is_upper=0\n  local is_lower=0\n  local is_digit=0\n  local is_special=0\n\
    \  local is_all_special=1\n  local is_all_digit=1\n  local is_all_upper=1\n  local\
    \ is_all_lower=1\n  local is_all_letter=1\n  local is_all_upper_or_lower=1\n \
    \ local is_all_upper_or_lower_or_digit=1\n  local is_all_upper_or_lower_or_digit_or_special=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter=1\n  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special_or_letter=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_letter_or_digit_or_special_or_letter_or_digit_or_special_or",
  "  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]'",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  echo\
    \ $1 | sed 's/\\([a-z]\\)/\\U\\1/g;s/\\([A-Z]\\)/\\L\\1/g;'", "    local str=$1\n\
    \    local res=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt\
    \ $len ]; do\n        local ch=${str:$i:1}\n        if [[ $ch =~ [a-zA-Z] ]];\
    \ then\n            if [[ $ch =~ [a-z] ]]; then\n                res+=${ch^^}\n\
    \            else\n                res+=${ch,,}\n            fi\n        else\n\
    \            res+=$ch\n        fi\n        i=$((i+1))\n    done\n    echo $res",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | rev", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n  \
    \  local char\n    local char_code\n    local char_code_res\n    local char_res\n\
    \    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        char_code=$(printf\
    \ \"%d\" \"'$char\")\n        if [ $char_code -ge 65 ] && [ $char_code -le 90\
    \ ]; then\n            char_code_res=$((char_code + 32))\n        elif [ $char_code\
    \ -ge 97 ] && [ $char_code -le 122 ]; then\n            char_code_res=$((char_code\
    \ - 32))\n        else\n            char_code_res=$char_code\n        fi\n   \
    \     char_res=$(printf \\\\$(printf '%03o' $char_code_res))\n        res=$res$char_res\n\
    \        i=$((i + 1))\n    done\n    echo $res", "    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | rev", "  local str=$1\n  local res=\"\"\n  local i=0\n  local\
    \ len=${#str}\n  while [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [[\
    \ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        res=$res$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n      else\n        res=$res$(echo $c | tr\
    \ '[:upper:]' '[:lower:]')\n      fi\n    else\n      res=$res$c\n    fi\n   \
    \ i=$((i+1))\n  done\n  echo $res", "  echo $1 | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]'", "  echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'", "  local str=$1\n  local res=\"\"\
    \n  for (( i=0; i<${#str}; i++ )); do\n    local c=${str:$i:1}\n    if [[ $c =~\
    \ [a-zA-Z] ]]; then\n      res+=$(echo $c | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]')\n    else\n      res+=$c\n    fi\n  done\n  echo $res", "    local\
    \ str=$1\n    local res=\"\"\n    local char=\"\"\n    local i=0\n    local len=${#str}\n\
    \    for (( i=0; i<len; i++ )); do\n        char=${str:$i:1}\n        if [[ $char\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]]; then\n          \
    \      res+=$(echo $char | tr '[:lower:]' '[:upper:]')\n            else\n   \
    \             res+=$(echo $char | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$char\n        fi\n    done\n    echo $res", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ # Write your code here\n  echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "  echo $1 | tr '[:upper:]' '[:lower:]' | rev", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local s=$1\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    local c=\"\"\n    local c_upper=\"\
    \"\n    local c_lower=\"\"\n    local is_letter=0\n    local is_upper=0\n    local\
    \ is_lower=0\n    local is_digit=0\n    local is_symbol=0\n    local is_reverse=0\n\
    \    local is_reverse_letter=0\n    local is_reverse_digit=0\n    local is_reverse_symbol=0\n\
    \    local is_reverse_upper=0\n    local is_reverse_lower=0\n    local is_reverse_all=0\n\
    \    local is_reverse_all_letter=0\n    local is_reverse_all_digit=0\n    local\
    \ is_reverse_all_symbol=0\n    local is_reverse_all_upper=0\n    local is_reverse_all_lower=0\n\
    \    local is_reverse_all_upper_digit=0\n    local is_reverse_all_lower_digit=0\n\
    \    local is_reverse_all_upper_symbol=0\n    local is_reverse_all_lower_symbol=0\n\
    \    local is_reverse_all_upper_digit_symbol=0\n    local is_reverse_all_lower_digit_symbol=0\n\
    \    local is_reverse_all_upper_lower=0\n    local is_reverse_all_upper_lower_digit=0\n\
    \    local is_reverse_all_upper_lower_symbol=0\n    local is_reverse_all_upper_lower_digit_symbol=0\n\
    \    local is_reverse_all_upper_lower_digit_symbol_letter=0\n    local is_reverse_all_upper_lower_digit_symbol_letter_upper=0\n\
    \    local is_reverse_all_upper_lower_digit_symbol_letter_lower=0\n    local is_reverse_all_upper_lower_digit_symbol_letter_upper_lower=0\n\
    \    local is_reverse_all_upper_lower_digit_symbol_letter_upper_lower_digit=0\n\
    \    local is_reverse_all_upper_lower_digit_symbol_letter", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "  local result=\"\
    \"\n  local i=0\n  local c=\"\"\n  local l=\"\"\n  local s=\"\"\n  local r=\"\"\
    \n  local is_letter=0\n  local is_upper=0\n  local is_lower=0\n  local is_digit=0\n\
    \  local is_special=0\n  local is_reversed=0\n  local is_empty=0\n  local is_all_letters=0\n\
    \  local is_all_digits=0\n  local is_all_special=0\n  local is_all_upper=0\n \
    \ local is_all_lower=0\n  local is_all_mixed=0\n  local is_mixed=0\n  local is_mixed_upper=0\n\
    \  local is_mixed_lower=0\n  local is_mixed_digit=0\n  local is_mixed_special=0\n\
    \  local is_mixed_upper_lower=0\n  local is_mixed_upper_digit=0\n  local is_mixed_upper_special=0\n\
    \  local is_mixed_lower_digit=0\n  local is_mixed_lower_special=0\n  local is_mixed_digit_special=0\n\
    \  local is_mixed_upper_lower_digit=0\n  local is_mixed_upper_lower_special=0\n\
    \  local is_mixed_upper_digit_special=0\n  local is_mixed_lower_digit_special=0\n\
    \  local is_mixed_upper_lower_digit_special=0\n  local is_mixed_upper_lower_digit_special=0\n\
    \  local is_mixed_upper_lower_digit_special=0\n  local is_mixed_upper_lower_digit_special=0\n\
    \  local is_mixed_upper_lower_digit_special=0\n  local is_mixed_upper_lower_digit_special=0\n\
    \  local is_mixed_upper_lower_digit_special=0\n  local is_mixed_upper_lower_digit_special=0\n\
    \  local is_mixed_upper_lower_digit_special=0\n  local is_mixed_upper_lower_digit_special=0",
  "    local s=$1\n    local r=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                r+=${c^^}\n            else\n              \
    \  r+=${c,,}\n            fi\n        else\n            r+=$c\n        fi\n  \
    \  done\n    echo $r", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi", "    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=$1\n\
    \  local res=\"\"\n  local len=${#str}\n  local i=0\n  local c=\"\"\n  local is_letter=0\n\
    \  local is_upper=0\n  local is_lower=0\n  local is_digit=0\n  local is_special=0\n\
    \  local is_empty=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased=0\n  local is_digitized=0\n  local is_specialized=0\n\
    \  local is_emptyed=0\n  local is_reversed=0\n  local is_capitalized=0\n  local\
    \ is_lowercased=0\n  local is_uppercased", "    echo $1 | tr -d '\\n' | sed 's/[a-z]/\\\
    U&/g;s/[A-Z]/\\L&/g' | rev", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=$1\n  local res=\"\"\n  local ch=\"\"\
    \n  local i=0\n  local len=${#str}\n  local is_letter=0\n  local is_upper=0\n\
    \  local is_lower=0\n  local is_number=0\n  local is_special=0\n  local is_empty=0\n\
    \  local is_reversed=0\n  local is_reversed_str=\"\"\n  local is_reversed_str_len=0\n\
    \  local is_reversed_str_i=0\n  local is_reversed_str_ch=\"\"\n  local is_reversed_str_is_letter=0\n\
    \  local is_reversed_str_is_upper=0\n  local is_reversed_str_is_lower=0\n  local\
    \ is_reversed_str_is_number=0\n  local is_reversed_str_is_special=0\n  local is_reversed_str_is_empty=0\n\
    \  local is_reversed_str_is_reversed=0\n  local is_reversed_str_is_reversed_str=\"\
    \"\n  local is_reversed_str_is_reversed_str_len=0\n  local is_reversed_str_is_reversed_str_i=0\n\
    \  local is_reversed_str_is_reversed_str_ch=\"\"\n  local is_reversed_str_is_reversed_str_is_letter=0\n\
    \  local is_reversed_str_is_reversed_str_is_upper=0\n  local is_reversed_str_is_reversed_str_is_lower=0\n\
    \  local is_reversed_str_is_reversed_str_is_number=0\n  local is_reversed_str_is_reversed_str_is_special=0\n\
    \  local is_reversed_str_is_reversed_str_is_empty=0\n  local is_reversed_str_is_reversed_str_is_reversed=0\n\
    \  local", "  local str=$1\n  local result=\"\"\n  for (( i=0; i<${#str}; i++\
    \ )); do\n    local c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if\
    \ [[ $c =~ [a-z] ]]; then\n        c=${c^^}\n      else\n        c=${c,,}\n  \
    \    fi\n    fi\n    result=\"$c$result\"\n  done\n  echo $result", '  echo $1
    | tr "[:lower:]" "[:upper:]" | tr "[:upper:]" "[:lower:]"', "    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | rev", "    echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ tr '[:upper:]' '[:lower:]'", "  # Write your code here\n  echo $1 | tr -d '[:digit:]'\
    \ | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ str=$1\n    local len=${#str}\n    local i=0\n    local res=\"\"\n    local\
    \ ch=\"\"\n    local ch_code=0\n    local ch_code_new=0\n    local ch_new=\"\"\
    \n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_reversed=0\n    local is_all_special=1\n\
    \    local is_all_digit=1\n    local is_all_letter=1\n    local is_all_upper=1\n\
    \    local is_all_lower=1\n    local is_all_upper_or_lower=1\n    local is_all_upper_or_lower_or_digit=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special=1\n    local is_all_upper_or_lower_or_digit_or_special_or_whitespace=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline_or_tab=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline_or_tab_or_backspace=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline_or_tab_or_backspace_or_formfeed=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline_or_tab_or_backspace_or_formfeed_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_whitespace_or_newline_or_tab_or_backspace_or_formfeed_or_carriage_return_or_vertical_tab=1",
  "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "  echo\
    \ $1 | tr -d '\\n' | tr -d '\\r' | tr '[:upper:]' '[:lower:]' | rev", "    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "  local s=$1\n\
    \  local result=\"\"\n  local i\n  local c\n  for ((i=0; i<${#s}; i++)); do\n\
    \    c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]];\
    \ then\n        result+=\"${c^^}\"\n      else\n        result+=\"${c,,}\"\n \
    \     fi\n    else\n      result+=\"$c\"\n    fi\n  done\n  echo \"$result\"",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo $1 | rev\n    fi", "  # your code here\n  echo $1 | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    local s=${1//[^a-zA-Z]/}\n\
    \    if [[ -z $s ]]; then\n        echo $1 | rev\n    else\n        echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    fi", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | rev", "    # Write your code here\n    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    echo \"$1\"\
    \ | sed -E 's/[a-z]/\\U&/g; s/[A-Z]/\\L&/g; s/[^a-zA-Z]//g' | rev", "  echo $1\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | rev", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo \"$1\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local ch=${str:$i:1}\n    if [[ $ch =~ [a-zA-Z]\
    \ ]]; then\n      if [[ $ch =~ [a-z] ]]; then\n        res=$res$(echo $ch | tr\
    \ '[:lower:]' '[:upper:]')\n      else\n        res=$res$(echo $ch | tr '[:upper:]'\
    \ '[:lower:]')\n      fi\n    else\n      res=$res$ch\n    fi\n    i=$((i+1))\n\
    \  done\n  echo $res", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    local str=$1\n    local result=\"\"\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $char =~ [a-z] ]]; then\n                result+=\"\
    ${char^^}\"\n            else\n                result+=\"${char,,}\"\n       \
    \     fi\n        else\n            result+=\"$char\"\n        fi\n    done\n\
    \    echo $result", "    # Write your code here\n    echo $1 | tr -d '\\n' | tr\
    \ -d '\\r' | tr -d '\\t' | tr -d ' ' | tr '[:upper:]' '[:lower:]' | rev", "  local\
    \ s=$1\n  local s_len=${#s}\n  local i=0\n  local result=\"\"\n  local c=\"\"\n\
    \  local c_lower=\"\"\n  local c_upper=\"\"\n  local c_lower_upper=\"\"\n  local\
    \ c_upper_lower=\"\"\n  local c_lower_upper_regex=\"^[a-z]+$\"\n  local c_upper_lower_regex=\"\
    ^[A-Z]+$\"\n  while [ $i -lt $s_len ]; do\n    c=${s:$i:1}\n    c_lower=${c,,}\n\
    \    c_upper=${c^^}\n    if [[ $c =~ $c_lower_upper_regex ]]; then\n      result+=$c_upper\n\
    \    elif [[ $c =~ $c_upper_lower_regex ]]; then\n      result+=$c_lower\n   \
    \ else\n      result+=$c\n    fi\n    i=$((i+1))\n  done\n  echo $result", " \
    \   # your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | rev", "  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n\
    \    echo $1 | rev\n  fi", "    local s=$1\n    local s_len=${#s}\n    local res=\"\
    \"\n    local i=0\n    local c=\"\"\n    local c_ascii=\"\"\n    local c_ascii_new=\"\
    \"\n    local c_new=\"\"\n    while [ $i -lt $s_len ]; do\n        c=${s:$i:1}\n\
    \        c_ascii=$(printf \"%d\" \"'$c\")\n        if [ $c_ascii -ge 65 -a $c_ascii\
    \ -le 90 ]; then\n            c_ascii_new=$((c_ascii+32))\n        elif [ $c_ascii\
    \ -ge 97 -a $c_ascii -le 122 ]; then\n            c_ascii_new=$((c_ascii-32))\n\
    \        else\n            c_ascii_new=$c_ascii\n        fi\n        c_new=$(printf\
    \ \\\\$(printf '%03o' $c_ascii_new))\n        res=$res$c_new\n        i=$((i+1))\n\
    \    done\n    echo $res", "  # Write your code here\n  # Use echo to print to\
    \ stdout\n  echo $1 | tr -d '\\n' | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local s=$1\n  local r=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ r+=\"${c^^}\"\n      else\n        r+=\"${c,,}\"\n      fi\n    else\n     \
    \ r+=\"$c\"\n    fi\n  done\n  echo $r", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "    # Write your code here\n    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "    echo $1 | tr -d '[:digit:]' | tr '[:upper:]' '[:lower:]' | rev",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | rev", "  echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    local str=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#str}\n    local ch=\"\"\n    local ch_code=0\n    local ch_code_new=0\n\
    \    local ch_new=\"\"\n    local is_letter=0\n    local is_upper=0\n    local\
    \ is_lower=0\n    local is_digit=0\n    local is_special=0\n    local is_all_special=1\n\
    \    local is_all_digit=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_letter=1\n    local is_all_letter_upper=1\n    local is_all_letter_lower=1\n\
    \    local is_all_letter_digit=1\n    local is_all_letter_special=1\n    local\
    \ is_all_letter_upper_digit=1\n    local is_all_letter_upper_special=1\n    local\
    \ is_all_letter_lower_digit=1\n    local is_all_letter_lower_special=1\n    local\
    \ is_all_letter_digit_special=1\n    local is_all_letter_upper_digit_special=1\n\
    \    local is_all_letter_lower_digit_special=1\n    local is_all_letter_upper_lower=1\n\
    \    local is_all_letter_upper_lower_digit=1\n    local is_all_letter_upper_lower_special=1\n\
    \    local is_all_letter_upper_lower_digit_special=1\n    local is_all_letter_upper_lower_digit_special=1\n\
    \    local is_all_letter_upper_lower_digit_special=1\n    local is_all_letter_upper_lower_digit_special=1\n\
    \    local is_all_letter_upper_lower_digit_special=1\n    local is_all_letter_upper_lower_digit_special=1\n\
    \    local is_all_letter_upper_lower_digit_special=1\n    local is_all_letter_upper_lower_digit_special=1\n\
    \    local is_all_letter_upper_lower_digit_special=1\n    local is_all_letter",
  "    local str=$1\n    local res=\"\"\n    local char=\"\"\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z] ]]; then\n\
    \            if [[ $char =~ [a-z] ]]; then\n                res+=$(echo $char\
    \ | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n        \
    \    res+=$char\n        fi\n    done\n    echo $res", "    local s=$1\n    local\
    \ res=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\
    \n    local len=${#s}\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n  \
    \      l=$(echo $c | tr '[:upper:]' '[:lower:]')\n        u=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n        if [ \"$c\" = \"$l\" ]; then\n            res+=$u\n  \
    \      elif [ \"$c\" = \"$u\" ]; then\n            res+=$l\n        else\n   \
    \         res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", " \
    \ local str=$1\n  local str_len=${#str}\n  local result=\"\"\n  local i=0\n  local\
    \ ch=\"\"\n  local ch_code=0\n  local ch_code_upper=0\n  local ch_code_lower=0\n\
    \  local ch_code_diff=0\n  local ch_code_new=0\n  local ch_new=\"\"\n  for ((i=0;\
    \ i<str_len; i++)); do\n    ch=${str:$i:1}\n    ch_code=$(printf \"%d\" \"'$ch\"\
    )\n    ch_code_upper=$(printf \"%d\" \"'A\")\n    ch_code_lower=$(printf \"%d\"\
    \ \"'a\")\n    ch_code_diff=$((ch_code_upper - ch_code_lower))\n    if [[ $ch_code\
    \ -ge $ch_code_upper && $ch_code -le $((ch_code_upper + 25)) ]]; then\n      ch_code_new=$((ch_code\
    \ + ch_code_diff))\n      ch_new=$(printf \"\\x$(printf %x $ch_code_new)\")\n\
    \    elif [[ $ch_code -ge $ch_code_lower && $ch_code -le $((ch_code_lower + 25))\
    \ ]]; then\n      ch_code_new=$((ch_code - ch_code_diff))\n      ch_new=$(printf\
    \ \"\\x$(printf %x $ch_code_new)\")\n    else\n      ch_new=$ch\n    fi\n    result=$result$ch_new\n\
    \  done\n  echo $result", "  local str=$1\n  local result=\"\"\n  local i=0\n\
    \  local len=${#str}\n  while [ $i -lt $len ]; do\n    local c=${str:$i:1}\n \
    \   if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n      else\n        result+=$(echo $c | tr\
    \ '[:upper:]' '[:lower:]')\n      fi\n    else\n      result+=$c\n    fi\n   \
    \ i=$((i+1))\n  done\n  echo $result", "  echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "  echo $1 | tr -d '\\n' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | rev", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    echo $1 | tr -d '\\n' | sed\
    \ 's/[a-z]/\\U&/g;s/[A-Z]/\\L&/g' | rev", "    local s=$1\n    local s2=\"\"\n\
    \    local len=${#s}\n    local i=0\n    local c=\"\"\n    local c2=\"\"\n   \
    \ local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n\
    \    local is_special=0\n    local is_reversed=0\n    local is_all_special=1\n\
    \    local is_all_digit=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_letter=1\n    local is_all_special_or_digit=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_letter_or_digit=1\n    local is_all_letter_or_special=1\n  \
    \  local is_all_letter_or_upper=1\n    local is_all_letter_or_lower=1\n    local\
    \ is_all_upper_or_special=1\n    local is_all_lower_or_special=1\n    local is_all_upper_or_digit=1\n\
    \    local is_all_lower_or_digit=1\n    local is_all_upper_or_lower_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit=1\n    local is_all_letter_or_upper_or_lower=1\n\
    \    local is_all_letter_or_upper_or_special=1\n    local is_all_letter_or_lower_or_special=1\n\
    \    local is_all_letter_or_upper_or_lower_or_special=1\n    local is_all_letter_or_upper_or_lower_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit=1\n    local is_all_letter_or_upper_or_lower_or_special_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit=1\n    local is_all_letter_or_upper_or_lower_or_special_or_digit=1\n\
    \    local is", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ $1 | tr -d '\\n' | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    # Write your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
  "  echo $1 | tr -d '[:digit:]' | tr '[:upper:]' '[:lower:]' | rev", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \  else\n    echo \"$1\" | rev\n  fi", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "  local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n      res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n    else\n   \
    \   res+=$c\n    fi\n    i=$((i+1))\n  done\n  echo $res", "    local s=$1\n \
    \   local result=\"\"\n    local i=0\n    local len=${#s}\n    local c=\"\"\n\
    \    local isLetter=0\n    local isUpper=0\n    local isLower=0\n    local isDigit=0\n\
    \    local isOther=0\n    local isAllOther=1\n    local isAllDigit=1\n    local\
    \ isAllLetter=1\n    local isAllUpper=1\n    local isAllLower=1\n    local isAllUpperOrLower=1\n\
    \    local isAllUpperOrLowerOrDigit=1\n    local isAllUpperOrLowerOrDigitOrOther=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpace=1\n    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunct=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbol=1\n    local\
    \ isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControl=1\n    local\
    \ isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlank=1\n  \
    \  local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrint=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrintOrGraph=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrintOrGraphOrXdigit=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrintOrGraphOrXdigitOrAlnum=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrintOrGraphOrXdigitOrAlnumOrAlpha=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrPunctOrSymbolOrControlOrBlankOrPrintOrGraphOrXdigitOrAlnumOrAlphaOrAscii=1\n\
    \    local isAllUpperOrLowerOrDigitOrOtherOrSpaceOrP", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    # Write your code here\n   \
    \ echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    echo \"$1\" | tr 'a-zA-Z'\
    \ 'A-Za-z' | rev", "    local str=$1\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n  \
    \      if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=${c^^}\n            else\n                c=${c,,}\n      \
    \      fi\n        fi\n        res+=$c\n        i=$((i+1))\n    done\n    echo\
    \ $res", "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n\
    \    local c=\"\"\n    local c_ascii=\"\"\n    local c_ascii_new=\"\"\n    local\
    \ c_new=\"\"\n    local is_letter=0\n    local is_letter_found=0\n    local is_letter_found_in_str=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_symbol=0\n\
    \    local is_space=0\n    local is_newline=0\n    local is_tab=0\n    local is_backspace=0\n\
    \    local is_formfeed=0\n    local is_carriage=0\n    local is_vertical=0\n \
    \   local is_other=0\n    local is_ascii_printable=0\n    local is_ascii_control=0\n\
    \    local is_ascii_whitespace=0\n    local is_ascii_punctuation=0\n    local\
    \ is_ascii_hex_digit=0\n    local is_ascii_alphanumeric=0\n    local is_ascii_alphabetic=0\n\
    \    local is_ascii_lower=0\n    local is_ascii_upper=0\n    local is_ascii_digit=0\n\
    \    local is_ascii_oct_digit=0\n    local is_ascii_graph=0\n    local is_ascii_print=0\n\
    \    local is_ascii_blank=0\n    local is_ascii_cntrl=0\n    local is_ascii_xdigit=0\n\
    \    local is_ascii_space=0\n    local is_ascii_punct=0\n    local is_ascii_alnum=0\n\
    \    local is_ascii_alpha=0\n    local is_ascii_ascii=0\n    local is_ascii_cntrl=0\n\
    \    local is_ascii_digit=0\n    local is_ascii_graph=0\n    local is_ascii_lower=",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    local ch\n    local ascii\n    local is_letter=0\n    for (( i=0; i<$len;\
    \ i++ )); do\n        ch=${str:$i:1}\n        ascii=$(printf \"%d\" \"'$ch\")\n\
    \        if [[ $ascii -ge 65 && $ascii -le 90 ]]; then\n            result+=$(printf\
    \ \\\\$(printf '%03o' $((ascii+32))))\n            is_letter=1\n        elif [[\
    \ $ascii -ge 97 && $ascii -le 122 ]]; then\n            result+=$(printf \\\\\
    $(printf '%03o' $((ascii-32))))\n            is_letter=1\n        else\n     \
    \       result+=$ch\n        fi\n    done\n    if [[ $is_letter -eq 0 ]]; then\n\
    \        echo $result | rev\n    else\n        echo $result\n    fi", "    echo\
    \ $1 | tr -d '\\n' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' |\
    \ rev", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n\
    \        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n          \
    \  if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n            else\n\
    \                res+=\"${c,,}\"\n            fi\n        else\n            res+=\"\
    $c\"\n        fi\n    done\n    echo $res", "    local s=$1\n    local res=''\n\
    \    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '[:digit:]'", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world\"\n\
    \    echo $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    local\
    \ str=$1\n    local result=\"\"\n    local len=${#str}\n    for (( i=0; i<len;\
    \ i++ )); do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $char =~ [a-z] ]]; then\n                result+=$(echo\
    \ $char | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n        \
    \    result+=$char\n        fi\n    done\n    echo $result", "    local str=$1\n\
    \    local res=\"\"\n    local len=${#str}\n    local i=0\n    local ch=\"\"\n\
    \    local ch_code=0\n    while [ $i -lt $len ]; do\n        ch=${str:$i:1}\n\
    \        ch_code=$(printf '%d' \"'$ch\")\n        if [ $ch_code -ge 65 -a $ch_code\
    \ -le 90 ]; then\n            ch=$(printf '%s' \"'$ch\" | tr '[A-Z]' '[a-z]')\n\
    \        elif [ $ch_code -ge 97 -a $ch_code -le 122 ]; then\n            ch=$(printf\
    \ '%s' \"'$ch\" | tr '[a-z]' '[A-Z]')\n        fi\n        res=$res$ch\n     \
    \   i=$((i+1))\n    done\n    echo $res", "  echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "    local str=$1\n    local result=\"\"\n  \
    \  local len=${#str}\n    local i=0\n    local ch\n    while [ $i -lt $len ];\
    \ do\n        ch=${str:$i:1}\n        if [[ $ch =~ [a-zA-Z] ]]; then\n       \
    \     if [[ $ch =~ [a-z] ]]; then\n                ch=${ch^^}\n            else\n\
    \                ch=${ch,,}\n            fi\n        fi\n        result=\"$result$ch\"\
    \n        ((i++))\n    done\n    echo $result", "  echo $1 | tr -d '[:digit:]'\
    \ | tr '[:upper:]' '[:lower:]' | rev", "    if [[ $1 =~ [a-zA-Z] ]]; then\n  \
    \      echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    local str=$1\n    local len=${#str}\n\
    \    local i=0\n    local newstr=\"\"\n    local char=\"\"\n    local char_code=0\n\
    \    local new_char=\"\"\n    local new_char_code=0\n    local is_letter=0\n \
    \   local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_special=0\n\
    \    local is_all_special=1\n    local is_all_digit=1\n    local is_all_letter=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space=1\n    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_backspace=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_backspace_or_formfeed=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_backspace_or_formfeed_or_vertical_tab=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special", "    echo $1 | tr -d '\\\
    n' | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ str=$1\n    local len=${#str}\n    local res=\"\"\n    for ((i=0; i<len; i++));\
    \ do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z] ]]; then\n\
    \            if [[ $char =~ [a-z] ]]; then\n                res+=$(echo $char\
    \ | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n        \
    \    res+=$char\n        fi\n    done\n    echo $res", "  # Write your code here\n\
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=$1\n  local str_len=${#str}\n  local result=\"\"\n  for (( i=0; i<str_len;\
    \ i++ )); do\n    local char=${str:$i:1}\n    if [[ $char =~ [a-zA-Z] ]]; then\n\
    \      if [[ $char =~ [a-z] ]]; then\n        char=$(echo $char | tr '[:lower:]'\
    \ '[:upper:]')\n      else\n        char=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \      fi\n    fi\n    result=\"$result$char\"\n  done\n  echo $result", "   \
    \ if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ # Write your code here\n  # Use echo to print to stdout\n  echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr -d '[:digit:]' | rev", "    local s=$1\n    local r=\"\"\n\
    \    local i=0\n    local l=${#s}\n    while [ $i -lt $l ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                r+=$(echo $c | tr a-z A-Z)\n            else\n\
    \                r+=$(echo $c | tr A-Z a-z)\n            fi\n        else\n  \
    \          r+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $r", "  \
    \  # Write your code here\n    # echo $1 | tr -d '\\n' | sed 's/[a-z]/\\U&/g;s/[A-Z]/\\\
    L&/g'\n    echo $1 | tr -d '\\n' | sed 's/[a-z]/\\U&/g;s/[A-Z]/\\L&/g'", "   \
    \ local str=$1\n    local len=${#str}\n    local res=\"\"\n    local i=0\n   \
    \ local c=\"\"\n    local c_code=0\n    local c_code_new=0\n    local c_new=\"\
    \"\n    local is_letter=0\n    local is_letter_found=0\n    for ((i=0; i<len;\
    \ i++)); do\n        c=${str:$i:1}\n        c_code=$(printf \"%d\" \"'$c\")\n\
    \        if [[ $c_code -ge 65 && $c_code -le 90 ]]; then\n            is_letter=1\n\
    \            is_letter_found=1\n            c_code_new=$((c_code + 32))\n    \
    \    elif [[ $c_code -ge 97 && $c_code -le 122 ]]; then\n            is_letter=1\n\
    \            is_letter_found=1\n            c_code_new=$((c_code - 32))\n    \
    \    else\n            is_letter=0\n        fi\n        if [[ $is_letter -eq 1\
    \ ]]; then\n            c_new=$(printf \"\\x$(printf %x $c_code_new)\")\n    \
    \    else\n            c_new=$c\n        fi\n        res=$res$c_new\n    done\n\
    \    if [[ $is_letter_found -eq 0 ]]; then\n        res=$(echo $res | rev)\n \
    \   fi\n    echo $res", "    local s=$1\n    local r=\"\"\n    local c=\"\"\n\
    \    local i=0\n    local l=${#s}\n    local is_letter=false\n    local is_upper=false\n\
    \    local is_lower=false\n    local is_digit=false\n    local is_special=false\n\
    \    local is_reversed=false\n    local is_empty=false\n    local is_all_special=true\n\
    \    local is_all_digit=true\n    local is_all_upper=true\n    local is_all_lower=true\n\
    \    local is_all_letter=true\n    local is_all_special_or_digit=true\n    local\
    \ is_all_upper_or_lower=true\n    local is_all_letter_or_special=true\n    local\
    \ is_all_letter_or_digit=true\n    local is_all_upper_or_special=true\n    local\
    \ is_all_lower_or_special=true\n    local is_all_upper_or_digit=true\n    local\
    \ is_all_lower_or_digit=true\n    local is_all_special_or_upper=true\n    local\
    \ is_all_special_or_lower=true\n    local is_all_digit_or_upper=true\n    local\
    \ is_all_digit_or_lower=true\n    local is_all_special_or_upper_or_lower=true\n\
    \    local is_all_letter_or_special_or_digit=true\n    local is_all_upper_or_lower_or_special=true\n\
    \    local is_all_upper_or_lower_or_digit=true\n    local is_all_upper_or_special_or_digit=true\n\
    \    local is_all_lower_or_special_or_digit=true\n    local is_all_special_or_upper_or_digit=true\n\
    \    local is_all_special_or_lower_or_digit=true\n    local is_all_digit_or_upper_or_lower=true\n\
    \    local is_all_special_or_upper_or_lower_or_digit=true\n    local is_all_upper_or_lower_or_special_or_digit=",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local s=$1\n  local res=\"\"\n\
    \  local c=\"\"\n  local i=0\n  local len=${#s}\n  while [ $i -lt $len ]; do\n\
    \    c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]];\
    \ then\n        res=$res$(echo $c | tr a-z A-Z)\n      else\n        res=$res$(echo\
    \ $c | tr A-Z a-z)\n      fi\n    else\n      res=$res$c\n    fi\n    i=$((i+1))\n\
    \  done\n  echo $res", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\"\
    \ | rev\n  fi", "    local str=$1\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    while [ $i -lt $len ]; do\n        local char=${str:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                res=$res$(echo $char | tr '[:lower:]' '[:upper:]')\n \
    \           else\n                res=$res$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res=$res$char\n        fi\n       \
    \ i=$((i+1))\n    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n \
    \       echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  \
    \  else\n        echo $1 | rev\n    fi", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "    # Write your code here\n    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n  local c\n  local\
    \ c_upper\n  local c_lower\n  while [ $i -lt $len ]; do\n    c=${str:$i:1}\n \
    \   c_upper=$(echo $c | tr '[:lower:]' '[:upper:]')\n    c_lower=$(echo $c | tr\
    \ '[:upper:]' '[:lower:]')\n    if [ \"$c\" == \"$c_upper\" ]; then\n      res=\"\
    $res$c_lower\"\n    elif [ \"$c\" == \"$c_lower\" ]; then\n      res=\"$res$c_upper\"\
    \n    else\n      res=\"$res$c\"\n    fi\n    i=$((i+1))\n  done\n  echo $res",
  "  local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n  while [ $i\
    \ -lt $len ]; do\n    local ch=${str:$i:1}\n    if [[ $ch =~ [a-zA-Z] ]]; then\n\
    \      if [[ $ch =~ [a-z] ]]; then\n        res+=$(echo $ch | tr '[:lower:]' '[:upper:]')\n\
    \      else\n        res+=$(echo $ch | tr '[:upper:]' '[:lower:]')\n      fi\n\
    \    else\n      res+=$ch\n    fi\n    i=$((i+1))\n  done\n  echo $res", "  local\
    \ s=$1\n  local result=\"\"\n  for (( i=0; i<${#s}; i++ )); do\n    local c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ result+=\"${c^^}\"\n      else\n        result+=\"${c,,}\"\n      fi\n    else\n\
    \      result+=\"$c\"\n    fi\n  done\n  echo $result", "    # Write your code\
    \ here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev"]
stop_tokens:
- "\n}"
