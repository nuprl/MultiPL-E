name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets\
    \ = [];\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_brackets[(i + 1) %\
    \ opening_brackets.length];\n\t\tclosing_brackets.push(closing_bracket);\n\t}\n\
    \treturn opening_brackets.every(function(opening_bracket, i){\n\t\treturn closing_brackets.indexOf(opening_bracket)\
    \ !== -1;\n\t});\n}\n", "\tvar opening_brackets = brackets.match(/\\<+/g);\n\t\
    var closing_brackets = brackets.match(/\\>+/g);\n\tvar opening_brackets_count\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tvar closing_brackets_count\
    \ = closing_brackets ? closing_brackets.length : 0;\n\tvar correct_brackets_count\
    \ = opening_brackets_count - closing_brackets_count;\n\treturn (opening_brackets_count\
    \ == closing_brackets_count);\n}\n", "  var brackets_array = brackets.split(\"\
    \");\n  var correct_bracketing = false;\n  for(var i=0; i<brackets_array.length;\
    \ i++){\n    if(brackets_array[i] == \"<\"){\n      if(i < (brackets_array.length-1)){\n\
    \        if(brackets_array[i+1] != \">\"){\n          correct_bracketing = false;\n\
    \        }\n      }\n    }\n    if(brackets_array[i] == \">\"){\n      if(i <\
    \ (brackets_array.length-1)){\n        if(brackets_array[i+1] != \"<\"){\n   \
    \       correct_bracketing = false;\n        }\n      }\n    }\n  }\n  return\
    \ correct_bracketing;\n}\n", "    var opening_brackets = brackets.split(\"\");\n\
    \    var closing_brackets = brackets.split(\"\").reverse();\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n            correct_bracketing = false;\n       \
    \     break;\n        }\n    }\n    return correct_bracketing;\n}\n", "\tvar opening_brackets\
    \ = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\").reverse();\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "  var opening_brackets = brackets.split(\"<\");\n  var closing_brackets\
    \ = brackets.split(\">\");\n  for(var i = 0; i < opening_brackets.length; i++){\n\
    \    if(opening_brackets[i].length > 0 && closing_brackets[i].length == 0){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "\tvar opening_brackets\
    \ = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\tfor (var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i] === \"<\"){\n\
    \t\t\tif (opening_brackets[i+1] === \"<\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n", "\tvar opening_brackets\
    \ = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\>+/g);\n\
    \tvar correct_bracketing = false;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n", "   \
    \ var opening_brackets = brackets.split(\"\");\n    var closing_brackets = [];\n\
    \    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i] +\
    \ \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n       \
    \     closing_brackets.push(\"<\" + opening_brackets[i] + \">\");\n        }\n\
    \    }\n    return closing_brackets.join(\"\") == brackets;\n}\n", "  var opening_brackets\
    \ = brackets.split(\"\");\n  var closing_brackets = [];\n  for(var i=0; i<opening_brackets.length;\
    \ i++){\n    var opening_bracket = opening_brackets[i];\n    var closing_bracket\
    \ = opening_bracket;\n    if(opening_bracket == \"<\"){\n      closing_bracket\
    \ = \">\";\n    }\n    else if(opening_bracket == \">\"){\n      closing_bracket\
    \ = \"<\";\n    }\n    closing_brackets.push(closing_bracket);\n  }\n  return\
    \ closing_brackets.join(\"\") == brackets;\n}\n", "\tbrackets = brackets.split(\"\
    \");\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"<\"\
    ){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i-1] === \">\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "    var opening_brackets\
    \ = brackets.split(\"<\");\n    var closing_brackets = brackets.split(\">\");\n\
    \    var correct_bracketing = true;\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i].length != closing_brackets[i].length){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n", "\tbrackets = brackets.split(\"\");\n\t\
    for(var i = 0; i < brackets.length; i++){\n\t\tvar opening = brackets[i];\n\t\t\
    var closing = brackets[(i+1)%brackets.length];\n\t\tif(opening === closing){\n\
    \t\t\tbrackets.splice(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn brackets.join(\"\
    \") === \"\";\n}\n", "\tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets\
    \ = brackets.split(\">\");\n\tvar all_opening_brackets_closed = [];\n\tfor(var\
    \ i = 0; i < opening_brackets.length; i++){\n\t\tfor(var j = 0; j < closing_brackets.length;\
    \ j++){\n\t\t\tif(opening_brackets[i] == closing_brackets[j]){\n\t\t\t\tall_opening_brackets_closed.push(opening_brackets[i]);\n\
    \t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\tclosing_brackets.splice(j, 1);\n\
    \t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\treturn all_opening_brackets_closed.length\
    \ == 0;\n}\n", "  var opening_brackets = brackets.split(\"<\");\n  var closing_brackets\
    \ = brackets.split(\">\");\n  for(var i = 0; i < opening_brackets.length; i++){\n\
    \    if(closing_brackets[i] != opening_brackets[i]){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n", "    var opening_brackets = brackets.split(\"\
    \");\n    var correct_bracketing = false;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === \"<\"){\n            opening_brackets.splice(i,\
    \ 1);\n            correct_bracketing = true;\n        }\n    }\n    return correct_bracketing;\n\
    }\n", "  var opening_brackets = brackets.split(\"\");\n  var closing_brackets\
    \ = brackets.split(\"\").reverse();\n  \n  for(var i=0; i<opening_brackets.length;\
    \ i++){\n    if(opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \">\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_b", "\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets\
    \ = [];\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\t\n\t\
    \tfor(var j = i + 1; j < opening_brackets.length; j++){\n\t\t\tvar opening_bracket2\
    \ = opening_brackets[j];\n\t\t\t\n\t\t\tif(opening_bracket2 === opening_bracket){\n\
    \t\t\t\tclosing_bracket = opening_bracket2;\n\t\t\t\topening_brackets.splice(j,\
    \ 1);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\t\n\treturn opening_brackets.length === closing_brackets.length;\n}\n",
  "\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\t\
    for(var i=0; i<opening_brackets.length; i++){\n\t\tvar opening_bracket = opening_brackets[i];\n\
    \t\tvar closing_bracket = opening_bracket;\n\t\tif(opening_bracket == \"<\"){\n\
    \t\t\tclosing_bracket = \">\";\n\t\t}\n\t\telse if(opening_bracket == \">\"){\n\
    \t\t\tclosing_bracket = \"<\";\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\treturn (opening_brackets.length == closing_brackets.length);\n}\n", " \
    \ var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
