name: HumanEval_126_is_sorted
language: js
prompt: "//Given a list of numbers, return whether or not they are sorted\n// in ascending\
  \ order. If list has more than 1 duplicate of the same\n// number, return False.\
  \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n\
  // true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2,\
  \ 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n\
  // >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3,\
  \ 4])\n// false\nfunction is_sorted(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n \
  \ assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
  \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),true);\n}\n\ntest();"
completions: ["\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i - 1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  var sorted = true;\n\
    \  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i-1]){\n      sorted\
    \ = false;\n      break;\n    }\n  }\n  return sorted;\n}\n", "  if(lst.length\
    \ < 2){\n    return true;\n  }\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ === lst[i-1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "\tlet\
    \ sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tfor(let j = i +\
    \ 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\t\tsorted = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n", "    var sorted =\
    \ true;\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < lst[i-1]){\n\
    \            sorted = false;\n            break;\n        }\n    }\n    return\
    \ sorted;\n}\n", "  var sorted_list = lst.sort();\n  return sorted_list.length\
    \ == lst.length && sorted_list.every(function(elem, index, arr){\n    return elem\
    \ == arr[index];\n  });\n}\n", "\tlet sorted = true;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\
    \t\t\t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n", "  var len = lst.length;\n  if(len < 2) return true;\n  for(var i = 1; i\
    \ < len; i++){\n    if(lst[i] > lst[i - 1]) return false;\n  }\n  return true;\n\
    }\n", "\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i]\
    \ < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n}\n", " \
    \ var sorted = true;\n  var prev;\n  for(var i = 1; i < lst.length; i++){\n  \
    \  prev = lst[i-1];\n    if(lst[i] < prev){\n      sorted = false;\n      break;\n\
    \    }\n  }\n  return sorted;\n}\n", "  if(lst.length < 2){\n    return true;\n\
    \  }\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] === lst[i - 1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "\tlet sorted = true;\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tfor(let j = i + 1; j < lst.length;\
    \ j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\t\tsorted = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n", "\tvar sorted = true;\n\tfor(var\
    \ i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\n", "\tfor(var i = 1; i < lst.length;\
    \ i++){\n\t\tif(lst[i] === lst[i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "\tlet sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\
    \t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n",
  "  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i\
    \ - 1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n\
    }\n", "\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  var sorted = true;\n  for(var\
    \ i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i-1]){\n      sorted = false;\n\
    \      break;\n    }\n  }\n  return sorted;\n}\n", "\tfor(var i = 1; i < lst.length;\
    \ i++){\n\t\tif(lst[i] === lst[i - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
