name: HumanEval_65_circular_shift
language: js
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x, shift){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12,\
  \ 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12,\
  \ 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"
completions: ["    var digits = x.toString().split('');\n    if (shift > digits.length){\n\
    \        shift = digits.length - shift;\n    }\n    for (var i = digits.length\
    \ - 1; i >= shift; i--){\n        digits[i] = digits[i + 1];\n    }\n    return\
    \ digits.reverse().join('');\n}\n", "    var digits = x.toString().split('');\n\
    \    if (shift > digits.length)\n        return digits.reverse().join('');\n \
    \   else\n        return digits.slice(shift, digits.length).join('');\n}\n", " \
    \   var digits = String(x).split(\"\"),\n        digit,\n        res,\n      \
    \  i;\n    shift = shift % digits.length;\n    if (shift > digits.length){\n \
    \       shift = digits.length - shift;\n    }\n    res = \"\";\n    for (i = digits.length\
    \ - shift; i >= 0; i--){\n        digit = digits[i];\n        res = digit + res;\n\
    \    }\n    return res;\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if (shift > digits.length){\n        return digits.reverse().join('');\n\
    \    }\n    else {\n        return digits.slice(shift, digits.length).join('');\n\
    \    }\n}\n", "    var digits = String(x).split(\"\"),\n        circ = shift %\
    \ x.length,\n        revshift = shift - circ,\n        revcirc = revshift % x.length,\n\
    \        revdigits = String(x).split(\"\").reverse().join(\"\");\n    return revdigits.substr(0,\
    \ revcirc) + digits.substr(circ, digits.length) + revdigits.substr(revcirc + digits.length);\n\
    }\n", "    var digits = x.toString().split('');\n    if (shift > digits.length){\n\
    \        shift = digits.length - shift;\n    }\n    for (var i = digits.length\
    \ - 1; i >= shift; i--){\n        digits[i] = digits[i + 1];\n    }\n    return\
    \ digits.join('');\n}\n", "    var digits = String(Math.abs(x)).split('');\n \
    \   if (shift > digits.length){\n        return digits.reverse().join('');\n \
    \   }\n    else {\n        return digits.slice(shift, digits.length).reverse().join('');\n\
    \    }\n}\n", "    var digits = String(Math.abs(x)).split('');\n    if (shift\
    \ > digits.length){\n        shift = digits.length - shift;\n    }\n    for (var\
    \ i = digits.length - 1; i >= shift; i--){\n        digits[i] = digits[i + 1];\n\
    \    }\n    return digits.join('');\n}\n", "  if(shift > x.length) shift = x.length;\n\
    \  var result = \"\";\n  for(var i = x.length; i-- > shift; ) result += x.charAt(i);\n\
    \  return result;\n}\n", "    var digits = x.toString().split('');\n    if (shift\
    \ > digits.length){\n        return digits.reverse().join('');\n    }\n    return\
    \ digits.slice(shift, digits.length).join('');\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if (shift > digits.length){\n        shift = digits.length - shift;\n   \
    \ }\n    for (var i = digits.length - 1; i >= shift; i--){\n        digits[i]\
    \ = digits[i + 1];\n    }\n    return digits.join('');\n}\n", "    var digits\
    \ = String(x).split(\"\"),\n        shift = shift || 0,\n        i = digits.length\
    \ - shift;\n    return digits.reverse().join(\"\") + digits.splice(0, i + shift).join(\"\
    \");\n}\n", "  var digits = String(Math.abs(x)).split('');\n  if(shift > digits.length){\n\
    \    return digits.reverse().join('');\n  }\n  if(shift < -digits.length){\n \
    \   return digits.reverse().join('');\n  }\n  digits = digits.reverse();\n  while(shift\
    \ > 0){\n    digits = digits.slice(0,shift).reverse().concat(digits.slice(shift));\n\
    \    shift -= digits.length;\n  }\n  return digits.join('');\n}\n", "    var digits\
    \ = String(Math.abs(x)).split('');\n    if (shift > digits.length){\n        shift\
    \ = digits.length - shift;\n    }\n    for (var i = digits.length - 1; i >= shift;\
    \ i--){\n        digits[i] = digits[i + 1];\n    }\n    return digits.join('');\n\
    }\n", "    var digits = String(x).split(\"\"),\n        digits_length = digits.length,\n\
    \        shift = shift || 0,\n        i = digits_length - shift;\n    if (i <\
    \ 0) i = digits_length + i;\n    return digits.reverse().join(\"\").split(\"\"\
    ).reverse().join(\"\") + digits.join(\"\").split(\"\").reverse().join(\"\");\n\
    }\n", "    var digits = x.toString().split('');\n    if (shift > digits.length){\n\
    \        shift = digits.length - shift;\n    }\n    for (var i = digits.length\
    \ - shift; i >= 0; i--){\n        digits[i] = digits[i + shift];\n    }\n    return\
    \ digits.reverse().join('');\n}\n", "    var digits = x.toString().split('');\n\
    \    if (shift > digits.length){\n        shift = digits.length - shift;\n   \
    \ }\n    for (var i = digits.length - shift; i >= 0; i--){\n        digits[i]\
    \ = digits[i + shift];\n    }\n    return digits.reverse().join('');\n}\n", " \
    \   var digits = String(x).split(\"\"),\n        shift = shift || 0,\n       \
    \ i = digits.length - shift;\n    return digits.reverse().join(\"\") + digits.slice(0,\
    \ i).reverse().join(\"\");\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if (shift > digits.length){\n        shift = digits.length - shift;\n   \
    \ }\n    for (var i = digits.length; i-- > shift; ){\n        digits[i] = digits[i\
    \ + 1];\n    }\n    return digits.join('');\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if (shift > digits.length){\n        return digits.reverse().join('');\n\
    \    }\n    return digits.slice(shift, digits.length).reverse().join('');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
