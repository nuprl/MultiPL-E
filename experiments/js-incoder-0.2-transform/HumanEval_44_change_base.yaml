name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["\tvar digits = x.toString(base).split(\"\");\n\twhile(digits.length\
    \ < base){\n\t\tdigits = digits.concat(\"0\");\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len\
    \ = x_str.length;\n    if (x_len < base){\n        r = x_str;\n    }else{\n  \
    \      var x_div = x_len / base;\n        var x_mod = x_len % base;\n        var\
    \ i = 0;\n        while (i < x_div){\n            r = r + x_str.charAt(base *\
    \ i);\n            i++;\n        }\n        r = r + x_str.charAt(base * i);\n\
    \    }\n    return sign * r;\n}\n", "    var r = \"\";\n    var n = x;\n    while\
    \ (n >= base){\n        r = base_digits[n%base] + r;\n        n = Math.floor(n\
    \ / base);\n    }\n    return base_digits[n] + r;\n}\n", "\tvar digits = x.toString(base);\n\
    \tvar zeros = \"\";\n\twhile (digits.length < base){\n\t\tzeros += \"0\";\n\t\
    }\n\treturn zeros + digits;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    if (x > 0) {\n        sign = \"+\";\n        x = Math.abs(x);\n    } else\
    \ {\n        sign = \"-\";\n        x = -x;\n    }\n    while (x != 0) {\n   \
    \     r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x\
    \ = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\"\
    ;\n    while(x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 +\
    \ r + String(m%10);\n        m = Math.floor(m*sign);\n        sign = sign*-1;\n\
    \    }\n    return r + String(m);\n}\n", "    var r = \"\";\n    var sign = \"\
    \";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    if (x_len > base){\n   \
    \     throw RangeError(\"Base out of range: \" + base);\n    }\n    while (base){\n\
    \        var mod = x_len % base;\n        if (mod > 0){\n            r = x_str.substring(0,\
    \ mod) + r;\n        }\n        x_str = x_str.substring(mod);\n        x_len =\
    \ x_str.length;\n        base = base/10;\n    }\n    if (x_len > 0){\n       \
    \ r = x_str + r;\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var digits = \"\";\n    var basedigits = base;\n    var xdigits\
    \ = x;\n    var xdigits_length = xdigits.length;\n    var basedigits_length =\
    \ basedigits.length;\n    var i;\n    var j;\n    \n    if(xdigits_length < basedigits_length){\n\
    \        for(i = xdigits_length; i < basedigits_length; i++){\n            digits\
    \ = digits + \"0\";\n        }\n        digits = digits + basedigits;\n    }\n\
    \    else{\n        for(i = xdigits_length; i > basedigits_length ; i--){\n  \
    \          digits = digits + \"0\";\n        }\n        digits = digits + basedigits;\n\
    \    }\n    \n    for(i = 0; i < digits.length; i++){\n        j = parseInt(digits[i]);\n\
    \        if(i == basedigits_length){\n            r += j;\n        }\n       \
    \ else{\n            r += j.toString(basedigits);\n        }\n    }\n    \n  \
    \  if(sign == \"-\"){\n        r = r.replace(\"-\", \"\");\n    }\n    \n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[(x\
    \ % base)];\n        x = Math.floor(x / base);\n    }\n    r = base_digits[(x\
    \ % base)];\n    while(x < base){\n        r = base_digits[(x % base)] + (r *\
    \ base);\n        x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n",
  "\tvar res = \"\";\n\twhile(x >= base){\n\t\tres = base_digits[base] + res;\n\t\t\
    x -= base;\n\t}\n\treturn res + base_digits[base];\n}\n", "    var r = \"\";\n\
    \    var negative = false;\n    if(x < 0){\n        negative = true;\n       \
    \ x = -x;\n    }\n    while(x >= base){\n        r = base_digits[base] + r;\n\
    \        x -= base;\n    }\n    if(x < base){\n        r = base_digits[base] +\
    \ r;\n    }\n    if(negative){\n        r = \"-\" + r;\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r; \n        m = Math.floor(m/10);\n\
    \    }\n    r = m + r;\n    if(x < 0){\n        sign = \"-\";\n        x = Math.abs(x);\n\
    \    }\n    while(x >= base){\n        r = Math.floor(x/base) + r; \n        x\
    \ = x % base;\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x == 0){\n\
    \        r = \"0\";\n    }\n    else if(x == -1){\n        r = \"-1\";\n     \
    \   sign = -1;\n    }\n    else if(x == 1){\n        r = \"1\";\n    }\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
