name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["\tvar digits = x.toString(base).split(\"\");\n\twhile(digits.length\
    \ < base){\n\t\tdigits = digits.concat(\"0\");\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len\
    \ = x_str.length;\n    if (x_len < base){\n        r = x_str;\n    }else{\n  \
    \      var x_div = x_len / base;\n        var x_mod = x_len % base;\n        var\
    \ i = 0;\n        while (i < x_div){\n            r = r + x_str.charAt(base *\
    \ i);\n            i++;\n        }\n        r = r + x_str.charAt(base * i);\n\
    \    }\n    return sign * r;\n}\n", "    var r = \"\";\n    var n = x;\n    while\
    \ (n >= base){\n        r = base_digits[n%base] + r;\n        n = Math.floor(n\
    \ / base);\n    }\n    return base_digits[n] + r;\n}\n", "\tvar digits = x.toString(base);\n\
    \tvar zeros = \"\";\n\twhile (digits.length < base){\n\t\tzeros += \"0\";\n\t\
    }\n\treturn zeros + digits;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    if (x > 0) {\n        sign = \"+\";\n        x = Math.abs(x);\n    } else\
    \ {\n        sign = \"-\";\n        x = -x;\n    }\n    while (x != 0) {\n   \
    \     r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x\
    \ = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\"\
    ;\n    while(x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 +\
    \ r + String(m%10);\n        m = Math.floor(m*sign);\n        sign = sign*-1;\n\
    \    }\n    return r + String(m);\n}\n", "    var r = \"\";\n    var sign = \"\
    \";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    if (x_len > base){\n   \
    \     throw RangeError(\"Base out of range: \" + base);\n    }\n    while (base){\n\
    \        var mod = x_len % base;\n        if (mod > 0){\n            r = x_str.substring(0,\
    \ mod) + r;\n        }\n        x_str = x_str.substring(mod);\n        x_len =\
    \ x_str.length;\n        base = base/10;\n    }\n    if (x_len > 0){\n       \
    \ r = x_str + r;\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var digits = \"\";\n    var basedigits = base;\n    var xdigits\
    \ = x;\n    var xdigits_length = xdigits.length;\n    var basedigits_length =\
    \ basedigits.length;\n    var i;\n    var j;\n    \n    if(xdigits_length < basedigits_length){\n\
    \        for(i = xdigits_length; i < basedigits_length; i++){\n            digits\
    \ = digits + \"0\";\n        }\n        digits = digits + basedigits;\n    }\n\
    \    else{\n        for(i = xdigits_length; i > basedigits_length ; i--){\n  \
    \          digits = digits + \"0\";\n        }\n        digits = digits + basedigits;\n\
    \    }\n    \n    for(i = 0; i < digits.length; i++){\n        j = parseInt(digits[i]);\n\
    \        if(i == basedigits_length){\n            r += j;\n        }\n       \
    \ else{\n            r += j.toString(basedigits);\n        }\n    }\n    \n  \
    \  if(sign == \"-\"){\n        r = r.replace(\"-\", \"\");\n    }\n    \n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[(x\
    \ % base)];\n        x = Math.floor(x / base);\n    }\n    r = base_digits[(x\
    \ % base)];\n    while(x < base){\n        r = base_digits[(x % base)] + (r *\
    \ base);\n        x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n",
  "\tvar res = \"\";\n\twhile(x >= base){\n\t\tres = base_digits[base] + res;\n\t\t\
    x -= base;\n\t}\n\treturn res + base_digits[base];\n}\n", "    var r = \"\";\n\
    \    var negative = false;\n    if(x < 0){\n        negative = true;\n       \
    \ x = -x;\n    }\n    while(x >= base){\n        r = base_digits[base] + r;\n\
    \        x -= base;\n    }\n    if(x < base){\n        r = base_digits[base] +\
    \ r;\n    }\n    if(negative){\n        r = \"-\" + r;\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r; \n        m = Math.floor(m/10);\n\
    \    }\n    r = m + r;\n    if(x < 0){\n        sign = \"-\";\n        x = Math.abs(x);\n\
    \    }\n    while(x >= base){\n        r = Math.floor(x/base) + r; \n        x\
    \ = x % base;\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x == 0){\n\
    \        r = \"0\";\n    }\n    else if(x == -1){\n        r = \"-1\";\n     \
    \   sign = -1;\n    }\n    else if(x == 1){\n        r = \"1\";\n    }\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    if (base < 2 || base > 36){\n        throw \"Invalid base\"\
    ;\n    }\n    while (x >= base){\n        r = base_digits[base] + r;\n       \
    \ x = x % base;\n        base = base * 10;\n    }\n    r = base_digits[base] +\
    \ r;\n    x = x + sign;\n    return r;\n}\n", "\tvar baseNum = base;\n\tvar baseStr\
    \ = \"\";\n\twhile(baseNum > 0){\n\t\tbaseStr += (baseNum % 10) + \"\";\n\t\t\
    baseNum = Math.floor(baseNum / 10);\n\t}\n\treturn baseStr;\n}\n", "\tvar r =\
    \ \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    if (base < 2 || base > 36){\n\
    \        console.log(\"Invalid base\");\n        return \"\";\n    }\n    if (base\
    \ == 10){\n        console.log(\"Base 10\");\n        while(x>0){\n          \
    \  r = r + String.fromCharCode(x % base);\n            x = Math.floor(x / base);\n\
    \        }\n        return r;\n    }\n    while(x>0){\n        r = r + String.fromCharCode(x\
    \ % base);\n        x = Math.floor(x / base);\n    }\n    var l = r.length;\n\
    \    while (l < base){\n        r = r + \"0\";\n        l++;\n    }\n    return\
    \ sign * r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n  \
    \      sign = -1;\n        x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "\t\
    var r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\tvar\
    \ bases_reversed = bases.reverse();\n\tvar base_reversed = base_reversed[base];\n\
    \tvar base_str = base_reversed.toString();\n\tvar base_num = bases.indexOf(base_str);\n\
    \tvar base_num_str = bases_reversed[base_num];\n\tvar base_num_num_str = bases_reversed[base_num+1];\n\
    \tvar base_num_num_num_str = bases_reversed[base_num+2];\n\tvar base_num_num_num_num_str\
    \ = bases_reversed[base_num+3];\n\tvar base_num_num_num_num_num_str = bases_reversed[base_num+4];\n\
    \tvar base_num_num_num_num_num_num_str = bases_reversed[base_num+5];\n\tvar base_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+6];\n\tvar base_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+7];\n\tvar base_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+8];\n\tvar base_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+9];\n\tvar base_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+10];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+11];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+12];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+13];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+14];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+15];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+16];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+17];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+18];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_str\
    \ = bases_reversed[base_num+19];\n\tvar base_num_num_num_num_num_num_num_num_num_num_num_",
  "\tvar y = \"\";\n\twhile(x != 0){\n\t\tvar m = x % base;\n\t\ty = base * y + m;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn y;\n}\n", "    var r = \"\";\n  \
    \  var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n\
    \    var x_str = x.toString();\n    var x_len = x_str.length;\n    if (x_len <\
    \ base){\n        r = x_str;\n    }\n    else{\n        var x_div_base = x_len\
    \ / base;\n        var x_mod = x_len % base;\n        var x_div_base_str = x_div_base.toString();\n\
    \        var x_div_base_len = x_div_base_str.length;\n        if (x_div_base_len\
    \ > 0){\n            r = x_div_base_str.substring(0, x_div_base_len - 1) + \"\
    .\" + x_str.substring(x_len - x_mod);\n        }\n        else{\n            r\
    \ = x_str.substring(x_len - x_mod);\n        }\n    }\n    return sign * r;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    if (x < base){\n        r = base.toString(base);\n\
    \    }\n    else{\n        var m = Math.pow(base,x);\n        r = m.toString(base);\n\
    \    }\n    var l = r.length;\n    var zeros = \"\";\n    while (l > 0){\n   \
    \     zeros += \"0\";\n        l--;\n    }\n    r = zeros + r;\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    var n = x;\n    while(n>0){\n        r = n%base + r;\n        n = Math.floor(n/base);\n\
    \    }\n    if(sign == \"-\"){\n        r = r * -1;\n    }\n    return r;\n}\n",
  "\tvar r = \"\";\n\twhile(x > 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n \
    \   var x_len = x_str.length;\n    for(var i = 0; i < x_len; i++){\n        var\
    \ c = x_str.charAt(i);\n        var digit = parseInt(c);\n        if(digit < base){\n\
    \            r += digit;\n        }else{\n            var rem = digit % base;\n\
    \            r += base+rem;\n        }\n    }\n    return sign*r;\n}\n", "   \
    \ var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n     \
    \   x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\t\
    var s = x.toString();\n\tfor(var i = s.length - 1; i >= 0; i--){\n\t\tvar c =\
    \ s.charAt(i);\n\t\tif(c >= \"0\" && c <= \"9\"){\n\t\t\tr += c;\n\t\t}else{\n\
    \t\t\tr += c + base.charAt(i-1);\n\t\t}\n\t}\n\treturn r;\n}\n", "    var r =\
    \ \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    if (x_len\
    \ < base){\n        r = x_str;\n    }else{\n        var x_div = x_len / base;\n\
    \        var x_mod = x_len % base;\n        var i = 0;\n        while (i < x_div){\n\
    \            r = r + x_str.charAt(base * i);\n            i++;\n        }\n  \
    \      r = r + x_str.charAt(base * i);\n        r = r + x_str.charAt(x_mod);\n\
    \    }\n    return sign * r;\n}\n", "    var r = \"\";\n    var sign = 1;\n  \
    \  if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    if (base < 2 ||\
    \ base > 36){\n        console.log(\"Invalid base\");\n        return \"\";\n\
    \    }\n    if (base == 2){\n        r = x.toString(2);\n    }\n    else if (base\
    \ == 8){\n        r = x.toString(8);\n    }\n    else if (base == 10){\n     \
    \   r = x.toString(10);\n    }\n    else if (base == 16){\n        r = x.toString(16);\n\
    \    }\n    else if (base == 32){\n        r = x.toString(32);\n    }\n    else\
    \ if (base == 64){\n        r = x.toString(64);\n    }\n    else if (base == 128){\n\
    \        r = x.toString(128);\n    }\n    else if (base == 256){\n        r =\
    \ x.toString(256);\n    }\n    else if (base == 512){\n        r = x.toString(512);\n\
    \    }\n    else if (base == 1024){\n        r = x.toString(1024);\n    }\n  \
    \  else if (base == 2048){\n        r = x.toString(2048);\n    }\n    else if\
    \ (base == 4096){\n        r = x.toString(4096);\n    }\n    else if (base ==\
    \ 8192){\n        r = x.toString(8192);\n    }\n    else if (base == 16384){\n\
    \        r = x.toString(16384);\n    }\n    else if (base == 32768){\n       \
    \ r = x.toString(32768);\n    }\n    else if (base == 65536){\n        r = x.toString(65536);\n\
    \    }\n    else if (base == 131072){\n        r = x.toString(131072);\n    }\n\
    \    else if (base == 262144){\n        r = x.toString(262144);\n    }\n    else\
    \ if (base == 524288){\n        r = x.toString(524288);\n    }\n    else if (base\
    \ == 1048575){\n        r = x.toString(1048575);\n    }\n    else if (base ==\
    \ 2097152){\n        r = x.toString(2097152);\n    }\n    else if (base == 4194304){\n\
    \        r = x.toString(4194304);\n    }\n    else if (base == 8388608){\n   \
    \     r = x.toString(8388608);\n    }\n    else if (base == 16777216){\n     \
    \   r = x.toString(16777216);\n    }\n    else if (base == 33554432){\n      \
    \  r = x.toString(33554432);\n    }\n    else if (base == 67108864){\n       \
    \ r = x.toString(67108864);\n    }\n    else if (base == 134217728){\n       \
    \ r = x.toString(134217728);\n    }\n    else if (base == 268435456){\n      \
    \  r = x.toString(268435456);\n    }\n    else if (base == 536870912){\n     \
    \   r = x.toString(536870912);\n", "    var r = \"\";\n    var s = \"\";\n   \
    \ while(x>0){\n        s = base_digits[x%base];\n        x = Math.floor(x/base);\n\
    \        r += s;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x/base]\
    \ + r;\n\t\tx = x % base;\n\t}\n\treturn r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\
    \tvar base;\n\t\n\twhile(bases.indexOf(base) < 0){\n\t\tbase++;\n\t}\n\t\n\tbase\
    \ = bases.indexOf(base);\n\t\n\tvar res = \"\";\n\t\n\twhile(x >= base){\n\t\t\
    res += bases[base];\n\t\tx -= base;\n\t\tbase--;\n\t}\n\t\n\twhile(x < base){\n\
    \t\tres += bases[base];\n\t\tx++;\n\t\tbase++;\n\t}\n\t\n\treturn res;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Invalid base\");\n        return \"\";\n    }\n    if (base == 10){\n        while\
    \ (x != 0){\n            r = base_ten[x%base] + r;\n            x = Math.floor(x/base);\n\
    \        }\n    }\n    else{\n        while (x != 0){\n            r = base_ten[x%base]\
    \ + r;\n            x = Math.floor(x/base);\n        }\n    }\n    if (sign ==\
    \ -1){\n        r = r + base_ten[0];\n    }\n    return r;\n}\n", "    var r =\
    \ \"\";\n    var sign = 1;\n    if(x<0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    var\
    \ base = base_table[base];\n    for(var i = 0; i < x_len; i++){\n        var c\
    \ = x_str.charAt(i);\n        var digit = base_table[c];\n        r += digit*sign;\n\
    \        sign *= base;\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\t\n\twhile(x\
    \ != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\t\n\treturn r;\n}\n", "    var r = \"\";\n    var n = x;\n    while (n > 0){\n\
    \        r = base_digits[n%base] + r;\n        n = Math.floor(n/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    if (base > Math.pow(10, base)){\n\
    \        console.log(\"Base too big!\");\n        return \"\";\n    }\n    while\
    \ (x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    while(x>0){\n      \
    \  r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return r;\n}\n", "\tvar r = \"\";\n\tvar negative = false;\n\tif (x < 0){\n\
    \t\tnegative = true;\n\t\tx = -x;\n\t}\n\twhile (x != 0){\n\t\tvar m = x % base;\n\
    \t\tx = parseInt(x / base);\n\t\tr += m;\n\t}\n\tif (negative) r = \"-\" + r;\n\
    \treturn r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var s = \"\";\n    var m = Math.pow(base,x);\n    while(m > 0){\n\
    \        r = m%base;\n        s = base+r;\n        m = Math.floor(m/base);\n \
    \   }\n    return s;\n}\n", "\tvar res = \"\";\n\twhile(x > 0){\n\t\tvar digit\
    \ = x % base;\n\t\tres = digit+res;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ res;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m > 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n\
    \    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n    }\n    return r + sign*x;\n\
    }\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    while(m >= 10){\n\
    \        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n    }\n\
    \    r = m%10 + r + String(m%10);\n    sign = x < 0 ? \"-\" : \"\";\n    return\
    \ sign + r;\n}\n", "\tvar baseNum = base;\n\tvar baseStr = \"\";\n\tvar baseStrLen\
    \ = 0;\n\t\n\twhile(baseNum > 0){\n\t\tbaseStr += (baseNum % 10) + \"\";\n\t\t\
    baseNum = Math.floor(baseNum / 10);\n\t\tbaseStrLen += 1;\n\t}\n\t\n\tbaseStr\
    \ = baseStr.substring(0, baseStrLen);\n\t\n\twhile(baseStr.length < base){\n\t\
    \tbaseStr = \"0\" + baseStr;\n\t}\n\t\n\treturn baseStr;\n}\n", "\tvar r = \"\"\
    ;\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    while (x != 0){\n        r =\
    \ base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n    return\
    \ sign*r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    if(x < 0){\n\
    \        sign = \"-\";\n        x = Math.abs(x);\n    }\n    while(x > 0){\n \
    \       r = m%base+r;\n        x = Math.floor(x/base);\n        m = Math.floor(m/base);\n\
    \    }\n    if(sign){\n        r = sign+r;\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    if (base < 2 || base > 36){\n        throw \"Invalid base\"\
    ;\n    }\n    if (base == 10){\n        x /= base;\n    }\n    while (x != 0){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n  \
    \  var digits = \"\";\n    var basedigits = \"\";\n    var base2 = base;\n   \
    \ var base10 = \"\";\n    var i;\n    var j;\n    var k;\n    var l;\n    var\
    \ m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var s;\n\
    \    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n    var\
    \ z;\n    var A;\n    var B;\n    var C;\n    var D;\n    var E;\n    var F;\n\
    \    var G;\n    var H;\n    var I;\n    var J;\n    var K;\n    var L;\n    var\
    \ M;\n    var N;\n    var O;\n    var P;\n    var Q;\n    var R;\n    var S;\n\
    \    var T;\n    var U;\n    var V;\n    var W;\n    var X;\n    var Y;\n    var\
    \ Z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var f;\n\
    \    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n    var\
    \ m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var s;\n\
    \    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n    var\
    \ z;\n    var A;\n    var B;\n    var C;\n    var D;\n    var E;\n    var F;\n\
    \    var G;\n    var H;\n    var I;\n    var J;\n    var K;\n    var L;\n    var\
    \ M;\n    var N;\n    var O;\n    var P;\n    var Q;\n    var R;\n    var S;\n\
    \    var T;\n    var U;\n    var V;\n    var W;\n    var X;\n    var Y;\n    var\
    \ Z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var f;\n\
    \    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n    var\
    \ m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var s;\n\
    \    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n    var\
    \ z;\n    var A;\n    var B;\n    var C;\n    var D;\n    var E;\n    var F;\n\
    \    var G;\n    var H;\n    var I;\n    var J;\n    var K;\n    var L;\n    var\
    \ M;\n    var N", "\tvar digits = x.toString().split(\"\").reverse();\n\tdigits\
    \ = digits.map(function(d){\n\t\treturn parseInt(d, base);\n\t});\n\tdigits.reverse();\n\
    \treturn digits.join(\"\");\n}\n", "\tvar r = \"\";\n\tvar i;\n\tfor(i = base;\
    \ i >= 2; i--){\n\t\tr = base_convert(x, i, base) + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "\tvar res = \"\";\n\twhile(x > 0){\n\t\tres = base_digits[x\
    \ % base] + res;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn reverseString(res);\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    if (x > 0) {\n        sign\
    \ = \"+\";\n        x = Math.abs(x);\n    } else if (x < 0) {\n        sign =\
    \ \"-\";\n        x = Math.abs(x);\n    }\n    while (x != 0) {\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign + r;\n}\n", " \
    \   var r = \"\";\n    var sign = 1;\n    if(x<0){\n        sign = -1;\n     \
    \   x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return sign*r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    if (x_len < base){\n        r = x_str;\n    }else{\n        var x_div = x_len\
    \ / base;\n        var x_mod = x_len % base;\n        var i = 0;\n        while\
    \ (i < x_div){\n            r = r + x_str.charAt(base * i);\n            i++;\n\
    \        }\n        r = r + x_str.charAt(base * i);\n    }\n    return sign *\
    \ r;\n}\n", "\tvar y = \"\";\n\twhile(x != 0){\n\t\ty = base_digits[x % base]\
    \ + y;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn y;\n}\n", "    var r = \"\
    \";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m > 0){\n   \
    \     r = m%base + r;\n        m = Math.floor(m/base);\n    }\n    if(x < 0){\n\
    \        r = Math.abs(r) + 1;\n    }\n    return sign*r;\n}\n", "    var r = \"\
    \";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n \
    \       r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n    }\n \
    \   r = m%10 + r + String(m%10);\n    return sign*(r+\"\");\n}\n", "    var r\
    \ = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n\
    \        r = m%10 + r + String(m%10);\n        m = Math.floor(m*sign);\n     \
    \   sign = -1;\n    }\n    return m + r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\tvar base;\n\tfor(var\
    \ i = 0; i < bases.length; i++){\n\t\tbase = bases[i];\n\t\tif(base <= x && x\
    \ <= base * base){\n\t\t\treturn base;\n\t\t}\n\t}\n}\n", "    var r = \"\";\n\
    \    var negative = false;\n    if (x < 0){\n        negative = true;\n      \
    \  x = -x;\n    }\n    while (x > 0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    if (negative){\n        r = \"-\"\
    \ + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x >= base){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return base_digits[x] + r;\n}\n", "\tvar r = \"\";\n\t\n\twhile(x > 0){\n\
    \t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t}\n\t\n\treturn\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "  \
    \  var r = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar r = \"\"\
    ;\n\tvar sign = x < 0 ? \"-\" : \"\";\n\tfor(var i = base; i >= 0; i--){\n\t\t\
    var v = Math.abs(x%i);\n\t\tr = v.toString() + r;\n\t\tx = Math.floor(x/i);\n\t\
    }\n\treturn sign + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m\
    \ = Math.pow(base,x);\n    while(m > 0){\n        r = m%base + r;\n        m =\
    \ Math.floor(m/base);\n    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n \
    \   }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if\
    \ (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    if (x_len > base){\n        throw RangeError(\"\
    Base out of range: \" + base);\n    }\n    while (base){\n        var mod = x_len\
    \ % base;\n        if (mod >= base){\n            mod = mod - base;\n        }\n\
    \        base = base;\n        r = x_str.substr(0, mod) + r + x_str.substr(mod\
    \ + 1);\n    }\n    return sign * r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n\
    \    for(var i = 0; i < s.length; i++){\n        var c = s.charAt(i);\n      \
    \  if(c >= \"0\" && c <= \"9\"){\n            if(c == \".\"){\n              \
    \  r += \".\";\n            }else{\n                var n = parseInt(c+s.charAt(i+1));\n\
    \                if(n == 0){\n                    r += \"0\";\n              \
    \  }else{\n                    r += n%base;\n                    r += c>=\"a\"\
    ?\"A\":\"a\";\n                }\n            }\n        }else{\n            r\
    \ += c;\n        }\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x !=\
    \ 0){\n\t\tr = base_table[base][x % base] + r;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    if (x < base){\n        r = x;\n\
    \    }\n    else{\n        var q = Math.floor(x / base);\n        r = x % base;\n\
    \        x = q;\n    }\n    while (x != 0){\n        r = base_digits[r] + base_digits[x\
    \ % base];\n        x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n",
  "\tvar digits = x.toString(base);\n\tvar l = digits.length;\n\tvar new_base = Math.pow(base,l);\n\
    \tvar rem = new_base%x;\n\tif(x<0){\n\t\tdigits = digits.substring(1);\n\t\trem\
    \ = rem.substring(1);\n\t}\n\twhile(digits.length<l){\n\t\tdigits = \"0\" + digits;\n\
    \t}\n\twhile(digits.length>l){\n\t\tdigits = digits.substring(1);\n\t}\n\treturn\
    \ rem + digits;\n}\n", "    var r = \"\";\n    var s = x.toString();\n    var\
    \ l = s.length;\n    var sign = 1;\n    if (s[0] === \"-\") {\n        sign =\
    \ -1;\n        s = s.substr(1);\n    }\n    var baseNum = parseInt(base);\n  \
    \  var baseLen = baseNum.toString().length;\n    var digits = l - s.length;\n\
    \    var num = \"\";\n    var i = 0;\n    while (i < digits) {\n        var c\
    \ = s.charAt(i);\n        var n = parseInt(c);\n        var digit = baseNum *\
    \ Math.pow(baseLen, i);\n        i += 1;\n        if (n >= baseNum) {\n      \
    \      num += digit.toString();\n        } else {\n            num += digit.toString()\
    \ + n.toString();\n        }\n    }\n    return sign * num;\n}\n", "    var r\
    \ = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n      \
    \  x = Math.floor(x / base);\n    }\n    return r;\n}\n", "    var r = \"\";\n\
    \    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n     \
    \   r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n    }\n    r\
    \ = m + r;\n    if(x < 0){\n        r = r + sign;\n    }\n    return r;\n}\n",
  "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n    var\
    \ m = Math.abs(x);\n    var base = Math.abs(base);\n    while(m >= base){\n  \
    \      r = m + r;\n        m /= base;\n        sign *= -1;\n    }\n    while(m\
    \ > 0){\n        s = m%base + s;\n        m /= base;\n    }\n    if(sign == -1){\n\
    \        r = r * -1;\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x\
    \ != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t}\n\
    \treturn r;\n}\n", "    var r = \"\";\n    var digits = \"\";\n    while(x >=\
    \ base){\n        digits = digits+x;\n        x = x/base;\n    }\n    while(x\
    \ != 0){\n        r = r+digits[x/base];\n        x = x%base;\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar digits\
    \ = x.toString(base);\n\twhile(digits.length < base){\n\t\tdigits = \"0\" + digits;\n\
    \t}\n\treturn digits;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n\
    \        r = base_digits[base] + r; \n        x = x % base;\n    }\n    r = base_digits[base]\
    \ + r; \n    return sign*r;\n}\n", "\tvar res = \"\";\n\twhile(x >= base){\n\t\
    \tres += String.fromCharCode(x % base);\n\t\tx = Math.floor(x / base);\n\t}\n\t\
    return res + String.fromCharCode(x);\n}\n", "    var r = \"\";\n    var sign =\
    \ 1;\n    var m = 1;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ temp = 0;\n    var baseMinusT;\n    var baseMinusT_k;\n    \n    while(i < x.length){\n\
    \        j = i;\n        while(j < x.length){\n            k = j;\n          \
    \  while(k >= 0){\n                temp = (x[i] * baseMinusT_k + x[k] * baseMinusT)\
    \ % base;\n                r += temp.toString(base);\n                k--;\n \
    \           }\n            j--;\n        }\n        i++;\n    }\n    \n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    for(var\
    \ i = base; i >= 0; i--){\n        var digit = x % i;\n        x /= i;\n     \
    \   r += digit+(i==base ? \"\" : sign);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base] + r;\n   \
    \     x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "    var r = \"\
    \";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    while (x >= base){\n        r = base_digits[(x % base)];\n       \
    \ x = Math.floor(x / base);\n    }\n    r = base_digits[(x % base)];\n    return\
    \ sign*r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n    \
    \    sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x -= base;\n    }\n    return sign * r;\n}\n", "    var r = \"\
    \";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    while (x != 0){\n        r = base_digits[x % base] + r;\n        x\
    \ = Math.floor(x / base);\n    }\n    return sign * r;\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    var digits = \"\";\n    var basedigits = base;\n\
    \    var m = 1;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var t = 0;\n\
    \    var z = 0;\n    var signbit = false;\n    var digit = 0;\n    var basedigit\
    \ = 0;\n    var digitstring = \"\";\n    var digitcount = 0;\n    var xdigits\
    \ = 0;\n    var xdigit = 0;\n    var xchar = 0;\n    var xbase = 0;\n    var xchar2\
    \ = 0;\n    var xbase2 = 0;\n    var xbase3 = 0;\n    var xbase4 = 0;\n    var\
    \ xbase5 = 0;\n    var xbase6 = 0;\n    var xbase7 = 0;\n    var xbase8 = 0;\n\
    \    var xbase9 = 0;\n    var xbase10 = 0;\n    var xbase11 = 0;\n    var xbase12\
    \ = 0;\n    var xbase13 = 0;\n    var xbase14 = 0;\n    var xbase15 = 0;\n   \
    \ var xbase16 = 0;\n    var xbase17 = 0;\n    var xbase18 = 0;\n    var xbase19\
    \ = 0;\n    var xbase20 = 0;\n    var xbase21 = 0;\n    var xbase22 = 0;\n   \
    \ var xbase23 = 0;\n    var xbase24 = 0;\n    var xbase25 = 0;\n    var xbase26\
    \ = 0;\n    var xbase27 = 0;\n    var xbase28 = 0;\n    var xbase29 = 0;\n   \
    \ var xbase30 = 0;\n    var xbase31 = 0;\n    var xbase32 = 0;\n    var xbase33\
    \ = 0;\n    var xbase34 = 0;\n    var xbase35 = 0;\n    var xbase36 = 0;\n   \
    \ var xbase37 = 0;\n    var xbase38 = 0;\n    var xbase39 = 0;\n    var xbase40\
    \ = 0;\n    var xbase41 = 0;\n    var xbase42 = 0;\n    var xbase43 = 0;\n   \
    \ var xbase44 = 0;\n    var xbase45 = 0;\n    var xbase46 = 0;\n    var xbase47\
    \ = 0;\n    var xbase48 = 0;\n    var xbase49 = 0;\n    var xbase50 = 0;\n   \
    \ var xbase51 = 0;\n    var xbase52 = 0;\n    var xbase53 = 0;\n    var xbase54\
    \ = 0;\n    var xbase55 = 0;\n    var xbase56 = 0;\n    var xbase57 = 0;\n   \
    \ var xbase58 = 0;\n    var xbase59 = 0;\n    var xbase60 = 0;\n    var xbase61\
    \ = 0;\n    var xbase62 = 0;\n    var xbase63 = 0;\n    var xbase64 = 0;\n   \
    \ var xbase65 = 0;\n    var xbase66 = 0;\n    var xbase67 = 0;\n    var xbase68\
    \ = 0;\n    var xbase69 = 0;\n    var xbase70 = 0;\n    var xbase71 = 0;\n   \
    \ var xbase72 = 0;", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x>0){\n        r = base_digits[x/base] + r;\n        x\
    \ = x % base;\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\
    \tvar bases_index = 0;\n\tvar base_str = \"\";\n\twhile(bases_index < bases.length){\n\
    \t\tif(bases[bases_index] == base){\n\t\t\tbase_str += x;\n\t\t\tbreak;\n\t\t\
    }\n\t\tbases_index++;\n\t}\n\treturn base_str;\n}\n", "    var r = \"\";\n   \
    \ var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n\
    \    var x_str = x.toString();\n    var x_len = x_str.length;\n    var base =\
    \ base_table[base];\n    var max_len = base.length;\n    var i;\n    for (i =\
    \ 0; i < x_len; ++i){\n        var c = x_str.charAt(i);\n        var digit = base_table[c];\n\
    \        if (digit > max_len)\n            digit = max_len;\n        r = r + digit;\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if\
    \ (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    while(x != 0){\n \
    \       r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return sign*r;\n}\n", "\tvar r = \"\";\n\tvar bases = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"];\n\tvar bases_count = bases.length;\n\tvar bases_count_minus_1\
    \ = bases_count - 1;\n\tvar bases_count_minus_2 = bases_count - 2;\n\tvar bases_count_minus_3\
    \ = bases_count - 3;\n\tvar bases_count_minus_4 = bases_count - 4;\n\tvar bases_count_minus_5\
    \ = bases_count - 5;\n\tvar bases_count_minus_6 = bases_count - 6;\n\tvar bases_count_minus_7\
    \ = bases_count - 7;\n\tvar bases_count_minus_8 = bases_count - 8;\n\tvar bases_count_minus_9\
    \ = bases_count - 9;\n\tvar bases_count_minus_10 = bases_count - 10;\n\tvar bases_count_minus_11\
    \ = bases_count - 11;\n\tvar bases_count_minus_12 = bases_count - 12;\n\tvar bases_count_minus_13\
    \ = bases_count - 13;\n\tvar bases_count_minus_14 = bases_count - 14;\n\tvar bases_count_minus_15\
    \ = bases_count - 15;\n\tvar bases_count_minus_16 = bases_count - 16;\n\tvar bases_count_minus_17\
    \ = bases_count - 17;\n\tvar bases_count_minus_18 = bases_count - 18;\n\tvar bases_count_minus_19\
    \ = bases_count - 19;\n\tvar bases_count_minus_20 = bases_count - 20;\n\tvar bases_count_minus_21\
    \ = bases_count - 21;\n\tvar bases_count_minus_22 = bases_count - 22;\n\tvar bases_count_minus_23\
    \ = bases_count - 23;\n\tvar bases_count_minus_24 = bases_count - 24;\n\tvar bases_count_minus_25\
    \ = bases_count - 25;\n\tvar bases_count_minus_26 = bases_count - 26;\n\tvar bases_count_minus_27\
    \ = bases_count - 27;\n\tvar bases_count_minus_28 = bases_count - 28;\n\tvar bases_count_minus_29\
    \ = bases_count - 29;\n\tvar bases_count_minus_30 = bases_count - 30;\n\tvar bases_count_minus_31\
    \ = bases_count - 31;\n\tvar bases_count_minus_32 = bases_count - 32;\n\tvar bases_count_minus_33\
    \ = bases_count - 33;\n\tvar bases_count_min", "    var r = \"\";\n    while(x\
    \ > 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar bases = [2,7,10,16];\n\
    \tvar base;\n\t\n\twhile(bases.indexOf(base) < 0){\n\t\tbase++;\n\t}\n\t\n\tbase\
    \ = bases.indexOf(base);\n\t\n\treturn bases.map(function(b){\n\t\treturn Math.pow(base,b);\n\
    \t}).reduce(function(x,y){\n\t\treturn x*y;\n\t}, x);\n}\n", "    var r = \"\"\
    ;\n    var sign = x < 0 ? \"-\" : \"\";\n    for(var i = base; i >= 0; i--){\n\
    \        var digit = x % i;\n        x += digit;\n        r += digit;\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return sign*r;\n}\n", "\tvar digits = x.toString().split('');\n\tdigits\
    \ = digits.map(function(digit){\n\t\treturn parseInt(digit, base);\n\t});\n\t\
    return digits.reverse().join('');\n}\n", "    var r = \"\";\n    var sign = \"\
    \";\n    if(x<0){\n        sign = \"-\";\n        x = -x;\n    }\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if (x < 0){\n      \
    \  sign = \"-\";\n        x = -x;\n    }\n    if (base < 2 || base > 36){\n  \
    \      console.log(\"Invalid base\");\n        return \"\";\n    }\n    if (base\
    \ == 10){\n        r = x.toString();\n    }\n    else{\n        var m = Math.pow(base,x);\n\
    \        r = m.toString();\n    }\n    return sign + r;\n}\n", "\tvar baseNum\
    \ = base;\n\tvar baseStr = \"\";\n\twhile(baseNum > 0){\n\t\tbaseNum = baseNum/base;\n\
    \t\tbaseStr = baseNum.toString(base);\n\t}\n\treturn baseStr;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    while (x >= base){\n        r = base_digits[base] + r;\n \
    \       x -= base;\n    }\n    return sign * r;\n}\n", "\tvar digits = x.toString().split('');\n\
    \tdigits = digits.map(function(digit){\n\t\treturn parseInt(digit, base);\n\t\
    });\n\tdigits.reverse();\n\treturn digits.join('');\n}\n", "\tvar r = \"\";\n\t\
    while(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t\
    }\n\treturn r;\n}\n", "\tvar y = \"\";\n\twhile(x > 0){\n\t\ty = base_digits[x\
    \ % base] + y;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn y;\n}\n", "    var\
    \ r = \"\";\n    while(x != 0){\n        r = base_digits[x%base] + r;\n      \
    \  x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\
    \t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n\
    }\n", "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n\
    \    var m = Math.abs(x);\n    var b = Math.abs(base);\n    var y = Math.pow(10,\
    \ b);\n    while(m >= y){\n        m /= y;\n        s += '0';\n    }\n    while(m\
    \ > 1){\n        m /= 10;\n        s += '0';\n    }\n    while(s < b){\n     \
    \   s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s\
    \ < b){\n        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n\
    \    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n        s +=\
    \ '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n\
    \        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s\
    \ < b){\n        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n\
    \    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n        s +=\
    \ '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n\
    \        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s\
    \ < b){\n        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n\
    \    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n        s +=\
    \ '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n\
    \        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s\
    \ < b){\n        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n\
    \    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n        s +=\
    \ '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s < b){\n\
    \        s += '0';\n    }\n    while(s < b){\n        s += '0';\n    }\n    while(s\
    \ < b){\n        s += '0';\n    }\n    while(s < b", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m\
    \ = Math.pow(base,x);\n    while(m > 0){\n        r = m%base + r;\n        m =\
    \ Math.floor(m/base);\n    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n \
    \   }\n    return r;\n}\n", "\tvar res = \"\";\n\tvar negative = x < 0;\n\tvar\
    \ n = Math.abs(x);\n\tvar digits = Math.log(n) / Math.log(base);\n\twhile (digits--\
    \ > 0) res += base;\n\tif (negative) res = \"-\" + res;\n\treturn res;\n}\n",
  "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base] + r;\n \
    \       x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\"\
    ;\n    while(x>0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\"\
    ;\n    if(x<0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    var base = base;\n    var\
    \ digits = 1;\n    while(digits<base){\n        digits++;\n    }\n    while(digits<base){\n\
    \        digits = digits*base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        digits = digits/base;\n\
    \    }\n    while(digits<base){\n        digits = digits/base;\n    }\n    while(digits<base){\n\
    \        digits = digits/base;\n    }\n    while(digits<base){\n        digits\
    \ = digits/base;\n    }\n    while(digits<base){\n        ", "    var r = \"\"\
    ;\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n \
    \   }\n    while(x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "\tvar res = \"\";\n\twhile(x > 0){\n\t\tres\
    \ = base_digits[x % base] + res;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ reverseString(res);\n}\n", "    var r = \"\";\n    var negative = x < 0;\n \
    \   var i = 0;\n    while(i < base){\n        var digit = x % base;\n        x\
    \ = Math.floor(x / base);\n        r += digit;\n        i++;\n    }\n    if(negative){\n\
    \        r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n   \
    \ if (base < 2 || base > 36){\n        console.log(\"Base must be between 2 and\
    \ 36\");\n        return \"\";\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x = x % base;\n        base = base * 10;\n    }\n    return sign\
    \ * r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m != 0){\n        r = m%10 + r + String(m%10);\n    }\n    if(base\
    \ == 2){\n        r = r + r + r + r + r + r + r + r;\n    }\n    else if(base\
    \ == 8){\n        r = r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r + r +\
    \ r + r + r + r + ", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar r\
    \ = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    while(x>0){\n    \
    \    r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n  \
    \  return r;\n}\n", "\tvar r = \"\";\n\twhile(x >= base){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn base_digits[x] + r;\n}\n",
  "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    if(x\
    \ < 0){\n        sign = \"-\";\n        x = Math.abs(x);\n    }\n    while(x >\
    \ 0){\n        r = base_digits[(x % base)];\n        x = Math.floor(x/base);\n\
    \    }\n    return sign + r;\n}\n", "\tvar str = x.toString(base);\n\tvar res\
    \ = \"\";\n\twhile(str.length < base){\n\t\tstr = \"0\" + str;\n\t}\n\twhile(str.length\
    \ > base){\n\t\tstr = str.substr(0, str.length - base);\n\t\tres = \"1\" + res;\n\
    \t}\n\treturn res + str;\n}\n", "    var r = \"\";\n    var digits = \"\";\n \
    \   while(x >= base){\n        digits = digits+x;\n        x = x/base;\n    }\n\
    \    digits = digits+x;\n    r = digits;\n    return r;\n}\n", "    var r = \"\
    \";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar str = x.toString(base);\n\tvar res = \"\"\
    ;\n\twhile(str.length < base){\n\t\tstr = \"0\" + str;\n\t\tres++;\n\t}\n\treturn\
    \ res + str;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n  \
    \  var i = 0;\n    while(i < x.length){\n        if(x[i] == \".\"){\n        \
    \    i++;\n        }\n        else{\n            if(x[i] >= \"0\" && x[i] <= \"\
    9\"){\n                if(x[i] >= \"a\" && x[i] <= \"z\"){\n                 \
    \   m = x[i] - \"a\" + 10;\n                }\n                else{\n       \
    \             m = x[i] - \"0\";\n                }\n            }\n          \
    \  else{\n                m = x[i] - \"a\" + 10;\n            }\n            if(x[i]\
    \ >= \"a\" && x[i] <= \"z\"){\n                sign = m * Math.pow(base,m);\n\
    \            }\n            else{\n                sign = m * Math.pow(base,m-1)\n\
    \            }\n            r = r + sign;\n        }\n        i++;\n    }\n  \
    \  return r;\n}\n", "    var r = \"\";\n    var m = Math.pow(base,x);\n    while(m\
    \ != 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n    }\n  \
    \  return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_table[base]\
    \ + r; \n        x = x % base;\n    }\n    return r;\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n \
    \   }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    var base\
    \ = base_table[base];\n    var base_len = base.length;\n    var i;\n    for (i\
    \ = 0; i < x_len; i++){\n        var c = x_str.charAt(i);\n        var digit =\
    \ base_table[c];\n        r += digit*sign;\n        sign *= base;\n    }\n   \
    \ return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0) sign = -1;\n\
    \    x = Math.abs(x);\n    while(x != 0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "    var r\
    \ = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x =\
    \ Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ m = Math.pow(base,x);\n    while(m>0){\n        r = m%base + r;\n        m =\
    \ Math.floor(m/base);\n    }\n    return r;\n}\n", "\tvar str = x.toString(base);\n\
    \tvar res = \"\";\n\twhile(str.length < base){\n\t\tstr = \"0\" + str;\n\t}\n\t\
    while(str.length > base){\n\t\tstr = str.substring(1);\n\t}\n\treturn str;\n}\n",
  "\tvar baseNum = base;\n\tvar baseStr = \"\";\n\twhile (baseNum > 0){\n\t\tbaseNum\
    \ = baseNum / base;\n\t\tbaseStr = baseNum.toString(base);\n\t}\n\treturn baseStr;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    if (base > Math.pow(10, Math.ceil(Math.log(x) / Math.LN10))){\n\
    \        base = Math.pow(10, Math.ceil(Math.log(x) / Math.LN10));\n    }\n   \
    \ while (base){\n        r = parseInt(x / base, 10) + r;\n        x = x % base;\n\
    \        base = parseInt(base,10);\n    }\n    return sign*r;\n}\n", "\tvar r\
    \ = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n \
    \   var x_len = x_str.length;\n    for(var i = 0; i < x_len; i++){\n        var\
    \ c = x_str.charAt(i);\n        if(c < \"0\" || c > \"9\"){\n            r +=\
    \ c;\n            continue;\n        }\n        var n = parseInt(c);\n       \
    \ if(!base){\n            r += c;\n            continue;\n        }\n        if(n\
    \ < base){\n            r += c;\n            continue;\n        }\n        var\
    \ m = n / base;\n        r += m * base;\n    }\n    return sign * r;\n}\n", " \
    \   var r = \"\";\n    while(x != 0){\n        r = base_table[base] + r;\n   \
    \     x = x % base;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r\
    \ = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x != 0){\n        r = base_table[base] + r;\n        x\
    \ = x >> 1;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n\
    \        r = base_table[base] + r; \n        x = x % base;\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[x\
    \ % base] + r;\n        x = Math.floor(x / base);\n    }\n    return sign * r;\n\
    }\n", "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n\
    \    var m = Math.abs(x);\n    var b = 0;\n    while(m >= base){\n        b++;\n\
    \        m /= base;\n    }\n    while(m > 0){\n        b--;\n        m /= base;\n\
    \    }\n    for(var i = 0; i < b; i++){\n        s += \"0\";\n    }\n    for(i\
    \ = 0; i < b; i++){\n        s += \"1\";\n    }\n    for(i = 0; i < s.length;\
    \ i++){\n        var c = s.charAt(i);\n        if(c < \"0\" || c > \"9\"){\n \
    \           r += c;\n            continue;\n        }\n        var n = parseInt(s.substr(i,\
    \ 1), base);\n        if(sign == 1){\n            r += (Math.pow(n, m) * base);\n\
    \        } else {\n            r += (Math.pow(n, m) / base);\n        }\n    \
    \    sign = -sign;\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\
    \tvar bases_index = bases.indexOf(base);\n\tvar bases_index_next = bases_index+1;\n\
    \tvar bases_index_prev = bases_index-1;\n\tvar bases_index_next_prev = bases_index+2;\n\
    \tvar bases_index_prev_next = bases_index+3;\n\tvar bases_index_next_next_prev\
    \ = bases_index+4;\n\tvar bases_index_prev_prev_next = bases_index+5;\n\tvar bases_index_next_prev_next_prev\
    \ = bases_index+6;\n\tvar bases_index_prev_prev_next_next_prev = bases_index+7;\n\
    \tvar bases_index_prev_prev_next_next_next_prev = bases_index+8;\n\tvar bases_index_prev_prev_next_next_next_next_prev\
    \ = bases_index+9;\n\tvar bases_index_prev_prev_next_next_next_next_next_prev\
    \ = bases_index+10;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_prev\
    \ = bases_index+11;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_prev\
    \ = bases_index+12;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+13;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+14;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+15;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+16;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+17;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+18;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+19;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+20;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+21;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+22;\n\tvar bases_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = bases_index+23;\n\tvar bases_index_prev_", "\tvar baseNum = base;\n\tvar baseStr\
    \ = \"\";\n\twhile(baseNum > 0){\n\t\tbaseStr += (baseNum % 10) + \"\";\n\t\t\
    baseNum = Math.floor(baseNum / 10);\n\t}\n\treturn baseStr;\n}\n", "\tvar digits\
    \ = x.toString(base).split(\"\");\n\tvar new_digits = [];\n\tfor(var i = 0; i\
    \ < digits.length; i++){\n\t\tnew_digits.push(parseInt(digits[i], base));\n\t\
    }\n\treturn new_digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ s = x.toString();\n    var m = s.length;\n    var k = base;\n    var i = -1;\n\
    \    while(++i < m){\n        var j = s.indexOf(\"0\", i);\n        if(j < 0){\n\
    \            r += s.charAt(i);\n        }else{\n            var q = Math.floor(j\
    \ / k);\n            var r = s.substr(0, j) + r + s.substr(j + q);\n         \
    \   i = j + q;\n        }\n        k /= base;\n    }\n    return r;\n}\n", "\t\
    var r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "\tvar str = x.toString();\n\tvar res = \"\";\n\t\n\t\
    while (str.length >= base){\n\t\tstr = str.substr(0, str.length-base) + str.substr(str.length-base);\n\
    \t\tres = parseInt(str, base) + res;\n\t}\n\t\n\treturn res + str;\n}\n", "  \
    \  var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n    \
    \    x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n\
    \    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar str = x.toString(base);\n\tvar l = str.length;\n\
    \tvar out = '';\n\twhile(l){\n\t\tout = str.slice(l - l, l - l % base) + out;\n\
    \t\tl = l % base;\n\t}\n\treturn out;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n  \
    \  if (base < 2 || base > 36){\n        console.log(\"Invalid base\");\n     \
    \   return \"\";\n    }\n    if (base == 10){\n        r = x.toString();\n   \
    \ }\n    else{\n        var m = Math.pow(base,x);\n        r = m.toString();\n\
    \    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    if (x > 9){\n\
    \        throw \"Base out of range: \" + base;\n    }\n    while (x != 0){\n \
    \       r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    var baseStr = base.toString();\n    var baseStr_len\
    \ = baseStr.length;\n    while (baseStr_len)\n    {\n        var i = baseStr_len\
    \ - 1;\n        var c = baseStr.charAt(i);\n        var d = baseStr.charAt(i +\
    \ 1);\n        var e = baseStr.charAt(i + 2);\n        var f = baseStr.charAt(i\
    \ + 3);\n        var g = baseStr.charAt(i + 4);\n        var h = baseStr.charAt(i\
    \ + 5);\n        var j = baseStr.charAt(i + 6);\n        var k = baseStr.charAt(i\
    \ + 7);\n        var m = baseStr.charAt(i + 8);\n        var n = baseStr.charAt(i\
    \ + 9);\n        var base = Math.pow(base,baseStr.length - i - 1);\n        var\
    \ x_pow = Math.pow(x,baseStr.length - i - 1);\n        var x_pow_str = x_pow.toString();\n\
    \        var x_pow_len = x_pow_str.length;\n        while (baseStr_len)\n    \
    \    {\n            var i = baseStr_len - 1;\n            var c = baseStr.charAt(i);\n\
    \            var d = baseStr.charAt(i + 1);\n            var e = baseStr.charAt(i\
    \ + 2);\n            var f = baseStr.charAt(i + 3);\n            var g = baseStr.charAt(i\
    \ + 4);\n            var h = baseStr.charAt(i + 5);\n            var j = baseStr.charAt(i\
    \ + 6);\n            var k = baseStr.charAt(i + 7);\n            var m = baseStr.charAt(i\
    \ + 8);\n            var n = baseStr.charAt(i + 9);\n            var base = Math.pow(base,baseStr.length\
    \ - i - 1);\n            var x_pow = Math.pow(x_pow,baseStr.length - i - 1);\n\
    \            var x_pow_str = x_pow.toString();\n            var x_pow_len = x_pow_str.length;\n\
    \            if (x_pow_str.length > x_len)\n            {\n                base\
    \ = Math.pow(base,x_len - x_pow_str.length);\n            }\n            if (x_pow_str.length\
    \ < x_len)\n            {\n                base = Math.pow(base,x_len - x_pow_str.length);\n\
    \            }\n            var x_pow_base = x_pow * base;\n            var x_pow_base_str\
    \ = x_pow_base.toString();\n            var x_pow_base_len = x_pow_base_str.length;\n\
    \            if (x_pow_base_str.length > x_len)\n            {\n             \
    \   base = Math.pow(base,x_len - x_pow_base_str.length);\n            }\n    \
    \        if (x_pow_base_str.length < x_len)\n            {\n                base\
    \ = Math.pow(base,x_len - x_pow_base_str.length);\n            }\n           \
    \ var x_pow_base_base = x_pow * base;\n            var x_pow_base_base_str = x_pow_base_base",
  "    var r = \"\";\n    var m = Math.pow(base,x);\n    for(var i = 0; i < x; i++){\n\
    \        r += String.fromCharCode((m%base)+65);\n        m = Math.floor(m/base);\n\
    \    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar\
    \ digits = x.toString(base).split(\"\");\n\tdigits = digits.reverse();\n\treturn\
    \ digits.join(\"\") + base;\n}\n", "\tvar baseNum = base;\n\tvar baseStr = \"\"\
    ;\n\twhile(baseNum > 0){\n\t\tbaseNum = baseNum / base;\n\t\tbaseStr = baseNum.toString(base);\n\
    \t}\n\treturn baseStr;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n \
    \   }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    var base\
    \ = base_table[base];\n    var base_len = base.length;\n    var decimal_len =\
    \ Math.max(x_len, base_len);\n    var decimal_pos = x_len - decimal_len;\n   \
    \ var decimal = x_str.substring(decimal_pos, decimal_pos + decimal_len);\n   \
    \ var digits = decimal.split('');\n    var digits_len = digits.length;\n    var\
    \ digits_pos = 0;\n    var digits_len = digits.length;\n    while (digits_pos\
    \ < digits_len){\n        var d = digits[digits_pos++];\n        var d_len = d.length;\n\
    \        var d_pos = 0;\n        var d_len = d.length;\n        while (d_pos <\
    \ d_len){\n            var c = d[d_pos++];\n            var c_len = 1;\n     \
    \       var c_pos = 0;\n            var c_len = d.length;\n            while (c_pos\
    \ < c_len){\n                var z = d[c_pos++];\n                var z_len =\
    \ z.length;\n                var z_pos = 0;\n                var z_len = z.length;\n\
    \                while (z_pos < z_len){\n                    var y = d[z_pos++];\n\
    \                    var y_len = y.length;\n                    var y_pos = 0;\n\
    \                    var y_len = y.length;\n                    while (y_pos <\
    \ y_len){\n                        var x = d[y_pos++];\n                     \
    \   var x_len = x.length;\n                        var x_pos = 0;\n          \
    \              var x_len = x.length;\n                        while (x_pos < x_len){\n\
    \                            var z = d[x_pos++];\n                           \
    \ var z_len = z.length;\n                            var z_pos = 0;\n        \
    \                    var z_len = z.length;\n                            while\
    \ (z_pos < z_len){\n                                var y = d[z_pos++];\n    \
    \                            var y_len = y.length;\n                         \
    \       var y_pos = 0;\n                                var y_len = y.length;\n\
    \                                while (y_pos < y_len){\n                    \
    \                var x = d[y_pos++];\n                                    var\
    \ x_len = x.length;\n                                    var x_pos = 0;\n    \
    \                                var x_len = x.length;\n                     \
    \               while (x_pos < x_len){\n                                     \
    \   var z = d[x_pos++];\n                                        var z_len = z.length;\n\
    \                                        var z_pos = 0;\n                    \
    \                    var z_len = z.length;\n                                 \
    \       while (z_pos < z_len){\n                                            var\
    \ y = d[z_pos++];\n                                            var y_len = y.length;\n\
    \                                            var y_pos = 0;\n                \
    \                            var y_len = y.length;\n                         \
    \                   if (y_pos == y_len){\n                                   \
    \             r += z;\n                                            } else if (x_pos\
    \ == x_len){\n                                                r += y;\n      \
    \                                      } else {\n                            \
    \                    r += z;\n                                            }\n\
    \                                        }\n                                 \
    \   }\n                                }\n                            }\n    \
    \                    }\n                    }", "    var r = \"\";\n    var sign\
    \ = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    while\
    \ (x >= base){\n        r = base_digits[base] + r;\n        x -= base;\n    }\n\
    \    r = base_digits[base] + r + base_digits[x + base];\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar num = x.toString(base);\n\
    \tvar res = \"\";\n\twhile (num.length < base){\n\t\tnum = \"0\" + num;\n\t\t\
    res++;\n\t}\n\treturn res;\n}\n", "\tvar digits = x.toString().split('');\n\t\
    digits = digits.map(function(d){\n\t\treturn parseInt(d, base);\n\t});\n\tdigits.reverse();\n\
    \treturn digits.join('');\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar\
    \ digits = x.toString(base).split(\"\").reverse();\n\twhile(digits.length < base){\n\
    \t\tdigits = digits.concat(new Array(base).fill(0));\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m != 0){\n        r = m%10 + r + String(m%10);\n    }\n    if(base\
    \ == 2){\n        r = r + r + r + r + r;\n    }\n    r = r + r + r + r + r;\n\
    \    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n   \
    \     r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n    }\n   \
    \ if(m != 0){\n        r = m%10 + r;\n    }\n    if(base == 2){\n        r = r\
    \ + r + r + r;\n    }\n    r = r + r + String(sign);\n    return r;\n}\n", " \
    \   var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m != 0){\n        r = m + r;\n        m = Math.pow(base,++x);\n   \
    \ }\n    return sign + r;\n}\n", "    var r = \"\";\n    while(x != 0){\n    \
    \    r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n  \
    \  return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0){\n    \
    \    sign = -1;\n        x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "  \
    \  var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m*10/10);\n\
    \    }\n    r = m%10 + r;\n    if(x < 0){\n        r = r.substring(1);\n     \
    \   sign = -1;\n    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    var m = 1;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n  \
    \  var baseLen = base.length;\n    var numLen = Math.floor(x/Math.pow(base,baseLen));\n\
    \    while(numLen >= baseLen){\n        r = r + numToString(numLen, base);\n \
    \       numLen = numLen - baseLen;\n    }\n    while(numLen < baseLen){\n    \
    \    r = r + numToString(numLen, base);\n        numLen = numLen + baseLen;\n\
    \    }\n    while(i < numLen){\n        r = r + numToString(numLen, base);\n \
    \       i = i + 1;\n        numLen = numLen + baseLen;\n    }\n    while(j < baseLen){\n\
    \        r = r + numToString(numLen, base);\n        j = j + 1;\n        numLen\
    \ = numLen + baseLen;\n    }\n    while(k <= baseLen){\n        r = r + numToString(numLen,\
    \ base);\n        k = k + 1;\n        numLen = numLen + baseLen;\n    }\n    r\
    \ = sign + r;\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n \
    \       r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    var m = 1;\n    var b = 0;\n    var n = x;\n\
    \    while (n >= base){\n        r = base_digits[b] + r; \n        n = Math.floor(n\
    \ / base);\n        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >=\
    \ base){\n        r = base_digits[b] + r; \n        n = Math.floor(n / base);\n\
    \        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >= base){\n \
    \       r = base_digits[b] + r; \n        n = Math.floor(n / base);\n        b++;\n\
    \    }\n    r = base_digits[b] + r; \n    while (n >= base){\n        r = base_digits[b]\
    \ + r; \n        n = Math.floor(n / base);\n        b++;\n    }\n    r = base_digits[b]\
    \ + r; \n    while (n >= base){\n        r = base_digits[b] + r; \n        n =\
    \ Math.floor(n / base);\n        b++;\n    }\n    r = base_digits[b] + r; \n \
    \   while (n >= base){\n        r = base_digits[b] + r; \n        n = Math.floor(n\
    \ / base);\n        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >=\
    \ base){\n        r = base_digits[b] + r; \n        n = Math.floor(n / base);\n\
    \        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >= base){\n \
    \       r = base_digits[b] + r; \n        n = Math.floor(n / base);\n        b++;\n\
    \    }\n    r = base_digits[b] + r; \n    while (n >= base){\n        r = base_digits[b]\
    \ + r; \n        n = Math.floor(n / base);\n        b++;\n    }\n    r = base_digits[b]\
    \ + r; \n    while (n >= base){\n        r = base_digits[b] + r; \n        n =\
    \ Math.floor(n / base);\n        b++;\n    }\n    r = base_digits[b] + r; \n \
    \   while (n >= base){\n        r = base_digits[b] + r; \n        n = Math.floor(n\
    \ / base);\n        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >=\
    \ base){\n        r = base_digits[b] + r; \n        n = Math.floor(n / base);\n\
    \        b++;\n    }\n    r = base_digits[b] + r; \n    while (n >= base){\n \
    \       r = base_digits[b] + r; \n        n = Math.floor(n / base);\n        b++;\n\
    \    }\n    r = base_digits[b] + r; \n    while (n >= base){\n        r = base_digits[b]\
    \ + r; \n        n = Math.floor(n / base);\n        b++;"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
