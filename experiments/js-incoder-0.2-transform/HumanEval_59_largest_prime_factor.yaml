name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  if(n<=1){\n    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n \
    \   if(s%2==0){\n      return s;\n    }\n    i=i*2+1;\n    if(s>=n){\n      break;\n\
    \    }\n    s=s/2;\n  }\n  return i;\n}\n", "  var factor = 2;\n  while(n%factor\
    \ == 0){\n    factor += 1;\n  }\n  return factor;\n}\n", "    var factors = [];\n\
    \    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \            while(n % i == 0){\n                n /= i;\n            }\n    \
    \    }\n    }\n    return factors.length ? factors[factors.length - 1] : n;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=primes,algorithm,javascript |>\n<code>",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "    var i = 2;\n    while(true){\n\
    \        if(n % i == 0){\n            return i;\n        }\n        i += 2;\n\
    \    }\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var i=2\n  while(i*i<n){\n \
    \   i++\n  }\n  if(i==n){\n    return i;\n  }\n  var j=3\n  while(j*j<n){\n  \
    \  j++\n  }\n  return j;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var\
    \ factors = [];\n    for(var i = 2; i < n; i++){\n        var div = i; // the\
    \ divisor\n        while(div % 2 == 0){\n            div = div / 2;\n        }\n\
    \        if(div > 1){\n            factors.push(div);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n \
    \ }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n \
    \   return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i\
    \ <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return\
    \ factors[factors.length-1];\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return\
    \ n;\n}\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors.length\
    \ ? Math.max.apply(null, factors) : -1;\n}\n", "  if(n<=1){\n    return 1;\n \
    \ }\n  var i=2,s=1;\n  while(i*i<n){\n    s+=i;\n    i+=2;\n  }\n  return s;\n\
    }\n", "    var factor = 2;\n    while(n > 1){\n        if(n % factor === 0){\n\
    \            n = n/factor;\n        }\n        else{\n            factor++;\n\
    \        }\n    }\n    return factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n\
    \  for(var i=2;i*i<=n;i++){\n    var d=n%i\n    if(d==0){\n      return i;\n \
    \   }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;\
    \ i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n \
    \ return n;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n\
    \ % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
