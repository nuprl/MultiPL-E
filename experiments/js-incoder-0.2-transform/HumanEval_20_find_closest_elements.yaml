name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar closest_number\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\tvar i;\n\tfor(i = 2;\
    \ i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance\
    \ = numbers[i-1];\n\t\tvar current_difference = Math.abs(current_number - closest_number);\n\
    \t\tvar current_closest_difference = Math.abs(current_distance - closest_distance);\n\
    \t\tif(current_closest_difference < closest_closest_difference){\n\t\t\tclosest_number\
    \ = current_number;\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_closest_difference\
    \ = current_closest_difference;\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] === smallest){\n      result.push(smallest);\n\
    \    }\n    else if(numbers[i] === largest){\n      result.push(largest);\n  \
    \  }\n    else{\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  var results = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  results.push(smallest);\n  results.push(largest);\n\
    \  return results;\n}\n", "\tvar smallest = Math.min(numbers);\n\tvar largest\
    \ = Math.max(numbers);\n\tvar closest_numbers = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t}else\
    \ if(numbers[i] == largest){\n\t\t\tclosest_numbers.push(largest);\n\t\t}else{\n\
    \t\t\tvar difference = Math.abs(numbers[i]-smallest);\n\t\t\tvar closest_number\
    \ = smallest;\n\t\t\tif(difference < Math.abs(numbers[i]-closest_number)){\n\t\
    \t\t\tclosest_number = smallest;\n\t\t\t}else if(difference > Math.abs(numbers[i]-closest_number)){\n\
    \t\t\t\tclosest_number = largest;\n\t\t\t}\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] >= smallest &&\
    \ numbers[i] <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] === smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\
    \t\t}\n\t\t\n\t\tif(numbers[i] === largest_number){\n\t\t\tclosest_numbers.push(largest_number);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_numbers_index = 0;\n\tvar closest_number = numbers[0];\n\tvar closest_number_distance\
    \ = numbers[1] - closest_number;\n\tvar closest_number_difference = closest_number_distance;\n\
    \tvar closest_number_previous = closest_number;\n\tvar closest_number_next = closest_number;\n\
    \tvar closest_number_distance = numbers[1] - closest_number;\n\t\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar\
    \ current_number_distance = numbers[i] - current_number;\n\t\tvar current_number_difference\
    \ = current_number_distance;\n\t\tvar current_number_previous = current_number;\n\
    \t\tvar current_number_next = current_number;\n\t\t\n\t\tif(current_number_distance\
    \ < closest_number_distance){\n\t\t\tclosest_number_previous = closest_number;\n\
    \t\t\tclosest_number_next = current_number;\n\t\t\tclosest_number_distance = current_number_distance;\n\
    \t\t}\n\t\telse if(current_number_distance > closest_number_distance){\n\t\t\t\
    closest_number_previous = current_number;\n\t\t\tclosest_number_next = closest_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\telse{\n\t\
    \t\tclosest_number_previous = current_number;\n\t\t\tclosest_number_next = current_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\t\n\t\tclosest_number\
    \ = current_number;\n\t\tclosest_number_difference = current_number_difference;\n\
    \t\tclosest_number_previous = current_number_previous;\n\t\tclosest_number_next\
    \ = current_number_next;\n\t}\n\t\n\tclosest_numbers.push(closest_number_previous);\n\
    \tclosest_numbers.push(closest_number_next);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ == smallest){\n\t\t\tresult.push(smallest);\n\t\t}else if(numbers[i] == largest){\n\
    \t\t\tresult.push(largest);\n\t\t}else{\n\t\t\tresult.push(numbers[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tvar i;\n\
    \tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] >= smallest && numbers[i]\
    \ <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar smallest_diff, smallest_diff_index;\n\tvar closest_numbers = [];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar diff = numbers[i] - numbers[i\
    \ - 1];\n\t\t\n\t\tif(smallest_diff === undefined || diff < smallest_diff){\n\t\
    \t\tsmallest_diff = diff;\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\t\
    closest_numbers.push(numbers[smallest_diff_index]);\n\tclosest_numbers.push(numbers[smallest_diff_index\
    \ - 1]);\n\t\n\treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math,\
    \ numbers);\n  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest\
    \ = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var i = smallest;\
    \ i <= largest; i++){\n    if(numbers.indexOf(i) !== -1){\n      result.push(i);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "    var smallest_difference = Number.MAX_VALUE;\n\
    \    var smallest_difference_index = 0;\n    var smallest_number = numbers[0];\n\
    \    var second_smallest_number = numbers[1];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        var difference = numbers[i] - smallest_number;\n        if(Math.abs(difference)\
    \ < smallest_difference){\n            smallest_difference = difference;\n   \
    \         smallest_difference_index = i;\n            smallest_number = numbers[i];\n\
    \        }\n        else if(difference < 0){\n            second_smallest_number\
    \ = numbers[i];\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(biggest_number < numbers[i]){\n\
    \t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\t\
    var closest_number;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
