name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar closest_number\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\tvar i;\n\tfor(i = 2;\
    \ i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance\
    \ = numbers[i-1];\n\t\tvar current_difference = Math.abs(current_number - closest_number);\n\
    \t\tvar current_closest_difference = Math.abs(current_distance - closest_distance);\n\
    \t\tif(current_closest_difference < closest_closest_difference){\n\t\t\tclosest_number\
    \ = current_number;\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_closest_difference\
    \ = current_closest_difference;\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] === smallest){\n      result.push(smallest);\n\
    \    }\n    else if(numbers[i] === largest){\n      result.push(largest);\n  \
    \  }\n    else{\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  var results = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  results.push(smallest);\n  results.push(largest);\n\
    \  return results;\n}\n", "\tvar smallest = Math.min(numbers);\n\tvar largest\
    \ = Math.max(numbers);\n\tvar closest_numbers = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t}else\
    \ if(numbers[i] == largest){\n\t\t\tclosest_numbers.push(largest);\n\t\t}else{\n\
    \t\t\tvar difference = Math.abs(numbers[i]-smallest);\n\t\t\tvar closest_number\
    \ = smallest;\n\t\t\tif(difference < Math.abs(numbers[i]-closest_number)){\n\t\
    \t\t\tclosest_number = smallest;\n\t\t\t}else if(difference > Math.abs(numbers[i]-closest_number)){\n\
    \t\t\t\tclosest_number = largest;\n\t\t\t}\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] >= smallest &&\
    \ numbers[i] <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] === smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\
    \t\t}\n\t\t\n\t\tif(numbers[i] === largest_number){\n\t\t\tclosest_numbers.push(largest_number);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_numbers_index = 0;\n\tvar closest_number = numbers[0];\n\tvar closest_number_distance\
    \ = numbers[1] - closest_number;\n\tvar closest_number_difference = closest_number_distance;\n\
    \tvar closest_number_previous = closest_number;\n\tvar closest_number_next = closest_number;\n\
    \tvar closest_number_distance = numbers[1] - closest_number;\n\t\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar\
    \ current_number_distance = numbers[i] - current_number;\n\t\tvar current_number_difference\
    \ = current_number_distance;\n\t\tvar current_number_previous = current_number;\n\
    \t\tvar current_number_next = current_number;\n\t\t\n\t\tif(current_number_distance\
    \ < closest_number_distance){\n\t\t\tclosest_number_previous = closest_number;\n\
    \t\t\tclosest_number_next = current_number;\n\t\t\tclosest_number_distance = current_number_distance;\n\
    \t\t}\n\t\telse if(current_number_distance > closest_number_distance){\n\t\t\t\
    closest_number_previous = current_number;\n\t\t\tclosest_number_next = closest_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\telse{\n\t\
    \t\tclosest_number_previous = current_number;\n\t\t\tclosest_number_next = current_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\t\n\t\tclosest_number\
    \ = current_number;\n\t\tclosest_number_difference = current_number_difference;\n\
    \t\tclosest_number_previous = current_number_previous;\n\t\tclosest_number_next\
    \ = current_number_next;\n\t}\n\t\n\tclosest_numbers.push(closest_number_previous);\n\
    \tclosest_numbers.push(closest_number_next);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ == smallest){\n\t\t\tresult.push(smallest);\n\t\t}else if(numbers[i] == largest){\n\
    \t\t\tresult.push(largest);\n\t\t}else{\n\t\t\tresult.push(numbers[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tvar i;\n\
    \tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] >= smallest && numbers[i]\
    \ <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar smallest_diff, smallest_diff_index;\n\tvar closest_numbers = [];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar diff = numbers[i] - numbers[i\
    \ - 1];\n\t\t\n\t\tif(smallest_diff === undefined || diff < smallest_diff){\n\t\
    \t\tsmallest_diff = diff;\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\t\
    closest_numbers.push(numbers[smallest_diff_index]);\n\tclosest_numbers.push(numbers[smallest_diff_index\
    \ - 1]);\n\t\n\treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math,\
    \ numbers);\n  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest\
    \ = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var i = smallest;\
    \ i <= largest; i++){\n    if(numbers.indexOf(i) !== -1){\n      result.push(i);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "    var smallest_difference = Number.MAX_VALUE;\n\
    \    var smallest_difference_index = 0;\n    var smallest_number = numbers[0];\n\
    \    var second_smallest_number = numbers[1];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        var difference = numbers[i] - smallest_number;\n        if(Math.abs(difference)\
    \ < smallest_difference){\n            smallest_difference = difference;\n   \
    \         smallest_difference_index = i;\n            smallest_number = numbers[i];\n\
    \        }\n        else if(difference < 0){\n            second_smallest_number\
    \ = numbers[i];\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(biggest_number < numbers[i]){\n\
    \t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\t\
    var closest_number;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_", "  var result\
    \ = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  result.push(smallest);\n  result.push(largest);\n  return result;\n\
    }\n", "  var closest_numbers = [];\n  var closest_distances = [];\n  var closest_index\
    \ = 0;\n  var closest_distance = Number.MAX_VALUE;\n  var closest_number = numbers[0];\n\
    \  var closest_index = 0;\n  var i;\n  for(i = 1; i < numbers.length; i++){\n\
    \    var current_distance = numbers[i] - closest_number;\n    if(current_distance\
    \ < closest_distance){\n      closest_number = numbers[i];\n      closest_distance\
    \ = current_distance;\n      closest_index = i;\n    }\n  }\n  closest_numbers.push(closest_number);\n\
    \  closest_distances.push(closest_distance);\n  for(i = 1; i < numbers.length;\
    \ i++){\n    var current_distance = numbers[i] - closest_number;\n    if(current_distance\
    \ < closest_distance){\n      closest_number = numbers[i];\n      closest_distance\
    \ = current_distance;\n      closest_index = i;\n    }\n  }\n  closest_numbers.push(closest_number);\n\
    \  closest_distances.push(closest_distance);\n  return closest_numbers;\n}\n",
  "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest || numbers[i] == largest){\n      result.push(numbers[i]);\n   \
    \ }\n  }\n  return result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "  var smallest_number = numbers[0];\n  var\
    \ second_smallest_number = numbers[0];\n  var closest_numbers = [];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest_number){\n  \
    \    smallest_number = numbers[i];\n    }\n    if(numbers[i] > second_smallest_number){\n\
    \      second_smallest_number = numbers[i];\n    }\n  }\n  closest_numbers.push(smallest_number);\n\
    \  closest_numbers.push(second_smallest_number);\n  return closest_numbers;\n\
    }\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i] ==\
    \ largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar smallest_number = numbers[0];\n\t\
    var closest_numbers = [smallest_number];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tif(current_number < smallest_number){\n\
    \t\t\tsmallest_number = current_number;\n\t\t\tclosest_numbers = [smallest_number];\n\
    \t\t}\n\t\telse if(current_number > smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\
    \t\t\tsmallest_number = current_number;\n\t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(current_number);\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\treturn closest_numbers;\n\
    }\n", "  var results = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  if(smallest == largest){\n    return [smallest];\n\
    \  }\n  if(smallest > largest){\n    var temp = largest;\n    largest = smallest;\n\
    \    smallest = temp;\n  }\n  if(smallest == numbers[0]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 1]){\n    return [largest,\
    \ smallest];\n  }\n  if(smallest == numbers[numbers.length - 2]){\n    return\
    \ [smallest, largest];\n  }\n  if(largest == numbers[0]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 2]){\n    return [smallest,\
    \ largest];\n  }\n  if(smallest == numbers[numbers.length - 3]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 4]){\n    return [smallest,\
    \ largest];\n  }\n  if(smallest == numbers[numbers.length - 5]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 6]){\n    return [smallest,\
    \ largest];\n  }\n  if(smallest == numbers[numbers.length - 7]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 8]){\n    return [smallest,\
    \ largest];\n  }\n  if(smallest == numbers[numbers.length - 9]){\n    return [smallest,\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 10]){\n    return [smallest,\
    \ largest];\n  }\n  if(smallest == numbers[numbers.length - 11]){\n    return\
    \ [smallest, largest];\n  }\n  if(largest == numbers[numbers.length - 12]){\n\
    \    return [smallest, largest];\n  }\n  if(smallest == numbers[numbers.length\
    \ - 13]){\n    return [smallest, largest];\n  }\n  if(largest == numbers[numbers.length\
    \ - 14]){\n    return [smallest, largest];\n  }\n  if(smallest == numbers[numbers.length\
    \ - 15]){\n    return [smallest, largest];\n  }\n  if(largest == numbers[numbers.length\
    \ - 16]){\n    return [smallest, largest];\n  }\n  if(smallest == numbers[", "\t\
    var smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar smallest_index = 0;\n\tvar second_smallest_index = 0;\n\tfor(var i = 1;\
    \ i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number\
    \ = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\telse if(numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = numbers[i];\n\t\t\tsecond_smallest_index = i;\n\
    \t\t}\n\t}\n\treturn [smallest_number, second_smallest_number];\n}\n", "  var\
    \ smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  var closest_numbers = [];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ var current_number = numbers[i];\n    var current_difference = Math.abs(current_number\
    \ - smallest_number);\n    var second_current_difference = Math.abs(current_number\
    \ - second_smallest_number);\n    if(current_difference < second_current_difference){\n\
    \      closest_numbers.push(smallest_number);\n      smallest_number = current_number;\n\
    \    }else{\n      closest_numbers.push(second_smallest_number);\n      second_smallest_number\
    \ = current_number;\n    }\n  }\n  closest_numbers.push(smallest_number);\n  closest_numbers.push(second_smallest_number);\n\
    \  return closest_numbers;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] >\
    \ largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\telse if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_distance = Number.MAX_VALUE;\n\
    \tvar smallest_number = Number.MAX_VALUE;\n\t\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - smallest_number;\n\t\t\n\t\tif(distance\
    \ < smallest_distance){\n\t\t\tsmallest_distance = distance;\n\t\t\tsmallest_number\
    \ = numbers[i];\n\t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\t\t\
    closest_distances.push(smallest_distance);\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\t\
    var m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\
    \tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\
    \tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\
    \tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\
    \tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\
    \tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\
    \tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\
    \tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\
    \tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\
    \tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\
    \tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\
    \tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\
    \tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;", "\tvar closest_numbers = [];\n\
    \tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tresult.push(i);\n\t}\n\treturn result;\n}\n", "  var smallest_number = numbers[0];\n\
    \  var largest_number = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n\
    \    if(numbers[i] < smallest_number){\n      smallest_number = numbers[i];\n\
    \    }\n    if(numbers[i] > largest_number){\n      largest_number = numbers[i];\n\
    \    }\n  }\n  return [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[0];\n\t\tif (distance < closest_distance){\n\
    \t\t\tclosest_numbers = [numbers[i]];\n\t\t\tclosest_distance = distance;\n\t\t\
    } else if (distance == closest_distance){\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "  var smallest_number = numbers[0];\n\
    \  var second_smallest_number = numbers[1];\n  var closest_numbers = [smallest_number,\
    \ second_smallest_number];\n  for(var i = 2; i < numbers.length; i++){\n    if(Math.abs(smallest_number\
    \ - numbers[i]) < Math.abs(second_smallest_number - numbers[i])){\n      smallest_number\
    \ = numbers[i];\n      closest_numbers = [smallest_number, second_smallest_number];\n\
    \    }\n    else{\n      second_smallest_number = numbers[i];\n    }\n  }\n  return\
    \ closest_numbers;\n}\n", "  var results = [];\n  var smallest;\n  var largest;\n\
    \  for(var i=0;i<numbers.length;i++){\n    smallest = numbers[0];\n    largest\
    \ = numbers[0];\n    for(var j=1;j<numbers.length;j++){\n      if(numbers[j] <\
    \ smallest){\n        smallest = numbers[j];\n      }\n      if(numbers[j] > largest){\n\
    \        largest = numbers[j];\n      }\n    }\n    results.push(smallest);\n\
    \    results.push(largest);\n  }\n  return results;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[i - 1];\n\t\tclosest_numbers.push(numbers[i]);\n\
    \t\tclosest_distances.push(distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\tclosest_distances.sort(function(a, b){\n\
    \t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number = numbers[0];\n\
    \tvar smallest_difference = Number.MAX_VALUE;\n\tvar biggest_difference = Number.MAX_VALUE;\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_difference = Math.abs(current_number - smallest_number);\n\t\t\
    if(current_difference < smallest_difference){\n\t\t\tsmallest_difference = current_difference;\n\
    \t\t\tsmallest_number = current_number;\n\t\t}\n\t\tvar current_difference = Math.abs(current_number\
    \ - biggest_number);\n\t\tif(current_difference < biggest_difference){\n\t\t\t\
    biggest_difference = current_difference;\n\t\t\tbiggest_number = current_number;\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\
    \tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\
    \tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\t\
    var current_distance = current_number - smallest_number;\n\t\tvar current_distance_square\
    \ = current_distance * current_distance;\n\t\tsmallest_number = current_number;\n\
    \t\tfor(var j = 0; j < closest_numbers.length; j++){\n\t\t\tvar closest_number\
    \ = closest_numbers[j];\n\t\t\tvar closest_distance_square = closest_number *\
    \ closest_number;\n\t\t\tvar current_distance_square = current_distance * current_distance;\n\
    \t\t\tif(closest_distance_square < current_distance_square){\n\t\t\t\tclosest_number\
    \ = closest_numbers[j];\n\t\t\t\tclosest_distance_square = closest_number * closest_number;\n\
    \t\t\t}\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\t\tclosest_distances.push(closest_distance_square);\n\
    \t\tlargest_number = current_number;\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "  var closest_numbers = [];\n  var smallest_number = numbers[0];\n  var\
    \ largest_number = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n \
    \   if(numbers[i] < smallest_number){\n      smallest_number = numbers[i];\n \
    \   }\n    if(numbers[i] > largest_number){\n      largest_number = numbers[i];\n\
    \    }\n  }\n  if(smallest_number == largest_number){\n    closest_numbers.push(smallest_number);\n\
    \  }\n  else{\n    closest_numbers.push(smallest_number);\n    closest_numbers.push(largest_number);\n\
    \  }\n  return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\tif(current_distance > largest_distance){\n\t\
    \t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(smallest_distance);\n\tclosest_distances.push(largest_distance);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest = Math.min(numbers);\n\tvar largest\
    \ = Math.max(numbers);\n\tvar result = [];\n\tvar i;\n\tfor(i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest || numbers[i] > largest){\n\t\t\tcontinue;\n\
    \t\t}\n\t\tresult.push(numbers[i]);\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i] - numbers[i - 1];\n\t\tvar current_index\
    \ = i - 1;\n\t\t\n\t\twhile(current_distance < 0){\n\t\t\tcurrent_index--;\n\t\
    \t\tcurrent_distance = Math.abs(numbers[current_index] - numbers[i - 1]);\n\t\t\
    }\n\t\t\n\t\tclosest_numbers.push(numbers[current_index]);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\tclosest_numbers.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\t\n\
    \treturn [closest_numbers[0], closest_numbers[closest_numbers.length - 1]];\n\
    }\n", "  var closest_numbers = [];\n  var closest_distances = [];\n  var closest_index\
    \ = 0;\n  var closest_distance;\n  var i;\n  var j;\n  var k;\n  var l;\n  var\
    \ m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n \
    \ var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var a;\n  var b;\n\
    \  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var i;\n  var j;\n\
    \  var k;\n  var l;\n  var m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n\
    \  var s;\n  var t;\n  var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n\
    \  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n\
    \  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var n;\n  var o;\n  var p;\n\
    \  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n  var v;\n  var w;\n  var x;\n\
    \  var y;\n  var z;\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n\
    \  var g;\n  var h;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var n;\n\
    \  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n  var v;\n\
    \  var w;\n  var x;\n  var y;\n  var z;\n  var a;\n  var b;\n  var c;\n  var d;\n\
    \  var e;\n  var f;\n  var g;\n  var h;\n  var i;\n  var j;\n  var k;\n  var l;\n\
    \  var m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n\
    \  var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var a;\n  var b;\n\
    \  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var i;\n  var j;\n\
    \  var k;\n  var l;\n  var m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n\
    \  var s;\n  var t;\n  var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n\
    \  var a;\n  var b;\n  var c;\n  var d;\n  var e;", "\tvar closest_numbers = [];\n\
    \tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar closest_number = numbers[0];\n\tvar closest_distance = numbers[1];\n\
    \tvar i;\n\tfor(i=2; i<numbers.length; i++){\n\t\tvar current_distance = numbers[i]\
    \ - closest_number;\n\t\tif(current_distance < closest_distance){\n\t\t\tclosest_number\
    \ = numbers[i];\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\tclosest_distances.push(closest_distance);\n\
    \treturn [closest_numbers, closest_distances];\n}\n", "  var smallest = Math.min.apply(null,\
    \ numbers);\n  var largest = Math.max.apply(null, numbers);\n  var results = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    var index = numbers.indexOf(i);\n\
    \    if(index != -1){\n      results.push(index);\n    }\n  }\n  return results;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i];\n\t\
    \t\n\t\tfor(var j = i+1; j < numbers.length; j++){\n\t\t\tvar next_distance =\
    \ numbers[j];\n\t\t\t\n\t\t\t//If the next number is closer than the current,\
    \ then update the current number\n\t\t\tif(next_distance < current_distance){\n\
    \t\t\t\tcurrent_distance = next_distance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_distance);\n\
    \t\tclosest_distances.push(current_distance);\n\t}\n\t\n\t//Sort the numbers in\
    \ order of closest to closest\n\tclosest_numbers.sort();\n\tclosest_distances.sort();\n\
    \t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length-1]];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\t\n\treturn closest_numbers;\n}\n",
  "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 0;\
    \ i < numbers.length; i++){\n\t\tvar distance = find_closest_distance(numbers[i],\
    \ numbers);\n\t\t\n\t\tif(closest_distances.length == 0 || distance < closest_distances[closest_distances.length-1]){\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_distances.push(distance);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\t\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance\
    \ = current_number - smallest_number;\n\t\t\n\t\tif(current_distance < 0){\n\t\
    \t\tsmallest_number = current_number;\n\t\t}\n\t\telse{\n\t\t\tlargest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\
    \t\tclosest_numbers.push(largest_number);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length-1]];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  \
    \  var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] === smallest || numbers[i] === largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar closest_numbers = [];\n\t\
    var smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  var\
    \ result = [];\n  var smallest;\n  var largest;\n  var smallest_index;\n  var\
    \ largest_index;\n  var i;\n\n  for(i = 0; i < numbers.length; i++){\n    smallest\
    \ = numbers[0];\n    largest = numbers[0];\n    smallest_index = i;\n    largest_index\
    \ = i;\n\n    for(let j = 1; j < numbers.length; j++){\n      if(numbers[j] <\
    \ smallest){\n        smallest = numbers[j];\n        smallest_index = j;\n  \
    \    }\n      if(numbers[j] > largest){\n        largest = numbers[j];\n     \
    \   largest_index = j;\n      }\n    }\n\n    if(smallest_index != largest_index){\n\
    \      result.push([smallest, largest]);\n    }\n  }\n\n  return result;\n}\n",
  "\tvar closest_elements = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\tvar\
    \ closest_index = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i] - numbers[closest_index];\n\t\tif(current_distance < closest_distance){\n\
    \t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t\
    }\n\tclosest_elements.push(numbers[closest_index]);\n\tclosest_elements.push(numbers[closest_index\
    \ + 1]);\n\treturn closest_elements;\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    var current_distance = numbers[i];\n\t\tvar current_index = 0;\n\t\t\n\t\tfor(var\
    \ j = 0; j < numbers.length; j++){\n\t\t\tvar next_distance = numbers[j];\n\t\t\
    \t\n\t\t\tif(j == i){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(next_distance\
    \ < current_distance){\n\t\t\t\tcurrent_distance = next_distance;\n\t\t\t\tcurrent_index\
    \ = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_index);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\tclosest_numbers.sort();\n\tclosest_distances.sort();\n\t\n\treturn\
    \ [closest_numbers[0], closest_numbers[closest_numbers.length - 1]];\n}\n", "\t\
    var closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 0;\
    \ i < numbers.length; i++){\n\t\tvar distance = find_closest_distance(numbers[i],\
    \ numbers);\n\t\t\n\t\tif(closest_distances.length == 0 || distance < closest_distances[closest_distances.length-1]){\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_distances.push(distance);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\
    \tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;", "  var result = [];\n  var smallest = Math.min(numbers[0],\
    \ numbers[1]);\n  var largest = Math.max(numbers[0], numbers[1]);\n  if(smallest\
    \ == largest){\n    result.push(smallest);\n    return result;\n  }\n  for(var\
    \ i = 2; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  result.push(smallest);\n  result.push(largest);\n  return result;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\t\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\t\
    smallest_number = numbers[i];\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\t\t\n\
    \t\tif(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(second_smallest_number);\n\
    \t\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min.apply(null, numbers);\n\
    \tvar largest = Math.max.apply(null, numbers);\n\tvar result = [];\n\tfor(var\
    \ i=0;i<numbers.length;i++){\n\t\tif(numbers[i] == smallest || numbers[i] == largest){\n\
    \t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var smallest_number\
    \ = numbers[0];\n  var second_smallest_number = numbers[1];\n  var closest_numbers\
    \ = [smallest_number, second_smallest_number];\n  for(var i = 2; i < numbers.length;\
    \ i++){\n    var current_number = numbers[i];\n    if(current_number < smallest_number){\n\
    \      smallest_number = current_number;\n      closest_numbers[0] = smallest_number;\n\
    \    }\n    else if(current_number > second_smallest_number){\n      second_smallest_number\
    \ = current_number;\n      closest_numbers[1] = second_smallest_number;\n    }\n\
    \  }\n  return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i] - numbers[i - 1];\n\t\tvar current_index = 0;\n\t\t\n\t\twhile(current_distance\
    \ > closest_distances[current_index]){\n\t\t\tclosest_distances[current_index]\
    \ = current_distance;\n\t\t\tclosest_numbers[current_index] = numbers[i - 1];\n\
    \t\t\tcurrent_index++;\n\t\t}\n\t\t\n\t\tclosest_distances[current_index] = current_distance;\n\
    \t\tclosest_numbers[current_index] = numbers[i];\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] === smallest || numbers[i] === largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar smallest = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest\
    \ || numbers[i] > largest){\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return result;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tvar smallest_distance =\
    \ Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\tfor(var i =\
    \ 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar\
    \ current_distance = current_number - smallest_number;\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\tif(current_distance > largest_distance){\n\t\
    \t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(smallest_distance);\n\tclosest_distances.push(largest_distance);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[closest_index];\n\t\tif(distance\
    \ < closest_distance){\n\t\t\tclosest_index = i;\n\t\t\tclosest_distance = distance;\n\
    \t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index\
    \ + 1]);\n\t\n\treturn closest_numbers;\n}\n", "    var closest_numbers = [];\n\
    \    var closest_distances = [];\n    var smallest_number = numbers[0];\n    var\
    \ largest_number = numbers[0];\n    var smallest_distance = Number.MAX_VALUE;\n\
    \    var largest_distance = Number.MAX_VALUE;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var current_number = numbers[i];\n        var current_distance\
    \ = current_number - smallest_number;\n        if(current_distance < smallest_distance){\n\
    \            smallest_number = current_number;\n            smallest_distance\
    \ = current_distance;\n        }\n        if(current_distance > largest_distance){\n\
    \            largest_number = current_number;\n            largest_distance =\
    \ current_distance;\n        }\n        closest_numbers.push(current_number);\n\
    \        closest_distances.push(current_distance);\n    }\n    closest_numbers.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    closest_distances.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    for(var i = 0; i < closest_numbers.length;\
    \ i++){\n        if(closest_distances[i] > smallest_distance){\n            return\
    \ closest_numbers;\n        }\n    }\n    return closest_numbers;\n}\n", "  var\
    \ smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  var closest_numbers = [smallest_number];\n  for(var i = 2; i < numbers.length;\
    \ i++){\n    var current_number = numbers[i];\n    if(current_number < smallest_number){\n\
    \      smallest_number = current_number;\n      closest_numbers = [smallest_number];\n\
    \    }\n    else if(current_number > second_smallest_number){\n      second_smallest_number\
    \ = current_number;\n      closest_numbers = [second_smallest_number];\n    }\n\
    \    else{\n      closest_numbers.push(current_number);\n    }\n  }\n  return\
    \ closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[i - 1];\n\t\t\n\t\tif(closest_distances.length == 0 || distance <\
    \ closest_distances[closest_distances.length - 1])\n\t\t\tclosest_distances.push(distance);\n\
    \t\t\n\t\telse if(distance == closest_distances[closest_distances.length - 1])\n\
    \t\t\tclosest_numbers.push(numbers[i - 1]);\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = [smallest_number, second_smallest_number];\n\tfor(var\
    \ i = 2; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\t\
    if(current_number < smallest_number){\n\t\t\tsmallest_number = current_number;\n\
    \t\t\tclosest_numbers[0] = smallest_number;\n\t\t}\n\t\telse if(current_number\
    \ > second_smallest_number){\n\t\t\tsecond_smallest_number = current_number;\n\
    \t\t\tclosest_numbers[1] = second_smallest_number;\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) != -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[1];\n\tvar closest_numbers = [smallest_number, second_smallest_number];\n\
    \t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tif(current_number < smallest_number){\n\t\t\tsmallest_number = current_number;\n\
    \t\t\tclosest_numbers[0] = smallest_number;\n\t\t}\n\t\telse if(current_number\
    \ > second_smallest_number){\n\t\t\tsecond_smallest_number = current_number;\n\
    \t\t\tclosest_numbers[1] = second_smallest_number;\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++){\n\t\tif (numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance\
    \ = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number\
    \ = numbers[i];\n\t\tvar current_distance = current_number - smallest_number;\n\
    \t\tif(current_distance < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\
    \t\t\tsmallest_distance = current_distance;\n\t\t}\n\t\tif(current_distance >\
    \ largest_distance){\n\t\t\tlargest_number = current_number;\n\t\t\tlargest_distance\
    \ = current_distance;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\t\
    closest_numbers.push(largest_number);\n\tclosest_distances.push(smallest_distance);\n\
    \tclosest_distances.push(largest_distance);\n\treturn closest_numbers;\n}\n",
  "    var smallest = Math.min(numbers);\n    var largest = Math.max(numbers);\n \
    \   var closest_numbers = [];\n    for(var i=0;i<numbers.length;i++){\n      \
    \  if(numbers[i] == smallest){\n            closest_numbers.push(smallest);\n\
    \        }\n        else if(numbers[i] == largest){\n            closest_numbers.push(largest);\n\
    \        }\n        else{\n            closest_numbers.push(numbers[i]);\n   \
    \     }\n    }\n    return closest_numbers;\n}\n", "  var smallest_number = numbers[0];\n\
    \  var second_smallest_number = numbers[1];\n  var smallest_difference = smallest_number\
    \ - second_smallest_number;\n  var second_smallest_difference = second_smallest_number\
    \ - smallest_number;\n  var smallest_difference_index = 0;\n  var second_smallest_difference_index\
    \ = 1;\n  var smallest_difference_indexes = [smallest_difference_index];\n  var\
    \ second_smallest_difference_indexes = [second_smallest_difference_index];\n \
    \ var smallest_difference_indexes_sorted = smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var second_smallest_difference_indexes_sorted = second_smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var smallest_number = smallest_difference_indexes[0];\n\
    \  var second_smallest_number = second_smallest_difference_indexes[0];\n  var\
    \ smallest_difference = smallest_number - second_smallest_number;\n  var second_smallest_difference\
    \ = second_smallest_number - smallest_number;\n  var smallest_difference_index\
    \ = 0;\n  var second_smallest_difference_index = 1;\n  var smallest_difference_indexes\
    \ = [smallest_difference_index];\n  var second_smallest_difference_indexes = [second_smallest_difference_index];\n\
    \  var smallest_difference_indexes_sorted = smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var second_smallest_difference_indexes_sorted = second_smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var smallest_number = smallest_difference_indexes[0];\n\
    \  var second_smallest_number = second_smallest_difference_indexes[0];\n  var\
    \ smallest_difference = smallest_number - second_smallest_number;\n  var second_smallest_difference\
    \ = second_smallest_number - smallest_number;\n  var smallest_difference_index\
    \ = 0;\n  var second_smallest_difference_index = 1;\n  var smallest_difference_indexes\
    \ = [smallest_difference_index];\n  var second_smallest_difference_indexes = [second_smallest_difference_index];\n\
    \  var smallest_difference_indexes_sorted = smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var second_smallest_difference_indexes_sorted = second_smallest_difference_indexes.sort(function(a,\
    \ b){return a - b});\n  var smallest_number = smallest_difference_indexes[0];\n\
    \  var second_smallest_number = second_smallest_difference_indexes[0];\n  var\
    \ smallest_difference = smallest_number - second_smallest_number;\n  var second_smallest_difference\
    \ = second_smallest_number - smallest_number;\n  var smallest_difference_index\
    \ = 0;\n  var second_smallest_difference_index = 1;\n  var smallest_difference_indexes\
    \ = [smallest_difference_index];\n  var second_smallest_difference_indexes = [second_smallest_difference_index",
  "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\t\
    closest_numbers.push(second_smallest_number);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\tvar closest_number = numbers[0];\n\
    \tvar closest_index = 0;\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar\
    \ current_distance = numbers[i] - closest_number;\n\t\tif(current_distance < closest_distance){\n\
    \t\t\tclosest_number = numbers[i];\n\t\t\tclosest_index = i;\n\t\t\tclosest_distance\
    \ = current_distance;\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\t\
    closest_distances.push(closest_distance);\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "    var result = [];\n    var smallest = numbers[0];\n    var largest =\
    \ numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < smallest){\n            smallest = numbers[i];\n        }\n        if(numbers[i]\
    \ > largest){\n            largest = numbers[i];\n        }\n    }\n    result.push(smallest);\n\
    \    result.push(largest);\n    return result;\n}\n", "    var smallest = Math.min.apply(null,\
    \ numbers);\n    var largest = Math.max.apply(null, numbers);\n    var results\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] ===\
    \ smallest){\n            results.push(smallest);\n        }\n        else if(numbers[i]\
    \ === largest){\n            results.push(largest);\n        }\n        else{\n\
    \            results.push(numbers[i]);\n        }\n    }\n    return results;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "  var smallest = numbers[0];\n  var largest\
    \ = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n\
    \      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "    var smallest_number = numbers[0];\n    var\
    \ second_smallest_number = numbers[0];\n    var smallest_index = 0;\n    var second_smallest_index\
    \ = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] <\
    \ smallest_number){\n            smallest_number = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > second_smallest_number){\n   \
    \         second_smallest_number = numbers[i];\n            second_smallest_index\
    \ = i;\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor(let i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\
    \tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "  var result = [];\n  var smallest\
    \ = numbers[0];\n  var largest = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n\
    \    if(numbers[i] > largest){\n      largest = numbers[i];\n    }\n  }\n  if(smallest\
    \ != largest){\n    result.push(smallest);\n    result.push(largest);\n  }\n \
    \ return result;\n}\n", "  var smallest_distance = Number.MAX_VALUE;\n  var closest_numbers\
    \ = [];\n  var closest_numbers_index = 0;\n  var i;\n  for(i = 0; i < numbers.length;\
    \ i++){\n    var current_distance = distance_between_points(numbers[i], numbers[closest_numbers_index]);\n\
    \    if(current_distance < smallest_distance){\n      smallest_distance = current_distance;\n\
    \      closest_numbers_index = i;\n    }\n  }\n  closest_numbers.push(numbers[closest_numbers_index]);\n\
    \  return closest_numbers;\n}\n", "    var smallest_number = numbers[0];\n   \
    \ var second_smallest_number = numbers[1];\n    var closest_numbers = [];\n  \
    \  var closest_numbers_index = 0;\n    var smallest_difference = Number.MAX_VALUE;\n\
    \    var second_smallest_difference = Number.MAX_VALUE;\n    var smallest_difference_index\
    \ = 0;\n    var second_smallest_difference_index = 0;\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        var current_number = numbers[i];\n        var\
    \ current_difference = Math.abs(current_number - smallest_number);\n        if(current_difference\
    \ < smallest_difference){\n            smallest_difference = current_difference;\n\
    \            smallest_difference_index = i;\n        }\n        var current_second_difference\
    \ = Math.abs(current_number - second_smallest_number);\n        if(current_second_difference\
    \ < second_smallest_difference){\n            second_smallest_difference = current_second_difference;\n\
    \            second_smallest_difference_index = i;\n        }\n    }\n    closest_numbers.push(smallest_numbers[smallest_difference_index]);\n\
    \    closest_numbers.push(second_smallest_numbers[second_smallest_difference_index]);\n\
    \    return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar closest_number\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\t\n\tfor(var i = 1; i\
    \ < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance\
    \ = numbers[i-1];\n\t\t\n\t\tif(current_distance < closest_distance){\n\t\t\t\
    closest_number = current_number;\n\t\t\tclosest_distance = current_distance;\n\
    \t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(closest_number);\n\
    \tclosest_distances.push(closest_distance);\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[0];\n\
    \  var closest_numbers = [];\n  var closest_numbers_index = 0;\n  var smallest_difference\
    \ = Number.MAX_VALUE;\n  var second_smallest_difference = Number.MAX_VALUE;\n\
    \  for(var i = 1; i < numbers.length; i++){\n    var current_number = numbers[i];\n\
    \    var current_difference = Math.abs(current_number - smallest_number);\n  \
    \  if(current_difference < smallest_difference){\n      smallest_difference =\
    \ current_difference;\n      closest_numbers_index = i;\n      smallest_number\
    \ = current_number;\n    }\n    if(current_difference < second_smallest_difference){\n\
    \      second_smallest_difference = current_difference;\n      second_smallest_number\
    \ = current_number;\n    }\n  }\n  closest_numbers.push(smallest_number);\n  closest_numbers.push(second_smallest_number);\n\
    \  return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distance\
    \ = Number.MAX_VALUE;\n\tvar closest_index = 0;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i] - numbers[i - 1];\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index\
    \ - 1]);\n\treturn closest_numbers;\n}\n", "    var result = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var min = numbers[i];\n        var\
    \ index = i;\n        for(var j = i+1; j < numbers.length; j++){\n           \
    \ if(numbers[j] < min){\n                min = numbers[j];\n                index\
    \ = j;\n            }\n        }\n        result.push(numbers[index]);\n    }\n\
    \    return result;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  if(smallest == largest){\n\
    \    result.push(smallest);\n  }\n  else{\n    result.push(smallest);\n    result.push(largest);\n\
    \  }\n  return result;\n}\n", "\tvar smallest = Math.min(numbers);\n\tvar largest\
    \ = Math.max(numbers);\n\tvar closest_numbers = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t}else\
    \ if(numbers[i] == largest){\n\t\t\tclosest_numbers.push(largest);\n\t\t}else{\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var i\
    \ = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "\tvar smallest = Math.min(numbers);\n\
    \tvar largest = Math.max(numbers);\n\tvar closest_numbers = [];\n\tvar closest_numbers_index\
    \ = 0;\n\t\n\tfor(var i = 0; i <= largest; i++){\n\t\tif(numbers[i] < smallest){\n\
    \t\t\tclosest_numbers.push(smallest);\n\t\t\tclosest_numbers_index = 0;\n\t\t\
    }\n\t\telse if(numbers[i] > largest){\n\t\t\tclosest_numbers.push(largest);\n\t\
    \t\tclosest_numbers_index = 1;\n\t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t\tclosest_numbers_index = i;\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\t\
    var m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\
    \tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\
    \tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\
    \tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\
    \tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\
    \tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\
    \tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\
    \tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\
    \tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\
    \tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\
    \tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\
    \tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\
    \tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;", "    var smallest = numbers[0];\n\
    \    var largest = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < smallest){\n            smallest = numbers[i];\n    \
    \    }\n        if(numbers[i] > largest){\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[closest_index];\n\t\t\n\t\tif(closest_distance > distance){\n\t\t\t\
    closest_index = i;\n\t\t\tclosest_distance = distance;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(numbers[closest_index]);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\t\n\tclosest_numbers.unshift(numbers[0]);\n\
    \tclosest_distances.unshift(closest_distance);\n\t\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    var smallest_diff,\
    \ smallest_diff_index;\n    var smallest_number = numbers[0];\n    var second_smallest_number\
    \ = numbers[1];\n    for(var i = 0; i < numbers.length; i++){\n        var diff\
    \ = numbers[i] - smallest_number;\n        if(smallest_diff === undefined || diff\
    \ < smallest_diff){\n            smallest_diff = diff;\n            smallest_diff_index\
    \ = i;\n        }\n        else if(diff === smallest_diff){\n            if(second_smallest_number\
    \ === undefined || diff < second_smallest_number){\n                second_smallest_number\
    \ = smallest_diff_index;\n            }\n        }\n    }\n    return [smallest_number,\
    \ second_smallest_number];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "    var smallest_diff, smallest_diff_index;\n\
    \    var diff, diff_index;\n    var i;\n    var result = [];\n    for(i = 0; i\
    \ < numbers.length; i++){\n        smallest_diff = Math.abs(numbers[i] - numbers[smallest_diff_index]);\n\
    \        smallest_diff_index = i;\n        diff = smallest_diff;\n        for(j\
    \ = i; j < numbers.length; j++){\n            diff = Math.abs(numbers[j] - numbers[diff_index]);\n\
    \            if(diff < smallest_diff){\n                smallest_diff = diff;\n\
    \                smallest_diff_index = j;\n            }\n        }\n        result.push(numbers[smallest_diff_index]);\n\
    \    }\n    return result;\n}\n", "\tvar closest_elements = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_distances_index = [];\n\tvar closest_numbers = [];\n\t\
    var closest_numbers_index = [];\n\tvar closest_numbers_index2 = [];\n\tvar closest_numbers_index3\
    \ = [];\n\tvar closest_numbers_index4 = [];\n\tvar closest_numbers_index5 = [];\n\
    \tvar closest_numbers_index6 = [];\n\tvar closest_numbers_index7 = [];\n\tvar\
    \ closest_numbers_index8 = [];\n\tvar closest_numbers_index9 = [];\n\tvar closest_numbers_index10\
    \ = [];\n\tvar closest_numbers_index11 = [];\n\tvar closest_numbers_index12 =\
    \ [];\n\tvar closest_numbers_index13 = [];\n\tvar closest_numbers_index14 = [];\n\
    \tvar closest_numbers_index15 = [];\n\tvar closest_numbers_index16 = [];\n\tvar\
    \ closest_numbers_index17 = [];\n\tvar closest_numbers_index18 = [];\n\tvar closest_numbers_index19\
    \ = [];\n\tvar closest_numbers_index20 = [];\n\tvar closest_numbers_index21 =\
    \ [];\n\tvar closest_numbers_index22 = [];\n\tvar closest_numbers_index23 = [];\n\
    \tvar closest_numbers_index24 = [];\n\tvar closest_numbers_index25 = [];\n\tvar\
    \ closest_numbers_index26 = [];\n\tvar closest_numbers_index27 = [];\n\tvar closest_numbers_index28\
    \ = [];\n\tvar closest_numbers_index29 = [];\n\tvar closest_numbers_index30 =\
    \ [];\n\tvar closest_numbers_index31 = [];\n\tvar closest_numbers_index32 = [];\n\
    \tvar closest_numbers_index33 = [];\n\tvar closest_numbers_index34 = [];\n\tvar\
    \ closest_numbers_index35 = [];\n\tvar closest_numbers_index36 = [];\n\tvar closest_numbers_index37\
    \ = [];\n\tvar closest_numbers_index38 = [];\n\tvar closest_numbers_index39 =\
    \ [];\n\tvar closest_numbers_index40 = [];\n\tvar closest_numbers_index41 = [];\n\
    \tvar closest_numbers_index42 = [];\n\tvar closest_numbers_index43 = [];\n\tvar\
    \ closest_numbers_index44 = [];\n\tvar closest_numbers_index45 = [];\n\tvar closest_numbers_index46\
    \ = [];\n\tvar closest_numbers_index47 = [];\n\tvar closest_numbers_index48 =\
    \ [];\n\tvar closest_numbers_index49 = [];\n\tvar closest_numbers_index50 = [];\n\
    \tvar closest_numbers_index51 = [];\n\tvar closest_numbers_index52 = [];\n\tvar\
    \ closest_numbers_index53 = [];\n\tvar closest_numbers_index54 = [];\n\tvar closest_numbers_index55\
    \ = [];\n\tvar closest_numbers_index56 = [];\n\tvar closest_numbers_index57 =\
    \ [];\n\tvar closest_numbers_index58 = [];\n\tvar closest_numbers_index59 = [];\n\
    \tvar closest_numbers_index60 = [];\n\tvar ", "\tvar closest_elements = [];\n\t\
    var smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\
    \tclosest_elements.push(largest_number);\n\treturn closest_elements;\n}\n", " \
    \ var result = [];\n  var smallest;\n  var largest;\n  var smallest_index;\n \
    \ var largest_index;\n  var i;\n\n  for(i = 0; i < numbers.length; i++){\n   \
    \ smallest = numbers[0];\n    largest = numbers[0];\n    smallest_index = i;\n\
    \    largest_index = i;\n\n    for(let j = 1; j < numbers.length; j++){\n    \
    \  if(numbers[j] < smallest){\n        smallest = numbers[j];\n        smallest_index\
    \ = j;\n      }\n      if(numbers[j] > largest){\n        largest = numbers[j];\n\
    \        largest_index = j;\n      }\n    }\n\n    result.push(smallest);\n  \
    \  result.push(largest);\n\n    numbers.splice(smallest_index, 1);\n    numbers.splice(largest_index,\
    \ 1);\n  }\n\n  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distance\
    \ = Number.MAX_VALUE;\n\tvar closest_index = 0;\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_numbers[closest_index];\n\t\t\
    if (distance < closest_distance){\n\t\t\tclosest_distance = distance;\n\t\t\t\
    closest_index = i;\n\t\t}\n\t}\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\treturn closest_numbers;\n\
    }\n", "\tnumbers = numbers.slice();\n\tnumbers.sort(function(a, b){\n\t\treturn\
    \ Math.abs(a - b);\n\t});\n\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > largest){\n\t\t\
    \tlargest = numbers[i];\n\t\t}\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = Number.MAX_VALUE;\n\tvar closest_number = numbers[0];\n\tvar closest_number_distance\
    \ = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar\
    \ current_number = numbers[i];\n\t\tvar current_number_distance = current_number\
    \ - closest_number;\n\t\t\n\t\tif(current_number_distance < closest_number_distance){\n\
    \t\t\tclosest_number = current_number;\n\t\t\tclosest_number_distance = current_number_distance;\n\
    \t\t}\n\t\t\n\t\tclosest_numbers.push(closest_number);\n\t\tclosest_distances.push(closest_number_distance);\n\
    \t}\n\t\n\treturn [closest_numbers, closest_distances];\n}\n", "  var result =\
    \ [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var i\
    \ = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  result.push(smallest);\n  result.push(largest);\n  return result;\n\
    }\n", "  var result = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  result.push(smallest);\n  result.push(largest);\n\
    \  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar\
    \ j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\t\
    var r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\
    \tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_number\
    \ = numbers[i];\n\t\tvar current_distance = current_number;\n\t\t\n\t\tfor(var\
    \ j = i + 1; j < numbers.length; j++){\n\t\t\tvar next_number = numbers[j];\n\t\
    \t\tvar next_distance = next_number;\n\t\t\t\n\t\t\tvar difference = Math.abs(current_number\
    \ - next_number);\n\t\t\tif(difference < current_distance){\n\t\t\t\tcurrent_distance\
    \ = difference;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\
    \t\tclosest_distances.push(current_distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n\
    \            smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tnumbers = numbers.slice();\n\tnumbers.sort(function(a, b){return a-b});\n\
    \tvar closest = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\tfor(var i =\
    \ 0; i < numbers.length; i++){\n\t\tvar distance = numbers[i] - numbers[closest.length\
    \ - 1];\n\t\tif(distance < closest_distance){\n\t\t\tclosest = numbers.slice();\n\
    \t\t\tclosest.splice(closest.length - 1, 1);\n\t\t\tclosest_distance = distance;\n\
    \t\t}\n\t\tclosest.push(numbers[i]);\n\t}\n\treturn closest;\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\t\n\t\tif(current_distance\
    \ < 0){\n\t\t\tsmallest_number = current_number;\n\t\t}\n\t\telse{\n\t\t\tlargest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\
    \t\tclosest_numbers.push(largest_number);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length-1]];\n\
    }\n", "    var result = [];\n    var smallest = numbers[0];\n    var largest =\
    \ numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i]\
    \ < smallest){\n            smallest = numbers[i];\n        }\n        if(numbers[i]\
    \ > largest){\n            largest = numbers[i];\n        }\n    }\n    result.push(smallest);\n\
    \    result.push(largest);\n    return result;\n}\n", "\tvar smallest_number =\
    \ numbers[0];\n\tvar second_smallest_number = numbers[0];\n\tvar closest_numbers\
    \ = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(smallest_number\
    \ == second_smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\t\
    \t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "  var result = [];\n  var smallest\
    \ = numbers[0];\n  var largest = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n\
    \    if(numbers[i] > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tresult.push(i);\n\t}\n\treturn\
    \ result;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\
    \tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\t\tif (numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest_difference = numbers[0];\n\tvar closest_numbers = numbers;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tvar difference = numbers[i] - smallest_difference;\n\
    \t\tif(difference < smallest_difference){\n\t\t\tsmallest_difference = difference;\n\
    \t\t\tclosest_numbers = numbers;\n\t\t}else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar closest_elements = [];\n\t\
    for(var i = 1; i < numbers.length; i++){\n\t\tvar current_element = numbers[i];\n\
    \t\tvar closest_element = numbers[0];\n\t\tvar difference = Math.abs(current_element\
    \ - closest_element);\n\t\tfor(var j = 0; j < numbers.length; j++){\n\t\t\tvar\
    \ next_element = numbers[j];\n\t\t\tvar next_difference = Math.abs(next_element\
    \ - closest_element);\n\t\t\tif(next_difference < difference){\n\t\t\t\tdifference\
    \ = next_difference;\n\t\t\t\tclosest_element = next_element;\n\t\t\t}\n\t\t}\n\
    \t\tclosest_elements.push(closest_element);\n\t}\n\treturn closest_elements;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\t\
    var current_distance = Math.abs(current_number);\n\t\t\n\t\tfor(var j = 0; j <\
    \ closest_numbers.length; j++){\n\t\t\tvar closest_number = closest_numbers[j];\n\
    \t\t\tvar closest_distance = Math.abs(closest_number);\n\t\t\t\n\t\t\tif(closest_distance\
    \ < current_distance){\n\t\t\t\tclosest_numbers[j] = current_number;\n\t\t\t\t\
    closest_distances[j] = current_distance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\
    \t\tclosest_distances.push(current_distance);\n\t}\n\t\n\treturn [closest_numbers[0],\
    \ closest_numbers[closest_numbers.length - 1]];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_index = 0;\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    \tclosest_index = i;\n\t\t}\n\t\telse if(numbers[i] > largest_number){\n\t\t\t\
    largest_number = numbers[i];\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\
    \tif(smallest_number > numbers[i]){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\t\n\t\tif(second_smallest_number > numbers[i]){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\t\
    closest_numbers.push(second_smallest_number);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_distance\
    \ = Number.MAX_VALUE;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar\
    \ distance = numbers[i] - numbers[closest_numbers.length];\n\t\t\n\t\tif(distance\
    \ < smallest_distance){\n\t\t\tsmallest_distance = distance;\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t\tclosest_distances.push(smallest_distance);\n\t\t}else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t\tclosest_distances.push(distance);\n\t\t}\n\t}\n\t\n\treturn closest_numbers.concat(closest_distances);\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i] - numbers[i\
    \ - 1];\n\t\t\n\t\tif(current_distance < 0){\n\t\t\tcurrent_distance = -current_distance;\n\
    \t\t}\n\t\t\n\t\tclosest_numbers.push(numbers[i]);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\tclosest_numbers.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\t\n\
    \treturn [closest_numbers[0], closest_numbers[closest_numbers.length - 1]];\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar closest_numbers = [];\n\tfor(var i = smallest; i <= largest; i++){\n\t\t\
    for(var j = smallest; j <= largest; j++){\n\t\t\tif(Math.abs(i - j) < Math.abs(smallest-largest)){\n\
    \t\t\t\tclosest_numbers.push(j);\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest_diff;\n\tvar smallest_diff_index;\n\tvar smallest_diff_value;\n\
    \tvar smallest_diff_number;\n\tvar smallest_diff_number_index;\n\tvar smallest_diff_number_value;\n\
    \tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\
    \tvar q;\n\tvar r;\n\tvar smallest_diff_index;\n\tvar smallest_diff_value;\n\t\
    var smallest_diff_number;\n\tvar smallest_diff_number_index;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\tvar smallest_diff_number_value;\n\
    \tvar smallest_diff_number_value;\n", "\tvar smallest_number = numbers[0];\n\t\
    var biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(biggest_number < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "  var smallest\
    \ = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n\
    \  }\n  return result;\n}\n", "\tvar closest_elements = [];\n\t\n\tfor(var i =\
    \ 0; i < numbers.length; i++){\n\t\tvar current_element = numbers[i];\n\t\tvar\
    \ current_index = i;\n\t\t\n\t\tfor(var j = i + 1; j < numbers.length; j++){\n\
    \t\t\tvar next_element = numbers[j];\n\t\t\tvar next_index = j;\n\t\t\t\n\t\t\t\
    var distance = Math.abs(next_element - current_element);\n\t\t\t\n\t\t\tif(distance\
    \ < Math.abs(next_element - numbers[current_index])){\n\t\t\t\tcurrent_index =\
    \ next_index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_elements.push(numbers[current_index]);\n\
    \t}\n\t\n\treturn closest_elements;\n}\n", "    var smallest = Math.min(numbers);\n\
    \    var largest = Math.max(numbers);\n    var result = [];\n    var i;\n    for(i\
    \ = 0; i < numbers.length; i++){\n        if(numbers[i] === smallest || numbers[i]\
    \ === largest){\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\
    \tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar closest_number =\
    \ numbers[0];\n\tvar closest_distance = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i] - closest_number;\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_number = numbers[i];\n\t\t\tclosest_distance\
    \ = current_distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\
    \tclosest_distances.push(closest_distance);\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i];\n\t\
    \t\n\t\tfor(var j = 0; j < numbers.length; j++){\n\t\t\tif(j != i){\n\t\t\t\t\
    var distance = numbers[j] - current_distance;\n\t\t\t\t\n\t\t\t\tif(closest_distances.length\
    \ == 0 || distance < closest_distances[j]){\n\t\t\t\t\tclosest_distances[j] =\
    \ distance;\n\t\t\t\t\tclosest_numbers[j] = numbers[j];\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tlet smallest = numbers[0];\n\
    \tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\t\t\
    if (numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0],\
    \ numbers[1]);\n\tvar result = [];\n\tfor(var i = 2; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest || numbers[i] > largest){\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "    var smallest = numbers[0];\n    var largest\
    \ = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < smallest){\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest){\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "\tvar closest_elements = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\t\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number\
    \ = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_elements.push(smallest_number);\n\t\
    closest_elements.push(largest_number);\n\t\n\treturn closest_elements;\n}\n",
  "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var closest_numbers = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\tvar closest_index\
    \ = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[closest_index];\n\t\tif(distance < closest_distance){\n\t\t\tclosest_distance\
    \ = distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "  var smallest_distance = Number.MAX_VALUE;\n  var closest_numbers = [];\n\
    \  var closest_numbers_index = 0;\n  var i;\n  for(i = 0; i < numbers.length;\
    \ i++){\n    var distance = numbers[i] - numbers[closest_numbers_index];\n   \
    \ if(distance < smallest_distance){\n      smallest_distance = distance;\n   \
    \   closest_numbers_index = i;\n    }\n  }\n  closest_numbers.push(numbers[closest_numbers_index]);\n\
    \  closest_numbers.push(numbers[closest_numbers_index + 1]);\n  return closest_numbers;\n\
    }\n", "\tlet min_diff = Number.MAX_VALUE;\n\tlet min_diff_index = 0;\n\tlet min_diff_value\
    \ = numbers[0];\n\tlet min_diff_value_index = -1;\n\tlet max_diff_value = numbers[0];\n\
    \tlet max_diff_value_index = -1;\n\tfor (let i = 1; i < numbers.length; i++){\n\
    \t\tlet diff = numbers[i] - numbers[i - 1];\n\t\tif (diff < min_diff){\n\t\t\t\
    min_diff = diff;\n\t\t\tmin_diff_index = i;\n\t\t\tmin_diff_value = numbers[i];\n\
    \t\t\tmin_diff_value_index = i;\n\t\t} else if (diff > max_diff){\n\t\t\tmax_diff\
    \ = diff;\n\t\t\tmax_diff_index = i;\n\t\t\tmax_diff_value = numbers[i];\n\t\t\
    \tmax_diff_value_index = i;\n\t\t}\n\t}\n\tlet result = [min_diff_value];\n\t\
    result.push(max_diff_value);\n\treturn result;\n}\n", "  var smallest = Math.min.apply(null,\
    \ numbers);\n  var largest = Math.max.apply(null, numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "    var result = [];\n    var smallest = Math.min(numbers[0],\
    \ numbers[1]);\n    var largest = Math.max(numbers[0], numbers[1]);\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] < smallest || numbers[i]\
    \ > largest){\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(null, numbers);\n\tvar largest\
    \ = Math.max.apply(null, numbers);\n\tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tresult.push(smallest);\n\t\t}\n\t\telse\
    \ if(numbers[i] == largest){\n\t\t\tresult.push(largest);\n\t\t}\n\t\telse{\n\t\
    \t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_elements\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\
    \tclosest_elements.push(largest_number);\n\treturn closest_elements;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tresult.push(i);\n\t}\n\treturn result;\n}\n", "    var smallest = Math.min.apply(Math,\
    \ numbers);\n    var largest = Math.max.apply(Math, numbers);\n    var result\
    \ = [];\n    for(var i = smallest; i <= largest; i++){\n        result.push(i);\n\
    \    }\n    return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i] - numbers[i - 1];\n\t\t\n\t\tif(closest_distances.length == 0 ||\
    \ current_distance < closest_distances[closest_distances.length - 1]){\n\t\t\t\
    closest_distances.push(current_distance);\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(null,\
    \ numbers);\n  var largest = Math.max.apply(null, numbers);\n  var result = [];\n\
    \  var i, diff;\n  for(i = 0; i < numbers.length; i++){\n    diff = numbers[i]\
    \ - smallest;\n    if(diff > 0){\n      smallest = numbers[i];\n    }\n    else\
    \ if(diff < 0){\n      largest = numbers[i];\n    }\n    result.push(smallest);\n\
    \    result.push(largest);\n  }\n  return result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\
    \tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\
    \t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_distance = find_closest_distance(numbers[i],\
    \ numbers);\n\t\t\n\t\tif(current_distance == 0){\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t\tclosest_distances.push(current_distance);\n\t\t}\n\t\telse if(current_distance\
    \ < closest_distances[i]){\n\t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_distances[i]\
    \ = current_distance;\n\t\t}\n\t\telse if(current_distance > closest_distances[i]){\n\
    \t\t\tclosest_numbers.push(numbers[closest_distances.indexOf(current_distance)]);\n\
    \t\t\tclosest_distances[i] = current_distance;\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_elements = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_elements.push(smallest_number);\n\tclosest_elements.push(largest_number);\n\
    \treturn closest_elements;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\t\
    if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t\
    }\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\t\n\treturn closest_numbers;\n}\n",
  "\tlet min_diff = Number.MAX_VALUE;\n\tlet min_diff_index = 0;\n\tlet min_number\
    \ = numbers[0];\n\tlet max_number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++){\n\t\tlet diff = numbers[i] - min_number;\n\t\tif (diff < min_diff){\n\t\
    \t\tmin_diff = diff;\n\t\t\tmin_diff_index = i;\n\t\t\tmin_number = numbers[i];\n\
    \t\t} else if (diff > min_diff){\n\t\t\tmax_number = numbers[i];\n\t\t}\n\t}\n\
    \treturn [min_number, max_number];\n}\n", "\tvar smallest = Math.min(numbers);\n\
    \tvar largest = Math.max(numbers);\n\tvar closest_numbers = [];\n\tfor(var i=0;\
    \ i<numbers.length; i++){\n\t\tif(numbers[i] == smallest || numbers[i] == largest){\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t}\n\t\telse if(Math.abs(numbers[i]\
    \ - smallest) < Math.abs(numbers[i] - largest)){\n\t\t\tclosest_numbers.push(smallest);\n\
    \t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(largest);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar distance = numbers[i] - numbers[closest_numbers.length];\n\
    \t\t\n\t\tif(closest_numbers.length == 0 || distance < closest_distances[closest_numbers.length]){\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_distances.push(distance);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tvar i, j, k;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tfor(j = i + 1; j <\
    \ numbers.length; j++){\n\t\t\tfor(k = 0; k < numbers.length; k++){\n\t\t\t\t\
    if(numbers[i] === numbers[j] && numbers[i] === numbers[k]){\n\t\t\t\t\tresult.push(numbers[i]);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  var\
    \ result = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  result.push(smallest);\n  result.push(largest);\n  return result;\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar closest_numbers = [];\n\tvar closest_number = smallest;\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t}\n\
    \t\telse if(numbers[i] == largest){\n\t\t\tclosest_numbers.push(largest);\n\t\t\
    }\n\t\telse{\n\t\t\tvar difference = Math.abs(numbers[i]-closest_number);\n\t\t\
    \tif(difference < closest_number){\n\t\t\t\tclosest_number = difference;\n\t\t\
    \t\tclosest_numbers.push(numbers[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distance\
    \ = Number.MAX_VALUE;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar\
    \ current_distance = distance_between(numbers[i], numbers[(i+1)%numbers.length]);\n\
    \t\tif(current_distance < closest_distance){\n\t\t\tclosest_distance = current_distance;\n\
    \t\t\tclosest_numbers = [numbers[i], numbers[(i+1)%numbers.length]];\n\t\t}\n\t\
    }\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\tvar closest_number = numbers[0];\n\
    \tvar closest_index = 0;\n\tvar i;\n\tfor(i = 1; i < numbers.length; i++){\n\t\
    \tvar current_distance = numbers[i] - closest_number;\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_number\
    \ = numbers[i];\n\t\tvar current_distance = Math.abs(current_number);\n\t\t\n\t\
    \tfor(var j = 0; j < numbers.length; j++){\n\t\t\tvar other_number = numbers[j];\n\
    \t\t\tvar other_distance = Math.abs(other_number);\n\t\t\t\n\t\t\tif(current_distance\
    \ < other_distance){\n\t\t\t\tcurrent_distance = other_distance;\n\t\t\t\tcurrent_number\
    \ = other_number;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\
    \t\tclosest_distances.push(current_distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\
    var smallest_distance = Number.MAX_VALUE;\n\tvar closest_number = null;\n\tvar\
    \ closest_distance = null;\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar\
    \ distance = numbers[i] - closest_number;\n\t\t\n\t\tif(distance < smallest_distance){\n\
    \t\t\tsmallest_distance = distance;\n\t\t\tclosest_number = numbers[i];\n\t\t\t\
    closest_distance = distance;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(closest_number);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\t\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar closest_number\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\tvar i;\n\tfor(i=2; i<numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance = numbers[i-1];\n\
    \t\tif(current_distance > closest_distance){\n\t\t\tclosest_number = current_number;\n\
    \t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t\
    }\n\tclosest_numbers.push(closest_number);\n\tclosest_distances.push(closest_distance);\n\
    \treturn [closest_numbers, closest_distances];\n}\n", "  var result = [];\n  var\
    \ smallest = numbers[0];\n  var largest = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n\
    \    if(numbers[i] > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_distances = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\t\n\t\tfor(var j = 0; j < numbers.length;\
    \ j++){\n\t\t\tvar other_number = numbers[j];\n\t\t\t\n\t\t\tvar distance = current_number\
    \ - other_number;\n\t\t\t\n\t\t\tif(closest_distances.indexOf(distance) == -1){\n\
    \t\t\t\tclosest_distances.push(distance);\n\t\t\t\tclosest_numbers.push(other_number);\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\t\n\t\tif(current_distance < 0){\n\t\t\tsmallest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tif(current_distance > 0){\n\t\t\tlargest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\t\
    \tclosest_distances.push(current_distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n \
    \ for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n \
    \     smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar closest_elements\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\
    \tclosest_elements.push(largest_number);\n\treturn closest_elements;\n}\n", " \
    \   var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n         \
    \   smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n   \
    \         largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
