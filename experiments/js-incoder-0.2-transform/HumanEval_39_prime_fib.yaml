name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["  var a = 0, b = 1, c;\n  for(var i = 0; i < n; i++){\n    c = a +\
    \ b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n", "  var a = 0, b = 1, c;\n\
    \  for(var i = 0; i < n; i++){\n    c = a + b;\n    a = b;\n    b = c;\n  }\n\
    \  return b;\n}\n", "    var i = 1;\n    var result = 1;\n    while(i <= n){\n\
    \        result = result + i;\n        i++;\n    }\n    return result;\n}\n",
  "  var a = 0, b = 1, c = 1, d = 1, e;\n  for(var i = 0; i < n; i++){\n    e = a\
    \ + b + c;\n    d = b + c;\n    b = e;\n    c = d;\n    a = e;\n  }\n  return\
    \ a;\n}\n", "    var i, fib_number, prime_number;\n    for(i=1;i<=n;i++){\n  \
    \      fib_number = i-1;\n        prime_number = 1;\n        while(fib_number>0){\n\
    \            prime_number*=fib_number;\n            fib_number--;\n        }\n\
    \        if(prime_number==1){\n            return i;\n        }\n    }\n}", " \
    \ var a = [1,2];\n  for(var i=3;i<=n;i++){\n    var b = a[i-1]+a[i-2];\n    a[i-1]\
    \ = a[i-2];\n    a[i-2] = b;\n  }\n  return a[n-1];\n}\n", "  var a = 0,\n   \
    \   b = 1,\n      c = 2,\n      d = 1;\n  while(b < n){\n    d += c;\n    c =\
    \ b;\n    b = a;\n    a = d;\n  }\n  return a;\n}\n", "    var ret=1;\n    for(var\
    \ i=2;i<=n;i++){\n        if(prime[i]){\n            ret=prime[i];\n         \
    \   break;\n        }\n    }\n    return ret;\n}\n", "  var i, a, b = 0, c = 1,\
    \ d = 1;\n  for(i = 2; i <= n; i++){\n    a = b;\n    b = c;\n    c = a + d;\n\
    \    d = (a % d) + b;\n  }\n  return c;\n}\n", "  var a = 1, b = 1, c = 1, d =\
    \ 1, e = 0, f = 0;\n  while(n){\n    var m = Math.floor((n-1)/2);\n    if(n %\
    \ 2 == 0){\n      f = a;\n      a = b;\n      b = m*a + c;\n      c = d;\n   \
    \   d = e;\n      e = m*d + f;\n    }\n    else{\n      f = b;\n      b = c;\n\
    \      c = m*a + d;\n      d = e;\n      e = m*e + f;\n    }\n    n = Math.floor(n/2);\n\
    \  }\n  return e;\n}\n", "  var a = 1, b = 2, i;\n  for(i = 3; i <= n; i += 2){\n\
    \    if(n % i == 0){\n      b = i;\n      break;\n    }\n  }\n  return b;\n}\n",
  "    if(n < 2){\n        return n;\n    }\n    if(n === 2){\n        return 2;\n\
    \    }\n    if(n % 2 === 0){\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2);\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\n", "  if (n\
    \ < 2){\n    return 1;\n  }\n  if (n === 2){\n    return 2;\n  }\n  if (n % 2\
    \ == 0){\n    return prime_fib(Math.floor(n / 2)) + prime_fib(Math.floor(n / 2)\
    \ + 1);\n  }\n  else{\n    return prime_fib(Math.floor(n / 2)) + prime_fib(Math.floor(n\
    \ / 2) + 1);\n  }\n}\n", "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n\
    \ - 1) + 1;\n  if (n % 2 == 0) return prime_fib(n - 1) + 2;\n  if (n % 3 == 0)\
    \ return prime_fib(n - 1) + 3;\n  if (n % 5 == 0) return prime_fib(n - 1) + 5;\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2) + 1;\n}\n", "  var a = 0, b = 1,\
    \ c = 1, d = 1;\n  while(b < n){\n    var q = Math.floor((a + b) / 2);\n    if(q\
    \ * q === a * b){\n      c = q;\n      d = b;\n    }\n    else {\n      a = b;\n\
    \      b = q;\n    }\n  }\n  return d;\n}\n", "  var a = [1,1];\n  for(var i=2;\
    \ i<=n; i++){\n    a.push(a[i-1]+a[i-2]);\n  }\n  return a[n-1];\n}\n", "  var\
    \ i = 1;\n  var primes = [];\n  while(i*i <= n){\n    if(n % i == 0){\n      primes.push(i);\n\
    \      i += 2;\n    }else{\n      i += 1;\n    }\n  }\n  return primes[primes.length-1];\n\
    }\n", "  if (n < 2) return 1;\n  if (n < 4) return prime_fib(n - 1) + 1;\n  if\
    \ (n < 9) return prime_fib(n - 3) + prime_fib(n - 2) + 1;\n  return prime_fib(n\
    \ - 5) + prime_fib(n - 4) + prime_fib(n - 3) + 1;\n}\n", "    var i = 1;\n   \
    \ var fib_num;\n    while(i <= n){\n        fib_num = i;\n        i = i + 2;\n\
    \        if(fib_num % 2 === 0){\n            fib_num = fib_num + 1;\n        }\n\
    \    }\n    return fib_num;\n}\n", "  var prime_fib_number = prime_fib_cache[n];\n\
    \  if(prime_fib_number!==undefined){\n    return prime_fib_number;\n  }\n  if(prime_fib_cache[n]===undefined){\n\
    \    prime_fib_cache[n]=prime_fib_number=(Math.sqrt(n)+1)/2;\n    for(var i=2;i<=prime_fib_number;i++){\n\
    \      if(prime_fib_cache[n+i]===undefined){\n        prime_fib_cache[n+i]=prime_fib_number+i;\n\
    \      }\n    }\n  }\n  return prime_fib_cache[n];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
