name: HumanEval_25_factorize
language: js
prompt: "//Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
  \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
  \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
  \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
completions: ["\tvar factors = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\t\
    if(n%i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n\
    }\n", "\tvar factors = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\tif(n%i\
    \ == 0){\n\t\t\tfactors.push(i);\n\t\t\tn = n/i;\n\t\t}\n\t}\n\treturn factors;\n\
    }\n", "\tlet factors = [];\n\tlet factorization = [];\n\tlet primeFactors = [];\n\
    \tlet primeFactorsCount = 0;\n\tlet primeFactorsSum = 0;\n\tlet factorizationSum\
    \ = 0;\n\tlet factorizationCount = 0;\n\tlet factorizationSum2 = 0;\n\tlet factorizationCount2\
    \ = 0;\n\tlet factorizationSum3 = 0;\n\tlet factorizationCount3 = 0;\n\tlet factorizationSum4\
    \ = 0;\n\tlet factorizationCount4 = 0;\n\tlet factorizationSum5 = 0;\n\tlet factorizationCount5\
    \ = 0;\n\tlet factorizationSum6 = 0;\n\tlet factorizationCount6 = 0;\n\tlet factorizationSum7\
    \ = 0;\n\tlet factorizationCount7 = 0;\n\tlet factorizationSum8 = 0;\n\tlet factorizationCount8\
    \ = 0;\n\tlet factorizationSum9 = 0;\n\tlet factorizationCount9 = 0;\n\tlet factorizationSum10\
    \ = 0;\n\tlet factorizationCount10 = 0;\n\tlet factorizationSum11 = 0;\n\tlet\
    \ factorizationCount11 = 0;\n\tlet factorizationSum12 = 0;\n\tlet factorizationCount12\
    \ = 0;\n\tlet factorizationSum13 = 0;\n\tlet factorizationCount13 = 0;\n\tlet\
    \ factorizationSum14 = 0;\n\tlet factorizationCount14 = 0;\n\tlet factorizationSum15\
    \ = 0;\n\tlet factorizationCount15 = 0;\n\tlet factorizationSum16 = 0;\n\tlet\
    \ factorizationCount16 = 0;\n\tlet factorizationSum17 = 0;\n\tlet factorizationCount17\
    \ = 0;\n\tlet factorizationSum18 = 0;\n\tlet factorizationCount18 = 0;\n\tlet\
    \ factorizationSum19 = 0;\n\tlet factorizationCount19 = 0;\n\tlet factorizationSum20\
    \ = 0;\n\tlet factorizationCount20 = 0;\n\tlet factorizationSum21 = 0;\n\tlet\
    \ factorizationCount21 = 0;\n\tlet factorizationSum22 = 0;\n\tlet factorizationCount22\
    \ = 0;\n\tlet factorizationSum23 = 0;\n\tlet factorizationCount23 = 0;\n\tlet\
    \ factorizationSum24 = 0;\n\tlet factorizationCount24 = 0;\n\tlet factorizationSum25\
    \ = 0;\n\tlet factorizationCount25 = 0;\n\tlet factorizationSum26 = 0;\n\tlet\
    \ factorizationCount26 = 0;\n\tlet factorizationSum27 = 0;\n\tlet factorizationCount27\
    \ = 0;\n\tlet factorizationSum28 = 0;\n\tlet factorizationCount28 = 0;\n\tlet\
    \ factorizationSum29 = 0;\n\tlet factorizationCount29 = 0;\n\tlet factorizationSum30\
    \ = 0;\n\tlet factorizationCount30 = 0;\n\tlet factorizationSum31 = 0;\n\t", "\t\
    let factors = [];\n\tlet factor = 1;\n\tlet factorization = [];\n\tlet factorizationIndex\
    \ = 0;\n\tlet factorizationArray = [];\n\tlet factorizationArrayIndex = 0;\n\t\
    let factorizationArrayIndex2 = 0;\n\tlet factorizationArrayIndex3 = 0;\n\tlet\
    \ factorizationArrayIndex4 = 0;\n\tlet factorizationArrayIndex5 = 0;\n\tlet factorizationArrayIndex6\
    \ = 0;\n\tlet factorizationArrayIndex7 = 0;\n\tlet factorizationArrayIndex8 =\
    \ 0;\n\tlet factorizationArrayIndex9 = 0;\n\tlet factorizationArrayIndex10 = 0;\n\
    \tlet factorizationArrayIndex11 = 0;\n\tlet factorizationArrayIndex12 = 0;\n\t\
    let factorizationArrayIndex13 = 0;\n\tlet factorizationArrayIndex14 = 0;\n\tlet\
    \ factorizationArrayIndex15 = 0;\n\tlet factorizationArrayIndex16 = 0;\n\tlet\
    \ factorizationArrayIndex17 = 0;\n\tlet factorizationArrayIndex18 = 0;\n\tlet\
    \ factorizationArrayIndex19 = 0;\n\tlet factorizationArrayIndex20 = 0;\n\tlet\
    \ factorizationArrayIndex21 = 0;\n\tlet factorizationArrayIndex22 = 0;\n\tlet\
    \ factorizationArrayIndex23 = 0;\n\tlet factorizationArrayIndex24 = 0;\n\tlet\
    \ factorizationArrayIndex25 = 0;\n\tlet factorizationArrayIndex26 = 0;\n\tlet\
    \ factorizationArrayIndex27 = 0;\n\tlet factorizationArrayIndex28 = 0;\n\tlet\
    \ factorizationArrayIndex29 = 0;\n\tlet factorizationArrayIndex30 = 0;\n\tlet\
    \ factorizationArrayIndex31 = 0;\n\tlet factorizationArrayIndex32 = 0;\n\tlet\
    \ factorizationArrayIndex33 = 0;\n\tlet factorizationArrayIndex34 = 0;\n\tlet\
    \ factorizationArrayIndex35 = 0;\n\tlet factorizationArrayIndex36 = 0;\n\tlet\
    \ factorizationArrayIndex37 = 0;\n\tlet factorizationArrayIndex38 = 0;\n\tlet\
    \ factorizationArrayIndex39 = 0;\n\tlet factorizationArrayIndex40 = 0;\n\tlet\
    \ factorizationArrayIndex41 = 0;\n\tlet factorizationArrayIndex42 = 0;\n\tlet\
    \ factorizationArrayIndex43 = 0;\n\tlet factorizationArrayIndex44 = 0;\n\tlet\
    \ factorizationArrayIndex45 = 0;\n\tlet factorizationArrayIndex46 = 0;\n\tlet\
    \ factorizationArrayIndex47 = 0;\n\tlet factorizationArrayIndex48 = 0;\n\tlet\
    \ factorizationArrayIndex49 = 0;\n\tlet factorizationArrayIndex50 = 0;\n\tlet\
    \ factorizationArrayIndex51 = 0;\n\tlet factorizationArrayIndex52 = 0;\n\tlet\
    \ factorizationArrayIndex53 = 0;\n\tlet factorizationArrayIndex54 = 0;\n\t", "\t\
    var factors = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\tif(n%i == 0){\n\
    \t\t\tfactors.push(i);\n\t\t\tn = n/i;\n\t\t}\n\t}\n\treturn factors;\n}\n", " \
    \   var factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n\
    \ % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n\
    \    }\n    return factors;\n}\n", "\tlet factors = [];\n\tlet factor = 1;\n\t\
    let i = 1;\n\twhile(factor * i <= n){\n\t\twhile(n % factor == 0){\n\t\t\tfactors.push(factor);\n\
    \t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t\ti++;\n\t}\n\tif(n > 1){\n\t\tfactors.push(factor);\n\
    \t}\n\treturn factors;\n}\n", "    var factors = [];\n    for(var i = 2; i <=\
    \ Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \            n = n/i;\n        }\n    }\n    return factors;\n}\n", "\tvar factors\
    \ = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\tif(n%i == 0){\n\t\t\t\
    factors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\n", "\tvar factors\
    \ = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\tif(n%i == 0){\n\t\t\t\
    factors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\n", "    var\
    \ factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i\
    \ == 0){\n            factors.push(i);\n            factors.push(n / i);\n   \
    \     }\n    }\n    return factors;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \            while(n % i == 0){\n                n /= i;\n            }\n    \
    \    }\n    }\n    return factors;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\n", "\tvar factors\
    \ = [];\n\tvar factor = 1;\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\t\twhile(n\
    \ % i == 0){\n\t\t\tfactors.push(factor);\n\t\t\tn /= i;\n\t\t\tfactor = 1;\n\t\
    \t}\n\t\tfactor++;\n\t}\n\tfactors.push(factor);\n\treturn factors;\n}\n", " \
    \   var factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n\
    \ % i == 0){\n            factors.push(i);\n            n /= i;\n        }\n \
    \   }\n    factors.push(n);\n    return factors;\n}\n", "    var factors = [];\n\
    \    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n      \
    \      factors.push(i);\n            n = n / i;\n        }\n    }\n    return\
    \ factors;\n}\n", "\tlet factors = [];\n\tlet factorization = factor(n);\n\tlet\
    \ primeFactors = factorization.primeFactors;\n\tlet primeFactorsCount = factorization.primeFactorsCount;\n\
    \tlet factorsCount = factorization.factorsCount;\n\tlet factorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactors;\n\tlet factorsCountInPrimeFactorsCount\
    \ = factorization.factorsCountInPrimeFactorsCount;\n\tlet factorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactors;\n\tlet factorsCountInPrimeFactorsCountInPrimeFactorsCount\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCount;\n\tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors;\n\
    \tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCount =\
    \ factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCount;\n\
    \tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors;\n\
    \tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors;\n\
    \tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factorization.factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors;\n\
    \tlet factorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactorsCountInPrimeFactors\
    \ = factor", "\tvar factors = [];\n\tfor(var i = 2; i <= Math.sqrt(n); i++){\n\
    \t\tif(n%i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn\
    \ factors;\n}\n", "\tlet factors = [];\n\tlet primeFactors = [];\n\tlet isPrime\
    \ = true;\n\tlet isPrimeFactor = true;\n\tlet isFactor = true;\n\tlet isFactorFactor\
    \ = true;\n\tlet isFactorFactorFactor = true;\n\tlet isFactorFactorFactorFactor\
    \ = true;\n\tlet isFactorFactorFactorFactorFactor = true;\n\tlet isFactorFactorFactorFactorFactorFactor\
    \ = true;\n\tlet isFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor",
  "    var factors = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n\
    \ % i == 0){\n            factors.push(i);\n            n /= i;\n        }\n \
    \   }\n    return factors;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
