language: js
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for (var i = 0; i < arr.length; i++){\n    var num = arr[i];\n    if\
    \ (num >= 1 && num <= 9){\n      result.push(by_length_map[num]);\n    }\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps7rnfwio.js:18\n      result.push(by_length_map[num]);\n      \
    \            ^\n\nReferenceError: by_length_map is not defined\n    at by_length\
    \ (/tmp/tmps7rnfwio.js:18:19)\n    at test (/tmp/tmps7rnfwio.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmps7rnfwio.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    var num = arr[i];\n    if(num>0\
    \ && num<=9){\n      result.push(by_digit(num, i));\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7_k5ms30.js:18\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp7_k5ms30.js:18:14)\n\
    \    at test (/tmp/tmp7_k5ms30.js:29:20)\n    at Object.<anonymous> (/tmp/tmp7_k5ms30.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var len = arr.length;\n  var i = 0;\n  while(i < len){\n    var num\
    \ = arr[i];\n    if(num < 1 || num > 9){\n      i++;\n      continue;\n    }\n\
    \    var index = num - 1;\n    var name = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n\
    \    i++;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpddzi2_vj.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpddzi2_vj.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0){\n    return [];\n  }\n  if(arr.length == 1){\n    return [\"One\"];\n\
    \  }\n  if(arr.length == 2){\n    return [\"One\", \"Two\"];\n  }\n  if(arr.length\
    \ == 3){\n    return [\"One\", \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n\
    \    return [\"One\", \"Two\", \"Three\", \"Four\"];\n  }\n  if(arr.length ==\
    \ 5){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length\
    \ == 6){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    ];\n  }\n  if(arr.length == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n\
    \  }\n  if(arr.length == 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpxcj38oic.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxcj38oic.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).concat(arr.slice(i)));\n\
    \    }else{\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpb1x7se6k.js:30:10)\n    at Object.<anonymous> (/tmp/tmpb1x7se6k.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var len = arr.length;\n  var i;\n  for(i = 0; i < len; i++){\n    var\
    \ num = arr[i];\n    if(num < 1 || num > 9){\n      continue;\n    }\n    result.push(names[num\
    \ - 1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpztfc6r9a.js:22\n    result.push(names[num - 1]);\n            \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpztfc6r9a.js:22:17)\n\
    \    at test (/tmp/tmpztfc6r9a.js:32:20)\n    at Object.<anonymous> (/tmp/tmpztfc6r9a.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    var num = arr[i];\n    if(num>9){\n\
    \      num = num - 10;\n    }\n    result.push(by_digit[num]);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8i1elqpz.js:20\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp8i1elqpz.js:20:17)\n\
    \    at test (/tmp/tmp8i1elqpz.js:30:20)\n    at Object.<anonymous> (/tmp/tmp8i1elqpz.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      result.push(by_length_arr[arr[i]]);\n    }\n  }\n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpai1tc01z.js:17\n      result.push(by_length_arr[arr[i]]);\n   \
    \               ^\n\nReferenceError: by_length_arr is not defined\n    at by_length\
    \ (/tmp/tmpai1tc01z.js:17:19)\n    at test (/tmp/tmpai1tc01z.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpai1tc01z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(\"\
    \"));\n      arr.splice(i,1);\n      i--;\n    }\n  }\n  if(arr.length){\n   \
    \ result.push(by_length(arr).join(\"\"));\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmfae33k0.js:13\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpmfae33k0.js:13:19)\n\
    \    at by_length (/tmp/tmpmfae33k0.js:23:17)\n    at by_length (/tmp/tmpmfae33k0.js:23:17)\n\
    \    at by_length (/tmp/tmpmfae33k0.js:23:17)\n    at by_length (/tmp/tmpmfae33k0.js:23:17)\n\
    \    at by_length (/tmp/tmpmfae33k0.js:23:17)\n    at by_length (/tmp/tmpmfae33k0.js:23:17)\n\
    \    at by_length (/tmp/tmpmfae33k0.js:23:17)\n    at by_length (/tmp/tmpmfae33k0.js:23:17)\n\
    \    at by_length (/tmp/tmpmfae33k0.js:23:17)\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n\
    \    if(num >= 1 && num <= 9){\n      result.push(by_digit(num, i));\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03x8l3md.js:18\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp03x8l3md.js:18:14)\n\
    \    at test (/tmp/tmp03x8l3md.js:29:20)\n    at Object.<anonymous> (/tmp/tmp03x8l3md.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var len = arr.length;\n  for(var i=0; i<len; i++){\n    var num = arr[i];\n\
    \    if(num < 1 || num > 9){\n      continue;\n    }\n    var index = num - 1;\n\
    \    var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpttqagls5.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpttqagls5.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]>=1 && arr[i]<=9){\n \
    \     result.push(by_name[arr[i]]);\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpu9nwa7iu.js:17\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpu9nwa7iu.js:17:19)\n\
    \    at test (/tmp/tmpu9nwa7iu.js:28:20)\n    at Object.<anonymous> (/tmp/tmpu9nwa7iu.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n\
    \    if(num >= 1 && num <= 9){\n      result.push(names[num]);\n    }\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqhk8r19p.js:18\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpqhk8r19p.js:18:19)\n\
    \    at test (/tmp/tmpqhk8r19p.js:29:20)\n    at Object.<anonymous> (/tmp/tmpqhk8r19p.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      result.push(by_digit(arr[i]));\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp18o3z6l7.js:17\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp18o3z6l7.js:17:14)\n\
    \    at test (/tmp/tmp18o3z6l7.js:28:20)\n    at Object.<anonymous> (/tmp/tmp18o3z6l7.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    for(var i = 0, len = arr.length; i < len; i++){\n        var\
    \ num = arr[i];\n        if(num > 9){\n            result.push(by_length(num));\n\
    \        } else {\n            result.push(by_name(num));\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxqudeo07.js:20\n            result.push(by_name(num));\n      \
    \             ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpxqudeo07.js:20:20)\n\
    \    at test (/tmp/tmpxqudeo07.js:31:20)\n    at Object.<anonymous> (/tmp/tmpxqudeo07.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n\
    \    if(num < 1 || num > 9){\n      continue;\n    }\n    result.push(names[num]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8dj74gow.js:20\n    result.push(names[num]);\n                ^\n\
    \nReferenceError: names is not defined\n    at by_length (/tmp/tmp8dj74gow.js:20:17)\n\
    \    at test (/tmp/tmp8dj74gow.js:30:20)\n    at Object.<anonymous> (/tmp/tmp8dj74gow.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0; i<arr.length; i++){\n    var num = arr[i];\n    if(num\
    \ >= 1 && num <= 9){\n      result.push(num);\n    }\n  }\n  if(result.length){\n\
    \    result.sort(function(a, b){\n      return a-b;\n    });\n    for(var i=0;\
    \ i<result.length; i++){\n      result[i] = names[result[i]];\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplvxh6j75.js:26\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmplvxh6j75.js:26:19)\n\
    \    at test (/tmp/tmplvxh6j75.js:37:20)\n    at Object.<anonymous> (/tmp/tmplvxh6j75.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    var num = arr[i];\n    if(num>9){\n\
    \      num = num - 10;\n    }\n    result.push(by_digit[num]);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8i1elqpz.js:20\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp8i1elqpz.js:20:17)\n\
    \    at test (/tmp/tmp8i1elqpz.js:30:20)\n    at Object.<anonymous> (/tmp/tmp8i1elqpz.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()).concat(arr.slice(i)));\n\
    \    }else{\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp9vmf3n6f.js:30:10)\n    at Object.<anonymous> (/tmp/tmp9vmf3n6f.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n\
    \    if(num < 1 || num > 9){\n      continue;\n    }\n    var name = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][num - 1];\n    result.push(name);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpbe6oie8d.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbe6oie8d.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \  'One',\n    'One',  'Four',\n    'Five', 'Eight',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
