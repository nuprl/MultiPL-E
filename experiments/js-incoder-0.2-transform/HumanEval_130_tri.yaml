name: HumanEval_130_tri
language: js
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return a list of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
  \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
  \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n\
  \  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8,\
  \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["    var result = [];\n    for(var i = 1; i <= n; i++){\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    return result;\n}\n", "    let\
    \ arr = [];\n    for(let i = 1; i <= n; i++){\n        arr.push(i);\n    }\n \
    \   for(let i = 2; i <= n; i++){\n        arr.push(arr[i-1] + arr[i-2]);\n   \
    \ }\n    return arr;\n}\n", "  let result = [];\n  if(n<=1){\n    return [];\n\
    \  }\n  if(n%2==0){\n    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \  }\n  else{\n    result.push(tri(n - 1) + tri(n - 2));\n  }\n  return result;\n\
    }\n", "  let arr = [];\n  for(let i = 1; i <= n; i++){\n    arr.push((i%2 ===\
    \ 0)?i:(i-1)+(i-2)+(i+1));\n  }\n  return arr;\n}\n", "\tlet result = [];\n\t\
    let a = 1;\n\tlet b = 2;\n\tlet c = 1;\n\tlet d = 1;\n\tlet temp;\n\tfor(let i\
    \ = 0; i <= n; i++){\n\t\tif(i%2 === 0){\n\t\t\ttemp = a;\n\t\t\ta = b;\n\t\t\t\
    b = c;\n\t\t\tc = temp + d;\n\t\t\td = temp;\n\t\t}else{\n\t\t\ttemp = a;\n\t\t\
    \ta = b;\n\t\t\tb = c;\n\t\t\tc = temp + d;\n\t\t\td = temp;\n\t\t}\n\t\tresult.push(a);\n\
    \t}\n\treturn result;\n}\n", "    if (n === 0){\n        return [];\n    }\n \
    \   if (n === 1){\n        return [1];\n    }\n    if (n % 2 === 0){\n       \
    \ return [tri(n - 1) + tri(n - 2)];\n    }\n    return [tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)];\n}\n", "  var result = [];\n  for(var i = 1; i <= n; i++){\n\
    \    result.push(tri(i - 1) + tri(i - 2) + tri(i + 1));\n  }\n  return result;\n\
    }\n", "\tif(n<=0){\n\t\treturn [];\n\t}\n\tif(n%2==0){\n\t\treturn [n,tri(n-1)+tri(n-2)+tri(n+1),tri(n-1)+tri(n-2)];\n\
    \t}\n\treturn [n,tri(n-1)+tri(n-2)+tri(n+1)];\n}\n", "  var result = [];\n  \n\
    \  if(n<=0){\n    return result;\n  }\n  \n  if(n%2===0){\n    result.push(1);\n\
    \    result.push(2);\n  }\n  \n  if(n%2===1){\n    result.push(3);\n    result.push(tri(Math.floor(n\
    \ / 2)));\n    result.push(tri(Math.floor(n / 2) + 1));\n  }\n  \n  return result;\n\
    }\n", "    var result = [];\n    for(var i = 1; i <= n; i++){\n        result.push(tri(n\
    \ - i) + tri(n - i - 1) + tri(n - i - 2));\n    }\n    return result;\n}\n", " \
    \   let arr = [];\n    for(let i = 1; i <= n; i++){\n        arr.push(i);\n  \
    \  }\n    for(let i = 2; i <= n; i++){\n        arr.push(arr[i-1] + arr[i-2]);\n\
    \    }\n    return arr;\n}\n", "  let arr = [];\n  if(n<=1){\n    return arr;\n\
    \  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  if(n%2==0){\n    arr.push(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  return arr;\n}\n", "  let result = [];\n  if(n<=1){\n\
    \    return [];\n  }\n  if(n%2===0){\n    result.push(tri(n-1));\n    result.push(tri(n-2));\n\
    \    result.push(tri(n+2));\n  }\n  else{\n    result.push(tri(n-1));\n    result.push(tri(n-2));\n\
    \    result.push(tri(n+1));\n  }\n  return result;\n}\n", "    let arr = [];\n\
    \    let a = 0;\n    let b = 0;\n    let c = 0;\n    for(let i = 1; i <= n; i++){\n\
    \        a = b;\n        b = c;\n        c = a + b;\n        arr.push(c);\n  \
    \  }\n    return arr;\n}\n", "  let arr = [];\n  let a = 0;\n  let b = 0;\n  let\
    \ c = 0;\n  if(n%2==0){\n    a = 1;\n    b = 2;\n    c = 1;\n  }else{\n    a =\
    \ 3;\n    b = 3;\n    c = 2;\n  }\n  for(let i=0;i<=n;i++){\n    arr.push(a+b+c);\n\
    \    a = b;\n    b = c;\n    c = arr[i];\n  }\n  return arr;\n}\n", "    if (n\
    \ === 0){\n        return [];\n    }\n    if (n === 1){\n        return [1];\n\
    \    }\n    if (n === 2){\n        return [1, 1];\n    }\n    if (n % 2 === 0){\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 1);\n    }\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n",
  "  let arr = [];\n  for(let i = 1; i <= n; i++){\n    arr.push((i%2 == 0)?i:(i-1)+(i-2)+(i+1));\n\
    \  }\n  return arr;\n}\n", "    var result = [];\n    \n    for(var i = 1; i <=\
    \ n; i++){\n        result.push((i%2 === 0)?i:(i-1)+(i-2)+(i+1));\n    }\n   \
    \ \n    return result;\n}\n", "  if (n === 0) return [];\n  if (n === 1) return\
    \ [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 === 0) return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n", "  let arr = [];\n  for(let i\
    \ = 1; i <= n; i++){\n    arr.push((i%2 === 0)?i:(i+1)/2);\n  }\n  return arr;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
