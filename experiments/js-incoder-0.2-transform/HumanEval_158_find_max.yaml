name: HumanEval_158_find_max
language: js
prompt: "//Write a function that accepts a list of strings.\n// The list contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\"\
  );\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
  aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
  , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"\
  are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\",\
  \ \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"\
  ]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\"\
  );\n}\n\ntest();"
completions: ["    var max = 0;\n    var word = \"\";\n    for(var i=0; i<words.length;\
    \ i++){\n        word = words[i];\n        for(var j=0; j<word.length; j++){\n\
    \            max = Math.max(max, word.charCodeAt(j));\n        }\n    }\n    return\
    \ words[words.indexOf(word)];\n}\n", "  var max = 0;\n  var word = \"\";\n  for(var\
    \ i=0; i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        if(word.length>max){\n\
    \          max = word.length;\n        }\n      }\n    }\n  }\n  return word;\n\
    }\n", "    var max = 0;\n    var word = \"\";\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(word.indexOf(words[j])>-1){\n                if(word.indexOf(words[j])>max){\n\
    \                    max = word.indexOf(words[j]);\n                }\n      \
    \      }\n        }\n    }\n    return words[words.length-1];\n}", "    var max\
    \ = 0;\n    var word = \"\";\n    for(var i=0; i<words.length; i++){\n       \
    \ word = words[i];\n        for(var j=0; j<word.length; j++){\n            max\
    \ = Math.max(max, word.charCodeAt(j));\n        }\n    }\n    return words[words.indexOf(words[max])];\n\
    }\n", "  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] ==\
    \ word[max]){\n        max++;\n      }\n      else{\n        break;\n      }\n\
    \    }\n    if(max == word.length){\n      return word;\n    }\n  }\n  return\
    \ word;\n}\n", "  var max = 0;\n  var word = \"\";\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        words[j] = \"\";\n      }\n    }\n    for(var j=0; j<words.length; j++){\n\
    \      if(words[j].length>max){\n        max = words[j].length;\n      }\n   \
    \ }\n  }\n  return word;\n}\n", "    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\n", " \
    \   var max = 0;\n    var maxWord = \"\";\n    for(var i=0; i<words.length; i++){\n\
    \        var word = words[i];\n        var count = word.length;\n        if(count\
    \ > max){\n            max = count;\n            maxWord = word;\n        }\n\
    \    }\n    return maxWord;\n}\n", "    let maxCount = 0;\n    let maxWord = \"\
    \";\n    for(let word of words){\n        let count = word.length\n        if(count\
    \ > maxCount){\n            maxCount = count\n            maxWord = word\n   \
    \     }\n    }\n    return maxWord\n}\n", "  let maxCount = 0;\n  let maxWord\
    \ = \"\";\n  for (let i = 0; i < words.length; i++){\n    let count = 0;\n   \
    \ for (let j = 0; j < words[i].length; j++){\n      if (words[i][j] === \"a\"\
    ){\n        count++;\n      }\n    }\n    if (count > maxCount){\n      maxCount\
    \ = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n}\n", " \
    \   let max = 0;\n    let word = \"\";\n    for(let i = 0; i < words.length; i++){\n\
    \        for(let j = 0; j < words[i].length; j++){\n            word += words[i][j];\n\
    \            for(let k = 0; k < words.length; k++){\n                if(words[k].indexOf(word)\
    \ > -1){\n                    if(words[k].length >= max){\n                  \
    \      max = words[k].length;\n                        word = words[k];\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ word;\n}\n", "    var max = 0;\n    var word = \"\";\n    for(var i=0; i<words.length;\
    \ i++){\n        word = words[i];\n        for(var j=0; j<word.length; j++){\n\
    \            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n", "    var max = 0;\n    var word = \"\";\n    for(var i=0; i<words.length;\
    \ i++){\n        word = words[i];\n        for(var j=0; j<word.length; j++){\n\
    \            if(!words[j].hasOwnProperty(word[j])){\n                words[j][word[j]]\
    \ = 1;\n            }else{\n                words[j][word[j]] += 1;\n        \
    \    }\n        }\n    }\n    for(var key in words[0]){\n        if(words[0].hasOwnProperty(key)){\n\
    \            if(words[0][key] > max){\n                max = words[0][key];\n\
    \            }\n        }\n    }\n    return word;\n}\n", "    let max = 0;\n\
    \    let word = \"\";\n    for(let i = 0; i < words.length; i++){\n        word\
    \ = words[i];\n        for(let j = 0; j < word.length; j++){\n            if(words[j].length\
    \ >= max){\n                max = words[j].length;\n                word = words[j];\n\
    \            }\n        }\n    }\n    return word;\n}\n", "    var max = 0;\n\
    \    var word = \"\";\n    for(var i=0; i<words.length; i++){\n        word =\
    \ words[i];\n        for(var j=0; j<word.length; j++){\n            if(word.charAt(j)\
    \ == word.charAt(j)){\n                max++;\n            }\n        }\n    \
    \    if(max > word.length){\n            max = word.length;\n        }\n    }\n\
    \    return max;\n}\n", "    let maxCount = 0;\n    let maxWord = \"\";\n    words.forEach((word)\
    \ => {\n        let count = word.length\n        if(count > maxCount){\n     \
    \       maxCount = count\n            maxWord = word\n        }\n    })\n    return\
    \ maxWord\n}\n", "    let max = 0;\n    let word = \"\";\n    for(let i = 0; i\
    \ < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n", "    let maxCount = 0;\n    let maxWord = \"\"\
    ;\n    words.forEach((word) => {\n        let count = word.length\n        if(count\
    \ > maxCount){\n            maxCount = count\n            maxWord = word\n   \
    \     }\n    })\n    return maxWord\n}\n", "  var max = 0;\n  var word;\n  for(var\
    \ i=0; i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        if(word.indexOf(words[j])>max){\n\
    \          max = word.indexOf(words[j]);\n        }\n      }\n    }\n  }\n  return\
    \ words[words.length-1];\n}\n", "    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            max = Math.max(max, word.length);\n        }\n    }\n   \
    \ for(var i=0; i<words.length; i++){\n        word = words[i];\n        for(var\
    \ j=0; j<word.length; j++){\n            max = Math.max(max, word.length);\n \
    \       }\n    }\n    return words[words.length-1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
