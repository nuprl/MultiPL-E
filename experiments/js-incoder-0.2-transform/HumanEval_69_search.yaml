name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n\
    \            let count = 0;\n            for(let j = 0; j < lst.length; j++){\n\
    \                if(lst[j] == lst[i]){\n                    count++;\n       \
    \         }\n            }\n            if(count >= lst[i]){\n               \
    \ return lst[i];\n            }\n        }\n    }\n    return -1;\n}\n", "   \
    \ let max = 0;\n    let maxCount = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n            maxCount =\
    \ 1;\n        }\n        else if(lst[i] === max){\n            maxCount++;\n \
    \       }\n        else{\n            if(maxCount >= lst[i]){\n              \
    \  return max;\n            }\n            else{\n                maxCount = 0;\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try `search([4, 1, 2, 2, 3, 1])`\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting it. I just added the test cases. Please check it again.\n<|/ c |>\n\
    <| c |>\nI tested it and it doesn't work. Try `search([4, 1, 2, 2, 3, 1])`\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. Please check it again.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. Please check it again.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    var max = 0;\n    var maxIndex = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n", "    let max = 0;\n    let\
    \ index = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n\
    \            max = lst[i];\n            index = i;\n        }\n    }\n    return\
    \ index > 0 ? index : -1;\n}\n", "    var max = 0;\n    var freq = 0;\n    for(var\
    \ i=0;i<lst.length;i++){\n        if(lst[i]>max){\n            max = lst[i];\n\
    \        }\n        if(lst[i]==max){\n            freq++;\n        }\n    }\n\
    \    if(freq>lst.length){\n        return -1;\n    }\n    return max;\n}\n", " \
    \   var max = 0;\n    var maxFreq = 0;\n    for(var i=0;i<lst.length;i++){\n \
    \       if(lst[i] > max){\n            max = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n    }\n    if(maxFreq > max){\n        return -1;\n    }\n    return\
    \ max;\n}\n", "    var max = 0;\n    var freq = 0;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n            freq = 1;\n\
    \        }\n        else if(lst[i] == max){\n            freq++;\n        }\n\
    \    }\n    return freq > max ? -1 : max;\n}\n", "\tlet max = 0;\n\tlet maxFreq\
    \ = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] > max){\n\t\t\t\
    max = lst[i];\n\t\t\tmaxFreq = i;\n\t\t}\n\t}\n\tif(maxFreq >= lst.length){\n\t\
    \treturn -1;\n\t}\n\treturn max;\n}\n", "    let max = 0;\n    let maxCount =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n  \
    \          max = lst[i];\n            maxCount = 1;\n        }\n        else if(lst[i]\
    \ === max){\n            maxCount++;\n        }\n        else{\n            if(maxCount\
    \ >= lst[i]){\n                return max;\n            }\n            else{\n\
    \                maxCount = 1;\n                max = lst[i];\n            }\n\
    \        }\n    }\n    return -1;\n}\n", "    var max = 0;\n    var maxFreq =\
    \ 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] > max){\n      \
    \      max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n    if(maxFreq\
    \ >= max){\n        return -1;\n    }\n    return max;\n}\n", "    let max = 0;\n\
    \    let maxCount = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n            maxCount = 1;\n        }else\
    \ if(lst[i] === max){\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max){\n        return -1;\n    }\n    return max;\n}\n", "    var max = 0;\n\
    \    var maxFreq = 0;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]>max){\n\
    \            max = lst[i];\n            maxFreq = lst[i];\n        }\n    }\n\
    \    return max;\n}\n", "    var max = 0;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i]>max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work\
    \ if the array is `[4, 1, 2, 2, 3, 1]`\n<|/ c |>\n<| c |>\nYeah, I didn't see\
    \ that in the question. I'll fix it.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array is `[4, 1, 2, 2, 3, 1]`\n<|/ c |>\n<| c |>\nYeah, I didn't see that\
    \ in the question. I'll fix it.\n<|/ c |>\n<| c |>\nThis doesn't work if the array\
    \ is `[4, 1, 2, 2, 3, 1]`\n<|/ c |>\n<| a |>\n<code>", "\tlet max = 0;\n\tlet\
    \ maxFreq = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] > max){\n\
    \t\t\tmax = lst[i];\n\t\t\tmaxFreq = i;\n\t\t}\n\t}\n\treturn maxFreq > max? -1\
    \ : max;\n}\n", "\tlet max = 0;\n\tlet freq = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tfreq = lst[i].freq;\n\t\tif(freq > max){\n\t\t\tmax = freq;\n\t\t\
    }\n\t}\n\treturn max;\n}\n", "    let max = 0;\n    let maxIndex = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n", "  \
    \  var max = 0;\n    var freq = 0;\n    for(var i=0; i<lst.length; i++){\n   \
    \     if(lst[i] > 0){\n            freq++;\n            if(lst[i] > max){\n  \
    \              max = lst[i];\n            }\n        }\n    }\n    return freq\
    \ > max ? -1 : max;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays\
    \ |>\n<code>", "    var max = 0;\n    var maxCount = 0;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n            maxCount =\
    \ 1;\n        }\n        else if(lst[i] == max){\n            maxCount++;\n  \
    \      }\n        else{\n            if(maxCount > lst[i]){\n                max\
    \ = lst[i];\n                maxCount = 1;\n            }\n            else{\n\
    \                maxCount++;\n            }\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  let max = 0;\n  let\
    \ freq = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n \
    \     max = lst[i];\n    }\n    if(lst[i] > 0 && lst[i] >= max){\n      freq++;\n\
    \    }\n  }\n  return freq > max ? -1 : max;\n}\n", "    var max = 0;\n    var\
    \ freq = 0;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]>max){\n   \
    \         max = lst[i];\n        }\n        if(lst[i]==max){\n            freq++;\n\
    \        }\n    }\n    return freq>max?-1:max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
