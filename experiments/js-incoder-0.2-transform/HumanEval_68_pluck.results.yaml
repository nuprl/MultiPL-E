language: js
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0g5pa_bl.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0g5pa_bl.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjumijylh.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjumijylh.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    if(even.length === 0) return [];\n \
    \   let min = even[0];\n    let minIndex = 0;\n    for(let i = 0; i < even.length;\
    \ i++){\n        if(even[i] === min){\n            minIndex = i;\n        }\n\
    \    }\n    return [min, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp7qmd2jb8.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7qmd2jb8.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    return minIndex === -1 ? [] : [arr[minIndex].value,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpmkhrfr_r.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpmkhrfr_r.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n            if(evens.length === 1){\n      \
    \          minIndex = i;\n            }\n        }\n    }\n    return evens.sort((a,\
    \ b) => a - b).indexOf(minIndex) > -1 ? [evens[evens.indexOf(minIndex)], minIndex]\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpusoi_bf8.js:45:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpusoi_bf8.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr.sort(function(a, b){\n   \
    \     return a - b;\n    });\n    var result = [];\n    var smallest = 0;\n  \
    \  var smallest_index = 0;\n    for(var i = 0, len = arr.length; i < len; i++){\n\
    \        if(arr[i] % 2 === 0){\n            if(smallest === 0){\n            \
    \    smallest = arr[i];\n                smallest_index = i;\n            }else\
    \ if(smallest === arr[i]){\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    result.push(smallest, smallest_index);\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpynls0gcl.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpynls0gcl.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.value);\n    let smallestEvenIndex\
    \ = evenNodes.reduce((prev, curr) => prev < curr.index ? prev : curr.index);\n\
    \    return [smallestEvenNode, smallestEvenIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdwggej3u.js:28\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.value);\n                         \
    \            ^\n\nTypeError: Reduce of empty array with no initial value\n   \
    \ at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmpdwggej3u.js:28:38)\n  \
    \  at test (/tmp/tmpdwggej3u.js:38:20)\n    at Object.<anonymous> (/tmp/tmpdwggej3u.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    let minIndex = -1;\n    let minVal = arr[0];\n    for(let i=1;i<arr.length;i++){\n\
    \        if(arr[i]%2===0 && arr[i]<minVal){\n            minVal = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    return [minVal, minIndex];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsf5wtm2g.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsf5wtm2g.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_9hvf0v1.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_9hvf0v1.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr.sort((a,b)=>a-b);\n    let\
    \ minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            minIndex++;\n        }\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp07hwutft.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp07hwutft.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjumijylh.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjumijylh.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    even.sort((a,b) =>\
    \ a - b);\n    index.sort((a,b) => a - b);\n    let smallest = even[0];\n    let\
    \ smallest_index = index[0];\n    for(let i = 1; i < even.length; i++){\n    \
    \    if(even[i] === smallest && index[i] < smallest_index){\n            smallest\
    \ = even[i];\n            smallest_index = index[i];\n        }\n    }\n    return\
    \ [smallest, smallest_index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5ezsybcp.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ezsybcp.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n            if(evens.length === 1){\n      \
    \          minIndex = i;\n            }\n        }\n    }\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    evens.sort((a, b) => a - b);\n    return\
    \ evens.slice(0, evens.length - 1).map(e => [e, minIndex]);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    0\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5n8xrbjo.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5n8xrbjo.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 0 ]\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_9hvf0v1.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_9hvf0v1.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9wohpnj2.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9wohpnj2.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjumijylh.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjumijylh.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjumijylh.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjumijylh.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestEvenValue = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.value);\n    let smallestIndex = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.index);\n    return [smallestEvenValue,\
    \ smallestIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb5efv5pi.js:28\n    let smallestEvenValue = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.value);\n                         \
    \             ^\n\nTypeError: Reduce of empty array with no initial value\n  \
    \  at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmpb5efv5pi.js:28:39)\n \
    \   at test (/tmp/tmpb5efv5pi.js:38:20)\n    at Object.<anonymous> (/tmp/tmpb5efv5pi.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    let smallestEven = evenNodes.reduce((prev, curr) => prev < curr.value\
    \ ? prev : curr.value);\n    let smallestIndex = evenNodes.reduce((prev, curr)\
    \ => prev < curr.value ? prev : curr.index);\n    return [smallestEven, smallestIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpkl2lxqhd.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpkl2lxqhd.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = []\n    let index =\
    \ []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i])\n            index.push(i)\n        }\n    }\n\
    \    if(even.length === 0){\n        return []\n    }\n    even.sort((a, b) =>\
    \ a - b)\n    let smallest = even[0]\n    let smallestIndex = 0\n    for(let i\
    \ = 0; i < even.length; i++){\n        if(even[i] === smallest && i !== 0){\n\
    \            smallestIndex = index[i]\n        }\n    }\n    return [smallest,\
    \ smallestIndex]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpyq0n12bo.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyq0n12bo.js:64:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
