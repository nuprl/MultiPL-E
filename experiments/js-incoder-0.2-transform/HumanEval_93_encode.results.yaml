language: js
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ou6e7kb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ou6e7kb.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowelsCount = vowels.length;\n  \
    \  var lettersCount = letters.length;\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        if(letters.indexOf(letter) > -1){\n            newMessage +=\
    \ letter;\n            i++;\n        }\n        else if(vowels.indexOf(letter)\
    \ > -1){\n            var index = vowels.indexOf(letter);\n            newMessage\
    \ += letters[(index - vowelsCount) % lettersCount];\n            i++;\n      \
    \  }\n        else{\n            newMessage += letter;\n        }\n    }\n   \
    \ return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedT'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcmzub7fu.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcmzub7fu.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n\
    \    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let vowelIndex = encodedLetter.indexOf(\"A\");\n    let vowel = encodedLetter.charAt(vowelIndex);\n\
    \    let vowelIndex = encodedLetter.indexOf(\"A\");\n    let vowel2 = encodedLetter.charAt(vowelIndex+1);\n\
    \    let encodedLetter = vowel + vowel2;\n    encodedMessage += encodedLetter;\n\
    \  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt2dtrxx_.js:18\n    let vowelIndex = encodedLetter.indexOf(\"A\"\
    );\n        ^\n\nSyntaxError: Identifier 'vowelIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw7r7_okm.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw7r7_okm.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i];\n        let letterIndex = englishLetters.indexOf(letter);\n\
    \        if (letterIndex > -1) {\n            newMessage += englishLetters[letterIndex\
    \ + 2];\n        } else {\n            newMessage += letter;\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpq82dmkz6.js:15\n        let letterIndex = englishLetters.indexOf(letter);\n\
    \                          ^\n\nReferenceError: englishLetters is not defined\n\
    \    at encode (/tmp/tmpq82dmkz6.js:15:27)\n    at test (/tmp/tmpq82dmkz6.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpq82dmkz6.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(letter === \"a\"){\n    \
    \        encodedMessage += \"A\";\n        }else if(letter === \"e\"){\n     \
    \       encodedMessage += \"E\";\n        }else if(letter === \"i\"){\n      \
    \      encodedMessage += \"I\";\n        }else if(letter === \"o\"){\n       \
    \     encodedMessage += \"O\";\n        }else if(letter === \"u\"){\n        \
    \    encodedMessage += \"U\";\n        }else if(letter === \"A\"){\n         \
    \   encodedMessage += \"a\";\n        }else if(letter === \"E\"){\n          \
    \  encodedMessage += \"e\";\n        }else if(letter === \"I\"){\n           \
    \ encodedMessage += \"i\";\n        }else if(letter === \"O\"){\n            encodedMessage\
    \ += \"o\";\n        }else if(letter === \"U\"){\n            encodedMessage +=\
    \ \"u\";\n        }else{\n            encodedMessage += letter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp2mc5c2k.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp2mc5c2k.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+1);\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    for(var i = 0; i < vowels.length;\
    \ i++){\n        var letter = vowels.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+2);\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTcgkqw'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx4xfbmyz.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx4xfbmyz.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTcgkqw',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message.toUpperCase();\n    let newMessageArray = newMessage.split(\"\
    \");\n    let newMessageArrayLength = newMessageArray.length;\n    let newMessageArraySwappedCase\
    \ = [];\n    let newMessageArrayVowels = [];\n    let newMessageArrayVowelsLength\
    \ = 0;\n    let newMessageArrayVowelsSwappedCase = [];\n    let newMessageArrayVowelsSwappedCaseLength\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex = 0;\n    let newMessageArrayVowelsSwappedCaseIndex2\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex3 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex4\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex5 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex6\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex7 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex8\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex9 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex10\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex11 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex12\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex13 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex14\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex15 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex16\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex17 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex18\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex19 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex20\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex21 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex22\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex23 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex24\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex25 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex26\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex27 = 0;\n    let newMessageArrayVowelsSwappedCaseIndex28\
    \ = 0;\n    let newMessageArrayVowelsSwappedCaseIndex29 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9i0986xv.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    for(var i=0;\
    \ i<message.length; i++){\n        var letter = message[i];\n        var index\
    \ = vowels.indexOf(letter);\n        if(index != -1){\n            var nextLetter\
    \ = vowels[index+1];\n            newMessage += nextLetter;\n        }\n     \
    \   newMessage += letter;\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6khx7j4k.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6khx7j4k.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiou\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message[i];\n        var index = letters.indexOf(letter);\n\
    \        var nextLetter = letters[(index+1)%letters.length];\n        newMessage\
    \ += letter.split(\"\").map(function(letter){\n            return vowels.indexOf(letter)\
    \ > -1 ? nextLetter : letter;\n        }).join(\"\");\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppsoqw3vj.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppsoqw3vj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let nextLetterIndex = letterIndex + 2;\n    if (nextLetterIndex > alphabet.length){\n\
    \      nextLetterIndex = 0;\n    }\n    newMessage += alphabet[nextLetterIndex];\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5odqic1n.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp5odqic1n.js:15:23)\n    at test (/tmp/tmp5odqic1n.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp5odqic1n.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  switch(letter){\n            case \"a\":\n                newMessage += \"\
    A\";\n                break;\n            case \"b\":\n                newMessage\
    \ += \"B\";\n                break;\n            case \"c\":\n               \
    \ newMessage += \"C\";\n                break;\n            case \"d\":\n    \
    \            newMessage += \"D\";\n                break;\n            case \"\
    e\":\n                newMessage += \"E\";\n                break;\n         \
    \   case \"f\":\n                newMessage += \"F\";\n                break;\n\
    \            case \"g\":\n                newMessage += \"G\";\n             \
    \   break;\n            case \"h\":\n                newMessage += \"H\";\n  \
    \              break;\n            case \"i\":\n                newMessage +=\
    \ \"I\";\n                break;\n            case \"j\":\n                newMessage\
    \ += \"J\";\n                break;\n            case \"k\":\n               \
    \ newMessage += \"K\";\n                break;\n            case \"l\":\n    \
    \            newMessage += \"L\";\n                break;\n            case \"\
    m\":\n                newMessage += \"M\";\n                break;\n         \
    \   case \"n\":\n                newMessage += \"N\";\n                break;\n\
    \            case \"o\":\n                newMessage += \"O\";\n             \
    \   break;\n            case \"p\":\n                newMessage += \"P\";\n  \
    \              break;\n            case \"q\":\n                newMessage +=\
    \ \"Q\";\n                break;\n            case \"r\":\n                newMessage\
    \ += \"R\";\n                break;\n            case \"s\":\n               \
    \ newMessage += \"S\";\n                break;\n            case \"t\":\n    \
    \            newMessage += \"T\";\n                break;\n            case \"\
    u\":\n                newMessage += \"U\";\n                break;\n         \
    \   case \"v\":\n                newMessage += \"V\";\n                break;\n\
    \            case \"w\":\n                newMessage += \"W\";\n             \
    \   break;\n            case \"x\":\n                newMessage += \"X\";\n  \
    \              break;\n            case \"y\":\n                newMessage +=\
    \ \"Y\";\n                break;\n            case \"z\":\n                newMessage\
    \ += \"Z\";\n                break;\n            case \"A\":\n               \
    \ newMessage += \"a\";\n                break;\n            case \"B\":\n    \
    \            newMessage += \"b\";\n                break;\n            case \"\
    C\":\n                newMessage += \"c\";\n                break;\n         \
    \   case \"D\":\n                newMessage += \"d\";\n                break;\n\
    \            case \"E\":\n                newMessage += \"e\";\n             \
    \   break;\n            case \"F\":\n                newMessage += \"f\";\n  \
    \              break;\n            case \"G\":\n                newMessage +=\
    \ \"g\";\n                break;\n            case \"H\":\n                newMessage\
    \ += \"h\";\n                break;\n            case \"I\":\n               \
    \ newMessage += \"i\";\n                break;\n            case \"J\":\n    \
    \            newMessage += \"j\";\n                break;\n            case \"\
    K\":\n                newMessage += \"k\";\n                break;\n         \
    \   case \"L\":\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3x5clpyc.js:142\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n    let index = vowels.indexOf(letter);\n\
    \    if (index > -1){\n      newMessage += vowels[index + 2];\n    }\n    else\
    \ {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4avh9swl.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4avh9swl.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        var newLetter = letter;\n        if(letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          newLetter = nextLetter;\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpruz35tc6.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpruz35tc6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        switch(letter){\n            case \"\
    a\":\n                newLetter = \"A\";\n                break;\n           \
    \ case \"b\":\n                newLetter = \"B\";\n                break;\n  \
    \          case \"c\":\n                newLetter = \"C\";\n                break;\n\
    \            case \"d\":\n                newLetter = \"D\";\n               \
    \ break;\n            case \"e\":\n                newLetter = \"E\";\n      \
    \          break;\n            case \"f\":\n                newLetter = \"F\"\
    ;\n                break;\n            case \"g\":\n                newLetter\
    \ = \"G\";\n                break;\n            case \"h\":\n                newLetter\
    \ = \"H\";\n                break;\n            case \"i\":\n                newLetter\
    \ = \"I\";\n                break;\n            case \"j\":\n                newLetter\
    \ = \"J\";\n                break;\n            case \"k\":\n                newLetter\
    \ = \"K\";\n                break;\n            case \"l\":\n                newLetter\
    \ = \"L\";\n                break;\n            case \"m\":\n                newLetter\
    \ = \"M\";\n                break;\n            case \"n\":\n                newLetter\
    \ = \"N\";\n                break;\n            case \"o\":\n                newLetter\
    \ = \"O\";\n                break;\n            case \"p\":\n                newLetter\
    \ = \"P\";\n                break;\n            case \"q\":\n                newLetter\
    \ = \"Q\";\n                break;\n            case \"r\":\n                newLetter\
    \ = \"R\";\n                break;\n            case \"s\":\n                newLetter\
    \ = \"S\";\n                break;\n            case \"t\":\n                newLetter\
    \ = \"T\";\n                break;\n            case \"u\":\n                newLetter\
    \ = \"U\";\n                break;\n            case \"v\":\n                newLetter\
    \ = \"V\";\n                break;\n            case \"w\":\n                newLetter\
    \ = \"W\";\n                break;\n            case \"x\":\n                newLetter\
    \ = \"X\";\n                break;\n            case \"y\":\n                newLetter\
    \ = \"Y\";\n                break;\n            case \"z\":\n                newLetter\
    \ = \"Z\";\n                break;\n            case \"A\":\n                newLetter\
    \ = \"a\";\n                break;\n            case \"B\":\n                newLetter\
    \ = \"b\";\n                break;\n            case \"C\":\n                newLetter\
    \ = \"c\";\n                break;\n            case \"D\":\n                newLetter\
    \ = \"d\";\n                break;\n            case \"E\":\n                newLetter\
    \ = \"e\";\n                break;\n            case \"F\":\n                newLetter\
    \ = \"f\";\n                break;\n            case \"G\":\n                newLetter\
    \ = \"g\";\n                break;\n            case \"H\":\n                newLetter\
    \ = \"h\";\n                break;\n            case \"I\":\n                newLetter\
    \ = \"i\";\n                break;\n            case \"J\":\n                newLetter\
    \ = \"j\";\n                break;\n            case \"K\":\n                newLetter\
    \ = \"\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwkcj76rp.js:127\n                newLetter = \"\n             \
    \               ^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ if(vowels.includes(letter)){\n            let index = vowels.indexOf(letter);\n\
    \            let nextLetter = vowels[index + 1];\n            encodedMessage +=\
    \ letter.toUpperCase();\n            encodedMessage += nextLetter.toUpperCase();\n\
    \        }else{\n            encodedMessage += letter.toUpperCase();\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa4sf2n96.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa4sf2n96.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for (let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ let index = vowels.indexOf(letter);\n        if (index != -1){\n           \
    \ encodedMessage += vowels[index + 2];\n        }\n        else{\n           \
    \ encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyrldqd0l.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyrldqd0l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    newMessage += letter;\n    if (letter === \"\
    a\"){\n      newMessage += \"A\";\n    } else if (letter === \"e\"){\n      newMessage\
    \ += \"E\";\n    } else if (letter === \"i\"){\n      newMessage += \"I\";\n \
    \   } else if (letter === \"o\"){\n      newMessage += \"O\";\n    } else if (letter\
    \ === \"u\"){\n      newMessage += \"U\";\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_04np3ai.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_04np3ai.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"y\"){\n            newMessage += \"Y\";\n     \
    \   }else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp723fnkhl.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp723fnkhl.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let encodedMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = englishAlphabet.indexOf(letter);\n    let letterIndex2 =\
    \ letterIndex + 2;\n    let letterIndex3 = letterIndex + 3;\n    let letterIndex4\
    \ = letterIndex + 4;\n    let letterIndex5 = letterIndex + 5;\n    let letterIndex6\
    \ = letterIndex + 6;\n    let letterIndex7 = letterIndex + 7;\n    let letterIndex8\
    \ = letterIndex + 8;\n    let letterIndex9 = letterIndex + 9;\n    let letterIndex10\
    \ = letterIndex + 10;\n    let letterIndex11 = letterIndex + 11;\n    let letterIndex12\
    \ = letterIndex + 12;\n    let letterIndex13 = letterIndex + 13;\n    let letterIndex14\
    \ = letterIndex + 14;\n    let letterIndex15 = letterIndex + 15;\n    let letterIndex16\
    \ = letterIndex + 16;\n    let letterIndex17 = letterIndex + 17;\n    let letterIndex18\
    \ = letterIndex + 18;\n    let letterIndex19 = letterIndex + 19;\n    let letterIndex20\
    \ = letterIndex + 20;\n    let letterIndex21 = letterIndex + 21;\n    let letterIndex22\
    \ = letterIndex + 22;\n    let letterIndex23 = letterIndex + 23;\n    let letterIndex24\
    \ = letterIndex + 24;\n    let letterIndex25 = letterIndex + 25;\n    let letterIndex26\
    \ = letterIndex + 26;\n    let letterIndex27 = letterIndex + 27;\n    let letterIndex28\
    \ = letterIndex + 28;\n    let letterIndex29 = letterIndex + 29;\n    let letterIndex30\
    \ = letterIndex + 30;\n    let letterIndex31 = letterIndex + 31;\n    let letterIndex32\
    \ = letterIndex + 32;\n    let letterIndex33 = letterIndex + 33;\n    let letterIndex34\
    \ = letterIndex + 34;\n    let letterIndex35 = letterIndex + 35;\n    let letterIndex36\
    \ = letterIndex + 36;\n    let letterIndex37 = letterIndex + 37;\n    let letterIndex38\
    \ = letterIndex + 38;\n    let letterIndex39 = letterIndex + 39;\n    let letterIndex40\
    \ = letterIndex + 40;\n    let letterIndex41 = letterIndex + 41;\n    let letterIndex42\
    \ = letterIndex + 42;\n    let letterIndex43 = letterIndex + 43;\n    let letterIndex44\
    \ = letterIndex + 44;\n    let letterIndex45 = letterIndex + 45;\n    let letterIndex46\
    \ = letterIndex + 46;\n    let letterIndex47 = letter\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0w_pplov.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for(let i = 0; i < message.length; i++){\n        let letter = message.charAt(i);\n\
    \        newMessage += letter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplksxvefh.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmplksxvefh.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    newMessage += alphabet.charAt(letterIndex + 2);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpddmjmv_h.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpddmjmv_h.js:15:23)\n    at test (/tmp/tmpddmjmv_h.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpddmjmv_h.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"y\"){\n            newMessage += \"Y\";\n     \
    \   }else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp723fnkhl.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp723fnkhl.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let vowels = \"aeiou\";\n    \
    \    let vowelIndex = vowels.indexOf(letter);\n        let letterIndex = vowels.indexOf(letter.toLowerCase());\n\
    \        if(vowelIndex > -1){\n            newMessage += letter;\n        }else\
    \ if(letterIndex > -1){\n            newMessage += vowels[vowelIndex + 2];\n \
    \       }else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr88tle38.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpr88tle38.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray\
    \ = vowels.split(\"\");\n    let vowelsArrayLength = vowelsArray.length;\n   \
    \ let vowelsArrayIndex = 0;\n    for(let i = 0; i < message.length; i++){\n  \
    \      if(vowelsArrayIndex < vowelsArrayLength){\n            newMessage = newMessage.replace(vowelsArray[vowelsArrayIndex],\
    \ vowelsArray[vowelsArrayIndex + 1]);\n            vowelsArrayIndex++;\n     \
    \   }\n        else{\n            newMessage = newMessage.replace(vowelsArray[vowelsArrayIndex],\
    \ vowelsArray[vowelsArrayIndex - 1]);\n            vowelsArrayIndex--;\n     \
    \   }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgvpjhoop.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgvpjhoop.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8wfmq2t2.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8wfmq2t2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message.toLowerCase();\n    let newMessageArray = newMessage.split(\"\
    \");\n    let newMessageArrayLength = newMessageArray.length;\n    let newMessageArrayIndex\
    \ = 0;\n    let newMessageArrayIndex2 = 0;\n    let newMessageArrayIndex3 = 0;\n\
    \    let newMessageArrayIndex4 = 0;\n    let newMessageArrayIndex5 = 0;\n    let\
    \ newMessageArrayIndex6 = 0;\n    let newMessageArrayIndex7 = 0;\n    let newMessageArrayIndex8\
    \ = 0;\n    let newMessageArrayIndex9 = 0;\n    let newMessageArrayIndex10 = 0;\n\
    \    let newMessageArrayIndex11 = 0;\n    let newMessageArrayIndex12 = 0;\n  \
    \  let newMessageArrayIndex13 = 0;\n    let newMessageArrayIndex14 = 0;\n    let\
    \ newMessageArrayIndex15 = 0;\n    let newMessageArrayIndex16 = 0;\n    let newMessageArrayIndex17\
    \ = 0;\n    let newMessageArrayIndex18 = 0;\n    let newMessageArrayIndex19 =\
    \ 0;\n    let newMessageArrayIndex20 = 0;\n    let newMessageArrayIndex21 = 0;\n\
    \    let newMessageArrayIndex22 = 0;\n    let newMessageArrayIndex23 = 0;\n  \
    \  let newMessageArrayIndex24 = 0;\n    let newMessageArrayIndex25 = 0;\n    let\
    \ newMessageArrayIndex26 = 0;\n    let newMessageArrayIndex27 = 0;\n    let newMessageArrayIndex28\
    \ = 0;\n    let newMessageArrayIndex29 = 0;\n    let newMessageArrayIndex30 =\
    \ 0;\n    let newMessageArrayIndex31 = 0;\n    let newMessageArrayIndex32 = 0;\n\
    \    let newMessageArrayIndex33 = 0;\n    let newMessageArrayIndex34 = 0;\n  \
    \  let newMessageArrayIndex35 = 0;\n    let newMessageArrayIndex36 = 0;\n    let\
    \ newMessageArrayIndex37 = 0;\n    let newMessageArrayIndex38 = 0;\n    let newMessageArrayIndex39\
    \ = 0;\n    let newMessageArrayIndex40 = 0;\n    let newMessageArrayIndex41 =\
    \ 0;\n    let newMessageArrayIndex42 = 0;\n    let newMessageArrayIndex43 = 0;\n\
    \    let newMessageArrayIndex44 = 0;\n    let newMessageArrayIndex45 = 0;\n  \
    \  let newMessageArrayIndex46 = 0;\n    let newMessageArrayIndex47 = 0;\n    let\
    \ newMessageArrayIndex48 = 0;\n    let newMessageArrayIndex49 = 0;\n    let newMessageArrayIndex50\
    \ = 0;\n    let newMessageArrayIndex51 = 0;\n    let newMessageArrayIndex52 =\
    \ 0;\n    let newMessageArrayIndex53 = 0;\n    let newMessageArrayIndex54 = 0;\n\
    \    let newMessageArrayIndex55 = 0;\n    let newMessageArrayIndex56 = 0;\n  \
    \  let newMessageArrayIndex57 = 0;\n    let newMessageArrayIndex58 = 0;\n    let\
    \ newMessageArrayIndex59 = 0;\n    let newMessageArrayIndex60 = 0;\n    let newMessageArrayIndex61\
    \ = 0;\n    let newMessage\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp59kk2f7e.js:76\n    let newMessage\n        ^\n\nSyntaxError: Identifier\
    \ 'newMessage' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        let index = english.indexOf(letter);\n\
    \        if(index != -1){\n            let nextLetter = english[index + 1];\n\
    \            newMessage += swapCase(letter) + nextLetter;\n        }\n       \
    \ else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnyen9qzb.js:15\n        let index = english.indexOf(letter);\n\
    \                    ^\n\nReferenceError: english is not defined\n    at encode\
    \ (/tmp/tmpnyen9qzb.js:15:21)\n    at test (/tmp/tmpnyen9qzb.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyen9qzb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var letterIndex = englishAlphabet.indexOf(letter);\n    var nextLetterIndex\
    \ = letterIndex + 2;\n    if(nextLetterIndex < englishAlphabet.length){\n    \
    \  newMessage += englishAlphabet[nextLetterIndex];\n    }else{\n      newMessage\
    \ += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpswrwz7pr.js:16\n    var letterIndex = englishAlphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: englishAlphabet is not defined\n \
    \   at encode (/tmp/tmpswrwz7pr.js:16:23)\n    at test (/tmp/tmpswrwz7pr.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpswrwz7pr.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letter2 = alphabet.charAt(letterIndex+1);\n    newMessage += alphabet.charAt(letterIndex+1)\
    \ + letter2;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5kj9uml9.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp5kj9uml9.js:15:23)\n    at test (/tmp/tmp5kj9uml9.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp5kj9uml9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 97;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n</code>\n<|/ a tags=javascript,encryption |>\n<| c |>\nThis\
    \ doesn't seem to work. `encode(\"test\")` returns `\"TGST\"` instead of `\"TGST\"\
    `\n<|/ c |>\n<| c |>\nI tested it and it works. I added a link to the fiddle in\
    \ the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a link to\
    \ the fiddle in the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a link to the fiddle in the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added a link to the fiddle in the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk39tp5h_.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    encodedMessage += letter;\n    let vowelIndex\
    \ = letter.search(/[aeiou]/);\n    encodedMessage += letter.charAt(vowelIndex\
    \ + 2);\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpar7jn229.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpar7jn229.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter.charCodeAt(0) - 97;\n        var newNextLetter\
    \ = nextLetter.charCodeAt(0) - 97;\n        newMessage += String.fromCharCode(newLetter,\
    \ newNextLetter);\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFE4\
    \uFFF2\uFFF2\uFFF3\uFFF3\\x00'\n\nshould loosely deep-equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpdcudrf1s.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdcudrf1s.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\
    \uFFE4\uFFF2\uFFF2\uFFF3\uFFF3\\x00',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  for(var i=0; i<message.length; i++){\n    var letter =\
    \ message.charAt(i);\n    var index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n\
    \    result += String.fromCharCode('a'.charCodeAt(0) + index);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaymc_luh.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaymc_luh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let nextLetter\
    \ = alphabet[index + 1];\n    newMessage += nextLetter;\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5hpdcxju.js:15\n    let index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmp5hpdcxju.js:15:17)\n\
    \    at test (/tmp/tmp5hpdcxju.js:27:20)\n    at Object.<anonymous> (/tmp/tmp5hpdcxju.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var encodedMessage = \"\";\n  var vowels = \"aeiouAEIOU\";\n  for (var i =\
    \ 0; i < message.length; i++){\n    var letter = message.charAt(i);\n    var index\
    \ = vowels.indexOf(letter);\n    if (index != -1){\n      var nextVowel = vowels[index\
    \ + 1];\n      encodedMessage += nextVowel;\n      encodedMessage += letter;\n\
    \    } else {\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi41r16r1.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi41r16r1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  var vowels = \"AEIOU\";\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var index = alphabet.indexOf(letter);\n    var nextLetter = alphabet[index\
    \ + 1];\n    if(vowels.indexOf(letter) > -1){\n      newMessage += letter;\n \
    \     newMessage += nextLetter;\n    }else{\n      newMessage += letter;\n   \
    \   newMessage += nextLetter;\n      newMessage += letter;\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TUTEFSTSTUT'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppor2pca1.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmppor2pca1.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TUTEFSTSTUT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ \n      letter.toUpperCase());\n  }\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ \n      letter.split('').map(letter => \n        letter.charCodeAt(0) - 64 +\
    \ 2).join(''));\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2272122'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxshr2pfo.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxshr2pfo.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2272122',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let encodedMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = alphabet.indexOf(letter);\n    let letterIndex2 = letterIndex\
    \ + 1;\n    let letterIndex3 = letterIndex2 + 1;\n    let letterIndex4 = letterIndex3\
    \ + 1;\n    let letterIndex5 = letterIndex4 + 1;\n    let letterIndex6 = letterIndex5\
    \ + 1;\n    let letterIndex7 = letterIndex6 + 1;\n    let letterIndex8 = letterIndex7\
    \ + 1;\n    let letterIndex9 = letterIndex8 + 1;\n    let letterIndex10 = letterIndex9\
    \ + 1;\n    let letterIndex11 = letterIndex10 + 1;\n    let letterIndex12 = letterIndex11\
    \ + 1;\n    let letterIndex13 = letterIndex12 + 1;\n    let letterIndex14 = letterIndex13\
    \ + 1;\n    let letterIndex15 = letterIndex14 + 1;\n    let letterIndex16 = letterIndex15\
    \ + 1;\n    let letterIndex17 = letterIndex16 + 1;\n    let letterIndex18 = letterIndex17\
    \ + 1;\n    let letterIndex19 = letterIndex18 + 1;\n    let letterIndex20 = letterIndex19\
    \ + 1;\n    let letterIndex21 = letterIndex20 + 1;\n    let letterIndex22 = letterIndex21\
    \ + 1;\n    let letterIndex23 = letterIndex22 + 1;\n    let letterIndex24 = letterIndex23\
    \ + 1;\n    let letterIndex25 = letterIndex24 + 1;\n    let letterIndex26 = letterIndex25\
    \ + 1;\n    let letterIndex27 = letterIndex26 + 1;\n    let letterIndex28 = letterIndex27\
    \ + 1;\n    let letterIndex29 = letterIndex28 + 1;\n    let letterIndex30 = letterIndex29\
    \ + 1;\n    let letterIndex31 = letterIndex30 + 1;\n    let letterIndex32 = letterIndex31\
    \ + 1;\n    let letterIndex33 = letterIndex32 + 1;\n    let letterIndex34 = letterIndex33\
    \ + 1;\n    let letterIndex35 = letterIndex34 + 1;\n    let letterIndex36 = letterIndex35\
    \ + 1;\n    let letterIndex37 = letterIndex36 + 1;\n    let letterIndex38 = letterIndex37\
    \ + 1;\n    let letterIndex39 = letterIndex38 + 1;\n    let letterIndex40 = letterIndex39\
    \ + 1;\n    let letterIndex41 = letterIndex40 + 1;\n    let letterIndex42 = letterIndex41\
    \ + 1;\n    let letterIndex43 = letterIndex42 + 1;\n    let letterIndex44 = letterIndex43\
    \ + 1;\n    let letterIndex45 = letterIndex44 + 1;\n    let letterIndex46 = letterIndex45\
    \ + 1;\n    let letterIndex47 = letterIndex46 + 1;\n    let letterIndex48 = letterIndex47\
    \ + 1;\n    let letterIndex49 = letterIndex48 + 1;\n    let letter\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd_3zpgxx.js:65\n    let letter\n        ^\n\nSyntaxError: Identifier\
    \ 'letter' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\"\
    ;\n    let messageArray = message.split(\"\");\n    let encodedMessage = \"\"\
    ;\n    for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let index = alphabet.indexOf(letter);\n        let nextLetter = alphabet[index\
    \ + 1];\n        if(vowels.includes(letter)){\n            encodedMessage += letter;\n\
    \        }\n        else if(vowels.includes(nextLetter)){\n            encodedMessage\
    \ += letter;\n        }\n        else{\n            encodedMessage += nextLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpawp6pfwx.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpawp6pfwx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        \n        if(letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"){\n      \
    \      newLetter = nextLetter;\n        }\n        \n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6fdf5x4_.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6fdf5x4_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    if(letter.toLowerCase()\
    \ === \"a\" || letter.toLowerCase() === \"e\" || letter.toLowerCase() === \"i\"\
    \ || letter.toLowerCase() === \"o\" || letter.toLowerCase() === \"u\"){\n    \
    \  newMessage += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ === \"b\"){\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() === \"c\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n    }\n    else if(letter.toLowerCase() === \"d\"){\n\
    \      newMessage += letter;\n      i++;\n      newMessage += letter;\n      i++;\n\
    \      newMessage += letter;\n      i++;\n      newMessage += letter;\n      i++;\n\
    \    }\n    else if(letter.toLowerCase() === \"e\"){\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() === \"f\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n    }\n   \
    \ else if(letter.toLowerCase() === \"g\"){\n      newMessage += letter;\n    \
    \  i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() === \"h\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvh893nel.js:110\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8wfmq2t2.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8wfmq2t2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn2vco3nt.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2vco3nt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(letter == \"a\"){\n     \
    \       encodedMessage += \"A\";\n        }else if(letter == \"e\"){\n       \
    \     encodedMessage += \"E\";\n        }else if(letter == \"i\"){\n         \
    \   encodedMessage += \"I\";\n        }else if(letter == \"o\"){\n           \
    \ encodedMessage += \"O\";\n        }else if(letter == \"u\"){\n            encodedMessage\
    \ += \"U\";\n        }else if(letter == \"A\"){\n            encodedMessage +=\
    \ \"a\";\n        }else if(letter == \"E\"){\n            encodedMessage += \"\
    e\";\n        }else if(letter == \"I\"){\n            encodedMessage += \"i\"\
    ;\n        }else if(letter == \"O\"){\n            encodedMessage += \"o\";\n\
    \        }else if(letter == \"U\"){\n            encodedMessage += \"u\";\n  \
    \      }else{\n            encodedMessage += letter;\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3s84sfn_.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3s84sfn_.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \  }\n  for (let i = 0; i < message.length; i++){\n    let letter = message[i];\n\
    \    let vowelIndex = newMessage.indexOf(letter);\n    let vowel = vowelIndex\
    \ + 2;\n    newMessage = newMessage.replace(vowel, vowel.charAt(0));\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjqxhmu8a.js:21\n    newMessage = newMessage.replace(vowel, vowel.charAt(0));\n\
    \                                                 ^\n\nTypeError: vowel.charAt\
    \ is not a function\n    at encode (/tmp/tmpjqxhmu8a.js:21:50)\n    at test (/tmp/tmpjqxhmu8a.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjqxhmu8a.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = englishAlphabet.indexOf(letter);\n\
    \    let letterIndex2 = letterIndex + 1;\n    let letterIndex3 = letterIndex2\
    \ + 1;\n    let letterIndex4 = letterIndex3 + 1;\n    let letterIndex5 = letterIndex4\
    \ + 1;\n    let letterIndex6 = letterIndex5 + 1;\n    let letterIndex7 = letterIndex6\
    \ + 1;\n    let letterIndex8 = letterIndex7 + 1;\n    let letterIndex9 = letterIndex8\
    \ + 1;\n    let letterIndex10 = letterIndex9 + 1;\n    let letterIndex11 = letterIndex10\
    \ + 1;\n    let letterIndex12 = letterIndex11 + 1;\n    let letterIndex13 = letterIndex12\
    \ + 1;\n    let letterIndex14 = letterIndex13 + 1;\n    let letterIndex15 = letterIndex14\
    \ + 1;\n    let letterIndex16 = letterIndex15 + 1;\n    let letterIndex17 = letterIndex16\
    \ + 1;\n    let letterIndex18 = letterIndex17 + 1;\n    let letterIndex19 = letterIndex18\
    \ + 1;\n    let letterIndex20 = letterIndex19 + 1;\n    let letterIndex21 = letterIndex20\
    \ + 1;\n    let letterIndex22 = letterIndex21 + 1;\n    let letterIndex23 = letterIndex22\
    \ + 1;\n    let letterIndex24 = letterIndex23 + 1;\n    let letterIndex25 = letterIndex24\
    \ + 1;\n    let letterIndex26 = letterIndex25 + 1;\n    let letterIndex27 = letterIndex26\
    \ + 1;\n    let letterIndex28 = letterIndex27 + 1;\n    let letterIndex29 = letterIndex28\
    \ + 1;\n    let letterIndex30 = letterIndex29 + 1;\n    let letterIndex31 = letterIndex30\
    \ + 1;\n    let letterIndex32 = letterIndex31 + 1;\n    let letterIndex33 = letterIndex32\
    \ + 1;\n    let letterIndex34 = letterIndex33 + 1;\n    let letterIndex35 = letterIndex34\
    \ + 1;\n    let letterIndex36 = letterIndex35 + 1;\n    let letterIndex37 = letterIndex36\
    \ + 1;\n    let letterIndex38 = letterIndex37 + 1;\n    let letterIndex39 = letterIndex38\
    \ + 1;\n    let letterIndex40 = letterIndex39 + 1;\n    let letterIndex41 = letterIndex40\
    \ + 1;\n    let letterIndex42 = letterIndex41 + 1;\n    let letterIndex43 = letterIndex42\
    \ + 1;\n    let letterIndex44 = letterIndex43 + 1;\n    let letterIndex45 = letterIndex44\
    \ + 1;\n    let letterIndex46 = letterIndex45 + 1;\n    let letterIndex47 = letterIndex46\
    \ + 1;\n    let letterIndex48 = letterIndex47 + 1;\n    let letterIndex49 = letterIndex48\
    \ + 1;\n    let letterIndex50 = letterIndex49 + 1;\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxv8rakuk.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let vowels = \"AEIOUaeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index > -1){\n     \
    \       let letterIndex = index - 2;\n            newMessage += vowels[letterIndex];\n\
    \        }\n        newMessage += letter;\n    }\n    return newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprp7v9zds.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmprp7v9zds.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter;\n    \
    \    for(var j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n                break;\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpc1fuk4a4.js:16\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmpc1fuk4a4.js:16:28)\n    at test (/tmp/tmpc1fuk4a4.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpc1fuk4a4.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var nextLetter = messageArray[i+1];\n        var nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \        var nextLetterLetter = alphabet[nextLetterIndex+1];\n        var nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n        var nextLetterLetterLetter =\
    \ alphabet[nextLetterLetterIndex+1];\n        var nextLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetter);\n        var nextLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetter);\n        var nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n        var nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetter);\n        var nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterLetterLetterIndex+1];\n        var nextLetterLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n      \
    \  var nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterLetterIndex+1];\n\
    \        var \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp44ya9qum.js:42\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        if(letter === \"a\"){\n            newMessage\
    \ += \"A\";\n        }\n        else if(letter === \"e\"){\n            newMessage\
    \ += \"E\";\n        }\n        else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }\n        else if(letter === \"o\"){\n            newMessage\
    \ += \"O\";\n        }\n        else if(letter === \"u\"){\n            newMessage\
    \ += \"U\";\n        }\n        else if(letter === \"A\"){\n            newMessage\
    \ += \"a\";\n        }\n        else if(letter === \"E\"){\n            newMessage\
    \ += \"e\";\n        }\n        else if(letter === \"I\"){\n            newMessage\
    \ += \"i\";\n        }\n        else if(letter === \"O\"){\n            newMessage\
    \ += \"o\";\n        }\n        else if(letter === \"U\"){\n            newMessage\
    \ += \"u\";\n        }\n        else{\n            newMessage += letter;\n   \
    \     }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpivlpfz3d.js:57:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpivlpfz3d.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvd6hkma0.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvd6hkma0.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    let\
    \ letterIndex2 = letterIndex + 1;\n    let letterIndex3 = letterIndex2 + 1;\n\
    \    let letterIndex4 = letterIndex3 + 1;\n    let letterIndex5 = letterIndex4\
    \ + 1;\n    let letterIndex6 = letterIndex5 + 1;\n    let letterIndex7 = letterIndex6\
    \ + 1;\n    let letterIndex8 = letterIndex7 + 1;\n    let letterIndex9 = letterIndex8\
    \ + 1;\n    let letterIndex10 = letterIndex9 + 1;\n    let letterIndex11 = letterIndex10\
    \ + 1;\n    let letterIndex12 = letterIndex11 + 1;\n    let letterIndex13 = letterIndex12\
    \ + 1;\n    let letterIndex14 = letterIndex13 + 1;\n    let letterIndex15 = letterIndex14\
    \ + 1;\n    let letterIndex16 = letterIndex15 + 1;\n    let letterIndex17 = letterIndex16\
    \ + 1;\n    let letterIndex18 = letterIndex17 + 1;\n    let letterIndex19 = letterIndex18\
    \ + 1;\n    let letterIndex20 = letterIndex19 + 1;\n    let letterIndex21 = letterIndex20\
    \ + 1;\n    let letterIndex22 = letterIndex21 + 1;\n    let letterIndex23 = letterIndex22\
    \ + 1;\n    let letterIndex24 = letterIndex23 + 1;\n    let letterIndex25 = letterIndex24\
    \ + 1;\n    let letterIndex26 = letterIndex25 + 1;\n    let letterIndex27 = letterIndex26\
    \ + 1;\n    let letterIndex28 = letterIndex27 + 1;\n    let letterIndex29 = letterIndex28\
    \ + 1;\n    let letterIndex30 = letterIndex29 + 1;\n    let letterIndex31 = letterIndex30\
    \ + 1;\n    let letterIndex32 = letterIndex31 + 1;\n    let letterIndex33 = letterIndex32\
    \ + 1;\n    let letterIndex34 = letterIndex33 + 1;\n    let letterIndex35 = letterIndex34\
    \ + 1;\n    let letterIndex36 = letterIndex35 + 1;\n    let letterIndex37 = letterIndex36\
    \ + 1;\n    let letterIndex38 = letterIndex37 + 1;\n    let letterIndex39 = letterIndex38\
    \ + 1;\n    let letterIndex40 = letterIndex39 + 1;\n    let letterIndex41 = letterIndex40\
    \ + 1;\n    let letterIndex42 = letterIndex41 + 1;\n    let letterIndex43 = letterIndex42\
    \ + 1;\n    let letterIndex44 = letterIndex43 + 1;\n    let letterIndex45 = letterIndex44\
    \ + 1;\n    let letterIndex46 = letterIndex45 + 1;\n    let letterIndex47 = letterIndex46\
    \ + 1;\n    let letterIndex48 = letterIndex47 + 1;\n    let letterIndex49 = letterIndex48\
    \ + 1;\n    let letterIndex50 = letterIndex49 + 1;\n    let letter\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp630q3kkz.js:65\n    let letter\n        ^\n\nSyntaxError: Identifier\
    \ 'letter' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ letter = message[i].toLowerCase();\n    let vowels = \"aeiou\";\n    let index\
    \ = vowels.indexOf(letter);\n    let replacement = letter;\n    if (index > -1)\
    \ {\n      replacement = vowels[index + 1];\n    }\n    newMessage += replacement;\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpblkgbpn3.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpblkgbpn3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 96;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\
    \uFFF4'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfag4cvgl.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfag4cvgl.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\
    \uFFF3\uFFF4',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter;\n    if (letter === \"a\"\
    \ || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\
    u\"){\n      newLetter = letter.toUpperCase();\n    }\n    for (let j = 0; j <\
    \ 2; j++){\n      newMessage = newMessage + newLetter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTEESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj3c6wwud.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj3c6wwud.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTEESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        var newLetter = letter.toUpperCase();\n        var newNextLetter\
    \ = nextLetter.toUpperCase();\n        var newVowel = vowels[letter];\n      \
    \  var newNextVowel = vowels[nextLetter];\n        newMessage += newLetter;\n\
    \        newMessage += newVowel;\n        newMessage += newNextLetter;\n     \
    \   newMessage += newNextVowel;\n    }\n    return newMessage;\n}\n</code>\n<|/\
    \ a tags=javascript,algorithm,string |>\n<| c |>\nI like your solution, but I\
    \ feel like it could be made more efficient. For example, if you had a message\
    \ like \"This is a message\", it would be much more efficient to just do `var\
    \ newMessage = message.toUpperCase();` instead of looping through every character\
    \ in the message and doing `toUpperCase()` on every character.\n<|/ c |>\n<| c\
    \ |>\nYes, that would be more efficient. I'll edit my answer to include that.\n\
    <|/ c |>\n<| c |>\nI like the idea of using two variables to keep track of the\
    \ current letter and next letter. Thanks!\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I feel like it could be made more efficient. For example, if you had a message\
    \ like \"This is a message\", it would be much more efficient to just do `var\
    \ newMessage = message.toUpperCase();` instead of looping through every character\
    \ in the message and doing `toUpperCase()` on every character.\n<|/ c |>\n<| c\
    \ |>\nI agree. I edited my answer to include that as well.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd0_q8dgw.js:27\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n            newMessage += letter;\n        }\n    \
    \    else{\n            newMessage += letter.charCodeAt(0) - 96;\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T-12E-27S-13T-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy2_krth0.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy2_krth0.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T-12E-27S-13T-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          newMessage += letter;\n        }\n        else if(letter === \"A\"\
    \ || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"\
    U\"){\n            newMessage += letter.toUpperCase();\n        }\n        else{\n\
    \            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_almoxn_.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_almoxn_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + 2;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppq8042_d.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmppq8042_d.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextIndex = alphabet.indexOf(vowels[index],\
    \ index + 1);\n            newMessage += alphabet.charAt(nextIndex);\n       \
    \ }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'U'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuknqx9gi.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuknqx9gi.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'U',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = \"\";\n  for (let i = 0; i < message.length; i++){\n    let letter\
    \ = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n    if\
    \ (letterIndex > -1){\n      result += alphabet.charAt(letterIndex + 2);\n   \
    \ }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3aqs585o.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp3aqs585o.js:15:23)\n    at test (/tmp/tmp3aqs585o.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3aqs585o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < message.length; i++){\n\
    \        if(letters.includes(message[i])){\n            newMessage += message[i];\n\
    \        }\n        else if(vowels.includes(message[i])){\n            let index\
    \ = vowels.indexOf(message[i]);\n            newMessage += letters[(index+2)%26];\n\
    \        }\n        else{\n            newMessage += message[i];\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TiST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpweocxrhm.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpweocxrhm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TiST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = vowels.indexOf(newVowel);\n    var newVowelIndex2 = vowels.indexOf(newVowel.toUpperCase());\n\
    \    var newVowelIndex3 = vowels.indexOf(newVowel.toUpperCase().charAt(0));\n\
    \    var newVowelIndex4 = vowels.indexOf(newVowel.toUpperCase().charAt(1));\n\
    \    var newVowelIndex5 = vowels.indexOf(newVowel.toUpperCase().charAt(2));\n\
    \    var newVowelIndex6 = vowels.indexOf(newVowel.toUpperCase().charAt(3));\n\
    \    var newVowelIndex7 = vowels.indexOf(newVowel.toUpperCase().charAt(4));\n\
    \    var newVowelIndex8 = vowels.indexOf(newVowel.toUpperCase().charAt(5));\n\
    \    var newVowelIndex9 = vowels.indexOf(newVowel.toUpperCase().charAt(6));\n\
    \    var newVowelIndex10 = vowels.indexOf(newVowel.toUpperCase().charAt(7));\n\
    \    var newVowelIndex11 = vowels.indexOf(newVowel.toUpperCase().charAt(8));\n\
    \    var newVowelIndex12 = vowels.indexOf(newVowel.toUpperCase().charAt(9));\n\
    \    var newVowelIndex13 = vowels.indexOf(newVowel.toUpperCase().charAt(10));\n\
    \    var newVowelIndex14 = vowels.indexOf(newVowel.toUpperCase().charAt(11));\n\
    \    var newVowelIndex15 = vowels.indexOf(newVowel.toUpperCase().charAt(12));\n\
    \    var newVowelIndex16 = vowels.indexOf(newVowel.toUpperCase().charAt(13));\n\
    \    var newVowelIndex17 = vowels.indexOf(newVowel.toUpperCase().charAt(14));\n\
    \    var newVowelIndex18 = vowels.indexOf(newVowel.toUpperCase().charAt(15));\n\
    \    var newVowelIndex19 = vowels.indexOf(newVowel.toUpperCase().charAt(16));\n\
    \    var newVowelIndex20 = vowels.indexOf(newVowel.toUpperCase().charAt(17));\n\
    \    var newVowelIndex21 = vowels.indexOf(newVowel.toUpperCase().charAt(18));\n\
    \    var newVowelIndex22 = vowels.indexOf(newVowel.toUpperCase().charAt(19));\n\
    \    var newVowelIndex23 = vowels.indexOf(newVowel.toUpperCase().charAt(20));\n\
    \    var newVow\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkohbva3g.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter;\n     \
    \   if (letter === \"a\"){\n            newMessage += \"A\";\n        } else if\
    \ (letter === \"e\"){\n            newMessage += \"E\";\n        } else if (letter\
    \ === \"i\"){\n            newMessage += \"I\";\n        } else if (letter ===\
    \ \"o\"){\n            newMessage += \"O\";\n        } else if (letter === \"\
    u\"){\n            newMessage += \"U\";\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps55a_iyy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps55a_iyy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n        encodedMessage += String.fromCharCode(encodedLetter);\n    }\n\
    \    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpivj8gmsj.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpivj8gmsj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextVowelIndex = index\
    \ + 2;\n        if(nextVowelIndex < alphabet.length){\n            var nextVowel\
    \ = alphabet[nextVowelIndex];\n            newMessage += vowels.charAt(nextVowel);\n\
    \        }\n        else{\n            newMessage += letter;\n        }\n    }\n\
    \    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c\
    \ |>\nThanks so much for taking the time to write this out! I really appreciate\
    \ it! I ended up using your solution and it worked perfectly. Thanks again!\n\
    <|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_ozyj84z.js:30\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letter2 = alphabet.charAt(letterIndex+1);\n    newMessage += letter2;\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp91ouymqt.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp91ouymqt.js:15:23)\n    at test (/tmp/tmp91ouymqt.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp91ouymqt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 97;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\
    \uFFF3'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6v1ehreu.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6v1ehreu.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\
    \uFFF2\uFFF3',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter.toUpperCase();\n    newMessage\
    \ += newLetter;\n    let vowelIndex = newLetter.search(/[AEIOU]/);\n    let vowel\
    \ = vowelIndex === -1 ? letter : newLetter.charAt(vowelIndex+1);\n    newMessage\
    \ += vowel;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvn8od1dk.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvn8od1dk.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"y\"){\n            newMessage += \"Y\";\n     \
    \   }else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphx88yb3c.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphx88yb3c.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ou6e7kb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ou6e7kb.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    \n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var nextLetter = letters.charAt(index + 1);\n        newMessage\
    \ += letter.toUpperCase();\n        newMessage += nextLetter;\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpor0fmsqz.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpor0fmsqz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"A\"){\n            newMessage += \"a\";\n     \
    \   }else if(letter === \"E\"){\n            newMessage += \"e\";\n        }else\
    \ if(letter === \"I\"){\n            newMessage += \"i\";\n        }else if(letter\
    \ === \"O\"){\n            newMessage += \"o\";\n        }else if(letter === \"\
    U\"){\n            newMessage += \"u\";\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'e'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa_stkxcf.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa_stkxcf.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fck9401.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3fck9401.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter == \"a\"){\n       \
    \     newMessage += \"t\";\n        }\n        else if(letter == \"e\"){\n   \
    \         newMessage += \"g\";\n        }\n        else if(letter == \"i\"){\n\
    \            newMessage += \"k\";\n        }\n        else if(letter == \"o\"\
    ){\n            newMessage += \"s\";\n        }\n        else if(letter == \"\
    u\"){\n            newMessage += \"c\";\n        }\n        else if(letter ==\
    \ \"y\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"h\"){\n            newMessage += \"k\";\n        }\n        else if(letter\
    \ == \"d\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"m\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"l\"){\n            newMessage += \"k\";\n        }\n        else if(letter\
    \ == \"w\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"s\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"r\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"t\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"g\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"p\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"f\"){\n            newMessage += \"k\";\n        }\n        else if(letter\
    \ == \"v\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"b\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"n\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"k\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"j\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"q\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"x\"){\n            newMessage += \"k\";\n        }\n        else if(letter\
    \ == \"z\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"0\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"1\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"2\"){\n            newMessage += \"k\";\n        }\n        else if(letter\
    \ == \"3\"){\n            newMessage += \"s\";\n        }\n        else if(letter\
    \ == \"4\"){\n            newMessage += \"c\";\n        }\n        else if(letter\
    \ == \"5\"){\n            newMessage += \"g\";\n        }\n        else if(letter\
    \ == \"6\"){\n            newMessage += \"k\";\n        }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8b31zal6.js:123\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 97;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\
    \uFFF3'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2jiezylx.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2jiezylx.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\
    \uFFF2\uFFF3',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiou\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i=0; i<message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        if(index >= 0 && index < letters.length){\n            newMessage\
    \ += letters[index];\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmzrplglm.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmzrplglm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for(let i = 0; i < message.length; i++){\n        let letter = message[i];\n\
    \        newMessage += letter.split(\"\").reduce((acc, curr, index) => {\n   \
    \         if(index === 0 || curr === message[index - 1]){\n                return\
    \ acc;\n            }\n            if(curr === \"a\" || curr === \"e\" || curr\
    \ === \"i\" || curr === \"o\" || curr === \"u\"){\n                return curr\
    \ + message[index - 1];\n            }\n            return acc;\n        }, \"\
    a\");\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTaaaa'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpskhh9rdo.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpskhh9rdo.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTaaaa',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }\n        else if(letter === \"e\"){\n \
    \           newMessage += \"E\";\n        }\n        else if(letter === \"i\"\
    ){\n            newMessage += \"I\";\n        }\n        else if(letter === \"\
    o\"){\n            newMessage += \"O\";\n        }\n        else if(letter ===\
    \ \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter\
    \ === \"A\"){\n            newMessage += \"a\";\n        }\n        else if(letter\
    \ === \"E\"){\n            newMessage += \"e\";\n        }\n        else if(letter\
    \ === \"I\"){\n            newMessage += \"i\";\n        }\n        else if(letter\
    \ === \"O\"){\n            newMessage += \"o\";\n        }\n        else if(letter\
    \ === \"U\"){\n            newMessage += \"u\";\n        }\n        else{\n  \
    \          newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5voj2zdw.js:57:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5voj2zdw.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i];\n        let newLetter = letter;\n        let\
    \ vowels = \"aeiou\";\n        for (let j = 0; j < vowels.length; j++) {\n   \
    \         if (letter === vowels[j]) {\n                newLetter = vowels[j +\
    \ 2];\n                break;\n            }\n        }\n        newMessage +=\
    \ newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyngb4jat.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyngb4jat.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n    let vowelIndex =\
    \ vowels.indexOf(letter);\n    let newLetter = vowels[vowelIndex + 2];\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EOEE'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpijymq769.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpijymq769.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EOEE',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letters.indexOf(letter) > -1){\n            newMessage += letter;\n\
    \        }\n        else if(vowels.indexOf(letter) > -1){\n            newMessage\
    \ += letters[letters.indexOf(letter) + 2];\n        }\n        else{\n       \
    \     newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TbST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfj8xqa3h.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfj8xqa3h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TbST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = \"aeiouAEIOU\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        if(letters.indexOf(letter) ==\
    \ -1){\n            result += letter;\n        }else{\n            var index =\
    \ letters.indexOf(letter);\n            var nextLetter = letters.charAt(index+1);\n\
    \            var nextVowel = vowels.charAt(index+2);\n            result += nextLetter\
    \ + nextVowel;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo40wyxnv.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo40wyxnv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ letter = message[i];\n    let newLetter = letter.toUpperCase();\n    newMessage\
    \ += newLetter;\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter\
    \ = message[i];\n    let newLetter = letter.toLowerCase();\n    newMessage +=\
    \ newLetter;\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter\
    \ = message[i];\n    let newLetter = letter;\n    newMessage += newLetter;\n \
    \ }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv5ecjuhk.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv5ecjuhk.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter;\n     \
    \   if (letter === letter.toUpperCase()){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === letter.toLowerCase()){\n            newMessage\
    \ += letter.toLowerCase();\n        }\n        else if (letter === \"a\"){\n \
    \           newMessage += \"A\";\n        }\n        else if (letter === \"e\"\
    ){\n            newMessage += \"E\";\n        }\n        else if (letter === \"\
    i\"){\n            newMessage += \"I\";\n        }\n        else if (letter ===\
    \ \"o\"){\n            newMessage += \"O\";\n        }\n        else if (letter\
    \ === \"u\"){\n            newMessage += \"U\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\n        else if (letter\
    \ === \"y\"){\n            newMessage += \"Y\";\n        }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm9xywf00.js:130\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let i =\
    \ 0; i < message.length; i++){\n        let letter = message[i];\n        let\
    \ index = vowels.indexOf(letter);\n        if(index != -1){\n            newMessage\
    \ += vowels[index];\n        }else{\n            newMessage += letter;\n     \
    \   }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpigi6eail.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpigi6eail.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var nextLetter = letters.charAt(index + 1);\n        newMessage\
    \ += letter;\n        newMessage += nextLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps9oomz2p.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps9oomz2p.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter;\n     \
    \   if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\"){\n            newMessage += letter;\n        }\n\
    \        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" ||\
    \ letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppvzp9js5.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppvzp9js5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var nextLetter = letters.charAt(index + 1);\n        result +=\
    \ nextLetter;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpb39l9q82.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb39l9q82.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 65;\n        if(index >= 0){\n            newMessage += letter.charAt(index);\n\
    \        }\n        else{\n            newMessage += letter;\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpuq6exb8w.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuq6exb8w.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\"){\n            newMessage += letter;\n            i++;\n\
    \        }\n        else if(letter == \"A\" || letter == \"E\" || letter == \"\
    I\" || letter == \"O\" || letter == \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if(letter == \"b\" || letter == \"\
    c\" || letter == \"d\" || letter == \"f\" || letter == \"g\" || letter == \"h\"\
    \ || letter == \"j\" || letter == \"k\" || letter == \"l\" || letter == \"m\"\
    \ || letter == \"n\" || letter == \"p\" || letter == \"q\" || letter == \"r\"\
    \ || letter == \"s\" || letter == \"t\" || letter == \"v\" || letter == \"w\"\
    \ || letter == \"x\" || letter == \"y\" || letter == \"z\"){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if(letter == \"B\" ||\
    \ letter == \"C\" || letter == \"D\" || letter == \"F\" || letter == \"G\" ||\
    \ letter == \"H\" || letter == \"J\" || letter == \"K\" || letter == \"L\" ||\
    \ letter == \"M\" || letter == \"N\" || letter == \"P\" || letter == \"Q\" ||\
    \ letter == \"R\" || letter == \"S\" || letter == \"T\" || letter == \"V\" ||\
    \ letter == \"W\" || letter == \"X\" || letter == \"Y\" || letter == \"Z\"){\n\
    \            newMessage += letter.toUpperCase();\n            i++;\n        }\n\
    \        else{\n            newMessage += letter;\n            i++;\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TS'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp91hixc52.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp91hixc52.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TS',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        encodedMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 65 * 2;\n    }\n    return encodedMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpypap80cn.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpypap80cn.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8wfmq2t2.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8wfmq2t2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n   \
    \ if(index != -1){\n      newMessage += alphabet.charAt(index+2);\n    }\n   \
    \ else{\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphtcbjgos.js:15\n    var index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmphtcbjgos.js:15:17)\n\
    \    at test (/tmp/tmphtcbjgos.js:31:20)\n    at Object.<anonymous> (/tmp/tmphtcbjgos.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i);\n    \
    \    if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter);\n\
    \            var nextLetter = message.charAt(i+1);\n            newMessage +=\
    \ letter + nextLetter;\n            i += 2;\n        }\n        newMessage +=\
    \ letter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESE'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptkcn2a_z.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptkcn2a_z.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESE',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsjsipghl.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsjsipghl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let letter2\
    \ = alphabet[index + 2];\n    newMessage += letter2;\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbucl1vye.js:15\n    let index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmpbucl1vye.js:15:17)\n\
    \    at test (/tmp/tmpbucl1vye.js:27:20)\n    at Object.<anonymous> (/tmp/tmpbucl1vye.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5317lsmq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5317lsmq.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \    }\n    else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy0jib1hn.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0jib1hn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = 'aeiou';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    var vowelsCount = {};\n    var lettersCount = {};\n    \n    for(var i =\
    \ 0, len = message.length; i < len; i++){\n        var letter = message[i];\n\
    \        if(letter in lettersCount){\n            lettersCount[letter]++;\n  \
    \      }else{\n            lettersCount[letter] = 1;\n        }\n        if(letter\
    \ in vowelsCount){\n            vowelsCount[letter]++;\n        }else{\n     \
    \       vowelsCount[letter] = 1;\n        }\n    }\n    \n    for(var i = 0, len\
    \ = vowels.length; i < len; i++){\n        var vowel = vowels[i];\n        var\
    \ vowelCount = vowelsCount[vowel];\n        var lettersCount = lettersCount[vowel];\n\
    \        \n        if(lettersCount === 2){\n            result += vowel;\n   \
    \     }else if(lettersCount === 1){\n            result += vowel + vowel;\n  \
    \      }else{\n            result += vowel;\n        }\n    }\n    \n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpayxc6upr.js:35\n        var lettersCount = lettersCount[vowel];\n\
    \                                       ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'e')\n    at encode (/tmp/tmpayxc6upr.js:35:40)\n    at\
    \ test (/tmp/tmpayxc6upr.js:54:20)\n    at Object.<anonymous> (/tmp/tmpayxc6upr.js:61:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    for(var i=0; i<message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n      \
    \  if(letter.toLowerCase() == 'a' || letter.toLowerCase() == 'e' || letter.toLowerCase()\
    \ == 'i' || letter.toLowerCase() == 'o' || letter.toLowerCase() == 'u'){\n   \
    \         result += letter;\n            result += nextLetter;\n            i\
    \ += 2;\n        }else{\n            result += letter;\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=javascript,encryption |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain what does this line mean?\n`var nextLetter\
    \ = message.charAt(i+1);`\n<|/ c |>\n<| c |>\nIt gets the next letter of the message\
    \ and puts it in the nextLetter variable. i+1 means get the letter at position\
    \ i+1 of the message. Since we start at 0, the letter at position 0 is at position\
    \ 1, the letter at position 1 is at position 2, and so on.\n<|/ c |>\n<| c |>\n\
    Thanks. I understand it now. One last question, what does this line mean?\n`var\
    \ nextLetter = message.charAt(i+1);`\n<|/ c |>\n<| c |>\nIt gets the next letter\
    \ of the message and puts it in the nextLetter variable. i+1 means get the letter\
    \ at position i+1 of the message. Since we start at 0, the letter at position\
    \ 0 is at position 1, the letter at position 1 is at position 2, and so on.\n\
    <|/ c |>\n<| c |>\nThanks. One last question, what does this line mean?\n`var\
    \ nextLetter = message.charAt(i+1);`\n<|/ c |>\n<| a tags=javascript,encryption\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqnw56wiu.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwkb7686x.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwkb7686x.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n \
    \   let vowelIndex = letter.search(/[AEIOU]/);\n    let vowel = vowelIndex > 0\
    \ ? letter.substring(vowelIndex) : letter;\n    let vowelIndex = letter.search(/[AEIOU]/);\n\
    \    let vowel = vowelIndex > 0 ? letter.substring(vowelIndex) : letter;\n   \
    \ let encodedVowel = vowel.toUpperCase();\n    encodedMessage += encodedLetter\
    \ + vowel + encodedVowel;\n  }\n  return encodedMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvu__8exh.js:18\n    let vowelIndex = letter.search(/[AEIOU]/);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsjsipghl.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsjsipghl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5317lsmq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5317lsmq.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter == \"a\"){\n       \
    \     newMessage += \"A\";\n        }\n        else if(letter == \"e\"){\n   \
    \         newMessage += \"E\";\n        }\n        else if(letter == \"i\"){\n\
    \            newMessage += \"I\";\n        }\n        else if(letter == \"o\"\
    ){\n            newMessage += \"O\";\n        }\n        else if(letter == \"\
    u\"){\n            newMessage += \"U\";\n        }\n        else if(letter ==\
    \ \"A\"){\n            newMessage += \"a\";\n        }\n        else if(letter\
    \ == \"E\"){\n            newMessage += \"e\";\n        }\n        else if(letter\
    \ == \"I\"){\n            newMessage += \"i\";\n        }\n        else if(letter\
    \ == \"O\"){\n            newMessage += \"o\";\n        }\n        else if(letter\
    \ == \"U\"){\n            newMessage += \"u\";\n        }\n        else if(letter\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter\
    \ == \"A\"){\n            newMessage += \"a\";\n        }\n        else if(letter\
    \ == \"E\"){\n            newMessage += \"e\";\n        }\n        else if(letter\
    \ == \"I\"){\n            newMessage += \"i\";\n        }\n        else if(letter\
    \ == \"O\"){\n            newMessage += \"o\";\n        }\n        else if(letter\
    \ == \"U\"){\n            newMessage += \"u\";\n        }\n        else if(letter\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter\
    \ == \"A\"){\n            newMessage += \"a\";\n        }\n        else if(letter\
    \ == \"E\"){\n            newMessage += \"e\";\n        }\n        else if(letter\
    \ == \"I\"){\n            newMessage += \"i\";\n        }\n        else if(letter\
    \ == \"O\"){\n            newMessage += \"o\";\n        }\n        else if(letter\
    \ == \"U\"){\n            newMessage += \"u\";\n        }\n        else if(letter\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6m15iivy.js:121\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          newMessage += letter;\n        }\n        else{\n            let vowelIndex\
    \ = alphabet.indexOf(letter);\n            newMessage += alphabet[vowelIndex +\
    \ 2];\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfz03fb75.js:19\n            let vowelIndex = alphabet.indexOf(letter);\n\
    \                             ^\n\nReferenceError: alphabet is not defined\n \
    \   at encode (/tmp/tmpfz03fb75.js:19:30)\n    at test (/tmp/tmpfz03fb75.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfz03fb75.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter === letter.toUpperCase()){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else{\n            newMessage += letter.toUpperCase();\n \
    \       }\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope that helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6uwweutw.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1416o_7j.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1416o_7j.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message[i];\n        if (letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newMessage += letter;\n        }\n        else if (letter === \"A\" || letter\
    \ === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"){\n  \
    \          newMessage += letter.toUpperCase();\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\"){\n            newMessage += letter.toLowerCase();\n        }\n  \
    \      else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\")\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfqq_9lpl.js:61\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index + 1];\n\
    \            var nextIndex = vowels.indexOf(nextLetter);\n            if(nextIndex\
    \ != -1){\n                newMessage += nextLetter;\n            }\n        \
    \    else{\n                newMessage += letter;\n            }\n        }\n\
    \        else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9mqhwnr0.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9mqhwnr0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter;\n    \
    \    for(var j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n            }\n        }\n      \
    \  newMessage += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6xtoe7uw.js:16\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmp6xtoe7uw.js:16:28)\n    at test (/tmp/tmp6xtoe7uw.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmp6xtoe7uw.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i + 1);\n \
    \   if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\"){\n      newMessage += letter;\n      i++;\n    }\n\
    \    else if(letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage += letter;\n\
    \      i++;\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu8pdqfu1.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0;i<message.length;i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    if(letter.toLowerCase()==\"\
    a\" || letter.toLowerCase()==\"e\" || letter.toLowerCase()==\"i\" || letter.toLowerCase()==\"\
    o\" || letter.toLowerCase()==\"u\"){\n      newMessage += letter;\n      i++;\n\
    \    }\n    else if(letter.toLowerCase()==\"b\"){\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()==\"\
    c\"){\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()==\"\
    d\"){\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase()==\"f\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()==\"g\"){\n \
    \     newMessage += letter;\n      i++;\n      newMessage += letter;\n      i++;\n\
    \      newMessage += letter;\n      i++;\n      newMessage += letter;\n      i++;\n\
    \      newMessage += letter;\n      i++;\n      newMessage += letter;\n      i++;\n\
    \    }\n    else if(letter.toLowerCase()==\"h\"){\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n      newMessage += letter;\n      i++;\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase()==\"j\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += letter;\n      i++;\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1fzbxcc1.js:98\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message[i];\n    let encodedLetter = \"\";\n    for (let j =\
    \ 0; j < letter.length; j++){\n      let letterToSwap = letter.charAt(j);\n  \
    \    let letterToSwapIndex = letterToSwap.toUpperCase().charCodeAt(0) - 65;\n\
    \      encodedLetter += String.fromCharCode(letterToSwapIndex + letterToSwap.charCodeAt(0)\
    \ + 2);\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'iKgi'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprirwviz1.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprirwviz1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'iKgi',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message[i];\n        let newLetter = letter.charCodeAt(0)\
    \ - 64;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x14\\x05\\\
    x13\\x14'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6pkt81yx.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6pkt81yx.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\\
    x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \    }\n    else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy0jib1hn.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0jib1hn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  for(var i=0; i<message.length; i++){\n    var letter =\
    \ message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var nextLetterIndex\
    \ = alphabet.indexOf(nextLetter);\n    result += alphabet.indexOf(letter) + alphabet[nextLetterIndex];\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmfp4i648.js:16\n    var nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpmfp4i648.js:16:27)\n    at test (/tmp/tmpmfp4i648.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpmfp4i648.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextLetter = alphabet[index + 1];\n            if(vowels.indexOf(nextLetter)\
    \ != -1){\n                newMessage += letter;\n            }\n            else{\n\
    \                newMessage += nextLetter;\n            }\n        }\n       \
    \ else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdwj2_1or.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdwj2_1or.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var messageArray = message.split(\"\");\n    var encodedMessage = \"\"\
    ;\n    for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var encodedLetter = letter.toUpperCase();\n        var encodedVowel =\
    \ vowels.indexOf(letter);\n        if(encodedVowel > 0){\n            encodedLetter\
    \ = alphabet.charAt(encodedVowel+2);\n        }\n        encodedMessage += encodedLetter;\n\
    \    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TDST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptx65hfx2.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptx65hfx2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TDST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.charCodeAt(0) -\
    \ 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplpb1h0ac.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmplpb1h0ac.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        if(letter.toUpperCase() === letter && nextLetter.toUpperCase()\
    \ !== letter){\n            newMessage += letter.toUpperCase();\n        }\n \
    \       else if(letter.toUpperCase() !== letter && nextLetter.toUpperCase() ===\
    \ letter){\n            newMessage += letter.toUpperCase();\n        }\n     \
    \   else if(letter.toUpperCase() === letter && nextLetter.toUpperCase() === letter){\n\
    \            newMessage += letter;\n        }\n        else if(letter.toUpperCase()\
    \ !== letter && nextLetter.toUpperCase() !== letter){\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2h2h9n2d.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2h2h9n2d.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ou6e7kb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ou6e7kb.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for(let i = 0; i < message.length;\
    \ i++){\n        let letter = message[i];\n        let newLetter = letter.toLowerCase();\n\
    \        newMessage += newLetter;\n    }\n    for(let i = 0; i < message.length;\
    \ i++){\n        let letter = message[i];\n        let newLetter = letter.replace(/\\\
    W/g, \"\");\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp01i1azv2.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp01i1azv2.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 97;\n    result\
    \ += String.fromCharCode((index >= 0 ? index : index + 26) + 97);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'n_mn'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgan5zw6b.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgan5zw6b.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'n_mn',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n        let vowelIndex = newLetter.indexOf(\"\
    A\");\n        let vowel = vowelIndex > -1 ? newLetter.charAt(vowelIndex + 1)\
    \ : \"\";\n        newMessage += vowel;\n    }\n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy6tm6l67.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy6tm6l67.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message[i];\n        if(letter === \"a\"){\n           \
    \ newMessage = newMessage.replace(letter, letter.toUpperCase());\n        }\n\
    \        else if(letter === \"e\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"i\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"o\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"u\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"A\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"E\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"I\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"O\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"U\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"y\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"s\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"t\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"h\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"k\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"g\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"c\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"m\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"g\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"s\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"c\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"g\"){\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n        else if(letter === \"g\"){\n    \
    \        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    \
    \    }\n        else if(letter === \"s\"){\n            newMessage = newMessage.replace(letter,\
    \ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpayj2m0zq.js:86\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letterToSwap = alphabet.charAt(letterIndex+1);\n    newMessage += alphabet.charAt(letterIndex)\
    \ + letterToSwap;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkhgk1546.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpkhgk1546.js:15:23)\n    at test (/tmp/tmpkhgk1546.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpkhgk1546.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n \
    \   let vowels = \"aeiou\";\n    let vowelsMap = {};\n    vowels.forEach(vowel\
    \ => {\n        vowelsMap[vowel] = vowel;\n    });\n    newMessage = newMessage.replace(vowels,\
    \ vowel => {\n        let letter = vowelsMap[vowel];\n        return letter;\n\
    \    });\n    let letters = [];\n    let letterMap = {};\n    let vowelsMap2 =\
    \ {};\n    vowels.forEach(vowel => {\n        vowelsMap2[vowel] = vowel;\n   \
    \ });\n    newMessage = newMessage.replace(/[a-z]/g, letter => {\n        letterMap[letter]\
    \ = letter;\n        return letterMap[letter];\n    });\n    newMessage = newMessage.replace(/[aeiou]/g,\
    \ letter => {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap3 = {};\n    vowels.forEach(vowel => {\n        vowelsMap3[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap4 = {};\n    vowels.forEach(vowel => {\n        vowelsMap4[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap5 = {};\n    vowels.forEach(vowel => {\n        vowelsMap5[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap6 = {};\n    vowels.forEach(vowel => {\n        vowelsMap6[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap7 = {};\n    vowels.forEach(vowel => {\n        vowelsMap7[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap8 = {};\n    vowels.forEach(vowel => {\n        vowelsMap8[vowel]\
    \ = vowel;\n    });\n    newMessage = newMessage.replace(/[aeiou]/g, letter =>\
    \ {\n        letterMap[letter] = letter;\n        return letterMap[letter];\n\
    \    });\n    let vowelsMap9 = {};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa2a6dqr9.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let encodedLetter = letter.toUpperCase();\n\
    \        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n\
    \        let vowelIndex2 = vowels.indexOf(letter.toUpperCase());\n        if (vowelIndex\
    \ == -1){\n            encodedMessage += letter;\n        }\n        else if (vowelIndex2\
    \ == -1){\n            encodedMessage += letter.toUpperCase();\n        }\n  \
    \      else if (vowelIndex != vowelIndex2){\n            encodedMessage += vowels[vowelIndex\
    \ + 2];\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpck83epem.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpck83epem.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TST',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.charAt(index+1);\n            newMessage +=\
    \ alphabet.charAt(index) + nextVowel;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6jz0wolv.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6jz0wolv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    let\
    \ nextLetterIndex = letterIndex + 2;\n    if(nextLetterIndex < alphabet.length){\n\
    \      newMessage += alphabet[nextLetterIndex];\n    }\n    else{\n      newMessage\
    \ += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd0xilb5_.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpd0xilb5_.js:15:23)\n    at test (/tmp/tmpd0xilb5_.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpd0xilb5_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var encodedMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n  \
    \  var letter = message.charAt(i);\n    encodedMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 65;\n  }\n  return encodedMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2mlw17zo.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2mlw17zo.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) -\
    \ 65;\n    newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv76znb_b.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv76znb_b.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fck9401.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3fck9401.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n            newMessage += letter;\n        }\n    \
    \    else{\n            let vowelIndex = alphabet.indexOf(letter);\n         \
    \   let vowelLetter = alphabet[vowelIndex + 1];\n            newMessage += vowelLetter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxdtsja4n.js:20\n            let vowelIndex = alphabet.indexOf(letter);\n\
    \                             ^\n\nReferenceError: alphabet is not defined\n \
    \   at encode (/tmp/tmpxdtsja4n.js:20:30)\n    at test (/tmp/tmpxdtsja4n.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpxdtsja4n.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    newMessage\
    \ += alphabet.charAt(letterIndex + 2);\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp93fiof21.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp93fiof21.js:15:23)\n    at test (/tmp/tmp93fiof21.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp93fiof21.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var newLetter = letter;\n        var vowels = \"AEIOUaeiou\";\n     \
    \   var vowelsArray = vowels.split(\"\");\n        for(var j = 0; j < vowelsArray.length;\
    \ j++){\n            if(letter == vowelsArray[j]){\n                newLetter\
    \ = vowelsArray[j];\n            }\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjs287nbk.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjs287nbk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter;\n    if(letter.toLowerCase()\
    \ == \"a\"){\n      newLetter = \"t\";\n    }\n    if(letter.toLowerCase() ==\
    \ \"e\"){\n      newLetter = \"k\";\n    }\n    if(letter.toLowerCase() == \"\
    i\"){\n      newLetter = \"s\";\n    }\n    if(letter.toLowerCase() == \"o\"){\n\
    \      newLetter = \"c\";\n    }\n    if(letter.toLowerCase() == \"u\"){\n   \
    \   newLetter = \"g\";\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TkST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp71jrybi_.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp71jrybi_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TkST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          letter = letter.toUpperCase();\n        }\n        encodedMessage +=\
    \ letter;\n    }\n    for(let i = 0; i < message.length; i++){\n        let letter\
    \ = message.charAt(i);\n        if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n            letter = letter.toLowerCase();\n\
    \        }\n        encodedMessage += letter;\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfdtvkyxe.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfdtvkyxe.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n        var vowelIndex = newLetter.indexOf(\"\
    A\");\n        if(vowelIndex != -1){\n            var vowel = newLetter.charAt(vowelIndex+1);\n\
    \            var newVowel = newLetter.charAt(vowelIndex-1);\n            newMessage\
    \ += newVowel;\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbxn0892u.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbxn0892u.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var encodedMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n  \
    \  var letter = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n\
    \    var nextVowelIndex = alphabet.indexOf(vowels[index], index + 1);\n    encodedMessage\
    \ += alphabet.charAt(nextVowelIndex);\n  }\n  return encodedMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpg99pqysx.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg99pqysx.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newMessage += letter;\n        }\n        else{\n            newMessage +=\
    \ letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx3ekcgsp.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx3ekcgsp.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  for(let j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newMessage += vowels[j];\n                newMessage += vowels[j+1];\n\
    \            }\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpv7wzm_m7.js:16\n        for(let j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmpv7wzm_m7.js:16:28)\n    at test (/tmp/tmpv7wzm_m7.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpv7wzm_m7.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter.charCodeAt(0)-65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpop7chkmz.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpop7chkmz.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message.charAt(i);\n    encodedMessage += letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letters.indexOf(letter) + letters.indexOf(letter)\
    \ + letters.indexOf(letter) + letter\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpevl18zgu.js:30\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    if(letter === \"a\" || letter === \"e\"\
    \ || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ = newMessage.replace(letter, letter.toUpperCase());\n    }\n    else if(letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\"){\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n\
    \    }\n    else if(letter === \"b\" || letter === \"c\" || letter === \"d\" ||\
    \ letter === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\"\
    \ || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"\
    n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter ===\
    \ \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter\
    \ === \"x\" || letter === \"y\" || letter === \"z\"){\n      newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    else if(letter === \"B\" || letter === \"\
    C\" || letter === \"D\" || letter === \"F\" || letter === \"G\" || letter ===\
    \ \"H\" || letter === \"J\" || letter === \"K\" || letter === \"L\" || letter\
    \ === \"M\" || letter === \"N\" || letter === \"P\" || letter === \"Q\" || letter\
    \ === \"R\" || letter === \"S\" || letter === \"T\" || letter === \"V\" || letter\
    \ === \"W\" || letter === \"X\" || letter === \"Y\" || letter === \"Z\"){\n  \
    \    newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n \
    \ }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo8ao7q_g.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo8ao7q_g.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i];\n        let newLetter = letter;\n        let\
    \ vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n\
    \        if (vowelIndex > -1) {\n            newLetter = vowels[vowelIndex + 2];\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeq_wq_xc.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeq_wq_xc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 96;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI like\
    \ this solution, but I believe it has a bug. Try it with `encode(\"This is a message\"\
    )`. It returns `\"tHKS KS C MGSSCGG\"` instead of `\"tHKS KS C MGSSCGG\"`.\n<|/\
    \ c |>\n<| c |>\nI believe that is the correct behavior. `tHKS KS C MGSSCGG` is\
    \ `tHKS KS C MGSSCGG` because `t` is at position `0` of `tHKS KS C MGSSCGG`.\n\
    <|/ c |>\n<| c |>\nI believe that is the correct behavior. `tHKS KS C MGSSCGG`\
    \ is `tHKS KS C MGSSCGG` because `t` is at position `0` of `tHKS KS C MGSSCGG`.\n\
    <|/ c |>\n<| c |>\nI believe that is the correct behavior. `tHKS KS C MGSSCGG`\
    \ is `tHKS KS C MGSSCGG` because `t` is at position `0` of `tHKS KS C MGSSCGG`.\n\
    <|/ c |>\n<| c |>\nI believe that is the correct behavior. `tHKS KS C MGSSCGG`\
    \ is `tHKS KS C MGSSCGG` because `t` is at position `0` of `tHKS KS C MGSSCGG`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp37xvjvv3.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letter2 = alphabet.charAt(letterIndex+1);\n    newMessage += alphabet.charAt(letterIndex)\
    \ + letter2;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwli4hfpg.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpwli4hfpg.js:15:23)\n    at test (/tmp/tmpwli4hfpg.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpwli4hfpg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var vowels = \"AEIOUaeiou\";\n\
    \    var newVowels = vowels.split(\"\");\n    var newVowelsIndex = 0;\n    for(var\
    \ j = 0; j < newVowels.length; j++){\n      if(newLetter == newVowels[j]){\n \
    \       newVowelsIndex = j;\n      }\n    }\n    newMessage = newMessage + newLetter;\n\
    \    newMessage = newMessage + newVowels[newVowelsIndex];\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TAEESATA'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp21jcnxg3.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp21jcnxg3.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TAEESATA',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letterIndex2\
    \ = letterIndex + 1;\n        let letterIndex3 = letterIndex2 + 1;\n        let\
    \ letterIndex4 = letterIndex3 + 1;\n        let letterIndex5 = letterIndex4 +\
    \ 1;\n        let letterIndex6 = letterIndex5 + 1;\n        let letterIndex7 =\
    \ letterIndex6 + 1;\n        let letterIndex8 = letterIndex7 + 1;\n        let\
    \ letterIndex9 = letterIndex8 + 1;\n        let letterIndex10 = letterIndex9 +\
    \ 1;\n        let letterIndex11 = letterIndex10 + 1;\n        let letterIndex12\
    \ = letterIndex11 + 1;\n        let letterIndex13 = letterIndex12 + 1;\n     \
    \   let letterIndex14 = letterIndex13 + 1;\n        let letterIndex15 = letterIndex14\
    \ + 1;\n        let letterIndex16 = letterIndex15 + 1;\n        let letterIndex17\
    \ = letterIndex16 + 1;\n        let letterIndex18 = letterIndex17 + 1;\n     \
    \   let letterIndex19 = letterIndex18 + 1;\n        let letterIndex20 = letterIndex19\
    \ + 1;\n        let letterIndex21 = letterIndex20 + 1;\n        let letterIndex22\
    \ = letterIndex21 + 1;\n        let letterIndex23 = letterIndex22 + 1;\n     \
    \   let letterIndex24 = letterIndex23 + 1;\n        let letterIndex25 = letterIndex24\
    \ + 1;\n        let letterIndex26 = letterIndex25 + 1;\n        let letterIndex27\
    \ = letterIndex26 + 1;\n        let letterIndex28 = letterIndex27 + 1;\n     \
    \   let letterIndex29 = letterIndex28 + 1;\n        let letterIndex30 = letterIndex29\
    \ + 1;\n        let letterIndex31 = letterIndex30 + 1;\n        let letterIndex32\
    \ = letterIndex31 + 1;\n        let letterIndex33 = letterIndex32 + 1;\n     \
    \   let letterIndex34 = letterIndex33 + 1;\n        let letterIndex35 = letterIndex34\
    \ + 1;\n        let letterIndex36 = letterIndex35 + 1;\n        let letterIndex37\
    \ = letterIndex36 + 1;\n        let letterIndex38 = letterIndex37 + 1;\n     \
    \   let letterIndex39 = letterIndex38 + 1;\n        let letterIndex40 = letterIndex39\
    \ + 1;\n        let letterIndex41 = letterIndex40 + 1;\n        let letterIndex42\
    \ = letterIndex41 + 1;\n        let letterIndex43 = letterIndex42 + 1;\n     \
    \   let letterIndex44 = letterIndex43 + 1;\n        let letterIndex45 = letterIndex44\
    \ + 1;\n        let letterIndex46 = letterIndex45 + 1;\n        let letterIndex47\
    \ = letterIndex46 + 1;\n        let letterIndex48 = letterIndex47 + 1;\n     \
    \   let letterIndex49 = letterIndex48 + 1;\n        let letter\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgd7omw_s.js:65\n        let letter\n            ^\n\nSyntaxError:\
    \ Identifier 'letter' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n   \
    \ var nextIndex = index + 2;\n    if(nextIndex >= alphabet.length){\n      nextIndex\
    \ = 0;\n    }\n    var nextLetter = alphabet.charAt(nextIndex);\n    newMessage\
    \ += vowels.indexOf(letter) > -1 ? letter : nextLetter;\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bbbb'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeil63yqe.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeil63yqe.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bbbb',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"y\"){\n            newMessage += \"Y\";\n     \
    \   }else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphx88yb3c.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphx88yb3c.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5317lsmq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5317lsmq.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n   \
    \ var nextVowel = alphabet.indexOf(vowels[index], index + 1);\n    newMessage\
    \ += alphabet.charAt(nextVowel);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpqgdn29t8.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgdn29t8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  let vowels = \"aeiou\";\n  let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for(let i = 0; i < message.length; i++){\n    newMessage = newMessage.replace(vowels[i],\
    \ letters[letters.indexOf(vowels[i]) + 2]);\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmposgfggpj.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmposgfggpj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        var newLetter = letter.toUpperCase();\n        var newNextLetter\
    \ = nextLetter.toUpperCase();\n        var newVowel = vowels.indexOf(letter);\n\
    \        var newNextVowel = vowels.indexOf(nextLetter);\n        if(newVowel >\
    \ -1 && newNextVowel > -1){\n            newMessage += newLetter + newNextLetter;\n\
    \            i += 2;\n        }\n        else if(newVowel > -1){\n           \
    \ newMessage += newLetter;\n            i += 1;\n        }\n        else if(newNextVowel\
    \ > -1){\n            newMessage += newNextLetter;\n            i += 1;\n    \
    \    }\n        else{\n            newMessage += letter;\n        }\n    }\n \
    \   return newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpios1sitv.js:18\n        var newVowel = vowels.indexOf(letter);\n\
    \                       ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpios1sitv.js:18:24)\n    at test (/tmp/tmpios1sitv.js:43:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpios1sitv.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0;i<message.length;i++){\n        var\
    \ letter = message.charAt(i);\n        var newLetter = letter;\n        for(var\
    \ j=0;j<vowels.length;j++){\n            if(letter == vowels[j]){\n          \
    \      newLetter = vowels[j+1];\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpharucprs.js:16\n        for(var j=0;j<vowels.length;j++){\n   \
    \                   ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpharucprs.js:16:23)\n    at test (/tmp/tmpharucprs.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpharucprs.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    let newMessageArray = message.split(\"\
    \");\n    newMessageArray = newMessageArray.map(letter => {\n        let index\
    \ = letters.indexOf(letter);\n        return index === -1 ? letter : letters[(index\
    \ + 1) % letters.length];\n    });\n    newMessageArray = newMessageArray.map(letter\
    \ => {\n        let index = vowels.indexOf(letter);\n        return index ===\
    \ -1 ? letter : vowels[(index + 1) % vowels.length];\n    });\n    newMessage\
    \ = newMessageArray.join(\"\");\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,string,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `encode(\"This is a message\")` returns\
    \ `\"tHKS KS C MGSSCGG\"` instead of `\"tHKS KS C MGSSCGG\"`\n<|/ c |>\n<| c |>\n\
    I updated my answer to fix the issue you mentioned\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `encode(\"This is a message\")` returns `\"tHKS KS C MGSSCGG\"\
    ` instead of `\"tHKS KS C MGSSCGG\"`\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ fix the issue you mentioned\n<|/ c |>\n<| a tags=javascript,string,arrays |>\n\
    <code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0tiuuh67.js:27\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message[i];\n    let index = letter.charCodeAt(0) - 65;\n    newMessage\
    \ = newMessage.replace(letter, String.fromCharCode(index));\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiy9koiyn.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiy9koiyn.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i<message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var newLetter = letter;\n      \
    \  if(letter.toUpperCase() === letter){\n            newLetter = letter.toUpperCase();\n\
    \        }\n        for(var j=0; j<vowels.length; j++){\n            if(letter.toLowerCase()\
    \ === vowels[j].toLowerCase()){\n                newLetter = vowels[j];\n    \
    \        }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl_uzxp_2.js:19\n        for(var j=0; j<vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpl_uzxp_2.js:19:24)\n    at test (/tmp/tmpl_uzxp_2.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_uzxp_2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let vowelsCount\
    \ = vowels.length;\n    for(let i = 0; i < message.length; i++){\n        let\
    \ letter = message[i];\n        let nextLetter = message[i+1];\n        if(vowels.includes(letter)){\n\
    \            newMessage += letter;\n            i++;\n        }\n        else\
    \ if(vowels.includes(nextLetter)){\n            newMessage += letter;\n      \
    \      i++;\n        }\n        else{\n            newMessage += letter;\n   \
    \         i++;\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TS'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe_9jgpw3.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe_9jgpw3.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TS',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+1);\n\
    \            newMessage += vowels.indexOf(letter) + nextLetter;\n        }\n \
    \       else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjidcnhgr.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjidcnhgr.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let vowels = \"AEIOU\"\
    ;\n    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(alphabet.indexOf(letter)\
    \ > -1){\n            encodedMessage += letter;\n        }else if(vowels.indexOf(letter)\
    \ > -1){\n            encodedMessage += alphabet.charAt(alphabet.indexOf(letter)\
    \ + 2);\n        }else{\n            encodedMessage += letter;\n        }\n  \
    \  }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0kid7y0.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0kid7y0.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let index = letters.indexOf(letter);\n    if(index\
    \ != -1){\n      newMessage += letters[index];\n      newMessage += letters[index+1];\n\
    \    }\n    else{\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpseld6vtq.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpseld6vtq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + 2;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppq8042_d.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmppq8042_d.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message[i];\n    var index = alphabet.indexOf(letter);\n    if(index\
    \ == -1){\n      newMessage += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n\
    \    }\n  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(index+2)%26];\n    }\n\
    \  }\n  for(var i = 0; i < message.length; i++){\n    var letter = message[i];\n\
    \    var index = alphabet.indexOf(letter);\n    if(index == -1){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += alphabet[(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpty7e09y_.js:94\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    newMessage = newMessage.toUpperCase();\n \
    \   newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n       \
    \ return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\
    \ = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n        return match.toUpperCase().charCodeAt(0)\
    \ - 65;\n    });\n    newMessage = newMessage.replace(/[AEIOUaeiou]/g,function(match){\n\
    \        return match.toUpperCase().charCodeAt(0) - 65;\n    });\n    newMessage\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp14ejfp9w.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn2vco3nt.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2vco3nt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newLetter = nextLetter;\n        }\n        newMessage += newLetter;\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl5zm6evd.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl5zm6evd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letterIndex2\
    \ = letterIndex + 1;\n        let letterIndex3 = letterIndex2 + 1;\n        let\
    \ letterIndex4 = letterIndex3 + 1;\n        let letterIndex5 = letterIndex4 +\
    \ 1;\n        let letterIndex6 = letterIndex5 + 1;\n        let letterIndex7 =\
    \ letterIndex6 + 1;\n        let letterIndex8 = letterIndex7 + 1;\n        let\
    \ letterIndex9 = letterIndex8 + 1;\n        let letterIndex10 = letterIndex9 +\
    \ 1;\n        let letterIndex11 = letterIndex10 + 1;\n        let letterIndex12\
    \ = letterIndex11 + 1;\n        let letterIndex13 = letterIndex12 + 1;\n     \
    \   let letterIndex14 = letterIndex13 + 1;\n        let letterIndex15 = letterIndex14\
    \ + 1;\n        let letterIndex16 = letterIndex15 + 1;\n        let letterIndex17\
    \ = letterIndex16 + 1;\n        let letterIndex18 = letterIndex17 + 1;\n     \
    \   let letterIndex19 = letterIndex18 + 1;\n        let letterIndex20 = letterIndex19\
    \ + 1;\n        let letterIndex21 = letterIndex20 + 1;\n        let letterIndex22\
    \ = letterIndex21 + 1;\n        let letterIndex23 = letterIndex22 + 1;\n     \
    \   let letterIndex24 = letterIndex23 + 1;\n        let letterIndex25 = letterIndex24\
    \ + 1;\n        let letterIndex26 = letterIndex25 + 1;\n        let letterIndex27\
    \ = letterIndex26 + 1;\n        let letterIndex28 = letterIndex27 + 1;\n     \
    \   let letterIndex29 = letterIndex28 + 1;\n        let letterIndex30 = letterIndex29\
    \ + 1;\n        let letterIndex31 = letterIndex30 + 1;\n        let letterIndex32\
    \ = letterIndex31 + 1;\n        let letterIndex33 = letterIndex32 + 1;\n     \
    \   let letterIndex34 = letterIndex33 + 1;\n        let letterIndex35 = letterIndex34\
    \ + 1;\n        let letterIndex36 = letterIndex35 + 1;\n        let letterIndex37\
    \ = letterIndex36 + 1;\n        let letterIndex38 = letterIndex37 + 1;\n     \
    \   let letterIndex39 = letterIndex38 + 1;\n        let letterIndex40 = letterIndex39\
    \ + 1;\n        let letterIndex41 = letterIndex40 + 1;\n        let letterIndex42\
    \ = letterIndex41 + 1;\n        let letterIndex43 = letterIndex42 + 1;\n     \
    \   let letterIndex44 = letterIndex43 + 1;\n        let letterIndex45 = letterIndex44\
    \ + 1;\n        let letterIndex46 = letterIndex45 + 1;\n        let letterIndex47\
    \ = letterIndex46 + 1;\n        let letterIndex48 = letterIndex47 + 1;\n     \
    \   let letterIndex49 = letterIndex48 + 1;\n        let letter\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgd7omw_s.js:65\n        let letter\n            ^\n\nSyntaxError:\
    \ Identifier 'letter' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n        encodedMessage += String.fromCharCode(encodedLetter);\n    }\n\
    \    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpivj8gmsj.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpivj8gmsj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\
    \uFFF4'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphcu5c42y.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmphcu5c42y.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\
    \uFFF3\uFFF4',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let encodedMessage = \"\";\n\
    \    for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = englishAlphabet.indexOf(letter);\n        let letterIndex2\
    \ = letterIndex + 2;\n        if(letterIndex2 >= englishAlphabet.length){\n  \
    \          letterIndex2 = letterIndex2 - englishAlphabet.length;\n        }\n\
    \        encodedMessage += englishAlphabet[letterIndex2];\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0r7d0lgq.js:16\n        let letterIndex = englishAlphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: englishAlphabet is not defined\n\
    \    at encode (/tmp/tmp0r7d0lgq.js:16:27)\n    at test (/tmp/tmp0r7d0lgq.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmp0r7d0lgq.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var result = '';\n    for(var i = 0; i < message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        result += alphabet.indexOf(letter)\
    \ + 1;\n        result += alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)\
    \ + 1));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'20050190200'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppnjwazub.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmppnjwazub.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '20050190200',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.charCodeAt(0) -\
    \ 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplpb1h0ac.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmplpb1h0ac.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index == -1){\n            newMessage += letter;\n        }else{\n\
    \            var nextLetter = alphabet.charAt(index+1);\n            newMessage\
    \ += nextLetter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2xe94_nw.js:15\n        var index = alphabet.indexOf(letter);\n\
    \                    ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp2xe94_nw.js:15:21)\n    at test (/tmp/tmp2xe94_nw.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xe94_nw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 97;\n    newMessage\
    \ += String.fromCharCode((index > 0) ? index : index + 26);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\r\uFFFE\\f\\\
    r'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphcnj9el8.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmphcnj9el8.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\r\uFFFE\
    \\f\\r',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let newLetter = letter;\n    \
    \    for(let j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n                break;\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbi07bklw.js:16\n        for(let j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmpbi07bklw.js:16:28)\n    at test (/tmp/tmpbi07bklw.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpbi07bklw.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for (let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letterIndex2\
    \ = letterIndex + 1;\n        let letterIndex3 = letterIndex2 + 1;\n        let\
    \ letterIndex4 = letterIndex3 + 1;\n        let letterIndex5 = letterIndex4 +\
    \ 1;\n        let letterIndex6 = letterIndex5 + 1;\n        let letterIndex7 =\
    \ letterIndex6 + 1;\n        let letterIndex8 = letterIndex7 + 1;\n        let\
    \ letterIndex9 = letterIndex8 + 1;\n        let letterIndex10 = letterIndex9 +\
    \ 1;\n        let letterIndex11 = letterIndex10 + 1;\n        let letterIndex12\
    \ = letterIndex11 + 1;\n        let letterIndex13 = letterIndex12 + 1;\n     \
    \   let letterIndex14 = letterIndex13 + 1;\n        let letterIndex15 = letterIndex14\
    \ + 1;\n        let letterIndex16 = letterIndex15 + 1;\n        let letterIndex17\
    \ = letterIndex16 + 1;\n        let letterIndex18 = letterIndex17 + 1;\n     \
    \   let letterIndex19 = letterIndex18 + 1;\n        let letterIndex20 = letterIndex19\
    \ + 1;\n        let letterIndex21 = letterIndex20 + 1;\n        let letterIndex22\
    \ = letterIndex21 + 1;\n        let letterIndex23 = letterIndex22 + 1;\n     \
    \   let letterIndex24 = letterIndex23 + 1;\n        let letterIndex25 = letterIndex24\
    \ + 1;\n        let letterIndex26 = letterIndex25 + 1;\n        let letterIndex27\
    \ = letterIndex26 + 1;\n        let letterIndex28 = letterIndex27 + 1;\n     \
    \   let letterIndex29 = letterIndex28 + 1;\n        let letterIndex30 = letterIndex29\
    \ + 1;\n        let letterIndex31 = letterIndex30 + 1;\n        let letterIndex32\
    \ = letterIndex31 + 1;\n        let letterIndex33 = letterIndex32 + 1;\n     \
    \   let letterIndex34 = letterIndex33 + 1;\n        let letterIndex35 = letterIndex34\
    \ + 1;\n        let letterIndex36 = letterIndex35 + 1;\n        let letterIndex37\
    \ = letterIndex36 + 1;\n        let letterIndex38 = letterIndex37 + 1;\n     \
    \   let letterIndex39 = letterIndex38 + 1;\n        let letterIndex40 = letterIndex39\
    \ + 1;\n        let letterIndex41 = letterIndex40 + 1;\n        let letterIndex42\
    \ = letterIndex41 + 1;\n        let letterIndex43 = letterIndex42 + 1;\n     \
    \   let letterIndex44 = letterIndex43 + 1;\n        let letterIndex45 = letterIndex44\
    \ + 1;\n        let letterIndex46 = letterIndex45 + 1;\n        let letterIndex47\
    \ = letterIndex46 + 1;\n        let letterIndex48 = letterIndex47 + 1;\n     \
    \   let letterIndex49 = letterIndex48 + 1;\n        let letterIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdlvgd2tn.js:65\n        let letterIndex\n            ^\n\nSyntaxError:\
    \ Identifier 'letterIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = \"\";\n    for(var i = 0; i < message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        if(letter === \" \"){\n          \
    \  result += \" \";\n        }\n        else{\n            var index = alphabet.indexOf(letter);\n\
    \            if(index === -1){\n                result += letter;\n          \
    \  }\n            else{\n                result += alphabet[index + 2];\n    \
    \        }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_tmuycn6.js:19\n            var index = alphabet.indexOf(letter);\n\
    \                        ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmp_tmuycn6.js:19:25)\n    at test (/tmp/tmp_tmuycn6.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_tmuycn6.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let nextLetter = message.charAt(i+1);\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\"){\n            newMessage += letter;\n       \
    \     i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if (letter === \"b\" ||\
    \ letter === \"c\" || letter === \"d\" || letter === \"f\" || letter === \"g\"\
    \ || letter === \"h\" || letter === \"j\" || letter === \"k\" || letter === \"\
    l\" || letter === \"m\" || letter === \"n\" || letter === \"p\" || letter ===\
    \ \"q\" || letter === \"r\" || letter === \"s\" || letter === \"t\" || letter\
    \ === \"v\" || letter === \"w\" || letter === \"x\" || letter === \"y\" || letter\
    \ === \"z\"){\n            newMessage += letter;\n            i++;\n        }\n\
    \        else if (letter === \"B\" || letter === \"C\" || letter === \"D\" ||\
    \ letter === \"F\" || letter === \"G\" || letter === \"H\" || letter === \"J\"\
    \ || letter === \"K\" || letter === \"L\" || letter === \"M\" || letter === \"\
    N\" || letter === \"P\" || letter === \"Q\" || letter === \"R\" || letter ===\
    \ \"S\" || letter === \"T\" || letter === \"V\" || letter === \"W\" || letter\
    \ === \"X\" || letter === \"Y\" || letter === \"Z\"){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if (letter === \"0\"){\n\
    \            newMessage += letter;\n            i++;\n        }\n        else\
    \ if (letter === \"1\"){\n            newMessage += letter;\n            i++;\n\
    \        }\n        else if (letter === \"2\"){\n            newMessage += letter;\n\
    \            i++;\n        }\n        else if (letter === \"3\"){\n          \
    \  newMessage += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"4\"){\n            newMessage += letter;\n            i++;\n        }\n\
    \        else if (letter === \"5\"){\n            newMessage += letter;\n    \
    \        i++;\n        }\n        else if (letter === \"6\"){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if (letter === \"7\"){\n\
    \            newMessage += letter;\n            i++;\n        }\n        else\
    \ if (letter === \"8\"){\n            newMessage += letter;\n            i++;\n\
    \        }\n        else if (letter === \"9\"){\n            newMessage += letter;\n\
    \            i++;\n        }\n        else if (letter === \"/\"){\n          \
    \  newMessage += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"-\"){\n            newMessage += letter;\n            \nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa8pc5p0e.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        encodedMessage += letter.charCodeAt(0)\
    \ - 65 + 2;\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptnurypt6.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmptnurypt6.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowel2 = vowels[newVowel];\n    var newVowel3 = vowels[newVowel2];\n\
    \    var newVowel4 = vowels[newVowel3];\n    var newVowel5 = vowels[newVowel4];\n\
    \    var newVowel6 = vowels[newVowel5];\n    var newVowel7 = vowels[newVowel6];\n\
    \    var newVowel8 = vowels[newVowel7];\n    var newVowel9 = vowels[newVowel8];\n\
    \    var newVowel10 = vowels[newVowel9];\n    var newVowel11 = vowels[newVowel10];\n\
    \    var newVowel12 = vowels[newVowel11];\n    var newVowel13 = vowels[newVowel12];\n\
    \    var newVowel14 = vowels[newVowel13];\n    var newVowel15 = vowels[newVowel14];\n\
    \    var newVowel16 = vowels[newVowel15];\n    var newVowel17 = vowels[newVowel16];\n\
    \    var newVowel18 = vowels[newVowel17];\n    var newVowel19 = vowels[newVowel18];\n\
    \    var newVowel20 = vowels[newVowel19];\n    var newVowel21 = vowels[newVowel20];\n\
    \    var newVowel22 = vowels[newVowel21];\n    var newVowel23 = vowels[newVowel22];\n\
    \    var newVowel24 = vowels[newVowel23];\n    var newVowel25 = vowels[newVowel24];\n\
    \    var newVowel26 = vowels[newVowel25];\n    var newVowel27 = vowels[newVowel26];\n\
    \    var newVowel28 = vowels[newVowel27];\n    var newVowel29 = vowels[newVowel28];\n\
    \    var newVowel30 = vowels[newVowel29];\n    var newVowel31 = vowels[newVowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpreesf2xj.js:48\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  for(var i=0; i<message.length; i++){\n    var letter =\
    \ message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var nextLetterIndex\
    \ = alphabet.indexOf(nextLetter);\n    var nextLetterLetter = alphabet[nextLetterIndex];\n\
    \    result += letter + nextLetterLetter;\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps6g0t6jw.js:16\n    var nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmps6g0t6jw.js:16:27)\n    at test (/tmp/tmps6g0t6jw.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmps6g0t6jw.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiou\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var nextLetter = letters.charAt(index + 1);\n        newMessage\
    \ += letter;\n        newMessage += nextLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdz_iotgd.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdz_iotgd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newLetter = nextLetter;\n        }\n        newMessage += newLetter;\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl5zm6evd.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl5zm6evd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letterIndex\
    \ = letterIndex + 2;\n        if(letterIndex >= alphabet.length){\n          \
    \  letterIndex = 0;\n        }\n        newMessage += alphabet[letterIndex];\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpeevhafgl.js:17\n        let letterIndex = letterIndex + 2;\n  \
    \          ^\n\nSyntaxError: Identifier 'letterIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ var newLetter = letter.toUpperCase();\n    var newNextLetter = nextLetter.toUpperCase();\n\
    \    if(newLetter === newNextLetter){\n      newMessage += newLetter;\n      i++;\n\
    \    }\n    else{\n      newMessage += newLetter + newNextLetter;\n    }\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp498uw0in.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp498uw0in.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let vowelsCount =\
    \ vowels.length;\n  for(let i = 0; i < message.length; i++){\n    let letter =\
    \ message[i];\n    let letterIndex = vowels.indexOf(letter);\n    if(letterIndex\
    \ >= 0){\n      newMessage += vowels[letterIndex + 2];\n    }\n    else{\n   \
    \   newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxqocmafu.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxqocmafu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for(let i = 0; i < message.length; i++){\n        let letter = message[i];\n\
    \        let index = letter.charCodeAt(0) - 65;\n        newMessage += String.fromCharCode(index+2);\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST\\x15\\x06\\\
    x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprtwnavm7.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmprtwnavm7.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST\\x15\\\
    x06\\x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o'\
    \ || letter === 'u'){\n            result += letter;\n            i++;\n     \
    \   }\n        else if(letter === 'A' || letter === 'E' || letter === 'I' || letter\
    \ === 'O' || letter === 'U'){\n            result += letter.toUpperCase();\n \
    \           i++;\n        }\n        else if(letter === 'B' || letter === 'C'\
    \ || letter === 'D' || letter === 'F' || letter === 'G' || letter === 'H' || letter\
    \ === 'J' || letter === 'K' || letter === 'L' || letter === 'M' || letter ===\
    \ 'N' || letter === 'P' || letter === 'Q' || letter === 'R' || letter === 'S'\
    \ || letter === 'T' || letter === 'V' || letter === 'W' || letter === 'X' || letter\
    \ === 'Y' || letter === 'Z'){\n            result += letter.toLowerCase();\n \
    \           i++;\n        }\n        else if(letter === '1'){\n            result\
    \ += 'a';\n            i++;\n        }\n        else if(letter === '2'){\n   \
    \         result += 'b';\n            i++;\n        }\n        else if(letter\
    \ === '3'){\n            result += 'c';\n            i++;\n        }\n       \
    \ else if(letter === '4'){\n            result += 'd';\n            i++;\n   \
    \     }\n        else if(letter === '5'){\n            result += 'e';\n      \
    \      i++;\n        }\n        else if(letter === '6'){\n            result +=\
    \ 'f';\n            i++;\n        }\n        else if(letter === '7'){\n      \
    \      result += 'g';\n            i++;\n        }\n        else if(letter ===\
    \ '8'){\n            result += 'h';\n            i++;\n        }\n        else\
    \ if(letter === '9'){\n            result += 'i';\n            i++;\n        }\n\
    \        else if(letter === '0'){\n            result += 'j';\n            i++;\n\
    \        }\n        else if(letter === '+'){\n            result += 'k';\n   \
    \         i++;\n        }\n        else if(letter === '-'){\n            result\
    \ += 'l';\n            i++;\n        }\n        else if(letter === '/'){\n   \
    \         result += 'm';\n            i++;\n        }\n        else if(letter\
    \ === '*'){\n            result += 'n';\n            i++;\n        }\n       \
    \ else if(letter === '('){\n            result += 'o';\n            i++;\n   \
    \     }\n        else if(letter === ')'){\n            result += 'p';\n      \
    \      i++;\n        }\n        else if(letter === '\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp92uls0ut.js:92\n        else if(letter === '\n                \
    \           ^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let vowels = \"AEIOUaeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index > -1){\n     \
    \       let vowelIndex = index - 2;\n            newMessage += vowels[vowelIndex];\n\
    \        }\n        newMessage += letter;\n    }\n    return newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkht62qwt.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkht62qwt.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    var messageArray = message.split(\"\");\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.indexOf(vowels[index], index + 1);\n      \
    \      if(nextVowel == -1){\n                newMessage += letter;\n         \
    \   }else{\n                newMessage += vowels[index];\n                newMessage\
    \ += alphabet[nextVowel];\n            }\n        }else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TUUST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi424vn4n.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi424vn4n.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TUUST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < newMessage.length; i++){\n        let letter =\
    \ newMessage.charAt(i);\n        if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage\
    \ = newMessage.slice(0, i) + newMessage.slice(i+1, i+1) + newMessage.slice(i+2,\
    \ i+1) + newMessage.slice(i+3, i+2) + newMessage.slice(i+4, i+3) + newMessage.slice(i+5,\
    \ i+4) + newMessage.slice(i+6, i+5) + newMessage.slice(i+7, i+6) + newMessage.slice(i+8,\
    \ i+7) + newMessage.slice(i+9, i+8) + newMessage.slice(i+10, i+9);\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6fxkh_42.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6fxkh_42.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\" || letter == \"A\" || letter == \"E\" || letter ==\
    \ \"I\" || letter == \"O\" || letter == \"U\"){\n            newMessage += letter;\n\
    \        }else{\n            var letterIndex = alphabet.indexOf(letter);\n   \
    \         var letterTwoIndex = letterIndex + 2;\n            var letterTwo = alphabet[letterTwoIndex];\n\
    \            newMessage += letterTwo;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8v2scx6r.js:19\n            var letterIndex = alphabet.indexOf(letter);\n\
    \                              ^\n\nReferenceError: alphabet is not defined\n\
    \    at encode (/tmp/tmp8v2scx6r.js:19:31)\n    at test (/tmp/tmp8v2scx6r.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8v2scx6r.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter >= 'a' && letter <=\
    \ 'z'){\n            newMessage += letter;\n        }\n        else if(letter\
    \ >= 'A' && letter <= 'Z'){\n            newMessage += letter;\n        }\n  \
    \      else if(letter >= '0' && letter <= '9'){\n            newMessage += letter;\n\
    \        }\n        else if(letter >= 'a' && letter <= 'z'){\n            newMessage\
    \ += letter;\n        }\n        else if(letter >= 'A' && letter <= 'Z'){\n  \
    \          newMessage += letter;\n        }\n        else if(letter >= '0' &&\
    \ letter <= '9'){\n            newMessage += letter;\n        }\n        else\
    \ if(letter >= 'a' && letter <= 'z'){\n            newMessage += letter;\n   \
    \     }\n        else if(letter >= 'A' && letter <= 'Z'){\n            newMessage\
    \ += letter;\n        }\n        else if(letter >= '0' && letter <= '9'){\n  \
    \          newMessage += letter;\n        }\n        else if(letter >= 'a' &&\
    \ letter <= 'z'){\n            newMessage += letter;\n        }\n        else\
    \ if(letter >= 'A' && letter <= 'Z'){\n            newMessage += letter;\n   \
    \     }\n        else if(letter >= '0' && letter <= '9'){\n            newMessage\
    \ += letter;\n        }\n        else if(letter >= 'a' && letter <= 'z'){\n  \
    \          newMessage += letter;\n        }\n        else if(letter >= 'A' &&\
    \ letter <= 'Z'){\n            newMessage += letter;\n        }\n        else\
    \ if(letter >= '0' && letter <= '9'){\n            newMessage += letter;\n   \
    \     }\n        else if(letter >= 'a' && letter <= 'z'){\n            newMessage\
    \ += letter;\n        }\n        else if(letter >= 'A' && letter <= 'Z'){\n  \
    \          newMessage += letter;\n        }\n        else if(letter >= '0' &&\
    \ letter <= '9'){\n            newMessage += letter;\n        }\n        else\
    \ if(letter >= 'a' && letter <= 'z'){\n            newMessage += letter;\n   \
    \     }\n        else if(letter >= 'A' && letter <= 'Z'){\n            newMessage\
    \ += letter;\n        }\n        else if(letter >= '0' && letter <= '9'){\n  \
    \          newMessage += letter;\n        }\n        else if(letter >= 'a' &&\
    \ letter <= 'z'){\n            newMessage += letter;\n        }\n        else\
    \ if(letter >= 'A' && letter <= \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1penq7if.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwkb7686x.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwkb7686x.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793391
