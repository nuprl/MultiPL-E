name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["    let sum = 0;\n    while(N !== 0){\n        sum += N%2;\n      \
    \  N = N/2;\n    }\n    return sum;\n}\n", "    let result = '';\n    while(N\
    \ !== 0){\n        result += N%2 === 0 ? '1' : '0';\n        N = N/2;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a dscore=1\
    \ |>\n<code>", "    let sum = 0;\n    while(N !== 0){\n        sum += N % 2;\n\
    \        N = Math.floor(N/2);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=javascript,algorithm,binary,recursion |>\n<code>", "    let res\
    \ = '1';\n    while(true){\n        if(N%2 === 0){\n            res = res + res;\n\
    \            N = N/2;\n        }else{\n            res = res + res;\n        \
    \    N = N/2;\n        }\n        if(N === 0){\n            break;\n        }\n\
    \    }\n    return res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "  let result = '';\n  for(let i = 0; i <= N; i++){\n    let binary\
    \ = i.toString(2);\n    for(let j = 0; j < binary.length; j++){\n      if(binary[j]\
    \ == '1'){\n        result += 1;\n      }\n    }\n  }\n  return result;\n}\n",
  "  let result = '';\n  for(let i = N; i > 0; i /= 2){\n    result += i.toString(2);\n\
    \  }\n  return result;\n}\n", "    let sum = 0;\n    for(let i = 0; i <= N; i++){\n\
    \        sum += Math.pow(2,i);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "  let sum = 0;\n  while(N !== 0){\n    sum += N %\
    \ 2;\n    N = Math.floor(N/2);\n  }\n  return sum;\n}\n", "  let str = \"\";\n\
    \  while(N !== 0){\n    str = String(N%2) + str;\n    N = Math.floor(N/2);\n \
    \ }\n  return str;\n}\n", "  let ans = \"\";\n  let sum = 0;\n  while(N !== 0){\n\
    \    sum += N % 2;\n    N = Math.floor(N/2);\n  }\n  while(sum > 0){\n    ans\
    \ = ans + sum % 2;\n    sum = Math.floor(sum/2);\n  }\n  return ans;\n}\n", " \
    \   let sum = 0;\n    while(N !== 0){\n        sum += N%2;\n        N = N/2;\n\
    \    }\n    return sum;\n}\n", "  let sum = 0;\n  for(let i = N; i > 0; i--){\n\
    \    sum += (i & 1) ? 1 : 0;\n  }\n  return sum;\n}\n", "  let arr = [];\n  for(let\
    \ i = 0; i<N; i++){\n    arr.push(N%2);\n    N = N/2;\n  }\n  return arr.join('');\n\
    }\n", "  let result = '';\n  for(let i = 0; i <= N; i++){\n    let binary = i.toString(2);\n\
    \    while(binary.length < 4){\n      binary = '0' + binary;\n    }\n    result\
    \ += binary;\n  }\n  return result;\n}\n", "    let sum = 0;\n    for(let i =\
    \ N; i > 0; i--){\n        sum += Math.pow(2,i);\n    }\n    return sum;\n}\n",
  "    let result = '';\n    for(let i = 0; i <= N; i++){\n        let binary = i.toString(2);\n\
    \        let sum = 0;\n        for(let j = 0; j < binary.length; j++){\n     \
    \       sum += parseInt(binary[j]);\n        }\n        result += sum;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm,binary,recursion\
    \ |>\n<| a tags=javascript,algorithm,binary,recursion |>\n<code>", "    let result\
    \ = '';\n    let num = 0;\n    while(num < N){\n        num = num * 2 + N % 2;\n\
    \        result += num % 2;\n        N = N / 2;\n    }\n    return result;\n}\n",
  "  let result = '';\n  for(let i = 0; i <= N; i++){\n    result += binary(i).split('').reduce((a,b)=>a+b,0);\n\
    \  }\n  return result;\n}\n", "    let result = '';\n    while(N !== 0){\n   \
    \     result += N % 2 === 0 ? '1' : '0';\n        N = Math.floor(N/2);\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "    let sum = 0;\n    while(N !== 0){\n        sum += N%2;\n \
    \       N = N/2;\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
