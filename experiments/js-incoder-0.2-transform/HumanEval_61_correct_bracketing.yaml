name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["    var opening_brackets = brackets.split(\"\");\n    var closing_brackets\
    \ = [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_bracket;\n   \
    \     for(var j = i + 1; j < opening_brackets.length; j++){\n            closing_bracket\
    \ = closing_brackets[j] + closing_bracket;\n        }\n        if(opening_bracket\
    \ != closing_bracket){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets\
    \ = brackets.match(/\\)/g);\n  var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \  if(all_opening_brackets.length == 0){\n    return false;\n  }\n  for(var i\
    \ = 0; i < all_opening_brackets.length; i++){\n    if(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length - 1])\n      return false;\n\
    \  }\n  return true;\n}\n", "\tvar opening_brackets = brackets.match(/\\(/g);\n\
    \tvar closing_brackets = brackets.match(/\\)/g);\n\tvar count = 0;\n\tfor(var\
    \ i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count == opening_brackets.length;\n}\n",
  "    var opening_brackets = brackets.split(\"\");\n    var closing_brackets = [];\n\
    \    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_brackets[(i +\
    \ 1) % opening_brackets.length];\n        if(opening_bracket === closing_bracket){\n\
    \            closing_brackets.push(opening_bracket);\n        }\n    }\n    return\
    \ closing_brackets.length == 0;\n}\n", "\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\tvar opening_brackets_length\
    \ = opening_brackets.length;\n\tvar closing_brackets_length = closing_brackets.length;\n\
    \t\n\tfor(var i = 0; i < opening_brackets_length; i++){\n\t\tif(opening_brackets[i]\
    \ != closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n", "    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.trim().length > 0;\n    });\n    return all_opening_brackets_set.length\
    \ == all_opening_brackets.length;\n}\n", "  var opening_brackets = brackets.split('(');\n\
    \  var closing_brackets = brackets.split(')');\n  \n  for(var i = 0; i < opening_brackets.length;\
    \ i++){\n    if(opening_brackets[i].length != closing_brackets[i].length){\n \
    \     return false;\n    }\n  }\n  return true;\n}\n", "  var opening_brackets\
    \ = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n  var\
    \ opening_brackets_length = opening_brackets.length;\n  var closing_brackets_length\
    \ = closing_brackets.length;\n  var i;\n  for(i = 0; i < opening_brackets_length;\
    \ i++){\n    if(opening_brackets[i] === closing_brackets[closing_brackets_length\
    \ - 1]){\n      closing_brackets_length--;\n    }\n  }\n  if(opening_brackets_length\
    \ !== closing_brackets_length){\n    return false;\n  }\n  for(i = 0; i < opening_brackets_length;\
    \ i++){\n    if(opening_brackets[i] !== closing_brackets[i]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\t\n\tfor(var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tvar opening_brackets\
    \ = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\").reverse();\n\
    \t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets\
    \ = brackets.split(\"\").reverse();\n\t\n\tfor (var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif (closing_brackets[i] != opening_brackets[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\t\n\tfor(var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "  var opening_brackets\
    \ = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n  for(var\
    \ i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  var opening_brackets = brackets.split(\"\");\n  var closing_brackets\
    \ = [];\n  for (var i = 0; i < opening_brackets.length; i++){\n    var opening_bracket\
    \ = opening_brackets[i];\n    var closing_bracket = opening_bracket;\n    if (opening_bracket\
    \ == \"(\"){\n      closing_bracket = \")\";\n    }\n    else if (opening_bracket\
    \ == \")\"){\n      closing_bracket = \"(\";\n    }\n    closing_brackets.push(closing_bracket);\n\
    \  }\n  return closing_brackets.join(\"\") == brackets;\n}\n", "    var opening_brackets\
    \ = brackets.split(\"(\");\n    var closing_brackets = brackets.split(\")\");\n\
    \    var opening_brackets_length = opening_brackets.length;\n    var closing_brackets_length\
    \ = closing_brackets.length;\n    var i;\n    for(i = 0; i < opening_brackets_length;\
    \ i++){\n        if(opening_brackets[i].length != closing_brackets[i].length){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    var\
    \ opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets = brackets.match(/\\\
    )/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.length === brackets.length;\n}\n", "    var opening_brackets\
    \ = brackets.split(\"\");\n    var closing_brackets = brackets.split(\"\").reverse();\n\
    \    var correct_bracketing = true;\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n           \
    \ correct_bracketing = false;\n            break;\n        }\n    }\n    return\
    \ correct_bracketing;\n}\n", "  var opening_brackets = brackets.match(/\\(/g);\n\
    \  var closing_brackets = brackets.match(/\\)/g);\n  if(opening_brackets && closing_brackets){\n\
    \    var opening_brackets_length = opening_brackets.length;\n    var closing_brackets_length\
    \ = closing_brackets.length;\n    var i;\n    for(i = 0; i < opening_brackets_length;\
    \ i++){\n      if(opening_brackets[i] != closing_brackets[i]){\n        return\
    \ false;\n      }\n    }\n    for(i = 0; i < closing_brackets_length; i++){\n\
    \      if(opening_brackets[i] != closing_brackets[i]){\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\t\n\tfor(var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "    var opening_brackets\
    \ = brackets.split(\"\");\n    var correct_bracketing = true;\n    for(var i=0;\
    \ i<opening_brackets.length; i++){\n        if(opening_brackets[i] === \"(\"){\n\
    \            opening_brackets.splice(i, 1);\n            correct_bracketing =\
    \ false;\n        }\n    }\n    return correct_bracketing;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
