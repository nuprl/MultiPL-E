name: HumanEval_62_derivative
language: js
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n\
  \  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["    var n = xs.length,\n        ds = [];\n    while (n--) ds.push((xs[n]\
    \ *= 2));\n    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var arr = [];\n\
    \    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ arr;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n\
    \  for (i=n; i-- > 0;) {\n    out[i] = xs[i+1];\n  }\n\n  for (i=1; i< n; i++)\
    \ {\n    m = (i+1)/i;\n    out[i] = out[i-1] * m;\n  }\n\n  return out;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n; i--;\
    \ ) out[i] = xs[i+1] * xs[i];\n\n  for (i=n; m=xs[i]; i--) out[i] = m / out[i];\n\
    \n  return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n    \
    \  m = xs[0].length,\n      f = [];\n  for(var i = 0; i != n; i++){\n    f[i]\
    \ = new Array(m);\n    for(var j = 0; j != m; j++){\n      f[i][j] = xs[i][j];\
    \ // evaluate polynomial\n    }\n  }\n  for(var i = 0; i != n; i++){\n    for(var\
    \ j = 0; j != m; j++){\n      out[i][j] = (f[i][j+1] - f[i][j]) / (xs[i+1][j+1]\
    \ - xs[i][j+1]);\n    }\n  }\n  return out;\n}\n", "  var n = xs.length,\n   \
    \   out = new Array(n),\n      m, i;\n\n  for (i=n-2; i>=0; i--){\n    m = xs[i+1];\n\
    \    out[i] = xs[i] - m * xs[i];\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "    var n = xs.length,\n       \
    \ ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n \
    \   }\n    return ds;\n}\n", "  var n = xs.length;\n  var dxs = [];\n  for(var\
    \ i = 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n;\
    \ i--; ) out[i] = xs[i+1] * xs[i];\n\n  for (i=n; m=xs[i]; i--) out[i] = m / out[i];\n\
    \n  return out;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var y = 0;\n\
    \  for (var i = 0; i < xs.length; i++) {\n    x += xs[i];\n    y += xs[i] * x;\n\
    \    derivatives.push(y);\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n \
    \   pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n \
    \     out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n\
    \    while(xs[i] !== 0) m += xs[i--] * xs[i];\n    out[i] = m;\n  }\n  return\
    \ out;\n}\n", "  var derivatives = [];\n  var xlen = xs.length;\n  if(xlen ==\
    \ 0){\n    return derivatives;\n  }\n  var x = xs[0];\n  for(var i = 1; i < xlen;\
    \ i++){\n    derivatives.push(this.multiply(x, xs[i]));\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length,\n        ds = [];\n    while (n--) ds.push(n in\
    \ xs ? xs[n] : 0);\n    return ds;\n}\n", "    var n = xs.length;\n    var deriv\
    \ = [];\n    for(var i = 1; i < n; i++){\n        deriv.push(xs[i] - xs[i - 1]);\n\
    \    }\n    return deriv;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
