name: HumanEval_137_compare_one
language: js
prompt: "//Create a function that takes integers, floats, or strings representing\n\
  // real numbers, and returns the larger variable in its given variable type.\n//\
  \ Return None if the values are equal.\n// Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n\
  // 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\",\
  \ \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a,\
  \ b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = compare_one;\n  assert.deepEqual(candidate(1, 2),2);\n  assert.deepEqual(candidate(1,\
  \ 2.5),2.5);\n  assert.deepEqual(candidate(2, 3),3);\n  assert.deepEqual(candidate(5,\
  \ 6),6);\n  assert.deepEqual(candidate(1, \"2,3\"),\"2,3\");\n  assert.deepEqual(candidate(\"\
  5,1\", \"6\"),\"6\");\n  assert.deepEqual(candidate(\"1\", \"2\"),\"2\");\n  assert.deepEqual(candidate(\"\
  1\", 1),undefined);\n}\n\ntest();"
completions: ["    if (typeof(a) != typeof(b)) return undefined;\n    if (typeof(a)\
    \ == \"number\") return Math.max(a, b);\n    if (typeof(a) == \"string\") return\
    \ a.localeCompare(b);\n    if (typeof(a) == \"object\") return compare_one(a[0],\
    \ b[0]);\n    return undefined;\n}\n", "    if (a === b) return a;\n    if (a\
    \ < b) return a;\n    if (a > b) return b;\n}\n", "    if (typeof(a) != typeof(b))\
    \ return None;\n    if (a == \"NaN\" || b == \"NaN\") return \"NaN\";\n    if\
    \ (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a ==\
    \ \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a == \"\
    +Infinity\" || b == \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\"\
    \ || b == \"Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b\
    \ == \"-Infinity\") return \"-Infinity\";\n    if (a == \"+Infinity\" || b ==\
    \ \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\"\
    ) return \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return\
    \ \"-Infinity\";\n    if (a == \"+Infinity\" || b == \"+Infinity\") return \"\
    +Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\"\
    ;\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n \
    \   if (a == \"+Infinity\" || b == \"+Infinity\") return \"+Infinity\";\n    if\
    \ (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a ==\
    \ \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a == \"\
    +Infinity\" || b == \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\"\
    \ || b == \"Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b\
    \ == \"-Infinity\") return \"-Infinity\";\n    if (a == \"+Infinity\" || b ==\
    \ \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\"\
    ) return \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return\
    \ \"-Infinity\";\n    if (a == \"+Infinity\" || b == \"+Infinity\") return \"\
    +Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\"\
    ;\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n \
    \   if (a == \"+Infinity\" || b == \"+Infinity\") return \"+Infinity\";\n    if\
    \ (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a ==\
    \ \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a == \"\
    +Infinity\" || b == \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\"\
    \ || b == \"Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b\
    \ == \"-Infinity\") return \"-Infinity\";\n    if (a == \"+Infinity\" || b ==\
    \ \"+Infinity\") return \"+Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\"\
    ) return \"Infinity\";\n    if (a ", "    if (typeof(a) != typeof(b)) return None;\n\
    \    if (a === b) return a;\n    if (typeof(a) == \"string\") a = a.split(\",\"\
    );\n    if (typeof(b) == \"string\") b = b.split(\",\");\n    if (a.length !=\
    \ b.length) return None;\n    var result = [];\n    for (var i = 0; i < a.length;\
    \ i++){\n        result.push(a[i] > b[i] ? 1 : a[i] < b[i] ? -1 : 0);\n    }\n\
    \    return result.indexOf(Math.max.apply(null, result)) >= 0 ? a : b;\n}\n",
  "    if (a === b) return a;\n    if (typeof(a) === 'number' && typeof(b) === 'number'){\n\
    \        return Math.max(a, b);\n    }\n    if (typeof(a) === 'string' && typeof(b)\
    \ === 'string'){\n        var a_real = parseFloat(a);\n        var b_real = parseFloat(b);\n\
    \        if (a_real === b_real){\n            return a_real > b_real ? a : b;\n\
    \        }\n        if (a_real > b_real){\n            return a;\n        }\n\
    \        return b;\n    }\n    if (typeof(a) === 'string' && typeof(b) !== 'string'){\n\
    \        var a_real = parseFloat(a);\n        var b_real = parseFloat(b);\n  \
    \      if (a_real === b_real){\n            return a_real > b_real ? a : b;\n\
    \        }\n        if (a_real > b_real){\n            return a;\n        }\n\
    \        return b;\n    }\n    if (typeof(a) !== 'string' && typeof(b) !== 'string'){\n\
    \        var a_real = parseFloat(a);\n        var b_real = parseFloat(b);\n  \
    \      if (a_real === b_real){\n            return a_real > b_real ? a : b;\n\
    \        }\n        if (a_real > b_real){\n            return a;\n        }\n\
    \        return b;\n    }\n}\n", "    if (a === b) return a;\n    if (a < b) return\
    \ a;\n    if (a > b) return b;\n}\n", "  if(a === b) return a;\n  if(typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n  if(typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n  if(typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n  if(typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n  if(typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n  if(typeof(a)\
    \ === 'boolean' && typeof(b) === 'boolean') return a;\n  if(typeof(a) === 'boolean'\
    \ && typeof(b) === 'string') return b;\n  if(typeof(a) === 'boolean' && typeof(b)\
    \ === 'number') return a;\n  if(typeof(a) === 'boolean' && typeof(b) === 'boolean')\
    \ return a;\n  if(typeof(a) === 'string' && typeof(b) === 'boolean') return a;\n\
    \  if(typeof(a) === 'number' && typeof(b) === 'boolean') return a;\n  if(typeof(a)\
    \ === 'boolean' && typeof(b) === 'number') return a;\n  if(typeof(a) === 'boolean'\
    \ && typeof(b) === 'string') return a;\n  if(typeof(a) === 'number' && typeof(b)\
    \ === 'boolean') return a;\n  if(typeof(a) === 'boolean' && typeof(b) === 'number')\
    \ return a;\n  if(typeof(a) === 'boolean' && typeof(b) === 'boolean') return a;\n\
    \  if(typeof(a) === 'number' && typeof(b) === 'boolean') return a;\n  if(typeof(a)\
    \ === 'boolean' && typeof(b) === 'number') return a;\n  if(typeof(a) === 'boolean'\
    \ && typeof(b) === 'string') return a;\n  if(typeof(a) === 'string' && typeof(b)\
    \ === 'boolean') return a;\n  if(typeof(a) === 'number' && typeof(b) === 'boolean')\
    \ return a;\n  if(typeof(a) === 'boolean' && typeof(b) === 'number') return a;\n\
    \  if(typeof(a) === 'boolean' && typeof(b) === 'string') return a;\n  if(typeof(a)\
    \ === 'number' && typeof(b) === 'boolean') return a;\n  if(typeof(a) === 'boolean'\
    \ && typeof(b) === 'number') return a;\n  if(typeof(a) === 'boolean' && typeof(b)\
    \ === 'string') return a;\n  if(typeof(a) === 'string' && typeof(b) === 'boolean')\
    \ return a;\n  if(typeof(a) === 'number' && typeof(b) === 'boolean') return a;\n\
    \  if(typeof(a) === 'boolean' && typeof(b", "    if (a === b) return a;\n    if\
    \ (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a ===\
    \ null) return b;\n    if (b === null) return a;\n    if (a === \"\") return b;\n\
    \    if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b ===\
    \ \".\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return\
    \ a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a\
    \ === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \".0\")\
    \ return b;\n    if (b === \".0\") return a;\n    if (a === \"-0\") return b;\n\
    \    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b ===\
    \ \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") ", " \
    \   if(a === b) return a;\n    if(a < b) return a;\n    return b;\n}\n", "   \
    \ if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === null) return b;\n    if (b === null) return a;\n  \
    \  if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \"\
    .\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") ", "    if (typeof(a) == 'string'){\n        a = parseFloat(a);\n\
    \    }\n    if (typeof(b) == 'string'){\n        b = parseFloat(b);\n    }\n \
    \   if (typeof(a) != 'number' || typeof(b) != 'number'){\n        return undefined;\n\
    \    }\n    if (a > b){\n        return a;\n    }\n    return b;\n}\n", "    if\
    \ (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n",
  "    if (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n\
    }\n", "  if (a === b) return a;\n  if (a < b) return a;\n  return b;\n}\n", " \
    \ if (a === b) return a;\n  if (a < b) return a;\n  if (a > b) return b;\n}\n",
  "    if (a === b) return a;\n    if (a === null || b === null) return undefined;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a\
    \ === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a === \"-0\"\
    ) return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n\
    \    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b ===\
    \ \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a\
    \ === \".1\") return b;\n    if (b === \".1\") return a;\n    if (a === \"-.1\"\
    ) return b;\n    if (b === \"-.1\") return a;\n    if (a === \"+.1\") return b;\n\
    \    if (b === \"+.1\") return a;\n    if (a === \"-.1\") return b;\n    if (b\
    \ === \"-.1\") return a;\n    if (a === \"+.1\") return b;\n    if (b === \"+.1\"\
    ) return a;\n    if (a === \"-.1\") return b;\n    if (b === \"-.1\") return a;\n\
    \    if (a === \"+.1\") return b;\n    if (b === \"+.1\") return a;\n    if (a\
    \ === \"-.1\") return b;\n    if (b === \"-.1\") return a;\n    if (a === \"+.1\"\
    ) return b;\n    if (b === \"+.1\") return a;\n    if (a === \"-.1\") return b;\n\
    \    if (b === \"-.1\") return a;\n    if (a === \"+.1\") return b;\n    if (b\
    \ === \"+.1\") return a;\n    if (a === \"-.1\") return b;\n    if (b === \"-.1\"\
    ) return a;\n    if (a === \"+.1\") return b;\n    if (b === \"+.1\") return a;\n\
    \    if (a === \"-.1\") return b;\n    if (b === \"-.1\") return a;\n    if (a\
    \ === \"+.1\") return b;\n    if (b === \"+.1\") return a;\n    if (a === \"-.1\"\
    ) return b;\n    if (b === \"-.1\") return a;\n    if (", "    if (a === b) return\
    \ a;\n    if (a === null || b === null) return undefined;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n\
    \    if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b ===\
    \ \".\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return\
    \ a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a\
    \ === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \",\") return\
    \ b;\n    if (b === \",\") return a;\n    if (a === \"<\") return b;\n    if (b\
    \ === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return b;\n    if\
    \ (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if (b === \"\
    >=\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if\
    \ (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\"\
    ) return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n\
    \    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b ===\
    \ \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if\
    \ (a === \">=\") return b;\n    if (b === \">=\") return a;\n    if (a === \"\
    !=\") return b;\n    if (b === \"!=\") return a;\n    if (a === \"==\") return\
    \ b;\n    if (b === \"==\") return a;\n    if (a === \"<\") return b;\n    if\
    \ (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\"\
    ) return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n\
    \    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a ===\
    \ \"~\") return b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return\
    \ b;\n    if (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if\
    \ (b === \">=\"", "    if (a === b) return a;\n    if (a > b) return a;\n    if\
    \ (a < b) return b;\n}\n", "    if (a === b) return a;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === null || b === null)\
    \ return undefined;\n    if (a === b) return 0;\n    if (a === undefined) return\
    \ 1;\n    if (b === undefined) return -1;\n    if (a === \"\") return 1;\n   \
    \ if (b === \"\") return -1;\n    if (a === \".\") return 1;\n    if (b === \"\
    .\") return -1;\n    if (a === \"0\") return 1;\n    if (b === \"0\") return -1;\n\
    \    if (a === \"1\") return 1;\n    if (b === \"1\") return -1;\n    if (a ===\
    \ \".\") return 1;\n    if (b === \".\") return -1;\n    if (a === \"-\") return\
    \ 1;\n    if (b === \"-\") return -1;\n    if (a === \"+\") return 1;\n    if\
    \ (b === \"+\") return -1;\n    if (a === \"1\") return 1;\n    if (b === \"1\"\
    ) return -1;\n    if (a === \"2\") return 1;\n    if (b === \"2\") return -1;\n\
    \    if (a === \"3\") return 1;\n    if (b === \"3\") return -1;\n    if (a ===\
    \ \"4\") return 1;\n    if (b === \"4\") return -1;\n    if (a === \"5\") return\
    \ 1;\n    if (b === \"5\") return -1;\n    if (a === \"6\") return 1;\n    if\
    \ (b === \"6\") return -1;\n    if (a === \"7\") return 1;\n    if (b === \"7\"\
    ) return -1;\n    if (a === \"8\") return 1;\n    if (b === \"8\") return -1;\n\
    \    if (a === \"9\") return 1;\n    if (b === \"9\") return -1;\n    if (a ===\
    \ \"10\") return 1;\n    if (b === \"10\") return -1;\n    if (a === \"11\") return\
    \ 1;\n    if (b === \"11\") return -1;\n    if (a === \"12\") return 1;\n    if\
    \ (b === \"12\") return -1;\n    if (a === \"13\") return 1;\n    if (b === \"\
    13\") return -1;\n    if (a === \"14\") return 1;\n    if (b === \"14\") return\
    \ -1;\n    if (a === \"15\") return 1;\n    if (b === \"15\") return -1;\n   \
    \ if (a === \"16\") return 1;\n    if (b === \"16\") return -1;\n    if (a ===\
    \ \"17\") return 1;\n    if (b === \"17\") return -1;\n    if (a === \"18\") return\
    \ 1;\n    if (b === \"18\") return -1;\n    if (a === \"19\") return 1;\n    if\
    \ (b === \"19\") return -1;\n    if (a === \"20\") return 1;\n    if (b === \"\
    20\") return -1;\n    if (a === \"21\") return 1;\n    if (b === \"21\") return\
    \ -1;\n    if (a === \"22\") return 1;\n    if (b === \"22\") return ", "    if\
    \ (typeof(a) == 'number' && typeof(b) == 'number'){\n        return a > b ? a\
    \ : b;\n    }\n    if (typeof(a) == 'string'){\n        a = a.split(',');\n  \
    \  }\n    if (typeof(b) == 'string'){\n        b = b.split(',');\n    }\n    if\
    \ (a.length != b.length){\n        return undefined;\n    }\n    for (var i =\
    \ 0; i < a.length; i++){\n        if (a[i] != b[i]){\n            return undefined;\n\
    \        }\n    }\n    return undefined;\n}\n", "    if (typeof(a) != typeof(b))\
    \ return None;\n    if (a == '' || b == '') return None;\n    if (a == '.' ||\
    \ b == ',') return None;\n    if (a == '-' || b == '-') return None;\n    if (a\
    \ == '+' || b == '+') return None;\n    if (a == '*' || b == '*') return None;\n\
    \    if (a == '/' || b == '/') return None;\n    if (a == '^' || b == '^') return\
    \ None;\n    if (a == '%' || b == '%') return None;\n    if (a == '<' || b ==\
    \ '<') return None;\n    if (a == '>' || b == '>') return None;\n    if (a ==\
    \ '=' || b == '=') return None;\n    if (a == '==' || b == '==') return None;\n\
    \    if (a == '!' || b == '!') return None;\n    if (a == '&' || b == '&') return\
    \ None;\n    if (a == '|' || b == '|') return None;\n    if (a == '~' || b ==\
    \ '~') return None;\n    if (a == '^' || b == '^') return None;\n    if (a ==\
    \ '~' || b == '~') return None;\n    if (a == '<' || b == '<') return None;\n\
    \    if (a == '>' || b == '>') return None;\n    if (a == '=' || b == '=') return\
    \ None;\n    if (a == '==' || b == '==') return None;\n    if (a == '!' || b ==\
    \ '!') return None;\n    if (a == '&' || b == '&') return None;\n    if (a ==\
    \ '|' || b == '|') return None;\n    if (a == '~' || b == '~') return None;\n\
    \    if (a == '^' || b == '^') return None;\n    if (a == '~' || b == '~') return\
    \ None;\n    if (a == '<' || b == '<') return None;\n    if (a == '>' || b ==\
    \ '>') return None;\n    if (a == '=' || b == '=') return None;\n    if (a ==\
    \ '==' || b == '==') return None;\n    if (a == '!' || b == '!') return None;\n\
    \    if (a == '&' || b == '&') return None;\n    if (a == '|' || b == '|') return\
    \ None;\n    if (a == '~' || b == '~') return None;\n    if (a == '^' || b ==\
    \ '^') return None;\n    if (a == '~' || b == '~') return None;\n    if (a ==\
    \ '<' || b == '<') return None;", "    if (a === b) return a;\n    if (a === null\
    \ || b === null) return undefined;\n    if (a === undefined) return b;\n    if\
    \ (b === undefined) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return b;\n    if (b\
    \ === \"1\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\"\
    ) return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n\
    \    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a ===\
    \ \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (", "    if\
    \ (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n",
  "    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === null) return b;\n    if (b === null) return a;\n  \
    \  if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \"\
    .\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") ", "    var a_type = typeof(a);\n    var b_type =\
    \ typeof(b);\n    if (a_type !== b_type){\n        if (a_type === \"string\"){\n\
    \            return b;\n        } else if (b_type === \"string\"){\n         \
    \   return a;\n        } else if (a_type === \"number\"){\n            if (b_type\
    \ === \"number\"){\n                return a > b ? a : b;\n            } else\
    \ {\n                return a;\n            }\n        } else if (b_type === \"\
    number\"){\n            return b;\n        } else {\n            return undefined;\n\
    \        }\n    } else {\n        return a;\n    }\n}\n", "    if (a === b) return\
    \ a;\n    if (a === null || b === null) return undefined;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n\
    \    if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b ===\
    \ \".\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return\
    \ a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a\
    \ === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \",\") return\
    \ b;\n    if (b === \",\") return a;\n    if (a === \"<\") return b;\n    if (b\
    \ === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return b;\n    if\
    \ (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if (b === \"\
    >=\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if\
    \ (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\"\
    ) return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"<\") return b;\n    if (b ===\
    \ \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return b;\n    if\
    \ (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if (b === \"\
    >=\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if\
    \ (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\"\
    ) return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"<\") return b;\n    if (b ===\
    \ \"<\") return a;", "    if (a === b) return a;\n    if (a < b) return a;\n \
    \   if (a > b) return b;\n}\n", "    if (a === b) return a;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === null) return b;\n\
    \    if (b === null) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"*\") return\
    \ b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"^\") return\
    \ b;\n    if (b === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a\
    \ === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a === \"&\") return\
    \ b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return b;\n    if (b\
    \ === \"|\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return\
    \ b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return\
    \ a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a\
    \ === \"^\") return b;\n    if (b === \"^\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"=\") return ", "    var\
    \ a_type = typeof a;\n    var b_type = typeof b;\n    if (a_type === \"number\"\
    \ && b_type === \"number\"){\n        return a > b ? a : b;\n    } else if (a_type\
    \ === \"string\" && b_type === \"string\"){\n        return a.localeCompare(b);\n\
    \    } else if (a_type === \"object\" && b_type === \"object\"){\n        return\
    \ compare_object(a, b);\n    } else {\n        return undefined;\n    }\n}\n",
  "    if (typeof(a) == 'string'){\n        a = parseFloat(a);\n    }\n    if (typeof(b)\
    \ == 'string'){\n        b = parseFloat(b);\n    }\n    if (a < b){\n        return\
    \ a;\n    }\n    return b;\n}\n", "    if (a === b) return a;\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n}\n", " \
    \   if(a===b) return a;\n    if(typeof a === \"number\" && typeof b === \"number\"\
    ){\n        return Math.max(a, b);\n    }\n    if(typeof a === \"string\" && typeof\
    \ b === \"string\"){\n        return a.localeCompare(b);\n    }\n    if(typeof\
    \ a === \"string\" && typeof b === \"number\"){\n        return a.localeCompare(b);\n\
    \    }\n    if(typeof a === \"number\" && typeof b === \"string\"){\n        return\
    \ a.localeCompare(b);\n    }\n}\n", "    if (a === b) return a;\n    if (a < b)\
    \ return a;\n    if (a > b) return b;\n}\n", "    if (typeof(a) == 'number'){\n\
    \        if (typeof(b) == 'number'){\n            if (a > b) return a;\n     \
    \       return b;\n        }\n        if (typeof(b) == 'string'){\n          \
    \  var a_real = parseFloat(a);\n            var b_real = parseFloat(b);\n    \
    \        if (a_real > b_real) return a;\n            return b;\n        }\n  \
    \  }\n    if (typeof(a) == 'string'){\n        if (typeof(b) == 'number'){\n \
    \           var a_real = parseFloat(a);\n            var b_real = parseFloat(b);\n\
    \            if (a_real < b_real) return a;\n            return b;\n        }\n\
    \        if (typeof(b) == 'string'){\n            var a_real = parseFloat(a);\n\
    \            var b_real = parseFloat(b);\n            if (a_real > b_real) return\
    \ a;\n            return b;\n        }\n    }\n    if (typeof(a) == 'object'){\n\
    \        if (typeof(b) == 'object'){\n            if (a > b) return a;\n     \
    \       return b;\n        }\n        if (typeof(b) == 'string'){\n          \
    \  var a_real = JSON.stringify(a);\n            var b_real = JSON.stringify(b);\n\
    \            if (a_real > b_real) return a;\n            return b;\n        }\n\
    \    }\n    if (typeof(b) == 'object'){\n        if (typeof(a) == 'string'){\n\
    \            var a_real = JSON.stringify(a);\n            var b_real = JSON.stringify(b);\n\
    \            if (a_real < b_real) return a;\n            return b;\n        }\n\
    \        if (typeof(a) == 'object'){\n            if (a < b) return a;\n     \
    \       return b;\n        }\n    }\n}\n", "    if (typeof(a) == 'string'){\n\
    \        a = parseFloat(a);\n    }\n    if (typeof(b) == 'string'){\n        b\
    \ = parseFloat(b);\n    }\n    if (typeof(a) != 'number' || typeof(b) != 'number'){\n\
    \        return undefined;\n    }\n    if (a > b){\n        return a;\n    }\n\
    \    return b;\n}\n", "    if(a === b) return a;\n    if(typeof(a) === 'number'\
    \ && typeof(b) === 'number'){\n        return Math.max(a, b);\n    }\n    if(typeof(a)\
    \ === 'string' && typeof(b) === 'string'){\n        var a_array = a.split(',');\n\
    \        var b_array = b.split(',');\n        var a_len = a_array.length;\n  \
    \      var b_len = b_array.length;\n        if(a_len === b_len){\n           \
    \ for(var i = 0; i < a_len; i++){\n                var a_num = parseFloat(a_array[i]);\n\
    \                var b_num = parseFloat(b_array[i]);\n                if(a_num\
    \ === b_num){\n                    return a_array[i];\n                }\n   \
    \         }\n        }\n    }\n}\n", "    if(typeof(a) != typeof(b)) return None;\n\
    \    if(typeof(a) == \"number\") return (a > b) ? a : b;\n    if(typeof(a) ==\
    \ \"string\") return (a > b) ? a : b;\n    if(typeof(a) == \"boolean\") return\
    \ (a > b) ? a : b;\n    if(typeof(a) == \"object\"){\n        if(typeof(a[0])\
    \ == \"number\") return (compare_one(a[0], b) > 0) ? a[0] : b;\n        if(typeof(a[0])\
    \ == \"string\") return (compare_one(a[0], b) > 0) ? a[0] : b;\n        if(typeof(a[0])\
    \ == \"boolean\") return (compare_one(a[0], b) > 0) ? a[0] : b;\n    }\n    return\
    \ undefined;\n}\n", "    if(a === b) return a;\n    if(a < b) return a;\n    if(b\
    \ < a) return b;\n}\n", "    if (typeof(a) != typeof(b)) return None;\n    if\
    \ (a === b) return a;\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"\
    ){\n        if (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a)\
    \ == \"string\" && typeof(b) == \"string\"){\n        if (a<b) return a;\n   \
    \     if (a>b) return b;\n    }\n    if (typeof(a) == \"string\" && typeof(b)\
    \ == \"number\"){\n        if (a<b) return b;\n        if (a>b) return a;\n  \
    \  }\n    if (typeof(a) == \"number\" && typeof(b) == \"string\"){\n        if\
    \ (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a) == \"\
    number\" && typeof(b) == \"string\"){\n        if (a<b) return b;\n        if\
    \ (a>b) return a;\n    }\n    if (typeof(a) == \"string\" && typeof(b) == \"string\"\
    ){\n        if (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a)\
    \ == \"number\" && typeof(b) == \"number\"){\n        if (a<b) return a;\n   \
    \     if (a>b) return b;\n    }\n    if (typeof(a) == \"number\" && typeof(b)\
    \ == \"number\"){\n        if (a<b) return a;\n        if (a>b) return b;\n  \
    \  }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"){\n        if\
    \ (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a) == \"\
    number\" && typeof(b) == \"number\"){\n        if (a<b) return a;\n        if\
    \ (a>b) return b;\n    }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"\
    ){\n        if (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a)\
    \ == \"number\" && typeof(b) == \"number\"){\n        if (a<b) return a;\n   \
    \     if (a>b) return b;\n    }\n    if (typeof(a) == \"number\" && typeof(b)\
    \ == \"number\"){\n        if (a<b) return a;\n        if (a>b) return b;\n  \
    \  }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"){\n        if\
    \ (a<b) return a;\n        if (a>b) return b;\n    }\n    if (typeof(a) == \"\
    number\" && typeof(b) == \"number\"){\n        if (a<b) return a;\n        if\
    \ (a>b) return b;\n    }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"\
    ){\n        if (a<b) return a;\n        if (a>b) return b;", "    if (typeof(a)\
    \ != typeof(b)) return None;\n    if (a == \"NaN\" || b == \"NaN\") return \"\
    NaN\";\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n\
    \    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n   \
    \ if (a == \"1\" && b == \"1\") return 1;\n    if (a == \"1\" && b == \"0\") return\
    \ 0;\n    if (a == \"0\" && b == \"1\") return 1;\n    if (a == \"0\" && b ==\
    \ \"0\") return 0;\n    if (a == \"1\" && b == \"-1\") return -1;\n    if (a ==\
    \ \"-1\" && b == \"1\") return 1;\n    if (a == \"-1\" && b == \"-1\") return\
    \ -1;\n    if (a == \"1\" && b == \"1\") return 1;\n    if (a == \"1\" && b ==\
    \ \"0\") return 0;\n    if (a == \"0\" && b == \"1\") return 1;\n    if (a ==\
    \ \"0\" && b == \"0\") return 0;\n    if (a == \"1\" && b == \"-1\") return -1;\n\
    \    if (a == \"-1\" && b == \"1\") return 1;\n    if (a == \"-1\" && b == \"\
    -1\") return -1;\n    if (a == \"1\" && b == \"1\") return 1;\n    if (a == \"\
    1\" && b == \"0\") return 0;\n    if (a == \"0\" && b == \"1\") return 1;\n  \
    \  if (a == \"0\" && b == \"0\") return 0;\n    if (a == \"1\" && b == \"-1\"\
    ) return -1;\n    if (a == \"-1\" && b == \"1\") return 1;\n    if (a == \"-1\"\
    \ && b == \"-1\") return -1;\n    if (a == \"1\" && b == \"1\") return 1;\n  \
    \  if (a == \"1\" && b == \"0\") return 0;\n    if (a == \"0\" && b == \"1\")\
    \ return 1;\n    if (a == \"0\" && b == \"0\") return 0;\n    if (a == \"1\" &&\
    \ b == \"-1\") return -1;\n    if (a == \"-1\" && b == \"1\") return 1;\n    if\
    \ (a == \"-1\" && b == \"-1\") return -1;\n    if (a == \"1\" && b == \"1\") return\
    \ 1;\n    if (a == \"1\" && b == \"0\") return 0;\n    if (a == \"0\" && b ==\
    \ \"1\") return 1;\n    if (a == \"0\" && b == \"0\") return 0;\n    if (a ==\
    \ \"1\" && b == \"-1\") return -1;\n    if (a == \"-1\" && b == \"1\") return\
    \ 1;\n    if (a == \"-1\" && b == \"-1\") return -1;\n    if (a == \"1\" && b\
    \ == \"1\") return 1;\n    if (a == \"1\" && b == \"0\") return 0;\n    if (a\
    \ == \"0\" && b == \"1\") return 1;", "    if (a === b) return a;\n    if (a <\
    \ b) return a;\n    if (a > b) return b;\n    return undefined;\n}\n", "    var\
    \ a_type = typeof(a);\n    var b_type = typeof(b);\n    if (a_type === \"number\"\
    \ && b_type === \"number\"){\n        return Math.max(a, b);\n    } else if (a_type\
    \ === \"string\" && b_type === \"string\"){\n        return a.localeCompare(b);\n\
    \    } else if (a_type === \"string\" && b_type === \"number\"){\n        return\
    \ b.localeCompare(a);\n    } else if (a_type === \"number\" && b_type === \"string\"\
    ){\n        return a.localeCompare(b);\n    } else {\n        return undefined;\n\
    \    }\n}\n", "    if (a === b) return a;\n    if (a === null || b === null) return\
    \ undefined;\n    if (a === undefined) return b;\n    if (b === undefined) return\
    \ a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a\
    \ === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return\
    \ a;\n    if (a === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a\
    \ === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a\
    \ === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\"\
    ) return b;\n    if (b === \">=\") return a;\n    if (a === \"!=\") return b;\n\
    \    if (b === \"!=\") return a;\n    if (a === \"==\") return b;\n    if (b ===\
    \ \"==\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"&&\") return b;\n    if (b === \"&&\") return a;\n    if\
    \ (a === \"||\") return b;\n    if (b === \"||\") return a;\n    if (a === \"\
    |\") return b;\n    if (b === \"|\") return a;\n    if (a === \"&\") return b;\n\
    \    if (b === \"&\") return a;\n    if (a === \"==\") return b;\n    if (b ===\
    \ \"==\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"<=\")\
    \ return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\") return b;\n\
    \    if (b === \">=\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a === \"%\") return\
    \ b;\n    if (", "  if(a === b) return a;\n  if(typeof a === typeof b){\n    if(a\
    \ === null || b === null) return undefined;\n    if(a === b) return a;\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\"){\n      if(Math.abs(a) > Math.abs(b))\
    \ return a;\n      if(Math.abs(a) < Math.abs(b)) return b;\n      if(Math.abs(a)\
    \ === Math.abs(b)) return a;\n    }\n    if(typeof a === \"string\" && typeof\
    \ b === \"string\"){\n      if(a === b) return a;\n      if(a === null || b ===\
    \ null) return undefined;\n      if(a === b) return a;\n      if(a === \"\" &&\
    \ b === \"\") return a;\n      if(a === \"\") return b;\n      if(b === \"\")\
    \ return a;\n      if(a === undefined) return b;\n      if(b === undefined) return\
    \ a;\n      if(a === null) return b;\n      if(b === null) return a;\n      if(a\
    \ === \".\" && b === \".\") return a;\n      if(a === \",\" && b === \",\") return\
    \ a;\n      if(a === \"-\" && b === \"-\") return a;\n      if(a === \"+\" &&\
    \ b === \"+\") return a;\n      if(a === \"*\" && b === \"*\") return a;\n   \
    \   if(a === \"/\" && b === \"/\") return a;\n      if(a === \"^\" && b === \"\
    ^\") return a;\n      if(a === \"<\" && b === \"<\") return a;\n      if(a ===\
    \ \">\" && b === \">\") return a;\n      if(a === \"=\" && b === \"=\") return\
    \ a;\n      if(a === \"!\" && b === \"!\") return a;\n      if(a === \"&\" &&\
    \ b === \"&\") return a;\n      if(a === \"|\" && b === \"|\") return a;\n   \
    \   if(a === \"~\" && b === \"~\") return a;\n      if(a === \"^\" && b === \"\
    ^\") return a;\n      if(a === \"<\" && b === \"<\") return a;\n      if(a ===\
    \ \">\" && b === \">\") return a;\n      if(a === \"=\" && b === \"=\") return\
    \ a;\n      if(a === \"!\" && b === \"!\") return a;\n      if(a === \"&\" &&\
    \ b === \"&\") return a;\n      if(a === \"|\" && b === \"|\") return a;\n   \
    \   if(a === \"~\" && b === \"~\") return a;\n      if(a === \"^\" && b === \"\
    ^\") return a;\n      if(a === \"<\" && b === \"<\") return a;\n      if(a ===\
    \ \">\" && b === \">\") return a;\n      if(a === \"=\" && b === \"=\") return\
    \ a;", "    if (a === b) return a;\n    if (a === null || b === null) return null;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\"\
    ) return b;\n    if (b === \">=\") return a;\n    if (a === \"!=\") return b;\n\
    \    if (b === \"!=\") return a;\n    if (a === \"==\") return b;\n    if (b ===\
    \ \"==\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") return a;\n    if (a\
    \ === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\"\
    ) return b;\n    if (b === \">=\") return a;\n    if (a === \"*\") return b;\n\
    \    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b ===\
    \ \"/\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"(\") return b;\n    if (b === \"(\") return a;\n    if (a === \")\") return\
    \ b;\n    if (b === \")\") return a;\n    if (a === \"[\") return b;\n    if (b\
    \ === \"[\"", "    if (a === b) return a;\n    if (a < b) return a;\n    if (a\
    \ > b) return b;\n}\n", "    var a_type = typeof(a);\n    var b_type = typeof(b);\n\
    \    if(a_type === b_type){\n        if(a_type === \"number\" || a_type === \"\
    string\"){\n            return a > b ? a : b;\n        }\n        else{\n    \
    \        return false;\n        }\n    }\n    else{\n        if(a_type === \"\
    string\"){\n            return a.localeCompare(b);\n        }\n        else{\n\
    \            return false;\n        }\n    }\n}\n", "    if (a === b) return a;\n\
    \    if (a < b) return a;\n    if (a > b) return b;\n}\n", "    if (typeof(a)\
    \ != typeof(b)) {\n        if (typeof(a) == \"string\") {\n            a = parseFloat(a);\n\
    \            b = parseFloat(b);\n        }\n        if (typeof(b) == \"string\"\
    ) {\n            a = parseFloat(a);\n            b = parseFloat(b);\n        }\n\
    \        if (a > b) {\n            return a;\n        }\n        if (a < b) {\n\
    \            return b;\n        }\n    }\n    return undefined;\n}\n", "    if\
    \ (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n",
  "    if (typeof(a) != typeof(b)) return None;\n    if (typeof(a) == \"number\")\
    \ return Math.max(a, b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n\
    \    if (typeof(a) == \"object\") {\n        if (a.constructor == Array) return\
    \ compare_one(a[0], b[0]);\n        if (a.constructor == Object) return compare_one(a.constructor,\
    \ b);\n    }\n    return undefined;\n}\n", "    if (a === b) return a;\n    if\
    \ (a < b) return a;\n    if (a > b) return b;\n}\n", "    if (typeof(a) != typeof(b))\
    \ return None;\n    if (typeof(a) == \"number\") return Math.max(a, b);\n    if\
    \ (typeof(a) == \"string\") return a.localeCompare(b);\n    if (typeof(a) == \"\
    object\") return compare_one(a[0], b[0]);\n}\n", "    if (a === b) return a;\n\
    \    if (a < b) return a;\n    if (a > b) return b;\n}\n", "    if (a === b) return\
    \ a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n\
    \    if (a === null) return b;\n    if (b === null) return a;\n    if (a === \"\
    \") return b;\n    if (b === \"\") return a;\n    if (a === \".\") return b;\n\
    \    if (b === \".\") return a;\n    if (a === \"-\") return b;\n    if (b ===\
    \ \"-\") return a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return\
    \ b;\n    if (b === \"^\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b\
    \ === \"&\") return a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return\
    \ a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a\
    \ === \"$\") return b;\n    if (b === \"$\") return a;\n    if (a === \"@\") return\
    \ b;\n    if (b === \"@\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"%\") return b;\n    if (b\
    \ === \"%\") return a;\n    if (a === \"$\") return b;\n    if (b === \"$\") return\
    \ a;\n    if (a === \"@\") return b;\n    if (b === \"@\") return a;\n    if (a\
    \ === \"", "    if (a === b) return a;\n    if (a === null || b === null) return\
    \ undefined;\n    if (a === undefined) return b;\n    if (b === undefined) return\
    \ a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a\
    \ === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a === \"\\\"\"\
    ) return b;\n    if (b === \"\\\"\") return a;\n    if (a === \"'\") return b;\n\
    \    if (b === \"'\") return a;\n    if (a === \"(\") return b;\n    if (b ===\
    \ \"(\") return a;\n    if (a === \")\") return b;\n    if (b === \")\") return\
    \ a;\n    if (a === \"[\") return b;\n    if (b === \"[\") return a;\n    if (a\
    \ === \"]\") return b;\n    if (b === \"]\") return a;\n    if (a === \"{\") return\
    \ b;\n    if (b === \"{\") return a;\n    if (a === \"}\") return b;\n    if (b\
    \ === \"}\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"`\") return b;\n    if (b === \"`\") return a;\n    if (a\
    \ === \"'\") return b;\n    if (b === \"'\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;", "    if(a === b) return a;\n    if(typeof a === typeof b) return a > b\
    \ ? a : b;\n    if(typeof a === \"string\" && typeof b === \"string\") return\
    \ a.localeCompare(b);\n    if(typeof a === \"number\" && typeof b === \"number\"\
    ) return a > b ? a : b;\n    if(typeof a === \"boolean\" && typeof b === \"boolean\"\
    ) return a > b ? a : b;\n    if(a === null || b === null) return a === b ? a :\
    \ b;\n    if(a === undefined) return b;\n    if(a === \"\") return b;\n    if(a\
    \ === true) return b;\n    if(a === false) return a;\n    if(a === 0) return b;\n\
    \    if(a === \"\") return a;\n    if(a === {}) return b;\n    if(a instanceof\
    \ Array) return b;\n    if(a instanceof Date) return b;\n    if(a instanceof RegExp)\
    \ return b;\n    if(a instanceof Error) return b;\n    if(a instanceof Promise)\
    \ return b;\n    if(a instanceof Map) return b;\n    if(a instanceof Set) return\
    \ b;\n    if(a instanceof WeakMap) return b;\n    if(a instanceof WeakSet) return\
    \ b;\n    if(a instanceof Function) return b;\n    if(a instanceof Object) return\
    \ b;\n    if(a instanceof Number) return b;\n    if(a instanceof Boolean) return\
    \ b;\n    if(a instanceof String) return b;\n    if(a instanceof Symbol) return\
    \ b;\n    if(a instanceof Map) return b;\n    if(a instanceof Set) return b;\n\
    \    if(a instanceof WeakMap) return b;\n    if(a instanceof WeakSet) return b;\n\
    \    if(a instanceof Function) return b;\n    if(a instanceof Object) return b;\n\
    \    if(a instanceof Number) return b;\n    if(a instanceof Boolean) return b;\n\
    \    if(a instanceof String) return b;\n    if(a instanceof Symbol) return b;\n\
    \    if(a instanceof Map) return b;\n    if(a instanceof Set) return b;\n    if(a\
    \ instanceof WeakMap) return b;\n    if(a instanceof WeakSet) return b;\n    if(a\
    \ instanceof Function) return b;\n    if(a instanceof Object) return b;\n    if(a\
    \ instanceof Number) return b;\n    if(a instanceof Boolean) return b;\n    if(a\
    \ instanceof String) return b;\n    if(a instanceof Symbol) return b;\n    if(a\
    \ instanceof Map) return b;\n    if(a instanceof Set) return b;\n    if(a instanceof\
    \ WeakMap) return b;\n    if(a instanceof WeakSet) return b;\n    if(a instanceof\
    \ Function) return b;\n    if(a instanceof Object) return b;\n    if(a instanceof\
    \ Number) return b;\n    if(a instanceof Boolean) return b;\n    if(a instanceof\
    \ String) return b;\n    if(a instanceof Symbol) return b;\n    if(a instanceof\
    \ Map) return b;\n    if(a instanceof Set) return b;\n    if(a instanceof WeakMap)\
    \ return b;\n    if(a instanceof WeakSet) return b;\n    if(a instanceof Function)\
    \ return b;\n    if(a instanceof Object) return b;\n    if(a instanceof ", " \
    \   if(a === b) return a;\n    if(typeof a === \"number\" && typeof b === \"number\"\
    ){\n        return a > b ? a : b;\n    }\n    if(typeof a === \"string\" && typeof\
    \ b === \"string\"){\n        return a.localeCompare(b);\n    }\n    if(typeof\
    \ a === \"number\" && typeof b === \"string\"){\n        return a > b ? a : b;\n\
    \    }\n    if(typeof a === \"string\" && typeof b === \"number\"){\n        return\
    \ a.localeCompare(b);\n    }\n    if(typeof a === \"number\" && typeof b === \"\
    number\"){\n        return a > b ? a : b;\n    }\n}\n", "    if (typeof(a) ==\
    \ 'number'){\n        if (typeof(b) == 'number'){\n            return a > b ?\
    \ a : b;\n        }\n        else if (typeof(b) == 'string'){\n            return\
    \ parseFloat(b) > parseFloat(a) ? parseFloat(b) : parseFloat(a);\n        }\n\
    \    }\n    else if (typeof(a) == 'string'){\n        if (typeof(b) == 'number'){\n\
    \            return parseFloat(a) > parseFloat(b) ? parseFloat(a) : parseFloat(b);\n\
    \        }\n        else if (typeof(b) == 'string'){\n            return parseFloat(a)\
    \ > parseFloat(b) ? parseFloat(b) : parseFloat(a);\n        }\n    }\n}\n", " \
    \   var a_type = typeof(a);\n    var b_type = typeof(b);\n    if (a_type == b_type\
    \ && a_type == \"number\"){\n        return a > b ? a : b;\n    } else if (a_type\
    \ == \"string\"){\n        return a.localeCompare(b);\n    } else if (a_type ==\
    \ \"object\"){\n        if (a_type == \"number\" && b_type == \"number\"){\n \
    \           return a > b ? a : b;\n        } else if (a_type == \"number\" &&\
    \ b_type == \"string\"){\n            return a.localeCompare(b);\n        } else\
    \ if (a_type == \"string\" && b_type == \"number\"){\n            return a.localeCompare(b);\n\
    \        } else if (a_type == \"string\" && b_type == \"string\"){\n         \
    \   return a.localeCompare(b);\n        }\n    }\n}\n", "    if (a === b) return\
    \ a;\n    if (typeof(a) === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n\
    \    if (typeof(a) === 'number' && typeof(b) === 'number') return Math.max(a,\
    \ b);\n    if (typeof(a) === 'number') return a;\n    if (typeof(b) === 'number')\
    \ return b;\n    if (a === null || b === null) return a === b ? 0 : (a < b ? -1\
    \ : 1);\n    if (a.constructor === Array) return compare_array(b, a);\n    if\
    \ (b.constructor === Array) return compare_array(a, b);\n    if (a.constructor\
    \ === Object) return compare_object(a, b);\n    if (b.constructor === Object)\
    \ return compare_object(b, a);\n    if (a.constructor === String) return compare_one_string(a,\
    \ b);\n    if (b.constructor === String) return compare_one_string(b, a);\n  \
    \  if (a.constructor === Boolean) return compare_one(b, a);\n    if (b.constructor\
    \ === Boolean) return compare_one(a, b);\n    if (a.constructor === Date) return\
    \ compare_one(b, a);\n    if (b.constructor === Date) return compare_one(a, b);\n\
    \    if (a.constructor === RegExp) return compare_one(b, a);\n    if (b.constructor\
    \ === RegExp) return compare_one(a, b);\n    if (a.constructor === Function) return\
    \ compare_one(b, a);\n    if (b.constructor === Function) return compare_one(a,\
    \ b);\n    if (a.constructor === Error) return compare_one(b, a);\n    if (b.constructor\
    \ === Error) return compare_one(a, b);\n    if (a.constructor === Number) return\
    \ compare_one(b, a);\n    if (b.constructor === Number) return compare_one(a,\
    \ b);\n    if (a.constructor === Math) return compare_one(b, a);\n    if (b.constructor\
    \ === Math) return compare_one(a, b);\n    if (a.constructor === Boolean) return\
    \ compare_one(b, a);\n    if (b.constructor === Boolean) return compare_one(a,\
    \ b);\n    if (a.constructor === Number) return compare_one(b, a);\n    if (b.constructor\
    \ === Number) return compare_one(a, b);\n    if (a.constructor === String) return\
    \ compare_one(b, a);\n    if (b.constructor === String) return compare_one(a,\
    \ b);\n    if (a.constructor === Number) return compare_one(b, a);\n    if (b.constructor\
    \ === Number) return compare_one(a, b);\n    if (a.constructor === Boolean) return\
    \ compare_one(b, a);\n    if (b.constructor === Boolean) return compare_one(a,\
    \ b);\n    if (a.constructor === String) return compare_one(b, a);\n    if (b.constructor\
    \ === String) return compare_one(a, b);\n    if (a.constructor === Number) return\
    \ compare_one(b, a);\n    if (b.constructor === Number) return compare_one(a,\
    \ b);\n    if (a.constructor === Boolean) return compare_one(b, a);\n    if (b.constructor\
    \ === Boolean) return compare_one(a, b);\n    if (a.constructor === String) return\
    \ compare_one(b, a);\n    if (b.constructor === String) return compare_one(a,\
    \ b);\n    if (a.constructor === Number", "    if (a === b) return a;\n    if\
    \ (a === null || b === null) return undefined;\n    if (a === undefined) return\
    \ b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n    if\
    \ (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b === \".\"\
    ) return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n\
    \    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a ===\
    \ \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return\
    \ b;\n    if (b === \"1\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (", "    if (typeof(a) != typeof(b)) return None;\n    if (typeof(a)\
    \ == \"number\") return Math.max(a, b);\n    if (typeof(a) == \"string\") return\
    \ a.localeCompare(b);\n    if (typeof(a) == \"object\") return compare_one(a[0],\
    \ b[0]);\n}\n", "    var a_type = typeof(a);\n    var b_type = typeof(b);\n  \
    \  if (a_type === \"number\" || a_type === \"string\" || a_type === \"boolean\"\
    ){\n        if (b_type === \"number\" || b_type === \"string\" || b_type === \"\
    boolean\"){\n            return a > b ? a : b;\n        }\n    }\n    if (a_type\
    \ === \"object\"){\n        if (b_type === \"object\"){\n            if (a.constructor\
    \ === b.constructor){\n                if (a.constructor === Array){\n       \
    \             if (b.constructor === Array){\n                        return compare_array(a,\
    \ b);\n                    }\n                }\n            }\n        }\n  \
    \  }\n    if (a_type === \"undefined\" || b_type === \"undefined\"){\n       \
    \ return undefined;\n    }\n    if (a_type !== b_type){\n        return undefined;\n\
    \    }\n    return a;\n}\n", "    if(a===b){\n        return a;\n    }\n    else\
    \ if(a instanceof Number && b instanceof Number){\n        return Math.max(a,\
    \ b);\n    }\n    else if(a instanceof String && b instanceof String){\n     \
    \   return a.localeCompare(b);\n    }\n    else if(a instanceof Array && b instanceof\
    \ Array){\n        return compare_one(a[0], b[0]);\n    }\n    else if(a instanceof\
    \ Object && b instanceof Object){\n        var akeys = Object.keys(a).sort();\n\
    \        var bkeys = Object.keys(b).sort();\n        if(akeys.length != bkeys.length){\n\
    \            return undefined;\n        }\n        for(var i=0; i<akeys.length;\
    \ i++){\n            if(a[akeys[i]] !== b[bkeys[i]]){\n                return\
    \ undefined;\n            }\n        }\n        return undefined;\n    }\n}\n",
  "    var a_type = typeof a;\n    var b_type = typeof b;\n    if (a_type === \"string\"\
    \ || a_type === \"number\" || a_type === \"boolean\") {\n        return a > b\
    \ ? a : b;\n    } else if (a_type === \"object\") {\n        if (a_type === \"\
    object\" && b_type === \"object\") {\n            if (a.constructor === b.constructor)\
    \ {\n                for (var key in a) {\n                    if (a[key] !==\
    \ b[key]) {\n                        return a[key] > b[key] ? a[key] : b[key];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return undefined;\n}\n", "    if (a === b) return a;\n    if (a < b) return\
    \ a;\n    if (a > b) return b;\n}\n", "    if(a === b) return a;\n    if(typeof(a)\
    \ === 'number' && typeof(b) === 'number'){\n        return Math.max(a, b);\n \
    \   }\n    if(typeof(a) === 'string' && typeof(b) === 'string'){\n        var\
    \ a_array = a.split(',');\n        var b_array = b.split(',');\n        var a_len\
    \ = a_array.length;\n        var b_len = b_array.length;\n        var i = 0;\n\
    \        while(i<a_len && i<b_len){\n            var a_num = parseFloat(a_array[i]);\n\
    \            var b_num = parseFloat(b_array[i]);\n            if(a_num === b_num){\n\
    \                i++;\n                continue;\n            }\n            if(a_num\
    \ < b_num){\n                return a;\n            }\n            if(a_num >\
    \ b_num){\n                return b;\n            }\n        }\n        if(a_len\
    \ < b_len){\n            return a;\n        }\n        if(a_len > b_len){\n  \
    \          return b;\n        }\n    }\n    return undefined;\n}\n", "    if (typeof(a)\
    \ == 'string'){\n        a = a.split(',');\n    }\n    if (typeof(b) == 'string'){\n\
    \        b = b.split(',');\n    }\n    if (typeof(a) != 'number' || typeof(b)\
    \ != 'number'){\n        return undefined;\n    }\n    if (a < b){\n        return\
    \ a;\n    }\n    return b;\n}\n", "    var a_type = typeof(a);\n    var b_type\
    \ = typeof(b);\n    if (a_type !== b_type){\n        if (a_type === \"string\"\
    ){\n            if (b_type === \"string\"){\n                if (a.localeCompare(b)\
    \ > 0){\n                    return b;\n                }\n                return\
    \ a;\n            }\n            if (b_type === \"number\"){\n               \
    \ if (a > b){\n                    return b;\n                }\n            \
    \    return a;\n            }\n        }\n        if (a_type === \"number\"){\n\
    \            if (b_type === \"string\"){\n                if (a > b){\n      \
    \              return b;\n                }\n                return a;\n     \
    \       }\n            if (b_type === \"number\"){\n                if (a > b){\n\
    \                    return b;\n                }\n                return a;\n\
    \            }\n        }\n    }\n    if (a_type === \"number\"){\n        if\
    \ (b_type === \"string\"){\n            if (a > b){\n                return b;\n\
    \            }\n            return a;\n        }\n        if (b_type === \"number\"\
    ){\n            if (a > b){\n                return b;\n            }\n      \
    \      return a;\n        }\n    }\n    if (a_type === \"string\"){\n        if\
    \ (b_type === \"string\"){\n            if (a.localeCompare(b) > 0){\n       \
    \         return b;\n            }\n            return a;\n        }\n       \
    \ if (b_type === \"number\"){\n            if (a > b){\n                return\
    \ b;\n            }\n            return a;\n        }\n    }\n    if (a_type ===\
    \ \"number\"){\n        if (b_type === \"string\"){\n            if (a > b){\n\
    \                return b;\n            }\n            return a;\n        }\n\
    \        if (b_type === \"number\"){\n            if (a > b){\n              \
    \  return b;\n            }\n            return a;\n        }\n    }\n}\n", " \
    \   if(a===b) return a;\n    if(a>b) return a;\n    if(a<b) return b;\n}\n", " \
    \   if (a === b) return a;\n    if (a === undefined) return b;\n    if (b ===\
    \ undefined) return a;\n    if (a === null) return b;\n    if (b === null) return\
    \ a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a\
    \ === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") ", "    if (a === b) return a;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === null) return b;\n\
    \    if (b === null) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+-0\") return b;\n    if (b === \"+-0\") return a;\n    if (a === \"\
    +0.0\") return b;\n    if (b === \"+0.0\") return a;\n    if (a === \"+00.0\"\
    ) return b;\n    if (b === \"+00.0\") return a;\n    if (a === \"+00.00\") return\
    \ b;\n    if (b === \"+00.00\") return a;\n    if (a === \"+00.000\") return b;\n\
    \    if (b === \"+00.000\") return a;\n    if (a === \"+00.0000\") return b;\n\
    \    if (b === \"+00.0000\") return a;\n    if (a === \"+00.00000\") return b;\n\
    \    if (b === \"+00.00000\") return a;\n    if (a === \"+00.000000\") return\
    \ b;\n    if (b === \"+00.000000\") return a;\n    if (a === \"+00.0000000\")\
    \ return b;\n    if (b === \"+00.0000000\") return a;\n    if (a === \"+00.00000000\"\
    ) return b;\n    if (b === \"+00.00000000\") return a;\n    if (a === \"+00.000000000\"\
    ) return b;\n    if (b === \"+00.000000000\") return a;\n    if (a === \"+00.0000000000\"\
    ) return b;\n    if (b === \"+00.0000000000\") return a;\n    if (a === \"+00.00000000000\"\
    ) return b;\n    if (b === \"+00.00000000000\") return a;\n    if (a === \"+00.000000000000\"\
    ) return b;\n    if (b === \"+00.000000000000\") return a;\n    if (a === \"+00.0000000000000\"\
    ) return b;\n    if (b === \"+00.0000000000000\") return a;\n    if (a === \"\
    +00", "  if (a === b) return a;\n  if (a < b) return a;\n  if (a > b) return b;\n\
    }\n", "    if (a === b) return a;\n    if (a === undefined) return b;\n    if\
    \ (b === undefined) return a;\n    if (a === null) return b;\n    if (b === null)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") ", "    if (typeof(a) != typeof(b)) return\
    \ None;\n    if (typeof(a) == \"number\") return Math.max(a, b);\n    if (typeof(a)\
    \ == \"string\") return a.localeCompare(b);\n    if (typeof(a) == \"boolean\"\
    ) return (a && b) ? a : b;\n    if (typeof(a) == \"object\") return compare_one(a[0],\
    \ b[0]) ? a[1] : b[1];\n    return None;\n}\n", "    if (a === b) return a;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === null) return b;\n    if (b === null) return a;\n    if (a === \"\") return\
    \ b;\n    if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b\
    \ === \".\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return\
    \ a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a\
    \ === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return\
    \ b;\n    if (b === \"1\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-.\") return b;\n    if (b === \"\
    -.\") return a;\n    if (a === \"+.\") return b;\n    if (b === \"+.\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a === \".0\")\
    \ return b;\n    if (b === \".0\") return a;\n    if (a === \"-.\") return b;\n\
    \    if (b === \"-.\") return a;\n    if (a === \"+.\") return b;\n    if (b ===\
    \ \"+.\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a\
    \ === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a === \"-.\"\
    ) return b;\n    if (b === \"-.\") return a;\n    if (a === \"+.\") return b;\n\
    \    if (b === \"+.\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-.\") return b;\n    if (b === \"-.\") return a;\n    if (a === \"\
    +.\") return b;\n    if (b === \"+.\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return b;\n    if (b\
    \ === \"1\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\"\
    ) return a;\n    if (a === \"-.\") return b;\n    if (b === \"-.\") return a;\n\
    \    if (a === \"+.\") return b;\n    if (b === \"+", "    var a_type = typeof\
    \ a;\n    var b_type = typeof b;\n    if (a_type === \"number\" && b_type ===\
    \ \"number\"){\n        return Math.max(a, b);\n    } else if (a_type === \"string\"\
    \ && b_type === \"string\"){\n        return a.localeCompare(b);\n    } else if\
    \ (a_type === \"object\" && b_type === \"object\"){\n        return compare_object(a,\
    \ b);\n    } else if (a_type === \"undefined\" || b_type === \"undefined\"){\n\
    \        return undefined;\n    } else {\n        return undefined;\n    }\n}\n",
  "  if(a === b) return a;\n  if(typeof a === 'number' && typeof b === 'number'){\n\
    \    if(a>b) return a;\n    if(a<b) return b;\n  }\n  if(typeof a === 'string'\
    \ && typeof b === 'string'){\n    if(a>b) return a;\n    if(a<b) return b;\n \
    \ }\n  if(a instanceof Array && b instanceof Array){\n    if(a instanceof Array\
    \ && b instanceof Array && a.length===b.length){\n      for(var i=0; i<a.length;\
    \ i++){\n        if(a[i]>b[i]) return a[i];\n        if(a[i]<b[i]) return b[i];\n\
    \      }\n    }\n  }\n  if(a instanceof Object && b instanceof Object){\n    if(a\
    \ instanceof Object && b instanceof Object && a.constructor===b.constructor){\n\
    \      for(var key in a){\n        if(a[key]>b[key]) return a[key];\n        if(a[key]<b[key])\
    \ return b[key];\n      }\n    }\n  }\n  return undefined;\n}\n", "    if (typeof(a)\
    \ != typeof(b)) return false;\n    if (typeof(a) == \"number\"){\n        if (a==b)\
    \ return true;\n        if (a>b) return true;\n        if (a<b) return false;\n\
    \    }\n    if (typeof(a) == \"string\"){\n        if (a==b) return true;\n  \
    \      if (a>b) return true;\n        if (a<b) return false;\n    }\n    if (typeof(a)\
    \ == \"object\"){\n        if (a.constructor == Array){\n            if (a.length\
    \ == b.length){\n                for (var i=0; i<a.length; i++){\n           \
    \         if (a[i] != b[i]) return false;\n                }\n               \
    \ return true;\n            }\n        }\n    }\n    return false;\n}\n", "  \
    \  if(a===b) return a;\n    if(a<b) return a;\n    if(a>b) return b;\n}\n", " \
    \   if(a === b) return a;\n    if(a < b) return a;\n    return b;\n}\n", "   \
    \ if (a === b) return a;\n    if (a > b) return a;\n    if (a < b) return b;\n\
    }\n", "  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b ===\
    \ undefined) return a;\n  if (a === null) return b;\n  if (b === null) return\
    \ a;\n  if (a === \"\") return b;\n  if (b === \"\") return a;\n  if (a === \"\
    .\") return b;\n  if (b === \".\") return a;\n  if (a === \"-\") return b;\n \
    \ if (b === \"-\") return a;\n  if (a === \"+\") return b;\n  if (b === \"+\"\
    ) return a;\n  if (a === \"0\") return b;\n  if (b === \"0\") return a;\n  if\
    \ (a === \".0\") return b;\n  if (b === \".0\") return a;\n  if (a === \"-0\"\
    ) return b;\n  if (b === \"-0\") return a;\n  if (a === \"+0\") return b;\n  if\
    \ (b === \"+0\") return a;\n  if (a === \"-0\") return b;\n  if (b === \"-0\"\
    ) return a;\n  if (a === \"+0\") return b;\n  if (b === \"+0\") return a;\n  if\
    \ (a === \"-0\") return b;\n  if (b === \"-0\") return a;\n  if (a === \"+0\"\
    ) return b;\n  if (b === \"+0\") return a;\n  if (a === \"-0\") return b;\n  if\
    \ (b === \"-0\") return a;\n  if (a === \"+0\") return b;\n  if (b === \"+0\"\
    ) return a;\n  if (a === \"-0\") return b;\n  if (b === \"-0\") return a;\n  if\
    \ (a === \"+0\") return b;\n  if (b === \"+0\") return a;\n  if (a === \"-0\"\
    ) return b;\n  if (b === \"-0\") return a;\n  if (a === \"+0\") return b;\n  if\
    \ (b === \"+0\") return a;\n  if (a === \"-0\") return b;\n  if (b === \"-0\"\
    ) return a;\n  if (a === \"+0\") return b;\n  if (b === \"+0\") return a;\n  if\
    \ (a === \"-0\") return b;\n  if (b === \"-0\") return a;\n  if (a === \"+0\"\
    ) return b;\n  if (b === \"+0\") return a;\n  if (a === \"-0\") return b;\n  if\
    \ (b === \"-0\") return a;\n  if (a === \"+0\") return b;\n  if (b === \"+0\"\
    ) return a;\n  if (a === \"-0\") return b;\n  if (b === \"-0\") return a;\n  if\
    \ (a === \"+0\") return b;\n  if (b === \"+0\") return a;\n  if (a === \"-0\"\
    ) return b;\n  if (b === \"-0\") return a;\n  if (a === \"+0\") return b;\n  if\
    \ (b === \"+0\") return a;\n  if (a === \"-0\") return b;\n  if (b === \"-0\"\
    ) return a;\n  if (a === \"+0\") return b;\n  if (b === \"+0\") ", "    if (a\
    \ === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n",
  "    if (typeof(a) == 'number'){\n        if (typeof(b) == 'number'){\n        \
    \    return Math.max(a, b);\n        }\n        else if (typeof(b) == 'string'){\n\
    \            return parseFloat(b);\n        }\n    }\n    else if (typeof(a) ==\
    \ 'string'){\n        if (typeof(b) == 'number'){\n            return parseFloat(a);\n\
    \        }\n        else if (typeof(b) == 'string'){\n            return parseFloat(b);\n\
    \        }\n    }\n}\n", "    if (a === b) return a;\n    if (a === null || b\
    \ === null) return undefined;\n    if (a === undefined) return b;\n    if (b ===\
    \ undefined) return a;\n    if (a === \"\") return b;\n    if (b === \"\") return\
    \ a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a\
    \ === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return\
    \ b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b\
    \ === \"0\") return a;\n    if (a === \",\") return b;\n    if (b === \",\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return\
    \ b;\n    if (b === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return\
    \ a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a\
    \ === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a\
    \ === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a === \"*\") return\
    \ b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"<\") return b;", "    if(a === b) return\
    \ a;\n    if(typeof(a) != typeof(b)) return undefined;\n    if(typeof(a) == \"\
    number\"){\n        if(a<b) return a;\n        if(a>b) return b;\n    }\n    if(typeof(a)\
    \ == \"string\"){\n        var a_array = a.split(\",\");\n        var b_array\
    \ = b.split(\",\");\n        if(a.length != b.length) return undefined;\n    \
    \    for(var i=0; i<a_array.length; i++){\n            if(a_array[i] != b_array[i])\
    \ return undefined;\n        }\n    }\n    return b;\n}\n", "    if(a === b) return\
    \ a;\n    if(typeof a === typeof b) return a;\n    if(typeof a === \"number\"\
    \ && typeof b === \"number\"){\n        if(a>b) return a;\n        if(a<b) return\
    \ b;\n        return a;\n    }\n    if(typeof a === \"string\" && typeof b ===\
    \ \"string\"){\n        if(a>b) return a;\n        if(a<b) return b;\n       \
    \ return a;\n    }\n    if(typeof a === \"number\" && typeof b === \"string\"\
    ){\n        if(a>b) return a;\n        if(a<b) return b;\n        return a;\n\
    \    }\n    if(typeof a === \"string\" && typeof b === \"number\"){\n        if(a>b)\
    \ return a;\n        if(a<b) return b;\n        return a;\n    }\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\"){\n        if(a>b) return a;\n \
    \       if(a<b) return b;\n        return a;\n    }\n    if(typeof a === \"string\"\
    \ && typeof b === \"string\"){\n        if(a>b) return a;\n        if(a<b) return\
    \ b;\n        return a;\n    }\n    if(a === null && b === null) return a;\n \
    \   if(a === null && b !== null) return b;\n    if(a !== null && a===b) return\
    \ a;\n    if(a !== null && a!==b) return b;\n    return undefined;\n}\n", "  \
    \  if (typeof(a) != typeof(b)) return None;\n    if (a < b) return a;\n    if\
    \ (a > b) return b;\n    return a;\n}\n", "  if (typeof(a) != typeof(b)) return\
    \ None;\n  if (typeof(a) == \"string\") return compare_one_real(parseFloat(a),\
    \ parseFloat(b));\n  if (typeof(a) == \"number\") return compare_one_real(parseFloat(a),\
    \ parseFloat(b));\n  if (typeof(a) == \"boolean\") return compare_one_real(a,\
    \ b);\n  if (typeof(a) == \"object\") return compare_one_real(JSON.stringify(a),\
    \ JSON.stringify(b));\n  return None;\n}\n", "    if (a === b) return a;\n   \
    \ if (a === null || b === null) return undefined;\n    if (a === undefined) return\
    \ b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n    if\
    \ (b === \"\") return a;\n    if (a === \".\" || b === \".\") return b;\n    if\
    \ (a === \",\" || b === \",\") return b;\n    if (a === \"-\" || b === \"-\")\
    \ return b;\n    if (a === \"+\" || b === \"+\") return b;\n    if (a === \"*\"\
    \ || b === \"*\") return b;\n    if (a === \"/\" || b === \"/\") return b;\n \
    \   if (a === \"^\" || b === \"^\") return b;\n    if (a === \"<\" || b === \"\
    <\") return b;\n    if (a === \">\" || b === \">\") return b;\n    if (a === \"\
    =\" || b === \"=\") return b;\n    if (a === \"!\" || b === \"!\") return b;\n\
    \    if (a === \"~\" || b === \"~\") return b;\n    if (a === \"&\" || b === \"\
    &\") return b;\n    if (a === \"|\" || b === \"|\") return b;\n    if (a === \"\
    (\" || b === \"(\") return b;\n    if (a === \")\" || b === \")\") return b;\n\
    \    if (a === \"{\" || b === \"{\") return b;\n    if (a === \"}\" || b === \"\
    }\") return b;\n    if (a === \"[\" || b === \"[\") return b;\n    if (a === \"\
    ]\" || b === \"]\") return b;\n    if (a === \"?\" || b === \"?\") return b;\n\
    \    if (a === \"!\" || b === \"!\") return b;\n    if (a === \"~\" || b === \"\
    ~\") return b;\n    if (a === \"^\" || b === \"^\") return b;\n    if (a === \"\
    <\" || b === \"<\") return b;\n    if (a === \">\" || b === \">\") return b;\n\
    \    if (a === \"=\" || b === \"=\") return b;\n    if (a === \"!\" || b === \"\
    !\") return b;\n    if (a === \"~\" || b === \"~\") return b;\n    if (a === \"\
    &\" || b === \"&\") return b;\n    if (a === \"|\" || b === \"|\") return b;\n\
    \    if (a === \"(\" || b === \"(\") return b;\n    if (a === \")\" || b === \"\
    )\") return b;\n    if (a === \"{\" || b === \"{\") return b;\n    if (a === \"\
    }\" || b === \"}\") return b;\n    if (a === \"[\" || b === \"[\") return b;\n\
    \    if (a === \"]\" || b === \"]\") return b;\n    if (a === \"?\" || b === \"\
    ?\") return b;\n    if (a === \"!\" || b === \"!\") return b;\n    if (a === \"\
    ~\" || b === \"~", "  if(a === b) return a;\n  if(typeof a === typeof b){\n  \
    \  if(a === null || a === undefined) return a;\n    if(a === \"\" || a === undefined)\
    \ return a;\n    if(a === true || a === false) return a;\n    if(a === NaN) return\
    \ a;\n    if(a === Infinity) return a;\n    if(a === -Infinity) return a;\n  \
    \  if(a === -0 || a === 0) return a;\n    if(a === +0 || a === 0) return a;\n\
    \    if(a === \"\") return a;\n    if(a === undefined) return a;\n    if(a ===\
    \ null) return a;\n    if(a === true) return a;\n    if(a === false) return a;\n\
    \    if(a === undefined) return a;\n    if(a === NaN) return a;\n    if(a ===\
    \ Infinity) return a;\n    if(a === -Infinity) return a;\n    if(a === -0 || a\
    \ === 0) return a;\n    if(a === +0 || a === 0) return a;\n    if(a === \"\")\
    \ return a;\n    if(a === undefined) return a;\n    if(a === null) return a;\n\
    \    if(a === true) return a;\n    if(a === false) return a;\n    if(a === undefined)\
    \ return a;\n    if(a === NaN) return a;\n    if(a === Infinity) return a;\n \
    \   if(a === -Infinity) return a;\n    if(a === -0 || a === 0) return a;\n   \
    \ if(a === +0 || a === 0) return a;\n    if(a === \"\") return a;\n    if(a ===\
    \ undefined) return a;\n    if(a === null) return a;\n    if(a === true) return\
    \ a;\n    if(a === false) return a;\n    if(a === undefined) return a;\n    if(a\
    \ === NaN) return a;\n    if(a === Infinity) return a;\n    if(a === -Infinity)\
    \ return a;\n    if(a === -0 || a === 0) return a;\n    if(a === +0 || a === 0)\
    \ return a;\n    if(a === \"\") return a;\n    if(a === undefined) return a;\n\
    \    if(a === null) return a;\n    if(a === true) return a;\n    if(a === false)\
    \ return a;\n    if(a === undefined) return a;\n    if(a === NaN) return a;\n\
    \    if(a === Infinity) return a;\n    if(a === -Infinity) return a;\n    if(a\
    \ === -0 || a === 0) return a;\n    if(a === +0 || a === 0) return a;\n    if(a\
    \ === \"\") return a;\n    if(a === undefined) return a;\n    if(a === null) return\
    \ a;\n    if(a === true) return a;\n    if(a === false) return a;\n    if(a ===\
    \ undefined) return a;\n    if(a === NaN) return a;\n    if(a === Infinity) return\
    \ a;\n    if(a === -Infinity) return a;\n    if(a === -0 || a === 0) return a;\n",
  "    if(a === b) return a;\n    if(typeof a === \"number\" && typeof b === \"number\"\
    ){\n        return Math.max(a, b);\n    }\n    if(typeof a === \"string\" && typeof\
    \ b === \"string\"){\n        return a.localeCompare(b);\n    }\n    if(typeof\
    \ a === \"object\" && typeof b === \"object\"){\n        if(a === null){\n   \
    \         return b;\n        }\n        if(b === null){\n            return a;\n\
    \        }\n        if(a instanceof Array && b instanceof Array){\n          \
    \  var aLength = a.length;\n            var bLength = b.length;\n            if(aLength\
    \ !== bLength){\n                return undefined;\n            }\n          \
    \  for(var i = 0; i < aLength; i++){\n                if(a[i] !== b[i]){\n   \
    \                 return undefined;\n                }\n            }\n      \
    \      return aLength > bLength ? a : b;\n        }\n        if(a instanceof Date){\n\
    \            return a.getTime() > b.getTime() ? a : b;\n        }\n        if(a\
    \ instanceof RegExp){\n            return a.source.length > b.source.length ?\
    \ a : b;\n        }\n        if(a instanceof Error){\n            return a.message\
    \ > b.message ? a : b;\n        }\n        if(a === null && b !== null){\n   \
    \         return b;\n        }\n        if(a !== null && b !== null){\n      \
    \      return a;\n        }\n    }\n    return undefined;\n}\n", "    if (a ===\
    \ b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return\
    \ a;\n    if (a === null) return b;\n    if (b === null) return a;\n    if (a\
    \ === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\") return\
    \ b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n    if (b\
    \ === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a === \"-0\"\
    ) return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n\
    \    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b ===\
    \ \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") ", "    var a_is_str = typeof(a) == \"string\";\n    var b_is_str = typeof(b)\
    \ == \"string\";\n    var a_is_num = typeof(a) == \"number\";\n    var b_is_num\
    \ = typeof(b) == \"number\";\n    var a_is_real = a_is_num || a_is_str;\n    var\
    \ b_is_real = b_is_num || b_is_str;\n    if(a_is_real && b_is_real){\n       \
    \ if(a_is_num && b_is_num){\n            return Math.max(a, b);\n        }\n \
    \       if(a_is_num){\n            return a;\n        }\n        if(b_is_num){\n\
    \            return b;\n        }\n        if(a_is_str && b_is_str){\n       \
    \     var a_num = parseFloat(a);\n            var b_num = parseFloat(b);\n   \
    \         if(a_num == b_num){\n                return a_num;\n            }\n\
    \            return a_num > b_num ? a : b;\n        }\n    }\n    return undefined;\n\
    }\n", "    if (typeof(a) != typeof(b)) return undefined;\n    if (a === b) return\
    \ a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n\
    \    if (a === null) return b;\n    if (b === null) return a;\n    if (a === \"\
    \") return b;\n    if (b === \"\") return a;\n    if (a === \".\") return b;\n\
    \    if (b === \".\") return a;\n    if (a === \"-\") return b;\n    if (b ===\
    \ \"-\") return a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a === \".0\")\
    \ return b;\n    if (b === \".0\") return a;\n    if (a === \"-.0\") return b;\n\
    \    if (b === \"-.0\") return a;\n    if (a === \"+.0\") return b;\n    if (b\
    \ === \"+.0\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\"\
    ) return a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return a;\n\
    \    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a ===\
    \ \"-.0\") return b;\n    if (b === \"-.0\") return a;\n    if (a === \"+.0\"\
    ) return b;\n    if (b === \"+.0\") return a;\n    if (a === \"0\") return b;\n\
    \    if (b === \"0\") return a;\n    if (a === \"1\") return b;\n    if (b ===\
    \ \"1\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return\
    \ a;\n    if (a === \"-.0\") return b;\n    if (b === \"-.0\") return a;\n   \
    \ if (a === \"+.0\") return b;\n    if (b === \"+.0\") return a;\n    if (a ===\
    \ \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return\
    \ b;\n    if (b === \"1\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-.0\") return b;\n    if (b === \"\
    -.0\") return a;\n    if (a === \"+.0\") return b;\n    if (b === \"+.0\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a === \".0\")\
    \ return b;\n    if (b === \".0\") return a;\n    if (a === \"-.0\") return b;\n\
    \    if (", "    if (a === b) return a;\n    if (a < b) return a;\n    if (a >\
    \ b) return b;\n}\n", "    if (a === b) return a;\n    if (a === null || b ===\
    \ null) return undefined;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \",\") return b;\n    if (b === \",\") return\
    \ a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\"\
    ) return b;\n    if (b === \">=\") return a;\n    if (a === \"!=\") return b;\n\
    \    if (b === \"!=\") return a;\n    if (a === \"==\") return b;\n    if (b ===\
    \ \"==\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a\
    \ === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a\
    \ === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a === \"<=\")\
    \ return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\") return b;\n\
    \    if (b === \">=\") return a;\n    if (a === \"!=\") return b;\n    if (b ===\
    \ \"!=\") return a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;", "    if (a === b) return a;\n    if (a\
    \ === null || b === null) return null;\n    if (a === undefined) return b;\n \
    \   if (b === undefined) return a;\n    if (a === \"\") return b;\n    if (b ===\
    \ \"\") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return\
    \ a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a\
    \ === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return b;\n    if (b\
    \ === \"1\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\"\
    ) return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n\
    \    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a ===\
    \ \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"?\") return b;\n    if (b === \"?\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"=\") return b;\n", "    if (typeof(a)\
    \ == 'number'){\n        if (typeof(b) == 'number'){\n            return a > b\
    \ ? a : b;\n        } else {\n            return a > b ? b : a;\n        }\n \
    \   } else if (typeof(a) == 'string'){\n        if (typeof(b) == 'string'){\n\
    \            return a.localeCompare(b);\n        } else {\n            return\
    \ a.localeCompare(b);\n        }\n    } else {\n        return undefined;\n  \
    \  }\n}\n", "    if(a === b) return a;\n    if(a < b) return a;\n    if(a > b)\
    \ return b;\n}\n", "    if (a === b) return a;\n    if (typeof(a) === 'string'\
    \ && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a) ===\
    \ 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'string') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a)\
    \ === 'string' && typeof(b) === 'string') return a.localeCompare(b);\n    if (typeof(a)\
    \ === 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if (typeof(a",
  "    if (a === b) return a;\n    if (a === null || b === null) return undefined;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a === \"*\") return\
    \ b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return\
    \ b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"?\") return b;\n    if (b === \"?\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return\
    \ b;\n    if (b === \"^\") return a;\n    if (a === \"%\") return b;\n    if (b\
    \ === \"%\") return a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return\
    \ a;\n    if (a === \"|\") return b;", "    if (typeof(a) != typeof(b)) return\
    \ false;\n    if (typeof(a) == \"number\") return (a > b) ? 1 : ((a < b) ? -1\
    \ : 0);\n    if (typeof(a) == \"string\") return (a > b) ? 1 : ((a < b) ? -1 :\
    \ 0);\n    if (typeof(a) == \"boolean\") return (a > b) ? 1 : ((a < b) ? -1 :\
    \ 0);\n    if (typeof(a) == \"object\") return (a > b) ? 1 : ((a < b) ? -1 : 0);\n\
    \    if (typeof(a) == \"function\") return (a > b) ? 1 : ((a < b) ? -1 : 0);\n\
    \    if (typeof(a) == \"undefined\") return (a > b) ? 1 : ((a < b) ? -1 : 0);\n\
    }\n", "    if(a === b) return a;\n    if(a < b) return a;\n    return b;\n}\n",
  "    if(a === b) return a;\n    if(a < b) return a;\n    return b;\n}\n", "    if(a\
    \ === b) return a;\n    if(a === null || b === null) return undefined;\n    if(a\
    \ === undefined) return b;\n    if(b === undefined) return a;\n    if(typeof a\
    \ === \"string\" && typeof b === \"string\") return compare_one_real(parseFloat(a),\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"number\")\
    \ return compare_one_real(parseFloat(a), parseFloat(b));\n    if(typeof a ===\
    \ \"number\" && typeof b === \"string\") return compare_one_real(parseFloat(a),\
    \ parseFloat(b));\n    if(typeof a === \"string\" && typeof b === \"number\")\
    \ return compare_one_real(a, parseFloat(b));\n    if(typeof a === \"number\" &&\
    \ typeof b === \"string\") return compare_one_real(a, parseFloat(b));\n    if(typeof\
    \ a === \"string\" && typeof b === \"string\") return compare_one_real(a, parseFloat(b));\n\
    \    if(typeof a === \"string\" && typeof b === \"number\") return compare_one_real(a,\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"string\")\
    \ return compare_one_real(a, parseFloat(b));\n    if(typeof a === \"string\" &&\
    \ typeof b === \"string\") return compare_one_real(a, parseFloat(b));\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n\
    \    if(typeof a === \"number\" && typeof b === \"number\") return compare_one_real(a,\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"number\")\
    \ return compare_one_real(a, parseFloat(b));\n    if(typeof a === \"number\" &&\
    \ typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n\
    \    if(typeof a === \"number\" && typeof b === \"number\") return compare_one_real(a,\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"number\")\
    \ return compare_one_real(a, parseFloat(b));\n    if(typeof a === \"number\" &&\
    \ typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n\
    \    if(typeof a === \"number\" && typeof b === \"number\") return compare_one_real(a,\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"number\")\
    \ return compare_one_real(a, parseFloat(b));\n    if(typeof a === \"number\" &&\
    \ typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n    if(typeof\
    \ a === \"number\" && typeof b === \"number\") return compare_one_real(a, parseFloat(b));\n\
    \    if(typeof a === \"number\" && typeof b === \"number\") return compare_one_real(a,\
    \ parseFloat(b));\n    if(typeof a === \"number\" && typeof b === \"number\")\
    \ return ", "    if (a === b) return a;\n    if (a === null || b === null) return\
    \ undefined;\n    if (a === undefined) return b;\n    if (b === undefined) return\
    \ a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a\
    \ === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a === \"*\") return\
    \ b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"%\") return\
    \ b;\n    if (b === \"%\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"(\") return b;\n    if (b === \"(\") return\
    \ a;\n    if (a === \")\") return b;\n    if (b === \")\") return a;\n    if (a\
    \ === \"[\") return b;\n    if (b === \"[\") return a;\n    if (a === \"]\") return\
    \ b;\n    if (b === \"]\") return a;\n    if (a === \"{\") return b;\n    if (b\
    \ === \"{\") return a;\n    if (a === \"}\") return b;\n    if (b === \"}\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"?\") return b;\n    if (b === \"?\") ", "    if (a === b)\
    \ return a;\n    if (a === undefined) return b;\n    if (b === undefined) return\
    \ a;\n    if (a === null || b === null) return undefined;\n    if (a === b) return\
    \ 0;\n    if (a.constructor === Number) return a > b ? 1 : a < b ? -1 : 0;\n \
    \   if (a.constructor === String) return a.localeCompare(b);\n    if (a.constructor\
    \ === Boolean) return a > b ? 1 : a < b ? -1 : 0;\n    if (a.constructor === Array)\
    \ return a.length > b.length ? 1 : a.length < b.length ? -1 : 0;\n    if (a.constructor\
    \ === Object) return compare_object(a, b);\n}\n", "    if(typeof(a) == \"string\"\
    ){\n        a = parseFloat(a);\n    }\n    if(typeof(b) == \"string\"){\n    \
    \    b = parseFloat(b);\n    }\n    if(typeof(a) == \"number\"){\n        if(typeof(b)\
    \ == \"number\"){\n            return a > b ? a : b;\n        }\n        else{\n\
    \            return a;\n        }\n    }\n    else{\n        return b;\n    }\n\
    }\n", "    if (typeof(a) == 'number'){\n        if (typeof(b) == 'number'){\n\
    \            if (a > b) return b;\n            if (a < b) return a;\n        }\n\
    \        if (typeof(b) == 'string'){\n            if (a.indexOf(b) > -1) return\
    \ b;\n            if (a.indexOf(b) < 0) return a;\n        }\n    }\n    if (typeof(a)\
    \ == 'string'){\n        if (typeof(b) == 'number'){\n            if (a.indexOf(b)\
    \ > -1) return a;\n            if (a.indexOf(b) < 0) return b;\n        }\n  \
    \      if (typeof(b) == 'string'){\n            if (a.indexOf(b) > -1) return\
    \ a;\n            if (a.indexOf(b) < 0) return b;\n        }\n    }\n    if (typeof(a)\
    \ == 'object'){\n        if (typeof(b) == 'object'){\n            if (a.constructor\
    \ == b.constructor){\n                let aKeys = Object.keys(a);\n          \
    \      let bKeys = Object.keys(b);\n                if (aKeys.length == bKeys.length){\n\
    \                    for (let i = 0; i < aKeys.length; i++){\n               \
    \         let key = aKeys[i];\n                        let aVal = a[key];\n  \
    \                      let bVal = b[key];\n                        if (typeof(aVal)\
    \ == 'object'){\n                            if (typeof(bVal) == 'object'){\n\
    \                                if (aVal.constructor == bVal.constructor){\n\
    \                                    let aKeys = Object.keys(aVal);\n        \
    \                            let bKeys = Object.keys(bVal);\n                \
    \                    if (aKeys.length == bKeys.length){\n                    \
    \                    for (let j = 0; j < aKeys.length; j++){\n               \
    \                             let key2 = aKeys[j];\n                         \
    \                   let aVal2 = aVal[key];\n                                 \
    \           let bVal2 = bVal[key];\n                                         \
    \   if (typeof(aVal2) == 'object'){\n                                        \
    \        if (typeof(bVal2) == 'object'){\n                                   \
    \                 if (aVal2.constructor == bVal2.constructor){\n             \
    \                                           let aKeys2 = Object.keys(aVal2);\n\
    \                                                        let bKeys2 = Object.keys(bVal2);\n\
    \                                                        if (aKeys2.length ==\
    \ bKeys2.length){\n                                                          \
    \  for (let k = 0; k < aKeys2.length; k++){\n                                \
    \                                let key3 = aKeys2[k];\n                     \
    \                                           let aVal3 = aVal2[key2];\n       \
    \                                                         let bVal3 = bVal2[key2];\n\
    \                                                                if (typeof(aVal3)\
    \ == 'object'){\n                                                            \
    \        if (typeof(bVal3) == 'object'){\n                                   \
    \                                     if (aVal3.constructor == bVal3.constructor){\n\
    \                                                                            if\
    \ (compare_one(aVal3[key], bVal3[key]) == false){\n                          \
    \                                                      return false;\n       \
    \                                                                     }\n    \
    \                                                                    }\n     \
    \                                                               }\n          \
    \                                                      }\n                   \
    \                                         }\n", "    if (a === b) return a;\n\
    \    if (typeof(a) === \"number\" && typeof(b) === \"number\") return Math.max(a,\
    \ b);\n    if (typeof(a) === \"string\" && typeof(b) === \"string\") return a.localeCompare(b);\n\
    \    if (typeof(a) === \"object\" && typeof(b) === \"object\") return compare_object(a,\
    \ b);\n    return undefined;\n}\n", "    if (a === b) return a;\n    if (a ===\
    \ undefined) return b;\n    if (b === undefined) return a;\n    if (a === null)\
    \ return b;\n    if (b === null) return a;\n    if (a === \"\") return b;\n  \
    \  if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b === \"\
    .\") return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n\
    \    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a ===\
    \ \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \".0\") return\
    \ b;\n    if (b === \".0\") return a;\n    if (a === \"1\") return b;\n    if\
    \ (b === \"1\") return a;\n    if (a === \"2\") return b;\n    if (b === \"2\"\
    ) return a;\n    if (a === \"3\") return b;\n    if (b === \"3\") return a;\n\
    \    if (a === \"4\") return b;\n    if (b === \"4\") return a;\n    if (a ===\
    \ \"5\") return b;\n    if (b === \"5\") return a;\n    if (a === \"6\") return\
    \ b;\n    if (b === \"6\") return a;\n    if (a === \"7\") return b;\n    if (b\
    \ === \"7\") return a;\n    if (a === \"8\") return b;\n    if (b === \"8\") return\
    \ a;\n    if (a === \"9\") return b;\n    if (b === \"9\") return a;\n    if (a\
    \ === \"10\") return b;\n    if (b === \"10\") return a;\n    if (a === \"11\"\
    ) return b;\n    if (b === \"11\") return a;\n    if (a === \"12\") return b;\n\
    \    if (b === \"12\") return a;\n    if (a === \"13\") return b;\n    if (b ===\
    \ \"13\") return a;\n    if (a === \"14\") return b;\n    if (b === \"14\") return\
    \ a;\n    if (a === \"15\") return b;\n    if (b === \"15\") return a;\n    if\
    \ (a === \"16\") return b;\n    if (b === \"16\") return a;\n    if (a === \"\
    17\") return b;\n    if (b === \"17\") return a;\n    if (a === \"18\") return\
    \ b;\n    if (b === \"18\") return a;\n    if (a === \"19\") return b;\n    if\
    \ (b === \"19\") return a;\n    if (a === \"20\") return b;\n    if (b === \"\
    20\") return a;\n    if (a === \"21\") return b;\n    if (b === \"21\") return\
    \ a;\n    if (a === \"22\") return b;\n    if (b === \"22\") return a;\n    if\
    \ (a === \"23\") return b;\n    if (b === \"23\") return a;\n    if (a === \"\
    24\") return b;\n    if (b === \"24\") ", "  if(a === b) return a;\n  if(a < b)\
    \ return a;\n  if(a > b) return b;\n}\n", "    if (a === b) return a;\n    if\
    \ (a < b) return a;\n    if (a > b) return b;\n    return undefined;\n}\n", " \
    \   if (typeof(a) != typeof(b)) return false;\n    if (typeof(a) == \"number\"\
    ) return (a > b) ? 1 : ((a < b) ? -1 : 0);\n    if (typeof(a) == \"string\") return\
    \ (a.localeCompare(b) > 0) ? 1 : ((a.localeCompare(b) < 0) ? -1 : 0);\n    if\
    \ (typeof(a) == \"object\") return (compare_one(a.valueOf(), b.valueOf()) > 0)\
    \ ? 1 : ((compare_one(a.valueOf(), b.valueOf()) < 0) ? -1 : 0);\n    return undefined;\n\
    }\n", "    if (a === b) return a;\n    if (typeof(a) === 'string' && typeof(b)\
    \ === 'string'){\n        a = a.split(',');\n        b = b.split(',');\n    }\n\
    \    if (typeof(a) === 'number' && typeof(b) === 'number'){\n        return Math.max(a,\
    \ b);\n    }\n    if (a === null || b === null){\n        return undefined;\n\
    \    }\n    if (typeof(a) !== 'object' || typeof(b) !== 'object'){\n        return\
    \ undefined;\n    }\n    var a_keys = Object.keys(a);\n    var b_keys = Object.keys(b);\n\
    \    if (a_keys.length !== b_keys.length){\n        return undefined;\n    }\n\
    \    var a_len = a_keys.length;\n    var b_len = b_keys.length;\n    var i = 0;\n\
    \    while (i<a_len && i<b_len){\n        var key = a_keys[i];\n        var a_val\
    \ = a[key];\n        var b_val = b[key];\n        if (typeof(a_val) !== 'number'\
    \ || typeof(b_val) !== 'number'){\n            return undefined;\n        }\n\
    \        if (Math.abs(a_val - b_val) > 1e-6){\n            return undefined;\n\
    \        }\n        i++;\n    }\n    if (a_len < b_len){\n        return a;\n\
    \    }\n    return b;\n}\n", "    if(a===b) return a;\n    if(a<b) return a;\n\
    \    if(a>b) return b;\n}\n", "    if(a === b){\n        return a;\n    }\n  \
    \  if(typeof a === \"number\" && typeof b === \"number\"){\n        return Math.max(a,\
    \ b);\n    }\n    if(typeof a === \"string\" && typeof b === \"string\"){\n  \
    \      return a.localeCompare(b);\n    }\n    if(typeof a === \"object\" && typeof\
    \ b === \"object\"){\n        if(a === null){\n            return b;\n       \
    \ }\n        if(b === null){\n            return a;\n        }\n        if(a instanceof\
    \ Array && b instanceof Array){\n            return compare_array(b, a);\n   \
    \     }\n        if(a instanceof Object && b instanceof Object){\n           \
    \ return compare_object(b, a);\n        }\n    }\n    return undefined;\n}\n",
  "    if (a === b) return a;\n    if (typeof(a) === 'string' && typeof(b) === 'string'){\n\
    \        var a_real = parseFloat(a);\n        var b_real = parseFloat(b);\n  \
    \      if (a_real === b_real){\n            return a_real > b_real ? a : b;\n\
    \        }\n    }\n    if (typeof(a) === 'number' && typeof(b) === 'number'){\n\
    \        return a > b ? a : b;\n    }\n    return undefined;\n}\n", "    var a_type\
    \ = typeof(a);\n    var b_type = typeof(b);\n    if (a_type !== b_type){\n   \
    \     if (a_type === \"string\" && b_type === \"string\"){\n            return\
    \ a.localeCompare(b);\n        }\n        if (a_type === \"number\" && b_type\
    \ === \"number\"){\n            return a - b;\n        }\n    }\n    return undefined;\n\
    }\n", "    if (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return\
    \ b;\n}\n", "    if (typeof(a) != typeof(b)) return None;\n    if (typeof(a) ==\
    \ \"number\"){\n        if (a>b) return a;\n        if (a<b) return b;\n    }\n\
    \    if (typeof(a) == \"string\"){\n        var a_parts = a.split(\",\");\n  \
    \      var b_parts = b.split(\",\");\n        var a_len = a_parts.length;\n  \
    \      var b_len = b_parts.length;\n        if (a_len != b_len) return None;\n\
    \        for (var i = 0; i < a_len; i++){\n            var a_part = a_parts[i];\n\
    \            var b_part = b_parts[i];\n            if (a_part != b_part) return\
    \ None;\n        }\n    }\n    return a;\n}\n", "    if (typeof(a) == 'number'\
    \ && typeof(b) == 'number'){\n        return Math.max(a, b);\n    }\n    if (typeof(a)\
    \ == 'string' && typeof(b) == 'string'){\n        var a_real = parseFloat(a);\n\
    \        var b_real = parseFloat(b);\n        if (a_real != b_real){\n       \
    \     return a_real > b_real ? a : b;\n        }\n    }\n    if (typeof(a) ==\
    \ 'object' && typeof(b) == 'object'){\n        if (a.constructor == b.constructor){\n\
    \            if (a.constructor == Array){\n                var a_len = a.length;\n\
    \                var b_len = b.length;\n                if (a_len != b_len){\n\
    \                    return a_len > b_len ? a : b;\n                }\n      \
    \          for (var i = 0; i < a_len; i++){\n                    var a_elm = a[i];\n\
    \                    var b_elm = b[i];\n                    if (compare_one(a_elm,\
    \ b_elm) == undefined){\n                        return a_elm > b_elm ? a : b;\n\
    \                    }\n                }\n                return undefined;\n\
    \            }\n            if (a.constructor == Object){\n                var\
    \ a_keys = Object.keys(a);\n                var b_keys = Object.keys(b);\n   \
    \             if (a_keys.length != b_keys.length){\n                    return\
    \ a_keys.length > b_keys.length ? a : b;\n                }\n                for\
    \ (var i = 0; i < a_keys.length; i++){\n                    var a_key = a_keys[i];\n\
    \                    var b_key = b_keys[i];\n                    if (compare_one(a[a_key],\
    \ b[b_key]) == undefined){\n                        return a[a_key] > b[b_key]\
    \ ? a : b;\n                    }\n                }\n                return undefined;\n\
    \            }\n        }\n    }\n    return undefined;\n}\n", "    if (a ===\
    \ b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    return\
    \ a;\n}\n", "    if (a === b) return a;\n    if (a < b) return a;\n    if (a >\
    \ b) return b;\n}\n", "    if (a === b) return a;\n    if (a === null || b ===\
    \ null) return undefined;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \",\") return b;\n    if (b === \",\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a\
    \ === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return\
    \ b;\n    if (b === \"^\") return a;\n    if (a === \"(\") return b;\n    if (b\
    \ === \"(\") return a;\n    if (a === \")\") return b;\n    if (b === \")\") return\
    \ a;\n    if (a === \"[\") return b;\n    if (b === \"[\") return a;\n    if (a\
    \ === \"]\") return b;\n    if (b === \"]\") return a;\n    if (a === \"{\") return\
    \ b;\n    if (b === \"{\") return a;\n    if (a === \"}\") return b;\n    if (b\
    \ === \"}\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if\
    \ (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if (a === \"\
    =\") return b;\n    if (b === \"=\") return a;\n    if (a === \">=\") return b;\n\
    \    if (b === \">=\") return a;\n    if (a === \"<=\") return b;\n    if (b ===\
    \ \"<=\") return a;\n    if (a === \"<>\") return b;\n    if (b === \"<>\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if (a === \"<\"\
    ) return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n\
    \    if (b === \">\") return a;\n    if (", "    if (a === b) return a;\n    if\
    \ (typeof(a) === 'number' && typeof(b) === 'number'){\n        return Math.max(a,\
    \ b);\n    }\n    if (typeof(a) === 'string' && typeof(b) === 'string'){\n   \
    \     return a.localeCompare(b);\n    }\n    if (typeof(a) === 'number' && typeof(b)\
    \ === 'string'){\n        return b;\n    }\n    if (typeof(a) === 'string' &&\
    \ typeof(b) === 'number'){\n        return a;\n    }\n    if (typeof(a) === 'number'\
    \ && typeof(b) === 'number'){\n        return a;\n    }\n    if (typeof(a) ===\
    \ 'string'){\n        return a;\n    }\n    if (typeof(b) === 'string'){\n   \
    \     return b;\n    }\n    return undefined;\n}\n", "    if (typeof(a) != typeof(b))\
    \ return false;\n    if (typeof(a) == \"number\") return (a > b) ? 1 : ((a < b)\
    \ ? -1 : 0);\n    if (typeof(a) == \"string\") return (a > b) ? 1 : ((a < b) ?\
    \ -1 : 0);\n    if (typeof(a) == \"object\") {\n        if (a.constructor == Array)\
    \ return compare_one(a[0], b[0]);\n        if (a.constructor == Object) return\
    \ compare_one(a.constructor, b);\n    }\n    return false;\n}\n", "    if (typeof(a)\
    \ == 'number'){\n        if (typeof(b) == 'number'){\n            return Math.max(a,\
    \ b);\n        }\n        else if (typeof(b) == 'string'){\n            return\
    \ parseFloat(b) > parseFloat(a);\n        }\n    }\n    else if (typeof(a) ==\
    \ 'string'){\n        if (typeof(b) == 'number'){\n            return parseFloat(a)\
    \ > parseFloat(b);\n        }\n        else if (typeof(b) == 'string'){\n    \
    \        return a.localeCompare(b);\n        }\n    }\n}\n", "    var a_type =\
    \ typeof a;\n    var b_type = typeof b;\n    if (a_type == \"number\" && b_type\
    \ == \"number\"){\n        return a > b ? a : b;\n    }\n    if (a_type == \"\
    string\" && b_type == \"string\"){\n        var a_num = parseFloat(a);\n     \
    \   var b_num = parseFloat(b);\n        return a_num > b_num ? a_num : b_num;\n\
    \    }\n    if (a_type == \"object\" && b_type == \"object\"){\n        var a_keys\
    \ = Object.keys(a);\n        var b_keys = Object.keys(b);\n        if (a_keys.length\
    \ != b_keys.length){\n            return undefined;\n        }\n        for (var\
    \ i = 0; i < a_keys.length; i++){\n            var key = a_keys[i];\n        \
    \    var a_val = a[key];\n            var b_val = b[key];\n            var a_type\
    \ = typeof a_val;\n            var b_type = typeof b_val;\n            if (a_type\
    \ == \"number\" && b_type == \"number\"){\n                if (a_val > b_val){\n\
    \                    return a_val;\n                }\n                else{\n\
    \                    return b_val;\n                }\n            }\n       \
    \     if (a_type == \"string\" && b_type == \"string\"){\n                var\
    \ a_num = parseFloat(a_val);\n                var b_num = parseFloat(b_val);\n\
    \                if (a_num > b_num){\n                    return a_val;\n    \
    \            }\n                else{\n                    return b_val;\n   \
    \             }\n            }\n            if (a_type == \"object\" && b_type\
    \ == \"object\"){\n                var a_keys = Object.keys(a_val);\n        \
    \        var b_keys = Object.keys(b_val);\n                if (a_keys.length !=\
    \ b_keys.length){\n                    return undefined;\n                }\n\
    \                for (var j = 0; j < a_keys.length; j++){\n                  \
    \  var key = a_keys[j];\n                    var a_val = a_val[key];\n       \
    \             var b_val = b_val[key];\n                    var a_type = typeof\
    \ a_val;\n                    var b_type = typeof b_val;\n                   \
    \ if (a_type == \"number\" && b_type == \"number\"){\n                       \
    \ if (a_val > b_val){\n                            return a_val;\n           \
    \             }\n                        else{\n                            return\
    \ b_val;\n                        }\n                    }\n                 \
    \   if (a_type == \"string\" && b_type == \"string\"){\n                     \
    \   var a_num = parseFloat(a_val);\n                        var b_num = parseFloat(b_val);\n\
    \                        if (a_num > b_num){\n                            return\
    \ a_val;\n                        }\n                        else{\n         \
    \                   return b_val;\n                        }\n               \
    \     }\n                    if (a_type == \"object\" && b_type == \"object\"\
    ){\n                        var a_keys = Object.keys(a_val);\n               \
    \         var b_keys = Object.keys(b_val);\n                        if (a_keys.length\
    \ != b_keys.length){\n                            return undefined;\n        \
    \                }\n                        for (var k = 0; k < a_keys.length;\
    \ k++){\n                            var key = a_keys[k];\n                  \
    \          var a_val = a_val[key];\n                            var b_val = b_val[key];\n\
    \                            var a_type = typeof a_val;\n                    \
    \        var b_type = typeof b_val;\n                            if (a_type ==\
    \ \"number\" && b_type == \"", "    if (a === b) return a;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === null) return b;\n\
    \    if (b === null) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") ", "  if(a === b)\
    \ return a;\n  if(typeof a === typeof b) return a;\n  if(typeof a === \"string\"\
    \ && typeof b === \"string\"){\n    var a_real = parseFloat(a);\n    var b_real\
    \ = parseFloat(b);\n    if(a_real === b_real){\n      return a_real > b_real ?\
    \ a : b;\n    }\n    return a_real > b_real ? b : a;\n  }\n  if(typeof a === \"\
    number\" && typeof b === \"number\"){\n    return a > b ? a : b;\n  }\n  if(a\
    \ === null || b === null){\n    return a === b ? a : b;\n  }\n  if(a === undefined){\n\
    \    return b;\n  }\n  if(b === undefined){\n    return a;\n  }\n  if(a === b){\n\
    \    return a;\n  }\n  if(a < b){\n    return a;\n  }\n  return b;\n}\n", "  \
    \  if (a === b) return a;\n    if (typeof(a) != typeof(b)) return undefined;\n\
    \    if (typeof(a) == \"number\"){\n        if (a < b) return a;\n        if (a\
    \ > b) return b;\n    }\n    if (typeof(a) == \"string\"){\n        var aNum =\
    \ parseFloat(a);\n        var bNum = parseFloat(b);\n        if (aNum == bNum){\n\
    \            return aNum;\n        }\n        if (aNum < bNum) return a;\n   \
    \     if (aNum > bNum) return b;\n    }\n    return undefined;\n}\n", "  if(a\
    \ === b) return a;\n  if(typeof a === typeof b) return a;\n  if(typeof a === \"\
    string\" && typeof b === \"string\") return a.localeCompare(b);\n  if(typeof a\
    \ === \"number\" && typeof b === \"number\") return Math.max(a, b);\n  if(typeof\
    \ a === \"number\" && typeof b === \"string\") return Math.max(a, b);\n  if(typeof\
    \ a === \"string\" && typeof b === \"number\") return Math.max(a, b);\n  if(typeof\
    \ a === \"number\" && typeof b === \"number\") return Math.max(a, b);\n  if(typeof\
    \ a === \"object\" && typeof b === \"object\") return compare_object(a, b);\n\
    \  if(typeof a === \"object\" && typeof b === \"number\") return Math.max(a, b);\n\
    \  if(typeof a === \"object\" && typeof b === \"string\") return Math.max(a, b);\n\
    \  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && typeof b === \"object\") return compare_object(a,\
    \ b);\n  if(typeof a === \"object\" && ", "    if (a === b) return a;\n    if\
    \ (a === null || b === null) return a === b ? a : undefined;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n\
    \    if (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b ===\
    \ \".\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return\
    \ b;\n    if (b === \"+\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return\
    \ a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a\
    \ === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a === \"|\") return\
    \ b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"?\") return b;\n    if (b === \"?\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"%\") return b;\n    if (b === \"%\") return\
    \ a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"?\") return b;\n    if (b\
    \ === \"?\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"", " \
    \   if (typeof(a) != typeof(b)) return None;\n    if (typeof(a) == \"number\"\
    ) return Math.max(a, b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n\
    \    if (typeof(a) == \"object\") return compare_one(a[0], b[0]);\n}\n", "   \
    \ var a_type = typeof(a);\n    var b_type = typeof(b);\n    if (a_type !== b_type){\n\
    \        if (b_type === \"number\"){\n            return Math.max(a, b);\n   \
    \     }\n        if (b_type === \"string\"){\n            return a.localeCompare(b);\n\
    \        }\n    }\n    if (a_type === \"number\"){\n        return a;\n    }\n\
    \    if (a_type === \"string\"){\n        return a.localeCompare(b);\n    }\n\
    }\n", "    if (typeof(a) != typeof(b)) return None;\n    if (a == \"NaN\" || b\
    \ == \"NaN\") return \"NaN\";\n    if (a == \"Infinity\" || b == \"Infinity\"\
    ) return \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return\
    \ \"-Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\"\
    ;\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n \
    \   if (a == \"0\" || b == \"0\") return \"0\";\n    if (a == \"-0\" || b == \"\
    -0\") return \"-0\";\n    if (a == \"Infinity\" || b == \"Infinity\") return \"\
    Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\"\
    ;\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if\
    \ (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a\
    \ == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a == \"\
    -Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a == \"Infinity\"\
    \ || b == \"Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b\
    \ == \"-Infinity\") return \"-Infinity\";\n    if (a == \"Infinity\" || b == \"\
    Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\"\
    ) return \"-Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\") return\
    \ \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\"\
    ;\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if\
    \ (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a\
    \ == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a == \"\
    -Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a == \"Infinity\"\
    \ || b == \"Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b\
    \ == \"-Infinity\") return \"-Infinity\";\n    if (a == \"Infinity\" || b == \"\
    Infinity\") return \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\"\
    ) return \"-Infinity\";\n    if (a == \"Infinity\" || b == \"Infinity\") return\
    \ \"Infinity\";\n    if (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\"\
    ;\n    if (a == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if\
    \ (a == \"-Infinity\" || b == \"-Infinity\") return \"-Infinity\";\n    if (a\
    \ == \"Infinity\" || b == \"Infinity\") return \"Infinity\";\n    if (a == \"\
    -Infinity\" || b == \"-Infinity", "  if(a === b) return a;\n  if(typeof a ===\
    \ typeof b) return a > b ? a : b;\n  if(typeof a === \"number\" && typeof b ===\
    \ \"number\"){\n    return a > b ? a : b;\n  }\n  if(typeof a === \"string\" &&\
    \ typeof b === \"string\"){\n    return a.localeCompare(b);\n  }\n  if(typeof\
    \ a === \"object\" && typeof b === \"object\"){\n    return compare_object(a,\
    \ b);\n  }\n  return undefined;\n}\n", "    if(typeof(a) != typeof(b)) return\
    \ None;\n    if(typeof(a) == \"number\"){\n        if(a < b) return a;\n     \
    \   if(a > b) return b;\n        return a;\n    }\n    if(typeof(a) == \"string\"\
    ){\n        if(a.indexOf(b) > -1) return b;\n        if(a.indexOf(b) < 0) return\
    \ a;\n        return a;\n    }\n    if(typeof(a) == \"boolean\"){\n        if(a)\
    \ return b;\n        return a;\n    }\n    if(typeof(a) == \"object\"){\n    \
    \    if(a instanceof Array){\n            if(a.length < b.length) return a;\n\
    \            if(a.length > b.length) return b;\n            for(var i = 0; i <\
    \ a.length; i++){\n                if(a[i] != b) return undefined;\n         \
    \   }\n            return a;\n        }\n        for(var i = 0; i < a.length;\
    \ i++){\n            var a_value = a[i];\n            var b_value = b[i];\n  \
    \          if(a_value == b_value) return undefined;\n            if(typeof(a_value)\
    \ == \"number\"){\n                if(isNaN(a_value) && isNaN(b_value)) return\
    \ undefined;\n                if(isNaN(a_value)) return b_value;\n           \
    \     if(isNaN(b_value)) return a_value;\n                if(a_value < b_value)\
    \ return b_value;\n                if(a_value > b_value) return a_value;\n   \
    \         }\n            if(typeof(a_value) == \"string\"){\n                if(a_value.indexOf(b_value)\
    \ > -1) return b_value;\n                if(a_value.indexOf(b_value) < 0) return\
    \ a_value;\n            }\n            if(typeof(a_value) == \"boolean\"){\n \
    \               if(a_value) return b_value;\n                if(!a_value) return\
    \ a_value;\n            }\n            if(typeof(a_value) == \"object\"){\n  \
    \              if(compare_one(a_value, b_value) != undefined) return undefined;\n\
    \            }\n        }\n        return undefined;\n    }\n}\n", "    if (typeof(a)\
    \ == 'number' && typeof(b) == 'number'){\n        return Math.max(a, b);\n   \
    \ }\n    if (typeof(a) == 'string' && typeof(b) == 'string'){\n        var a_real\
    \ = parseFloat(a);\n        var b_real = parseFloat(b);\n        if (a_real >\
    \ b_real){\n            return a;\n        }\n        if (a_real < b_real){\n\
    \            return b;\n        }\n    }\n    if (typeof(a) == 'object' && typeof(b)\
    \ == 'object'){\n        var a_keys = Object.keys(a);\n        var b_keys = Object.keys(b);\n\
    \        if (a_keys.length != b_keys.length){\n            return undefined;\n\
    \        }\n        for (var i = 0; i < a_keys.length; i++){\n            var\
    \ key = a_keys[i];\n            var a_val = a[key];\n            var b_val = b[key];\n\
    \            if (typeof(a_val) == 'number' && typeof(b_val) == 'number'){\n  \
    \              return Math.max(a_val, b_val);\n            }\n            if (typeof(a_val)\
    \ == 'string' && typeof(b_val) == 'string'){\n                var a_real = parseFloat(a_val);\n\
    \                var b_real = parseFloat(b_val);\n                if (a_real >\
    \ b_real){\n                    return a_val;\n                }\n           \
    \     if (a_real < b_real){\n                    return b_val;\n             \
    \   }\n            }\n        }\n    }\n    return undefined;\n}\n", "    if (a\
    \ === b) return a;\n    if (typeof(a) === 'number' && typeof(b) === 'number')\
    \ return Math.max(a, b);\n    if (typeof(a) === 'string' && typeof(b) === 'string')\
    \ return a.localeCompare(b);\n    if (typeof(a) === 'string' && typeof(b) !==\
    \ 'string') return compare_one(a.toFixed(2), b.toFixed(2));\n    if (typeof(a)\
    \ !== 'number' && typeof(b) !== 'number') return compare_one(a.toString(), b.toString());\n\
    }\n", "    if (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return\
    \ b;\n}\n", "  if (a === b) return a;\n  if (a < b) return a;\n  if (a > b) return\
    \ b;\n}\n", "    if(a === b) return a;\n    if(typeof(a) === 'number' && typeof(b)\
    \ === 'number'){\n        return a > b ? a : b;\n    }\n    if(typeof(a) === 'string'\
    \ && typeof(b) === 'string'){\n        var a_array = a.split(',');\n        var\
    \ b_array = b.split(',');\n        var a_len = a_array.length;\n        var b_len\
    \ = b_array.length;\n        var i = 0;\n        var j = 0;\n        var ret =\
    \ '';\n        while(i<a_len && j<b_len){\n            var a_num = parseInt(a_array[i]);\n\
    \            var b_num = parseInt(b_array[j]);\n            if(a_num === b_num){\n\
    \                ret += a_array[i];\n                i++;\n                j++;\n\
    \            }else if(a_num > b_num){\n                ret += a_array[i];\n  \
    \              i++;\n            }else{\n                ret += b_array[j];\n\
    \                j++;\n            }\n        }\n        if(i < a_len){\n    \
    \        ret = a_array.slice(i).join(',');\n        }\n        if(j < b_len){\n\
    \            ret = b_array.slice(j).join(',');\n        }\n        return ret;\n\
    \    }\n}\n", "    if (typeof(a) == 'number'){\n        if (typeof(b) == 'number'){\n\
    \            return Math.max(a, b);\n        }\n        else if (typeof(b) ==\
    \ 'string'){\n            return parseFloat(b);\n        }\n    }\n    else if\
    \ (typeof(a) == 'string'){\n        if (typeof(b) == 'number'){\n            return\
    \ parseFloat(a);\n        }\n        else if (typeof(b) == 'string'){\n      \
    \      return b;\n        }\n    }\n}\n", "    if(a === b) return a;\n    if(a\
    \ < b) return a;\n    if(a > b) return b;\n    return undefined;\n}\n", "    if\
    \ (a === b) return a;\n    if (a === null || b === null) return undefined;\n \
    \   if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"*\") return b;\n    if (b === \"*\") return\
    \ a;\n    if (a === \"/\") return b;\n    if (b === \"/\") return a;\n    if (a\
    \ === \"^\") return b;\n    if (b === \"^\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"<\") return b;\n    if (b\
    \ === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if\
    \ (a === \">=\") return b;\n    if (b === \">=\") return a;\n    if (a === \"\
    !\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b ===\
    \ \"&\") return a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return\
    \ a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if\
    \ (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if (a === \"\
    ===\") return b;\n    if (b === \"===\") return a;\n    if (a === \"!==\") return\
    \ b;\n    if (b === \"!==\") return a;\n    if (a === \"<\") return b;\n    if\
    \ (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\"\
    ) return a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\") return a;\n\
    \    if (a === \">=\") return b;\n    if (b === \">=\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"*\") return b;\n    if (b\
    \ === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b === \"/\") return\
    \ a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"", "    if (typeof(a) != typeof(b)) return None;\n    if\
    \ (a == b) return a;\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"\
    ) return Math.max(a, b);\n    if (typeof(a) == \"string\" && typeof(b) == \"string\"\
    ) return a.localeCompare(b);\n    if (typeof(a) == \"string\" && typeof(b) ==\
    \ \"number\") return b.localeCompare(a);\n    if (typeof(a) == \"number\" && typeof(b)\
    \ == \"string\") return a.localeCompare(b);\n    return None;\n}\n", "    if (typeof(a)\
    \ != typeof(b)) return None;\n    if (typeof(a) == \"number\") return Math.max(a,\
    \ b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n    if (typeof(a)\
    \ == \"object\") return compare_one(a[0], b[0]);\n}\n", "    if (a === b) return\
    \ a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n\
    \    if (a === null) return b;\n    if (b === null) return a;\n    if (a === \"\
    \") return b;\n    if (b === \"\") return a;\n    if (a === \".\") return b;\n\
    \    if (b === \".\") return a;\n    if (a === \"-\") return b;\n    if (b ===\
    \ \"-\") return a;\n    if (a === \"+\") return b;\n    if (b === \"+\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a === \"-0\"\
    ) return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n\
    \    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b ===\
    \ \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") ", "    if (typeof(a) != typeof(b)) return false;\n    if (typeof(a) ==\
    \ \"string\"){\n        a = a.split(\",\");\n        b = b.split(\",\");\n   \
    \ }\n    if (typeof(a) == \"number\"){\n        a = a.toString();\n        b =\
    \ b.toString();\n    }\n    if (a < b) return true;\n    if (a > b) return false;\n\
    \    return undefined;\n}\n", "    if (a === b) return a;\n    if (a === null\
    \ || b === null) return a === b ? a : undefined;\n    if (a === undefined) return\
    \ b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n    if\
    \ (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b === \".\"\
    ) return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n\
    \    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a ===\
    \ \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \",\") return\
    \ b;\n    if (b === \",\") return a;\n    if (a === \"<\") return b;\n    if (b\
    \ === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return b;\n    if\
    \ (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if (b === \"\
    >=\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if\
    \ (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\"\
    ) return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"<\") return b;\n    if (b ===\
    \ \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"<=\") return b;\n    if\
    \ (b === \"<=\") return a;\n    if (a === \">=\") return b;\n    if (b === \"\
    >=\") return a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return\
    \ a;\n    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if\
    \ (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\"\
    ) return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"<\") return b;\n    if (", " \
    \   if (a === b) return a;\n    if (a === undefined) return b;\n    if (b ===\
    \ undefined) return a;\n    if (a === null) return b;\n    if (b === null) return\
    \ a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a\
    \ === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return\
    \ b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b\
    \ === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") ", "    var a_type = typeof(a);\n    var b_type =\
    \ typeof(b);\n    if (a_type === \"string\" && b_type === \"string\"){\n     \
    \   var a_num = parseFloat(a);\n        var b_num = parseFloat(b);\n        if\
    \ (a_num === b_num){\n            return a_num;\n        }\n    }\n    if (a_type\
    \ === \"number\" && b_type === \"number\"){\n        return Math.max(a, b);\n\
    \    }\n    if (a_type === \"number\" && b_type === \"string\"){\n        return\
    \ Math.max(a, b);\n    }\n    if (a_type === \"string\" && b_type === \"number\"\
    ){\n        return Math.max(a, b);\n    }\n    if (a_type === \"string\" && b_type\
    \ === \"string\"){\n        return Math.max(a, b);\n    }\n    if (a_type ===\
    \ \"number\" && b_type === \"number\"){\n        return Math.max(a, b);\n    }\n\
    \    if (a_type === \"number\" && b_type === \"string\"){\n        return Math.max(a,\
    \ b);\n    }\n    if (a_type === \"string\" && b_type === \"number\"){\n     \
    \   return Math.max(a, b);\n    }\n    if (a_type === \"string\" && b_type ===\
    \ \"string\"){\n        return Math.max(a, b);\n    }\n    if (a_type === \"number\"\
    \ && b_type === \"number\"){\n        return Math.max(a, b);\n    }\n    if (a_type\
    \ === \"number\" && b_type === \"string\"){\n        return Math.max(a, b);\n\
    \    }\n    if (a_type === \"string\" && b_type === \"number\"){\n        return\
    \ Math.max(a, b);\n    }\n    if (a_type === \"string\" && b_type === \"string\"\
    ){\n        return Math.max(a, b);\n    }\n    if (a_type === \"number\" && b_type\
    \ === \"number\"){\n        return Math.max(a, b);\n    }\n    if (a_type ===\
    \ \"number\" && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n\
    \    if (a_type === \"string\" && b_type === \"number\"){\n        return Math.max(a,\
    \ b);\n    }\n    if (a_type === \"string\" && b_type === \"string\"){\n     \
    \   return Math.max(a, b);\n    }\n    if (a_type === \"number\" && b_type ===\
    \ \"number\"){\n        return Math.max(a, b);\n    }\n    if (a_type === \"number\"\
    \ && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n    if (a_type\
    \ === \"string\" && b_type === \"number\"){\n        return Math.max(a, b);\n\
    \    }\n    if (a_type === \"string\" && b_type === \"string\"){\n        return\
    \ Math.max(a, b);\n    }\n    if (a_type === \"number\" && b_type === \"number\"\
    ){\n        return Math.max(a, b);\n    }\n    if (a_type === \"number\" && b_type\
    \ === \"string\"){\n        return Math.max(a, b);\n    }\n    if (a_type ===\
    \ \"string\" && b_type === \"number\"){\n        return Math.max(a, b);\n    }\n\
    \    if (a_type === \"string\" && b_type === \"string\"){\n        return Math.max(a,\
    \ b);\n", "    if (a === b) return a;\n    if (a > b) return a;\n    if (a < b)\
    \ return b;\n}\n", "    if (a === b) return a;\n    if (a === null || b === null)\
    \ return undefined;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-.\") return b;\n    if (b === \"-.\") return a;\n    if (a === \"\
    +.\") return b;\n    if (b === \"+.\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return b;\n    if (b\
    \ === \"1\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\"\
    ) return a;\n    if (a === \"-.\") return b;\n    if (b === \"-.\") return a;\n\
    \    if (a === \"+.\") return b;\n    if (b === \"+.\") return a;\n    if (a ===\
    \ \"0\") return b;\n    if (b === \"0\") return a;\n    if (a === \"1\") return\
    \ b;\n    if (b === \"1\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-.\") return b;\n    if (b === \"\
    -.\") return a;\n    if (a === \"+.\") return b;\n    if (b === \"+.\") return\
    \ a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return a;\n    if (a\
    \ === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a === \".0\")\
    \ return b;\n    if (b === \".0\") return a;\n    if (a === \"-.\") return b;\n\
    \    if (b === \"-.\") return a;\n    if (a === \"+.\") return b;\n    if (b ===\
    \ \"+.\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return a;\n    if (a\
    \ === \".0\") return b;\n    if (b === \".0\") return a;\n    if (a === \"-.\"\
    ) return b;\n    if (b === \"-.\") return a;\n    if (a === \"+.\") return b;\n\
    \    if (b === \"+.\") return a;", "    if(a===b) return a;\n    if(typeof(a)\
    \ === \"number\" && typeof(b) === \"number\"){\n        if(a>b) return a;\n  \
    \      if(a<b) return b;\n    }\n    if(typeof(a) === \"string\" && typeof(b)\
    \ === \"string\"){\n        var a_array = a.split(\",\");\n        var b_array\
    \ = b.split(\",\");\n        var a_len = a_array.length;\n        var b_len =\
    \ b_array.length;\n        if(a_len > b_len){\n            return b_array[a_len-1];\n\
    \        }\n        if(a_len < b_len){\n            return a_array[b_len-1];\n\
    \        }\n        for(var i=0; i<a_len; i++){\n            if(a_array[i] !==\
    \ b_array[i]){\n                return a_array[i];\n            }\n        }\n\
    \    }\n    return undefined;\n}\n", "    if (a === b) return a;\n    if (a <\
    \ b) return a;\n    if (a > b) return b;\n}\n", "    var a_type = typeof a;\n\
    \    var b_type = typeof b;\n    if(a_type === \"number\" && b_type === \"number\"\
    ){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type\
    \ === \"string\"){\n        var a_num = parseFloat(a);\n        var b_num = parseFloat(b);\n\
    \        return a_num > b_num ? a : b;\n    }\n    if(a_type === \"number\" &&\
    \ b_type === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type\
    \ === \"string\" && b_type === \"number\"){\n        return Math.max(a, b);\n\
    \    }\n    if(a_type === \"number\" && b_type === \"number\"){\n        return\
    \ Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type === \"string\"\
    ){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type\
    \ === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type === \"\
    string\" && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n \
    \   if(a_type === \"string\" && b_type === \"string\"){\n        return Math.max(a,\
    \ b);\n    }\n    if(a_type === \"string\" && b_type === \"string\"){\n      \
    \  return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type === \"\
    string\"){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\"\
    \ && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type\
    \ === \"string\" && b_type === \"string\"){\n        return Math.max(a, b);\n\
    \    }\n    if(a_type === \"string\" && b_type === \"string\"){\n        return\
    \ Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type === \"string\"\
    ){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type\
    \ === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type === \"\
    string\" && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n \
    \   if(a_type === \"string\" && b_type === \"string\"){\n        return Math.max(a,\
    \ b);\n    }\n    if(a_type === \"string\" && b_type === \"string\"){\n      \
    \  return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type === \"\
    string\"){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\"\
    \ && b_type === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type\
    \ === \"string\" && b_type === \"string\"){\n        return Math.max(a, b);\n\
    \    }\n    if(a_type === \"string\" && b_type === \"string\"){\n        return\
    \ Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type === \"string\"\
    ){\n        return Math.max(a, b);\n    }\n    if(a_type === \"string\" && b_type\
    \ === \"string\"){\n        return Math.max(a, b);\n    }\n    if(a_type === \"\
    string\" && b_", "    if (a === b) return a;\n    if (a === undefined) return\
    \ b;\n    if (b === undefined) return a;\n    if (a === null) return b;\n    if\
    \ (b === null) return a;\n    if (a === \"\") return b;\n    if (b === \"\") return\
    \ a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a\
    \ === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return\
    \ b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b\
    \ === \"0\") return a;\n    if (a === \".0\") return b;\n    if (b === \".0\"\
    ) return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n\
    \    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a ===\
    \ \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") ", "  if(a === b){\n    return a;\n  }\n\
    \  if(typeof a === typeof b){\n    if(a === null || b === null){\n      return\
    \ a === b;\n    }\n    if(a === undefined){\n      return b === undefined;\n \
    \   }\n    if(a === true){\n      return b === true;\n    }\n    if(a === false){\n\
    \      return b === false;\n    }\n    if(a === 0){\n      return b === 0;\n \
    \   }\n    if(a === 1){\n      return b === 1;\n    }\n    if(a === 2){\n    \
    \  return b === 2;\n    }\n    if(a === 3){\n      return b === 3;\n    }\n  \
    \  if(a === 4){\n      return b === 4;\n    }\n    if(a === 5){\n      return\
    \ b === 5;\n    }\n    if(a === 6){\n      return b === 6;\n    }\n    if(a ===\
    \ 7){\n      return b === 7;\n    }\n    if(a === 8){\n      return b === 8;\n\
    \    }\n    if(a === 9){\n      return b === 9;\n    }\n    if(a === 10){\n  \
    \    return b === 10;\n    }\n    if(a === 11){\n      return b === 11;\n    }\n\
    \    if(a === 12){\n      return b === 12;\n    }\n    if(a === 13){\n      return\
    \ b === 13;\n    }\n    if(a === 14){\n      return b === 14;\n    }\n    if(a\
    \ === 15){\n      return b === 15;\n    }\n    if(a === 16){\n      return b ===\
    \ 16;\n    }\n    if(a === 17){\n      return b === 17;\n    }\n    if(a === 18){\n\
    \      return b === 18;\n    }\n    if(a === 19){\n      return b === 19;\n  \
    \  }\n    if(a === 20){\n      return b === 20;\n    }\n    if(a === 21){\n  \
    \    return b === 21;\n    }\n    if(a === 22){\n      return b === 22;\n    }\n\
    \    if(a === 23){\n      return b === 23;\n    }\n    if(a === 24){\n      return\
    \ b === 24;\n    }\n    if(a === 25){\n      return b === 25;\n    }\n    if(a\
    \ === 26){\n      return b === 26;\n    }\n    if(a === 27){\n      return b ===\
    \ 27;\n    }\n    if(a === 28){\n      return b === 28;\n    }\n    if(a === 29){\n\
    \      return b === 29;\n    }\n    if(a === 30){\n      return b === 30;\n  \
    \  }\n    if(a === 31){\n      return b === 31;\n    }\n    if(a === 32){", " \
    \   if (typeof(a) != typeof(b)) return None;\n    if (a == b) return a;\n    if\
    \ (typeof(a) == \"number\" && typeof(b) == \"number\"){\n        if (a > b) return\
    \ a;\n        if (a < b) return b;\n        return a;\n    }\n    if (typeof(a)\
    \ == \"string\" && typeof(b) == \"string\"){\n        if (a > b) return b;\n \
    \       if (a < b) return a;\n        return a;\n    }\n    if (typeof(a) == \"\
    string\" && typeof(b) == \"number\"){\n        if (a > b) return b;\n        if\
    \ (a < b) return a;\n        return a;\n    }\n    if (typeof(a) == \"number\"\
    \ && typeof(b) == \"string\"){\n        if (a > b) return a;\n        if (a <\
    \ b) return b;\n        return a;\n    }\n    if (typeof(a) == \"number\" && typeof(b)\
    \ == \"string\"){\n        if (a > b) return b;\n        if (a < b) return a;\n\
    \        return a;\n    }\n    if (typeof(a) == \"number\" && typeof(b) == \"\
    number\"){\n        if (a > b) return a;\n        if (a < b) return b;\n     \
    \   return a;\n    }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"\
    ){\n        if (a > b) return b;\n        if (a < b) return a;\n        return\
    \ a;\n    }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"){\n  \
    \      if (a > b) return b;\n        if (a < b) return a;\n        return a;\n\
    \    }\n    if (typeof(a) == \"number\" && typeof(b) == \"number\"){\n       \
    \ if (a > b) return b;\n        if (a < b) return a;\n        return a;\n    }\n\
    \    if (typeof(a) == \"number\" && typeof(b) == \"number\"){\n        if (a >\
    \ b) return b;\n        if (a < b) return a;\n        return a;\n    }\n    if\
    \ (typeof(a) == \"number\" && typeof(b) == \"number\"){\n        if (a > b) return\
    \ b;\n        if (a < b) return a;\n        return a;\n    }\n    if (typeof(a)\
    \ == \"number\" && typeof(b) == \"number\"){\n        if (a > b) return b;\n \
    \       if (a < b) return a;\n        return a;\n    }\n    if (typeof(a) == \"\
    number\" && typeof(b) == \"number\"){\n        if (a > b) return b;\n        if\
    \ (a < b) return a;\n        return a;\n    }\n    if (typeof(a) == \"number\"\
    \ && typeof(b) == \"number\"){\n        if (a > b) return b;\n        if (a <\
    \ b) return a;\n        return a;\n    }\n    if (typeof(a) == \"number\" && typeof(b)\
    \ == \"number\"){\n        if (a > ", "  if(a === b) return a;\n  if(typeof a\
    \ === typeof b) return a;\n  if(typeof a === \"string\" && typeof b === \"string\"\
    ) return a.localeCompare(b);\n  if(typeof a === \"number\" && typeof b === \"\
    number\") return Math.max(a, b);\n  if(typeof a === \"number\" && typeof b ===\
    \ \"string\") return Math.max(a, b);\n  if(typeof a === \"string\" && typeof b\
    \ === \"number\") return Math.max(a, b);\n  if(typeof a === \"object\" && typeof\
    \ b === \"object\") return compare_object(a, b);\n  if(typeof a === \"object\"\
    \ && typeof b === \"number\") return Math.max(a, b);\n  if(typeof a === \"object\"\
    \ && typeof b === \"string\") return Math.max(a, b);\n  return undefined;\n}\n",
  "    if (a === b) return a;\n    if (a === null || b === null) return undefined;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a === \"*\") return\
    \ b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return b;\n    if (b\
    \ === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b === \"^\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"?\") return b;\n    if (b\
    \ === \"?\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"<\") return b;\n    if (b\
    \ === \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") ", "    if (a === b)\
    \ return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n", "    if\
    \ (typeof(a) != typeof(b)) return None;\n    if (typeof(a) == \"number\") return\
    \ Math.max(a, b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n\
    \    if (typeof(a) == \"object\") {\n        if (a.constructor == Array) return\
    \ compare_one(a[0], b[0]);\n        if (a.constructor == Object) return compare_one(a.constructor,\
    \ b);\n    }\n    return undefined;\n}\n", "    if (a === b) return a;\n    if\
    \ (a === null || b === null) return undefined;\n    if (a === undefined) return\
    \ b;\n    if (b === undefined) return a;\n    if (a === \"\") return b;\n    if\
    \ (b === \"\") return a;\n    if (a === \".\") return b;\n    if (b === \".\"\
    ) return a;\n    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n\
    \    if (a === \"+\") return b;\n    if (b === \"+\") return a;\n    if (a ===\
    \ \"*\") return b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return\
    \ b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return\
    \ b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return\
    \ a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a\
    \ === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if (a === \"<=\"\
    ) return b;\n    if (b === \"<=\") return a;\n    if (a === \">=\") return b;\n\
    \    if (b === \">=\") return a;\n    if (a === \"<\") return b;\n    if (b ===\
    \ \"<\") return a;\n    if (a === \">\") return b;\n    if (b === \">\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"!\") return b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return\
    \ b;\n    if (b === \"~\") return a;\n    if (a === \"&\") return b;\n    if (b\
    \ === \"&\") return a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return\
    \ a;\n    if (a === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if\
    \ (a === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if (a === \"\
    >=\") return b;\n    if (b === \">=\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") return a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return\
    \ a;\n    if (a === \"!\") return b;\n    if (", "    if (a === b) return a;\n\
    \    if (a < b) return a;\n    if (a > b) return b;\n}\n", "    var a_type = typeof\
    \ a;\n    var b_type = typeof b;\n    if (a_type === \"string\" && b_type ===\
    \ \"string\") {\n        a = a.split(\",\");\n        b = b.split(\",\");\n  \
    \  }\n    if (a_type === \"number\" && b_type === \"number\") {\n        a = a.toString();\n\
    \        b = b.toString();\n    }\n    if (a > b) {\n        return a;\n    }\
    \ else if (a < b) {\n        return b;\n    } else {\n        return undefined;\n\
    \    }\n}\n", "    if (typeof(a) != typeof(b)) return undefined;\n    if (typeof(a)\
    \ == \"number\") return Math.max(a, b);\n    if (typeof(a) == \"string\") return\
    \ a.localeCompare(b);\n    if (typeof(a) == \"object\") {\n        if (a.constructor\
    \ == Array) return compare_one(a[0], b[0]);\n        if (a.constructor == Object)\
    \ return compare_one(a.constructor, b);\n    }\n    return undefined;\n}\n", " \
    \   if (typeof(a) != typeof(b)) return None;\n    if (typeof(a) == \"number\"\
    ) return Math.max(a, b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n\
    \    if (typeof(a) == \"object\") return compare_one(a[0], b[0]) || compare_one(a[1],\
    \ b[1]);\n}\n", "    if (typeof(a) != typeof(b)) return false;\n    if (typeof(a)\
    \ == \"number\") return (a > b) ? 1 : ((a < b) ? -1 : 0);\n    if (typeof(a) ==\
    \ \"string\") return (a.length > b.length) ? a : b;\n    if (typeof(a) == \"object\"\
    ) return compare_one(a.toFixed(2), b.toFixed(2));\n}\n", "    if (typeof(a) !=\
    \ typeof(b)) return None;\n    if (typeof(a) == \"number\") return Math.max(a,\
    \ b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n    if (typeof(a)\
    \ == \"object\") return compare_one(a[0], b[0]) || compare_one(a[1], b[1]);\n\
    }\n", "    if (typeof(a) == 'string'){\n        a = a.split(',');\n    }\n   \
    \ if (typeof(b) == 'string'){\n        b = b.split(',');\n    }\n    if (typeof(a)\
    \ != 'number' || typeof(b) != 'number'){\n        return undefined;\n    }\n \
    \   if (a > b){\n        return a;\n    }\n    return b;\n}\n", "    if (typeof(a)\
    \ != typeof(b)) return None;\n    if (typeof(a) == \"number\") return Math.max(a,\
    \ b);\n    if (typeof(a) == \"string\") return a.localeCompare(b);\n    if (typeof(a)\
    \ == \"object\") return compare_one(a[0], b[0]);\n}\n", "    if(a===b) return\
    \ a;\n    if(typeof a === typeof b){\n        if(a === null && b === null) return\
    \ a;\n        if(a === null) return b;\n        if(b === null) return a;\n   \
    \     if(typeof a === \"number\" && typeof b === \"number\"){\n            return\
    \ Math.max(a, b);\n        }\n        if(typeof a === \"string\" && typeof b ===\
    \ \"string\"){\n            return a.localeCompare(b);\n        }\n    }\n   \
    \ return undefined;\n}\n", "    if (a === b) return a;\n    if (a === undefined)\
    \ return b;\n    if (b === undefined) return a;\n    if (a === null) return b;\n\
    \    if (b === null) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \".0\") return b;\n    if\
    \ (b === \".0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    +0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return\
    \ b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if\
    \ (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"\
    -0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") return\
    \ a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if\
    \ (a === \"+0\") return b;\n    if (b === \"+0\") return a;\n    if (a === \"\
    -0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"+0\") return\
    \ b;\n    if (b === \"+0\") return a;\n    if (a === \"-0\") return b;\n    if\
    \ (b === \"-0\") return a;\n    if (a === \"+0\") return b;\n    if (b === \"\
    +0\") return a;\n    if (a === \"-0\") return b;\n    if (b === \"-0\") return\
    \ a;\n    if (a === \"+0\") return b;\n    if (b === \"+0\") ", "    if(a ===\
    \ b) return a;\n    if(a < b) return a;\n    return b;\n}\n", "    if(a === b)\
    \ return a;\n    if(typeof a === typeof b) return parseFloat(a) > parseFloat(b)\
    \ ? a : b;\n    if(typeof a === typeof \"string\") return a.localeCompare(b);\n\
    \    if(typeof b === typeof \"string\") return b.localeCompare(a);\n    if(typeof\
    \ a === typeof Number) return parseFloat(a) > parseFloat(b) ? a : b;\n    if(typeof\
    \ b === typeof Number) return parseFloat(b) > parseFloat(a) ? b : a;\n    if(typeof\
    \ a === typeof Boolean) return a === b ? true : false;\n    if(typeof b === typeof\
    \ Boolean) return a === b ? false : true;\n    if(a === null || b === null) return\
    \ a === b ? 0 : (a > b ? 1 : -1);\n    if(a === undefined) return b;\n    if(b\
    \ === undefined) return a;\n    if(a === \"\") return b;\n    if(b === \"\") return\
    \ a;\n    if(a === true) return b;\n    if(b === true) return a;\n    if(a ===\
    \ false) return b;\n    if(b === false) return a;\n    if(a === 0) return b;\n\
    \    if(a === 1) return b;\n    if(b === 1) return a;\n    if(a === -1) return\
    \ b;\n    if(b === -1) return a;\n    if(a === Number.POSITIVE_INFINITY) return\
    \ b;\n    if(a === Number.NEGATIVE_INFINITY) return a;\n    if(a === Number.NaN)\
    \ return b;\n    if(a === Number.EPSILON) return b;\n    if(a === Number.MIN_SAFE_INTEGER)\
    \ return b;\n    if(a === Number.MAX_SAFE_INTEGER) return a;\n    if(a === Number.MAX_VALUE)\
    \ return b;\n    if(a === Number.MIN_VALUE) return a;\n    if(a === Number.EPSILON)\
    \ return a;\n    if(a === Number.MAX_SAFE_INTEGER) return a;\n    if(a === Number.MIN_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MIN_SAFE_INTEGER) return a;\n    if(a === Number.MAX_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MAX_VALUE) return a;\n    if(a === Number.MIN_VALUE)\
    \ return a;\n    if(a === Number.EPSILON) return a;\n    if(a === Number.MAX_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MIN_SAFE_INTEGER) return a;\n    if(a === Number.MAX_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MAX_VALUE) return a;\n    if(a === Number.MIN_VALUE)\
    \ return a;\n    if(a === Number.EPSILON) return a;\n    if(a === Number.MAX_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MIN_SAFE_INTEGER) return a;\n    if(a === Number.MAX_SAFE_INTEGER)\
    \ return a;\n    if(a === Number.MAX_VALUE) return a;\n    if(a === Number.MIN_VALUE)\
    \ return a;\n", "    if(a === b){\n        return a;\n    }\n    if(typeof(a)\
    \ === 'string' && typeof(b) === 'string'){\n        var a_array = a.split(',');\n\
    \        var b_array = b.split(',');\n        var a_len = a_array.length;\n  \
    \      var b_len = b_array.length;\n        var i = 0;\n        var j = 0;\n \
    \       while(i<a_len && j<b_len){\n            if(a_array[i] < b_array[j]){\n\
    \                return a_array[i];\n            }\n            if(a_array[i]\
    \ > b_array[j]){\n                return b_array[j];\n            }\n        \
    \    i++;\n            j++;\n        }\n        if(i<a_len){\n            return\
    \ a_array[i];\n        }\n        if(j<b_len){\n            return b_array[j];\n\
    \        }\n    }\n    if(typeof(a) === 'number' && typeof(b) === 'number'){\n\
    \        return Math.max(a, b);\n    }\n    if(typeof(a) === 'number'){\n    \
    \    return a;\n    }\n    if(typeof(b) === 'number'){\n        return b;\n  \
    \  }\n    return undefined;\n}\n", "    if (a === b) return a;\n    if (a < b)\
    \ return a;\n    if (a > b) return b;\n}\n", "  if(a === b){\n    return a;\n\
    \  }\n  if(typeof a === typeof b){\n    if(a === null || b === null){\n      return\
    \ a === b;\n    }\n    if(a instanceof Array && b instanceof Array){\n      if(a.length\
    \ !== b.length){\n        return false;\n      }\n      for(var i = 0; i < a.length;\
    \ i++){\n        if(a[i] !== b[i]){\n          return false;\n        }\n    \
    \  }\n      return true;\n    }\n    if(a instanceof Object){\n      if(a instanceof\
    \ Date){\n        return a === b;\n      }\n      if(a instanceof RegExp){\n \
    \       return a.toString() === b.toString();\n      }\n      if(a instanceof\
    \ Number){\n        return a === b;\n      }\n      if(a instanceof Function){\n\
    \        return a.toString() === b.toString();\n      }\n      if(a instanceof\
    \ String){\n        return a === b;\n      }\n      if(a instanceof Boolean){\n\
    \        return a === b;\n      }\n      if(a instanceof Error){\n        return\
    \ a.toString() === b.toString();\n      }\n      if(a instanceof Object){\n  \
    \      return a.toString() === b.toString();\n      }\n    }\n  }\n  return false;\n\
    }\n", "    if (typeof(a) == 'number' && typeof(b) == 'number'){\n        return\
    \ a > b ? a : b;\n    }\n    if (typeof(a) == 'string'){\n        a = a.split(',');\n\
    \    }\n    if (typeof(b) == 'string'){\n        b = b.split(',');\n    }\n  \
    \  if (typeof(a) == 'object'){\n        a = a.map(function(x){return x.trim();});\n\
    \    }\n    if (typeof(b) == 'object'){\n        b = b.map(function(x){return\
    \ x.trim();});\n    }\n    if (a.length != b.length){\n        return undefined;\n\
    \    }\n    for (var i = 0; i < a.length; i++){\n        if (a[i] != b[i]){\n\
    \            return undefined;\n        }\n    }\n    return undefined;\n}\n",
  "    if (typeof(a) == 'string'){\n        a = a.split(',');\n    }\n    if (typeof(b)\
    \ == 'string'){\n        b = b.split(',');\n    }\n    if (typeof(a) != 'string'\
    \ || typeof(b) != 'string'){\n        return undefined;\n    }\n    if (a.length\
    \ != b.length){\n        return undefined;\n    }\n    var a_real = parseFloat(a[0]);\n\
    \    var b_real = parseFloat(b[0]);\n    if (a_real > b_real){\n        return\
    \ a;\n    } else if (a_real < b_real){\n        return b;\n    } else {\n    \
    \    return undefined;\n    }\n}\n", "    if (a === b) return a;\n    if (a <\
    \ b) return a;\n    if (a > b) return b;\n}\n", "  if (typeof(a) != typeof(b))\
    \ return false;\n  if (typeof(a) == \"number\") return (a > b);\n  if (typeof(a)\
    \ == \"string\") return (a.localeCompare(b) > 0);\n  if (typeof(a) == \"object\"\
    ) return (compare_one(a.real, b.real) && compare_one(a.imag, b.imag));\n  return\
    \ false;\n}\n", "    if (a === b) return a;\n    if (a === null || b === null)\
    \ return undefined;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \",\") return b;\n    if (b === \",\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"&\") return\
    \ b;\n    if (b === \"&\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"&\") return\
    \ b;\n    if (b === \"&\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"&\") return\
    \ b;\n    if (b === \"&\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a\
    \ === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a === \"&\") return\
    \ b;\n    if (b === \"&\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"~\") return b;\n    if (b === \"", " \
    \   if (typeof(a) != typeof(b)) return false;\n    if (a === b) return true;\n\
    \    if (a === null || b === null) return a === b;\n    if (typeof(a) != 'number')\
    \ return false;\n    if (typeof(b) != 'number') return false;\n    if (a < b)\
    \ return true;\n    if (a > b) return false;\n    if (a === 0) return false;\n\
    \    if (a === 1) return true;\n    if (a === Infinity) return true;\n    if (a\
    \ === -Infinity) return true;\n    if (a === NaN) return true;\n    if (a ===\
    \ undefined) return true;\n    if (a === null) return true;\n    if (a === \"\"\
    ) return true;\n    if (a === false) return true;\n    if (a === true) return\
    \ true;\n    if (a === undefined) return true;\n    if (a === {}) return true;\n\
    \    if (a === []) return true;\n    if (a === function(){}) return true;\n  \
    \  if (a === new Date()) return true;\n    if (a === new RegExp()) return true;\n\
    \    if (a === new Error()) return true;\n    if (a === window) return true;\n\
    \    if (a === Math) return true;\n    if (a === JSON) return true;\n    if (a\
    \ === Math) return true;\n    if (a === JSON) return true;\n    if (a === window)\
    \ return true;\n    if (a === Math) return true;\n    if (a === JSON) return true;\n\
    \    if (a === window) return true;\n    if (a === Math) return true;\n    if\
    \ (a === JSON) return true;\n    if (a === window) return true;\n    if (a ===\
    \ Math) return true;\n    if (a === JSON) return true;\n    if (a === window)\
    \ return true;\n    if (a === Math) return true;\n    if (a === JSON) return true;\n\
    \    if (a === window) return true;\n    if (a === Math) return true;\n    if\
    \ (a === JSON) return true;\n    if (a === window) return true;\n    if (a ===\
    \ Math) return true;\n    if (a === JSON) return true;\n    if (a === window)\
    \ return true;\n    if (a === Math) return true;\n    if (a === JSON) return true;\n\
    \    if (a === window) return true;\n    if (a === Math) return true;\n    if\
    \ (a === JSON) return true;\n    if (a === window) return true;\n    if (a ===\
    \ Math) return true;\n    if (a === JSON) return true;\n    if (a === window)\
    \ return true;\n    if (a === Math) return true;\n    if (a === JSON) return true;\n\
    \    if (a === window) return true;\n    if (a === Math) return true;\n    if\
    \ (a === JSON) return true;\n    if (a === window) return true;\n    if (a ===\
    \ Math) return true;\n    if (a === JSON) return true;\n    if (a === window)\
    \ return true;\n    if (a === Math) return true;\n    if (a === JSON) return true;\n\
    \    if (a === window) return true;\n    if (a === Math) return true;\n    if\
    \ (", "    if (typeof(a) == 'number' && typeof(b) == 'number'){\n        return\
    \ Math.max(a, b);\n    }\n    if (typeof(a) == 'string' && typeof(b) == 'string'){\n\
    \        a = a.split(',');\n        b = b.split(',');\n        var a_len = a.length;\n\
    \        var b_len = b.length;\n        if (a_len == b_len){\n            for\
    \ (var i = 0; i < a_len; i++){\n                if (a[i] != b[i]){\n         \
    \           return a[i];\n                }\n            }\n        }\n    }\n\
    \    return undefined;\n}\n", "  if (a === b) return a;\n  if (a === null || b\
    \ === null) return a === b ? a : undefined;\n  if (a === undefined) return b;\n\
    \  if (b === undefined) return a;\n  if (a === \"\") return b;\n  if (b === \"\
    \") return a;\n  if (a === \".\") return b;\n  if (b === \".\") return a;\n  if\
    \ (a === \"-\") return b;\n  if (b === \"-\") return a;\n  if (a === \"+\") return\
    \ b;\n  if (b === \"+\") return a;\n  if (a === \"0\") return b;\n  if (b ===\
    \ \"0\") return a;\n  if (a === \",\") return b;\n  if (b === \",\") return a;\n\
    \  if (a === \"<\") return b;\n  if (b === \"<\") return a;\n  if (a === \">\"\
    ) return b;\n  if (b === \">\") return a;\n  if (a === \"=\") return b;\n  if\
    \ (b === \"=\") return a;\n  if (a === \"!\") return b;\n  if (b === \"!\") return\
    \ a;\n  if (a === \"~\") return b;\n  if (b === \"~\") return a;\n  if (a ===\
    \ \"<=\") return b;\n  if (b === \"<=\") return a;\n  if (a === \">=\") return\
    \ b;\n  if (b === \">=\") return a;\n  if (a === \"!=\") return b;\n  if (b ===\
    \ \"!=\") return a;\n  if (a === \"==\") return b;\n  if (b === \"==\") return\
    \ a;\n  if (a === \"=\") return b;\n  if (b === \"=\") return a;\n  if (a ===\
    \ \"!\") return b;\n  if (b === \"!\") return a;\n  if (a === \"~\") return b;\n\
    \  if (b === \"~\") return a;\n  if (a === \"<\") return b;\n  if (b === \"<\"\
    ) return a;\n  if (a === \">\") return b;\n  if (b === \">\") return a;\n  if\
    \ (a === \"=\") return b;\n  if (b === \"=\") return a;\n  if (a === \"!\") return\
    \ b;\n  if (b === \"!\") return a;\n  if (a === \"~\") return b;\n  if (b ===\
    \ \"~\") return a;\n  if (a === \"<=\") return b;\n  if (b === \"<=\") return\
    \ a;\n  if (a === \">=\") return b;\n  if (b === \">=\") return a;\n  if (a ===\
    \ \"!=\") return b;\n  if (b === \"!=\") return a;\n  if (a === \"==\") return\
    \ b;\n  if (b === \"==\") return a;\n  if (a === \"=\") return b;\n  if (b ===\
    \ \"=\") return a;\n  if (a === \"!\") return b;\n  if (b === \"!\") return a;\n\
    \  if (a === \"~\") return b;\n  if (b === \"~\") return a;\n  if (a === \"<\"\
    ) return b;\n  if (", "    if (a === b) return a;\n    if (a === null || b ===\
    \ null) return null;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \",\") return b;\n    if (b === \",\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a\
    \ === \"*\") return b;\n    if (b === \"*\") return a;\n    if (a === \"/\") return\
    \ b;\n    if (b === \"/\") return a;\n    if (a === \"^\") return b;\n    if (b\
    \ === \"^\") return a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return\
    \ a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return a;\n    if (a\
    \ === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a === \"+\") return\
    \ b;\n    if (b === \"+\") return a;\n    if (a === \"(\") return b;\n    if (b\
    \ === \"(\") return a;\n    if (a === \")\") return b;\n    if (b === \")\") return\
    \ a;\n    if (a === \"[\") return b;\n    if (b === \"[\") return a;\n    if (a\
    \ === \"]\") return b;\n    if (b === \"]\") return a;\n    if (a === \"{\") return\
    \ b;\n    if (b === \"{\") return a;\n    if (a === \"}\") return b;\n    if (b\
    \ === \"}\") return a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\"\
    ) return a;\n    if (a === \">=\") return b;\n    if (b === \">=\") return a;\n\
    \    if (a === \"==\") return b;\n    if (b === \"==\") return a;\n    if (a ===\
    \ \"!=\") return b;\n    if (b === \"!=\") return a;\n    if (a === \"<\") return\
    \ b;\n    if (b === \"<\") return a;\n    if (a === \">\") return b;\n    if (b\
    \ === \">\") ", "    if (a === b) return a;\n    if (a === null || b === null)\
    \ return undefined;\n    if (a === undefined) return b;\n    if (b === undefined)\
    \ return a;\n    if (a === \"\") return b;\n    if (b === \"\") return a;\n  \
    \  if (a === \".\") return b;\n    if (b === \".\") return a;\n    if (a === \"\
    -\") return b;\n    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n\
    \    if (b === \"+\") return a;\n    if (a === \"0\") return b;\n    if (b ===\
    \ \"0\") return a;\n    if (a === \"1\") return b;\n    if (b === \"1\") return\
    \ a;\n    if (a === \".0\") return b;\n    if (b === \".0\") return a;\n    if\
    \ (a === \"-0\") return b;\n    if (b === \"-0\") return a;\n    if (a === \"\
    1\") return b;\n    if (b === \"1\") return a;\n    if (a === \".1\") return b;\n\
    \    if (b === \".1\") return a;\n    if (a === \"-.1\") return b;\n    if (b\
    \ === \"-.1\") return a;\n    if (a === \"+.1\") return b;\n    if (b === \"+.1\"\
    ) return a;\n    if (a === \"-.1\") return b;\n    if (b === \"-.1\") return a;\n\
    \    if (a === \"+.1\") return b;\n    if (b === \"+.1\") return a;\n    if (a\
    \ === \"-.1\") return b;\n    if (b === \"-.1\") return a;\n    if (a === \"+.01\"\
    ) return b;\n    if (b === \"+.01\") return a;\n    if (a === \"-.01\") return\
    \ b;\n    if (b === \"-.01\") return a;\n    if (a === \"+.01\") return b;\n \
    \   if (b === \"+.01\") return a;\n    if (a === \"-.01\") return b;\n    if (b\
    \ === \"-.01\") return a;\n    if (a === \"+.02\") return b;\n    if (b === \"\
    +.02\") return a;\n    if (a === \"-.02\") return b;\n    if (b === \"-.02\")\
    \ return a;\n    if (a === \"+.02\") return b;\n    if (b === \"+.02\") return\
    \ a;\n    if (a === \"-.02\") return b;\n    if (b === \"-.02\") return a;\n \
    \   if (a === \"+.03\") return b;\n    if (b === \"+.03\") return a;\n    if (a\
    \ === \"-.03\") return b;\n    if (b === \"-.03\") return a;\n    if (a === \"\
    +.03\") return b;\n    if (b === \"+.03\") return a;\n    if (a === \"-.03\")\
    \ return b;\n    if (b === \"", "    if (a === b) return a;\n    if (a === null\
    \ || b === null) return undefined;\n    if (a === undefined) return b;\n    if\
    \ (b === undefined) return a;\n    if (a === \"\") return b;\n    if (b === \"\
    \") return a;\n    if (a === \".\") return b;\n    if (b === \".\") return a;\n\
    \    if (a === \"-\") return b;\n    if (b === \"-\") return a;\n    if (a ===\
    \ \"+\") return b;\n    if (b === \"+\") return a;\n    if (a === \"0\") return\
    \ b;\n    if (b === \"0\") return a;\n    if (a === \",\") return b;\n    if (b\
    \ === \",\") return a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return\
    \ a;\n    if (a === \">\") return b;\n    if (b === \">\") return a;\n    if (a\
    \ === \"=\") return b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return\
    \ b;\n    if (b === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b\
    \ === \"~\") return a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\"\
    ) return a;\n    if (a === \">=\") return b;\n    if (b === \">=\") return a;\n\
    \    if (a === \"!=\") return b;\n    if (b === \"!=\") return a;\n    if (a ===\
    \ \"==\") return b;\n    if (b === \"==\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a\
    \ === \">\") return b;\n    if (b === \">\") return a;\n    if (a === \"=\") return\
    \ b;\n    if (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b\
    \ === \"!\") return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return\
    \ a;\n    if (a === \"<=\") return b;\n    if (b === \"<=\") return a;\n    if\
    \ (a === \">=\") return b;\n    if (b === \">=\") return a;\n    if (a === \"\
    !=\") return b;\n    if (b === \"!=\") return a;\n    if (a === \"==\") return\
    \ b;\n    if (b === \"==\") return a;\n    if (a === \"=\") return b;\n    if\
    \ (b === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\"\
    ) return a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n\
    \    if (a === \"<\") return b;\n    if (b === \"<\") return a;", "    var a_is_str\
    \ = typeof(a) == \"string\";\n    var b_is_str = typeof(b) == \"string\";\n  \
    \  if(a_is_str && b_is_str){\n        var a_num = parseFloat(a);\n        var\
    \ b_num = parseFloat(b);\n        if(a_num == b_num){\n            return a;\n\
    \        }\n        else{\n            return a_num > b_num ? a : b;\n       \
    \ }\n    }\n    else if(a_is_str){\n        return b;\n    }\n    else if(b_is_str){\n\
    \        return a;\n    }\n    else{\n        return a > b ? a : b;\n    }\n}\n",
  "    if (a === b) return a;\n    if (a === null || b === null) return undefined;\n\
    \    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if\
    \ (a === \"\") return b;\n    if (b === \"\") return a;\n    if (a === \".\")\
    \ return b;\n    if (b === \".\") return a;\n    if (a === \"-\") return b;\n\
    \    if (b === \"-\") return a;\n    if (a === \"+\") return b;\n    if (b ===\
    \ \"+\") return a;\n    if (a === \"0\") return b;\n    if (b === \"0\") return\
    \ a;\n    if (a === \",\") return b;\n    if (b === \",\") return a;\n    if (a\
    \ === \"<\") return b;\n    if (b === \"<\") return a;\n    if (a === \">\") return\
    \ b;\n    if (b === \">\") return a;\n    if (a === \"=\") return b;\n    if (b\
    \ === \"=\") return a;\n    if (a === \"!\") return b;\n    if (b === \"!\") return\
    \ a;\n    if (a === \"~\") return b;\n    if (b === \"~\") return a;\n    if (a\
    \ === \"?\") return b;\n    if (b === \"?\") return a;\n    if (a === \"\\\"\"\
    ) return b;\n    if (b === \"\\\"\") return a;\n    if (a === \"'\") return b;\n\
    \    if (b === \"'\") return a;\n    if (a === \"%\") return b;\n    if (b ===\
    \ \"%\") return a;\n    if (a === \"&\") return b;\n    if (b === \"&\") return\
    \ a;\n    if (a === \"|\") return b;\n    if (b === \"|\") return a;\n    if (a\
    \ === \"\\\\\") return b;\n    if (b === \"\\\\\") return a;\n    if (a === \"\
    ^\") return b;\n    if (b === \"^\") return a;\n    if (a === \"~\") return b;\n\
    \    if (b === \"~\") return a;\n    if (a === \"`\") return b;\n    if (b ===\
    \ \"`\") return a;\n    if (a === \"'\") return b;\n    if (b === \"'\") return\
    \ a;\n    if (a === \"(\") return b;\n    if (b === \"(\") return a;\n    if (a\
    \ === \")\") return b;\n    if (b === \")\") return a;\n    if (a === \"[\") return\
    \ b;\n    if (b === \"[\") return a;\n    if (a === \"]\") return b;\n    if (b\
    \ === \"]\") return a;\n    if (a === \"{\") return b;\n    if (b === \"{\") return\
    \ a;\n    if (a === \"}\") return b;\n    if (b === \"}\") return a;\n    if (a\
    \ === \"%\") return b;\n    if (b === \"%\") return a;\n    if (a === \"+\") return\
    \ b;\n    if (b === \"+\") return a;\n    if (a === \"-\") return b;\n    if (b\
    \ === \"-\") ", "  if (a === b) return a;\n  if (a === null || b === null) return\
    \ null;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n\
    \  if (a === \"\") return b;\n  if (b === \"\") return a;\n  if (a === \".\")\
    \ return b;\n  if (b === \".\") return a;\n  if (a === \"-\") return b;\n  if\
    \ (b === \"-\") return a;\n  if (a === \"+\") return b;\n  if (b === \"+\") return\
    \ a;\n  if (a === \"0\") return b;\n  if (b === \"0\") return a;\n  if (a ===\
    \ \",\") return b;\n  if (b === \",\") return a;\n  if (a === \"<\") return b;\n\
    \  if (b === \"<\") return a;\n  if (a === \">\") return b;\n  if (b === \">\"\
    ) return a;\n  if (a === \"=\") return b;\n  if (b === \"=\") return a;\n  if\
    \ (a === \"!\") return b;\n  if (b === \"!\") return a;\n  if (a === \"~\") return\
    \ b;\n  if (b === \"~\") return a;\n  if (a === \"?\") return b;\n  if (b ===\
    \ \"?\") return a;\n  if (a === \"\\\"\") return b;\n  if (b === \"\\\"\") return\
    \ a;\n  if (a === \"'\") return b;\n  if (b === \"'\") return a;\n  if (a ===\
    \ \"%\") return b;\n  if (b === \"%\") return a;\n  if (a === \"&\") return b;\n\
    \  if (b === \"&\") return a;\n  if (a === \"|\") return b;\n  if (b === \"|\"\
    ) return a;\n  if (a === \"\\\\\") return b;\n  if (b === \"\\\\\") return a;\n\
    \  if (a === \"^\") return b;\n  if (b === \"^\") return a;\n  if (a === \"~\"\
    ) return b;\n  if (b === \"~\") return a;\n  if (a === \"?\") return b;\n  if\
    \ (b === \"?\") return a;\n  if (a === \"'\") return b;\n  if (b === \"'\") return\
    \ a;\n  if (a === \"\\\"\") return b;\n  if (b === \"\\\"\") return a;\n  if (a\
    \ === \"%\") return b;\n  if (b === \"%\") return a;\n  if (a === \"&\") return\
    \ b;\n  if (b === \"&\") return a;\n  if (a === \"|\") return b;\n  if (b ===\
    \ \"|\") return a;\n  if (a === \"\\\\\") return b;\n  if (b === \"\\\\\") return\
    \ a;\n  if (a === \"^\") return b;\n  if (b === \"^\") return a;\n  if (a ===\
    \ \"~\") return b;\n  if (b === \"~\") return a;\n  if (a === \"?\") return b;\n\
    \  if (b === \"?\") return a;\n  if (a === \"'\") return b;\n  if (", "    if\
    \ (a === b) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
