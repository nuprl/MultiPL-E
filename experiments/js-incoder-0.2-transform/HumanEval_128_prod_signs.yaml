name: HumanEval_128_prod_signs
language: js
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n//\
  \ Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
  \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
  \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    sum +=\
    \ Math.abs(arr[i]);\n  }\n  for(let i = 0; i < arr.length; i++){\n    arr[i] =\
    \ arr[i] * Math.sign(-arr[i]);\n  }\n  return sum;\n}\n", "  if(arr.length ===\
    \ 0){\n    return undefined;\n  }\n  let sum = 0;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n}\n", "    var\
    \ sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] !== 0){\n\
    \            sum += arr[i]*Math.sign(i);\n        }\n    }\n    return sum;\n\
    }\n", "  var sum = 0;\n  for(var i=0; i<arr.length; i++){\n    sum += arr[i]*Math.sign(i);\n\
    \  }\n  return sum;\n}\n", "    var sum = 0;\n    for(var i=0; i<arr.length; i++){\n\
    \        sum += Math.abs(arr[i]);\n    }\n    return sum * prod_signs_helper(arr);\n\
    }\n", "    if (arr.length == 0){\n        return undefined;\n    }\n    var sum\
    \ = 0;\n    var sign = 1;\n    for(var i=0; i<arr.length; i++){\n        sum +=\
    \ sign*arr[i];\n        sign *= (arr[i] < 0) ? -1 : 1;\n    }\n    return sum;\n\
    }\n", "    if (arr.length == 0) return undefined;\n    var sign = 1;\n    var\
    \ prod = 1;\n    arr.forEach(function(val){\n        sign *= (val < 0 ? -1 : 1);\n\
    \        prod *= (val < 0 ? 1 : -1);\n    });\n    return sign * Math.pow(prod,\
    \ arr.length);\n}\n", "  if(arr.length === 0){\n    return undefined;\n  }\n \
    \ let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    sum += arr[i]*Math.sign(i);\n\
    \  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i=0;i<arr.length;i++){\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return sum*prod_signs_helper(arr);\n}\n",
  "  if (arr.length == 0)\n    return undefined;\n  var sum = 0;\n  for (var i = 0;\
    \ i < arr.length; i++) {\n    var sign = arr[i] < 0 ? -1 : 1;\n    sum += sign\
    \ * Math.pow(Math.abs(arr[i]), arr.length);\n  }\n  return sum;\n}\n", "    var\
    \ sum = 0;\n    for(var i=0;i<arr.length;i++){\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum*prod_signs_helper(arr);\n}\n", "    if (arr.length == 0){\n\
    \        return undefined;\n    }\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++){\n        sum += arr[i] * Math.sign(i);\n    }\n    return sum;\n}\n",
  "  if(arr.length === 0){\n    return undefined;\n  }\n  let sum = 0;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    sum += arr[i]*Math.sign(i);\n  }\n  return\
    \ sum;\n}\n", "  if(arr.length == 0){\n    return undefined;\n  }\n  if(arr.length\
    \ == 1){\n    return arr[0];\n  }\n  var sum = 0;\n  for(var i=0; i<arr.length;\
    \ i++){\n    var sign = arr[i]<0?-1:1;\n    sum += sign*Math.pow(Math.abs(arr[i]),\
    \ arr.length);\n  }\n  return sum;\n}\n", "  if (arr.length == 0){\n    return\
    \ undefined;\n  }\n  var sum = 0;\n  var sign = 1;\n  for (var i = 0; i < arr.length;\
    \ i++){\n    sum += sign * arr[i];\n    sign *= (arr[i] < 0) ? -1 : 1;\n  }\n\
    \  return sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n\
    \        sum += arr[i]*Math.sign(i);\n    }\n    return sum;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]) *\
    \ Math.sign(arr[i]);\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i=0;\
    \ i<arr.length; i++){\n    sum += Math.abs(arr[i]);\n  }\n  return sum*prod_signs_helper(arr);\n\
    }\n", "  if (arr.length === 0) return undefined;\n  var sum = 0;\n  for (var i\
    \ = 0; i < arr.length; i++) {\n    var sign = arr[i] < 0 ? -1 : 1;\n    sum +=\
    \ sign * Math.abs(arr[i]);\n  }\n  return sum;\n}\n", "    var sum = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n    }\n    return\
    \ sum * Math.sign(arr[0]);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
