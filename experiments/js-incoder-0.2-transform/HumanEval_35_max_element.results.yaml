language: js
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return cur > prev\
    \ ? cur : prev;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3saodbwf.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3saodbwf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return Math.max(prev,\
    \ cur);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max_element = l[0];\n  for(var i = 1; i < l.length; i++){\n\
    \    if(l[i] > max_element){\n      max_element = l[i];\n    }\n  }\n  return\
    \ max_element;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3saodbwf.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3saodbwf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max_value = l[0];\n  var max_index = 0;\n  for(var i\
    \ = 1; i < l.length; i++){\n    if(l[i] > max_value){\n      max_value = l[i];\n\
    \      max_index = i;\n    }\n  }\n  return max_value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max_element = l[0];\n  for(var i = 1; i < l.length; i++){\n\
    \    if(l[i] > max_element){\n      max_element = l[i];\n    }\n  }\n  return\
    \ max_element;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i], max_i = i;\n       \
    \ }\n    }\n    return l[max_i];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return p > c ? p : c;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i=1; i<l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpa_zpg648.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa_zpg648.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIdx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIdx\
    \ = i;\n        }\n    }\n    return maxIdx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzau1d0wu.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzau1d0wu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b){\n    return a > b ? a : b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIdx = 0, i, j, cur;\n  for(i = 0; i <\
    \ l.length; i++){\n    cur = l[i];\n    for(j = 0; j < i; j++){\n      if(cur\
    \ < l[j]){\n        max = l[j];\n        maxIdx = j;\n      }\n    }\n  }\n  return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzybp5mvm.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzybp5mvm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIndex = 0, maxIndexes = [];\n  for(var\
    \ i = 1; i < l.length; i++){\n    if(l[i] > max){\n      maxIndex = i;\n     \
    \ max = l[i];\n    }\n  }\n  maxIndexes.push(maxIndex);\n  return maxIndexes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpsz2t1jlc.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsz2t1jlc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, curr){\n    return prev >\
    \ curr ? prev : curr;\n  });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max_element = l[0];\n  for(var i = 1; i < l.length; i++){\n\
    \    if(l[i] > max_element){\n      max_element = l[i];\n    }\n  }\n  return\
    \ max_element;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3saodbwf.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3saodbwf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max_element = l[0];\n  for(var i = 1; i < l.length; i++){\n\
    \    if(l[i] > max_element){\n      max_element = l[i];\n    }\n  }\n  return\
    \ max_element;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxi = 1, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxi =\
    \ i;\n        }\n    }\n    return maxi;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuiah0vg_.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuiah0vg_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIndex = 0, i, j, cur;\n  for(i = 1, j\
    \ = l.length; i < j; i++){\n    cur = l[i];\n    if(cur > max){\n      max = cur;\n\
    \      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1ss2e7qa.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ss2e7qa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, curr){\n    return prev >\
    \ curr ? prev : curr;\n  });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_num = l[0], max_idx = 0, i;\n    for(i = 0; i <\
    \ l.length; i++){\n        if(l[i] > max_num){\n            max_num = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return l[max_idx];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpqsur2chj.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqsur2chj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIndex = 0, maxIndexes = [];\n  for(var\
    \ i = 1; i < l.length; i++){\n    if(l[i] > max){\n      maxIndex = i;\n     \
    \ max = l[i];\n    }\n  }\n  maxIndexes.push(maxIndex);\n  return maxIndexes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpsz2t1jlc.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsz2t1jlc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b){\n    return a > b ? a : b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxi = 1, maxii = 1, i;\n  for(i = 0; i <\
    \ l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n      maxi = i;\n \
    \   }\n    if(l[i] > max){\n      maxii = i;\n    }\n  }\n  return maxii;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyc4k_3kr.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyc4k_3kr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, maxIndexes = [];\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \            maxIndex = i;\n        }\n    }\n    maxIndexes.push(maxIndex);\n\
    \    return maxIndexes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmp13adydw9.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp13adydw9.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return l[max_idx];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b){\n    return a > b ? a : b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIdx = 0, i, j, cur;\n    for(i = 0;\
    \ i < l.length; i++){\n        cur = l[i];\n        for(j = 0; j < i; j++){\n\
    \            if(l[j] > cur){\n                max = l[j];\n                maxIdx\
    \ = j;\n            }\n        }\n    }\n    return max;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpud0qgd2y.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpud0qgd2y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_value = l[0];\n    var max_index = -1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, curr){\n    return Math.max(prev,\
    \ curr);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5mekmwir.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5mekmwir.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3saodbwf.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3saodbwf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIdx = 0, i, j, cur;\n  for(i = 1; i <\
    \ l.length; i++){\n    cur = l[i];\n    for(j = 0; j < i; j++){\n      if(cur\
    \ < l[j]){\n        max = l[j];\n        maxIdx = j;\n      }\n    }\n  }\n  return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpfjvathhp.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfjvathhp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i=1; i<l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpa_zpg648.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa_zpg648.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxi = 1;\n  for(var i = 1; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n      maxi = i;\n    }\n  }\n\
    \  return maxi;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbkkcueha.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbkkcueha.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIndex = 0, i;\n  for(i = 0; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n      maxIndex = i;\n    }\n\
    \  }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp425f5fbb.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp425f5fbb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgey8qz28.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgey8qz28.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 0;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i], max_i = i;\n       \
    \ }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_ba447ei.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_ba447ei.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], max_idx = 0, i;\n  for(i = 0; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n      max_idx = i;\n    }\n \
    \ }\n  return l[max_idx];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpazx6cqz2.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazx6cqz2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i], max_i = i;\n       \
    \ }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwvd4crm7.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwvd4crm7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], max_idx = 0, i;\n  for(i = 1; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n      max_idx = i;\n    }\n \
    \ }\n  return max_idx;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuc050_6r.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuc050_6r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return l[max_idx];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_num = l[0];\n    var max_idx = 1;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_num){\n            max_num\
    \ = l[i];\n            max_idx = i;\n        }\n    }\n    return max_num;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_i =\
    \ i;\n        }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2re6834.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2re6834.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return l[max_idx];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_idx = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return l[max_idx];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(prev, curr){\n        return prev\
    \ > curr ? prev : curr;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b){\n    return a > b ? a : b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b){\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(prev, cur){\n    return prev > cur\
    \ ? prev : cur;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i], max_i = i;\n       \
    \ }\n    }\n    return max_i;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwvd4crm7.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwvd4crm7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_num = l[0];\n    var max_element = l[0];\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max_num){\n            max_num\
    \ = l[i];\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], max_i = 1;\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i], max_i = i;\n       \
    \ }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(Math, l)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], max_i = 1;\n  for(var i = 1; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i], max_i = i;\n    }\n  }\n  return\
    \ max_i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyirlh4lj.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyirlh4lj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++){\n\
    \    if (l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0], maxIndex = 0;\n  for(var i = 1; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n      maxIndex = i;\n    }\n\
    \  }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpe24z7jpz.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe24z7jpz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792465
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0], maxIndex = 0, i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3saodbwf.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3saodbwf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(p, c){\n    return c > p ? c : p;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max_element = l[0];\n    for (var i = 1; i < l.length;\
    \ i++){\n        if (l[i] > max_element){\n            max_element = l[i];\n \
    \       }\n    }\n    return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792465
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
