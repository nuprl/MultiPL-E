language: js
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqz3shup.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - Math.floor(value)) < 0.0000001){\n    closest = Math.floor(value);\n\
    \  }else{\n    closest = Math.round(value);\n  }\n  return closest;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp_5ua2wm1.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_5ua2wm1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = Number(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbs\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg7278ejz.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if (diff < 0.5){\n\
    \    return closest;\n  }\n  return closest + 1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpecexpcpp.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpecexpcpp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n \
    \ var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAb\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpghsmur21.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < 0.1) {\n    return closest_integer;\n  }\n  return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpygnel2_t.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpygnel2_t.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiffAbs;\n  var\
    \ closestDiff;\n  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var\
    \ closestDiffAbsMaxValue;\n  var closestDiffAbsMin;\n  var closestDiffAbsMinIndex;\n\
    \  var closestDiffAbsMinValue;\n  var closestIndex;\n  var closestValue;\n  var\
    \ closestValueAbs;\n  var closestValueAbsMax;\n  var closestValueAbsMaxIndex;\n\
    \  var closestValueAbsMaxValue;\n  var closestValueAbsMin;\n  var closestValueAbsMinIndex;\n\
    \  var closestValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var closestValueValueAbsMax;\n  var closestValueValueAbsMaxIndex;\n\
    \  var closestValueValueAbsMaxValue;\n  var closestValueValueAbsMin;\n  var closestValueValueAbsMinIndex;\n\
    \  var closestValueValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var closestValueValueAbsMax;\n  var closestValueValueAbsMaxIndex;\n\
    \  var closestValueValueAbsMaxValue;\n  var closestValueValueAbsMin;\n  var closestValueValueAbsMinIndex;\n\
    \  var closestValueValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var closestValueValueAbsMax;\n  var closestValueValueAbsMaxIndex;\n\
    \  var closestValueValueAbsMaxValue;\n  var closestValueValueAbsMin;\n  var closestValueValueAbsMinIndex;\n\
    \  var closestValueValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var closestValueValueAbsMax;\n  var closestValueValueAbsMaxIndex;\n\
    \  var closestValueValueAbsMaxValue;\n  var closestValueValueAbsMin;\n  var closestValueValueAbsMinIndex;\n\
    \  var closestValueValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var closestValueValueAbsMax;\n  var closestValueValueAbsMaxIndex;\n\
    \  var closestValueValueAbsMaxValue;\n  var closestValueValueAbsMin;\n  var closestValueValueAbsMinIndex;\n\
    \  var closestValueValueAbsMinValue;\n  var closestValueIndex;\n  var closestValueValue;\n\
    \  var closestValueValueAbs;\n  var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpery062qf.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var closest;\n  if (difference\
    \ <= Number.EPSILON) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpe7f4ehfe.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpe7f4ehfe.js:15:20)\n    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n\
    \    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n\
    \    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n\
    \    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n\
    \    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n    at closest_integer (/tmp/tmpe7f4ehfe.js:15:37)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3ephdenb.js:55\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if (Math.abs(closest_integer - value) < 0.0000001){\n\
    \        closest_integer = Math.round(value);\n    }\n    return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpydyarop7.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpydyarop7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - closest_integer(value)) < 1e-6){\n    closest = value;\n\
    \  }else{\n    closest = Math.ceil(Math.abs(value - closest_integer(value)));\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpaazti4n2.js:16\n  if(Math.abs(value - closest_integer(value)) <\
    \ 1e-6){\n  ^\n\nRangeError: Maximum call stack size exceeded\n    at closest_integer\
    \ (/tmp/tmpaazti4n2.js:16:3)\n    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n\
    \    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n\
    \    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n\
    \    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n\
    \    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n    at closest_integer (/tmp/tmpaazti4n2.js:16:23)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value));\n  }\n  if(Math.abs(closest - value) < Math.abs(closest\
    \ - value)){\n    closest = Math.round(Math.abs(value));\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmplkcrtos1.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplkcrtos1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpw3rt5sxq.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3rt5sxq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = Math.abs(parseInt(value));\n    for(var i\
    \ = 1; i < 1000; i++){\n        var currentDistance = Math.abs(parseInt(value));\n\
    \        if(currentDistance < closestDistance){\n            closest = i;\n  \
    \          closestDistance = currentDistance;\n        }\n    }\n    return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpjiusj22t.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjiusj22t.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = 0;\n  }else{\n    closest = (Math.abs(value)\
    \ - 1) < Math.abs(value) ? Math.abs(value) - 1 : Math.abs(value) - 1;\n  }\n \
    \ return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmptlwwistd.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptlwwistd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(value/Math.abs(value)) * Math.abs(value);\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp4wvahf_9.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4wvahf_9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdbm1fxc8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference < 0.000000001){\n\
    \    return value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001){\n    return -value;\n\
    \  }\n  if(difference < 0.000000001){\n    return -value;\n  }\n  if(difference\
    \ < 0.000000001){\n    return -value;\n  }\n  if(difference < 0.000000001){\n\
    \    return -value;\n  }\n  if(difference < 0.000000001)\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnl5zgzfg.js:116\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value) - 1);\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp90s8p49s.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp90s8p49s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff > 0){\n\
    \    return closest;\n  }\n  else{\n    return closest - 1;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpyk4i2szh.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyk4i2szh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.000000001){\n\
    \    return closest_integer;\n  } else {\n    return value;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpy9c0hb11.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy9c0hb11.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var sign;\n\n  if(num < 0){\n    sign = -1;\n\
    \    num = -num;\n  }else{\n    sign = 1;\n  }\n\n  diff = Math.abs(num - Math.floor(num));\n\
    \n  if(diff > 0.5){\n    closest = Math.floor(num);\n  }else{\n    closest = Math.ceil(num);\n\
    \  }\n\n  return sign * (closest + diff);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmphl2gd6rz.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphl2gd6rz.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqz3shup.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestDiffAbsAbs;\n \
    \ var closestAbsDiffAbsAbs;\n  var closestDiffAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbs;\n  var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var\
    \ closestAbsDiffAbsAbsAbsAbsAbsAbsAb\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplnd4g0s8.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqz3shup.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpofmcp4ix.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - closest_integer(value)) < .5){\n    closest = value;\n\
    \  }else{\n    closest = Math.ceil(value - closest_integer(value));\n  }\n  return\
    \ closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv8k2mqxg.js:16\n  if(Math.abs(value - closest_integer(value)) <\
    \ .5){\n  ^\n\nRangeError: Maximum call stack size exceeded\n    at closest_integer\
    \ (/tmp/tmpv8k2mqxg.js:16:3)\n    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n\
    \    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n\
    \    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n\
    \    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n\
    \    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n    at closest_integer (/tmp/tmpv8k2mqxg.js:16:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - closest_integer(Math.floor(value))) < 0.0000001){\n   \
    \ closest = Math.floor(value);\n  }else{\n    closest = Math.round(value);\n \
    \ }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcy60ek3x.js:16\n  if(Math.abs(value - closest_integer(Math.floor(value)))\
    \ < 0.0000001){\n  ^\n\nRangeError: Maximum call stack size exceeded\n    at closest_integer\
    \ (/tmp/tmpcy60ek3x.js:16:3)\n    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n\
    \    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n\
    \    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n\
    \    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n\
    \    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n    at closest_integer (/tmp/tmpcy60ek3x.js:16:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbs2;\n  var closestDiffAbs3;\n  var closestDiffAbs4;\n  var\
    \ closestDiffAbs5;\n  var closestDiffAbs6;\n  var closestDiffAbs7;\n  var closestDiffAbs8;\n\
    \  var closestDiffAbs9;\n  var closestDiffAbs10;\n  var closestDiffAbs11;\n  var\
    \ closestDiffAbs12;\n  var closestDiffAbs13;\n  var closestDiffAbs14;\n  var closestDiffAbs15;\n\
    \  var closestDiffAbs16;\n  var closestDiffAbs17;\n  var closestDiffAbs18;\n \
    \ var closestDiffAbs19;\n  var closestDiffAbs20;\n  var closestDiffAbs21;\n  var\
    \ closestDiffAbs22;\n  var closestDiffAbs23;\n  var closestDiffAbs24;\n  var closestDiffAbs25;\n\
    \  var closestDiffAbs26;\n  var closestDiffAbs27;\n  var closestDiffAbs28;\n \
    \ var closestDiffAbs29;\n  var closestDiffAbs30;\n  var closestDiffAbs31;\n  var\
    \ closestDiffAbs32;\n  var closestDiffAbs33;\n  var closestDiffAbs34;\n  var closestDiffAbs35;\n\
    \  var closestDiffAbs36;\n  var closestDiffAbs37;\n  var closestDiffAbs38;\n \
    \ var closestDiffAbs39;\n  var closestDiffAbs40;\n  var closestDiffAbs41;\n  var\
    \ closestDiffAbs42;\n  var closestDiffAbs43;\n  var closestDiffAbs44;\n  var closestDiffAbs45;\n\
    \  var closestDiffAbs46;\n  var closestDiffAbs47;\n  var closestDiffAbs48;\n \
    \ var closestDiffAbs49;\n  var closestDiffAbs50;\n  var closestDiffAbs51;\n  var\
    \ closestDiffAbs52;\n  var closestDiffAbs53;\n  var closestDiffAbs54;\n  var closestDiffAbs55;\n\
    \  var closestDiffAbs56;\n  var closestDiffAbs57;\n  var closestDiffAbs58;\n \
    \ var closestDiffAbs59;\n  var closestDiffAbs60;\n  var closestDiffAbs61;\n  var\
    \ closestDiffAbs62;\n  var closestDiffAbs63;\n  var closestDiffAbs64;\n  var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfa63wgvg.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsfh4j8hz.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = Number(value);\n\
    \  var diff = Math.abs(num - Math.floor(num));\n  var diff2 = Math.abs(num - Math.ceil(num));\n\
    \  if(diff > diff2){\n    return Math.floor(num);\n  }else{\n    return Math.ceil(num);\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp2xsfjuaa.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2xsfjuaa.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    closest_integer = Math.round(value);\n  }\n  return closest_integer;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpwp1p3cee.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwp1p3cee.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxAbs = null;\n  var diffAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var\
    \ diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n \
    \ var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAb\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprz59jtb4.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdbm1fxc8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsfh4j8hz.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.00000000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpkm6a_o5j.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkm6a_o5j.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff < 0.5){\n\
    \    return closest;\n  }\n  return closest + 1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpd9l2ak73.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd9l2ak73.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc4ols1d_.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp2sob6f9n.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2sob6f9n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var difference\
    \ = Math.abs(value - closest_integer(value));\n    var roundTo = Math.floor(difference\
    \ / 2);\n    return roundTo === 0 ? value : value - roundTo;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpd1fwh0jg.js:15\n    var difference = Math.abs(value - closest_integer(value));\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpd1fwh0jg.js:15:22)\n    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n\
    \    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n\
    \    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n\
    \    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n\
    \    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n    at closest_integer (/tmp/tmpd1fwh0jg.js:15:39)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest === value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) < Math.abs(value - closest)){\n    return closest;\n  }\n  return value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpjrhy7chs.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjrhy7chs.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return value;\n  }\n  return closest_integer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpfnpvzdv0.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfnpvzdv0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValueValueIndex;\n  var diffValueValueValue;\n\
    \  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValue\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4_rs2f1w.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffs;\n\
    \  var diffsAbs;\n  var diffsAbsMax;\n  var diffsAbsMaxIndex;\n  var diffsAbsMaxValue;\n\
    \  var diffsAbsMin;\n  var diffsAbsMinIndex;\n  var diffsAbsMinValue;\n  var diffsAbsValue;\n\
    \  var diffsAbsValueIndex;\n  var diffsAbsValueValue;\n  var diffsAbsValues;\n\
    \  var diffsAbsSum;\n  var diffsAbsSumIndex;\n  var diffsAbsSumValue;\n  var diffsAbsSums;\n\
    \  var diffsAbsSumsIndex;\n  var diffsAbsSumsValue;\n  var diffsAbsSumsIndex;\n\
    \  var diffsAbsSumsValueIndex;\n  var diffsAbsSumsValueValue;\n  var diffsAbsSumsValues;\n\
    \  var diffsAbsValue;\n  var diffsAbsValueIndex;\n  var diffsAbsValueValue;\n\
    \  var diffsAbsValues;\n  var diffsAbsValueSum;\n  var diffsAbsValueSumIndex;\n\
    \  var diffsAbsValueSumValue;\n  var diffsAbsValueSums;\n  var diffsAbsValueSumsIndex;\n\
    \  var diffsAbsValueSumsValue;\n  var diffsAbsValueSumsIndex;\n  var diffsAbsValueSumsValueIndex;\n\
    \  var diffsAbsValueSumsValueValue;\n  var diffsAbsValueSumsValues;\n  var diffsAbsValueIndex;\n\
    \  var diffsAbsValueValue;\n  var diffsAbsValues;\n  var diffsAbsValueSum;\n \
    \ var diffsAbsValueSumIndex;\n  var diffsAbsValueSumValue;\n  var diffsAbsValueSums;\n\
    \  var diffsAbsValueSumsIndex;\n  var diffsAbsValueSumsValue;\n  var diffsAbsValueSumsIndex;\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplgxejtrr.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  if(value[0] === \"-\") {\n    sign = -1;\n    value\
    \ = value.slice(1);\n  } else {\n    sign = 1;\n  }\n  diff = sign * (parseFloat(value)\
    \ - parseFloat(closest));\n  if(Math.abs(diff) < 0.0000001) {\n    return parseInt(value);\n\
    \  } else {\n    closest = parseInt(value) + sign * diff;\n    return closest;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpfwdxu9k9.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfwdxu9k9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpleckcgei.js:116\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq_0a9c1w.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsfh4j8hz.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (closest < 0){\n    closest = -closest;\n  }\n  return\
    \ closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmpcbkvkb1y.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcbkvkb1y.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var\
    \ n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n \
    \ var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var abs;\n  var absMax;\n\
    \  var absMaxIndex;\n  var absMaxValue;\n  var absMin;\n  var absMinIndex;\n \
    \ var absMinValue;\n  var absValue;\n  var absValueIndex;\n  var absValueValue;\n\
    \  var absValueValueIndex;\n  var absValueValueValue;\n  var absValueValueValueIndex;\n\
    \  var absValueValueValueValue;\n  var absValueValueValueValueIndex;\n  var absValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValue\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpllvhrten.js:107\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffSign;\n  var closestSign;\n\
    \  var closestDiff;\n  var closestDiffAbs;\n  var closestDiffSign;\n  var closestAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffSign;\n\
    \  var closestAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffSignAbs;\n\
    \  var closestAbsSignAbs;\n  var closestAbsDiffAbsSignAbs;\n  var closestSignAbs;\n\
    \  var closestSignAbsDiff;\n  var closestSignAbsDiffAbs;\n  var closestSignAbsDiffSign;\n\
    \  var closestSignAbsDiffSignAbs;\n  var closestSignAbsSign;\n  var closestSignAbsSignAbs;\n\
    \  var closestSignAbsSignAbsDiff;\n  var closestSignAbsSignAbsDiffAbs;\n  var\
    \ closestSignAbsSignAbsDiffSign;\n  var closestSignAbsSignAbsDiffSignAbs;\n  var\
    \ closestSignAbsSignAbsSign;\n  var closestSignAbsSignAbsSignAbs;\n  var closestSignAbsSignAbsSignAbsDiff;\n\
    \  var closestSignAbsSignAbsSignAbsDiffAbs;\n  var closestSignAbsSignAbsSignAbsDiffSign;\n\
    \  var closestSignAbsSignAbsSignAbsDiffSignAbs;\n  var closestSignAbsSignAbsSignAbsSign;\n\
    \  var closestSignAbsSignAbsSignAbsSignAbsDiff;\n  var closestSignAbsSignAbsSignAbsSignAbsDiffAbs;\n\
    \  var closestSignAbsSignAbsSignAbsSignAbsDiffSign;\n  var closestSignAbsSignAbsSignAbsSignAbsDiffSignAbs;\n\
    \  var closestSignAbsSignAbsSignAbsSignAbsSign;\n  var closestSignAbsSignAbsSignAbsSignAbsSignAbsDiff;\n\
    \  var closestSignAbsSignAbsSignAbsSignAbsSignAbsDiffAbs;\n  var closestSignAbsSignAbsSignAbsSignAbsSignAbsDiffSign;\n\
    \  var closestSignAbsSignAbsSignAbsSignAbsSignAbsDiffSignAbs;\n  var closestSignAbsSignAbsSignAbsSignAbsSignAbs\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpspuslauv.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMin = null;\n  var diffAbsMaxAbs = null;\n  var diffAbsMinAbs =\
    \ null;\n  var diffAbsMaxAbsMin = null;\n  var diffAbsMinAbsMax = null;\n  var\
    \ diffAbsMaxAbsMinAbs = null;\n  var diffAbsMinAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMax\
    \ = null;\n  var diffAbsMinAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMinAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMax\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  var diffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var\
    \ diffAb\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d1u_u.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwuyk72a2.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff > 0.5){\n\
    \    return closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpxk5ax0h3.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxk5ax0h3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplvho_7_8.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp90k4mp7h.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var diff = Math.abs(num - Math.floor(num));\n  var rounding;\n  if (diff <\
    \ 0.5){\n    rounding = Math.floor(num);\n  }else{\n    rounding = Math.ceil(num);\n\
    \  }\n  return rounding;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp3rughltj.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3rughltj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1kly7dy0.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) <= Math.abs(value - closest)){\n    return closest;\n  }\n  return\
    \ value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpj2x96xx0.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj2x96xx0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var diffAbs;\n  var diffSign;\n  var closestAbs;\n\
    \  var closestSign;\n  var closestDiff;\n  var closestDiffAbs;\n  var closestDiffSign;\n\
    \  var closestDiffAbsSign;\n  var closestAbsSign;\n  var closestAbsDiff;\n  var\
    \ closestAbsDiffSign;\n  var closestAbsDiffAbs;\n  var closestAbsDiffSign;\n \
    \ var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n\
    \  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbsSign;\n  var closestAbsDiffAbs\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuaevjyh_.js:85\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsSq = null;\n\
    \  var diffAbsSqMinus1 = null;\n  var closestAbs = null;\n  var closestAbsSq =\
    \ null;\n  var closestAbsSqMinus1 = null;\n  var closestAbsSqMinus1Sq = null;\n\
    \  var closestAbsSqMinus2Sq = null;\n  var closestAbsSqMinus2SqMinus1 = null;\n\
    \  var closestAbsSqMinus2SqMinus1Sq = null;\n  var closestAbsSqMinus3Sq = null;\n\
    \  var closestAbsSqMinus3SqMinus1 = null;\n  var closestAbsSqMinus3SqMinus1Sq\
    \ = null;\n  var closestAbsSqMinus4Sq = null;\n  var closestAbsSqMinus4SqMinus1\
    \ = null;\n  var closestAbsSqMinus4SqMinus1Sq = null;\n  var closestAbsSqMinus5Sq\
    \ = null;\n  var closestAbsSqMinus5SqMinus1 = null;\n  var closestAbsSqMinus5SqMinus1Sq\
    \ = null;\n  var closestAbsSqMinus6Sq = null;\n  var closestAbsSqMinus6SqMinus1\
    \ = null;\n  var closestAbsSqMinus6SqMinus1Sq = null;\n  var closestAbsSqMinus7Sq\
    \ = null;\n  var closestAbsSqMinus7SqMinus1 = null;\n  var closestAbsSqMinus7SqMinus1Sq\
    \ = null;\n  var closestAbsSqMinus8Sq = null;\n  var closestAbsSqMinus8SqMinus1\
    \ = null;\n  var closestAbsSqMinus8SqMinus1Sq = null;\n  var closestAbsSqMinus9Sq\
    \ = null;\n  var closestAbsSqMinus9SqMinus1 = null;\n  var closestAbsSqMinus9SqMinus1Sq\
    \ = null;\n  var closestAbsSqMinus10Sq = null;\n  var closestAbsSqMinus10SqMinus1\
    \ = null;\n  var closestAbsSqMinus10SqMinus1Sq = null;\n  var closestAbsSqMinus11Sq\
    \ = null;\n  var closestAbsSqMinus11SqMinus1 = null;\n  var closestAbsSqMinus11SqMinus1Sq\
    \ = null;\n  var closestAbsSqMinus12Sq = null;\n  var closestAbsSqMinus12SqMinus1\
    \ = null;\n  var closestAbsSqMinus12SqMinus1Sq = null;\n  var closestAbsSqMinus13Sq\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptwcy3jji.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy_kf_g1j.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpy_kf_g1j.js:15:20)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if (difference < .5){\n    return\
    \ value;\n  }\n  else if (difference < 1){\n    return value - 1;\n  }\n  else{\n\
    \    return value - 2;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80d2emcu.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp80d2emcu.js:15:20)\n    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n\
    \    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n\
    \    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n\
    \    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n\
    \    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n    at closest_integer (/tmp/tmp80d2emcu.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < .5){\n    return closest_integer;\n  } else {\n    return\
    \ closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppz8nqud5.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppz8nqud5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  if(value.length == 1){\n    closest = Math.round(value);\n\
    \    diff = value - closest;\n    if(diff < 0){\n      sign = -1;\n    }else{\n\
    \      sign = 1;\n    }\n  }else{\n    closest = Math.round(value);\n    diff\
    \ = value - closest;\n    if(diff < 0){\n      closest = Math.ceil(closest);\n\
    \    }else{\n      closest = Math.floor(closest);\n    }\n  }\n  return sign*closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpv9_ffppl.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv9_ffppl.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value-Math.floor(Math.abs(value))) < 0.0000001){\n    closest =\
    \ Math.floor(value);\n  }else{\n    closest = Math.ceil(Math.abs(value));\n  }\n\
    \  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmprst67oz8.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprst67oz8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxVal;\n    var diffAbsMaxValIndex;\n    var diffAbsMaxValAbs;\n\
    \    var diffAbsMaxValAbsIndex;\n    var diffAbsMaxValAbsIndex2;\n    var diffAbsMaxValAbsIndex3;\n\
    \    var diffAbsMaxValAbsIndex4;\n    var diffAbsMaxValAbsIndex5;\n    var diffAbsMaxValAbsIndex6;\n\
    \    var diffAbsMaxValAbsIndex7;\n    var diffAbsMaxValAbsIndex8;\n    var diffAbsMaxValAbsIndex9;\n\
    \    var diffAbsMaxValAbsIndex10;\n    var diffAbsMaxValAbsIndex11;\n    var diffAbsMaxValAbsIndex12;\n\
    \    var diffAbsMaxValAbsIndex13;\n    var diffAbsMaxValAbsIndex14;\n    var diffAbsMaxValAbsIndex15;\n\
    \    var diffAbsMaxValAbsIndex16;\n    var diffAbsMaxValAbsIndex17;\n    var diffAbsMaxValAbsIndex18;\n\
    \    var diffAbsMaxValAbsIndex19;\n    var diffAbsMaxValAbsIndex20;\n    var diffAbsMaxValAbsIndex21;\n\
    \    var diffAbsMaxValAbsIndex22;\n    var diffAbsMaxValAbsIndex23;\n    var diffAbsMaxValAbsIndex24;\n\
    \    var diffAbsMaxValAbsIndex25;\n    var diffAbsMaxValAbsIndex26;\n    var diffAbsMaxValAbsIndex27;\n\
    \    var diffAbsMaxValAbsIndex28;\n    var diffAbsMaxValAbsIndex29;\n    var diffAbsMaxValAbsIndex30;\n\
    \    var diffAbsMaxValAbsIndex31;\n    var diffAbsMaxValAbsIndex32;\n    var diffAbsMaxValAbsIndex33;\n\
    \    var diffAbsMaxValAbsIndex34;\n    var diffAbsMaxValAbsIndex35;\n    var diffAbsMaxValAbsIndex36;\n\
    \    var diffAbsMaxValAbsIndex37;\n    var diffAbsMaxValAbsIndex38;\n    var diffAbsMaxValAbsIndex39;\n\
    \    var diffAbsMaxValAbsIndex40;\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv6g8gx50.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpofmcp4ix.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference <= 1){\n    return\
    \ value;\n  }\n  else{\n    return value - difference;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3sb1zdw9.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp3sb1zdw9.js:15:20)\n    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n    at closest_integer (/tmp/tmp3sb1zdw9.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = null;\n    var closestDistanceSquared = null;\n\
    \    var closestInteger = null;\n    var closestIntegerDistance = null;\n    var\
    \ closestIntegerDistanceSquared = null;\n    var closestIntegerDistanceSquaredOver2\
    \ = null;\n    var closestIntegerDistanceSquaredOver3 = null;\n    var closestIntegerDistanceSquaredOver4\
    \ = null;\n    var closestIntegerDistanceSquaredOver5 = null;\n    var closestIntegerDistanceSquaredOver6\
    \ = null;\n    var closestIntegerDistanceSquaredOver7 = null;\n    var closestIntegerDistanceSquaredOver8\
    \ = null;\n    var closestIntegerDistanceSquaredOver9 = null;\n    var closestIntegerDistanceSquaredOver10\
    \ = null;\n    var closestIntegerDistanceSquaredOver11 = null;\n    var closestIntegerDistanceSquaredOver12\
    \ = null;\n    var closestIntegerDistanceSquaredOver13 = null;\n    var closestIntegerDistanceSquaredOver14\
    \ = null;\n    var closestIntegerDistanceSquaredOver15 = null;\n    var closestIntegerDistanceSquaredOver16\
    \ = null;\n    var closestIntegerDistanceSquaredOver17 = null;\n    var closestIntegerDistanceSquaredOver18\
    \ = null;\n    var closestIntegerDistanceSquaredOver19 = null;\n    var closestIntegerDistanceSquaredOver20\
    \ = null;\n    var closestIntegerDistanceSquaredOver21 = null;\n    var closestIntegerDistanceSquaredOver22\
    \ = null;\n    var closestIntegerDistanceSquaredOver23 = null;\n    var closestIntegerDistanceSquaredOver24\
    \ = null;\n    var closestIntegerDistanceSquaredOver25 = null;\n    var closestIntegerDistanceSquaredOver26\
    \ = null;\n    var closestIntegerDistanceSquaredOver27 = null;\n    var closestIntegerDistanceSquaredOver28\
    \ = null;\n    var closestIntegerDistanceSquaredOver29 = null;\n    var closestIntegerDistanceSquaredOver30\
    \ = null;\n    var closestIntegerDistanceSquaredOver31 = null;\n    var closestIntegerDistanceSquaredOver32\
    \ = null;\n    var closestIntegerDistanceSquaredOver33 = null;\n    var closestIntegerDistanceSquaredOver34\
    \ = null;\n    var closestIntegerDistanceSquaredOver35 = null;\n    var closestIntegerDistanceSquaredOver36\
    \ = null;\n    var closestIntegerDistanceSquaredOver37 = null;\n    var closestIntegerDistanceSquaredOver38\
    \ = null;\n    var closestIntegerDistanceSquaredOver39 = null;\n    var closestIntegerDistanceSquaredOver40\
    \ = null;\n    var closestIntegerDistanceSquaredOver41 = null;\n    var closestIntegerDistanceSquaredOver42\
    \ = null;\n    var closestIntegerDistanceSquaredOver43 = null;\n    var closestIntegerDistanceSquaredOver44\
    \ = null;\n    var closestIntegerDistanceSquaredOver45 = null;\n    var closestIntegerDistanceSquaredOver46\
    \ = null;\n    var closestIntegerDistanceSquaredOver47 = null;\n    var closestIntegerDistanceSquaredOver48\
    \ = null;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjlt02uwa.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \        closest_integer = Math.round(value);\n    }\n    return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp484fxrp3.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp484fxrp3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) < Math.abs(value - closest)){\n    return closest;\n  }\n  return value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp2pie0bzq.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2pie0bzq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = null;\n  for(var i = 0; i<values.length; i++){\n\
    \    var distance = Math.abs(parseInt(values[i]) - parseInt(value));\n    if(closestDistance\
    \ == null || distance < closestDistance){\n      closest = values[i];\n      closestDistance\
    \ = distance;\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpaiv9gchx.js:17\n  for(var i = 0; i<values.length; i++){\n     \
    \              ^\n\nReferenceError: values is not defined\n    at closest_integer\
    \ (/tmp/tmpaiv9gchx.js:17:20)\n    at test (/tmp/tmpaiv9gchx.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpaiv9gchx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpakpoc4qn.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer;\n\
    \  var closest_integer_value = value;\n  var closest_integer_value_abs = Math.abs(closest_integer_value);\n\
    \  var closest_integer_value_abs = Math.ceil(closest_integer_value_abs);\n  if(closest_integer_value_abs\
    \ == closest_integer_value){\n    closest_integer_value = closest_integer_value_abs;\n\
    \  }\n  else{\n    closest_integer_value = closest_integer_value_abs;\n  }\n \
    \ return closest_integer_value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmprkpzi4jd.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprkpzi4jd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else if (closest_integer < value){\n    return closest_integer;\n  }\n\
    \  else{\n    return closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp6_yckfjq.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6_yckfjq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_tejil47.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if(difference < 0.5){\n    return closest_integer;\n  }\n  else{\n    return\
    \ closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp3e6i6s_c.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3e6i6s_c.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = Math.round(value);\n    if(closest === 0){\n        return closest;\n    }\n\
    \    var difference = Math.abs(value - closest);\n    if(difference <= 0.5){\n\
    \        return closest;\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp4b4mudr_.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4b4mudr_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestDiffAbsAbs;\n \
    \ var closestAbsDiffAbsAbs;\n  var closestDiffAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbs;\n  var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAb\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmproamsg8t.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueValueIndex;\n    var diffAbsMaxValueValueValueValueValue;\n\
    \    var diffAbsMaxValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgs9izqq6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxIndex;\n\
    \  var closestIntegerDiffAbsMaxValue;\n  var closestIntegerDiffAbsMaxValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValueValue;\n  var closestIntegerDiffAbs\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppnuj5to8.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp90k4mp7h.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value) - 1);\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp90s8p49s.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp90s8p49s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  var intValue;\n\n  if(value === null || value ===\
    \ undefined){\n    return null;\n  }\n\n  if(typeof value === \"string\"){\n \
    \   value = parseFloat(value);\n  }\n\n  if(typeof value !== \"number\"){\n  \
    \  return null;\n  }\n\n  if(isNaN(value)){\n    return null;\n  }\n\n  if(value\
    \ === 0){\n    return 0;\n  }\n\n  if(value % 1 !== 0){\n    return null;\n  }\n\
    \n  if(value < 0){\n    abs = Math.abs(value);\n    diff = abs - 1;\n  } else\
    \ {\n    abs = Math.abs(value);\n    diff = abs + 1;\n  }\n\n  if(diff === 0){\n\
    \    return value;\n  }\n\n  intValue = Math.floor(abs);\n\n  if(diff < intValue){\n\
    \    closest = intValue;\n  } else {\n    closest = diff;\n  }\n\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp1895eoav.js:72:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1895eoav.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(value === undefined || value === null){\n    return value;\n  }\n  if(typeof\
    \ value === \"string\"){\n    value = parseFloat(value);\n  }\n  if(typeof value\
    \ !== \"number\"){\n    return value;\n  }\n  if(Math.abs(value) < .0000001){\n\
    \    return value;\n  }\n  if(Math.abs(value) < .0000005){\n    return Math.round(value);\n\
    \  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n\
    \  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value)\
    \ < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n\
    \    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return\
    \ Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n\
    \  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n\
    \  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value)\
    \ < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n\
    \    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return\
    \ Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n\
    \  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n\
    \  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value)\
    \ < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n\
    \    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return\
    \ Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n\
    \  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n\
    \  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value)\
    \ < .0000001){\n    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n\
    \    return Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return\
    \ Math.round(value);\n  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n\
    \  }\n  if(Math.abs(value) < .0000001){\n    return Math.round(value);\n  }\n\
    \  if(Math.abs(value) < .0000001){\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj15eno_o.js:119\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.000000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpr5pk0jx4.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr5pk0jx4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxIndex = null;\n  var diffAbsMaxAbs = null;\n  var diffAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbs = null;\n  var diffAbsMaxAbsIndexAbsMax\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n \
    \ var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppeugvrf6.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference === 0? value : Math.floor(value + difference);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5adia31p.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmp5adia31p.js:15:69)\n    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5adia31p.js:15:37)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps734jk5e.js:76\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var diff = Math.abs(value - closest_integer);\n  if\
    \ (diff < 0.5){\n    return closest_integer;\n  }\n  else {\n    return closest_integer\
    \ - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpv3m70gnt.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv3m70gnt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var intValue;\n    var intValueAbs;\n  \
    \  var intValueDiff;\n    var intValueDiffAbs;\n    var intValueDiffAbsMax;\n\
    \    var intValueDiffAbsMaxIndex;\n    var intValueDiffAbsMaxValue;\n    var intValueDiffAbsMaxValueIndex;\n\
    \    var intValueDiffAbsMaxValueValue;\n    var intValueDiffAbsMaxValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_mqz2_8z.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var sign;\n\n  if(num < 0){\n\
    \    sign = -1;\n    num = Math.abs(num);\n  } else {\n    sign = 1;\n  }\n\n\
    \  diff = num - Math.floor(num);\n  diffAbs = Math.abs(diff);\n\n  if(diffAbs\
    \ < .5){\n    closest = num;\n  } else if(diff < 0){\n    closest = Math.floor(num);\n\
    \  } else {\n    closest = Math.ceil(num);\n  }\n\n  return sign * closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15.3\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpj9969o_1.js:50:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj9969o_1.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15.3,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp90k4mp7h.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference < 1e-6) return\
    \ value;\n  if(difference < 1e-3) return Math.round(value);\n  return Math.floor(value\
    \ + 0.5); // rounding up\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps8058g5i.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmps8058g5i.js:15:20)\n    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n\
    \    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n\
    \    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n\
    \    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n\
    \    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n    at closest_integer (/tmp/tmps8058g5i.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueAbs;\n\
    \  var diffValueAbsMax;\n  var diffValueAbsMaxIndex;\n  var diffValueAbsMaxValue;\n\
    \  var diffValueAbsMin;\n  var diffValueAbsMinIndex;\n  var diffValueAbsMinValue;\n\
    \  var diffValueAbsValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var\
    \ diffValueValueAbs;\n  var diffValueValueAbsMax;\n  var diffValueValueAbsMaxIndex;\n\
    \  var diffValueValueAbsMaxValue;\n  var diffValueValueAbsMin;\n  var diffValueValueAbsMinIndex;\n\
    \  var diffValueValueAbsMinValue;\n  var diffValueValueAbsValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueAbs;\n  var diffValueValueValueAbsMax;\n\
    \  var diffValueValueValueAbsMaxIndex;\n  var diffValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueAbsMin;\n  var diffValueValueValueAbsMinIndex;\n  var\
    \ diffValueValueValueAbsMinValue;\n  var diffValueValueValueAbsValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n\
    \  var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n \
    \ var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw09dg6jj.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  return difference < Number.EPSILON\
    \ ? value : closest_integer(value);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4im1m3cn.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp4im1m3cn.js:15:20)\n    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n\
    \    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n\
    \    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n\
    \    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n\
    \    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n    at closest_integer (/tmp/tmp4im1m3cn.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var closestAbs = null;\n\
    \  var closestDiffAbs = null;\n  var closestDiff = null;\n  var closestDiffAbsSq\
    \ = null;\n  var closestDiffSq = null;\n  var closestDiffSqAbs = null;\n  var\
    \ closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp46u6isvy.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbs2;\n  var closestDiffAbs3;\n  var closestDiffAbs4;\n  var\
    \ closestDiffAbs5;\n  var closestDiffAbs6;\n  var closestDiffAbs7;\n  var closestDiffAbs8;\n\
    \  var closestDiffAbs9;\n  var closestDiffAbs10;\n  var closestDiffAbs11;\n  var\
    \ closestDiffAbs12;\n  var closestDiffAbs13;\n  var closestDiffAbs14;\n  var closestDiffAbs15;\n\
    \  var closestDiffAbs16;\n  var closestDiffAbs17;\n  var closestDiffAbs18;\n \
    \ var closestDiffAbs19;\n  var closestDiffAbs20;\n  var closestDiffAbs21;\n  var\
    \ closestDiffAbs22;\n  var closestDiffAbs23;\n  var closestDiffAbs24;\n  var closestDiffAbs25;\n\
    \  var closestDiffAbs26;\n  var closestDiffAbs27;\n  var closestDiffAbs28;\n \
    \ var closestDiffAbs29;\n  var closestDiffAbs30;\n  var closestDiffAbs31;\n  var\
    \ closestDiffAbs32;\n  var closestDiffAbs33;\n  var closestDiffAbs34;\n  var closestDiffAbs35;\n\
    \  var closestDiffAbs36;\n  var closestDiffAbs37;\n  var closestDiffAbs38;\n \
    \ var closestDiffAbs39;\n  var closestDiffAbs40;\n  var closestDiffAbs41;\n  var\
    \ closestDiffAbs42;\n  var closestDiffAbs43;\n  var closestDiffAbs44;\n  var closestDiffAbs45;\n\
    \  var closestDiffAbs46;\n  var closestDiffAbs47;\n  var closestDiffAbs48;\n \
    \ var closestDiffAbs49;\n  var closestDiffAbs50;\n  var closestDiffAbs51;\n  var\
    \ closestDiffAbs52;\n  var closestDiffAbs53;\n  var closestDiffAbs54;\n  var closestDiffAbs55;\n\
    \  var closestDiffAbs56;\n  var closestDiffAbs57;\n  var closestDiffAbs58;\n \
    \ var closestDiffAbs59;\n  var closestDiffAbs60;\n  var closestDiffAbs61;\n  var\
    \ closestDiffAbs62;\n  var closestDiffAbs63;\n  var closestDiffAbs64;\n  var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfa63wgvg.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqz3shup.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp2sob6f9n.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2sob6f9n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(Math.abs(value - closest) < 0.0000001){\n    return\
    \ closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpnldi7h3v.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnldi7h3v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var difference\
    \ = Math.abs(value - closest_integer(Math.floor(value)));\n    if(difference <\
    \ 0.2){\n        return Math.floor(value);\n    }\n    return Math.ceil(difference);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpups0yhbm.js:15\n    var difference = Math.abs(value - closest_integer(Math.floor(value)));\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpups0yhbm.js:15:22)\n    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n\
    \    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n\
    \    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n\
    \    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n\
    \    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n    at closest_integer (/tmp/tmpups0yhbm.js:15:39)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6hq_6h1c.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqz3shup.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value-Math.floor(value)) < Math.abs(value-Math.ceil(value))){\n\
    \    closest = Math.floor(value);\n  } else {\n    closest = Math.ceil(value);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpsvla9rd7.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvla9rd7.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n \
    \ var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAb\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpghsmur21.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.abs(value)));\n  return difference <\
    \ Number.EPSILON ? value : Math.ceil(difference);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphb6a870a.js:15\n  var difference = Math.abs(value - closest_integer(Math.abs(value)));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmphb6a870a.js:15:20)\n    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n\
    \    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n\
    \    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n\
    \    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n\
    \    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n    at closest_integer (/tmp/tmphb6a870a.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var intValue;\n    var intValueAbs;\n  \
    \  var intValueDiff;\n    var intValueDiffAbs;\n    var intValueDiffAbsMax;\n\
    \    var intValueDiffAbsMaxIndex;\n    var intValueDiffAbsMaxValue;\n    var intValueDiffAbsMaxValueIndex;\n\
    \    var intValueDiffAbsMaxValueValue;\n    var intValueDiffAbsMaxValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\n    var intValueDiffAbsMaxValueValueValueIndex;\n\
    \    var intValueDiffAbsMaxValueValueValueValue;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_mqz2_8z.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffs;\n  var diffsAbs;\n  var diffsAbsMax;\n  var diffsAbsMaxIndex;\n  var\
    \ diffsAbsMaxValue;\n  var diffsAbsMin;\n  var diffsAbsMinIndex;\n  var diffsAbsMinValue;\n\
    \  var diffsAbsValue;\n  var diffsAbsValueIndex;\n  var diffsAbsValueValue;\n\
    \  var diffsAbsValues;\n  var diffsAbsValueSum;\n  var diffsAbsValueSumIndex;\n\
    \  var diffsAbsValueSumValue;\n  var diffsAbsValueSums;\n  var diffsAbs;\n  var\
    \ diffsAbsMax;\n  var diffsAbsMaxIndex;\n  var diffsAbsMaxValue;\n  var diffsAbsMin;\n\
    \  var diffsAbsMinIndex;\n  var diffsAbsMinValue;\n  var diffsAbsValue;\n  var\
    \ diffsAbsValueIndex;\n  var diffsAbsValueValue;\n  var diffsAbsValues;\n  var\
    \ diffsAbsValueSum;\n  var diffsAbsValueSumIndex;\n  var diffsAbsValueSumValue;\n\
    \  var diffsAbsValueSums;\n  var diffsAbsMax;\n  var diffsAbsMaxIndex;\n  var\
    \ diffsAbsMaxValue;\n  var diffsAbsMin;\n  var diffsAbsMinIndex;\n  var diffsAbsMinValue;\n\
    \  var diffsAbsValue;\n  var diffsAbsValueIndex;\n  var diffsAbsValueValue;\n\
    \  var diffsAbsValues;\n  var diffsAbsValueSum;\n  var diffsAbsValueSumIndex;\n\
    \  var diffsAbsValueSumValue;\n  var diffsAbsValueSums;\n  var diffsAbsMax;\n\
    \  var diffsAbsMax\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp026ble7p.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else {\n    return closest_integer;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpmgf2cian.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmgf2cian.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdbm1fxc8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpic4k8i0l.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var diff = Math.abs(num - Math.floor(num));\n  var closest;\n  if (diff < 0.5){\n\
    \    closest = Math.floor(num);\n  }else{\n    closest = Math.ceil(num);\n  }\n\
    \  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpvx63y5q5.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvx63y5q5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(closest\
    \ < 0){\n    return closest;\n  }\n  if(closest > value){\n    return closest;\n\
    \  }\n  if(closest == 0){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    \  if(closest == value){\n    return closest;\n  }\n  if(closest == value){\n\
    \    return closest;\n  }\n  if(closest == value){\n    return closest;\n  }\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp40v_bhqq.js:145\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp30dnhle7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = null;\n  var closestDistanceSquare = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquare = null;\n\
    \  var closestSquareDistanceSquareRoot = null;\n  var closestSquareRootDistance\
    \ = null;\n  var closestSquareRootDistanceSquare = null;\n  var closestSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootDistance = null;\n  var closestRootDistanceSquare\
    \ = null;\n  var closestRootDistanceSquareRoot = null;\n  var closestRootSquareDistance\
    \ = null;\n  var closestRootSquareDistanceSquare = null;\n  var closestRootSquareDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistance = null;\n  var closestRootSquareRootDistanceSquare\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n  var closestRootSquareRootDistanceSquareRoot\
    \ = null;\n  var closestRootSquareRootDistanceSquareRoot = null;\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4zzedxsd.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - Math.floor(value)) < Math.abs(value - Math.ceil(value))){\n\
    \    closest = Math.floor(value);\n  }else{\n    closest = Math.ceil(value);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpxaau4nh_.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxaau4nh_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffValue;\n    var diffValueIndex;\n\
    \    var diffValueValue;\n    var diffValues;\n    var diffValuesIndex;\n    var\
    \ diffValuesValue;\n    var diffValuesMax;\n    var diffValuesMaxIndex;\n    var\
    \ diffValuesMaxValue;\n    var diffValuesMin;\n    var diffValuesMinIndex;\n \
    \   var diffValuesMinValue;\n    var diffValuesValue;\n    var diffValuesValueIndex;\n\
    \    var diffValuesValueValue;\n    var diffValuesValues;\n    var diffValuesValuesIndex;\n\
    \    var diffValuesValuesValue;\n    var diffValuesValuesMax;\n    var diffValuesValuesMaxIndex;\n\
    \    var diffValuesValuesMaxValue;\n    var diffValuesValuesMin;\n    var diffValuesValuesMinIndex;\n\
    \    var diffValuesValuesMinValue;\n    var diffValuesValuesValue;\n    var diffValuesValuesValueIndex;\n\
    \    var diffValuesValuesValueValue;\n    var diffValuesValuesValues;\n    var\
    \ diffValuesValuesValuesIndex;\n    var diffValuesValuesValuesValue;\n    var\
    \ diffValuesValuesValuesMax;\n    var diffValuesValuesValuesMaxIndex;\n    var\
    \ diffValuesValuesValuesMaxValue;\n    var diffValuesValuesValuesMin;\n    var\
    \ diffValuesValuesValuesMinIndex;\n    var diffValuesValuesValuesMinValue;\n \
    \   var diffValuesValuesValuesValue;\n    var diffValuesValuesValuesValueIndex;\n\
    \    var diffValuesValuesValuesValueValue;\n    var diffValuesValuesValuesValues;\n\
    \    var diffValuesValuesValuesValuesIndex;\n    var diffValuesValuesValuesValuesValue;\n\
    \    var diffValuesValuesValuesValuesMax;\n    var diffValuesValuesValuesValuesMaxIndex;\n\
    \    var diffValuesValuesValuesValuesMaxValue;\n    var diffValuesValuesValuesValuesMin;\n\
    \    var diffValuesValuesValuesValuesMinIndex;\n    var diffValuesValuesValuesValuesMinValue;\n\
    \    var diffValuesValuesValuesValuesValue;\n    var diffValuesValuesValuesValuesValueIndex;\n\
    \    var diffValuesValuesValuesValuesValueValue;\n    var diffValuesValuesValuesValuesValues;\n\
    \    var diffValuesValuesValuesValuesValuesIndex;\n    var diffValuesValuesValuesValuesValuesValue;\n\
    \    var diffValuesValuesValuesValuesValuesMax;\n    var diffValuesValuesValuesValuesValuesMaxIndex;\n\
    \    var diffValuesValuesValuesValuesValuesMaxValue;\n    var diffValuesValuesValuesValuesValuesMin;\n\
    \    var diffValuesValuesValuesValuesValuesMinIndex;\n    var diffValuesValuesValuesValuesValuesMinValue;\n\
    \    var diffValuesValuesValuesValues\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5sb3qd5j.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805261
