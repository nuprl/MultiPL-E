name: HumanEval_125_split_words
language: js
prompt: "//Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n// should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>>\
  \ split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
  Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n//\
  \ 3\nfunction split_words(txt){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
  world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
  ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
  \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"\
  !\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
completions: ["\tvar words = txt.split(\" \");\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length>0){\n\t\t\tresult.push(word);\n\t\
    \t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length\
    \ == 0){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(\"\
    \ \");\n\tvar result = [];\n\tvar len = words.length;\n\tvar i = 0;\n\twhile(i\
    \ < len){\n\t\tvar word = words[i];\n\t\tvar index = word.toLowerCase().charCodeAt(0)\
    \ - 96;\n\t\tif(index > 0){\n\t\t\tresult.push(word);\n\t\t\ti++;\n\t\t}else{\n\
    \t\t\tresult.push(word);\n\t\t\ti++;\n\t\t\tlen = words.length;\n\t\t}\n\t}\n\t\
    return result;\n}\n", "  var words = txt.split(/\\s+/);\n  if(words.length ==\
    \ 0){\n    return words;\n  }\n  var letters = words[0].split(/,/);\n  if(letters.length\
    \ == 0){\n    return words;\n  }\n  var letters_count = letters.length;\n  var\
    \ words_count = words.length;\n  var result = [];\n  for(var i=0;i<words_count;i++){\n\
    \    var word = words[i];\n    var letters_count_in_word = letters_count;\n  \
    \  for(var j=0;j<letters_count_in_word;j++){\n      if(word[j].toLowerCase() !=\
    \ word[j].toUpperCase()){\n        letters_count_in_word--;\n      }\n    }\n\
    \    if(letters_count_in_word % 2 != 0){\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result = [];\n\
    \tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar letters\
    \ = word.split('');\n\t\tvar count = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tcount += letters[j].charCodeAt() - ord('a');\n\t\t}\n\t\tif(count%2==1){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(\"\
    \ \");\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word =\
    \ words[i];\n\t\tif(word.length>0){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "    var words = txt.split(/\\s+/);\n    var result = [];\n\
    \    for(var i=0;i<words.length;i++){\n        var word = words[i];\n        var\
    \ count = word.length;\n        while(count){\n            result.push(word.substr(0,count));\n\
    \            word = word.substr(count);\n            count--;\n        }\n   \
    \ }\n    return result;\n}\n", "    var words = txt.split(/\\s+/);\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n", "\tvar words = txt.split(/\\s+/);\n\tvar result = [];\n\
    \tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(!word) continue;\n\
    \t\tvar lower = word.toLowerCase();\n\t\tif(lower.length%2 === 0){\n\t\t\tresult.push(word);\n\
    \t\t}else{\n\t\t\tresult.push(lower);\n\t\t}\n\t}\n\treturn result;\n}\n", "\t\
    var words = txt.split(\" \");\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length == 0){\n\t\t\tcontinue;\n\t\t}\n\t\
    \tvar letters = word.toUpperCase().split(\"\");\n\t\tvar count = 0;\n\t\tfor(var\
    \ j=0;j<letters.length;j++){\n\t\t\tif(letters[j].charCodeAt(0) % 2 != 0){\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count % 2 == 1){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(\" \");\n\tfor(var\
    \ i=0;i<words.length;i++){\n\t\tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\"\
    ,\");\n\t\t}\n\t}\n\treturn words.length;\n}\n", "\tvar words = txt.split(/\\\
    s+/);\n\tfor(var i=0;i<words.length;i++){\n\t\twords[i] = words[i].toLowerCase();\n\
    \t}\n\treturn words;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result = [];\n\
    \tvar count = 0;\n\tfor(var i=0;i<words.length;i++){\n\t\tif(words[i].length>0){\n\
    \t\t\tresult.push(words[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
  "    var words = txt.match(/\\w+/g);\n    if(words === null){\n        words = txt.match(/[^A-Za-z]+/g);\n\
    \    }\n    if(words === null){\n        words = txt.match(/[a-z]+/g);\n    }\n\
    \    if(words === null){\n        words = txt.match(/[A-Z]+/g);\n    }\n    if(words\
    \ === null){\n        words = txt.match(/[!,.?;:]/g);\n    }\n    if(words ===\
    \ null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n\
    \        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n    \
    \    words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n        words\
    \ = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n\
    \    }\n    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n\
    \    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words\
    \ === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words ===\
    \ null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n\
    \        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n    \
    \    words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n        words\
    \ = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n\
    \    }\n    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n\
    \    if(words === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words\
    \ === null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words ===\
    \ null){\n        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n\
    \        words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n    \
    \    words = txt.match(/[,.?;:]/g);\n    }\n    if(words === null){\n", "\tvar\
    \ words = txt.split(/\\s+/);\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(!word) continue;\n\t\tvar letters = word.split('');\n\
    \t\tvar odd_letters = letters.filter(function(letter){\n\t\t\treturn letter !=\
    \ letter.toUpperCase();\n\t\t});\n\t\tif(odd_letters.length % 2 == 1){\n\t\t\t\
    result.push(word);\n\t\t}else{\n\t\t\tresult.push(odd_letters.length);\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result = [];\n\
    \tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\t\
    \t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(/\\\
    s+/);\n\tfor(var i=0;i<words.length;i++){\n\t\twords[i] = words[i].trim();\n\t\
    }\n\treturn words;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result = [];\n\
    \tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar letters\
    \ = word.split('');\n\t\tfor(var j=0;j<letters.length;j++){\n\t\t\tvar letter\
    \ = letters[j];\n\t\t\tif(!isNaN(letter)){\n\t\t\t\tresult.push(letter);\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
