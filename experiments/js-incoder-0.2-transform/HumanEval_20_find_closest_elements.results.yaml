language: js
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n \
    \ assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmrq9kkot.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrq9kkot.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n \
    \ assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmrq9kkot.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrq9kkot.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar closest_number = numbers[0];\n\tvar closest_distance = numbers[1];\n\
    \tvar i;\n\tfor(i = 2; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = numbers[i-1];\n\t\tvar current_difference = Math.abs(current_number\
    \ - closest_number);\n\t\tvar current_closest_difference = Math.abs(current_distance\
    \ - closest_distance);\n\t\tif(current_closest_difference < closest_closest_difference){\n\
    \t\t\tclosest_number = current_number;\n\t\t\tclosest_distance = current_distance;\n\
    \t\t\tclosest_closest_difference = current_closest_difference;\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp10gv3xqi.js:20\n\t\tif(current_closest_difference < closest_closest_difference){\n\
    \t\t                                ^\n\nReferenceError: closest_closest_difference\
    \ is not defined\n    at find_closest_elements (/tmp/tmp10gv3xqi.js:20:35)\n \
    \   at test (/tmp/tmp10gv3xqi.js:36:20)\n    at Object.<anonymous> (/tmp/tmp10gv3xqi.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n \
    \ assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmrq9kkot.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrq9kkot.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var smallest\
    \ = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ === smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i]\
    \ === largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3.9,\n  4,\n  5,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n\
    ]\n    at test (/tmp/tmpyufpp49d.js:30:10)\n    at Object.<anonymous> (/tmp/tmpyufpp49d.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3.9,\
    \ 4, 5, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var results\
    \ = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  results.push(smallest);\n  results.push(largest);\n  return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
    \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n \
    \ assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpb1dag0ew.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb1dag0ew.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest\
    \ = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar closest_numbers\
    \ = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] == smallest){\n\
    \t\t\tclosest_numbers.push(smallest);\n\t\t}else if(numbers[i] == largest){\n\t\
    \t\tclosest_numbers.push(largest);\n\t\t}else{\n\t\t\tvar difference = Math.abs(numbers[i]-smallest);\n\
    \t\t\tvar closest_number = smallest;\n\t\t\tif(difference < Math.abs(numbers[i]-closest_number)){\n\
    \t\t\t\tclosest_number = smallest;\n\t\t\t}else if(difference > Math.abs(numbers[i]-closest_number)){\n\
    \t\t\t\tclosest_number = largest;\n\t\t\t}\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n\
    \  4\n]\n    at test (/tmp/tmp3gx44sbe.js:35:10)\n    at Object.<anonymous> (/tmp/tmp3gx44sbe.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN, NaN, NaN ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest\
    \ = Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\
    \tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] >=\
    \ smallest && numbers[i] <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpd7gwbtva.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd7gwbtva.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\t\tvar index\
    \ = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tresult.push(i);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp3dc03qoz.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3dc03qoz.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] === smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\
    \t\t}\n\t\t\n\t\tif(numbers[i] === largest_number){\n\t\t\tclosest_numbers.push(largest_number);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpynwep5t3.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpynwep5t3.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar closest_numbers_index = 0;\n\tvar closest_number = numbers[0];\n\
    \tvar closest_number_distance = numbers[1] - closest_number;\n\tvar closest_number_difference\
    \ = closest_number_distance;\n\tvar closest_number_previous = closest_number;\n\
    \tvar closest_number_next = closest_number;\n\tvar closest_number_distance = numbers[1]\
    \ - closest_number;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number\
    \ = numbers[i];\n\t\tvar current_number_distance = numbers[i] - current_number;\n\
    \t\tvar current_number_difference = current_number_distance;\n\t\tvar current_number_previous\
    \ = current_number;\n\t\tvar current_number_next = current_number;\n\t\t\n\t\t\
    if(current_number_distance < closest_number_distance){\n\t\t\tclosest_number_previous\
    \ = closest_number;\n\t\t\tclosest_number_next = current_number;\n\t\t\tclosest_number_distance\
    \ = current_number_distance;\n\t\t}\n\t\telse if(current_number_distance > closest_number_distance){\n\
    \t\t\tclosest_number_previous = current_number;\n\t\t\tclosest_number_next = closest_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\telse{\n\t\
    \t\tclosest_number_previous = current_number;\n\t\t\tclosest_number_next = current_number;\n\
    \t\t\tclosest_number_distance = current_number_distance;\n\t\t}\n\t\t\n\t\tclosest_number\
    \ = current_number;\n\t\tclosest_number_difference = current_number_difference;\n\
    \t\tclosest_number_previous = current_number_previous;\n\t\tclosest_number_next\
    \ = current_number_next;\n\t}\n\t\n\tclosest_numbers.push(closest_number_previous);\n\
    \tclosest_numbers.push(closest_number_next);\n\t\n\treturn closest_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
    \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n \
    \ assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.2,\n  2.2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1xr40opv.js:57:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1xr40opv.js:64:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.2, 2.2\
    \ ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] ==\
    \ smallest){\n\t\t\tresult.push(smallest);\n\t\t}else if(numbers[i] == largest){\n\
    \t\t\tresult.push(largest);\n\t\t}else{\n\t\t\tresult.push(numbers[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3.9,\n  4,\n  5,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n\
    ]\n    at test (/tmp/tmpzkoefxhw.js:28:10)\n    at Object.<anonymous> (/tmp/tmpzkoefxhw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3.9,\
    \ 4, 5, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ >= smallest && numbers[i] <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3.9,\n  4,\n  5,\n  2.2\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n\
    ]\n    at test (/tmp/tmp61sx4j7p.js:25:10)\n    at Object.<anonymous> (/tmp/tmp61sx4j7p.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3.9,\
    \ 4, 5, 2.2 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest_diff,\
    \ smallest_diff_index;\n\tvar closest_numbers = [];\n\t\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tvar diff = numbers[i] - numbers[i - 1];\n\t\t\n\t\
    \tif(smallest_diff === undefined || diff < smallest_diff){\n\t\t\tsmallest_diff\
    \ = diff;\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[smallest_diff_index]);\n\
    \tclosest_numbers.push(numbers[smallest_diff_index - 1]);\n\t\n\treturn closest_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
    \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n \
    \ assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.2,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp2uy1_5od.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2uy1_5od.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.2, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var smallest\
    \ = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at\
    \ test (/tmp/tmphppj5ced.js:22:10)\n    at Object.<anonymous> (/tmp/tmphppj5ced.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var smallest\
    \ = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i = smallest; i <= largest; i++){\n    if(numbers.indexOf(i)\
    \ !== -1){\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n \
    \ assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp4i2_3xqk.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4i2_3xqk.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5 ],\n  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n \
    \ assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpmrq9kkot.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrq9kkot.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var smallest_difference\
    \ = Number.MAX_VALUE;\n    var smallest_difference_index = 0;\n    var smallest_number\
    \ = numbers[0];\n    var second_smallest_number = numbers[1];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        var difference = numbers[i] - smallest_number;\n\
    \        if(Math.abs(difference) < smallest_difference){\n            smallest_difference\
    \ = difference;\n            smallest_difference_index = i;\n            smallest_number\
    \ = numbers[i];\n        }\n        else if(difference < 0){\n            second_smallest_number\
    \ = numbers[i];\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
    \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n \
    \ assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmpv3ttgkgq.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv3ttgkgq.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.2, 2 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar smallest_number\
    \ = numbers[0];\n\tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(biggest_number < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3.9,\n  4\n]\n    at test (/tmp/tmp1rzax_04.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1rzax_04.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5 ],\n\
    \  expected: [ 3.9, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n// other and return them in order (smaller\
    \ number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar closest_number;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_index;\n\tvar closest_distance;\n\tvar closest_index;\n\tvar closest_distance;\n\
    \tvar closest_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
    \ 3.1]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjrtmd1iy.js:135\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
