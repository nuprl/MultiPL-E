name: HumanEval_103_rounded_avg
language: js
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
  \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
  \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
  \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
  );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
  \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
  );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
  \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n;\
    \ i <= m; i++){\n    sum += i;\n  }\n  return sum / 2;\n}\n", "    var sum = 0;\n\
    \    var count = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n   \
    \     count++;\n    }\n    return sum/count | 0;\n}\n", "    let sum = 0;\n  \
    \  for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = sum /\
    \ 2;\n    let binary = \"\";\n    for(let i = avg; i >= 0; i--){\n        binary\
    \ += \"1\";\n    }\n    return binary;\n}\n", "    var avg = Math.floor((n+m)/2);\n\
    \    var binary = \"\";\n    while(avg > 0){\n        binary = binary + avg.toString(2);\n\
    \        avg = Math.floor(avg/2);\n    }\n    if(n > m){\n        return -1;\n\
    \    }\n    return binary;\n}\n", "    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    return sum / Math.pow(2, Math.ceil(Math.log2(m)\
    \ - Math.log2(n)));\n}\n", "  let avg = Math.floor((n+m)/2);\n  let binary = \"\
    \";\n  for(let i = avg; i >= n; i--){\n    binary += \"1\";\n  }\n  for(let i\
    \ = avg; i <= m; i++){\n    binary += \"0\";\n  }\n  return binary;\n}\n", " \
    \ if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  var sum = 0;\n  var count = 0;\n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  if(count > 0){\n \
    \   return sum / count;\n  }\n  return -1;\n}\n", "    var result = 0;\n    for(var\
    \ i = n; i <= m; i++){\n        result += i;\n    }\n    return result / Math.pow(2,\
    \ Math.ceil(Math.log2(Math.max(m, n))));\n}\n", "  if(n > m){\n    return -1;\n\
    \  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return\
    \ sum / 2;\n}\n", "  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i\
    \ <= m; i++){\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if(n > m){\n  \
    \  return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum +=\
    \ i;\n  }\n  return sum/(n+m);\n}\n", "  if(n > m){\n    return -1;\n  }\n  let\
    \ sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return sum /\
    \ 2;\n}\n", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i =\
    \ n; i <= m; i++){\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if(n > m)\
    \ return -1;\n  var result = 0;\n  for(var i = n; i <= m; i++){\n    result +=\
    \ i;\n  }\n  return result/(n+m);\n}\n", "    var result = 0;\n    var i = n;\n\
    \    var j = m;\n    while(i <= j){\n        result = result + i;\n        i =\
    \ i + 1;\n    }\n    result = result / 2;\n    result = result.toString(2);\n\
    \    result = result.substr(0, result.length-1);\n    return result;\n}\n", " \
    \   let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return sum / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n",
  "  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return sum\
    \ / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n", "  if(n > m){\n\
    \    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if(n>m) return -1;\n  var sum = 0;\n\
    \  for(var i=n; i<=m; i++){\n    sum += i;\n  }\n  var avg = sum/(n+m);\n  var\
    \ binary = \"\";\n  for(var i=0;i<=n;i++){\n    binary += avg%2;\n    avg = Math.floor(avg/2);\n\
    \  }\n  return binary;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
