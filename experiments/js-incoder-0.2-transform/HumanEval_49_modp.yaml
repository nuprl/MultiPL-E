name: HumanEval_49_modp
language: js
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  var res = 1;\n  while(n){\n    if(n & 1) res = (res * p) % p;\n \
    \   n >>= 1;\n    p >>= 1;\n  }\n  return res;\n}\n", "  var k = Math.pow(2,n)\n\
    \  var m = 1\n  while(m <= p){\n    m *= 2\n    k %= m\n  }\n  return k\n}\n",
  "  var res = 1;\n  while (p){\n    if (n & p){\n      res++;\n      n &= p-1;\n\
    \    }\n    p = p >> 1;\n  }\n  return res;\n}\n", "  var res = 1;\n  while(n){\n\
    \    if(n & 1){\n      res *= p;\n    }\n    n >>>= 1;\n    p >>>= 1;\n  }\n \
    \ return res;\n}\n", "  var res = 1;\n  while(n){\n    if(n & 1){\n      res *=\
    \ p;\n    }\n    n >>>= 1;\n    p *= p;\n  }\n  return res;\n}\n", "  var r =\
    \ n%p;\n  return r === 0 ? r : r+p;\n}\n", "  var r = n%p;\n  return r === 0 ?\
    \ r : r+p;\n}\n", "  var res = 1;\n  while(n){\n    if(n & 1){\n      res = (res\
    \ * p) % p;\n    }\n    n = Math.floor(n / 2);\n    p = p % p;\n  }\n  return\
    \ res;\n}\n", "  var res = 1;\n  while (p){\n    if (n & p){\n      res++;\n \
    \   }\n    n >>>= 1;\n    p >>>= 1;\n  }\n  return res;\n}\n", "  var res = 1;\n\
    \  while(n){\n    if(n & 1){\n      res = (res * p) % p;\n    }\n    n = n >>\
    \ 1;\n  }\n  return res;\n}\n", "  var res = 1;\n  while (p){\n    if (n & p){\n\
    \      res++;\n      n &= p - 1;\n    }\n    p = p >> 1;\n  }\n  return res;\n\
    }\n", "  var r = n%p;\n  return r === 0 ? r : r+p;\n}\n", "  var r = n%p;\n  return\
    \ r<0 ? r + p : r;\n}\n", "  var res = 1;\n  while(n){\n    if(n & 1){\n     \
    \ res *= p;\n    }\n    n >>= 1;\n    p *= p;\n  }\n  return res;\n}\n", "  var\
    \ res = 1;\n  while(n){\n    if(n & 1){\n      res *= p;\n    }\n    n >>>= 1;\n\
    \    p >>>= 1;\n  }\n  return res;\n}\n", "  var res = 1;\n  while(n){\n    if(n\
    \ & 1){\n      res = (res * p + n) % p;\n    }\n    n = Math.floor(n / p);\n \
    \ }\n  return res;\n}\n", "  var i = Math.floor(n/p),\n      mod = n%p;\n  if(mod)\
    \ return mod;\n  else return modp(i, p);\n}\n", "  var r = n%p;\n  return r ===\
    \ 0 ? r : r+p;\n}\n", "  var res = 1;\n  while(n){\n    if(n & 1){\n      res\
    \ = (res * p) % p;\n    }\n    n = Math.floor(n / 2);\n    p = p % p;\n  }\n \
    \ return res;\n}\n", "  var res = 1;\n  while(n){\n    if(n & 1){\n      res =\
    \ (res * p) % p;\n    }\n    n = n >> 1;\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
