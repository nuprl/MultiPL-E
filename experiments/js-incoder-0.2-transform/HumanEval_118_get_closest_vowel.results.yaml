language: js
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    \n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let vowelsCount = vowels.length;\n    \n    let vowelsIndexes\
    \ = [];\n    \n    for(let i = 0; i < vowelsCount; i++){\n        let vowelIndex\
    \ = word.indexOf(vowels[i]);\n        if(vowelIndex > -1){\n            vowelsIndexes.push(i);\n\
    \        }\n    }\n    \n    let vowelsIndexesCount = vowelsIndexes.length;\n\
    \    \n    let vowelsIndexesIndex = 0;\n    \n    for(let i = 0; i < vowelsIndexesCount;\
    \ i++){\n        let vowelIndex = word.indexOf(vowels[vowelsIndexes[vowelsIndexesIndex]]);\n\
    \        if(vowelIndex > -1){\n            vowelsIndexesIndex = i;\n         \
    \   break;\n        }\n    }\n    \n    let vowelsIndexesLast = vowelsIndexes[vowelsIndexesIndex];\n\
    \    \n    let vowelsIndexesLastIndex = word.lastIndexOf(vowels[vowelsIndexesLast]);\n\
    \    \n    let vowelsIndexesLastLength = vowelsIndexesLastIndex - vowelsIndexesIndex;\n\
    \    \n    let vowelsIndexesLastChar = word.charAt(vowelsIndexesLastIndex);\n\
    \    \n    let vowelsIndexesLastCharIndex = word.indexOf(vowels[vowelsIndexesLastChar]);\n\
    \    \n    let vowelsIndexesLastCharLength = vowelsIndexesLastCharIndex - vowelsIndexesLastIndex;\n\
    \    \n    let vowelsIndexesLastCharLength = vowelsIndexesLastChar.length;\n \
    \   \n    let vowelsIndexesLastCharIndex = 0;\n    \n    for(let i = 0; i < vowelsIndexesLastCharLength;\
    \ i++){\n        let vowelIndex = word.indexOf(vowels[vowelsIndexesLastCharIndex]);\n\
    \        if(vowelIndex > -1){\n            vowelsIndexesLastCharIndex = i;\n \
    \           break;\n        }\n    }\n    \n    let vowelsIndexesLastCharIndexLast\
    \ = vowelsIndexesLastCharIndex;\n    \n    let vowelsIndexesLastCharIndexLastLength\
    \ = vowelsIndexesLastCharIndexLast - vowelsIndexesLastIndex;\n    \n    let vowelsIndexesLastCharIndexLastChar\
    \ = word.charAt(vowelsIndexesLastCharIndexLast);\n    \n    let vowelsIndexesLastCharIndexLastCharIndex\
    \ = word.indexOf(vowels[vowelsIndexesLastCharIndexLastChar]);\n    \n    let vowelsIndexesLastCharIndexLastCharLength\
    \ = vowelsIndexesLastCharIndexLastCharIndex - vowelsIndexesLastCharIndexLast;\n\
    \    \n    let vowelsIndexesLast\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz07v1h8w.js:54\n    let vowelsIndexesLastCharLength = vowelsIndexesLastChar.length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexesLastCharLength' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2q4j2uod.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    let consonants\
    \ = word.split(\"\");\n    let consonants_count = consonants.length;\n    let\
    \ consonant_found = false;\n    let consonant_position = 0;\n    let vowel_positions\
    \ = [];\n    let consonant_positions = [];\n    for(let i = 0; i < consonants_count;\
    \ i++){\n        if(vowels.includes(consonants[i])){\n            vowel_found\
    \ = true;\n            vowel_positions.push(i);\n        }\n    }\n    for(let\
    \ i = consonants_count - 1; i >= 0; i--){\n        if(vowels.includes(consonants[i])){\n\
    \            consonant_found = true;\n            consonant_positions.push(i);\n\
    \        }\n    }\n    if(vowel_found && consonant_found){\n        for(let i\
    \ = 0; i < consonant_positions.length; i++){\n            if(vowel_positions[i]\
    \ < consonant_positions[i]){\n                vowel_position = consonant_positions[i];\n\
    \            }\n        }\n    }\n    return vowels[vowel_position];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmprc50vd3q.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprc50vd3q.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    var vowelsCount = vowels.length;\n    var vowelsIndex = 0;\n  \
    \  var vowelsIndexCount = 0;\n    var vowelsIndexCountMax = vowelsCount - 1;\n\
    \    \n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels[vowelsIndex]\
    \ === word[i]){\n            vowelsIndex++;\n            if(vowelsIndex === vowelsCount){\n\
    \                vowelsIndex = 0;\n                vowelsIndexCount++;\n     \
    \           if(vowelsIndexCount === vowelsIndexCountMax){\n                  \
    \  return \"\";\n                }\n            }\n        }\n    }\n    return\
    \ vowels[vowelsIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpxoep1k8i.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxoep1k8i.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let\
    \ vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3\
    \ = vowelsIndexSumCount2 / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3\
    \ / 2;\n    let vowelsIndexSumCount5 = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6\
    \ = vowelsIndexSumCount5 / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6\
    \ / 2;\n    let vowelsIndexSumCount8 = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9\
    \ = vowelsIndexSumCount8 / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9\
    \ / 2;\n    let vowelsIndexSumCount11 = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount11 / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12\
    \ / 2;\n    let vowelsIndexSumCount14 = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount14 / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15\
    \ / 2;\n    let vowelsIndexSumCount17 = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount17 / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18\
    \ / 2;\n    let vowelsIndexSumCount20 = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21\
    \ = vowelsIndexSumCount20 / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21\
    \ / 2;\n    let vowelsIndexSumCount23 = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24\
    \ = vowelsIndexSumCount23 / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24\
    \ / 2;\n    let vowelsIndexSumCount\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvv_9gqw5.js:51\n    let vowelsIndexSumCount\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndexSumCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    \n    let vowels = ['a','e','i','o','u'];\n\
    \    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    \n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        let index = word.indexOf(vowels[i]);\n\
    \        if(index > -1){\n            vowelsIndex.push(index);\n        }\n  \
    \  }\n    \n    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    \n    if(vowelsIndexMin == vowelsIndexMax){\n        return \"\";\n    }\n\
    \    \n    let vowelsIndexMinIndex = 0;\n    for(let i = 0; i < vowelsIndexCount;\
    \ i++){\n        if(vowelsIndexMin == vowelsIndex[i]){\n            vowelsIndexMinIndex\
    \ = i;\n            break;\n        }\n    }\n    \n    let vowelsIndexMaxIndex\
    \ = 0;\n    for(let i = 0; i < vowelsIndexCount; i++){\n        if(vowelsIndexMax\
    \ == vowelsIndex[i]){\n            vowelsIndexMaxIndex = i;\n            break;\n\
    \        }\n    }\n    \n    let vowelsIndexMinValue = vowels[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMaxValue = vowels[vowelsIndexMaxIndex];\n    \n    let vowelsIndexMinIndexValue\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndexValue = vowelsIndex[vowelsIndexMaxIndex];\n\
    \    \n    let vowelsIndexMinValueIndex = vowelsIndex.indexOf(vowelsIndexMinValue);\n\
    \    let vowelsIndexMaxValueIndex = vowelsIndex.indexOf(vowelsIndexMaxValue);\n\
    \    \n    let vowelsIndexMinValueValue = vowels[vowelsIndexMinValueIndex];\n\
    \    let vowelsIndexMaxValueValue = vowels[vowelsIndexMaxValueIndex];\n    \n\
    \    let vowelsIndexMinValueIndexValue = vowelsIndex.indexOf(vowelsIndexMinValueIndex);\n\
    \    let vowelsIndexMaxValueIndexValue = vowelsIndex.indexOf(vowelsIndexMaxValueIndex);\n\
    \    \n    let vowelsIndexMinValueValueIndex = vowelsIndex.indexOf(vowelsIndexMinValueValue);\n\
    \    let vowelsIndexMaxValueValueIndex = vowelsIndex.indexOf(vowelsIndexMaxValueValue);\n\
    \    \n    let vowelsIndexMinValueValueValue = vowels[vowelsIndexMinValueValueIndex];\n\
    \    let vowelsIndexMaxValueValueValue = vowels[vowelsIndexMaxValueValueIndex];\n\
    \    \n    let vowelsIndexMinValueValueIndexValue = vowelsIndex.indexOf(vowelsIndexMinValueValueIndex);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjkm7q6r9.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwkl2dtjq.js:80\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaf1vovi9.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    let vowelsIndexMax = Math.max.apply(null,\
    \ vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMiddle = Math.floor((vowelsIndexMax + vowelsIndexMin)/2);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfveqjmet.js:30\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleInt' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd6f_4ot6.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = [];\n\
    \    let vowelsIndexCountSum = 0;\n    let vowelsIndexSum = 0;\n    let vowelsIndexSumCount\
    \ = 0;\n    let vowelsIndexSumCountSum = 0;\n    let vowelsIndexSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n\
    \    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n    let\
    \ vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpigxnsij7.js:32\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumCountSumCountSumCountSumCountSum'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvqeplmkb.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(word.indexOf(vowels[i]));\n    }\n    let vowelsIndex = vowelsIndex.sort((a,\
    \ b) => a - b);\n    let vowelsIndex = vowelsIndex.reverse();\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkb8jtjwa.js:22\n    let vowelsIndex = vowelsIndex.sort((a, b) =>\
    \ a - b);\n        ^\n\nSyntaxError: Identifier 'vowelsIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"AEIOUaeiou\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = word.length -\
    \ vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = word.length\
    \ - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr_tyzxrf.js:46\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle_to_right\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmm87oy3q.js:41\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count_from_middle + 1;\n\tlet vowels_count_from_middle3\
    \ = vowels_count_from_middle2 + 1;\n\tlet vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + 1;\n\tlet vowels_count_from_middle5 = vowels_count_from_middle4 + 1;\n\tlet\
    \ vowels_count_from_middle6 = vowels_count_from_middle5 + 1;\n\tlet vowels_count_from_middle7\
    \ = vowels_count_from_middle6 + 1;\n\tlet vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + 1;\n\tlet vowels_count_from_middle9 = vowels_count_from_middle8 + 1;\n\tlet\
    \ vowels_count_from_middle10 = vowels_count_from_middle9 + 1;\n\tlet vowels_count_from_middle11\
    \ = vowels_count_from_middle10 + 1;\n\tlet vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + 1;\n\tlet vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n\t\
    let vowels_count_from_middle14 = vowels_count_from_middle13 + 1;\n\tlet vowels_count_from_middle15\
    \ = vowels_count_from_middle14 + 1;\n\tlet vowels_count_from_middle16 = vowels_count_from_middle15\
    \ + 1;\n\tlet vowels_count_from_middle17 = vowels_count_from_middle16 + 1;\n\t\
    let vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n\tlet vowels_count_from_middle19\
    \ = vowels_count_from_middle18 + 1;\n\tlet vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + 1;\n\tlet vowels_count_from_middle21 = vowels_count_from_middle20 + 1;\n\t\
    let vowels_count_from_middle22 = vowels_count_from_middle21 + 1;\n\tlet vowels_count_from_middle23\
    \ = vowels_count_from_middle22 + 1;\n\tlet vowels_count_from_middle24 = vowels_count_from_middle23\
    \ + 1;\n\tlet vowels_count_from_middle25 = vowels_count_from_middle24 + 1;\n\t\
    let vowels_count_from_middle26 = vowels_count_from_middle25 + 1;\n\tlet vowels_count_from_middle27\
    \ = vowels_count_from_middle26 + 1;\n\tlet vowels_count_from_middle28 = vowels_count_from_middle27\
    \ + 1;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppabvg1e1.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = \"aeiouAEIOU\";\n\tlet vowels_count = vowels.length;\n\tlet vowel_positions\
    \ = [];\n\tlet vowel_positions_count = word.length;\n\tlet vowel_positions_sum\
    \ = 0;\n\tlet vowel_positions_sum_count = 0;\n\tlet vowel_positions_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_count = 0;\n\tlet vowel_positions_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_count = 0;\n\tlet vowel_positions_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_count = 0;\n\tlet vowel_positions_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_count = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_count = 0;\n\tlet\
    \ vowel_positions_sum_total_sum_total_sum_total_sum = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total = 0;\n\t\
    let vowel_positions_sum_total_sum_total_sum_total_sum_total_count = 0;\n\tlet\
    \ vowel_positions_sum_total_sum_total_sum_total_sum_total_sum = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpihgkm9d9.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    let vowel_position_count\
    \ = 0;\n    let consonants = word.split(\"\").reverse();\n    for(let i = 0; i\
    \ < consonants.length; i++){\n        if(vowels.includes(consonants[i])){\n  \
    \          vowel_found = true;\n            vowel_position = i;\n            break;\n\
    \        }\n    }\n    if(vowel_found){\n        for(let i = vowel_position; i\
    \ > 0; i--){\n            if(vowels.includes(consonants[i-1])){\n            \
    \    vowel_position_count++;\n            }\n            if(vowel_position_count\
    \ >= vowels_count){\n                return consonants[i-1];\n            }\n\
    \        }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmp6tewxka7.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6tewxka7.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(Math, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc4jj7b4o.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountSum = vowelsIndexCountMax\
    \ + vowelsIndexCountMin;\n    let vowelsIndexCountSumMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSum\
    \ = vowelsIndexCountSumMax + vowelsIndexCountSumMin;\n    let vowelsIndexCountSumSumMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountSumSumMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountSumSumSum = vowelsIndexCountSumSumMax + vowelsIndexCountSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountSumSumSumMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumMax\
    \ + vowelsIndexCountSumSumSumMin;\n    let vowelsIndexCountSumSumSumSumMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumSumMax + vowelsIndexCountSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSumSum\
    \ = vowelsIndexCountSumSumSumSumSumMax + vowelsIndexCountSumSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSumSum\
    \ = vowelsIndexCountSumSumSumSumSumSumMax + vowelsIndexCountSumSumSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowels\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0muo3jpl.js:37\n    let vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumSumMax\
    \ + vowelsIndexCountSumSumSumSumMin;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexCountSumSumSumSum'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(Math, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum;\n    let vowelsIndexSumCount2\
    \ = vowelsIndexSumCount * vowelsIndexSumCount;\n    let vowelsIndexSumCount3 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount2;\n    let vowelsIndexSumCount4 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount3;\n    let vowelsIndexSumCount5 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount4;\n    let vowelsIndexSumCount6 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount5;\n    let vowelsIndexSumCount7 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount6;\n    let vowelsIndexSumCount8 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount7;\n    let vowelsIndexSumCount9 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount8;\n    let vowelsIndexSumCount10 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount9;\n    let vowelsIndexSumCount11 =\
    \ vowelsIndexSumCount * vowelsIndexSumCount10;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount * vowelsIndexSumCount11;\n    let vowelsIndexSumCount13\
    \ = vowelsIndexSumCount * vowelsIndexSumCount12;\n    let vowelsIndexSumCount14\
    \ = vowelsIndexSumCount * vowelsIndexSumCount13;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount * vowelsIndexSumCount14;\n    let vowelsIndexSumCount16\
    \ = vowelsIndexSumCount * vowelsIndexSumCount15;\n    let vowelsIndexSumCount17\
    \ = vowelsIndexSumCount * vowelsIndexSumCount16;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount * vowelsIndexSumCount17;\n    let vowelsIndexSumCount19\
    \ = vowelsIndexSumCount * vowelsIndexSumCount18;\n    let vowelsIndexSumCount20\
    \ = vowelsIndexSumCount * vowelsIndexSumCount19;\n    let vowelsIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpycgukwqs.js:46\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppar14rkj.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp178m4s4f.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2\
    \ = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5\
    \ = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8\
    \ = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11\
    \ = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14\
    \ = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17\
    \ = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20\
    \ = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23\
    \ = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26\
    \ = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29\
    \ = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32\
    \ = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35\
    \ = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38\
    \ = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41\
    \ = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44\
    \ = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47\
    \ = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50\
    \ = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53\
    \ = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56\
    \ = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59\
    \ = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39arzf0q.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_min_index\
    \ = 0;\n    let vowels_index_count_max_index = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index3\
    \ = 0;\n    let vowels_index_count_max_index3 = 0;\n    let vowels_index_count_min_index4\
    \ = 0;\n    let vowels_index_count_max_index4 = 0;\n    let vowels_index_count_min_index5\
    \ = 0;\n    let vowels_index_count_max_index5 = 0;\n    let vowels_index_count_min_index6\
    \ = 0;\n    let vowels_index_count_max_index6 = 0;\n    let vowels_index_count_min_index7\
    \ = 0;\n    let vowels_index_count_max_index7 = 0;\n    let vowels_index_count_min_index8\
    \ = 0;\n    let vowels_index_count_max_index8 = 0;\n    let vowels_index_count_min_index9\
    \ = 0;\n    let vowels_index_count_max_index9 = 0;\n    let vowels_index_count_min_index10\
    \ = 0;\n    let vowels_index_count_max_index10 = 0;\n    let vowels_index_count_min_index11\
    \ = 0;\n    let vowels_index_count_max_index11 = 0;\n    let vowels_index_count_min_index12\
    \ = 0;\n    let vowels_index_count_max_index12 = 0;\n    let vowels_index_count_min_index13\
    \ = 0;\n    let vowels_index_count_max_index13 = 0;\n    let vowels_index_count_min_index14\
    \ = 0;\n    let vowels_index_count_max_index14 = 0;\n    let vowels_index_count_min_index15\
    \ = 0;\n    let vowels_index_count_max_index15 = 0;\n    let vowels_index_count_min_index16\
    \ = 0;\n    let vowels_index_count_max_index16 = 0;\n    let vowels_index_count_min_index17\
    \ = 0;\n    let vowels_index_count_max_index17 = 0;\n    let vowels_index_count_min_index18\
    \ = 0;\n    let vowels_index_count_max_index18 = 0;\n    let vowels_index_count_min_index19\
    \ = 0;\n    let vowels_index_count_max_index19 = 0;\n    let vowels_index_count_min_index20\
    \ = 0;\n    let vowels_index_count_max_index20 = 0;\n    let vowels_index_count_min_index21\
    \ = 0;\n    let vowels_index_count_max_index21 = 0;\n    let vowels_index_count_min_index22\
    \ = 0;\n    let vowels_index_count_max_index22 = 0;\n    let vowels_index_count_min_index23\
    \ = 0;\n    let vowels_index_count_max_index23 = 0;\n    let vowels_index_count_min_index24\
    \ = 0;\n    let vowels_index_count_max_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphprpfx8b.js:69\n    let vowels_index_count_max_index\n        ^\n\
    \nSyntaxError: Identifier 'vowels_index_count_max_index' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowels_count = vowels.length;\n\
    \  let vowels_index = 0;\n  let vowels_index_count = 0;\n  let vowels_index_count_max\
    \ = 0;\n  let vowels_index_count_min = 0;\n  let vowels_index_count_max1 = 0;\n\
    \  let vowels_index_count_min1 = 0;\n  let vowels_index_count_max2 = 0;\n  let\
    \ vowels_index_count_min2 = 0;\n  let vowels_index_count_max3 = 0;\n  let vowels_index_count_min3\
    \ = 0;\n  let vowels_index_count_max4 = 0;\n  let vowels_index_count_min4 = 0;\n\
    \  let vowels_index_count_max5 = 0;\n  let vowels_index_count_min5 = 0;\n  let\
    \ vowels_index_count_max6 = 0;\n  let vowels_index_count_min6 = 0;\n  let vowels_index_count_max7\
    \ = 0;\n  let vowels_index_count_min7 = 0;\n  let vowels_index_count_max8 = 0;\n\
    \  let vowels_index_count_min8 = 0;\n  let vowels_index_count_max9 = 0;\n  let\
    \ vowels_index_count_min9 = 0;\n  let vowels_index_count_max10 = 0;\n  let vowels_index_count_min10\
    \ = 0;\n  let vowels_index_count_max11 = 0;\n  let vowels_index_count_min11 =\
    \ 0;\n  let vowels_index_count_max12 = 0;\n  let vowels_index_count_min12 = 0;\n\
    \  let vowels_index_count_max13 = 0;\n  let vowels_index_count_min13 = 0;\n  let\
    \ vowels_index_count_max14 = 0;\n  let vowels_index_count_min14 = 0;\n  let vowels_index_count_max15\
    \ = 0;\n  let vowels_index_count_min15 = 0;\n  let vowels_index_count_max16 =\
    \ 0;\n  let vowels_index_count_min16 = 0;\n  let vowels_index_count_max17 = 0;\n\
    \  let vowels_index_count_min17 = 0;\n  let vowels_index_count_max18 = 0;\n  let\
    \ vowels_index_count_min18 = 0;\n  let vowels_index_count_max19 = 0;\n  let vowels_index_count_min19\
    \ = 0;\n  let vowels_index_count_max20 = 0;\n  let vowels_index_count_min20 =\
    \ 0;\n  let vowels_index_count_max21 = 0;\n  let vowels_index_count_min21 = 0;\n\
    \  let vowels_index_count_max22 = 0;\n  let vowels_index_count_min22 = 0;\n  let\
    \ vowels_index_count_max23 = 0;\n  let vowels_index_count_min23 = 0;\n  let vowels_index_count_max24\
    \ = 0;\n  let vowels_index_count_min24 = 0;\n  let vowels_index_count_max25 =\
    \ 0;\n  let vowels_index_count_min25 = 0;\n  let vowels_index_count_max26 = 0;\n\
    \  let vowels_index_count_min26 = 0;\n  let vowels_index_count_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqfel33p.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count / 2;\n\tlet vowels_count_from_middle3\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle4 = vowels_count / 2;\n\t\
    let vowels_count_from_middle5 = vowels_count / 2;\n\tlet vowels_count_from_middle6\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle7 = vowels_count / 2;\n\t\
    let vowels_count_from_middle8 = vowels_count / 2;\n\tlet vowels_count_from_middle9\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle10 = vowels_count / 2;\n\t\
    let vowels_count_from_middle11 = vowels_count / 2;\n\tlet vowels_count_from_middle12\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle13 = vowels_count / 2;\n\t\
    let vowels_count_from_middle14 = vowels_count / 2;\n\tlet vowels_count_from_middle15\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle16 = vowels_count / 2;\n\t\
    let vowels_count_from_middle17 = vowels_count / 2;\n\tlet vowels_count_from_middle18\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle19 = vowels_count / 2;\n\t\
    let vowels_count_from_middle20 = vowels_count / 2;\n\tlet vowels_count_from_middle21\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle22 = vowels_count / 2;\n\t\
    let vowels_count_from_middle23 = vowels_count / 2;\n\tlet vowels_count_from_middle24\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle25 = vowels_count / 2;\n\t\
    let vowels_count_from_middle26 = vowels_count / 2;\n\tlet vowels_count_from_middle27\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle28 = vowels_count / 2;\n\t\
    let vowels_count_from_middle29 = vowels_count / 2;\n\tlet vowels_count_from_middle30\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle31 = vowels_count / 2;\n\t\
    let vowels_count_from_middle32 = vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6b9ce_a2.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5bahme78.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowels\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwa34n4rn.js:22\n    let vowelsCount = vowels.length;\n        ^\n\
    \nSyntaxError: Identifier 'vowelsCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeft\
    \ = vowelsCount - 2;\n    let vowelsCountMiddle = vowelsCount - 3;\n    let vowelsCountAll\
    \ = vowelsCountRight + vowelsCountLeft + vowelsCountMiddle;\n    let vowelsCountAllRight\
    \ = vowelsCountRight + vowelsCountLeft;\n    let vowelsCountAllLeft = vowelsCountLeft\
    \ + vowelsCountMiddle;\n    let vowelsCountAllMiddle = vowelsCountMiddle + vowelsCountRight;\n\
    \    let vowelsCountAllAll = vowelsCountAllRight + vowelsCountAllLeft + vowelsCountAllMiddle;\n\
    \    let vowelsCountAllAllRight = vowelsCountAllRight + vowelsCountAllLeft;\n\
    \    let vowelsCountAllAllLeft = vowelsCountAllLeft + vowelsCountAllMiddle;\n\
    \    let vowelsCountAllAllMiddle = vowelsCountAllMiddle + vowelsCountRight;\n\
    \    let vowelsCountAllAllAll = vowelsCountAllAllRight + vowelsCountAllAllLeft\
    \ + vowelsCountAllAllMiddle;\n    let vowelsCountAllAllAllRight = vowelsCountAllAllRight\
    \ + vowelsCountAllAllLeft;\n    let vowelsCountAllAllAllLeft = vowelsCountAllAllLeft\
    \ + vowelsCountAllMiddle;\n    let vowelsCountAllAllAllMiddle = vowelsCountAllMiddle\
    \ + vowelsCountRight;\n    let vowelsCountAllAllAllAll = vowelsCountAllAllAllRight\
    \ + vowelsCountAllAllAllLeft + vowelsCountAllAllMiddle;\n    let vowelsCountAllAllAllAllRight\
    \ = vowelsCountAllAllAllRight + vowelsCountAllAllAllLeft;\n    let vowelsCountAllAllAllAllLeft\
    \ = vowelsCountAllAllAllLeft + vowelsCountAllMiddle;\n    let vowelsCountAllAllAllMiddle\
    \ = vowelsCountAllMiddle + vowelsCountRight;\n    let vowelsCountAllAllAllAll\
    \ = vowelsCountAllAllAllAllRight + vowelsCountAllAllAllAllLeft + vowelsCountAllAllAllMiddle;\n\
    \    let vowelsCountAllAllAllAllRight = vowelsCountAllAllAllAllRight + vowelsCountAllAllAllAllLeft;\n\
    \    let vowelsCountAllAllAllAllLeft = vowelsCountAllAllAllAllLeft + vowels\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsd74ardt.js:36\n    let vowelsCountAllAllAllMiddle = vowelsCountAllMiddle\
    \ + vowelsCountRight;\n        ^\n\nSyntaxError: Identifier 'vowelsCountAllAllAllMiddle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsIndex = [];\n    var vowelsIndexCount = 0;\n    for(var i=0;i<word.length;i++){\n\
    \        if(vowels.indexOf(word[i]) > -1){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount >\
    \ 1){\n        var minIndex = 0;\n        var minDistance = vowelsIndexCount;\n\
    \        for(var i=0;i<vowelsIndex.length;i++){\n            var distance = vowelsIndex[i]\
    \ - vowelsIndex[minIndex];\n            if(distance < minDistance){\n        \
    \        minDistance = distance;\n                minIndex = i;\n            }\n\
    \        }\n        return word[minIndex];\n    }\n    return \"\";\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'y'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmp3ca5njr1.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3ca5njr1.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'y',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index_count = 0;\n    let vowels_index_count_min_index_count\
    \ = 0;\n    let vowels_index_count_min_index_count_max = 0;\n    let vowels_index_count_min_index_count_min\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index = 0;\n    let vowels_index_count_min_index_count_max_index\
    \ = 0;\n    let vowels_index_count_min_index_count_max_index_count = 0;\n    let\
    \ vowels_index_count_min_index_count_min_index_count = 0;\n    let vowels_index_count_min_index_count_min_index_count_max\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min = 0;\n\
    \    let vowels_index_count_min_index_count_min_index_count_max_index = 0;\n \
    \   let vowels_index_count_min_index_count_min_index_count_max_index_count = 0;\n\
    \    let vowels_index_count_min_index_count_min_index_count_min_index = 0;\n \
    \   let vowels_index_count_min_index_count_min_index_count_min_index_count = 0;\n\
    \    let vowels_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_max_index\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_max_index_count\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max_index\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max_index_count\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0;\n    let vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8psmdwg_.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = 0;\n    var vowels_count_from_middle = 0;\n    var vowels_count_from_middle2\
    \ = 0;\n    var vowels_count_from_middle3 = 0;\n    var vowels_count_from_middle4\
    \ = 0;\n    var vowels_count_from_middle5 = 0;\n    var vowels_count_from_middle6\
    \ = 0;\n    var vowels_count_from_middle7 = 0;\n    var vowels_count_from_middle8\
    \ = 0;\n    var vowels_count_from_middle9 = 0;\n    var vowels_count_from_middle10\
    \ = 0;\n    var vowels_count_from_middle11 = 0;\n    var vowels_count_from_middle12\
    \ = 0;\n    var vowels_count_from_middle13 = 0;\n    var vowels_count_from_middle14\
    \ = 0;\n    var vowels_count_from_middle15 = 0;\n    var vowels_count_from_middle16\
    \ = 0;\n    var vowels_count_from_middle17 = 0;\n    var vowels_count_from_middle18\
    \ = 0;\n    var vowels_count_from_middle19 = 0;\n    var vowels_count_from_middle20\
    \ = 0;\n    var vowels_count_from_middle21 = 0;\n    var vowels_count_from_middle22\
    \ = 0;\n    var vowels_count_from_middle23 = 0;\n    var vowels_count_from_middle24\
    \ = 0;\n    var vowels_count_from_middle25 = 0;\n    var vowels_count_from_middle26\
    \ = 0;\n    var vowels_count_from_middle27 = 0;\n    var vowels_count_from_middle28\
    \ = 0;\n    var vowels_count_from_middle29 = 0;\n    var vowels_count_from_middle30\
    \ = 0;\n    var vowels_count_from_middle31 = 0;\n    var vowels_count_from_middle32\
    \ = 0;\n    var vowels_count_from_middle33 = 0;\n    var vowels_count_from_middle34\
    \ = 0;\n    var vowels_count_from_middle35 = 0;\n    var vowels_count_from_middle36\
    \ = 0;\n    var vowels_count_from_middle37 = 0;\n    var vowels_count_from_middle38\
    \ = 0;\n    var vowels_count_from_middle39 = 0;\n    var vowels_count_from_middle40\
    \ = 0;\n    var vowels_count_from_middle41 = 0;\n    var vowels_count_from_middle42\
    \ = 0;\n    var vowels_count_from_middle43 = 0;\n    var vowels_count_from_middle44\
    \ = 0;\n    var vowels_count_from_middle45 = 0;\n    var vowels_count_from_middle46\
    \ = 0;\n    var vowels_count_from_middle47 = 0;\n    var vowels_count_from_middle48\
    \ = 0;\n    var vowels_count_from_middle49 = 0;\n    var vowels_count_from_middle50\
    \ = 0;\n    var vowels_count_from_middle51 = 0;\n    var vowels_count_from_middle52\
    \ = 0;\n    var vowels_count_from_middle53 = 0;\n    var vowels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmi4v2wyx.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  \n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowels_index_count++;\n            if(vowels_index_count > vowels_index_count_max){\n\
    \                vowels_index_count_max = vowels_index_count;\n            }\n\
    \            if(vowels_index_count < vowels_index_count_min){\n              \
    \  vowels_index_count_min = vowels_index_count;\n            }\n        }\n  \
    \  }\n    \n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowels_index++;\n            if(vowels_index > vowels_index_count_max){\n\
    \                vowels_index_count_max = vowels_index;\n            }\n     \
    \       if(vowels_index < vowels_index_count_min){\n                vowels_index_count_min\
    \ = vowels_index;\n            }\n        }\n    }\n    \n    if(vowels_index_count_max\
    \ > vowels_index_count_min){\n        return vowels[vowels_index_count_max - vowels_index_count_min\
    \ + 1];\n    }\n    else{\n        return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpcdehqc74.js:60:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcdehqc74.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnnvkx_xt.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  for(let i = 0; i < vowelsCount; i++){\n    vowelsIndex.push(i);\n\
    \  }\n  let vowelsIndexCount = vowelsIndex.length;\n  let vowelsIndexMax = Math.max.apply(Math,\
    \ vowelsIndex);\n  let vowelsIndexMin = Math.min.apply(Math, vowelsIndex);\n \
    \ let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n  let vowelsIndexSumCount\
    \ = vowelsIndexSum / 2;\n  let vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n\
    \  let vowelsIndexSumCount3 = vowelsIndexSumCount2 / 2;\n  let vowelsIndexSumCount4\
    \ = vowelsIndexSumCount3 / 2;\n  let vowelsIndexSumCount5 = vowelsIndexSumCount4\
    \ / 2;\n  let vowelsIndexSumCount6 = vowelsIndexSumCount5 / 2;\n  let vowelsIndexSumCount7\
    \ = vowelsIndexSumCount6 / 2;\n  let vowelsIndexSumCount8 = vowelsIndexSumCount7\
    \ / 2;\n  let vowelsIndexSumCount9 = vowelsIndexSumCount8 / 2;\n  let vowelsIndexSumCount10\
    \ = vowelsIndexSumCount9 / 2;\n  let vowelsIndexSumCount11 = vowelsIndexSumCount10\
    \ / 2;\n  let vowelsIndexSumCount12 = vowelsIndexSumCount11 / 2;\n  let vowelsIndexSumCount13\
    \ = vowelsIndexSumCount12 / 2;\n  let vowelsIndexSumCount14 = vowelsIndexSumCount13\
    \ / 2;\n  let vowelsIndexSumCount15 = vowelsIndexSumCount14 / 2;\n  let vowelsIndexSumCount16\
    \ = vowelsIndexSumCount15 / 2;\n  let vowelsIndexSumCount17 = vowelsIndexSumCount16\
    \ / 2;\n  let vowelsIndexSumCount18 = vowelsIndexSumCount17 / 2;\n  let vowelsIndexSumCount19\
    \ = vowelsIndexSumCount18 / 2;\n  let vowelsIndexSumCount20 = vowelsIndexSumCount19\
    \ / 2;\n  let vowelsIndexSumCount21 = vowelsIndexSumCount20 / 2;\n  let vowelsIndexSumCount22\
    \ = vowelsIndexSumCount21 / 2;\n  let vowelsIndexSumCount23 = vowelsIndexSumCount22\
    \ / 2;\n  let vowelsIndexSumCount24 = vowelsIndexSumCount23 / 2;\n  let vowelsIndexSumCount25\
    \ = vowelsIndexSumCount24 / 2;\n  let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmqt0airl.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCount2 = vowelsIndexCount-1;\n    let vowelsIndexCount3 =\
    \ vowelsIndexCount-2; \n    let vowelsIndexCount4 = vowelsIndexCount-3;\n    let\
    \ vowelsIndexCount5 = vowelsIndexCount-4;\n    let vowelsIndexCount6 = vowelsIndexCount-5;\n\
    \    let vowelsIndexCount7 = vowelsIndexCount-6;\n    let vowelsIndexCount8 =\
    \ vowelsIndexCount-7;\n    let vowelsIndexCount9 = vowelsIndexCount-8;\n    let\
    \ vowelsIndexCount10 = vowelsIndexCount-9;\n    let vowelsIndexCount11 = vowelsIndexCount-10;\n\
    \    let vowelsIndexCount12 = vowelsIndexCount-11;\n    let vowelsIndexCount13\
    \ = vowelsIndexCount-12;\n    let vowelsIndexCount14 = vowelsIndexCount-13;\n\
    \    let vowelsIndexCount15 = vowelsIndexCount-14;\n    let vowelsIndexCount16\
    \ = vowelsIndexCount-15;\n    let vowelsIndexCount17 = vowelsIndexCount-16;\n\
    \    let vowelsIndexCount18 = vowelsIndexCount-17;\n    let vowelsIndexCount19\
    \ = vowelsIndexCount-18;\n    let vowelsIndexCount20 = vowelsIndexCount-19;\n\
    \    let vowelsIndexCount21 = vowelsIndexCount-20;\n    let vowelsIndexCount22\
    \ = vowelsIndexCount-21;\n    let vowelsIndexCount23 = vowelsIndexCount-22;\n\
    \    let vowelsIndexCount24 = vowelsIndexCount-23;\n    let vowelsIndexCount25\
    \ = vowelsIndexCount-24;\n    let vowelsIndexCount26 = vowelsIndexCount-25;\n\
    \    let vowelsIndexCount27 = vowelsIndexCount-26; \n    let vowelsIndexCount28\
    \ = vowelsIndexCount-27;\n    let vowelsIndexCount29 = vowelsIndexCount-28;\n\
    \    let vowelsIndexCount30 = vowelsIndexCount-29;\n    let vowelsIndexCount31\
    \ = vowelsIndexCount-30;\n    let vowelsIndexCount32 = vowelsIndexCount-31;\n\
    \    let vowelsIndexCount33 = vowelsIndexCount-32;\n    let vowelsIndexCount34\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcq02v8hw.js:56\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n\
    \    }\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexMiddle = Math.floor(vowelsIndexMax\
    \ / 2);\n    let vowelsIndexMiddle2 = vowelsIndexMiddle + 1;\n    let vowelsIndexMiddle3\
    \ = vowelsIndexMiddle + 2;\n    let vowelsIndexMiddle4 = vowelsIndexMiddle + 3;\n\
    \    let vowelsIndexMiddle5 = vowelsIndexMiddle + 4;\n    let vowelsIndexMiddle6\
    \ = vowelsIndexMiddle + 5;\n    let vowelsIndexMiddle7 = vowelsIndexMiddle + 6;\n\
    \    let vowelsIndexMiddle8 = vowelsIndexMiddle + 7;\n    let vowelsIndexMiddle9\
    \ = vowelsIndexMiddle + 8;\n    let vowelsIndexMiddle10 = vowelsIndexMiddle +\
    \ 9;\n    let vowelsIndexMiddle11 = vowelsIndexMiddle + 10;\n    let vowelsIndexMiddle12\
    \ = vowelsIndexMiddle + 11;\n    let vowelsIndexMiddle13 = vowelsIndexMiddle +\
    \ 12;\n    let vowelsIndexMiddle14 = vowelsIndexMiddle + 13;\n    let vowelsIndexMiddle15\
    \ = vowelsIndexMiddle + 14;\n    let vowelsIndexMiddle16 = vowelsIndexMiddle +\
    \ 15;\n    let vowelsIndexMiddle17 = vowelsIndexMiddle + 16;\n    let vowelsIndexMiddle18\
    \ = vowelsIndexMiddle + 17;\n    let vowelsIndexMiddle19 = vowelsIndexMiddle +\
    \ 18;\n    let vowelsIndexMiddle20 = vowelsIndexMiddle + 19;\n    let vowelsIndexMiddle21\
    \ = vowelsIndexMiddle + 20;\n    let vowelsIndexMiddle22 = vowelsIndexMiddle +\
    \ 21;\n    let vowelsIndexMiddle23 = vowelsIndexMiddle + 22;\n    let vowelsIndexMiddle24\
    \ = vowelsIndexMiddle + 23;\n    let vowelsIndexMiddle25 = vowelsIndexMiddle +\
    \ 24;\n    let vowelsIndexMiddle26 = vowelsIndexMiddle + 25;\n    let vowelsIndexMiddle27\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbdk8hnkt.js:55\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsIndex = [];\n    for(var i=0; i<vowelsCount; i++){\n        vowelsIndex.push(vowels.indexOf(i));\n\
    \    }\n    var vowelsCount = vowelsIndex.length;\n    var vowelsIndexMin = Math.min.apply(Math,\
    \ vowelsIndex);\n    var vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n\
    \    var vowelsIndexMin = vowelsIndexMin + 1;\n    var vowelsIndexMax = vowelsIndexMax\
    \ + 1;\n    var vowelsIndexMin = vowelsIndexMin - 1;\n    var vowelsIndexMax =\
    \ vowelsIndexMax - 1;\n    var vowelsIndexMin = vowelsIndexMin + 1;\n    var vowelsIndexMax\
    \ = vowelsIndexMax + 1;\n    var vowelsIndexMin = vowelsIndexMin - 1;\n    var\
    \ vowelsIndexMax = vowelsIndexMax - 1;\n    var vowelsIndexMin = vowelsIndexMin\
    \ + 1;\n    var vowelsIndexMax = vowelsIndexMax + 1;\n    var vowelsIndexMin =\
    \ vowelsIndexMin - 1;\n    var vowelsIndexMax = vowelsIndexMax - 1;\n    var vowelsIndexMin\
    \ = vowelsIndexMin + 1;\n    var vowelsIndexMax = vowelsIndexMax + 1;\n    var\
    \ vowelsIndexMin = vowelsIndexMin - 1;\n    var vowelsIndexMax = vowelsIndexMax\
    \ - 1;\n    var vowelsIndexMin = vowelsIndexMin + 1;\n    var vowelsIndexMax =\
    \ vowelsIndexMax + 1;\n    var vowelsIndexMin = vowelsIndexMin - 1;\n    var vowelsIndexMax\
    \ = vowelsIndexMax - 1;\n    var vowelsIndexMin = vowelsIndexMin + 1;\n    var\
    \ vowelsIndexMax = vowelsIndexMax + 1;\n    var vowelsIndexMin = vowelsIndexMin\
    \ - 1;\n    var vowelsIndexMax = vowelsIndexMax - 1;\n    var vowelsIndexMin =\
    \ vowelsIndexMin + 1;\n    var vowelsIndexMax = vowelsIndexMax + 1;\n    var vowelsIndexMin\
    \ = vowelsIndexMin - 1;\n    var vowelsIndexMax = vowelsIndexMax - 1;\n    var\
    \ vowelsIndexMin = vowelsIndexMin + 1;\n    var vowelsIndexMax = vowelsIndexMax\
    \ + 1;\n    var vowelsIndexMin = vowelsIndexMin - 1;\n    var vowelsIndexMax =\
    \ vowelsIndexMax - 1;\n    var vowelsIndexMin = vowelsIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn204aohc.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv4z2yrhj.js:64\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n    let vowelsCountMin\
    \ = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndexIndex = 0;\n\
    \    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexMax = 0;\n\
    \    let vowelsCountMaxIndexMin = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n\
    \    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMaxIndexMinIndex = 0;\n    let vowelsCountMinIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpta16id42.js:30\n    let vowelsCountMinIndexMaxIndex = 0;\n    \
    \    ^\n\nSyntaxError: Identifier 'vowelsCountMinIndexMaxIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_count = vowels.length;\n\
    \  let vowels_count_from_right = vowels_count - 1;\n  let vowels_count_from_left\
    \ = vowels_count - 2;\n  let vowels_count_from_middle = vowels_count - 3;\n  let\
    \ vowels_count_from_middle2 = vowels_count - 4;\n  let vowels_count_from_middle3\
    \ = vowels_count - 5;\n  let vowels_count_from_middle4 = vowels_count - 6;\n \
    \ let vowels_count_from_middle5 = vowels_count - 7;\n  let vowels_count_from_middle6\
    \ = vowels_count - 8;\n  let vowels_count_from_middle7 = vowels_count - 9;\n \
    \ let vowels_count_from_middle8 = vowels_count - 10;\n  let vowels_count_from_middle9\
    \ = vowels_count - 11;\n  let vowels_count_from_middle10 = vowels_count - 12;\n\
    \  let vowels_count_from_middle11 = vowels_count - 13;\n  let vowels_count_from_middle12\
    \ = vowels_count - 14;\n  let vowels_count_from_middle13 = vowels_count - 15;\n\
    \  let vowels_count_from_middle14 = vowels_count - 16;\n  let vowels_count_from_middle15\
    \ = vowels_count - 17;\n  let vowels_count_from_middle16 = vowels_count - 18;\n\
    \  let vowels_count_from_middle17 = vowels_count - 19;\n  let vowels_count_from_middle18\
    \ = vowels_count - 20;\n  let vowels_count_from_middle19 = vowels_count - 21;\n\
    \  let vowels_count_from_middle20 = vowels_count - 22;\n  let vowels_count_from_middle21\
    \ = vowels_count - 23;\n  let vowels_count_from_middle22 = vowels_count - 24;\n\
    \  let vowels_count_from_middle23 = vowels_count - 25;\n  let vowels_count_from_middle24\
    \ = vowels_count - 26;\n  let vowels_count_from_middle25 = vowels_count - 27;\n\
    \  let vowels_count_from_middle26 = vowels_count - 28;\n  let vowels_count_from_middle27\
    \ = vowels_count - 29;\n  let vowels_count_from_middle28 = vowels_count - 30;\n\
    \  let vowels_count_from_middle29 = vowels_count - 31;\n  let vowels_count_from_middle30\
    \ = vowels_count - 32;\n  let vowels_count_from_middle31 = vowels_count - 33;\n\
    \  let vowels_count_from_middle32 = vowels_count - 34;\n  let vowels_count_from_middle33\
    \ = vowels_count - 35;\n  let \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvsklwhy2.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = 0;\n    var vowels_count_from_middle = 0;\n\
    \    var vowels_count_from_middle2 = 0;\n    var vowels_count_from_middle3 = 0;\n\
    \    var vowels_count_from_middle4 = 0;\n    var vowels_count_from_middle5 = 0;\n\
    \    var vowels_count_from_middle6 = 0;\n    var vowels_count_from_middle7 = 0;\n\
    \    var vowels_count_from_middle8 = 0;\n    var vowels_count_from_middle9 = 0;\n\
    \    var vowels_count_from_middle10 = 0;\n    var vowels_count_from_middle11 =\
    \ 0;\n    var vowels_count_from_middle12 = 0;\n    var vowels_count_from_middle13\
    \ = 0;\n    var vowels_count_from_middle14 = 0;\n    var vowels_count_from_middle15\
    \ = 0;\n    var vowels_count_from_middle16 = 0;\n    var vowels_count_from_middle17\
    \ = 0;\n    var vowels_count_from_middle18 = 0;\n    var vowels_count_from_middle19\
    \ = 0;\n    var vowels_count_from_middle20 = 0;\n    var vowels_count_from_middle21\
    \ = 0;\n    var vowels_count_from_middle22 = 0;\n    var vowels_count_from_middle23\
    \ = 0;\n    var vowels_count_from_middle24 = 0;\n    var vowels_count_from_middle25\
    \ = 0;\n    var vowels_count_from_middle26 = 0;\n    var vowels_count_from_middle27\
    \ = 0;\n    var vowels_count_from_middle28 = 0;\n    var vowels_count_from_middle29\
    \ = 0;\n    var vowels_count_from_middle30 = 0;\n    var vowels_count_from_middle31\
    \ = 0;\n    var vowels_count_from_middle32 = 0;\n    var vowels_count_from_middle33\
    \ = 0;\n    var vowels_count_from_middle34 = 0;\n    var vowels_count_from_middle35\
    \ = 0;\n    var vowels_count_from_middle36 = 0;\n    var vowels_count_from_middle37\
    \ = 0;\n    var vowels_count_from_middle38 = 0;\n    var vowels_count_from_middle39\
    \ = 0;\n    var vowels_count_from_middle40 = 0;\n    var vowels_count_from_middle41\
    \ = 0;\n    var vowels_count_from_middle42 = 0;\n    var vowels_count_from_middle43\
    \ = 0;\n    var vowels_count_from_middle44 = 0;\n    var vowels_count_from_middle45\
    \ = 0;\n    var vowels_count_from_middle46 = 0;\n    var vowels_count_from_middle47\
    \ = 0;\n    var vowels_count_from_middle48 = 0;\n    var vowels_count_from_middle49\
    \ = 0;\n    var vowels_count_from_middle50 = 0;\n    var vowels_count_from_middle51\
    \ = 0;\n    var vowels_count_from_middle52 = 0;\n    var vowels_count_from_middle53\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw3i2_hl8.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowel_found = false;\n    var vowel_found_index = 0;\n\
    \    var vowel_found_index2 = 0;\n    var vowel_found_index3 = 0;\n    var vowel_found_index4\
    \ = 0;\n    var vowel_found_index5 = 0;\n    var vowel_found_index6 = 0;\n   \
    \ var vowel_found_index7 = 0;\n    var vowel_found_index8 = 0;\n    var vowel_found_index9\
    \ = 0;\n    var vowel_found_index10 = 0;\n    var vowel_found_index11 = 0;\n \
    \   var vowel_found_index12 = 0;\n    var vowel_found_index13 = 0;\n    var vowel_found_index14\
    \ = 0;\n    var vowel_found_index15 = 0;\n    var vowel_found_index16 = 0;\n \
    \   var vowel_found_index17 = 0;\n    var vowel_found_index18 = 0;\n    var vowel_found_index19\
    \ = 0;\n    var vowel_found_index20 = 0;\n    var vowel_found_index21 = 0;\n \
    \   var vowel_found_index22 = 0;\n    var vowel_found_index23 = 0;\n    var vowel_found_index24\
    \ = 0;\n    var vowel_found_index25 = 0;\n    var vowel_found_index26 = 0;\n \
    \   var vowel_found_index27 = 0;\n    var vowel_found_index28 = 0;\n    var vowel_found_index29\
    \ = 0;\n    var vowel_found_index30 = 0;\n    var vowel_found_index31 = 0;\n \
    \   var vowel_found_index32 = 0;\n    var vowel_found_index33 = 0;\n    var vowel_found_index34\
    \ = 0;\n    var vowel_found_index35 = 0;\n    var vowel_found_index36 = 0;\n \
    \   var vowel_found_index37 = 0;\n    var vowel_found_index38 = 0;\n    var vowel_found_index39\
    \ = 0;\n    var vowel_found_index40 = 0;\n    var vowel_found_index41 = 0;\n \
    \   var vowel_found_index42 = 0;\n    var vowel_found_index43 = 0;\n    var vowel_found_index44\
    \ = 0;\n    var vowel_found_index45 = 0;\n    var vowel_found_index46 = 0;\n \
    \   var vowel_found_index47 = 0;\n    var vowel_found_index48 = 0;\n    var vowel_found_index49\
    \ = 0;\n    var vowel_found_index50 = 0;\n    var vowel_found_index51 = 0;\n \
    \   var vowel_found_index52 = 0;\n    var vowel_found_index53 = 0;\n    var vowel_found_index54\
    \ = 0;\n    var vowel_found_index55 = 0;\n    var vowel_found_index56 = 0;\n \
    \   var vowel_found_index57 = 0;\n    var vowel_found_index58 = 0;\n    var vowel_found_index59\
    \ = 0;\n    var vowel_found_index60 = 0;\n    var vowel_found_index61 = 0;\n \
    \   var vowel_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdfmuq6mn.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsIndex = 0;\n    var vowelsCountIndex = 0;\n    var vowelsCountMinusOne\
    \ = vowelsCount - 1;\n    var vowelsCountMinusTwo = vowelsCount - 2;\n    var\
    \ vowelsCountMinusThree = vowelsCount - 3;\n    var vowelsCountMinusFour = vowelsCount\
    \ - 4;\n    var vowelsCountMinusFive = vowelsCount - 5;\n    var vowelsCountMinusSix\
    \ = vowelsCount - 6;\n    var vowelsCountMinusSeven = vowelsCount - 7;\n    var\
    \ vowelsCountMinusEight = vowelsCount - 8;\n    var vowelsCountMinusNine = vowelsCount\
    \ - 9;\n    var vowelsCountMinusTen = vowelsCount - 10;\n    var vowelsCountMinusEleven\
    \ = vowelsCount - 11;\n    var vowelsCountMinusTwelve = vowelsCount - 12;\n  \
    \  var vowelsCountMinusThirteen = vowelsCount - 13;\n    var vowelsCountMinusFourteen\
    \ = vowelsCount - 14;\n    var vowelsCountMinusFifteen = vowelsCount - 15;\n \
    \   var vowelsCountMinusSixteen = vowelsCount - 16;\n    var vowelsCountMinusSeventeen\
    \ = vowelsCount - 17;\n    var vowelsCountMinusEighteen = vowelsCount - 18;\n\
    \    var vowelsCountMinusNineteen = vowelsCount - 19;\n    var vowelsCountMinusTwenty\
    \ = vowelsCount - 20;\n    var vowelsCountMinusTwentyOne = vowelsCount - 21;\n\
    \    var vowelsCountMinusTwentyTwo = vowelsCount - 22;\n    var vowelsCountMinusTwentyThree\
    \ = vowelsCount - 23;\n    var vowelsCountMinusTwentyFour = vowelsCount - 24;\n\
    \    var vowelsCountMinusTwentyFive = vowelsCount - 25;\n    var vowelsCountMinusTwentySix\
    \ = vowelsCount - 26;\n    var vowelsCountMinusTwentySeven = vowelsCount - 27;\n\
    \    var vowelsCountMinusTwentyEight = vowelsCount - 28;\n    var vowelsCountMinusTwentyNine\
    \ = vowelsCount - 29;\n    var vowelsCountMinusTwenty\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr2wqovf6.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount >\
    \ 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n        let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n        let vowelsIndexMiddle = Math.floor(vowelsIndexCount\
    \ / 2);\n        let vowelsIndexMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddle));\n\
    \        let vowelsIndexMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddle));\n\
    \        let vowelsIndexMiddleMiddle = Math.floor(vowelsIndexMiddle / 2);\n  \
    \      let vowelsIndexMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddle\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvcopsrki.js:38\n        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n            ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleMiddleMiddle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv4z2yrhj.js:64\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_found = 0;\n    var vowels_found_count = 0;\n\
    \    var vowels_found_index = 0;\n    var vowels_found_index2 = 0;\n    var vowels_found_index3\
    \ = 0;\n    var vowels_found_index4 = 0;\n    var vowels_found_index5 = 0;\n \
    \   var vowels_found_index6 = 0;\n    var vowels_found_index7 = 0;\n    var vowels_found_index8\
    \ = 0;\n    var vowels_found_index9 = 0;\n    var vowels_found_index10 = 0;\n\
    \    var vowels_found_index11 = 0;\n    var vowels_found_index12 = 0;\n    var\
    \ vowels_found_index13 = 0;\n    var vowels_found_index14 = 0;\n    var vowels_found_index15\
    \ = 0;\n    var vowels_found_index16 = 0;\n    var vowels_found_index17 = 0;\n\
    \    var vowels_found_index18 = 0;\n    var vowels_found_index19 = 0;\n    var\
    \ vowels_found_index20 = 0;\n    var vowels_found_index21 = 0;\n    var vowels_found_index22\
    \ = 0;\n    var vowels_found_index23 = 0;\n    var vowels_found_index24 = 0;\n\
    \    var vowels_found_index25 = 0;\n    var vowels_found_index26 = 0;\n    var\
    \ vowels_found_index27 = 0;\n    var vowels_found_index28 = 0;\n    var vowels_found_index29\
    \ = 0;\n    var vowels_found_index30 = 0;\n    var vowels_found_index31 = 0;\n\
    \    var vowels_found_index32 = 0;\n    var vowels_found_index33 = 0;\n    var\
    \ vowels_found_index34 = 0;\n    var vowels_found_index35 = 0;\n    var vowels_found_index36\
    \ = 0;\n    var vowels_found_index37 = 0;\n    var vowels_found_index38 = 0;\n\
    \    var vowels_found_index39 = 0;\n    var vowels_found_index40 = 0;\n    var\
    \ vowels_found_index41 = 0;\n    var vowels_found_index42 = 0;\n    var vowels_found_index43\
    \ = 0;\n    var vowels_found_index44 = 0;\n    var vowels_found_index45 = 0;\n\
    \    var vowels_found_index46 = 0;\n    var vowels_found_index47 = 0;\n    var\
    \ vowels_found_index48 = 0;\n    var vowels_found_index49 = 0;\n    var vowels_found_index50\
    \ = 0;\n    var vowels_found_index51 = 0;\n    var vowels_found_index52 = 0;\n\
    \    var vowels_found_index53 = 0;\n    var vowels_found_index54 = 0;\n    var\
    \ vowels_found_index55 = 0;\n    var vowels_found_index56 = 0;\n    var vowels_found_index57\
    \ = 0;\n    var vowels_found_index58 = 0;\n    var vowels_found_index59 = 0;\n\
    \    var vowels_found_index60 = 0;\n    var vowels_found_index\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3nwbcy7t.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max_min\
    \ = 0;\n    var vowels_index_count_max_min_index = 0;\n    var vowels_index_count_max_min_index2\
    \ = 0;\n    var vowels_index_count_max_min_index3 = 0;\n    var vowels_index_count_max_min_index4\
    \ = 0;\n    var vowels_index_count_max_min_index5 = 0;\n    var vowels_index_count_max_min_index6\
    \ = 0;\n    var vowels_index_count_max_min_index7 = 0;\n    var vowels_index_count_max_min_index8\
    \ = 0;\n    var vowels_index_count_max_min_index9 = 0;\n    var vowels_index_count_max_min_index10\
    \ = 0;\n    var vowels_index_count_max_min_index11 = 0;\n    var vowels_index_count_max_min_index12\
    \ = 0;\n    var vowels_index_count_max_min_index13 = 0;\n    var vowels_index_count_max_min_index14\
    \ = 0;\n    var vowels_index_count_max_min_index15 = 0;\n    var vowels_index_count_max_min_index16\
    \ = 0;\n    var vowels_index_count_max_min_index17 = 0;\n    var vowels_index_count_max_min_index18\
    \ = 0;\n    var vowels_index_count_max_min_index19 = 0;\n    var vowels_index_count_max_min_index20\
    \ = 0;\n    var vowels_index_count_max_min_index21 = 0;\n    var vowels_index_count_max_min_index22\
    \ = 0;\n    var vowels_index_count_max_min_index23 = 0;\n    var vowels_index_count_max_min_index24\
    \ = 0;\n    var vowels_index_count_max_min_index25 = 0;\n    var vowels_index_count_max_min_index26\
    \ = 0;\n    var vowels_index_count_max_min_index27 = 0;\n    var vowels_index_count_max_min_index28\
    \ = 0;\n    var vowels_index_count_max_min_index29 = 0;\n    var vowels_index_count_max_min_index30\
    \ = 0;\n    var vowels_index_count_max_min_index31 = 0;\n    var vowels_index_count_max_min_index32\
    \ = 0;\n    var vowels_index_count_max_min_index33 = 0;\n    var vowels_index_count_max_min_index34\
    \ = 0;\n    var vowels_index_count_max_min_index35 = 0;\n    var vowels_index_count_max_min_index36\
    \ = 0;\n    var vowels_index_count_max_min_index37 = 0;\n    var vowels_index_count_max_min_index38\
    \ = 0;\n    var vowels_index_count_max_min_index39 = 0;\n    var vowels_index_count_max_min_index40\
    \ = 0;\n    var vowels_index_count_max_min_index41 = 0;\n    var vowels_index_count_max_min_index42\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_n2ja0k2.js:85\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = vowelsIndex[0];\n    let vowelsIndexMax = vowelsIndex[vowelsCount\
    \ - 1];\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex2\
    \ = vowelsIndex.indexOf(vowelsIndexMin - 1);\n    let vowelsIndexMaxIndex2 = vowelsIndex.indexOf(vowelsIndexMax\
    \ + 1);\n    let vowelsIndexMinIndex3 = vowelsIndex.indexOf(vowelsIndexMin - 2);\n\
    \    let vowelsIndexMaxIndex3 = vowelsIndex.indexOf(vowelsIndexMax + 2);\n   \
    \ let vowelsIndexMinIndex4 = vowelsIndex.indexOf(vowelsIndexMin - 3);\n    let\
    \ vowelsIndexMaxIndex4 = vowelsIndex.indexOf(vowelsIndexMax + 3);\n    let vowelsIndexMinIndex5\
    \ = vowelsIndex.indexOf(vowelsIndexMin - 4);\n    let vowelsIndexMaxIndex5 = vowelsIndex.indexOf(vowelsIndexMax\
    \ + 4);\n    let vowelsIndexMinIndex6 = vowelsIndex.indexOf(vowelsIndexMin - 5);\n\
    \    let vowelsIndexMaxIndex6 = vowelsIndex.indexOf(vowelsIndexMax + 5);\n   \
    \ let vowelsIndexMinIndex7 = vowelsIndex.indexOf(vowelsIndexMin - 6);\n    let\
    \ vowelsIndexMaxIndex7 = vowelsIndex.indexOf(vowelsIndexMax + 6);\n    let vowelsIndexMinIndex8\
    \ = vowelsIndex.indexOf(vowelsIndexMin - 7);\n    let vowelsIndexMaxIndex8 = vowelsIndex.indexOf(vowelsIndexMax\
    \ + 7);\n    let vowelsIndexMinIndex9 = vowelsIndex.indexOf(vowelsIndexMin - 8);\n\
    \    let vowelsIndexMaxIndex9 = vowelsIndex.indexOf(vowelsIndexMax + 8);\n   \
    \ let vowelsIndexMinIndex10 = vowelsIndex.indexOf(vowelsIndexMin - 9);\n    let\
    \ vowelsIndexMaxIndex10 = vowelsIndex.indexOf(vowelsIndexMax + 9);\n    let vowelsIndexMinIndex11\
    \ = vowelsIndex.indexOf(vowelsIndexMin - 10);\n    let vowelsIndexMaxIndex11 =\
    \ vowelsIndex.indexOf(vowelsIndexMax + 10);\n    let vowelsIndexMinIndex12 = vowelsIndex.\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy26a6n6a.js:22\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxtf0kopp.js:36\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = \"aeiouAEIOU\";\n\tlet vowels_count = vowels.length;\n\tlet vowels_count_from_right\
    \ = word.length - vowels_count;\n\tlet vowels_count_from_left = vowels_count -\
    \ 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\tlet vowels_count_from_middle_to_right\
    \ = vowels_count_from_middle + vowels_count_from_right;\n\tlet vowels_count_from_middle_to_left\
    \ = vowels_count_from_middle - vowels_count_from_left;\n\tlet vowels_count_from_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left + vowels_count_from_right;\n\tlet vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_left;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_left + vowels_count_from_middle;\n\tlet\
    \ vowels_count_from_middle_to_left_to_right_to_middle_to_right = vowels_count_from_middle_to_left_to_right_to_middle\
    \ + vowels_count_from_right;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle - vowels_count_from_left;\n\
    \tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right = vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ + vowels_count_from_right;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left + vowels_count_from_right;\n\
    \tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ + vowels_count_from_right;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpow9q_hd1.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right_to_left =\
    \ vowels_count_from_left_to_right - vowels_count_from_right_to_left;\n    var\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_right_to_left -\
    \ vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left - vowels_count_from_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left;\n    var vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right - vowels_count_from_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right;\n    var vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0bnsxqgf.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle_to_right\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3npxg12u.js:41\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMin\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo5isx_7n.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowelsCount++;\n \
    \           if(vowelsCount > vowelsCountMax){\n                vowelsCountMax\
    \ = vowelsCount;\n                vowelsCountMaxIndex = i;\n            }\n  \
    \          if(vowelsCount < vowelsCountMin){\n                vowelsCountMin =\
    \ vowelsCount;\n                vowelsCountMinIndex = i;\n            }\n    \
    \    }\n    }\n    if(vowelsCount > vowelsCountMax){\n        vowelsCountMax =\
    \ vowelsCount;\n        vowelsCountMaxIndex = vowelsCountMaxIndex;\n    }\n  \
    \  if(vowelsCount < vowelsCountMin){\n        vowelsCountMin = vowelsCount;\n\
    \        vowelsCountMinIndex = vowelsCountMinIndex;\n    }\n    for(let i = vowelsCountMaxIndex;\
    \ i >= vowelsCountMinIndex; i--){\n        if(vowels.includes(word.substring(vowelsCountMaxIndex,\
    \ i))){\n            vowelsCount--;\n            if(vowelsCount > vowelsCountMax){\n\
    \                vowelsCountMax = vowelsCount;\n                vowelsCountMaxIndex\
    \ = i;\n            }\n            if(vowelsCount < vowelsCountMin){\n       \
    \         vowelsCountMin = vowelsCount;\n                vowelsCountMinIndex =\
    \ i;\n            }\n        }\n    }\n    if(vowelsCount > vowelsCountMax){\n\
    \        vowelsCountMax = vowelsCount;\n        vowelsCountMaxIndex = vowelsCountMaxIndex;\n\
    \    }\n    if(vowelsCount < vowelsCountMin){\n        vowelsCountMin = vowelsCount;\n\
    \        vowelsCountMinIndex = vowelsCountMinIndex;\n    }\n    return word.substring(vowelsCountMaxIndex,\
    \ vowelsCountMinIndex);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplgvm8o2c.js:24\n    let vowelsCountMinIndex = 0;\n        ^\n\n\
    SyntaxError: Identifier 'vowelsCountMinIndex' has already been declared\n    at\
    \ Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = vowels_count - 1;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right;\n    var vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    var vowels_count_from_left_to_right_to_left\
    \ = vowels_count_from_left_to_right - vowels_count_from_right_to_left;\n    var\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_right_to_left -\
    \ vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left - vowels_count_from_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left;\n    var vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right - vowels_count_from_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left;\n    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfyj80292.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount >\
    \ 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n        let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n        let vowelsIndexMinCount = vowelsIndex.length;\n\
    \        for(let i = vowelsIndexMin; i < vowelsIndexMax; i++){\n            if(vowels.includes(word[i])){\n\
    \                vowelsIndex.push(i);\n                vowelsIndexCount++;\n \
    \           }\n        }\n        if(vowelsIndexCount > vowelsIndexMinCount){\n\
    \            return word[vowelsIndexMin];\n        }\n    }\n    return \"\";\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmp2l_f80m8.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2l_f80m8.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx7kvrzxk.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps_0b9lx1.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\");\n  let\
    \ vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\");\n \
    \ let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\");\n\
    \  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\"\
    );\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjeg7fy9u.js:64\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_count_from_right = vowel_count - 1;\n    var vowel_count_from_left\
    \ = vowel_count - 2;\n    var vowel_count_from_middle = vowel_count - 3;\n   \
    \ var vowel_count_from_middle2 = vowel_count - 4;\n    var vowel_count_from_middle3\
    \ = vowel_count - 5;\n    var vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  var vowel_count_from_middle5 = vowel_count - 7;\n    var vowel_count_from_middle6\
    \ = vowel_count - 8;\n    var vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  var vowel_count_from_middle8 = vowel_count - 10;\n    var vowel_count_from_middle9\
    \ = vowel_count - 11;\n    var vowel_count_from_middle10 = vowel_count - 12;\n\
    \    var vowel_count_from_middle11 = vowel_count - 13;\n    var vowel_count_from_middle12\
    \ = vowel_count - 14;\n    var vowel_count_from_middle13 = vowel_count - 15;\n\
    \    var vowel_count_from_middle14 = vowel_count - 16;\n    var vowel_count_from_middle15\
    \ = vowel_count - 17;\n    var vowel_count_from_middle16 = vowel_count - 18;\n\
    \    var vowel_count_from_middle17 = vowel_count - 19;\n    var vowel_count_from_middle18\
    \ = vowel_count - 20;\n    var vowel_count_from_middle19 = vowel_count - 21;\n\
    \    var vowel_count_from_middle20 = vowel_count - 22;\n    var vowel_count_from_middle21\
    \ = vowel_count - 23;\n    var vowel_count_from_middle22 = vowel_count - 24;\n\
    \    var vowel_count_from_middle23 = vowel_count - 25;\n    var vowel_count_from_middle24\
    \ = vowel_count - 26;\n    var vowel_count_from_middle25 = vowel_count - 27;\n\
    \    var vowel_count_from_middle26 = vowel_count - 28;\n    var vowel_count_from_middle27\
    \ = vowel_count - 29;\n    var vowel_count_from_middle28 = vowel_count - 30;\n\
    \    var vowel_count_from_middle29 = vowel_count - 31;\n    var vowel_count_from_middle30\
    \ = vowel_count - 32;\n    var vowel_count_from_middle31 = vowel_count - 33;\n\
    \    var vowel_count_from_middle32 = vowel_count - 34;\n    var vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplpas6_gq.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_middle2 = vowels_count - 4;\n\
    \    var vowels_count_from_middle3 = vowels_count - 5;\n    var vowels_count_from_middle4\
    \ = vowels_count - 6;\n    var vowels_count_from_middle5 = vowels_count - 7;\n\
    \    var vowels_count_from_middle6 = vowels_count - 8;\n    var vowels_count_from_middle7\
    \ = vowels_count - 9;\n    var vowels_count_from_middle8 = vowels_count - 10;\n\
    \    var vowels_count_from_middle9 = vowels_count - 11;\n    var vowels_count_from_middle10\
    \ = vowels_count - 12;\n    var vowels_count_from_middle11 = vowels_count - 13;\n\
    \    var vowels_count_from_middle12 = vowels_count - 14;\n    var vowels_count_from_middle13\
    \ = vowels_count - 15;\n    var vowels_count_from_middle14 = vowels_count - 16;\n\
    \    var vowels_count_from_middle15 = vowels_count - 17;\n    var vowels_count_from_middle16\
    \ = vowels_count - 18;\n    var vowels_count_from_middle17 = vowels_count - 19;\n\
    \    var vowels_count_from_middle18 = vowels_count - 20;\n    var vowels_count_from_middle19\
    \ = vowels_count - 21;\n    var vowels_count_from_middle20 = vowels_count - 22;\n\
    \    var vowels_count_from_middle21 = vowels_count - 23;\n    var vowels_count_from_middle22\
    \ = vowels_count - 24;\n    var vowels_count_from_middle23 = vowels_count - 25;\n\
    \    var vowels_count_from_middle24 = vowels_count - 26;\n    var vowels_count_from_middle25\
    \ = vowels_count - 27;\n    var vowels_count_from_middle26 = vowels_count - 28;\n\
    \    var vowels_count_from_middle27 = vowels_count - 29;\n    var vowels_count_from_middle28\
    \ = vowels_count - 30;\n    var vowels_count_from_middle29 = vowels_count - 31;\n\
    \    var vowels_count_from_middle30 = vowels_count - 32;\n    var vowels_count_from_middle31\
    \ = vowels_count - 33;\n    var vowels_count_from_middle32 = vowels_count - 34;\n\
    \    var vowels_count_from_middle33 = vowels_count - 35;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5pones67.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount =\
    \ vowels.length;\n    var vowelsIndex = 0;\n    var vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    var vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    var\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    var vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    var vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    var\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    var vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    var vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    var\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    var vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    var vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    var\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    var vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    var vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    var\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    var vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    var vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    var\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    var vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    var vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    var\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    var vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    var vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    var\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    var vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    var vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    var\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    var vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    var vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    var\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    var vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    var vowelsIndex33\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2ty0w8ie.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCount2 = vowelsIndexCount-1;\n    let vowelsIndexCount3 =\
    \ vowelsIndexCount-2\n    let vowelsIndexCount4 = vowelsIndexCount-3\n    let\
    \ vowelsIndexCount5 = vowelsIndexCount-4\n    let vowelsIndexCount6 = vowelsIndexCount-5\n\
    \    let vowelsIndexCount7 = vowelsIndexCount-6\n    let vowelsIndexCount8 = vowelsIndexCount-7\n\
    \    let vowelsIndexCount9 = vowelsIndexCount-8\n    let vowelsIndexCount10 =\
    \ vowelsIndexCount-9\n    let vowelsIndexCount11 = vowelsIndexCount-10\n    let\
    \ vowelsIndexCount12 = vowelsIndexCount-11\n    let vowelsIndexCount13 = vowelsIndexCount-12\n\
    \    let vowelsIndexCount14 = vowelsIndexCount-13\n    let vowelsIndexCount15\
    \ = vowelsIndexCount-14\n    let vowelsIndexCount16 = vowelsIndexCount-15\n  \
    \  let vowelsIndexCount17 = vowelsIndexCount-16\n    let vowelsIndexCount18 =\
    \ vowelsIndexCount-17\n    let vowelsIndexCount19 = vowelsIndexCount-18\n    let\
    \ vowelsIndexCount20 = vowelsIndexCount-19\n    let vowelsIndexCount21 = vowelsIndexCount-20\n\
    \    let vowelsIndexCount22 = vowelsIndexCount-21\n    let vowelsIndexCount23\
    \ = vowelsIndexCount-22\n    let vowelsIndexCount24 = vowelsIndexCount-23\n  \
    \  let vowelsIndexCount25 = vowelsIndexCount-24\n    let vowelsIndexCount26 =\
    \ vowelsIndexCount-25\n    let vowelsIndexCount27 = vowelsIndexCount-26\n    let\
    \ vowelsIndexCount28 = vowelsIndexCount-27\n    let vowelsIndexCount29 = vowelsIndexCount-28\n\
    \    let vowelsIndexCount30 = vowelsIndexCount-29\n    let vowelsIndexCount31\
    \ = vowelsIndexCount-30\n    let vowelsIndexCount32 = vowelsIndexCount-31\n  \
    \  let vowelsIndexCount33 = vowelsIndexCount-32\n    let vowelsIndexCount34 =\
    \ vowelsIndexCount-33\n    let vowelsIndexCount35 = vowelsIndexCount-34\n    let\
    \ vowelsIndexCount36 = vowelsIndexCount-\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdrnv25h7.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvqeplmkb.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw_jx759_.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowel_position = 0;\n    var vowel_found = false;\n\
    \    var consonants = word.split(\"\");\n    var consonants_count = consonants.length;\n\
    \    var consonant_position = 0;\n    var consonant_found = false;\n    \n   \
    \ while(consonant_position < consonants_count){\n        if(consonants[consonant_position].match(/[aeiou]/)){\n\
    \            consonant_found = true;\n        }\n        consonant_position++;\n\
    \    }\n    \n    if(consonant_found){\n        while(vowel_position < vowels_count){\n\
    \            if(vowels[vowel_position].match(/[aeiou]/)){\n                vowel_found\
    \ = true;\n            }\n            vowel_position++;\n        }\n    }\n  \
    \  \n    if(vowel_found){\n        return vowels[vowel_position];\n    }\n   \
    \ else{\n        return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpnhvhiu1t.js:54:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpnhvhiu1t.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - word.length;\n    var vowels_count_from_both = vowels_count_from_right\
    \ + vowels_count_from_left;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_both_to_left = vowels_count_from_both\
    \ - vowels_count_from_left;\n    var vowels_count_from_both_to_right = vowels_count_from_both\
    \ - vowels_count_from_right;\n    var vowels_count_from_both_to_left_to_right\
    \ = vowels_count_from_both_to_left - vowels_count_from_right_to_left;\n    var\
    \ vowels_count_from_both_to_right_to_left = vowels_count_from_both_to_right -\
    \ vowels_count_from_left_to_right;\n    var vowels_count_from_both_to_left_to_right\
    \ = vowels_count_from_both_to_right - vowels_count_from_right_to_left;\n    var\
    \ vowels_count_from_both_to_left_to_right_to_left = vowels_count_from_both_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left;\n    var vowels_count_from_both_to_right_to_left_to_right\
    \ = vowels_count_from_both_to_right_to_left - vowels_count_from_right_to_left_to_right;\n\
    \    var vowels_count_from_both_to_left_to_right_to_left = vowels_count_from_both_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right;\n    var vowels_count_from_both_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_both_to_right_to_left_to_right - vowels_count_from_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_both_to_left_to_right_to_left_to_right = vowels_count_from_both_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left;\n    var vowels_count_from_both_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_both_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_both_to_left_to_right_to_left_to_right = vowels_count_from_both_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left;\n    var vowels_count_from_both_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_both_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzg4523a5.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = 0;\n    let\
    \ vowelsIndex3 = 0;\n    let vowelsIndex4 = 0;\n    let vowelsIndex5 = 0;\n  \
    \  let vowelsIndex6 = 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8 = 0;\n\
    \    let vowelsIndex9 = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11\
    \ = 0;\n    let vowelsIndex12 = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14\
    \ = 0;\n    let vowelsIndex15 = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17\
    \ = 0;\n    let vowelsIndex18 = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20\
    \ = 0;\n    let vowelsIndex21 = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23\
    \ = 0;\n    let vowelsIndex24 = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26\
    \ = 0;\n    let vowelsIndex27 = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29\
    \ = 0;\n    let vowelsIndex30 = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32\
    \ = 0;\n    let vowelsIndex33 = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35\
    \ = 0;\n    let vowelsIndex36 = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38\
    \ = 0;\n    let vowelsIndex39 = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41\
    \ = 0;\n    let vowelsIndex42 = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44\
    \ = 0;\n    let vowelsIndex45 = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47\
    \ = 0;\n    let vowelsIndex48 = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50\
    \ = 0;\n    let vowelsIndex51 = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53\
    \ = 0;\n    let vowelsIndex54 = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56\
    \ = 0;\n    let vowelsIndex57 = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59\
    \ = 0;\n    let vowelsIndex60 = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62\
    \ = 0;\n    let vowelsIndex63 = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65\
    \ = 0;\n    let vowelsIndex66 = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68\
    \ = 0;\n    let vowelsIndex69 = 0;\n    let vowelsIndex70 = 0;\n    let vowelsIndex71\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcvbfmwrg.js:110\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 2;\n    let vowels_count_from_middle4 = vowels_count / 2;\n\
    \    let vowels_count_from_middle5 = vowels_count / 2;\n    let vowels_count_from_middle6\
    \ = vowels_count / 2;\n    let vowels_count_from_middle7 = vowels_count / 2;\n\
    \    let vowels_count_from_middle8 = vowels_count / 2;\n    let vowels_count_from_middle9\
    \ = vowels_count / 2;\n    let vowels_count_from_middle10 = vowels_count / 2;\n\
    \    let vowels_count_from_middle11 = vowels_count / 2;\n    let vowels_count_from_middle12\
    \ = vowels_count / 2;\n    let vowels_count_from_middle13 = vowels_count / 2;\n\
    \    let vowels_count_from_middle14 = vowels_count / 2;\n    let vowels_count_from_middle15\
    \ = vowels_count / 2;\n    let vowels_count_from_middle16 = vowels_count / 2;\n\
    \    let vowels_count_from_middle17 = vowels_count / 2;\n    let vowels_count_from_middle18\
    \ = vowels_count / 2;\n    let vowels_count_from_middle19 = vowels_count / 2;\n\
    \    let vowels_count_from_middle20 = vowels_count / 2;\n    let vowels_count_from_middle21\
    \ = vowels_count / 2;\n    let vowels_count_from_middle22 = vowels_count / 2;\n\
    \    let vowels_count_from_middle23 = vowels_count / 2;\n    let vowels_count_from_middle24\
    \ = vowels_count / 2;\n    let vowels_count_from_middle25 = vowels_count / 2;\n\
    \    let vowels_count_from_middle26 = vowels_count / 2;\n    let vowels_count_from_middle27\
    \ = vowels_count / 2;\n    let vowels_count_from_middle28 = vowels_count / 2;\n\
    \    let vowels_count_from_middle29 = vowels_count / 2;\n    let vowels_count_from_middle30\
    \ = vowels_count / 2;\n    let vowels_count_from_middle31 = vowels_count / 2;\n\
    \    let vowels_count_from_middle32 = vowels_count / 2;\n    let vowels_count_from_middle33\
    \ = vowels_count / 2;\n    let vowels_count_from_middle34 = vowels_count / 2;\n\
    \    let vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp105s7xhi.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    var vowels_count = vowels.length;\n    var vowels_count_from_right\
    \ = vowels_count - 1;\n    var vowels_count_from_left = vowels_count - 2;\n  \
    \  var vowels_count_from_middle = vowels_count - 3;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - 4;\n    var vowels_count_from_right_to_left = vowels_count\
    \ - 5;\n    var vowels_count_from_middle_to_left = vowels_count - 6;\n    var\
    \ vowels_count_from_left_to_middle = vowels_count - 7;\n    var vowels_count_from_right_to_middle\
    \ = vowels_count - 8;\n    var vowels_count_from_middle_to_right = vowels_count\
    \ - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n\
    \    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n    var\
    \ vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var vowels_count_from_left_to_middle_to_right\
    \ = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left = vowels_count\
    \ - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count - 15;\n\
    \    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 16;\n\
    \    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 17;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle_to_right\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1u6mhk22.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5bahme78.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = \"aeiouAEIOU\";\n\tlet vowels_count = vowels.length;\n\tlet vowels_count_from_right\
    \ = word.length - vowels_count;\n\tlet vowels_count_from_left = vowels_count -\
    \ 1;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right = vowels_count_from_left - vowels_count_from_right;\n\
    \tlet vowels_count_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqkuekyl9.js:22\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\t    ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvfsn22r4.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 3;\n    var vowels_count_from_middle4 = vowels_count / 4;\n\
    \    var vowels_count_from_middle5 = vowels_count / 5;\n    var vowels_count_from_middle6\
    \ = vowels_count / 6;\n    var vowels_count_from_middle7 = vowels_count / 7;\n\
    \    var vowels_count_from_middle8 = vowels_count / 8;\n    var vowels_count_from_middle9\
    \ = vowels_count / 9;\n    var vowels_count_from_middle10 = vowels_count / 10;\n\
    \    var vowels_count_from_middle11 = vowels_count / 11;\n    var vowels_count_from_middle12\
    \ = vowels_count / 12;\n    var vowels_count_from_middle13 = vowels_count / 13;\n\
    \    var vowels_count_from_middle14 = vowels_count / 14;\n    var vowels_count_from_middle15\
    \ = vowels_count / 15;\n    var vowels_count_from_middle16 = vowels_count / 16;\n\
    \    var vowels_count_from_middle17 = vowels_count / 17;\n    var vowels_count_from_middle18\
    \ = vowels_count / 18;\n    var vowels_count_from_middle19 = vowels_count / 19;\n\
    \    var vowels_count_from_middle20 = vowels_count / 20;\n    var vowels_count_from_middle21\
    \ = vowels_count / 21;\n    var vowels_count_from_middle22 = vowels_count / 22;\n\
    \    var vowels_count_from_middle23 = vowels_count / 23;\n    var vowels_count_from_middle24\
    \ = vowels_count / 24;\n    var vowels_count_from_middle25 = vowels_count / 25;\n\
    \    var vowels_count_from_middle26 = vowels_count / 26;\n    var vowels_count_from_middle27\
    \ = vowels_count / 27;\n    var vowels_count_from_middle28 = vowels_count / 28;\n\
    \    var vowels_count_from_middle29 = vowels_count / 29;\n    var vowels_count_from_middle30\
    \ = vowels_count / 30;\n    var vowels_count_from_middle31 = vowels_count / 31;\n\
    \    var vowels_count_from_middle32 = vowels_count / 32;\n    var vowels_count_from_middle33\
    \ = vowels_count / 33;\n    var vowels_count_from_middle\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo0kqfzm2.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppar14rkj.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexCount2 = vowelsIndexCount-1;\n   \
    \ let vowelsIndexCount3 = vowelsIndexCount-2\n    let vowelsIndexCount4 = vowelsIndexCount-3\n\
    \    let vowelsIndexCount5 = vowelsIndexCount-4\n    let vowelsIndexCount6 = vowelsIndexCount-5\n\
    \    let vowelsIndexCount7 = vowelsIndexCount-6\n    let vowelsIndexCount8 = vowelsIndexCount-7\n\
    \    let vowelsIndexCount9 = vowelsIndexCount-8\n    let vowelsIndexCount10 =\
    \ vowelsIndexCount-9\n    let vowelsIndexCount11 = vowelsIndexCount-10\n    let\
    \ vowelsIndexCount12 = vowelsIndexCount-11\n    let vowelsIndexCount13 = vowelsIndexCount-12\n\
    \    let vowelsIndexCount14 = vowelsIndexCount-13\n    let vowelsIndexCount15\
    \ = vowelsIndexCount-14\n    let vowelsIndexCount16 = vowelsIndexCount-15\n  \
    \  let vowelsIndexCount17 = vowelsIndexCount-16\n    let vowelsIndexCount18 =\
    \ vowelsIndexCount-17\n    let vowelsIndexCount19 = vowelsIndexCount-18\n    let\
    \ vowelsIndexCount20 = vowelsIndexCount-19\n    let vowelsIndexCount21 = vowelsIndexCount-20\n\
    \    let vowelsIndexCount22 = vowelsIndexCount-21\n    let vowelsIndexCount23\
    \ = vowelsIndexCount-22\n    let vowelsIndexCount24 = vowelsIndexCount-23\n  \
    \  let vowelsIndexCount25 = vowelsIndexCount-24\n    let vowelsIndexCount26 =\
    \ vowelsIndexCount-25\n    let vowelsIndexCount27 = vowelsIndexCount-26\n    let\
    \ vowelsIndexCount28 = vowelsIndexCount-27\n    let vowelsIndexCount29 = vowelsIndexCount-28\n\
    \    let vowelsIndexCount30 = vowelsIndexCount-29\n    let vowelsIndexCount31\
    \ = vowelsIndexCount-30\n    let vowelsIndexCount32 = vowelsIndexCount-31\n  \
    \  let vowelsIndexCount33 = vowelsIndexCount-32\n    let vowelsIndexCount34 =\
    \ vowelsIndexCount-33\n    let vowelsIndexCount35 = vowelsIndexCount-34\n    let\
    \ vowelsIndexCount36 = vowel\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr6x61rdd.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowel_found = false;\n    var vowel_found_index = 0;\n\
    \    var vowel_found_index = 0;\n    var vowel_found_count = 0;\n    var vowel_found_index2\
    \ = 0;\n    var vowel_found_index2 = 0;\n    var vowel_found_count2 = 0;\n   \
    \ var vowel_found_index3 = 0;\n    var vowel_found_index3 = 0;\n    var vowel_found_count3\
    \ = 0;\n    var vowel_found_index4 = 0;\n    var vowel_found_index4 = 0;\n   \
    \ var vowel_found_count4 = 0;\n    var vowel_found_index5 = 0;\n    var vowel_found_index5\
    \ = 0;\n    var vowel_found_count5 = 0;\n    var vowel_found_index6 = 0;\n   \
    \ var vowel_found_index6 = 0;\n    var vowel_found_count6 = 0;\n    var vowel_found_index7\
    \ = 0;\n    var vowel_found_index7 = 0;\n    var vowel_found_count7 = 0;\n   \
    \ var vowel_found_index8 = 0;\n    var vowel_found_index8 = 0;\n    var vowel_found_count8\
    \ = 0;\n    var vowel_found_index9 = 0;\n    var vowel_found_index9 = 0;\n   \
    \ var vowel_found_count9 = 0;\n    var vowel_found_index10 = 0;\n    var vowel_found_index10\
    \ = 0;\n    var vowel_found_count10 = 0;\n    var vowel_found_index11 = 0;\n \
    \   var vowel_found_index11 = 0;\n    var vowel_found_count11 = 0;\n    var vowel_found_index12\
    \ = 0;\n    var vowel_found_index12 = 0;\n    var vowel_found_count12 = 0;\n \
    \   var vowel_found_index13 = 0;\n    var vowel_found_index13 = 0;\n    var vowel_found_count13\
    \ = 0;\n    var vowel_found_index14 = 0;\n    var vowel_found_index14 = 0;\n \
    \   var vowel_found_count14 = 0;\n    var vowel_found_index15 = 0;\n    var vowel_found_index15\
    \ = 0;\n    var vowel_found_count15 = 0;\n    var vowel_found_index16 = 0;\n \
    \   var vowel_found_index16 = 0;\n    var vowel_found_count16 = 0;\n    var vowel_found_index17\
    \ = 0;\n    var vowel_found_index17 = 0;\n    var vowel_found_count17 = 0;\n \
    \   var vowel_found_index18 = 0;\n    var vowel_found_index18 = 0;\n    var vowel_found_count18\
    \ = 0;\n    var vowel_found_index19 = 0;\n    var vowel_found_index19 = 0;\n \
    \   var vowel_found_count19 = 0;\n    var vowel_found_index20 = 0;\n    var vowel_found_index20\
    \ = 0;\n    var vowel_found_count20 = 0;\n    var vowel_found_index21 = 0;\n \
    \   var vowel_found_index21 = 0;\n    var vowel_found_count21\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3lt1l7c0.js:102\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCountInWord = vowels.filter(v => word.includes(v)).length;\n\
    \    let vowelsCountInWordInWord = vowels.filter(v => word.includes(v) && word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWord = vowels.filter(v => word.includes(v) &&\
    \ word.includes(v) && word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v)).length;\n    let\
    \ vowelsCountInWordInWordInWordInWordInWordInWord = vowels.filter(v => word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.includes(v) && word.includes(v) && word.includes(v)).length;\n    let\
    \ vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v\
    \ => word.includes(v) && word.includes(v) && word.includes(v) && word.\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqidfv0k9.js:27\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v => word.includes(v) && word.includes(v) && word.includes(v)\
    \ && word.\n        ^\n\nSyntaxError: Identifier 'vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_index = word.lastIndexOf(vowels);\n    let vowels_index_2 = word.lastIndexOf(\"\
    e\");\n    let vowels_index_3 = word.lastIndexOf(\"i\");\n    let vowels_index_4\
    \ = word.lastIndexOf(\"o\");\n    let vowels_index_5 = word.lastIndexOf(\"u\"\
    );\n    let vowels_index_6 = word.lastIndexOf(\"A\");\n    let vowels_index_7\
    \ = word.lastIndexOf(\"E\");\n    let vowels_index_8 = word.lastIndexOf(\"I\"\
    );\n    let vowels_index_9 = word.lastIndexOf(\"O\");\n    let vowels_index_10\
    \ = word.lastIndexOf(\"U\");\n    let vowels_index_11 = word.lastIndexOf(\"a\"\
    );\n    let vowels_index_12 = word.lastIndexOf(\"e\");\n    let vowels_index_13\
    \ = word.lastIndexOf(\"i\");\n    let vowels_index_14 = word.lastIndexOf(\"o\"\
    );\n    let vowels_index_15 = word.lastIndexOf(\"u\");\n    let vowels_index_16\
    \ = word.lastIndexOf(\"A\");\n    let vowels_index_17 = word.lastIndexOf(\"E\"\
    );\n    let vowels_index_18 = word.lastIndexOf(\"I\");\n    let vowels_index_19\
    \ = word.lastIndexOf(\"O\");\n    let vowels_index_20 = word.lastIndexOf(\"U\"\
    );\n    let vowels_index_21 = word.lastIndexOf(\"a\");\n    let vowels_index_22\
    \ = word.lastIndexOf(\"e\");\n    let vowels_index_23 = word.lastIndexOf(\"i\"\
    );\n    let vowels_index_24 = word.lastIndexOf(\"o\");\n    let vowels_index_25\
    \ = word.lastIndexOf(\"u\");\n    let vowels_index_26 = word.lastIndexOf(\"A\"\
    );\n    let vowels_index_27 = word.lastIndexOf(\"E\");\n    let vowels_index_28\
    \ = word.lastIndexOf(\"I\");\n    let vowels_index_29 = word.lastIndexOf(\"O\"\
    );\n    let vowels_index_30 = word.lastIndexOf(\"U\");\n    let vowels_index_31\
    \ = word.lastIndexOf(\"a\");\n    let vowels_index_32 = word.lastIndexOf(\"e\"\
    );\n    let vowels_index_33 = word.lastIndexOf(\"i\");\n    let vowels_index_34\
    \ = word.lastIndexOf(\"o\");\n    let vowels_index_35 = word.lastIndexOf(\"u\"\
    );\n    let vowels_index_36 = word.lastIndexOf(\"A\");\n    let vowels_index_37\
    \ = word.lastIndexOf(\"E\");\n    let vowels_index_38 = word.lastIndexOf(\"I\"\
    );\n    let vowels_index_39 = word.lastIndexOf(\"O\");\n    let vowels_index_40\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_s31egjs.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdszs3b75.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6wkwfeqi.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = 0;\n    let vowels_count_from_middle = 0;\n    let vowels_count_from_middle2\
    \ = word.length - vowels_count_from_middle;\n    let vowels_count_from_middle3\
    \ = word.length - vowels_count_from_middle2;\n    let vowels_count_from_middle4\
    \ = word.length - vowels_count_from_middle3;\n    let vowels_count_from_middle5\
    \ = word.length - vowels_count_from_middle4;\n    let vowels_count_from_middle6\
    \ = word.length - vowels_count_from_middle5;\n    let vowels_count_from_middle7\
    \ = word.length - vowels_count_from_middle6;\n    let vowels_count_from_middle8\
    \ = word.length - vowels_count_from_middle7;\n    let vowels_count_from_middle9\
    \ = word.length - vowels_count_from_middle8;\n    let vowels_count_from_middle10\
    \ = word.length - vowels_count_from_middle9;\n    let vowels_count_from_middle11\
    \ = word.length - vowels_count_from_middle10;\n    let vowels_count_from_middle12\
    \ = word.length - vowels_count_from_middle11;\n    let vowels_count_from_middle13\
    \ = word.length - vowels_count_from_middle12;\n    let vowels_count_from_middle14\
    \ = word.length - vowels_count_from_middle13;\n    let vowels_count_from_middle15\
    \ = word.length - vowels_count_from_middle14;\n    let vowels_count_from_middle16\
    \ = word.length - vowels_count_from_middle15;\n    let vowels_count_from_middle17\
    \ = word.length - vowels_count_from_middle16;\n    let vowels_count_from_middle18\
    \ = word.length - vowels_count_from_middle17;\n    let vowels_count_from_middle19\
    \ = word.length - vowels_count_from_middle18;\n    let vowels_count_from_middle20\
    \ = word.length - vowels_count_from_middle19;\n    let vowels_count_from_middle21\
    \ = word.length - vowels_count_from_middle20;\n    let vowels_count_from_middle22\
    \ = word.length - vowels_count_from_middle21;\n    let vowels_count_from_middle23\
    \ = word.length - vowels_count_from_middle22;\n    let vowels_count_from_middle24\
    \ = word.length - vowels_count_from_middle23;\n    let vowels_count_from_middle25\
    \ = word.length - vowels_count_from_middle24;\n    let vowels_count_from_middle26\
    \ = word.length - vowels_count_from_middle25;\n    let vowels_count_from_middle27\
    \ = word.length - vowels_count_from_middle26;\n    let vowels_count_from_middle28\
    \ = word.length - vowels_count_from_middle27;\n    let vowels_count_from_middle\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdycq2xhn.js:48\n    let vowels_count_from_middle\n        ^\n\n\
    SyntaxError: Identifier 'vowels_count_from_middle' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let\
    \ vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3\
    \ = vowelsIndexSumCount2 / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3\
    \ / 2;\n    let vowelsIndexSumCount5 = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6\
    \ = vowelsIndexSumCount5 / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6\
    \ / 2;\n    let vowelsIndexSumCount8 = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9\
    \ = vowelsIndexSumCount8 / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9\
    \ / 2;\n    let vowelsIndexSumCount11 = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount11 / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12\
    \ / 2;\n    let vowelsIndexSumCount14 = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount14 / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15\
    \ / 2;\n    let vowelsIndexSumCount17 = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount17 / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18\
    \ / 2;\n    let vowelsIndexSumCount20 = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21\
    \ = vowelsIndexSumCount20 / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21\
    \ / 2;\n    let vowelsIndexSumCount23 = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24\
    \ = vowelsIndexSumCount23 / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24\
    \ / 2;\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3bvy0nrx.js:51\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 3;\n    let vowels_count_from_middle4 = vowels_count / 4;\n\
    \    let vowels_count_from_middle5 = vowels_count / 5;\n    let vowels_count_from_middle6\
    \ = vowels_count / 6;\n    let vowels_count_from_middle7 = vowels_count / 7;\n\
    \    let vowels_count_from_middle8 = vowels_count / 8;\n    let vowels_count_from_middle9\
    \ = vowels_count / 9;\n    let vowels_count_from_middle10 = vowels_count / 10;\n\
    \    let vowels_count_from_middle11 = vowels_count / 11;\n    let vowels_count_from_middle12\
    \ = vowels_count / 12;\n    let vowels_count_from_middle13 = vowels_count / 13;\n\
    \    let vowels_count_from_middle14 = vowels_count / 14;\n    let vowels_count_from_middle15\
    \ = vowels_count / 15;\n    let vowels_count_from_middle16 = vowels_count / 16;\n\
    \    let vowels_count_from_middle17 = vowels_count / 17;\n    let vowels_count_from_middle18\
    \ = vowels_count / 18;\n    let vowels_count_from_middle19 = vowels_count / 19;\n\
    \    let vowels_count_from_middle20 = vowels_count / 20;\n    let vowels_count_from_middle21\
    \ = vowels_count / 21;\n    let vowels_count_from_middle22 = vowels_count / 22;\n\
    \    let vowels_count_from_middle23 = vowels_count / 23;\n    let vowels_count_from_middle24\
    \ = vowels_count / 24;\n    let vowels_count_from_middle25 = vowels_count / 25;\n\
    \    let vowels_count_from_middle26 = vowels_count / 26;\n    let vowels_count_from_middle27\
    \ = vowels_count / 27;\n    let vowels_count_from_middle28 = vowels_count / 28;\n\
    \    let vowels_count_from_middle29 = vowels_count / 29;\n    let vowels_count_from_middle30\
    \ = vowels_count / 30;\n    let vowels_count_from_middle31 = vowels_count / 31;\n\
    \    let vowels_count_from_middle32 = vowels_count / 32;\n    let vowels_count_from_middle33\
    \ = vowels_count / 33;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2nfglcxa.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(Math, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum;\n    let vowelsIndexSumCountMax\
    \ = vowelsIndexSumCount;\n    let vowelsIndexSumCountMin = vowelsIndexSumCount;\n\
    \    let vowelsIndexSumCountSum = vowelsIndexSumCount;\n    let vowelsIndexSumCountSumMax\
    \ = vowelsIndexSumCountSum;\n    let vowelsIndexSumCountSumMin = vowelsIndexSumCountSum;\n\
    \    let vowelsIndexSumCountSumSum = vowelsIndexSumCountSum;\n    let vowelsIndexSumCountSumSumMax\
    \ = vowelsIndexSumCountSumSum;\n    let vowelsIndexSumCountSumSumMin = vowelsIndexSumCountSumSum;\n\
    \    let vowelsIndexSumCountSumSumSum = vowelsIndexSumCountSumSum;\n    let vowelsIndexSumCountSumSumMax\
    \ = vowelsIndexSumCountSumSumMax;\n    let vowelsIndexSumCountSumSumMin = vowelsIndexSumCountSumSumMin;\n\
    \    let vowelsIndexSumCountSumSumSum = vowelsIndexSumCountSumSumSum;\n    let\
    \ vowelsIndexSumCountSumSumMax = vowelsIndexSumCountSumSumMax;\n    let vowelsIndexSumCountSumSumMin\
    \ = vowelsIndexSumCountSumSumMin;\n    let vowelsIndexSumCountSumSumSum = vowelsIndexSumCountSumSumSum;\n\
    \    let vowelsIndexSumCountSumSumMax = vowelsIndexSumCountSumSumMax;\n    let\
    \ vowelsIndexSumCountSumSumMin = vowelsIndexSumCountSumSumMin;\n    let vowelsIndexSumCountSumSumSum\
    \ = vowelsIndexSumCountSumSumSum;\n    let vowelsIndexSumCountSumSumMax = vowelsIndexSumCountSumSumMax;\n\
    \    let vowelsIndexSumCountSumSumMin = vowelsIndexSumCountSumSumMin;\n    let\
    \ vowelsIndexSumCountSumSumSum = vowelsIndexSumCountSumSumSum;\n    let vowelsIndexSum\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyogjhrvc.js:36\n    let vowelsIndexSumCountSumSumMax = vowelsIndexSumCountSumSumMax;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumSumMax' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max2 = 0;\n    var vowels_index_count_min2 = 0;\n  \
    \  var vowels_index_count_max3 = 0;\n    var vowels_index_count_min3 = 0;\n  \
    \  var vowels_index_count_max4 = 0;\n    var vowels_index_count_min4 = 0;\n  \
    \  var vowels_index_count_max5 = 0;\n    var vowels_index_count_min5 = 0;\n  \
    \  var vowels_index_count_max6 = 0;\n    var vowels_index_count_min6 = 0;\n  \
    \  var vowels_index_count_max7 = 0;\n    var vowels_index_count_min7 = 0;\n  \
    \  var vowels_index_count_max8 = 0;\n    var vowels_index_count_min8 = 0;\n  \
    \  var vowels_index_count_max9 = 0;\n    var vowels_index_count_min9 = 0;\n  \
    \  var vowels_index_count_max10 = 0;\n    var vowels_index_count_min10 = 0;\n\
    \    var vowels_index_count_max11 = 0;\n    var vowels_index_count_min11 = 0;\n\
    \    var vowels_index_count_max12 = 0;\n    var vowels_index_count_min12 = 0;\n\
    \    var vowels_index_count_max13 = 0;\n    var vowels_index_count_min13 = 0;\n\
    \    var vowels_index_count_max14 = 0;\n    var vowels_index_count_min14 = 0;\n\
    \    var vowels_index_count_max15 = 0;\n    var vowels_index_count_min15 = 0;\n\
    \    var vowels_index_count_max16 = 0;\n    var vowels_index_count_min16 = 0;\n\
    \    var vowels_index_count_max17 = 0;\n    var vowels_index_count_min17 = 0;\n\
    \    var vowels_index_count_max18 = 0;\n    var vowels_index_count_min18 = 0;\n\
    \    var vowels_index_count_max19 = 0;\n    var vowels_index_count_min19 = 0;\n\
    \    var vowels_index_count_max20 = 0;\n    var vowels_index_count_min20 = 0;\n\
    \    var vowels_index_count_max21 = 0;\n    var vowels_index_count_min21 = 0;\n\
    \    var vowels_index_count_max22 = 0;\n    var vowels_index_count_min22 = 0;\n\
    \    var vowels_index_count_max23 = 0;\n    var vowels_index_count_min23 = 0;\n\
    \    var vowels_index_count_max24 = 0;\n    var vowels_index_count_min24 = 0;\n\
    \    var vowels_index_count_max25 = 0;\n    var vowels_index_count_min25 = 0;\n\
    \    var vowels_index_count_max26 = 0;\n    var vowels_index_count_min26 = 0;\n\
    \    var vowels_index_count_max27 = 0;\n    var vowels_index_count_min27 = 0;\n\
    \    var vowels_index_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnetuh3bv.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowel_count = vowels.length;\n \
    \ let vowel_count_from_right = word.length - vowel_count - 1;\n  let vowel_count_from_left\
    \ = word.length - vowel_count + 1;\n  let vowel_count_from_middle = word.length\
    \ - vowel_count;\n  let vowel_count_from_left_to_right = word.length - vowel_count\
    \ - 1;\n  let vowel_count_from_right_to_left = word.length - vowel_count + 1;\n\
    \  let vowel_count_from_middle_to_right = word.length - vowel_count;\n  let vowel_count_from_left_to_middle\
    \ = word.length - vowel_count - 1;\n  let vowel_count_from_right_to_middle = word.length\
    \ - vowel_count + 1;\n  let vowel_count_from_middle_to_left = word.length - vowel_count;\n\
    \  let vowel_count_from_left_to_right_to_middle = word.length - vowel_count -\
    \ 1;\n  let vowel_count_from_right_to_left_to_middle = word.length - vowel_count\
    \ + 1;\n  let vowel_count_from_middle_to_right_to_middle = word.length - vowel_count;\n\
    \  let vowel_count_from_left_to_right_to_middle_to_middle = word.length - vowel_count\
    \ - 1;\n  let vowel_count_from_right_to_left_to_middle_to_middle = word.length\
    \ - vowel_count + 1;\n  let vowel_count_from_middle_to_right_to_middle_to_middle\
    \ = word.length - vowel_count;\n  let vowel_count_from_left_to_right_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count - 1;\n  let vowel_count_from_right_to_left_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count + 1;\n  let vowel_count_from_middle_to_right_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count;\n  let vowel_count_from_left_to_right_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count - 1;\n  let vowel_count_from_right_to_left_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count + 1;\n  let vowel_count_from_middle_to_right_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count;\n  let vowel_count_from_left_to_right_to_middle_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count - 1;\n  let vowel_count_from_right_to_left_to_middle_to_middle_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count + 1;\n  let vowel_count_from_middle_to_right_to_middle_to_middle_to_middle_to_middle_to_middle_to_middle\
    \ = word.length - vowel_count;\n  let vowel_count_from_left_to_right_to_middle_to_middle_to_middle_to_middle_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1dbjzgfi.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinVowel\
    \ = vowels[vowelsIndexMin];\n    let vowelsIndexMaxVowel = vowels[vowelsIndexMax];\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex2 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex2 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex3 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex3 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex4 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex4 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex5 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex5 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex6 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex6 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex7 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVow\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplgar03_z.js:31\n    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMinVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = 0;\n    var vowels_count_from_middle = 0;\n    var vowels_count_from_middle2\
    \ = 0;\n    var vowels_count_from_middle3 = 0;\n    var vowels_count_from_middle4\
    \ = 0;\n    var vowels_count_from_middle5 = 0;\n    var vowels_count_from_middle6\
    \ = 0;\n    var vowels_count_from_middle7 = 0;\n    var vowels_count_from_middle8\
    \ = 0;\n    var vowels_count_from_middle9 = 0;\n    var vowels_count_from_middle10\
    \ = 0;\n    var vowels_count_from_middle11 = 0;\n    var vowels_count_from_middle12\
    \ = 0;\n    var vowels_count_from_middle13 = 0;\n    var vowels_count_from_middle14\
    \ = 0;\n    var vowels_count_from_middle15 = 0;\n    var vowels_count_from_middle16\
    \ = 0;\n    var vowels_count_from_middle17 = 0;\n    var vowels_count_from_middle18\
    \ = 0;\n    var vowels_count_from_middle19 = 0;\n    var vowels_count_from_middle20\
    \ = 0;\n    var vowels_count_from_middle21 = 0;\n    var vowels_count_from_middle22\
    \ = 0;\n    var vowels_count_from_middle23 = 0;\n    var vowels_count_from_middle24\
    \ = 0;\n    var vowels_count_from_middle25 = 0;\n    var vowels_count_from_middle26\
    \ = 0;\n    var vowels_count_from_middle27 = 0;\n    var vowels_count_from_middle28\
    \ = 0;\n    var vowels_count_from_middle29 = 0;\n    var vowels_count_from_middle30\
    \ = 0;\n    var vowels_count_from_middle31 = 0;\n    var vowels_count_from_middle32\
    \ = 0;\n    var vowels_count_from_middle33 = 0;\n    var vowels_count_from_middle34\
    \ = 0;\n    var vowels_count_from_middle35 = 0;\n    var vowels_count_from_middle36\
    \ = 0;\n    var vowels_count_from_middle37 = 0;\n    var vowels_count_from_middle38\
    \ = 0;\n    var vowels_count_from_middle39 = 0;\n    var vowels_count_from_middle40\
    \ = 0;\n    var vowels_count_from_middle41 = 0;\n    var vowels_count_from_middle42\
    \ = 0;\n    var vowels_count_from_middle43 = 0;\n    var vowels_count_from_middle44\
    \ = 0;\n    var vowels_count_from_middle45 = 0;\n    var vowels_count_from_middle46\
    \ = 0;\n    var vowels_count_from_middle47 = 0;\n    var vowels_count_from_middle48\
    \ = 0;\n    var vowels_count_from_middle49 = 0;\n    var vowels_count_from_middle50\
    \ = 0;\n    var vowels_count_from_middle51 = 0;\n    var vowels_count_from_middle52\
    \ = 0;\n    var vowels_count_from_middle53 = 0;\n    var vowels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmi4v2wyx.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"AEIOUaeiou\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_found = 0;\n    var vowels_found_count = 0;\n    var vowels_found_index\
    \ = 0;\n    var vowels_found_index2 = 0;\n    var vowels_found_index3 = 0;\n \
    \   var vowels_found_index4 = 0;\n    var vowels_found_index5 = 0;\n    var vowels_found_index6\
    \ = 0;\n    var vowels_found_index7 = 0;\n    var vowels_found_index8 = 0;\n \
    \   var vowels_found_index9 = 0;\n    var vowels_found_index10 = 0;\n    var vowels_found_index11\
    \ = 0;\n    var vowels_found_index12 = 0;\n    var vowels_found_index13 = 0;\n\
    \    var vowels_found_index14 = 0;\n    var vowels_found_index15 = 0;\n    var\
    \ vowels_found_index16 = 0;\n    var vowels_found_index17 = 0;\n    var vowels_found_index18\
    \ = 0;\n    var vowels_found_index19 = 0;\n    var vowels_found_index20 = 0;\n\
    \    var vowels_found_index21 = 0;\n    var vowels_found_index22 = 0;\n    var\
    \ vowels_found_index23 = 0;\n    var vowels_found_index24 = 0;\n    var vowels_found_index25\
    \ = 0;\n    var vowels_found_index26 = 0;\n    var vowels_found_index27 = 0;\n\
    \    var vowels_found_index28 = 0;\n    var vowels_found_index29 = 0;\n    var\
    \ vowels_found_index30 = 0;\n    var vowels_found_index31 = 0;\n    var vowels_found_index32\
    \ = 0;\n    var vowels_found_index33 = 0;\n    var vowels_found_index34 = 0;\n\
    \    var vowels_found_index35 = 0;\n    var vowels_found_index36 = 0;\n    var\
    \ vowels_found_index37 = 0;\n    var vowels_found_index38 = 0;\n    var vowels_found_index39\
    \ = 0;\n    var vowels_found_index40 = 0;\n    var vowels_found_index41 = 0;\n\
    \    var vowels_found_index42 = 0;\n    var vowels_found_index43 = 0;\n    var\
    \ vowels_found_index44 = 0;\n    var vowels_found_index45 = 0;\n    var vowels_found_index46\
    \ = 0;\n    var vowels_found_index47 = 0;\n    var vowels_found_index48 = 0;\n\
    \    var vowels_found_index49 = 0;\n    var vowels_found_index50 = 0;\n    var\
    \ vowels_found_index51 = 0;\n    var vowels_found_index52 = 0;\n    var vowels_found_index53\
    \ = 0;\n    var vowels_found_index54 = 0;\n    var vowels_found_index55 = 0;\n\
    \    var vowels_found_index56 = 0;\n    var vowels_found_index57 = 0;\n    var\
    \ vowels_found_index58 = 0;\n    var vowels_found_index59 = 0;\n    var vowels_found_index60\
    \ = 0;\n    var vowels_found_index61 = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqchcsu1b.js:102\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph5y2xvcm.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_right = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_right = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right =\
    \ vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 28;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7e2sc_io.js:44\n    let vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_right_to_left_to_right_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let vowels_count = vowels.length;\n    let vowels_count_from_right\
    \ = vowels_count - 1;\n    let vowels_count_from_left = vowels_count - 2;\n  \
    \  let vowels_count_from_middle = vowels_count - 3;\n    let vowels_count_from_middle2\
    \ = vowels_count - 4;\n    let vowels_count_from_middle3 = vowels_count - 5;\n\
    \    let vowels_count_from_middle4 = vowels_count - 6;\n    let vowels_count_from_middle5\
    \ = vowels_count - 7;\n    let vowels_count_from_middle6 = vowels_count - 8;\n\
    \    let vowels_count_from_middle7 = vowels_count - 9;\n    let vowels_count_from_middle8\
    \ = vowels_count - 10;\n    let vowels_count_from_middle9 = vowels_count - 11;\n\
    \    let vowels_count_from_middle10 = vowels_count - 12;\n    let vowels_count_from_middle11\
    \ = vowels_count - 13;\n    let vowels_count_from_middle12 = vowels_count - 14;\n\
    \    let vowels_count_from_middle13 = vowels_count - 15;\n    let vowels_count_from_middle14\
    \ = vowels_count - 16;\n    let vowels_count_from_middle15 = vowels_count - 17;\n\
    \    let vowels_count_from_middle16 = vowels_count - 18;\n    let vowels_count_from_middle17\
    \ = vowels_count - 19;\n    let vowels_count_from_middle18 = vowels_count - 20;\n\
    \    let vowels_count_from_middle19 = vowels_count - 21;\n    let vowels_count_from_middle20\
    \ = vowels_count - 22;\n    let vowels_count_from_middle21 = vowels_count - 23;\n\
    \    let vowels_count_from_middle22 = vowels_count - 24;\n    let vowels_count_from_middle23\
    \ = vowels_count - 25;\n    let vowels_count_from_middle24 = vowels_count - 26;\n\
    \    let vowels_count_from_middle25 = vowels_count - 27;\n    let vowels_count_from_middle26\
    \ = vowels_count - 28;\n    let vowels_count_from_middle27 = vowels_count - 29;\n\
    \    let vowels_count_from_middle28 = vowels_count - 30;\n    let vowels_count_from_middle29\
    \ = vowels_count - 31;\n    let vowels_count_from_middle30 = vowels_count - 32;\n\
    \    let vowels_count_from_middle31 = vowels_count - 33;\n    let vowels_count_from_middle32\
    \ = vowels_count - 34;\n    let vowels_count_from_middle33 = vowels_count \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpabkg4moc.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCountFromRight = word.length - vowelsCount;\n\
    \    let vowelsCountFromLeft = vowelsCount - 1;\n    let vowelsCountFromRightAndLeft\
    \ = vowelsCountFromRight + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftFromRight\
    \ = vowelsCountFromRight + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftFromLeft\
    \ = vowelsCountFromRight + vowelsCountFromLeft;\n    let vowelsCountFromLeftAndRight\
    \ = vowelsCountFromLeft + vowelsCountFromRight;\n    let vowelsCountFromLeftAndRightFromRight\
    \ = vowelsCountFromLeft + vowelsCountFromRight;\n    let vowelsCountFromLeftAndRightFromLeft\
    \ = vowelsCountFromLeft + vowelsCountFromRight;\n    let vowelsCountFromRightAndLeftFromRightAndLeft\
    \ = vowelsCountFromRightAndLeft + vowelsCountFromLeftAndRight;\n    let vowelsCountFromRightAndLeftFromLeftAndRight\
    \ = vowelsCountFromRightAndLeft + vowelsCountFromLeftAndRight;\n    let vowelsCountFromLeftAndRightFromRightAndLeft\
    \ = vowelsCountFromLeftAndRight + vowelsCountFromRightAndLeft;\n    let vowelsCountFromLeftAndRightFromLeftAndRight\
    \ = vowelsCountFromLeftAndRight + vowelsCountFromRightAndLeft;\n    let vowelsCountFromRightAndLeftFromRightAndLeftFromRight\
    \ = vowelsCountFromRightAndLeftFromRight + vowelsCountFromLeftAndRightFromRight;\n\
    \    let vowelsCountFromRightAndLeftFromLeftAndRightFromRight = vowelsCountFromRightAndLeftFromLeft\
    \ + vowelsCountFromLeftAndRightFromRight;\n    let vowelsCountFromLeftAndRightFromRightAndLeftFromRight\
    \ = vowelsCountFromLeftAndRightFromRight + vowelsCountFromRightAndLeftFromRight;\n\
    \    let vowelsCountFromLeftAndRightFromLeftAndRightFromRight = vowelsCountFromLeftAndRightFromRight\
    \ + vowelsCountFromRightAndLeftFromRight;\n    let vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeft\
    \ = vowelsCountFromRightAndLeftFromRightAndLeft + vowelsCountFromLeftAndRightFromLeftAndRight;\n\
    \    let vowelsCountFromRightAndLeftFromLeftAndRightFromRightAndLeft = vowelsCountFromRightAndLeftFromLeftAnd\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp2x78v5s.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7q61xf06.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps409kzl4.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArr_length = vowelsArr.length;\n    let vowels_length = word.length\
    \ - 1;\n    let vowels_index = -1;\n    let vowels_index_length = -1;\n    for(let\
    \ i = 0; i < vowelsArr_length; i++){\n        if(word.indexOf(vowelsArr[i]) >\
    \ -1){\n            vowels_index = i;\n            vowels_index_length = vowelsArr[i].length;\n\
    \            break;\n        }\n    }\n    if(vowels_index == -1){\n        return\
    \ \"\";\n    }\n    let vowels_index_start = vowels_index + vowels_index_length\
    \ - 1;\n    let vowels_index_end = vowels_index + vowels_index_length;\n    let\
    \ vowels_index_start_length = vowels_index_start.length;\n    let vowels_index_end_length\
    \ = vowels_index_end.length;\n    let vowels_index_start_end = vowels_index_start\
    \ + vowels_index_end_length;\n    let vowels_index_start_end_length = vowels_index_start_end.length;\n\
    \    let vowels_index_start_end_end_length = vowels_index_start_end_length + vowels_index_length;\n\
    \    let vowels_index_start_end_end_end_length = vowels_index_start_end_end_length\
    \ + vowels_index_length;\n    let vowels_index_start_end_end_end_end_length =\
    \ vowels_index_start_end_end_end_end_length + vowels_index_length;\n    let vowels_index_start_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_end_end_length + vowels_index_length;\n   \
    \ let vowels_index_start_end_end_end_end_end_end_length = vowels_index_start_end_end_end_end_end_end_length\
    \ + vowels_index_length;\n    let vowels_index_start_end_end_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_end_end_end_length + vowels_index_length;\n\
    \    let vowels_index_start_end_end_end_end_end_end_end_end_length = vowels_index_start_end_end_end_end_end_end_end_end_length\
    \ + vowels_index_length;\n    let vowels_index_start_end_end_end_end_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_end_end_end_end_end_end_length + vowels_index_length;\n\
    \    let vowels_index_start_end_end_end_end_end_end_end_end_end_end_length = vowels_index_start_end_end_end_end_end_end_end_end_end_length\
    \ + vowels_index_length;\n    let vowels_index_start_end_end_end_end_end_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_end_end_end_end_end_end_end_length + vowels_index_length;\n\
    \    let vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9qykm2s9.js:47\n    let vowels_index_start_end_end_end_end_end_end_end_end_end_end_length\
    \ = vowels_index_start_end_end_end_end_end_end_end_end_end_end_length + vowels_index_length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowels_index_start_end_end_end_end_end_end_end_end_end_end_length'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd6f_4ot6.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max =\
    \ 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n\
    \    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n  \
    \  let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let\
    \ vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min\
    \ = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min =\
    \ 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n    let\
    \ vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max =\
    \ 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n\
    \    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n  \
    \  let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let\
    \ vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min\
    \ = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min =\
    \ 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n    let\
    \ vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max =\
    \ 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n\
    \    let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n  \
    \  let vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let\
    \ vowels_index_count_min = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min\
    \ = 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min =\
    \ 0;\n    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_7mfu0s4.js:22\n    let vowels_index_count_max = 0;\n        ^\n\
    \nSyntaxError: Identifier 'vowels_index_count_max' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = word.length - vowelsCount;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 1;\n    let vowelsCountFromRightAndLeft = vowelsCountFromRight\
    \ + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftAndVowelsCount =\
    \ vowelsCountFromRightAndLeft + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCount + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCount + vowelsCount;\n \
    \   let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCount + vowelsCount;\n\
    \    let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ = vowelsCountFromRightAndLeftAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCountAndVowelsCount\
    \ + vowelsCount;\n    let vowels\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi29tik57.js:28\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    var vowels_count_from_right_to_left = vowels_count - 5;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    var vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    var vowels_count_from_right_to_middle = vowels_count - 8;\n    var\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    var vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1h4awa2n.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = \"aeiouAEIOU\";\n\tlet vowels_count = vowels.length;\n\tlet vowels_count_from_right\
    \ = word.length - vowels_count;\n\tlet vowels_count_from_left = vowels_count -\
    \ 1;\n\tlet vowels_count_from_left_to_right = vowels_count - vowels_count_from_right;\n\
    \tlet vowels_count_from_right_to_left = vowels_count_from_right - vowels_count_from_left;\n\
    \tlet vowels_count_from_left_to_right_to_left = vowels_count_from_left_to_right\
    \ - vowels_count_from_right_to_left;\n\tlet vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_right_to_left - vowels_count_from_left_to_right;\n\tlet\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right;\n\tlet vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right - vowels_count_from_right_to_left_to_right;\n\
    \tlet vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count_from_right_to_left_to_right_to_left\
    \ - vowels_count_from_left_to_right_to_left_to_right;\n\tlet vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left - vowels_count_from_right_to_left_to_right_to_left;\n\
    \tlet vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left;\n\tlet vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right - vowels_count_from_right_to_left_to_right_to_left_to_right;\n\
    \tlet vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right_to_left;\n\
    \tlet vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n\tlet\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxzjqt0ar.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n \
    \   let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n       \
    \ vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n \
    \   for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n\
    \    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i\
    \ = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n   \
    \ let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i =\
    \ 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n \
    \   let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n       \
    \ vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    \n    let vowelsCount = vowels.length;\n    let vowels\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgicqv_0o.js:23\n    let vowelsCount = vowels.length;\n        ^\n\
    \nSyntaxError: Identifier 'vowelsCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels_count = vowels.length;\n    vowels_count_right = vowels_count\
    \ - 1;\n    vowels_count_left = vowels_count - 2;\n    vowels_count_left_right\
    \ = vowels_count_left + vowels_count_right;\n    vowels_count_left_right_left\
    \ = vowels_count_left + vowels_count_right + vowels_count_left;\n    vowels_count_left_right_left_right\
    \ = vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left;\n    vowels_count_left_right_left_right_right = vowels_count_left\
    \ + vowels_count_right + vowels_count_left + vowels_count_right + vowels_count_left\
    \ + vowels_count_right + vowels_count_left + vowels_count_right;\n    vowels_count_left_right_left_right_right_right\
    \ = vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_right;\n    vowels_count_left_right_left_right_right_right_right\
    \ = vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_right + vowels_count_left\
    \ + vowels_count_right + vowels_count_right + vowels_count_right;\n    vowels_count_left_right_left_right_right_right_right_right\
    \ = vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_left + vowels_count_right + vowels_count_right + vowels_count_left\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + vowels_count_right\
    \ + vowels_count_right + vowels_count_right + vowels_count_left + \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdq5i33i0.js:28\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw_jx759_.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvfsn22r4.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right_to_left =\
    \ vowels_count_from_left_to_right - vowels_count_from_right_to_left;\n    var\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_right_to_left -\
    \ vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left - vowels_count_from_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left;\n    var vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left - vowels_count_from_right_to_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    var vowels_count_from_right_to_left_to_right_to_left_to_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp361utvc1.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount =\
    \ vowels.length;\n    var vowelsCountRight = vowelsCount - 1;\n    var vowelsCountLeft\
    \ = vowelsCount - 2;\n    var vowelsCountRightLeft = vowelsCount - 3;\n    var\
    \ vowelsCountRightRight = vowelsCount - 4;\n    var vowelsCountLeftRight = vowelsCount\
    \ - 5;\n    var vowelsCountLeftLeft = vowelsCount - 6;\n    var vowelsCountLeftRightLeft\
    \ = vowelsCount - 7;\n    var vowelsCountLeftLeftRight = vowelsCount - 8;\n  \
    \  var vowelsCountLeftLeftLeftRight = vowelsCount - 9;\n    var vowelsCountLeftLeftLeftLeftRight\
    \ = vowelsCount - 10;\n    var vowelsCountLeftLeftLeftLeftRightLeft = vowelsCount\
    \ - 11;\n    var vowelsCountLeftLeftLeftLeftRightRightRight = vowelsCount - 12;\n\
    \    var vowelsCountLeftLeftLeftLeftRightRightLeftRight = vowelsCount - 13;\n\
    \    var vowelsCountLeftLeftLeftLeftRightRightRightLeftRightLeft = vowelsCount\
    \ - 14;\n    var vowelsCountLeftLeftLeftRightRightRightLeftRightRightRight = vowelsCount\
    \ - 15;\n    var vowelsCountLeftLeftLeftRightRightRightLeftRightRightLeftRight\
    \ = vowelsCount - 16;\n    var vowelsCountLeftLeftLeftRightRightRightLeftRightRightLeftRightLeftRight\
    \ = vowelsCount - 17;\n    var vowelsCountLeftLeftLeftRightRightLeftRightRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 18;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 19;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 20;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = vowelsCount - 21;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightRightRight\
    \ = vowelsCount - 22;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightRightLeft\
    \ = vowelsCount - 23;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightRightRight\
    \ = vowelsCount - 24;\n    var vowelsCountLeftLeftLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightRightLeft\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5uzbfr_1.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount >\
    \ 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n        let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n        let vowelsIndexMid = (vowelsIndexMin +\
    \ vowelsIndexMax) / 2;\n        let vowelsIndexMidValue = vowelsIndex[vowelsIndexMid];\n\
    \        let vowelsIndexMidValue = vowelsIndexMidValue.toLowerCase();\n      \
    \  let vowelsIndexMidValueIndex = vowelsIndex.indexOf(vowelsIndexMidValue);\n\
    \        let vowelsIndexMidValueIndexCount = vowelsIndex.filter(item => item ===\
    \ vowelsIndexMidValue).length;\n        if(vowelsIndexMidValueIndexCount === vowelsIndexCount){\n\
    \            return vowelsIndexMidValue;\n        }\n        if(vowelsIndexMidValueIndexCount\
    \ === vowelsIndexCount - 1){\n            return vowelsIndexMidValue.charAt(vowelsIndexMidValueIndex\
    \ + 1);\n        }\n        if(vowelsIndexMidValueIndexCount === vowelsIndexCount\
    \ - 2){\n            return vowelsIndexMidValue.charAt(vowelsIndexMidValueIndex\
    \ + 2);\n        }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1n8pcm_i.js:31\n        let vowelsIndexMidValue = vowelsIndexMidValue.toLowerCase();\n\
    \            ^\n\nSyntaxError: Identifier 'vowelsIndexMidValue' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_min_index\
    \ = 0;\n    let vowels_index_count_max_index = 0;\n    \n    for(let i = 0; i\
    \ < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowels_index++;\n\
    \            if(vowels_index == vowels_count){\n                vowels_index_count++;\n\
    \                if(vowels_index_count == vowels_count){\n                   \
    \ vowels_index_count_max++;\n                    if(vowels_index_count_max ==\
    \ vowels_count){\n                        vowels_index_count_min++;\n        \
    \                if(vowels_index_count_min == vowels_count){\n               \
    \             vowels_index_count_min_index++;\n                            if(vowels_index_count_min_index\
    \ == vowels_count){\n                                vowels_index_count_max_index++;\n\
    \                                if(vowels_index_count_max_index == vowels_count){\n\
    \                                    return word[i];\n                       \
    \         }\n                            }\n                        }\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpg1i87kim.js:56:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg1i87kim.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArrLen = vowelsArr.length;\n    let vowelsArrIndex = 0;\n    let\
    \ vowelsArrIndex2 = vowelsArrLen - 1;\n    let vowelsArrIndex3 = vowelsArrLen\
    \ - 2;\n    let vowelsArrIndex4 = vowelsArrLen - 3;\n    let vowelsArrIndex5 =\
    \ vowelsArrLen - 4;\n    let vowelsArrIndex6 = vowelsArrLen - 5;\n    let vowelsArrIndex7\
    \ = vowelsArrLen - 6;\n    let vowelsArrIndex8 = vowelsArrLen - 7;\n    let vowelsArrIndex9\
    \ = vowelsArrLen - 8;\n    let vowelsArrIndex10 = vowelsArrLen - 9;\n    let vowelsArrIndex11\
    \ = vowelsArrLen - 10;\n    let vowelsArrIndex12 = vowelsArrLen - 11;\n    let\
    \ vowelsArrIndex13 = vowelsArrLen - 12;\n    let vowelsArrIndex14 = vowelsArrLen\
    \ - 13;\n    let vowelsArrIndex15 = vowelsArrLen - 14;\n    let vowelsArrIndex16\
    \ = vowelsArrLen - 15;\n    let vowelsArrIndex17 = vowelsArrLen - 16;\n    let\
    \ vowelsArrIndex18 = vowelsArrLen - 17;\n    let vowelsArrIndex19 = vowelsArrLen\
    \ - 18;\n    let vowelsArrIndex20 = vowelsArrLen - 19;\n    let vowelsArrIndex21\
    \ = vowelsArrLen - 20;\n    let vowelsArrIndex22 = vowelsArrLen - 21;\n    let\
    \ vowelsArrIndex23 = vowelsArrLen - 22;\n    let vowelsArrIndex24 = vowelsArrLen\
    \ - 23;\n    let vowelsArrIndex25 = vowelsArrLen - 24;\n    let vowelsArrIndex26\
    \ = vowelsArrLen - 25;\n    let vowelsArrIndex27 = vowelsArrLen - 26;\n    let\
    \ vowelsArrIndex28 = vowelsArrLen - 27;\n    let vowelsArrIndex29 = vowelsArrLen\
    \ - 28;\n    let vowelsArrIndex30 = vowelsArrLen - 29;\n    let vowelsArrIndex31\
    \ = vowelsArrLen - 30;\n    let vowelsArrIndex32 = vowelsArrLen - 31;\n    let\
    \ vowelsArrIndex33 = vowelsArrLen - 32;\n    let vowelsArrIndex34 = vowelsArrLen\
    \ - 33;\n    let vowelsArrIndex35 = \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8jt5ylgn.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_found = false;\n    let vowel_found_index = 0;\n\
    \    let vowel_found_index = 0;\n    let consonants = word.split(\"\");\n    let\
    \ consonants_count = consonants.length;\n    let consonant_found = false;\n  \
    \  let consonant_found_index = 0;\n    let consonant_found_index = 0;\n    for(let\
    \ i = 0; i < consonants_count; i++){\n        if(vowels.includes(consonants[i])){\n\
    \            consonant_found = true;\n            consonant_found_index = i;\n\
    \        }\n    }\n    for(let i = consonants_count; i > 0; i--){\n        if(vowels.includes(consonants[i])){\n\
    \            consonant_found = true;\n            consonant_found_index = i;\n\
    \        }\n    }\n    if(consonant_found){\n        for(let i = consonant_found_index\
    \ + 1; i < consonants_count; i++){\n            if(vowels.includes(consonants[i])){\n\
    \                vowel_found = true;\n                vowel_found_index = i;\n\
    \            }\n        }\n    }\n    if(vowel_found){\n        for(let i = vowel_found_index\
    \ - 1; i >= 0; i--){\n            if(vowels.includes(consonants[i])){\n      \
    \          vowel_found = true;\n                vowel_found_index = i;\n     \
    \       }\n        }\n    }\n    if(vowel_found && consonant_found){\n       \
    \ return vowels[vowel_found_index];\n    }\n    return \"\";\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplex93duw.js:20\n    let vowel_found_index = 0;\n        ^\n\nSyntaxError:\
    \ Identifier 'vowel_found_index' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = word.length - vowelsCount;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 1;\n    let vowelsCountFromRightAndLeft = vowelsCountFromRight\
    \ + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftFromRight = vowelsCountFromRight\
    \ + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftFromLeft = 0;\n \
    \   let vowelsCountFromRightAndLeftFromLeftFromRight = 0;\n    let vowelsCountFromRightAndLeftFromLeftFromLeft\
    \ = 0;\n    \n    for(let i = 0; i < vowelsCountFromRight; i++){\n        if(word.charAt(i)\
    \ === vowels[i]){\n            return vowels[i];\n        }\n    }\n    for(let\
    \ i = 0; i < vowelsCountFromLeft; i++){\n        if(word.charAt(i) === vowels[i]){\n\
    \            return vowels[i];\n        }\n    }\n    for(let i = 0; i < vowelsCountFromRightAndLeft;\
    \ i++){\n        if(word.charAt(i) === vowels[i]){\n            return vowels[i];\n\
    \        }\n    }\n    for(let i = 0; i < vowelsCountFromRightAndLeftFromRight;\
    \ i++){\n        if(word.charAt(i) === vowels[i]){\n            return vowels[i];\n\
    \        }\n    }\n    for(let i = 0; i < vowelsCountFromRightAndLeftFromLeft;\
    \ i++){\n        if(word.charAt(i) === vowels[i]){\n            return vowels[i];\n\
    \        }\n    }\n    for(let i = 0; i < vowelsCountFromRightAndLeftFromLeftFromRight;\
    \ i++){\n        if(word.charAt(i) === vowels[i]){\n            return vowels[i];\n\
    \        }\n    }\n    for(let i = 0; i < vowelsCountFromRightAndLeftFromLeftFromLeft;\
    \ i++){\n        if(word.charAt(i) === vowels[i]){\n            return vowels[i];\n\
    \        }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmp427_rpov.js:69:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp427_rpov.js:84:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowel_found\
    \ = true;\n            vowel_position = i;\n        }\n    }\n    if(vowel_found){\n\
    \        let consonants = word.substring(vowel_position).split('');\n        let\
    \ consonants_count = consonants.length;\n        let consonant_found = false;\n\
    \        let consonant_position = 0;\n        for(let i = 0; i < consonants_count;\
    \ i++){\n            if(consonants.includes(vowels[i])){\n                consonant_found\
    \ = true;\n                consonant_position = i;\n            }\n        }\n\
    \        if(consonant_found){\n            let vowel_distance = vowel_position\
    \ - consonant_position;\n            if(vowel_distance < 0){\n               \
    \ return \"\";\n            }\n            if(vowel_distance === 0){\n       \
    \         return vowels[vowel_position];\n            }\n            if(vowel_distance\
    \ === 1){\n                return vowels[vowel_position-1];\n            }\n \
    \           if(vowel_distance === 2){\n                return vowels[vowel_position-2];\n\
    \            }\n            if(vowel_distance === 3){\n                return\
    \ vowels[vowel_position-3];\n            }\n            if(vowel_distance ===\
    \ 4){\n                return vowels[vowel_position-4];\n            }\n     \
    \       if(vowel_distance === 5){\n                return vowels[vowel_position-5];\n\
    \            }\n            if(vowel_distance === 6){\n                return\
    \ vowels[vowel_position-6];\n            }\n            if(vowel_distance ===\
    \ 7){\n                return vowels[vowel_position-7];\n            }\n     \
    \       if(vowel_distance === 8){\n                return vowels[vowel_position-8];\n\
    \            }\n            if(vowel_distance === 9){\n                return\
    \ vowels[vowel_position-9];\n            }\n            if(vowel_distance ===\
    \ 10){\n                return vowels[vowel_position-10];\n            }\n   \
    \         if(vowel_distance === 11){\n                return vowels[vowel_position-11];\n\
    \            }\n            if(vowel_distance === 12){\n                return\
    \ vowels[vowel_position-12];\n            }\n            if(vowel_distance ===\
    \ 13){\n                return vowels[vowel_position-13];\n            }\n   \
    \         if(vowel_distance === 14){\n                return vowels[vowel_position-14];\n\
    \            }\n            if(vowel_distance === 15){\n                return\
    \ vowels[vowel_position-15];\n            }\n            if(vowel_distance ===\
    \ 16){\n                return vowels[vowel_position-16];\n            }\n   \
    \         if(vowel_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9qpy1h7z.js:94\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsCountLeft = word.length - vowelsCount;\n    var vowelsCountRight\
    \ = vowelsCount - 1;\n    var vowelsCountRight1 = word.length - vowelsCount;\n\
    \    var vowelsCountRight2 = word.length - vowelsCount;\n    var vowelsCountRight3\
    \ = word.length - vowelsCount;\n    var vowelsCountRight4 = word.length - vowelsCount;\n\
    \    var vowelsCountRight5 = word.length - vowelsCount;\n    var vowelsCountRight6\
    \ = word.length - vowelsCount;\n    var vowelsCountRight7 = word.length - vowelsCount;\n\
    \    var vowelsCountRight8 = word.length - vowelsCount;\n    var vowelsCountRight9\
    \ = word.length - vowelsCount;\n    var vowelsCountRight10 = word.length - vowelsCount;\n\
    \    var vowelsCountRight11 = word.length - vowelsCount;\n    var vowelsCountRight12\
    \ = word.length - vowelsCount;\n    var vowelsCountRight13 = word.length - vowelsCount;\n\
    \    var vowelsCountRight14 = word.length - vowelsCount;\n    var vowelsCountRight15\
    \ = word.length - vowelsCount;\n    var vowelsCountRight16 = word.length - vowelsCount;\n\
    \    var vowelsCountRight17 = word.length - vowelsCount;\n    var vowelsCountRight18\
    \ = word.length - vowelsCount;\n    var vowelsCountRight19 = word.length - vowelsCount;\n\
    \    var vowelsCountRight20 = word.length - vowelsCount;\n    var vowelsCountRight21\
    \ = word.length - vowelsCount;\n    var vowelsCountRight22 = word.length - vowelsCount;\n\
    \    var vowelsCountRight23 = word.length - vowelsCount;\n    var vowelsCountRight24\
    \ = word.length - vowelsCount;\n    var vowelsCountRight25 = word.length - vowelsCount;\n\
    \    var vowelsCountRight26 = word.length - vowelsCount;\n    var vowelsCountRight27\
    \ = word.length - vowelsCount;\n    var vowelsCountRight28 = word.length - vowelsCount;\n\
    \    var vowelsCountRight29 = word.length - vowelsCount;\n    var vowelsCountRight30\
    \ = word.length - vowelsCount;\n    var vowelsCountRight31 = word.length - vowelsCount;\n\
    \    var vowelsCountRight32 = word.length - vowelsCount;\n    var vowelsCountRight33\
    \ = word.length - vowelsCount;\n    var vowelsCountRight34 = word.length - vowelsCount;\n\
    \    var vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpry7dsqth.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsCount2 = vowelsCount-1;\n  let vowelsCount3 = vowelsCount-2\n  let\
    \ vowelsCount4 = vowelsCount-3\n  let vowelsCount5 = vowelsCount-4\n  let vowelsCount6\
    \ = vowelsCount-5\n  let vowelsCount7 = vowelsCount-6\n  let vowelsCount8 = vowelsCount-7\n\
    \  let vowelsCount9 = vowelsCount-8\n  let vowelsCount10 = vowelsCount-9\n  let\
    \ vowelsCount11 = vowelsCount-10\n  let vowelsCount12 = vowelsCount-11\n  let\
    \ vowelsCount13 = vowelsCount-12\n  let vowelsCount14 = vowelsCount-13\n  let\
    \ vowelsCount15 = vowelsCount-14\n  let vowelsCount16 = vowelsCount-15\n  let\
    \ vowelsCount17 = vowelsCount-16\n  let vowelsCount18 = vowelsCount-17\n  let\
    \ vowelsCount19 = vowelsCount-18\n  let vowelsCount20 = vowelsCount-19\n  let\
    \ vowelsCount21 = vowelsCount-20\n  let vowelsCount22 = vowelsCount-21\n  let\
    \ vowelsCount23 = vowelsCount-22\n  let vowelsCount24 = vowelsCount-23\n  let\
    \ vowelsCount25 = vowelsCount-24\n  let vowelsCount26 = vowelsCount-25\n  let\
    \ vowelsCount27 = vowelsCount-26\n  let vowelsCount28 = vowelsCount-27\n  let\
    \ vowelsCount29 = vowelsCount-28\n  let vowelsCount30 = vowelsCount-29\n  let\
    \ vowelsCount31 = vowelsCount-30\n  let vowelsCount32 = vowelsCount-31\n  let\
    \ vowelsCount33 = vowelsCount-32\n  let vowelsCount34 = vowelsCount-33\n  let\
    \ vowelsCount35 = vowelsCount-34\n  let vowelsCount36 = vowelsCount-35\n  let\
    \ vowelsCount37 = vowelsCount-36\n  let vowelsCount38 = vowelsCount-37\n  let\
    \ vowelsCount39 = vowelsCount-38\n  let vowelsCount40 = vowelsCount-39\n  let\
    \ vowelsCount41 = vowelsCount-40\n  let vowelsCount42 = vowelsCount-41\n  let\
    \ vowelsCount43 = vowelsCount-42\n  let vowelsCount44 = vowelsCount-43\n  let\
    \ vowelsCount45 = vowel\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpib2e118k.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    \n    for(var i = 0; i < word.length; i++){\n \
    \       if(word[i] === \"a\" || word[i] === \"e\" || word[i] === \"i\" || word[i]\
    \ === \"o\" || word[i] === \"u\"){\n            return word[i];\n        }\n \
    \   }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpxncfbs53.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxncfbs53.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountLeft = word.length - vowelsCount;\n    let vowelsCountRight\
    \ = word.length - 1;\n    let vowelsCountRight1 = word.length - 2;\n    let vowelsCountRight2\
    \ = word.length - 3;\n    let vowelsCountRight3 = word.length - 4;\n    let vowelsCountRight4\
    \ = word.length - 5;\n    let vowelsCountRight5 = word.length - 6;\n    let vowelsCountRight6\
    \ = word.length - 7;\n    let vowelsCountRight7 = word.length - 8;\n    let vowelsCountRight8\
    \ = word.length - 9;\n    let vowelsCountRight9 = word.length - 10;\n    let vowelsCountRight10\
    \ = word.length - 11;\n    let vowelsCountRight11 = word.length - 12;\n    let\
    \ vowelsCountRight12 = word.length - 13;\n    let vowelsCountRight13 = word.length\
    \ - 14;\n    let vowelsCountRight14 = word.length - 15;\n    let vowelsCountRight15\
    \ = word.length - 16;\n    let vowelsCountRight16 = word.length - 17;\n    let\
    \ vowelsCountRight17 = word.length - 18;\n    let vowelsCountRight18 = word.length\
    \ - 19;\n    let vowelsCountRight19 = word.length - 20;\n    let vowelsCountRight20\
    \ = word.length -21;\n    let vowelsCountRight21 = word.length - 22;\n    let\
    \ vowelsCountRight22 = word.length - 23;\n    let vowelsCountRight23 = word.length\
    \ - 24;\n    let vowelsCountRight24 = word.length - 25;\n    let vowelsCountRight25\
    \ = word.length - 26;\n    let vowelsCountRight26 = word.length - 27;\n    let\
    \ vowelsCountRight27 = word.length - 28;\n    let vowelsCountRight28 = word.length\
    \ - 29;\n    let vowelsCountRight29 = word.length - 30;\n    let vowelsCountRight30\
    \ = word.length - 31;\n    let vowelsCountRight31 = word.length - 32;\n    let\
    \ vowelsCountRight32 = word.length - 33;\n    let vowelsCountRight33 = word.length\
    \ - 34;\n    let vowelsCountRight34 = word.length - 35;\n    let vowelsCountRight35\
    \ = word.length - 36;\n    let vowelsCountRight36 = word.length - 37;\n    let\
    \ vowelsCountRight37 = word.length - 38;\n    let vowelsCountRight38 = word.length\
    \ - 39;\n    let vowelsCountRight39 = word.length - 40;\n    let vowelsCountRight40\
    \ = word.length - 41;\n    let vowelsCountRight41 = word.length - 42;\n    let\
    \ vowelsCountRight4\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8k9341_5.js:61\n    let vowelsCountRight4\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsCountRight4' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeft\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr1ogihiu.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCountMax\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMin = 0;\n  let vowelsIndexCountMinMax\
    \ = vowelsCount - 2;\n  let vowelsIndexCountMaxMin = vowelsCount - 3;\n  for(let\
    \ i = 0; i < vowelsCount; i++){\n    if(word.indexOf(vowels[i]) > -1){\n     \
    \ vowelsIndex.push(i);\n      vowelsIndexCount++;\n    }\n  }\n  if(vowelsIndexCount\
    \ > 0){\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexMinMax = Math.min(Math.min(...vowelsIndex),\
    \ Math.max(...vowelsIndex));\n    let vowelsIndexMaxMin = Math.max(Math.max(...vowelsIndex),\
    \ Math.min(...vowelsIndex));\n    if(vowelsIndexCount === 1){\n      return vowels[vowelsIndexMin];\n\
    \    }\n    if(vowelsIndexCount === 2){\n      return vowels[vowelsIndexMin] +\
    \ vowels[vowelsIndexMax];\n    }\n    if(vowelsIndexCount === 3){\n      return\
    \ vowels[vowelsIndexMin] + vowels[vowelsIndexMax] + vowels[vowelsIndexMinMax];\n\
    \    }\n    if(vowelsIndexCount === 4){\n      return vowels[vowelsIndexMin] +\
    \ vowels[vowelsIndexMax] + vowels[vowelsIndexMinMax] + vowels[vowelsIndexMaxMin];\n\
    \    }\n    if(vowelsIndexCount === 5){\n      return vowels[vowelsIndexMin] +\
    \ vowels[vowelsIndexMax] + vowels[vowelsIndexMinMax] + vowels[vowelsIndexMaxMin]\
    \ + vowels[vowelsIndexMinMax];\n    }\n    if(vowelsIndexCount === 6){\n     \
    \ return vowels[vowelsIndexMin] + vowels[vowelsIndexMax] + vowels[vowelsIndexMinMax]\
    \ + vowels[vowelsIndexMaxMin] + vowels[vowelsIndexMinMax] + vowels[vowelsIndexMaxMin];\n\
    \    }\n    if(vowelsIndexCount === 7){\n      return vowels[vowelsIndexMin] +\
    \ vowels[vowelsIndexMax] + vowels[vowelsIndexMinMax] + vowels[vowelsIndexMaxMin]\
    \ + vowels[vowelsIndexMinMax] + vowels[vowelsIndexMaxMin] + vowels[vowelsIndexMinMax];\n\
    \    }\n    if(vowelsIndexCount === 8){\n      return vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvfol1a2w.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_max\
    \ = 0;\n    var vowels_index_min = 0;\n    \n    for(var i = word.length-1; i\
    \ >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowels_index\
    \ = i;\n            vowels_index_count++;\n            if(vowels_index_count >\
    \ vowels_index_max){\n                vowels_index_max = vowels_index_count;\n\
    \            }\n            if(vowels_index_count < vowels_index_min){\n     \
    \           vowels_index_min = vowels_index_count;\n            }\n        }\n\
    \    }\n    \n    if(vowels_index_max > vowels_index_min){\n        return word[vowels_index];\n\
    \    }\n    else{\n        return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmp5xoixmv3.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5xoixmv3.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_min_index\
    \ = 0;\n    let vowels_index_count_max_index = 0;\n    let vowels_index_count_max_index2\
    \ = 0;\n    let vowels_index_count_max_index3 = 0;\n    let vowels_index_count_max_index4\
    \ = 0;\n    let vowels_index_count_max_index5 = 0;\n    let vowels_index_count_max_index6\
    \ = 0;\n    let vowels_index_count_max_index7 = 0;\n    let vowels_index_count_max_index8\
    \ = 0;\n    let vowels_index_count_max_index9 = 0;\n    let vowels_index_count_max_index10\
    \ = 0;\n    let vowels_index_count_max_index11 = 0;\n    let vowels_index_count_max_index12\
    \ = 0;\n    let vowels_index_count_max_index13 = 0;\n    let vowels_index_count_max_index14\
    \ = 0;\n    let vowels_index_count_max_index15 = 0;\n    let vowels_index_count_max_index16\
    \ = 0;\n    let vowels_index_count_max_index17 = 0;\n    let vowels_index_count_max_index18\
    \ = 0;\n    let vowels_index_count_max_index19 = 0;\n    let vowels_index_count_max_index20\
    \ = 0;\n    let vowels_index_count_max_index21 = 0;\n    let vowels_index_count_max_index22\
    \ = 0;\n    let vowels_index_count_max_index23 = 0;\n    let vowels_index_count_max_index24\
    \ = 0;\n    let vowels_index_count_max_index25 = 0;\n    let vowels_index_count_max_index26\
    \ = 0;\n    let vowels_index_count_max_index27 = 0;\n    let vowels_index_count_max_index28\
    \ = 0;\n    let vowels_index_count_max_index29 = 0;\n    let vowels_index_count_max_index30\
    \ = 0;\n    let vowels_index_count_max_index31 = 0;\n    let vowels_index_count_max_index32\
    \ = 0;\n    let vowels_index_count_max_index33 = 0;\n    let vowels_index_count_max_index34\
    \ = 0;\n    let vowels_index_count_max_index35 = 0;\n    let vowels_index_count_max_index36\
    \ = 0;\n    let vowels_index_count_max_index37 = 0;\n    let vowels_index_count_max_index38\
    \ = 0;\n    let vowels_index_count_max_index39 = 0;\n    let vowels_index_count_max_index40\
    \ = 0;\n    let vowels_index_count_max_index41 = 0;\n    let vowels_index_count_max_index42\
    \ = 0;\n    let vowels_index_count_max_index43 = 0;\n    let vowels_index_count_max_index44\
    \ = 0;\n    let vowels_index_count_max_index45 = 0;\n    let vowels_index_count_max_index46\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpih_kicd5.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz0sm36ws.js:26\n    let vowels_index_count_max_index2 = 0;\n  \
    \      ^\n\nSyntaxError: Identifier 'vowels_index_count_max_index2' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 3;\n    let vowels_count_from_middle4 = vowels_count / 4;\n\
    \    let vowels_count_from_middle5 = vowels_count / 5;\n    let vowels_count_from_middle6\
    \ = vowels_count / 6;\n    let vowels_count_from_middle7 = vowels_count / 7;\n\
    \    let vowels_count_from_middle8 = vowels_count / 8;\n    let vowels_count_from_middle9\
    \ = vowels_count / 9;\n    let vowels_count_from_middle10 = vowels_count / 10;\n\
    \    let vowels_count_from_middle11 = vowels_count / 11;\n    let vowels_count_from_middle12\
    \ = vowels_count / 12;\n    let vowels_count_from_middle13 = vowels_count / 13;\n\
    \    let vowels_count_from_middle14 = vowels_count / 14;\n    let vowels_count_from_middle15\
    \ = vowels_count / 15;\n    let vowels_count_from_middle16 = vowels_count / 16;\n\
    \    let vowels_count_from_middle17 = vowels_count / 17;\n    let vowels_count_from_middle18\
    \ = vowels_count / 18;\n    let vowels_count_from_middle19 = vowels_count / 19;\n\
    \    let vowels_count_from_middle20 = vowels_count / 20;\n    let vowels_count_from_middle21\
    \ = vowels_count / 21;\n    let vowels_count_from_middle22 = vowels_count / 22;\n\
    \    let vowels_count_from_middle23 = vowels_count / 23;\n    let vowels_count_from_middle24\
    \ = vowels_count / 24;\n    let vowels_count_from_middle25 = vowels_count / 25;\n\
    \    let vowels_count_from_middle26 = vowels_count / 26;\n    let vowels_count_from_middle27\
    \ = vowels_count / 27;\n    let vowels_count_from_middle28 = vowels_count / 28;\n\
    \    let vowels_count_from_middle29 = vowels_count / 29;\n    let vowels_count_from_middle30\
    \ = vowels_count / 30;\n    let vowels_count_from_middle31 = vowels_count / 31;\n\
    \    let vowels_count_from_middle32 = vowels_count / 32;\n    let vowels_count_from_middle33\
    \ = vowels_count / 33;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3jmso1pz.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    \n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    \n    let vowelsIndexCountDiff = vowelsIndexCountMax\
    \ - vowelsIndexCountMin;\n    \n    let vowelsIndexCountDiffMax = Math.max(...vowelsIndex.map(x\
    \ => x - vowelsIndexCountMin));\n    let vowelsIndexCountDiffMin = Math.min(...vowelsIndex.map(x\
    \ => x - vowelsIndexCountMax));\n    \n    let vowelsIndexCountDiffDiff = vowelsIndexCountDiffMax\
    \ - vowelsIndexCountDiffMin;\n    \n    let vowelsIndexCountDiffDiffMax = Math.max(...vowelsIndex.map(x\
    \ => x - vowelsIndexCountDiffMin));\n    let vowelsIndexCountDiffDiffMin = Math.min(...vowelsIndex.map(x\
    \ => x - vowelsIndexCountDiffMax));\n    \n    let vowelsIndexCountDiffDiffDiff\
    \ = vowelsIndexCountDiffDiffMax - vowelsIndexCountDiffDiffMin;\n    \n    let\
    \ vowelsIndexCountDiffDiffDiffMax = Math.max(...vowelsIndex.map(x => x - vowelsIndexCountDiffDiffMin));\n\
    \    let vowelsIndexCountDiffDiffDiffMin = Math.min(...vowelsIndex.map(x => x\
    \ - vowelsIndexCountDiffDiffMax));\n    \n    let vowelsIndexCountDiffDiffDiffDiff\
    \ = vowelsIndexCountDiffDiffDiffMax - vowelsIndexCountDiffDiffDiffMin;\n    \n\
    \    let vowelsIndexCountDiffDiffDiffDiffMax = Math.max(...vowelsIndex.map(x =>\
    \ x - vowelsIndexCountDiffDiffDiffMin));\n    let vowelsIndexCountDiffDiffDiffDiffMin\
    \ = Math.min(...vowelsIndex.map(x => x - vowelsIndexCountDiffDiffDiffMax));\n\
    \    \n    let vowelsIndexCountDiffDiffDiffDiffDiff = vowelsIndexCountDiffDiffDiffDiffMax\
    \ - vowelsIndexCountDiffDiffDiffDiffMin;\n    \n    let vowelsIndexCountDiffDiffDiffDiffDiffMax\
    \ = Math.max(...vowelsIndex.map(x => x - vowelsIndexCountDiffDiffDiffDiffMin));\n\
    \    let vowelsIndexCountDiffDiffDiffDiffDiffMin = Math.min(...vowelsIndex.map(x\
    \ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnzwylm7j.js:50\n    let vowelsIndexCountDiffDiffDiffDiffDiffMin\
    \ = Math.min(...vowelsIndex.map(x \n                                         \
    \                                     ^\n\nSyntaxError: missing ) after argument\
    \ list\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = ['a','e','i','o','u'];\n   \
    \ var vowelsCount = vowels.length;\n    var vowelsIndex = [];\n    for(var i=0;i<vowelsCount;i++){\n\
    \        vowelsIndex.push(vowels.indexOf((word.charAt(word.length-1-i))));\n \
    \   }\n    var vowelsIndexCount = vowelsIndex.length;\n    var vowelsIndexMin\
    \ = Math.min(...vowelsIndex);\n    var vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    var vowelsIndexSum = vowelsIndexMax + vowelsIndexMin - vowelsIndexMin;\n\
    \    var vowelsIndexSum2 = vowelsIndexSum * vowelsIndexSum;\n    var vowelsIndexSum3\
    \ = vowelsIndexSum2 * vowelsIndexSum;\n    var vowelsIndexSum4 = vowelsIndexSum3\
    \ * vowelsIndexSum;\n    var vowelsIndexSum5 = vowelsIndexSum4 * vowelsIndexSum;\n\
    \    var vowelsIndexSum6 = vowelsIndexSum5 * vowelsIndexSum;\n    var vowelsIndexSum7\
    \ = vowelsIndexSum6 * vowelsIndexSum;\n    var vowelsIndexSum8 = vowelsIndexSum7\
    \ * vowelsIndexSum;\n    var vowelsIndexSum9 = vowelsIndexSum8 * vowelsIndexSum;\n\
    \    var vowelsIndexSum10 = vowelsIndexSum9 * vowelsIndexSum;\n    var vowelsIndexSum11\
    \ = vowelsIndexSum10 * vowelsIndexSum;\n    var vowelsIndexSum12 = vowelsIndexSum11\
    \ * vowelsIndexSum;\n    var vowelsIndexSum13 = vowelsIndexSum12 * vowelsIndexSum;\n\
    \    var vowelsIndexSum14 = vowelsIndexSum13 * vowelsIndexSum;\n    var vowelsIndexSum15\
    \ = vowelsIndexSum14 * vowelsIndexSum;\n    var vowelsIndexSum16 = vowelsIndexSum15\
    \ * vowelsIndexSum;\n    var vowelsIndexSum17 = vowelsIndexSum16 * vowelsIndexSum;\n\
    \    var vowelsIndexSum18 = vowelsIndexSum17 * vowelsIndexSum;\n    var vowelsIndexSum19\
    \ = vowelsIndexSum18 * vowelsIndexSum;\n    var vowelsIndexSum20 = vowelsIndexSum19\
    \ * vowelsIndexSum;\n    var vowelsIndexSum21 = vowelsIndexSum20 * vowelsIndexSum;\n\
    \    var vowelsIndexSum22 = vowelsIndexSum21 * vowelsIndexSum;\n    var vowelsIndexSum23\
    \ = vowelsIndex\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1q4w4864.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_found = false;\n    let vowel_found_index = 0;\n\
    \    let vowel_found_index = 0;\n    let vowel_found_count = 0;\n    let vowel_found_word\
    \ = \"\";\n    for(let i = word.length-1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n\
    \            vowel_found = true;\n            vowel_found_index = i;\n       \
    \     vowel_found_index = i;\n            vowel_found_count = 0;\n           \
    \ vowel_found_word = word[i];\n        }\n        if(vowel_found && vowel_found_count\
    \ < vowels_count){\n            vowel_found_count++;\n        }\n        if(vowel_found\
    \ && vowel_found_count == vowels_count){\n            vowel_found = false;\n \
    \       }\n    }\n    return vowel_found_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6fk_2uf7.js:20\n    let vowel_found_index = 0;\n        ^\n\nSyntaxError:\
    \ Identifier 'vowel_found_index' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexSum = 0;\n    for(let i = 0; i < vowelsIndexCount;\
    \ i++){\n        vowelsIndexSum += vowelsIndex[i];\n    }\n    let vowelsIndexSumCount\
    \ = vowelsIndexSum;\n    let vowelsIndexSumCountCount = 0;\n    for(let i = 0;\
    \ i < vowelsIndexCount; i++){\n        vowelsIndexSumCount += vowelsIndex[i];\n\
    \        vowelsIndexSumCountCount += vowelsIndex[i];\n    }\n    let vowelsIndexSumCountCountCountCount\
    \ = 0;\n    for(let i = 0; i < vowelsIndexCount; i++){\n        vowelsIndexSumCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCount += vowelsIndex[i];\n\
    \        vowelsIndexSumCountCountCountCount += vowelsIndex[i];\n    }\n    let\
    \ vowelsIndexSumCountCountCountCountCount = 0;\n    for(let i = 0; i < vowelsIndexCount;\
    \ i++){\n        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n\
    \        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n\
    \    }\n    let vowelsIndexSumCountCountCountCountCountCount = 0;\n    for(let\
    \ i = 0; i < vowelsIndexCount; i++){\n        vowelsIndexSumCountCountCountCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n\
    \        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n\
    \    }\n    let vowelsIndexSumCountCountCountCountCountCount = 0;\n    for(let\
    \ i = 0; i < vowelsIndexCount; i++){\n        vowelsIndexSumCountCountCountCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n\
    \        vowelsIndexSumCountCountCountCountCount += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCountCount\
    \ += vowelsIndex[i];\n        vowelsIndexSumCountCountCountCount\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt_bwj_fu.js:54\n    let vowelsIndexSumCountCountCountCountCountCount\
    \ = 0;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountCountCountCountCountCount'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_positions = [];\n    for(let i = 0; i < word.length; i++){\n  \
    \      if(vowels.includes(word.charAt(i))){\n            vowel_positions.push(i);\n\
    \        }\n    }\n    if(vowel_positions.length == 0){\n        return \"\";\n\
    \    }\n    let vowel_positions_count = vowel_positions.length;\n    let vowel_positions_sorted\
    \ = vowel_positions.sort((a,b)=>a-b);\n    let vowel_positions_sorted_count =\
    \ vowel_positions_sorted.length;\n    let vowel_positions_sorted_last = vowel_positions_sorted[vowel_positions_sorted_count-1];\n\
    \    let vowel_positions_sorted_first = vowel_positions_sorted[0];\n    let vowel_positions_sorted_first_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_first);\n    let vowel_positions_sorted_last_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_last);\n    let vowel_positions_sorted_first_last_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count);\n\
    \    let vowel_positions_sorted_first_last_count_index = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+1);\n\
    \    let vowel_positions_sorted_first_last_count_index_count = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+2);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+3);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count_count = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+4);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count_count_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+5);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count_count_count_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+6);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count_count_count_count_count_count\
    \ = vowel_positions_sorted.indexOf(vowel_positions_sorted_first,vowel_positions_sorted_last_count+7);\n\
    \    let vowel_positions_sorted_first_last_count_index_count_count_count_count_count_count_count_count_count\
    \ = vowel_position\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjug37w3_.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowels_count = vowels.length;\n\
    \  let vowels_count_from_right = vowels_count - 1;\n  let vowels_count_from_left\
    \ = vowels_count - 2;\n  let vowels_count_from_middle = vowels_count - 3;\n  let\
    \ vowels_count_from_middle2 = vowels_count - 4;\n  let vowels_count_from_middle3\
    \ = vowels_count - 5;\n  let vowels_count_from_middle4 = vowels_count - 6;\n \
    \ let vowels_count_from_middle5 = vowels_count - 7;\n  let vowels_count_from_middle6\
    \ = vowels_count - 8;\n  let vowels_count_from_middle7 = vowels_count - 9;\n \
    \ let vowels_count_from_middle8 = vowels_count - 10;\n  let vowels_count_from_middle9\
    \ = vowels_count - 11;\n  let vowels_count_from_middle10 = vowels_count - 12;\n\
    \  let vowels_count_from_middle11 = vowels_count - 13;\n  let vowels_count_from_middle12\
    \ = vowels_count - 14;\n  let vowels_count_from_middle13 = vowels_count - 15;\n\
    \  let vowels_count_from_middle14 = vowels_count - 16;\n  let vowels_count_from_middle15\
    \ = vowels_count - 17;\n  let vowels_count_from_middle16 = vowels_count - 18;\n\
    \  let vowels_count_from_middle17 = vowels_count - 19;\n  let vowels_count_from_middle18\
    \ = vowels_count - 20;\n  let vowels_count_from_middle19 = vowels_count - 21;\n\
    \  let vowels_count_from_middle20 = vowels_count - 22;\n  let vowels_count_from_middle21\
    \ = vowels_count - 23;\n  let vowels_count_from_middle22 = vowels_count - 24;\n\
    \  let vowels_count_from_middle23 = vowels_count - 25;\n  let vowels_count_from_middle24\
    \ = vowels_count - 26;\n  let vowels_count_from_middle25 = vowels_count - 27;\n\
    \  let vowels_count_from_middle26 = vowels_count - 28;\n  let vowels_count_from_middle27\
    \ = vowels_count - 29;\n  let vowels_count_from_middle28 = vowels_count - 30;\n\
    \  let vowels_count_from_middle29 = vowels_count - 31;\n  let vowels_count_from_middle30\
    \ = vowels_count - 32;\n  let vowels_count_from_middle31 = vowels_count - 33;\n\
    \  let vowels_count_from_middle32 = vowels_count - 34;\n  let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2scvxm55.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountInWord = vowels.filter(v=>word.includes(v)).length;\n    let\
    \ vowelsCountInWord2 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord3 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord4 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord5 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord6 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord7 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord8 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord9 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord10 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord11 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord12 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord13 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord14 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)=>a-b).reverse();\n\
    \    let vowelsCountInWord15 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjqqep8dn.js:32\n    let vowelsCountInWord15 = vowels.filter(v=>word.includes(v)).map(v=>v.length).sort((a,b)\n\
    \                                                                            \
    \               ^\n\nSyntaxError: missing ) after argument list\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    \n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i])\
    \ > -1){\n            for(var j = i; j < word.length; j++){\n                if(word[j]\
    \ === word[i]){\n                    if(j - i + 1 >= word.length){\n         \
    \               return word[i];\n                    }\n                    else{\n\
    \                        return word[j];\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return \"\";\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmple0wmmw4.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmple0wmmw4.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx0rsjfgm.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = vowels_count - 1;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle_to_right = vowels_count_from_middle\
    \ + 1;\n    var vowels_count_from_middle_to_left = vowels_count_from_middle -\
    \ 1;\n    var vowels_count_from_left_to_right = vowels_count_from_left - 1;\n\
    \    var vowels_count_from_right_to_left = vowels_count_from_right + 1;\n    var\
    \ vowels_count_from_left_to_middle = vowels_count_from_left - 1;\n    var vowels_count_from_right_to_middle\
    \ = vowels_count_from_right + 1;\n    var vowels_count_from_middle_to_left = vowels_count_from_middle\
    \ + 1;\n    var vowels_count_from_middle_to_right = vowels_count_from_middle +\
    \ 1;\n    var vowels_count_from_left_to_middle = vowels_count_from_left - 1;\n\
    \    var vowels_count_from_right_to_middle = vowels_count_from_right + 1;\n  \
    \  var vowels_count_from_middle_to_left = vowels_count_from_middle + 1;\n    var\
    \ vowels_count_from_middle_to_right = vowels_count_from_middle + 1;\n    var vowels_count_from_left_to_middle\
    \ = vowels_count_from_left - 1;\n    var vowels_count_from_right_to_middle = vowels_count_from_right\
    \ + 1;\n    var vowels_count_from_middle_to_left = vowels_count_from_middle +\
    \ 1;\n    var vowels_count_from_middle_to_right = vowels_count_from_middle + 1;\n\
    \    var vowels_count_from_left_to_middle = vowels_count_from_left - 1;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count_from_right + 1;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count_from_middle + 1;\n    var vowels_count_from_middle_to_right =\
    \ vowels_count_from_middle + 1;\n    var vowels_count_from_left_to_middle = vowels_count_from_left\
    \ - 1;\n    var vowels_count_from_right_to_middle = vowels_count_from_right +\
    \ 1;\n    var vowels_count_from_middle_to_left = vowels_count_from_middle + 1;\n\
    \    var vowels_count_from_middle_to_right = vowels_count_from_middle + 1;\n \
    \   var vowels_count_from_left_to_middle = vowels_count_from_left - 1;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count_from_right + 1;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count_from_middle + 1;\n    var vowels_count_from_middle_to_right =\
    \ vowels_count_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw5mke6db.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_positions = [];\n    let vowel_positions_count = vowel_positions.length;\n\
    \    let vowel_positions_count_max = Math.max(...vowel_positions);\n    let vowel_positions_count_min\
    \ = Math.min(...vowel_positions);\n    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_positions_count_min_index = vowel_positions.indexOf(vowel_positions_count_min);\n\
    \    let vowel_positions_count_max_value = vowel_positions[vowel_positions_count_max_index];\n\
    \    let vowel_positions_count_min_value = vowel_positions[vowel_positions_count_min_index];\n\
    \    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_positions_count_min_index = vowel_positions.indexOf(vowel_positions_count_min);\n\
    \    let vowel_positions_count_max_value = vowel_positions[vowel_positions_count_max_index];\n\
    \    let vowel_positions_count_min_value = vowel_positions[vowel_positions_count_min_index];\n\
    \    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_positions_count_min_index = vowel_positions.indexOf(vowel_positions_count_min);\n\
    \    let vowel_positions_count_max_value = vowel_positions[vowel_positions_count_max_index];\n\
    \    let vowel_positions_count_min_value = vowel_positions[vowel_positions_count_min_index];\n\
    \    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_positions_count_min_index = vowel_positions.indexOf(vowel_positions_count_min);\n\
    \    let vowel_positions_count_max_value = vowel_positions[vowel_positions_count_max_index];\n\
    \    let vowel_positions_count_min_value = vowel_positions[vowel_positions_count_min_index];\n\
    \    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_positions_count_min_index = vowel_positions.indexOf(vowel_positions_count_min);\n\
    \    let vowel_positions_count_max_value = vowel_positions[vowel_positions_count_max_index];\n\
    \    let vowel_positions_count_min_value = vowel_positions[vowel_positions_count_min_index];\n\
    \    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \    let vowel_position\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi_vmvi8l.js:26\n    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \        ^\n\nSyntaxError: Identifier 'vowel_positions_count_max_index' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppm9a7wta.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvqeplmkb.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2q4j2uod.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_middle = word.length\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle2 = word.length\
    \ - vowels_count_from_left;\n    let vowels_count_from_middle3 = word.length -\
    \ vowels_count_from_right;\n    let vowels_count_from_middle4 = word.length -\
    \ vowels_count_from_left;\n    let vowels_count_from_middle5 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle6 = word.length - vowels_count_from_left;\n \
    \   let vowels_count_from_middle7 = word.length - vowels_count_from_right;\n \
    \   let vowels_count_from_middle8 = word.length - vowels_count_from_left;\n  \
    \  let vowels_count_from_middle9 = word.length - vowels_count_from_right;\n  \
    \  let vowels_count_from_middle10 = word.length - vowels_count_from_left;\n  \
    \  let vowels_count_from_middle11 = word.length - vowels_count_from_right;\n \
    \   let vowels_count_from_middle12 = word.length - vowels_count_from_left;\n \
    \   let vowels_count_from_middle13 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle14 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle15 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle16 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle17 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle18 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle19 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle20 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle21 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle22 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle23 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle24 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle25 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle26 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle27 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle28 = word.length - vowels_count_from_left;\n\
    \    let vowels_count_from_middle29 = word.length - vowels_count_from_right;\n\
    \    let vowels_count_from_middle30 = word.length - vowels_count_from_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvcxtchkk.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxtf0kopp.js:36\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n\
    \    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let vowelsIndexSumCount2\
    \ = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3 = vowelsIndexSumCount\
    \ / 3;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount / 4;\n    let vowelsIndexSumCount5\
    \ = vowelsIndexSumCount / 5;\n    let vowelsIndexSumCount6 = vowelsIndexSumCount\
    \ / 6;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount / 7;\n    let vowelsIndexSumCount8\
    \ = vowelsIndexSumCount / 8;\n    let vowelsIndexSumCount9 = vowelsIndexSumCount\
    \ / 9;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount / 10;\n    let vowelsIndexSumCount11\
    \ = vowelsIndexSumCount / 11;\n    let vowelsIndexSumCount12 = vowelsIndexSumCount\
    \ / 12;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount / 13;\n    let vowelsIndexSumCount14\
    \ = vowelsIndexSumCount / 14;\n    let vowelsIndexSumCount15 = vowelsIndexSumCount\
    \ / 15;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount / 16;\n    let vowelsIndexSumCount17\
    \ = vowelsIndexSumCount / 17;\n    let vowelsIndexSumCount18 = vowelsIndexSumCount\
    \ / 18;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount / 19;\n    let vowelsIndexSumCount20\
    \ = vowelsIndexSumCount / 20;\n    let vowelsIndexSumCount21 = vowelsIndexSumCount\
    \ / 21;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount / 22;\n    let vowelsIndexSumCount23\
    \ = vowelsIndexSumCount / 23;\n    let vowelsIndexSumCount24 = vowelsIndexSumCount\
    \ / 24;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount / 25;\n    let vowelsIndexSumCount26\
    \ = vowelsIndexSumCount / 26;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpecx1affm.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgsrhr_1_.js:100\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count - 1;\n\
    \    let vowels_count_from_middle2 = vowels_count - 1;\n    let vowels_count_from_middle3\
    \ = vowels_count - 1;\n    let vowels_count_from_middle4 = vowels_count - 1;\n\
    \    let vowels_count_from_middle5 = vowels_count - 1;\n    let vowels_count_from_middle6\
    \ = vowels_count - 1;\n    let vowels_count_from_middle7 = vowels_count - 1;\n\
    \    let vowels_count_from_middle8 = vowels_count - 1;\n    let vowels_count_from_middle9\
    \ = vowels_count - 1;\n    let vowels_count_from_middle10 = vowels_count - 1;\n\
    \    let vowels_count_from_middle11 = vowels_count - 1;\n    let vowels_count_from_middle12\
    \ = vowels_count - 1;\n    let vowels_count_from_middle13 = vowels_count - 1;\n\
    \    let vowels_count_from_middle14 = vowels_count - 1;\n    let vowels_count_from_middle15\
    \ = vowels_count - 1;\n    let vowels_count_from_middle16 = vowels_count - 1;\n\
    \    let vowels_count_from_middle17 = vowels_count - 1;\n    let vowels_count_from_middle18\
    \ = vowels_count - 1;\n    let vowels_count_from_middle19 = vowels_count - 1;\n\
    \    let vowels_count_from_middle20 = vowels_count - 1;\n    let vowels_count_from_middle21\
    \ = vowels_count - 1;\n    let vowels_count_from_middle22 = vowels_count - 1;\n\
    \    let vowels_count_from_middle23 = vowels_count - 1;\n    let vowels_count_from_middle24\
    \ = vowels_count - 1;\n    let vowels_count_from_middle25 = vowels_count - 1;\n\
    \    let vowels_count_from_middle26 = vowels_count - 1;\n    let vowels_count_from_middle27\
    \ = vowels_count - 1;\n    let vowels_count_from_middle28 = vowels_count - 1;\n\
    \    let vowels_count_from_middle29 = vowels_count - 1;\n    let vowels_count_from_middle30\
    \ = vowels_count - 1;\n    let vowels_count_from_middle31 = vowels_count - 1;\n\
    \    let vowels_count_from_middle32 = vowels_count - 1;\n    let vowels_count_from_middle33\
    \ = vowels_count - 1;\n    let vowels_count_from_middle34 = vowels_count - 1;\n\
    \    let vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpksok0x5l.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowelsCount = vowels.length;\n\t\
    let vowelsIndex = [];\n\tlet vowelsIndexCount = 0;\n\tlet vowelsIndexLength =\
    \ 0;\n\tlet vowelsIndexMax = 0;\n\tlet vowelsIndexMin = 0;\n\tlet vowelsIndexMaxLength\
    \ = 0;\n\tlet vowelsIndexMinLength = 0;\n\tlet vowelsIndexMaxIndex = 0;\n\tlet\
    \ vowelsIndexMinIndex = 0;\n\tlet vowelsIndexMaxIndexLength = 0;\n\tlet vowelsIndexMinIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndex = 0;\n\tlet vowelsIndexMinIndexIndex =\
    \ 0;\n\tlet vowelsIndexMaxIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndex = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndexIndexLength = 0;\n\tlet vowelsIndexMinIndexIndexLength\
    \ = 0;\n\tlet vowelsIndexMaxIndexIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv1sn94i5.js:34\n\tlet vowelsIndexMinIndexIndexLength = 0;\n\t \
    \   ^\n\nSyntaxError: Identifier 'vowelsIndexMinIndexIndexLength' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCountMax\
    \ = vowelsCount - 1;\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n\
    \        if(vowelsIndexCount === vowelsIndexCountMax){\n            vowelsIndex.sort((a,b)=>a-b);\n\
    \            vowelsIndex.push(word.length);\n            vowelsIndexCount = 0;\n\
    \        }\n    }\n    let vowelsIndexMax = vowelsIndex.length - 1;\n    let vowelsIndexMin\
    \ = 0;\n    let vowelsIndexMinMax = vowelsIndex.length - 1;\n    for(let i = vowelsIndexMax;\
    \ i >= vowelsIndexMin; i--){\n        if(vowelsIndex[i] > vowelsIndexMin){\n \
    \           vowelsIndexMin = i;\n        }\n        if(vowelsIndex[i] < vowelsIndexMinMax){\n\
    \            vowelsIndexMinMax = i;\n        }\n    }\n    let vowelsIndexMinMaxVowel\
    \ = vowelsIndex[vowelsIndexMinMax];\n    let vowelsIndexMinVowel = vowelsIndex[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowel = vowelsIndex[vowelsIndexMax];\n    let vowelsIndexVowel\
    \ = vowelsIndex[vowelsIndexMaxVowel];\n    let vowelsIndexVowelVowel = vowelsIndex[vowelsIndexMinVowel];\n\
    \    let vowelsIndexVowelVowelVowel = vowelsIndex[vowelsIndexMinMaxVowel];\n \
    \   let vowelsIndexVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinMaxVowelVowel];\n\
    \    let vowelsIndexVowelVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinMaxVowelVowelVowel];\n\
    \    let vowelsIndexVowelVowelVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinMaxVowelVowelVowelVowelVowel];\n\
    \    let vowelsIndexVowelVowelVowelVowelVowelVowelVowel = vowelsIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpeqivrkmq.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 2;\n    let vowels_count_from_middle4 = vowels_count / 2;\n\
    \    let vowels_count_from_middle5 = vowels_count / 2;\n    let vowels_count_from_middle6\
    \ = vowels_count / 2;\n    let vowels_count_from_middle7 = vowels_count / 2;\n\
    \    let vowels_count_from_middle8 = vowels_count / 2;\n    let vowels_count_from_middle9\
    \ = vowels_count / 2;\n    let vowels_count_from_middle10 = vowels_count / 2;\n\
    \    let vowels_count_from_middle11 = vowels_count / 2;\n    let vowels_count_from_middle12\
    \ = vowels_count / 2;\n    let vowels_count_from_middle13 = vowels_count / 2;\n\
    \    let vowels_count_from_middle14 = vowels_count / 2;\n    let vowels_count_from_middle15\
    \ = vowels_count / 2;\n    let vowels_count_from_middle16 = vowels_count / 2;\n\
    \    let vowels_count_from_middle17 = vowels_count / 2;\n    let vowels_count_from_middle18\
    \ = vowels_count / 2;\n    let vowels_count_from_middle19 = vowels_count / 2;\n\
    \    let vowels_count_from_middle20 = vowels_count / 2;\n    let vowels_count_from_middle21\
    \ = vowels_count / 2;\n    let vowels_count_from_middle22 = vowels_count / 2;\n\
    \    let vowels_count_from_middle23 = vowels_count / 2;\n    let vowels_count_from_middle24\
    \ = vowels_count / 2;\n    let vowels_count_from_middle25 = vowels_count / 2;\n\
    \    let vowels_count_from_middle26 = vowels_count / 2;\n    let vowels_count_from_middle27\
    \ = vowels_count / 2;\n    let vowels_count_from_middle28 = vowels_count / 2;\n\
    \    let vowels_count_from_middle29 = vowels_count / 2;\n    let vowels_count_from_middle30\
    \ = vowels_count / 2;\n    let vowels_count_from_middle31 = vowels_count / 2;\n\
    \    let vowels_count_from_middle32 = vowels_count / 2;\n    let vowels_count_from_middle33\
    \ = vowels_count / 2;\n    let vowels_count_from_middle34 = vowels_count / 2;\n\
    \    let vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp105s7xhi.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(word.indexOf(vowels[i]));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMiddle\
    \ = Math.floor(vowelsIndexMax / 2);\n    let vowelsIndexMiddle2 = Math.floor(vowelsIndexMin\
    \ / 2);\n    let vowelsIndexMiddle3 = Math.floor(vowelsIndexMiddle / 2);\n   \
    \ let vowelsIndexMiddle4 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle5\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle6 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle7 = Math.floor(vowelsIndexMiddle / 2);\n   \
    \ let vowelsIndexMiddle8 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle9\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle10 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle11 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle12 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle13\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle14 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle15 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle16 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle17\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle18 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle19 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle20 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle21\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle22 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle23 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle24 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle25\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle26 = Math.floor(vowelsIndexMidd\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxbhl9244.js:50\n    let vowelsIndexMiddle26 = Math.floor(vowelsIndexMidd\n\
    \                                         ^^^^^^^^^^^^^^^\n\nSyntaxError: missing\
    \ ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    let vowels = ['a','e','i','o','u'];\n   \
    \ let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i =\
    \ 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    for(let i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    for(let i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    for(let i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    for(let i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    for(let i = word.length - 1; i >= 0; i--){\n        let index = vowelsIndex.indexOf(word.charAt(i));\n\
    \        if(index >= 0){\n            vowelsIndex.splice(index, 1);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu6i12u6y.js:29\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps409kzl4.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = vowels_count - 1;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle2 = vowels_count / 2;\n\
    \    var vowels_count_from_middle3 = vowels_count / 2;\n    var vowels_count_from_middle4\
    \ = vowels_count / 2;\n    var vowels_count_from_middle5 = vowels_count / 2;\n\
    \    var vowels_count_from_middle6 = vowels_count / 2;\n    var vowels_count_from_middle7\
    \ = vowels_count / 2;\n    var vowels_count_from_middle8 = vowels_count / 2;\n\
    \    var vowels_count_from_middle9 = vowels_count / 2;\n    var vowels_count_from_middle10\
    \ = vowels_count / 2;\n    var vowels_count_from_middle11 = vowels_count / 2;\n\
    \    var vowels_count_from_middle12 = vowels_count / 2;\n    var vowels_count_from_middle13\
    \ = vowels_count / 2;\n    var vowels_count_from_middle14 = vowels_count / 2;\n\
    \    var vowels_count_from_middle15 = vowels_count / 2;\n    var vowels_count_from_middle16\
    \ = vowels_count / 2;\n    var vowels_count_from_middle17 = vowels_count / 2;\n\
    \    var vowels_count_from_middle18 = vowels_count / 2;\n    var vowels_count_from_middle19\
    \ = vowels_count / 2;\n    var vowels_count_from_middle20 = vowels_count / 2;\n\
    \    var vowels_count_from_middle21 = vowels_count / 2;\n    var vowels_count_from_middle22\
    \ = vowels_count / 2;\n    var vowels_count_from_middle23 = vowels_count / 2;\n\
    \    var vowels_count_from_middle24 = vowels_count / 2;\n    var vowels_count_from_middle25\
    \ = vowels_count / 2;\n    var vowels_count_from_middle26 = vowels_count / 2;\n\
    \    var vowels_count_from_middle27 = vowels_count / 2;\n    var vowels_count_from_middle28\
    \ = vowels_count / 2;\n    var vowels_count_from_middle29 = vowels_count / 2;\n\
    \    var vowels_count_from_middle30 = vowels_count / 2;\n    var vowels_count_from_middle31\
    \ = vowels_count / 2;\n    var vowels_count_from_middle32 = vowels_count / 2;\n\
    \    var vowels_count_from_middle33 = vowels_count / 2;\n    var vowels_count_from_middle34\
    \ = vowels_count / 2;\n    var vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp08z38l3c.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n  \
    \  let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx7ivhxw_.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo = vowelsCount\
    \ - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let vowelsCountMinusFour\
    \ = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount - 5;\n    let\
    \ vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven = vowelsCount\
    \ - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let vowelsCountMinusNine\
    \ = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount - 10;\n    let\
    \ vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve =\
    \ vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n  \
    \  let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdhbmgofc.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_arr = [];\n    let\
    \ vowelsArr_arr_len = 0;\n    for(let i = 0; i < vowelsArr_len; i++){\n      \
    \  vowelsArr_arr.push(vowelsArr[i]);\n    }\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowelsArr_arr.indexOf(word.charAt(i)) !== -1){\n         \
    \   vowelsArr_arr_len++;\n        }\n    }\n    let vowelsArr_arr_arr_len = vowelsArr_arr.length;\n\
    \    let vowelsArr_arr_arr_arr = [];\n    for(let i = 0; i < vowelsArr_arr_arr_len;\
    \ i++){\n        vowelsArr_arr_arr_arr.push(vowelsArr_arr[i]);\n    }\n    let\
    \ vowelsArr_arr_arr_arr_len = vowelsArr_arr_arr.length;\n    let vowelsArr_arr_arr_arr_arr\
    \ = [];\n    for(let i = 0; i < vowelsArr_arr_arr_arr_len; i++){\n        vowelsArr_arr_arr_arr_arr.push(vowelsArr_arr_arr[i]);\n\
    \    }\n    let vowelsArr_arr_arr_arr_arr_len = vowelsArr_arr_arr_arr.length;\n\
    \    let vowelsArr_arr_arr_arr_arr_arr = [];\n    for(let i = 0; i < vowelsArr_arr_arr_arr_arr_len;\
    \ i++){\n        vowelsArr_arr_arr_arr_arr_arr.push(vowelsArr_arr_arr_arr[i]);\n\
    \    }\n    let vowelsArr_arr_arr_arr_arr_arr_len = vowelsArr_arr_arr_arr_arr.length;\n\
    \    let vowelsArr_arr_arr_arr_arr_arr_arr = [];\n    for(let i = 0; i < vowelsArr_arr_arr_arr_arr_arr_len;\
    \ i++){\n        vowelsArr_arr_arr_arr_arr_arr.push(vowelsArr_arr_arr_arr_arr[i]);\n\
    \    }\n    let vowelsArr_arr_arr_arr_arr_arr_arr_len = vowelsArr_arr_arr_arr_arr_arr.length;\n\
    \    let vowelsArr_arr_arr_arr_arr_arr_arr_arr = [];\n    for(let i = 0; i < vowelsArr_arr_arr_arr_arr_arr_arr_len;\
    \ i++){\n        vowelsArr_arr_arr_arr_arr_arr_arr.push(vowelsArr_arr_arr_arr_arr_arr[i]);\n\
    \    }\n    let vowelsArr_arr_arr_arr_arr_arr_arr_arr_len = vowelsArr_arr_arr_arr_arr_arr_arr.length;\n\
    \    let vowelsArr_arr_arr_arr_arr_arr_arr_arr_arr = [];\n    for(let i = 0; i\
    \ < vowelsArr_arr_arr_arr_arr_arr_arr_arr_arr_len\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppi6473d9.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i=0; i<vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMax\
    \ = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(null,\
    \ vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex2 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex2 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex3 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex3 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex4 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex4 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex5 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex5 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex6 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex6 = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex7 = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinV\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7mw3bv7q.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = 0;\n    let\
    \ vowelsIndex3 = 0;\n    let vowelsIndex4 = 0;\n    let vowelsIndex5 = 0;\n  \
    \  let vowelsIndex6 = 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8 = 0;\n\
    \    let vowelsIndex9 = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11\
    \ = 0;\n    let vowelsIndex12 = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14\
    \ = 0;\n    let vowelsIndex15 = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17\
    \ = 0;\n    let vowelsIndex18 = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20\
    \ = 0;\n    let vowelsIndex21 = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23\
    \ = 0;\n    let vowelsIndex24 = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26\
    \ = 0;\n    let vowelsIndex27 = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29\
    \ = 0;\n    let vowelsIndex30 = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32\
    \ = 0;\n    let vowelsIndex33 = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35\
    \ = 0;\n    let vowelsIndex36 = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38\
    \ = 0;\n    let vowelsIndex39 = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41\
    \ = 0;\n    let vowelsIndex42 = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44\
    \ = 0;\n    let vowelsIndex45 = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47\
    \ = 0;\n    let vowelsIndex48 = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50\
    \ = 0;\n    let vowelsIndex51 = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53\
    \ = 0;\n    let vowelsIndex54 = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56\
    \ = 0;\n    let vowelsIndex57 = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59\
    \ = 0;\n    let vowelsIndex60 = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62\
    \ = 0;\n    let vowelsIndex63 = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65\
    \ = 0;\n    let vowelsIndex66 = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68\
    \ = 0;\n    let vowelsIndex69 = 0;\n    let vowelsIndex70 = 0;\n    let vowelsIndex71\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcvbfmwrg.js:110\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_counter2 = 0;\n    let vowel_counter3\
    \ = 0;\n    let vowel_counter4 = 0;\n    let vowel_counter5 = 0;\n    let vowel_counter6\
    \ = 0;\n    let vowel_counter7 = 0;\n    let vowel_counter8 = 0;\n    let vowel_counter9\
    \ = 0;\n    let vowel_counter10 = 0;\n    let vowel_counter11 = 0;\n    let vowel_counter12\
    \ = 0;\n    let vowel_counter13 = 0;\n    let vowel_counter14 = 0;\n    let vowel_counter15\
    \ = 0;\n    let vowel_counter16 = 0;\n    let vowel_counter17 = 0;\n    let vowel_counter18\
    \ = 0;\n    let vowel_counter19 = 0;\n    let vowel_counter20 = 0;\n    let vowel_counter21\
    \ = 0;\n    let vowel_counter22 = 0;\n    let vowel_counter23 = 0;\n    let vowel_counter24\
    \ = 0;\n    let vowel_counter25 = 0;\n    let vowel_counter26 = 0;\n    let vowel_counter27\
    \ = 0;\n    let vowel_counter28 = 0;\n    let vowel_counter29 = 0;\n    let vowel_counter30\
    \ = 0;\n    let vowel_counter31 = 0;\n    let vowel_counter32 = 0;\n    let vowel_counter33\
    \ = 0;\n    let vowel_counter34 = 0;\n    let vowel_counter35 = 0;\n    let vowel_counter36\
    \ = 0;\n    let vowel_counter37 = 0;\n    let vowel_counter38 = 0;\n    let vowel_counter39\
    \ = 0;\n    let vowel_counter40 = 0;\n    let vowel_counter41 = 0;\n    let vowel_counter42\
    \ = 0;\n    let vowel_counter43 = 0;\n    let vowel_counter44 = 0;\n    let vowel_counter45\
    \ = 0;\n    let vowel_counter46 = 0;\n    let vowel_counter47 = 0;\n    let vowel_counter48\
    \ = 0;\n    let vowel_counter49 = 0;\n    let vowel_counter50 = 0;\n    let vowel_counter51\
    \ = 0;\n    let vowel_counter52 = 0;\n    let vowel_counter53 = 0;\n    let vowel_counter54\
    \ = 0;\n    let vowel_counter55 = 0;\n    let vowel_counter56 = 0;\n    let vowel_counter57\
    \ = 0;\n    let vowel_counter58 = 0;\n    let vowel_counter59 = 0;\n    let vowel_counter60\
    \ = 0;\n    let vowel_counter61 = 0;\n    let vowel_counter62 = 0;\n    let vowel_counter63\
    \ = 0;\n    let vowel_counter64 = 0;\n    let vowel_counter65 = 0;\n    let vowel_counter66\
    \ = 0;\n    let vowel_counter67 = 0;\n    let vowel_counter68 = 0;\n    let vowel_counter69\
    \ = 0;\n    let vowel_counter70 = 0;\n    let vowel_counter71 = 0;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp86pmgpl8.js:109\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndex2 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex2.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex2.length;\n    let vowelsIndex3 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex3.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex3.length;\n    let vowelsIndex4 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex4.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex4.length;\n    let vowelsIndex5 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex5.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex5.length;\n    let vowelsIndex6 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex6.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex6.length;\n    let vowelsIndex7 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex7.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex7.length;\n    let vowelsIndex8 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex8.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex8.length;\n    let vowelsIndex9 = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex9.push(vowels.indexOf(i));\n    }\n    let vowelsCount\
    \ = vowelsIndex9.length;\n    let vowelsIndex10 = [];\n    for(let i = 0; i <\
    \ vowelsCount; i++){\n        vowelsIndex10.push(vowels.indexOf(i));\n    }\n\
    \    let vowelsCount = vowelsIndex10.length;\n    let vowelsIndex11 = [];\n  \
    \  for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex11.push(vowels.indexOf(i));\n\
    \    }\n    let vowelsCount = vowelsIndex11.length;\n    let vowelsIndex12 = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex12.push(vowels.indexOf(i));\n\
    \    }\n    let vowelsCount = vowelsIndex12.length;\n    let vowel\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmj4414uu.js:22\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n\
    \  let vowelsIndex = 0;\n  let vowelsIndexCount = 0;\n  let vowelsIndexCountMax\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMin = 0;\n  let vowelsIndexCountMinMax\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMin = vowelsCount - 1;\n  let vowelsIndexCountMinMaxMin\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMax = vowelsCount - 1;\n  let\
    \ vowelsIndexCountMaxMinMaxMin = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMin\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMax = vowelsCount - 1;\n\
    \  let vowelsIndexCountMaxMinMaxMinMaxMin = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsCount\
    \ - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsCount - 1;\n  let\
    \ vowelsIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsCount\
    \ - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsCount - 1;\n\
    \  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsCount - 1;\n\
    \  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsCount - 1;\n\
    \  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsCount -\
    \ 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsCount\
    \ - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsCount\
    \ - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax =\
    \ vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n  let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_8scgmmq.js:27\n  let vowelsIndexCountMaxMinMaxMin = vowelsCount\
    \ - 1;\n      ^\n\nSyntaxError: Identifier 'vowelsIndexCountMaxMinMaxMin' has\
    \ already been declared\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - vowels_count_from_right;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle2 = vowels_count_from_middle\
    \ + vowels_count_from_left;\n    var vowels_count_from_middle3 = vowels_count_from_middle2\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle5 = vowels_count_from_middle4\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle6 = vowels_count_from_middle5\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle7 = vowels_count_from_middle6\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle9 = vowels_count_from_middle8\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle10 = vowels_count_from_middle9\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle11 = vowels_count_from_middle10\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle13 = vowels_count_from_middle12\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle14 = vowels_count_from_middle13\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle15 = vowels_count_from_middle14\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle16 = vowels_count_from_middle15\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle17 = vowels_count_from_middle16\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle18 = vowels_count_from_middle17\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle19 = vowels_count_from_middle18\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle21 = vowels_count_from_middle20\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle22 = vowels_count_from_middle21\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle23 = vowels_count_from_middle22\
    \ + vowels_count_from_right;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpifos1mfo.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgsrhr_1_.js:100\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = vowels_count - 1;\n    let vowels_index_count_min\
    \ = vowels_count - 2;\n    let vowels_index_count_min_max = vowels_count - 3;\n\
    \    let vowels_index_count_min_max_2 = vowels_count - 4;\n    let vowels_index_count_min_max_3\
    \ = vowels_count - 5;\n    let vowels_index_count_min_max_4 = vowels_count - 6;\n\
    \    let vowels_index_count_min_max_5 = vowels_count - 7;\n    let vowels_index_count_min_max_6\
    \ = vowels_count - 8;\n    let vowels_index_count_min_max_7 = vowels_count - 9;\n\
    \    let vowels_index_count_min_max_8 = vowels_count - 10;\n    let vowels_index_count_min_max_9\
    \ = vowels_count - 11;\n    let vowels_index_count_min_max_10 = vowels_count -\
    \ 12;\n    let vowels_index_count_min_max_11 = vowels_count - 13;\n    let vowels_index_count_min_max_12\
    \ = vowels_count - 14;\n    let vowels_index_count_min_max_13 = vowels_count -\
    \ 15;\n    let vowels_index_count_min_max_14 = vowels_count - 16;\n    let vowels_index_count_min_max_15\
    \ = vowels_count - 17;\n    let vowels_index_count_min_max_16 = vowels_count -\
    \ 18;\n    let vowels_index_count_min_max_17 = vowels_count - 19;\n    let vowels_index_count_min_max_18\
    \ = vowels_count - 20;\n    let vowels_index_count_min_max_19 = vowels_count -\
    \ 21;\n    let vowels_index_count_min_max_20 = vowels_count - 22;\n    let vowels_index_count_min_max_21\
    \ = vowels_count - 23;\n    let vowels_index_count_min_max_22 = vowels_count -\
    \ 24;\n    let vowels_index_count_min_max_23 = vowels_count - 25;\n    let vowels_index_count_min_max_24\
    \ = vowels_count - 26;\n    let vowels_index_count_min_max_25 = vowels_count -\
    \ 27;\n    let vowels_index_count_min_max_26 = vowels_count - 28;\n    let vowels_index_count_min_max_27\
    \ = vowels_count - 29;\n    let vowels_index_count_min_max_28 = vowels_count -\
    \ 30;\n    let vowels_index_count_min_max_29 = vowels_count - 31;\n    let vowels_index_count_min_max_30\
    \ = vowels_count - 32;\n    let vowels_index_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptel0z7hj.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    \n\
    \    let vowel_found = false;\n    let vowel_found_from_right = false;\n    \n\
    \    let vowel_found2 = false;\n    let vowel_found_from_right2 = false;\n   \
    \ \n    let vowel_found3 = false;\n    let vowel_found_from_right3 = false;\n\
    \    \n    let vowel_found4 = false;\n    let vowel_found_from_right4 = false;\n\
    \    \n    let vowel_found5 = false;\n    let vowel_found_from_right5 = false;\n\
    \    \n    let vowel_found6 = false;\n    let vowel_found_from_right6 = false;\n\
    \    \n    let vowel_found7 = false;\n    let vowel_found_from_right7 = false;\n\
    \    \n    let vowel_found8 = false;\n    let vowel_found_from_right8 = false;\n\
    \    \n    let vowel_found9 = false;\n    let vowel_found_from_right9 = false;\n\
    \    \n    let vowel_found10 = false;\n    let vowel_found_from_right10 = false;\n\
    \    \n    let vowel_found11 = false;\n    let vowel_found_from_right11 = false;\n\
    \    \n    let vowel_found12 = false;\n    let vowel_found_from_right12 = false;\n\
    \    \n    let vowel_found13 = false;\n    let vowel_found_from_right13 = false;\n\
    \    \n    let vowel_found14 = false;\n    let vowel_found_from_right14 = false;\n\
    \    \n    let vowel_found15 = false;\n    let vowel_found_from_right15 = false;\n\
    \    \n    let vowel_found16 = false;\n    let vowel_found_from_right16 = false;\n\
    \    \n    let vowel_found17 = false;\n    let vowel_found_from_right17 = false;\n\
    \    \n    let vowel_found18 = false;\n    let vowel_found_from_right18 = false;\n\
    \    \n    let vowel_found19 = false;\n    let vowel_found_from_right19 = false;\n\
    \    \n    let vowel_found20 = false;\n    let vowel_found_from_right20 = false;\n\
    \    \n    let vowel_found21 = false;\n    let vowel_found_from_right21 = false;\n\
    \    \n    let vowel_found22 = false;\n    let vowel_found_from_right22 = false;\n\
    \    \n    let vowel_found23 = false;\n    let vowel_found_from_right23 = false;\n\
    \    \n    let vowel_found24 = false;\n    let vowel_found_from_right24 = false;\n\
    \    \n    let vowel_found25 = false;\n    let vowel_found_from_right25 = false;\n\
    \    \n    let vowel_found26 = false;\n    let vowel_found_from_right26 = false;\n\
    \    \n    let vowel_found27 = false;\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0ey31yy3.js:121\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2\
    \ = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5\
    \ = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8\
    \ = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11\
    \ = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14\
    \ = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17\
    \ = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20\
    \ = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23\
    \ = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26\
    \ = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29\
    \ = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32\
    \ = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35\
    \ = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38\
    \ = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41\
    \ = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44\
    \ = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47\
    \ = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50\
    \ = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53\
    \ = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56\
    \ = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59\
    \ = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39arzf0q.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n    let vowelsCountMax\
    \ = vowelsCount - 1;\n    let vowelsCountMin = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinMax = 0;\n   \
    \ let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let\
    \ vowelsCountMinMaxIndex2 = 0;\n    let vowelsCountMinMaxIndex2 = 0;\n    let\
    \ vowelsCountMinMaxIndex2 = 0;\n    let vowelsCountMinMaxIndex3 = 0;\n    let\
    \ vowelsCountMinMaxIndex3 = 0;\n    let vowelsCountMinMaxIndex4 = 0;\n    let\
    \ vowelsCountMinMaxIndex4 = 0;\n    let vowelsCountMinMaxIndex5 = 0;\n    let\
    \ vowelsCountMinMaxIndex5 = 0;\n    let vowelsCountMinMaxIndex6 = 0;\n    let\
    \ vowelsCountMinMaxIndex6 = 0;\n    let vowelsCountMinMaxIndex7 = 0;\n    let\
    \ vowelsCountMinMaxIndex7 = 0;\n    let vowelsCountMinMaxIndex8 = 0;\n    let\
    \ vowelsCountMinMaxIndex8 = 0;\n    let vowelsCountMinMaxIndex9 = 0;\n    let\
    \ vowelsCountMinMaxIndex9 = 0;\n    let vowelsCountMinMaxIndex10 = 0;\n    let\
    \ vowelsCountMinMaxIndex10 = 0;\n    let vowelsCountMinMaxIndex11 = 0;\n    let\
    \ vowelsCountMinMaxIndex11 = 0;\n    let vowelsCountMinMaxIndex12 = 0;\n    let\
    \ vowelsCountMinMaxIndex12 = 0;\n    let vowelsCountMinMaxIndex13 = 0;\n    let\
    \ vowelsCountMinMaxIndex13 = 0;\n    let vowelsCountMinMaxIndex14 = 0;\n    let\
    \ vowelsCountMinMaxIndex14 = 0;\n    let vowelsCountMinMaxIndex15 = 0;\n    let\
    \ vowelsCountMinMaxIndex15 = 0;\n    let vowelsCountMinMaxIndex16 = 0;\n    let\
    \ vowelsCountMinMaxIndex16 = 0;\n    let vowelsCountMinMaxIndex17 = 0;\n    let\
    \ vowelsCountMinMaxIndex17 = 0;\n    let vowelsCountMinMaxIndex18 = 0;\n    let\
    \ vowelsCountMinMaxIndex18 = 0;\n    let vowelsCountMinMaxIndex19 = 0;\n    let\
    \ vowelsCountMinMaxIndex19 = 0;\n    let vowelsCountMinMaxIndex20 = 0;\n    let\
    \ vowelsCountMinMaxIndex20 = 0;\n    let vowelsCountMinMaxIndex21 = 0;\n    let\
    \ vowelsCountMinMaxIndex21 = 0;\n    let vowelsCountMinMaxIndex22 = 0;\n    let\
    \ vowelsCountMinMaxIndex22\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4f9rerh9.js:26\n    let vowelsCountMinMaxIndex = 0;\n        ^\n\
    \nSyntaxError: Identifier 'vowelsCountMinMaxIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = vowel_positions.length;\n    let vowel_position = 0;\n    let vowel_position_count\
    \ = 0;\n    let vowel_position_index = 0;\n    let vowel_position_index2 = 0;\n\
    \    let vowel_position_index3 = 0;\n    let vowel_position_index4 = 0;\n    let\
    \ vowel_position_index5 = 0;\n    let vowel_position_index6 = 0;\n    let vowel_position_index7\
    \ = 0;\n    let vowel_position_index8 = 0;\n    let vowel_position_index9 = 0;\n\
    \    let vowel_position_index10 = 0;\n    let vowel_position_index11 = 0;\n  \
    \  let vowel_position_index12 = 0;\n    let vowel_position_index13 = 0;\n    let\
    \ vowel_position_index14 = 0;\n    let vowel_position_index15 = 0;\n    let vowel_position_index16\
    \ = 0;\n    let vowel_position_index17 = 0;\n    let vowel_position_index18 =\
    \ 0;\n    let vowel_position_index19 = 0;\n    let vowel_position_index20 = 0;\n\
    \    let vowel_position_index21 = 0;\n    let vowel_position_index22 = 0;\n  \
    \  let vowel_position_index23 = 0;\n    let vowel_position_index24 = 0;\n    let\
    \ vowel_position_index25 = 0;\n    let vowel_position_index26 = 0;\n    let vowel_position_index27\
    \ = 0;\n    let vowel_position_index28 = 0;\n    let vowel_position_index29 =\
    \ 0;\n    let vowel_position_index30 = 0;\n    let vowel_position_index31 = 0;\n\
    \    let vowel_position_index32 = 0;\n    let vowel_position_index33 = 0;\n  \
    \  let vowel_position_index34 = 0;\n    let vowel_position_index35 = 0;\n    let\
    \ vowel_position_index36 = 0;\n    let vowel_position_index37 = 0;\n    let vowel_position_index38\
    \ = 0;\n    let vowel_position_index39 = 0;\n    let vowel_position_index40 =\
    \ 0;\n    let vowel_position_index41 = 0;\n    let vowel_position_index42 = 0;\n\
    \    let vowel_position_index43 = 0;\n    let vowel_position_index44 = 0;\n  \
    \  let vowel_position_index45 = 0;\n    let vowel_position_index46 = 0;\n    let\
    \ vowel_position_index47 = 0;\n    let vowel_position_index48 = 0;\n    let vowel_position_index49\
    \ = 0;\n    let vowel_position_index50 = 0;\n    let vowel_position_index51 =\
    \ 0;\n    let vowel_position_index52 = 0;\n    let vowel_position_index53 = 0;\n\
    \    let vowel_position_index54 = 0;\n    let vowel_position_index55 = 0;\n  \
    \  let vowel_position_index56 = 0;\n    let vowel_position_index57 = 0;\n    let\
    \ vowel_position_index58 = 0;\n    let vowel_position\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsv5zrpuv.js:80\n    let vowel_position\n        ^\n\nSyntaxError:\
    \ Identifier 'vowel_position' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_both = vowels_count_from_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_both_within_word = vowels_count_from_both\
    \ - word.length;\n    let vowels_count_from_both_within_word_from_right = vowels_count_from_both_within_word\
    \ - vowels_count_from_right;\n    let vowels_count_from_both_within_word_from_left\
    \ = vowels_count_from_both_within_word - vowels_count_from_left;\n    let vowels_count_from_both_within_word_from_both\
    \ = vowels_count_from_both_within_word - vowels_count_from_both;\n    let vowels_count_from_both_within_word_from_both_within_word\
    \ = vowels_count_from_both_within_word_from_right + vowels_count_from_both_within_word_from_left;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_right =\
    \ vowels_count_from_both_within_word_from_both - vowels_count_from_both_within_word_from_right;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_left =\
    \ vowels_count_from_both_within_word_from_both - vowels_count_from_both_within_word_from_left;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_both =\
    \ vowels_count_from_both_within_word_from_both - vowels_count_from_both_within_word_from_both;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_both_within_word\
    \ = vowels_count_from_both_within_word_from_both_within_word - vowels_count_from_both_within_word_from_both_within_word_from_right;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_both_within_word_from_left\
    \ = vowels_count_from_both_within_word_from_both_within_word_from_both - vowels_count_from_both_within_word_from_both_within_word_from_left;\n\
    \    let vowels_count_from_both_within_word_from_both_within_word_from_both_within_word_from_both\
    \ = vowels_count_from_both_within_word_from_both_within_word_from_both - vowels_count_from_both_within_word_from_both_within_word_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk763h9nw.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_array = vowels.split(\"\");\n\
    \    let vowels_array_length = vowels_array.length;\n    let vowels_array_reverse\
    \ = vowels_array.reverse();\n    let vowels_array_reverse_length = vowels_array_reverse.length;\n\
    \    let vowels_array_reverse_length = vowels_array_reverse_length - 1;\n    let\
    \ vowels_array_reverse_length_2 = vowels_array_reverse_length * 2;\n    let vowels_array_reverse_length_3\
    \ = vowels_array_reverse_length * 3;\n    let vowels_array_reverse_length_4 =\
    \ vowels_array_reverse_length * 4;\n    let vowels_array_reverse_length_5 = vowels_array_reverse_length\
    \ * 5;\n    let vowels_array_reverse_length_6 = vowels_array_reverse_length *\
    \ 6;\n    let vowels_array_reverse_length_7 = vowels_array_reverse_length * 7;\n\
    \    let vowels_array_reverse_length_8 = vowels_array_reverse_length * 8;\n  \
    \  let vowels_array_reverse_length_9 = vowels_array_reverse_length * 9;\n    let\
    \ vowels_array_reverse_length_10 = vowels_array_reverse_length * 10;\n    let\
    \ vowels_array_reverse_length_11 = vowels_array_reverse_length * 11;\n    let\
    \ vowels_array_reverse_length_12 = vowels_array_reverse_length * 12;\n    let\
    \ vowels_array_reverse_length_13 = vowels_array_reverse_length * 13;\n    let\
    \ vowels_array_reverse_length_14 = vowels_array_reverse_length * 14;\n    let\
    \ vowels_array_reverse_length_15 = vowels_array_reverse_length * 15;\n    let\
    \ vowels_array_reverse_length_16 = vowels_array_reverse_length * 16;\n    let\
    \ vowels_array_reverse_length_17 = vowels_array_reverse_length * 17;\n    let\
    \ vowels_array_reverse_length_18 = vowels_array_reverse_length * 18;\n    let\
    \ vowels_array_reverse_length_19 = vowels_array_reverse_length * 19;\n    let\
    \ vowels_array_reverse_length_20 = vowels_array_reverse_length * 20;\n    let\
    \ vowels_array_reverse_length_21 = vowels_array_reverse_length * 21;\n    let\
    \ vowels_array_reverse_length_22 = vowels_array_reverse_length * 22;\n    let\
    \ vowels_array_reverse_length_23 = vowels_array_reverse_length * 23;\n    let\
    \ vowels_array_reverse_length_24 = vowels_array_reverse_length * 24;\n    let\
    \ vowels_array_reverse_length_25 = vowels_array_reverse_length * 25;\n    let\
    \ vowels_array_reverse_length_26 = vowels_array_reverse_length * 26;\n    let\
    \ vowels_array_reverse_length_27 = vowels_array_reverse_length * 27;\n    let\
    \ vowels_array_reverse_length_28 = vowels_array_reverse_length * 28;\n    let\
    \ vowels_array_reverse_length_29 = vowels_array_reverse_length * \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptrrqjn54.js:21\n    let vowels_array_reverse_length = vowels_array_reverse_length\
    \ - 1;\n        ^\n\nSyntaxError: Identifier 'vowels_array_reverse_length' has\
    \ already been declared\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph5y2xvcm.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = vowels_count - 1;\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowels_index = i;\n            break;\n        }\n    }\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowels_index_count = i;\n            break;\n        }\n    }\n \
    \   for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowels_index_count_max = i;\n            break;\n        }\n    }\n\
    \    if(vowels_index === 0 && vowels_index_count === 0 && vowels_index_count_max\
    \ === 0){\n        return \"\";\n    }\n    let vowel_start = word.charAt(vowels_index)\
    \ + word.charAt(vowels_index_count);\n    let vowel_end = word.charAt(vowels_index_count_max)\
    \ + word.charAt(vowels_index_count_max - 1);\n    let vowel_start_index = vowels_index\
    \ + 1;\n    let vowel_end_index = vowels_index_count_max + 1;\n    let vowel_start_index_max\
    \ = vowels_index_count_max + 1;\n    let vowel_end_index_max = vowels_index_count_max\
    \ - 1;\n    let vowel_start_index_min = vowels_index_count;\n    let vowel_end_index_min\
    \ = vowels_index_count_max;\n    let vowel_start_index_min_max = vowels_index_count_max\
    \ - 1;\n    let vowel_end_index_min_max = vowels_index_count_max;\n    for(let\
    \ i = vowel_start_index; i <= vowel_end_index; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowel_start_index = i;\n            break;\n        }\n    }\n  \
    \  for(let i = vowel_start_index; i <= vowel_end_index; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowel_end_index = i;\n            break;\n        }\n    }\n    for(let\
    \ i = vowel_start_index; i <= vowel_end_index; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowel_start_index_max = i;\n            break;\n        }\n    }\n\
    \    for(let i = vowel_start_index; i <= vowel_end_index; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowel_end_index_max = i;\n            break;\n        }\n    }\n\
    \    for(let i = vowel_start_index; i <= vowel_end_index; i++){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowel_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpddjaf_av.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_min_index3\
    \ = 0;\n    let vowels_index_count_max_index3 = 0;\n    let vowels_index_count_min_index4\
    \ = 0;\n    let vowels_index_count_max_index4 = 0;\n    let vowels_index_count_min_index5\
    \ = 0;\n    let vowels_index_count_max_index5 = 0;\n    let vowels_index_count_min_index6\
    \ = 0;\n    let vowels_index_count_max_index6 = 0;\n    let vowels_index_count_min_index7\
    \ = 0;\n    let vowels_index_count_max_index7 = 0;\n    let vowels_index_count_min_index8\
    \ = 0;\n    let vowels_index_count_max_index8 = 0;\n    let vowels_index_count_min_index9\
    \ = 0;\n    let vowels_index_count_max_index9 = 0;\n    let vowels_index_count_min_index10\
    \ = 0;\n    let vowels_index_count_max_index10 = 0;\n    let vowels_index_count_min_index11\
    \ = 0;\n    let vowels_index_count_max_index11 = 0;\n    let vowels_index_count_min_index12\
    \ = 0;\n    let vowels_index_count_max_index12 = 0;\n    let vowels_index_count_min_index13\
    \ = 0;\n    let vowels_index_count_max_index13 = 0;\n    let vowels_index_count_min_index14\
    \ = 0;\n    let vowels_index_count_max_index14 = 0;\n    let vowels_index_count_min_index15\
    \ = 0;\n    let vowels_index_count_max_index15 = 0;\n    let vowels_index_count_min_index16\
    \ = 0;\n    let vowels_index_count_max_index16 = 0;\n    let vowels_index_count_min_index17\
    \ = 0;\n    let vowels_index_count_max_index17 = 0;\n    let vowels_index_count_min_index18\
    \ = 0;\n    let vowels_index_count_max_index18 = 0;\n    let vowels_index_count_min_index19\
    \ = 0;\n    let vowels_index_count_max_index19 = 0;\n    let vowels_index_count_min_index20\
    \ = 0;\n    let vowels_index_count_max_index20 = 0;\n    let vowels_index_count_min_index21\
    \ = 0;\n    let vowels_index_count_max_index21 = 0;\n    let vowels_index_count_min_index22\
    \ = 0;\n    let vowels_index_count_max_index22 = 0;\n    let vowels_index_count_min_index23\
    \ = 0;\n    let vowels_index_count_max_index23 = 0;\n    let vowels_index_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyyowuqf8.js:26\n    let vowels_index_count_max_index2 = 0;\n  \
    \      ^\n\nSyntaxError: Identifier 'vowels_index_count_max_index2' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountInWord = vowels.filter(v=>word.includes(v)).length;\n    let\
    \ vowelsCountInWordInWord = vowels.filter(v=>word.includes(v)).length;\n    let\
    \ vowelsCountInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word.includes(v)).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnw3uxaq3.js:28\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowels.filter(v=>word.includes(v)).length;\n        ^\n\nSyntaxError: Identifier\
    \ 'vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord' has\
    \ already been declared\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    let vowels = ['a','e','i','o','u'];\n   \
    \ let vowels_count = vowels.length;\n    let vowels_count_from_right = vowels_count\
    \ - 1;\n    let vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcuh9q4p3.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 3;\n    let vowels_count_from_middle4 = vowels_count / 4;\n\
    \    let vowels_count_from_middle5 = vowels_count / 5;\n    let vowels_count_from_middle6\
    \ = vowels_count / 6;\n    let vowels_count_from_middle7 = vowels_count / 7;\n\
    \    let vowels_count_from_middle8 = vowels_count / 8;\n    let vowels_count_from_middle9\
    \ = vowels_count / 9;\n    let vowels_count_from_middle10 = vowels_count / 10;\n\
    \    let vowels_count_from_middle11 = vowels_count / 11;\n    let vowels_count_from_middle12\
    \ = vowels_count / 12;\n    let vowels_count_from_middle13 = vowels_count / 13;\n\
    \    let vowels_count_from_middle14 = vowels_count / 14;\n    let vowels_count_from_middle15\
    \ = vowels_count / 15;\n    let vowels_count_from_middle16 = vowels_count / 16;\n\
    \    let vowels_count_from_middle17 = vowels_count / 17;\n    let vowels_count_from_middle18\
    \ = vowels_count / 18;\n    let vowels_count_from_middle19 = vowels_count / 19;\n\
    \    let vowels_count_from_middle20 = vowels_count / 20;\n    let vowels_count_from_middle21\
    \ = vowels_count / 21;\n    let vowels_count_from_middle22 = vowels_count / 22;\n\
    \    let vowels_count_from_middle23 = vowels_count / 23;\n    let vowels_count_from_middle24\
    \ = vowels_count / 24;\n    let vowels_count_from_middle25 = vowels_count / 25;\n\
    \    let vowels_count_from_middle26 = vowels_count / 26;\n    let vowels_count_from_middle27\
    \ = vowels_count / 27;\n    let vowels_count_from_middle28 = vowels_count / 28;\n\
    \    let vowels_count_from_middle29 = vowels_count / 29;\n    let vowels_count_from_middle30\
    \ = vowels_count / 30;\n    let vowels_count_from_middle31 = vowels_count / 31;\n\
    \    let vowels_count_from_middle32 = vowels_count / 32;\n    let vowels_count_from_middle33\
    \ = vowels_count / 33;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpncbnrxx6.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    for(let i = 0; i < word.length; i++){\n\
    \        if(vowels.includes(word[i])){\n            vowels_index = i;\n      \
    \      vowels_index_count++;\n            if(vowels_index_count > vowels_index_count_max){\n\
    \                vowels_index_count_max = vowels_index_count;\n            }\n\
    \        }\n    }\n    let vowels_index_count_min = 0;\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            vowels_index\
    \ = i;\n            vowels_index_count++;\n            if(vowels_index_count <\
    \ vowels_index_count_min){\n                vowels_index_count_min = vowels_index_count;\n\
    \            }\n        }\n    }\n    if(vowels_index_count > vowels_index_count_max){\n\
    \        return \"\";\n    }\n    if(vowels_index_count < vowels_index_count_min){\n\
    \        return \"\";\n    }\n    return vowels[vowels_index];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpihzn7xmf.js:54:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpihzn7xmf.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexSorted = vowelsIndex.sort();\n    let vowelsIndexSortedCopy\
    \ = vowelsIndexSorted.slice(0,vowelsCount);\n    let vowelsIndexSortedCopy2 =\
    \ vowelsIndexSorted.slice(vowelsCount);\n    let vowelsIndexSortedCopy3 = vowelsIndexSorted.slice(vowelsCount,vowelsCount*2);\n\
    \    let vowelsIndexSortedCopy4 = vowelsIndexSorted.slice(vowelsCount*2);\n  \
    \  let vowelsIndexSortedCopy5 = vowelsIndexSorted.slice(vowelsCount*2,vowelsCount*3);\n\
    \    let vowelsIndexSortedCopy6 = vowelsIndexSorted.slice(vowelsCount*3,vowelsCount*4);\n\
    \    let vowelsIndexSortedCopy7 = vowelsIndexSorted.slice(vowelsCount*4,vowelsCount*5);\n\
    \    let vowelsIndexSortedCopy8 = vowelsIndexSorted.slice(vowelsCount*5,vowelsCount*6);\n\
    \    let vowelsIndexSortedCopy9 = vowelsIndexSorted.slice(vowelsCount*6,vowelsCount*7);\n\
    \    let vowelsIndexSortedCopy10 = vowelsIndexSorted.slice(vowelsCount*7,vowelsCount*8);\n\
    \    let vowelsIndexSortedCopy11 = vowelsIndexSorted.slice(vowelsCount*8,vowelsCount*9);\n\
    \    let vowelsIndexSortedCopy12 = vowelsIndexSorted.slice(vowelsCount*9,vowelsCount*10);\n\
    \    let vowelsIndexSortedCopy13 = vowelsIndexSorted.slice(vowelsCount*10,vowelsCount*11);\n\
    \    let vowelsIndexSortedCopy14 = vowelsIndexSorted.slice(vowelsCount*11,vowelsCount*12);\n\
    \    let vowelsIndexSortedCopy15 = vowelsIndexSorted.slice(vowelsCount*12,vowelsCount*13);\n\
    \    let vowelsIndexSortedCopy16 = vowelsIndexSorted.slice(vowelsCount*13,vowelsCount*14);\n\
    \    let vowelsIndexSortedCopy17 = vowelsIndexSorted.slice(vowelsCount*14,vowelsCount*15);\n\
    \    let vowelsIndexSortedCopy18 = vowelsIndexSorted.slice(vowelsCount*15,vowelsCount*16);\n\
    \    let vowelsIndexSortedCopy19 = vowelsIndexSorted.slice(vowelsCount*\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_cetmhb5.js:22\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i=word.length-1;\
    \ i>=0; i--){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    let vowelsIndexMax = Math.max.apply(Math,\
    \ vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(Math, vowelsIndex);\n\
    \    let vowelsIndexMiddle = Math.floor((vowelsIndexMax + vowelsIndexMin)/2);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleString\
    \ = \"\";\n    if(vowelsIndexMiddleInt === 0){\n        vowelsIndexMiddleString\
    \ = \"\";\n    }else if(vowelsIndexMiddleInt === vowelsIndexCount){\n        vowelsIndexMiddleString\
    \ = \"\";\n    }else{\n        vowelsIndexMiddleString = vowels[vowelsIndexMiddleInt];\n\
    \    }\n    return vowelsIndexMiddleString;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpzulg58m7.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzulg58m7.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2\
    \ = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5\
    \ = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8\
    \ = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11\
    \ = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14\
    \ = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17\
    \ = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20\
    \ = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23\
    \ = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26\
    \ = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29\
    \ = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32\
    \ = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35\
    \ = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38\
    \ = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41\
    \ = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44\
    \ = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47\
    \ = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50\
    \ = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53\
    \ = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56\
    \ = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59\
    \ = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39arzf0q.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798637
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max_min\
    \ = 0;\n    var vowels_index_count_max_min_index = 0;\n    var vowels_index_count_max_min_index2\
    \ = 0;\n    var vowels_index_count_max_min_index2_index = 0;\n    var vowels_index_count_max_min_index3_index\
    \ = 0;\n    var vowels_index_count_max_min_index3_index2 = 0;\n    var vowels_index_count_max_min_index4_index\
    \ = 0;\n    var vowels_index_count_max_min_index4_index2 = 0;\n    var vowels_index_count_max_min_index5_index\
    \ = 0;\n    var vowels_index_count_max_min_index5_index2 = 0;\n    var vowels_index_count_max_min_index6_index\
    \ = 0;\n    var vowels_index_count_max_min_index6_index2 = 0;\n    var vowels_index_count_max_min_index7_index\
    \ = 0;\n    var vowels_index_count_max_min_index7_index2 = 0;\n    var vowels_index_count_max_min_index8_index\
    \ = 0;\n    var vowels_index_count_max_min_index8_index2 = 0;\n    var vowels_index_count_max_min_index9_index\
    \ = 0;\n    var vowels_index_count_max_min_index9_index2 = 0;\n    var vowels_index_count_max_min_index10_index\
    \ = 0;\n    var vowels_index_count_max_min_index10_index2 = 0;\n    var vowels_index_count_max_min_index11_index\
    \ = 0;\n    var vowels_index_count_max_min_index11_index2 = 0;\n    var vowels_index_count_max_min_index12_index\
    \ = 0;\n    var vowels_index_count_max_min_index12_index2 = 0;\n    var vowels_index_count_max_min_index13_index\
    \ = 0;\n    var vowels_index_count_max_min_index13_index2 = 0;\n    var vowels_index_count_max_min_index14_index\
    \ = 0;\n    var vowels_index_count_max_min_index14_index2 = 0;\n    var vowels_index_count_max_min_index15_index\
    \ = 0;\n    var vowels_index_count_max_min_index15_index2 = 0;\n    var vowels_index_count_max_min_index16_index\
    \ = 0;\n    var vowels_index_count_max_min_index16_index2 = 0;\n    var vowels_index_count_max_min_index17_index\
    \ = 0;\n    var vowels_index_count_max_min_index17_index2 = 0;\n    var vowels_index_count_max_min_index18_index\
    \ = 0;\n    var vowels_index_count_max_min_index18_index2 = 0;\n    var vowels_index_count_max_min_index19_index\
    \ = 0;\n    var vowels_index_count_max_min_index19_index2 = 0;\n    var vowels_index_count_max_min_index20_index\
    \ = 0;\n    var vowel\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8rux2zav.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = word.length - vowelsCount;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 1;\n    let vowelsCountFromRightFromLeft = vowelsCountFromRight\
    \ - vowelsCountFromLeft;\n    let vowelsCountFromLeftFromRight = vowelsCountFromLeft\
    \ - vowelsCountFromRight;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCountFromRightFromLeft\
    \ - vowelsCountFromLeftFromRight;\n    let vowelsCountFromLeftFromRightFromRight\
    \ = vowelsCountFromLeftFromRight - vowelsCountFromRightFromLeft;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \    let vowelsCountFromLeftFromRightFromRightFromRight = vowelsCountFromLeftFromRightFromRight\
    \ - vowelsCountFromRightFromLeftFromRight;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \    let vowelsCountFromLeftFromRightFromRightFromRight = vowelsCountFromLeftFromRightFromRight\
    \ - vowelsCountFromRightFromLeftFromRight;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \    let vowelsCountFromLeftFromRightFromRightFromRight = vowelsCountFromLeftFromRightFromRight\
    \ - vowelsCountFromRightFromLeftFromRight;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \    let vowelsCountFromLeftFromRightFromRightFromRight = vowelsCountFromLeftFromRightFromRight\
    \ - vowelsCountFromRightFromLeftFromRight;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \    let vowelsCountFromLeftFromRightFromRightFromRight = vowelsCountFromLeftFromRightFromRight\
    \ - vowelsCountFromRightFromLeftFromRight;\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCount\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyp2ba30y.js:26\n    let vowelsCountFromRightFromLeftFromRightFromRight\
    \ = vowelsCountFromRightFromLeftFromRight - vowelsCountFromLeftFromRightFromRight;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsCountFromRightFromLeftFromRightFromRight'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        if(word.indexOf(vowels[i]) > -1){\n        \
    \    vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n    }\n\
    \    if(vowelsIndexCount > 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \        let vowelsIndexMax = Math.max(...vowelsIndex);\n        let vowelsIndexMin2\
    \ = vowelsIndexMin + 1;\n        let vowelsIndexMax2 = vowelsIndexMax + 1;\n \
    \       let vowelsIndexMin3 = vowelsIndexMin + 2;\n        let vowelsIndexMax3\
    \ = vowelsIndexMax + 2;\n        let vowelsIndexMin4 = vowelsIndexMin + 3;\n \
    \       let vowelsIndexMax4 = vowelsIndexMax + 3;\n        let vowelsIndexMin5\
    \ = vowelsIndexMin + 4;\n        let vowelsIndexMax5 = vowelsIndexMax + 4;\n \
    \       let vowelsIndexMin6 = vowelsIndexMin + 5;\n        let vowelsIndexMax6\
    \ = vowelsIndexMax + 5;\n        let vowelsIndexMin7 = vowelsIndexMin + 6;\n \
    \       let vowelsIndexMax7 = vowelsIndexMax + 6;\n        let vowelsIndexMin8\
    \ = vowelsIndexMin + 7;\n        let vowelsIndexMax8 = vowelsIndexMax + 7;\n \
    \       let vowelsIndexMin9 = vowelsIndexMin + 8;\n        let vowelsIndexMax9\
    \ = vowelsIndexMax + 8;\n        let vowelsIndexMin10 = vowelsIndexMin + 9;\n\
    \        let vowelsIndexMax10 = vowelsIndexMax + 9;\n        let vowelsIndexMin11\
    \ = vowelsIndexMin + 10;\n        let vowelsIndexMax11 = vowelsIndexMax + 10;\n\
    \        let vowelsIndexMin12 = vowelsIndexMin + 11;\n        let vowelsIndexMax12\
    \ = vowelsIndexMax + 11;\n        let vowelsIndexMin13 = vowelsIndexMin + 12;\n\
    \        let vowelsIndexMax13 = vowelsIndexMax + 12;\n        let vowelsIndexMin14\
    \ = vowelsIndexMin + 13;\n        let vowelsIndexMax14 = vowelsIndexMax + 13;\n\
    \        let vowelsIndexMin15 = vowelsIndexMin + 14;\n        let vowelsIndexMax15\
    \ = vowelsIndexMax + 14;\n        let vowelsIndexMin16 = vowelsIndexMin + 15;\n\
    \        let vowelsIndexMax16 = vowelsIndexMax + 15;\n        let vowelsIndexMin17\
    \ = vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx88ytx2s.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n    let consonantIndex\
    \ = 0;\n    let consonantsCount = word.length - 1;\n    let consonantsCountIndex\
    \ = 0;\n    let consonantsCountIndexMin = 0;\n    let consonantsCountIndexMax\
    \ = consonantsCount - 1;\n    let consonantsCountIndexMinMax = consonantsCount\
    \ - 1;\n    let consonantsCountIndexMaxMin = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMin\
    \ = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMax = consonantsCount\
    \ - 1;\n    let consonantsCountIndexMinMaxMinMax = consonantsCount - 1;\n    let\
    \ consonantsCountIndexMinMaxMinMaxMin = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMax\
    \ = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMax = consonantsCount\
    \ - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMax = consonantsCount - 1;\n\
    \    let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n  \
    \  let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n    let\
    \ consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax\
    \ = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax =\
    \ consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount\
    \ - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount -\
    \ 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n\
    \    let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n  \
    \  let consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n    let\
    \ consonantsCountIndexMinMaxMinMaxMinMaxMax = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax\
    \ = consonantsCount - 1;\n    let consonantsCountIndexMinMaxMinMaxMinMaxMax =\
    \ conson\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpojuz5a5q.js:33\n    let consonantsCountIndexMinMaxMinMaxMinMax\
    \ = consonantsCount - 1;\n        ^\n\nSyntaxError: Identifier 'consonantsCountIndexMinMaxMinMaxMinMax'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(word.indexOf(vowels[i]));\n    }\n    vowelsIndex.sort();\n\
    \    let vowelsIndex = vowelsIndex.reverse();\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = vowelsIndex[0];\n    let vowelsIndexMax = vowelsIndex[vowelsCount-1];\n\
    \    let vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndex = 0;\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i] >= vowelsIndexMin){\n\
    \            vowelsIndexMinIndex = i;\n        }\n        if(vowelsIndex[i] <=\
    \ vowelsIndexMax){\n            vowelsIndexMaxIndex = i;\n        }\n    }\n \
    \   if(vowelsIndexMinIndex == vowelsIndexMaxIndex){\n        return \"\";\n  \
    \  }\n    let vowelsIndexMin = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMax\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinIndex = 0;\n    let\
    \ vowelsIndexMaxIndex = 0;\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  if(vowelsIndex[i] >= vowelsIndexMin){\n            vowelsIndexMinIndex = i;\n\
    \        }\n        if(vowelsIndex[i] <= vowelsIndexMax){\n            vowelsIndexMaxIndex\
    \ = i;\n        }\n    }\n    let vowelsIndexMin = vowelsIndex[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMax = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinIndex\
    \ = 0;\n    let vowelsIndexMaxIndex = 0;\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] >= vowelsIndexMin){\n            vowelsIndexMinIndex\
    \ = i;\n        }\n        if(vowelsIndex[i] <= vowelsIndexMax){\n           \
    \ vowelsIndexMaxIndex = i;\n        }\n    }\n    let vowelsIndexMin = vowelsIndex[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMax = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinIndex\
    \ = 0;\n    let vowelsIndexMaxIndex = 0;\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] >= vowelsIndexMin){\n            vowelsIndexMinIndex\
    \ = i;\n        }\n        if(vowelsIndex[i] <= vowelsIndexMax){\n           \
    \ vowelsIndexMaxIndex = i;\n        }\n    }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgz9w4n2q.js:23\n    let vowelsIndex = vowelsIndex.reverse();\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowel_count = vowels.length;\n \
    \ let vowel_count_from_right = word.length - vowel_count - 1;\n  let vowel_count_from_left\
    \ = word.length - vowel_count;\n  let vowel_count_from_middle = word.length -\
    \ vowel_count / 2;\n  let vowel_count_from_middle2 = word.length - vowel_count\
    \ / 2;\n  let vowel_count_from_middle3 = word.length - vowel_count / 3;\n  let\
    \ vowel_count_from_middle4 = word.length - vowel_count / 4;\n  let vowel_count_from_middle5\
    \ = word.length - vowel_count / 5;\n  let vowel_count_from_middle6 = word.length\
    \ - vowel_count / 6;\n  let vowel_count_from_middle7 = word.length - vowel_count\
    \ / 7;\n  let vowel_count_from_middle8 = word.length - vowel_count / 8;\n  let\
    \ vowel_count_from_middle9 = word.length - vowel_count / 9;\n  let vowel_count_from_middle10\
    \ = word.length - vowel_count / 10;\n  let vowel_count_from_middle11 = word.length\
    \ - vowel_count / 11;\n  let vowel_count_from_middle12 = word.length - vowel_count\
    \ / 12;\n  let vowel_count_from_middle13 = word.length - vowel_count / 13;\n \
    \ let vowel_count_from_middle14 = word.length - vowel_count / 14;\n  let vowel_count_from_middle15\
    \ = word.length - vowel_count / 15;\n  let vowel_count_from_middle16 = word.length\
    \ - vowel_count / 16;\n  let vowel_count_from_middle17 = word.length - vowel_count\
    \ / 17;\n  let vowel_count_from_middle18 = word.length - vowel_count / 18;\n \
    \ let vowel_count_from_middle19 = word.length - vowel_count / 19;\n  let vowel_count_from_middle20\
    \ = word.length - vowel_count / 20;\n  let vowel_count_from_middle21 = word.length\
    \ - vowel_count / 21;\n  let vowel_count_from_middle22 = word.length - vowel_count\
    \ / 22;\n  let vowel_count_from_middle23 = word.length - vowel_count / 23;\n \
    \ let vowel_count_from_middle24 = word.length - vowel_count / 24;\n  let vowel_count_from_middle25\
    \ = word.length - vowel_count / 25;\n  let vowel_count_from_middle26 = word.length\
    \ - vowel_count / 26;\n  let vowel_count_from_middle27 = word.length - vowel_count\
    \ / 27;\n  let vowel_count_from_middle28 = word.length - vowel_count / 28;\n \
    \ let vowel_count_from_middle29 = word.length - vowel_count / 29;\n  let \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgqi9rflw.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word.charAt(i))){\n     \
    \       vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n   \
    \ }\n    if(vowelsIndexCount > 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \        let vowelsIndexMax = Math.max(...vowelsIndex);\n        let vowelsIndexMinCount\
    \ = vowelsIndex.filter(item => item === vowelsIndexMin).length;\n        let vowelsIndexMaxCount\
    \ = vowelsIndex.filter(item => item === vowelsIndexMax).length;\n        if(vowelsIndexMinCount\
    \ === vowelsIndexMaxCount){\n            return word.charAt(vowelsIndexMin);\n\
    \        }\n        else if(vowelsIndexMinCount > vowelsIndexMaxCount){\n    \
    \        return word.charAt(vowelsIndexMax);\n        }\n        else{\n     \
    \       return word.charAt(vowelsIndexMin);\n        }\n    }\n    else{\n   \
    \     return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpmo72drhz.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmo72drhz.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowelsCount = vowels.length;\n\
    \tlet vowelsIndex = 0;\n\tlet vowelsIndexCount = 0;\n\tlet vowelsIndexCountMax\
    \ = vowelsCount - 1;\n\tlet vowelsIndexCountMin = 0;\n\tlet vowelsIndexCountMinMax\
    \ = vowelsCount - 2;\n\tlet vowelsIndexCountMaxMin = vowelsCount - 3;\n\tlet vowelsIndexCountMinMaxMin\
    \ = vowelsCount - 4;\n\tlet vowelsIndexCountMaxMinMax = vowelsCount - 5;\n\tlet\
    \ vowelsIndexCountMaxMinMaxMin = vowelsCount - 6;\n\tlet vowelsIndexCountMaxMinMaxMinMax\
    \ = vowelsCount - 7;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMin = vowelsCount -\
    \ 8;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsCount - 9;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 10;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsCount\
    \ - 11;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsCount - 12;\n\
    \tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMax = vowelsCount - 13;\n\tlet\
    \ vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMax = vowelsCount - 14;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMaxMin\
    \ = vowelsCount - 15;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 16;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax\
    \ = vowelsCount - 17;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMaxMin\
    \ = vowelsCount - 18;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 19;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax\
    \ = vowelsCount - 20;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMaxMin\
    \ = vowelsCount - 21;\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpta89cvyh.js:31\n\tlet vowelsIndexCountMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 11;\n\t    ^\n\nSyntaxError: Identifier 'vowelsIndexCountMaxMinMaxMinMaxMinMaxMin'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_max2 = 0;\n    let vowels_index_count_min2 = 0;\n  \
    \  let vowels_index_count_max3 = 0;\n    let vowels_index_count_min3 = 0;\n  \
    \  let vowels_index_count_max4 = 0;\n    let vowels_index_count_min4 = 0;\n  \
    \  let vowels_index_count_max5 = 0;\n    let vowels_index_count_min5 = 0;\n  \
    \  let vowels_index_count_max6 = 0;\n    let vowels_index_count_min6 = 0;\n  \
    \  let vowels_index_count_max7 = 0;\n    let vowels_index_count_min7 = 0;\n  \
    \  let vowels_index_count_max8 = 0;\n    let vowels_index_count_min8 = 0;\n  \
    \  let vowels_index_count_max9 = 0;\n    let vowels_index_count_min9 = 0;\n  \
    \  let vowels_index_count_max10 = 0;\n    let vowels_index_count_min10 = 0;\n\
    \    let vowels_index_count_max11 = 0;\n    let vowels_index_count_min11 = 0;\n\
    \    let vowels_index_count_max12 = 0;\n    let vowels_index_count_min12 = 0;\n\
    \    let vowels_index_count_max13 = 0;\n    let vowels_index_count_min13 = 0;\n\
    \    let vowels_index_count_max14 = 0;\n    let vowels_index_count_min14 = 0;\n\
    \    let vowels_index_count_max15 = 0;\n    let vowels_index_count_min15 = 0;\n\
    \    let vowels_index_count_max16 = 0;\n    let vowels_index_count_min16 = 0;\n\
    \    let vowels_index_count_max17 = 0;\n    let vowels_index_count_min17 = 0;\n\
    \    let vowels_index_count_max18 = 0;\n    let vowels_index_count_min18 = 0;\n\
    \    let vowels_index_count_max19 = 0;\n    let vowels_index_count_min19 = 0;\n\
    \    let vowels_index_count_max20 = 0;\n    let vowels_index_count_min20 = 0;\n\
    \    let vowels_index_count_max21 = 0;\n    let vowels_index_count_min21 = 0;\n\
    \    let vowels_index_count_max22 = 0;\n    let vowels_index_count_min22 = 0;\n\
    \    let vowels_index_count_max23 = 0;\n    let vowels_index_count_min23 = 0;\n\
    \    let vowels_index_count_max24 = 0;\n    let vowels_index_count_min24 = 0;\n\
    \    let vowels_index_count_max25 = 0;\n    let vowels_index_count_min25 = 0;\n\
    \    let vowels_index_count_max26 = 0;\n    let vowels_index_count_min26 = 0;\n\
    \    let vowels_index_count_max27 = 0;\n    let vowels_index_count_min27 = 0;\n\
    \    let vowels_index_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6bc50qix.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    let vowels = ['a','e','i','o','u'];\n   \
    \ let vowels_count = vowels.length;\n    let vowel_found = false;\n    let vowel_position\
    \ = 0;\n    let vowel_position_count = 0;\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowel_found = true;\n\
    \            vowel_position = i;\n            vowel_position_count = vowel_position_count+1;\n\
    \        }\n        if(vowel_found && vowel_position_count>=vowels.length){\n\
    \            break;\n        }\n    }\n    if(vowel_found){\n        let vowel_found\
    \ = false;\n        let vowel_position = 0;\n        let vowel_position_count\
    \ = 0;\n        for(let i = word.length-1; i >= 0; i--){\n            if(vowels.includes(word[i])){\n\
    \                vowel_found = true;\n                vowel_position = i;\n  \
    \              vowel_position_count = vowel_position_count+1;\n            }\n\
    \            if(vowel_found && vowel_position_count>=vowels.length){\n       \
    \         break;\n            }\n        }\n        if(vowel_found){\n       \
    \     return word[vowel_position];\n        }\n    }\n    return \"\";\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpk303_ntw.js:58:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk303_ntw.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"AEIOUaeiou\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index2\
    \ = 0;\n    var vowels_index_count_max_index2 = 0;\n    var vowels_index_count_min_index3\
    \ = 0;\n    var vowels_index_count_max_index3 = 0;\n    var vowels_index_count_min_index4\
    \ = 0;\n    var vowels_index_count_max_index4 = 0;\n    var vowels_index_count_min_index5\
    \ = 0;\n    var vowels_index_count_max_index5 = 0;\n    var vowels_index_count_min_index6\
    \ = 0;\n    var vowels_index_count_max_index6 = 0;\n    var vowels_index_count_min_index7\
    \ = 0;\n    var vowels_index_count_max_index7 = 0;\n    var vowels_index_count_min_index8\
    \ = 0;\n    var vowels_index_count_max_index8 = 0;\n    var vowels_index_count_min_index9\
    \ = 0;\n    var vowels_index_count_max_index9 = 0;\n    var vowels_index_count_min_index10\
    \ = 0;\n    var vowels_index_count_max_index10 = 0;\n    var vowels_index_count_min_index11\
    \ = 0;\n    var vowels_index_count_max_index11 = 0;\n    var vowels_index_count_min_index12\
    \ = 0;\n    var vowels_index_count_max_index12 = 0;\n    var vowels_index_count_min_index13\
    \ = 0;\n    var vowels_index_count_max_index13 = 0;\n    var vowels_index_count_min_index14\
    \ = 0;\n    var vowels_index_count_max_index14 = 0;\n    var vowels_index_count_min_index15\
    \ = 0;\n    var vowels_index_count_max_index15 = 0;\n    var vowels_index_count_min_index16\
    \ = 0;\n    var vowels_index_count_max_index16 = 0;\n    var vowels_index_count_min_index17\
    \ = 0;\n    var vowels_index_count_max_index17 = 0;\n    var vowels_index_count_min_index18\
    \ = 0;\n    var vowels_index_count_max_index18 = 0;\n    var vowels_index_count_min_index19\
    \ = 0;\n    var vowels_index_count_max_index19 = 0;\n    var vowels_index_count_min_index20\
    \ = 0;\n    var vowels_index_count_max_index20 = 0;\n    var vowels_index_count_min_index21\
    \ = 0;\n    var vowels_index_count_max_index21 = 0;\n    var vowels_index_count_min_index22\
    \ = 0;\n    var vowels_index_count_max_index22 = 0;\n    var vowels_index_count_min_index23\
    \ = 0;\n    var vowels_index_count_max_index23 = 0;\n    var vowels_index_count_min_index24\
    \ = 0;\n    var vowels_index_count_max_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppxn_7u57.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n\
    \    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let vowelsIndexSumCountIndex\
    \ = vowelsIndexSumCount - vowelsIndexMin;\n    let vowelsIndexSumCountIndex2 =\
    \ vowelsIndexSumCountIndex - vowelsIndexMax;\n    let vowelsIndexSumCountIndex3\
    \ = vowelsIndexSumCountIndex2 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex4\
    \ = vowelsIndexSumCountIndex3 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex5\
    \ = vowelsIndexSumCountIndex4 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex6\
    \ = vowelsIndexSumCountIndex5 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex7\
    \ = vowelsIndexSumCountIndex6 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex8\
    \ = vowelsIndexSumCountIndex7 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex9\
    \ = vowelsIndexSumCountIndex8 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex10\
    \ = vowelsIndexSumCountIndex9 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex11\
    \ = vowelsIndexSumCountIndex10 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex12\
    \ = vowelsIndexSumCountIndex11 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex13\
    \ = vowelsIndexSumCountIndex12 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex14\
    \ = vowelsIndexSumCountIndex13 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex15\
    \ = vowelsIndexSumCountIndex14 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex16\
    \ = vowelsIndexSumCountIndex15 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex17\
    \ = vowelsIndexSumCountIndex16 - vowelsIndexCount;\n    let vowelsIndexSumCountIndex18\
    \ = vowelsIndexSumCountIndex17 - vowelsIndexCount;\n    let vowel\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp_g4f3uu.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count_from_right - 1;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_left - 1;\n    let vowel_count_from_middle_to_right = vowel_count_from_right\
    \ - 2;\n    let vowel_count_from_left_to_middle = vowel_count_from_middle - 1;\n\
    \    let vowel_count_from_right_to_middle = vowel_count_from_middle - 2;\n   \
    \ let vowel_count_from_middle_to_left = vowel_count_from_left - 2;\n    let vowel_count_from_left_to_middle_to_right\
    \ = vowel_count_from_middle - 3;\n    let vowel_count_from_right_to_middle_to_left\
    \ = vowel_count_from_middle - 4;\n    let vowel_count_from_middle_to_left_to_right\
    \ = vowel_count_from_middle - 5;\n    let vowel_count_from_left_to_middle_to_right_to_left\
    \ = vowel_count_from_middle - 6;\n    let vowel_count_from_right_to_middle_to_left_to_right\
    \ = vowel_count_from_middle - 7;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowel_count_from_middle - 8;\n    let vowel_count_from_left_to_middle_to_right_to_left_to_middle_to_right\
    \ = vowel_count_from_middle - 9;\n    let vowel_count_from_right_to_middle_to_left_to_right_to_left_to_middle_to_left\
    \ = vowel_count_from_middle - 10;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count_from_middle - 11;\n    let vowel_count_from_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_middle - 12;\n    let vowel_count_from_right_to_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowel_count_from_middle - 13;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count_from_middle - 14;\n    let vowel_count_from_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_middle - 15;\n    let vowel_count_from_right_to_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowel_count_from_middle \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8csffdt3.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798638
