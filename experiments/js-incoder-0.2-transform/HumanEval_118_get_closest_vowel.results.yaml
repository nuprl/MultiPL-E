language: js
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    \n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let vowelsCount = vowels.length;\n    \n    let vowelsIndexes\
    \ = [];\n    \n    for(let i = 0; i < vowelsCount; i++){\n        let vowelIndex\
    \ = word.indexOf(vowels[i]);\n        if(vowelIndex > -1){\n            vowelsIndexes.push(i);\n\
    \        }\n    }\n    \n    let vowelsIndexesCount = vowelsIndexes.length;\n\
    \    \n    let vowelsIndexesIndex = 0;\n    \n    for(let i = 0; i < vowelsIndexesCount;\
    \ i++){\n        let vowelIndex = word.indexOf(vowels[vowelsIndexes[vowelsIndexesIndex]]);\n\
    \        if(vowelIndex > -1){\n            vowelsIndexesIndex = i;\n         \
    \   break;\n        }\n    }\n    \n    let vowelsIndexesLast = vowelsIndexes[vowelsIndexesIndex];\n\
    \    \n    let vowelsIndexesLastIndex = word.lastIndexOf(vowels[vowelsIndexesLast]);\n\
    \    \n    let vowelsIndexesLastLength = vowelsIndexesLastIndex - vowelsIndexesIndex;\n\
    \    \n    let vowelsIndexesLastChar = word.charAt(vowelsIndexesLastIndex);\n\
    \    \n    let vowelsIndexesLastCharIndex = word.indexOf(vowels[vowelsIndexesLastChar]);\n\
    \    \n    let vowelsIndexesLastCharLength = vowelsIndexesLastCharIndex - vowelsIndexesLastIndex;\n\
    \    \n    let vowelsIndexesLastCharLength = vowelsIndexesLastChar.length;\n \
    \   \n    let vowelsIndexesLastCharIndex = 0;\n    \n    for(let i = 0; i < vowelsIndexesLastCharLength;\
    \ i++){\n        let vowelIndex = word.indexOf(vowels[vowelsIndexesLastCharIndex]);\n\
    \        if(vowelIndex > -1){\n            vowelsIndexesLastCharIndex = i;\n \
    \           break;\n        }\n    }\n    \n    let vowelsIndexesLastCharIndexLast\
    \ = vowelsIndexesLastCharIndex;\n    \n    let vowelsIndexesLastCharIndexLastLength\
    \ = vowelsIndexesLastCharIndexLast - vowelsIndexesLastIndex;\n    \n    let vowelsIndexesLastCharIndexLastChar\
    \ = word.charAt(vowelsIndexesLastCharIndexLast);\n    \n    let vowelsIndexesLastCharIndexLastCharIndex\
    \ = word.indexOf(vowels[vowelsIndexesLastCharIndexLastChar]);\n    \n    let vowelsIndexesLastCharIndexLastCharLength\
    \ = vowelsIndexesLastCharIndexLastCharIndex - vowelsIndexesLastCharIndexLast;\n\
    \    \n    let vowelsIndexesLast\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz07v1h8w.js:54\n    let vowelsIndexesLastCharLength = vowelsIndexesLastChar.length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexesLastCharLength' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2q4j2uod.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    let consonants\
    \ = word.split(\"\");\n    let consonants_count = consonants.length;\n    let\
    \ consonant_found = false;\n    let consonant_position = 0;\n    let vowel_positions\
    \ = [];\n    let consonant_positions = [];\n    for(let i = 0; i < consonants_count;\
    \ i++){\n        if(vowels.includes(consonants[i])){\n            vowel_found\
    \ = true;\n            vowel_positions.push(i);\n        }\n    }\n    for(let\
    \ i = consonants_count - 1; i >= 0; i--){\n        if(vowels.includes(consonants[i])){\n\
    \            consonant_found = true;\n            consonant_positions.push(i);\n\
    \        }\n    }\n    if(vowel_found && consonant_found){\n        for(let i\
    \ = 0; i < consonant_positions.length; i++){\n            if(vowel_positions[i]\
    \ < consonant_positions[i]){\n                vowel_position = consonant_positions[i];\n\
    \            }\n        }\n    }\n    return vowels[vowel_position];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmprc50vd3q.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprc50vd3q.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    var vowelsCount = vowels.length;\n    var vowelsIndex = 0;\n  \
    \  var vowelsIndexCount = 0;\n    var vowelsIndexCountMax = vowelsCount - 1;\n\
    \    \n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels[vowelsIndex]\
    \ === word[i]){\n            vowelsIndex++;\n            if(vowelsIndex === vowelsCount){\n\
    \                vowelsIndex = 0;\n                vowelsIndexCount++;\n     \
    \           if(vowelsIndexCount === vowelsIndexCountMax){\n                  \
    \  return \"\";\n                }\n            }\n        }\n    }\n    return\
    \ vowels[vowelsIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpxoep1k8i.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxoep1k8i.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let\
    \ vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3\
    \ = vowelsIndexSumCount2 / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3\
    \ / 2;\n    let vowelsIndexSumCount5 = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6\
    \ = vowelsIndexSumCount5 / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6\
    \ / 2;\n    let vowelsIndexSumCount8 = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9\
    \ = vowelsIndexSumCount8 / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9\
    \ / 2;\n    let vowelsIndexSumCount11 = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount11 / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12\
    \ / 2;\n    let vowelsIndexSumCount14 = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount14 / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15\
    \ / 2;\n    let vowelsIndexSumCount17 = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount17 / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18\
    \ / 2;\n    let vowelsIndexSumCount20 = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21\
    \ = vowelsIndexSumCount20 / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21\
    \ / 2;\n    let vowelsIndexSumCount23 = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24\
    \ = vowelsIndexSumCount23 / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24\
    \ / 2;\n    let vowelsIndexSumCount\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvv_9gqw5.js:51\n    let vowelsIndexSumCount\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndexSumCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    \n    let vowels = ['a','e','i','o','u'];\n\
    \    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    \n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        let index = word.indexOf(vowels[i]);\n\
    \        if(index > -1){\n            vowelsIndex.push(index);\n        }\n  \
    \  }\n    \n    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    \n    if(vowelsIndexMin == vowelsIndexMax){\n        return \"\";\n    }\n\
    \    \n    let vowelsIndexMinIndex = 0;\n    for(let i = 0; i < vowelsIndexCount;\
    \ i++){\n        if(vowelsIndexMin == vowelsIndex[i]){\n            vowelsIndexMinIndex\
    \ = i;\n            break;\n        }\n    }\n    \n    let vowelsIndexMaxIndex\
    \ = 0;\n    for(let i = 0; i < vowelsIndexCount; i++){\n        if(vowelsIndexMax\
    \ == vowelsIndex[i]){\n            vowelsIndexMaxIndex = i;\n            break;\n\
    \        }\n    }\n    \n    let vowelsIndexMinValue = vowels[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMaxValue = vowels[vowelsIndexMaxIndex];\n    \n    let vowelsIndexMinIndexValue\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndexValue = vowelsIndex[vowelsIndexMaxIndex];\n\
    \    \n    let vowelsIndexMinValueIndex = vowelsIndex.indexOf(vowelsIndexMinValue);\n\
    \    let vowelsIndexMaxValueIndex = vowelsIndex.indexOf(vowelsIndexMaxValue);\n\
    \    \n    let vowelsIndexMinValueValue = vowels[vowelsIndexMinValueIndex];\n\
    \    let vowelsIndexMaxValueValue = vowels[vowelsIndexMaxValueIndex];\n    \n\
    \    let vowelsIndexMinValueIndexValue = vowelsIndex.indexOf(vowelsIndexMinValueIndex);\n\
    \    let vowelsIndexMaxValueIndexValue = vowelsIndex.indexOf(vowelsIndexMaxValueIndex);\n\
    \    \n    let vowelsIndexMinValueValueIndex = vowelsIndex.indexOf(vowelsIndexMinValueValue);\n\
    \    let vowelsIndexMaxValueValueIndex = vowelsIndex.indexOf(vowelsIndexMaxValueValue);\n\
    \    \n    let vowelsIndexMinValueValueValue = vowels[vowelsIndexMinValueValueIndex];\n\
    \    let vowelsIndexMaxValueValueValue = vowels[vowelsIndexMaxValueValueIndex];\n\
    \    \n    let vowelsIndexMinValueValueIndexValue = vowelsIndex.indexOf(vowelsIndexMinValueValueIndex);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjkm7q6r9.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwkl2dtjq.js:80\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaf1vovi9.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    let vowelsIndexMax = Math.max.apply(null,\
    \ vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMiddle = Math.floor((vowelsIndexMax + vowelsIndexMin)/2);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt\
    \ = parseInt(vowelsIndexMiddle);\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfveqjmet.js:30\n    let vowelsIndexMiddleInt = parseInt(vowelsIndexMiddle);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleInt' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd6f_4ot6.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = [];\n\
    \    let vowelsIndexCountSum = 0;\n    let vowelsIndexSum = 0;\n    let vowelsIndexSumCount\
    \ = 0;\n    let vowelsIndexSumCountSum = 0;\n    let vowelsIndexSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n\
    \    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n    let\
    \ vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpigxnsij7.js:32\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumCountSumCountSumCountSumCountSum'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvqeplmkb.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(word.indexOf(vowels[i]));\n    }\n    let vowelsIndex = vowelsIndex.sort((a,\
    \ b) => a - b);\n    let vowelsIndex = vowelsIndex.reverse();\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowelsIndex.filter(item => item < word.length\
    \ - 1);\n    let vowelsIndex = vowelsIndex.filter(item => item > 0);\n    let\
    \ vowelsIndex = vowelsIndex.filter(item => item < word.length - 1);\n    let vowelsIndex\
    \ = vowelsIndex.filter(item => item > 0);\n    let vowelsIndex = vowelsIndex.filter(item\
    \ => item < word.length - 1);\n    let vowelsIndex = vowelsIndex.filter(item =>\
    \ item > 0);\n    let vowelsIndex = vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkb8jtjwa.js:22\n    let vowelsIndex = vowelsIndex.sort((a, b) =>\
    \ a - b);\n        ^\n\nSyntaxError: Identifier 'vowelsIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"AEIOUaeiou\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = word.length -\
    \ vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = word.length\
    \ - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr_tyzxrf.js:46\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle_to_right\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmm87oy3q.js:41\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count_from_middle + 1;\n\tlet vowels_count_from_middle3\
    \ = vowels_count_from_middle2 + 1;\n\tlet vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + 1;\n\tlet vowels_count_from_middle5 = vowels_count_from_middle4 + 1;\n\tlet\
    \ vowels_count_from_middle6 = vowels_count_from_middle5 + 1;\n\tlet vowels_count_from_middle7\
    \ = vowels_count_from_middle6 + 1;\n\tlet vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + 1;\n\tlet vowels_count_from_middle9 = vowels_count_from_middle8 + 1;\n\tlet\
    \ vowels_count_from_middle10 = vowels_count_from_middle9 + 1;\n\tlet vowels_count_from_middle11\
    \ = vowels_count_from_middle10 + 1;\n\tlet vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + 1;\n\tlet vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n\t\
    let vowels_count_from_middle14 = vowels_count_from_middle13 + 1;\n\tlet vowels_count_from_middle15\
    \ = vowels_count_from_middle14 + 1;\n\tlet vowels_count_from_middle16 = vowels_count_from_middle15\
    \ + 1;\n\tlet vowels_count_from_middle17 = vowels_count_from_middle16 + 1;\n\t\
    let vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n\tlet vowels_count_from_middle19\
    \ = vowels_count_from_middle18 + 1;\n\tlet vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + 1;\n\tlet vowels_count_from_middle21 = vowels_count_from_middle20 + 1;\n\t\
    let vowels_count_from_middle22 = vowels_count_from_middle21 + 1;\n\tlet vowels_count_from_middle23\
    \ = vowels_count_from_middle22 + 1;\n\tlet vowels_count_from_middle24 = vowels_count_from_middle23\
    \ + 1;\n\tlet vowels_count_from_middle25 = vowels_count_from_middle24 + 1;\n\t\
    let vowels_count_from_middle26 = vowels_count_from_middle25 + 1;\n\tlet vowels_count_from_middle27\
    \ = vowels_count_from_middle26 + 1;\n\tlet vowels_count_from_middle28 = vowels_count_from_middle27\
    \ + 1;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppabvg1e1.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = \"aeiouAEIOU\";\n\tlet vowels_count = vowels.length;\n\tlet vowel_positions\
    \ = [];\n\tlet vowel_positions_count = word.length;\n\tlet vowel_positions_sum\
    \ = 0;\n\tlet vowel_positions_sum_count = 0;\n\tlet vowel_positions_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_count = 0;\n\tlet vowel_positions_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_count = 0;\n\tlet vowel_positions_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_count = 0;\n\tlet vowel_positions_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_count = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_count = 0;\n\tlet\
    \ vowel_positions_sum_total_sum_total_sum_total_sum = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total = 0;\n\t\
    let vowel_positions_sum_total_sum_total_sum_total_sum_total_count = 0;\n\tlet\
    \ vowel_positions_sum_total_sum_total_sum_total_sum_total_sum = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_count\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum_total_sum\
    \ = 0;\n\tlet vowel_positions_sum_total_sum_total_sum_total_sum_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpihgkm9d9.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpscry9_j8.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    let vowel_position_count\
    \ = 0;\n    let consonants = word.split(\"\").reverse();\n    for(let i = 0; i\
    \ < consonants.length; i++){\n        if(vowels.includes(consonants[i])){\n  \
    \          vowel_found = true;\n            vowel_position = i;\n            break;\n\
    \        }\n    }\n    if(vowel_found){\n        for(let i = vowel_position; i\
    \ > 0; i--){\n            if(vowels.includes(consonants[i-1])){\n            \
    \    vowel_position_count++;\n            }\n            if(vowel_position_count\
    \ >= vowels_count){\n                return consonants[i-1];\n            }\n\
    \        }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmp6tewxka7.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6tewxka7.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(Math, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc4jj7b4o.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
