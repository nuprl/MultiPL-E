name: HumanEval_92_any_int
language: js
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n\
  // >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
  \ -2.2, 2)\n// false\nfunction any_int(x, y, z){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
  \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
  \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
  \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
  \ 4, 7),false);\n}\n\ntest();"
completions: ["  if(typeof x === 'number' && typeof y === 'number' && typeof z ===\
    \ 'number'){\n    return ((x + y + z) === (x + y) || x === y || x === z || y ===\
    \ z);\n  }\n  return false;\n}\n", "    var sum = 0;\n    for(var i = 0; i < x.length;\
    \ i++){\n        sum += x[i];\n    }\n    for(var i = 0; i < y.length; i++){\n\
    \        sum += y[i];\n    }\n    for(var i = 0; i < z.length; i++){\n       \
    \ sum += z[i];\n    }\n    return sum == x || sum == y || sum == z;\n}\n", "\t\
    let sum = 0;\n\tlet i;\n\tlet j;\n\tlet k;\n\t\n\tfor(i = 0; i < x.length; i++){\n\
    \t\tsum += x[i];\n\t}\n\t\n\tfor(j = 0; j < y.length; j++){\n\t\tsum += y[j];\n\
    \t}\n\t\n\tfor(k = 0; k < z.length; k++){\n\t\tsum += z[k];\n\t}\n\t\n\treturn\
    \ (sum === 0 || sum === x.length + y.length + z.length);\n}\n", "\tvar sum = 0;\n\
    \tfor(var i=0; i<x.length; i++){\n\t\tsum += x[i];\n\t}\n\tfor(var i=0; i<y.length;\
    \ i++){\n\t\tsum += y[i];\n\t}\n\tfor(var i=0; i<z.length; i++){\n\t\tsum += z[i];\n\
    \t}\n\treturn (sum == 0 || sum == x.length || sum == y.length || sum == z.length);\n\
    }\n", "    var sum = 0;\n    for(var i=0; i<x.length; i++){\n        sum += x[i];\n\
    \    }\n    for(var i=0; i<y.length; i++){\n        sum += y[i];\n    }\n    for(var\
    \ i=0; i<z.length; i++){\n        sum += z[i];\n    }\n    return (sum == 0 ||\
    \ sum == x || sum == y || sum == z);\n}\n", "\tlet sum = 0;\n\tlet num1 = Number(x);\n\
    \tlet num2 = Number(y);\n\tlet num3 = Number(z);\n\t\n\tlet nums = [num1, num2,\
    \ num3];\n\t\n\tfor(let i = 0; i < nums.length; i++){\n\t\tsum += nums[i];\n\t\
    }\n\t\n\tlet bool = sum == num1 + num2 + num3;\n\t\n\treturn bool;\n}\n", "  if(typeof\
    \ x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return\
    \ false;\n  }\n  if(x === y){\n    if(x === z){\n      return true;\n    }\n \
    \   return false;\n  }\n  if(x === z){\n    return true;\n  }\n  if(y === z){\n\
    \    return true;\n  }\n  return false;\n}\n", "    var sum = 0;\n    for(var\
    \ i = 0; i < x.length; i++){\n        sum += x[i];\n    }\n    for(var i = 0;\
    \ i < y.length; i++){\n        sum += y[i];\n    }\n    for(var i = 0; i < z.length;\
    \ i++){\n        sum += z[i];\n    }\n    return sum == 0 || sum == x || sum ==\
    \ y || sum == z;\n}\n", "    var sum = 0;\n    for(var i=0; i<x.length; i++){\n\
    \        sum += x[i];\n    }\n    for(var i=0; i<y.length; i++){\n        sum\
    \ += y[i];\n    }\n    for(var i=0; i<z.length; i++){\n        sum += z[i];\n\
    \    }\n    return (sum === 0 || sum === x.length + y.length + z.length);\n}\n",
  "    var sum = 0;\n    for(var i=0; i<x.length; i++){\n        sum += x[i];\n  \
    \  }\n    for(var i=0; i<y.length; i++){\n        sum += y[i];\n    }\n    for(var\
    \ i=0; i<z.length; i++){\n        sum += z[i];\n    }\n    return sum == (x+y+z);\n\
    }\n", "    if (typeof(x) != \"number\" || typeof(y) != \"number\" || typeof(z)\
    \ != \"number\"){\n        return false;\n    }\n    if (x == y || x == z){\n\
    \        return true;\n    }\n    if (x > y && x > z){\n        return true;\n\
    \    }\n    if (y > x && y > z){\n        return true;\n    }\n    if (z > x &&\
    \ z > y){\n        return true;\n    }\n    return false;\n}\n", "  if(typeof\
    \ x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return\
    \ false;\n  }\n  if(x === y || x === z){\n    return true;\n  }\n  if(x > y &&\
    \ x > z){\n    return true;\n  }\n  if(y > x && y > z){\n    return true;\n  }\n\
    \  if(z > x && z > y){\n    return true;\n  }\n  return false;\n}\n", "    var\
    \ sum = 0;\n    for(var i = 0; i<arguments.length; i++){\n        sum += arguments[i];\n\
    \    }\n    return sum == x || sum == y || sum == z;\n}\n", "  if(typeof x !==\
    \ 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return false;\n\
    \  }\n  if(x === y || x === z){\n    return true;\n  }\n  if(x > y && x > z){\n\
    \    return true;\n  }\n  if(y > x && y > z){\n    return true;\n  }\n  if(z >\
    \ x && z > y){\n    return true;\n  }\n  return false;\n}\n", "    return ((x\
    \ === y) && (x === z) && (x === Math.floor(x)));\n}\n", "\tlet sum = 0;\n\tfor(let\
    \ i = 0; i < x.length; i++){\n\t\tsum += x[i];\n\t}\n\tfor(let i = 0; i < y.length;\
    \ i++){\n\t\tsum += y[i];\n\t}\n\tfor(let i = 0; i < z.length; i++){\n\t\tsum\
    \ += z[i];\n\t}\n\treturn (sum === (x[0] + y[0] + z[0]));\n}\n", "\tlet sum =\
    \ 0;\n\tfor(let i = 0; i < x.length; i++){\n\t\tsum += x[i];\n\t}\n\tfor(let i\
    \ = 0; i < y.length; i++){\n\t\tsum += y[i];\n\t}\n\tfor(let i = 0; i < z.length;\
    \ i++){\n\t\tsum += z[i];\n\t}\n\treturn (sum === 0 || sum === x.length + y.length\
    \ + z.length);\n}\n", "    if (x === y || x === z){\n        return true;\n  \
    \  }\n    if (x === null || x === undefined){\n        return false;\n    }\n\
    \    if (y === null || y === undefined){\n        return false;\n    }\n    if\
    \ (z === null || z === undefined){\n        return false;\n    }\n    if (x.constructor\
    \ !== Number){\n        return false;\n    }\n    if (y.constructor !== Number){\n\
    \        return false;\n    }\n    if (z.constructor !== Number){\n        return\
    \ false;\n    }\n    if (x === y){\n        if (x === z){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if (x === z){\n        return\
    \ true;\n    }\n    if (y === z){\n        return true;\n    }\n    if (x ===\
    \ null || y === null || z === null || x.constructor !== Number || y.constructor\
    \ !== Number || z.constructor !== Number){\n        return false;\n    }\n   \
    \ if (x === y){\n        if (x === z){\n            return true;\n        }\n\
    \        return false;\n    }\n    if (x === z){\n        return true;\n    }\n\
    \    if (y === z){\n        return true;\n    }\n    if (x === null || y === null\
    \ || z === null || x.constructor !== Number || y.constructor !== Number || z.constructor\
    \ !== Number){\n        return false;\n    }\n    if (x === y){\n        if (x\
    \ === z){\n            return true;\n        }\n        return false;\n    }\n\
    \    if (x === z){\n        return true;\n    }\n    if (y === z){\n        return\
    \ true;\n    }\n    if (x === null || y === null || z === null || x.constructor\
    \ !== Number || y.constructor !== Number || z.constructor !== Number){\n     \
    \   return false;\n    }\n    if (x === y){\n        if (x === z){\n         \
    \   return true;\n        }\n        return false;\n    }\n    if (x === z){\n\
    \        return true;\n    }\n    if (y === z){\n        return true;\n    }\n\
    \    return false;\n}\n", "  if(typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number'){\n    return false;\n  }\n  if(x === y){\n    if(x\
    \ === z){\n      return true;\n    }\n    return false;\n  }\n  if(x === z){\n\
    \    return true;\n  }\n  return false;\n}\n", "  if(typeof x === 'number' &&\
    \ typeof y === 'number' && typeof z === 'number'){\n    return ((x + y + z) ===\
    \ (x + y) || x === y || x === z || y === z);\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
