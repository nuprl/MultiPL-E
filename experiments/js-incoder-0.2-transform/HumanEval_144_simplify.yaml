name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n\
  // >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\"\
  )\n// false\nfunction simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["  if(n.indexOf('/') === -1){\n    return x === n\n  }\n  if(x.indexOf('/')\
    \ === -1){\n    return false\n  }\n  var nums = x.split('/')\n  var denom = n.split('/')\n\
    \  var num\n  var denom\n  for(var i = 0; i < (nums.length - denom.length); i++){\n\
    \    if(nums[i] === '0'){\n      return false\n    }\n  }\n  for(var i = 0; i\
    \ < (denom.length - nums.length); i++){\n    if(denom[i] === '0'){\n      return\
    \ false\n    }\n  }\n  return true\n}\n", "    \n    // Your code goes here\n\
    }\n</cell>\n<text>\nProblem 3\nImplement a function that will calculate the factorial\
    \ of a number. Factorial of a number is the product of all positive integers less\
    \ than or equal to that number. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\n\n\
    You can assume that x is a valid integer and does not have a zero as its denominator.\
    \ You may assume that x is positive.\n\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(100)\n6.61512e-34\n>>> factorial(1000)\n1.7976931348623157e+308\n\
    >>> factorial(10000)\n2.6628318530717953e+614\n>>> factorial(100000)\n4.9406564584124654e+614\n\
    >>> factorial(1000000)\n1.8446744073709552e+1953\n>>> factorial(10000000)\n2.302585092994046e+6143\n\
    >>> factorial(100000000)\n5.66564e-39\n>>> factorial(1000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000)\n3.42869451e+61\n>>> factorial(100000000000)\n1.189731495e+34\n\
    >>> factorial(1000000000000)\n6.61512e-34\n>>> factorial(10000000000000)\n2.6628318530717953e+614\n\
    >>> factorial(100000000000000)\n4.9406564584124654e+614\n>>> factorial(1000000000000000)\n\
    1.8446744073709552e+1953\n>>> factorial(10000000000000000)\n2.302585092994046e+6143\n\
    >>> factorial(100000000000000000)\n5.66564e-39\n>>> factorial(1000000000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(10000000000000000000)\n3.42869451e+61\n\
    >>> factorial(100000000000000000000)\n1.189731495e+34\n>>> factorial(1000000000000000000000)\n\
    6.61512e-34\n>>> factorial(1000000000000000000000)\n2.6628318530717953e+614\n\
    >>> factorial(10000000000000000000000)\n4.9406564584124654e+614\n>>> factorial(100000000000000000000000)\n\
    1.8446744073709552e+1953\n>>> factorial(1000000000000000000000000)\n2.302585092",
  "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLength\
    \ = nums.length;\n    var densLength = dens.length;\n    var numsRemaining = [];\n\
    \    var densRemaining = [];\n    var numsSum = 0;\n    var densSum = 0;\n   \
    \ var i = 0;\n    for(i = 0; i < numsLength; i++){\n        numsRemaining.push(parseInt(nums[i]));\n\
    \        numsSum += numsRemaining[i];\n    }\n    for(i = 0; i < densLength; i++){\n\
    \        densRemaining.push(parseInt(dens[i]));\n        densSum += densRemaining[i];\n\
    \    }\n    if(numsSum == densSum){\n        return true;\n    }\n    return false;\n\
    }\n", "    var numerator=x.split(\"/\")[0];\n    var denominator=x.split(\"/\"\
    )[1];\n    if(numerator==\"\" || denominator==\"\"){\n        return false;\n\
    \    }\n    if(numerator==0 && denominator==0){\n        return true;\n    }\n\
    \    if(numerator==0 && denominator!=0){\n        return false;\n    }\n    if(numerator!==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numerator!==0 && denominator!=0){\n\
    \        if(numerator*denominator>0){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n#\
    \ Run this cell to test your code\nx = \"1/5\"\nn = \"5/1\"\nsimplify(x, n)\n\
    </cell>\n<text>\nProblem 3\nThe function below takes a string representing a fraction\
    \ and returns the fraction simplified to a whole number.\n\n\n</text>\n<cell>\n\
    # Run this cell to test your code\nx = \"1/5\"\nsimplify(x)\n</cell>\n<text>\n\
    Problem 4\nThe function below takes a string representing a fraction and returns\
    \ the fraction simplified to a whole number.\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your code\nx = \"1/6\"\nsimplify(x)\n</cell>\n<text>\nProblem 5\n\
    The function below takes a string representing a fraction and returns the fraction\
    \ simplified to a whole number.\n\n\n</text>\n<cell>\n# Run this cell to test\
    \ your code\nx = \"7/10\"\nsimplify(x)\n</cell>\n<text>\nProblem 6\nThe function\
    \ below takes a string representing a fraction and returns the fraction simplified\
    \ to a whole number.\n\n\n</text>\n<cell>\n# Run this cell to test your code\n\
    x = \"1/5\"\nsimplify(x)\n</cell>\n<text>\nProblem 7\nThe function below takes\
    \ a string representing a fraction and returns the fraction simplified to a whole\
    \ number.\n\n\n</text>\n<cell>\n# Run this cell to test your code\nx = \"1/6\"\
    \nsimplify(x)\n</cell>\n<text>\nProblem 8\nThe function below takes a string representing\
    \ a fraction and returns the fraction simplified to a whole number.\n\n\n</text>\n\
    <cell>\n# Run this cell to test your code\nx = \"7/10\"\nsimplify(x)\n</cell>\n\
    <text>\nProblem 9\nThe function below takes a string representing a fraction and\
    \ returns the fraction simplified to a whole number.\n\n\n</text>\n<cell>\n# Run\
    \ this cell to test your code\nx = \"1/5\"\nsimplify(x)\n</cell>\n<text>\nProblem\
    \ 10\nThe function below takes a string representing a fraction and returns the\
    \ fraction simplified to a whole number.\n\n\n</text>\n<cell>\n# Run this cell\
    \ to test your code\nx = \"1/6\"\nsimplify(x)\n</cell>\n<text>\nProblem 11\nThe\
    \ function below takes a string representing a fraction and returns the fraction\
    \ simplified to a whole number.\n\n\n</text>\n<cell>\n# Run this cell to test\
    \ your code\nx = \"7/10\"\nsimplify(x)\n</cell>\n<text>\nProblem 12\nThe function\
    \ below takes a string representing a fraction and ", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that will take two fractions as\
    \ input and return the greatest common divisor of them. Both fractions are represented\
    \ as strings, with <numerator>/<denominator> format. Both numerator and denominator\
    \ are positive whole numbers. You can assume that both fractions do not have zero\
    \ as denominator. For example,\n\n>>> greatest_common_divisor(\"1/5\", \"5/1\"\
    )\n1\n>>> greatest_common_divisor(\"1/6\", \"2/1\")\n2\n>>> greatest_common_divisor(\"\
    7/10\", \"10/2\")\n2\n>>> greatest_common_divisor(\"1/6\", \"3/2\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"2/3\")\n1\n>>> greatest_common_divisor(\"1/6\", \"3/4\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/2\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/4\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/8\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/16\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/32\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/64\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/128\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/256\")\n1\n>>>\
    \ greatest_common_divisor(\"1/6\", \"1/512\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/1024\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/2048\")\n1\n>>>\
    \ greatest_common_divisor(\"1/6\", \"1/4096\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/8192\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/16384\")\n1\n\
    >>> greatest_common_divisor(\"1/6\", \"1/32768\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/65536\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/131072\")\n1\n\
    >>> greatest_common_divisor(\"1/6\", \"1/262144\")\n1\n>>> greatest_common_divisor(\"\
    1/6\", \"1/524288\")\n1\n>>> greatest_common_divisor(\"1/6\", \"1/1048576\")\n\
    1\n>>> greatest_common_divisor(\"1/6\", \"1/2097152\")\n1", "    // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 4\nImplement a function that will evaluate\
    \ a mathematical expression given as a string. For example, the string \"(5+3)*2\"\
    \ should return 18. You may assume that the input expression is valid, and that\
    \ all parentheses are properly balanced. You may assume that all operators are\
    \ valid and have valid precedence. You may assume that all numbers are valid and\
    \ do not contain leading zeroes.\n\n>>> evaluate(\"(5+3)*2\")\n18\n>>> evaluate(\"\
    (5+3)*2+1\")\n19\n>>> evaluate(\"(5+3)*2+1*2\")\n20\n>>> evaluate(\"(5+3)*2+1*2+1\"\
    )\n22\n>>> evaluate(\"(5+3)*2+1*2+1*2\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2\")\n24\n>>> evaluate(\"\
    (5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1\")\n24\n>>> evaluate(\"\
    (5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2\")\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1\"\
    )\n24\n>>> evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2\")\n24\n>>>\
    \ evaluate(\"(5+3)*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+1*2+", "    \n    // Your\
    \ code goes here\n    \n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 4\nWrite a function that will evaluate a mathematical expression given\
    \ in string form and return its value.\nThe function should take two arguments:\
    \ a string expression and a dictionary of symbols. For example, the string \"\
    x + y\" and the dictionary {\"x\": 5, \"y\": 6} should return 17.\nThe function\
    \ should return None if the expression is invalid or malformed.\n>>> evaluate(\"\
    x + y\", {\"x\": 5, \"y\": 6})\n17\n>>> evaluate(\"x + y\", {\"x\": 5, \"y\":\
    \ None})\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\n  File \"<stdin>\", line 2, in <lambda>\n\
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'\n>>> evaluate(\"\
    x + y\", {\"x\": None, \"y\": 6})\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\n\
    \  File \"<stdin>\", line 2, in <lambda>\nTypeError: unsupported operand type(s)\
    \ for +: 'NoneType' and 'int'\n>>> evaluate(\"x + y\", {\"x\": None, \"y\": None})\n\
    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\n  File \"<stdin>\", line 2, in <lambda>\n\
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'\n>>> evaluate(\"\
    x + y\", {\"x\": None, \"y\": None})\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\n\
    \  File \"<stdin>\", line 2, in <lambda>\nTypeError: unsupported operand type(s)\
    \ for +: 'NoneType' and 'NoneType'\n>>> evaluate(\"x + y\", {\"x\": None, \"y\"\
    : None})\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\n  File \"<stdin>\", line 2, in <lambda>\n\
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'\n>>> evaluate(\"\
    x + y\", {\"x\": None, \"y\": None})\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\n\
    \  File \"<stdin>\", line 2, in <lambda>\nTypeError: unsupported operand type(s)\
    \ for +: 'NoneType' and 'NoneType'\n>>> evaluate(\"x + y\", {\"x\": None, \"y\"\
    : None})\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\n  File \"<stdin>\", line 2, ", "   \
    \ var numerator = x.split(\"/\");\n    var denominator = n.split(\"/\");\n   \
    \ var numeratorLength = numerator.length;\n    var denominatorLength = denominator.length;\n\
    \    var isWholeNumber = true;\n    var isNegative = true;\n    var isNegativeFraction\
    \ = true;\n    var isFraction = true;\n    var isFractional = true;\n    var isNegativeFractional\
    \ = true;\n    var isNegative = true;\n    var isPositive = true;\n    var isPositiveFraction\
    \ = true;\n    var isPositiveFractional = true;\n    var isPositive = true;\n\
    \    var isNegative = true;\n    var isPositive = true;\n    var isNegative =\
    \ true;\n    var isPositive = true;\n    var isNegative = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive\
    \ = true;\n    var isPositive = true;\n    var isPositive = true;\n    var isPositive",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take two fractions as input and return the greatest common denominator\
    \ of them. Both fractions are valid fractions and do not have zero as denominator.\
    \ Assume that both fractions are valid strings with <numerator>/<denominator>\
    \ format. You may assume that both fractions are valid and do not contain any\
    \ leading or trailing zeros.\n\n\n</text>\n<cell>", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 4\nWrite a function that will take a string as input\
    \ and will return the string with all occurrences of 'a' replaced by 'e'. The\
    \ function should take one parameter, a string as input, and return a new string\
    \ as output.\n\n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will return the number of digits in a\
    \ number. For example, for the number 123, the function should return 3.\n\nThe\
    \ function should work for negative numbers as well. For example, for the number\
    \ -123, the function should return 3.\n\nThe function should work for fractions\
    \ as well. For example, for the number 2/3, the function should return 2.\n\n\n\
    </text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will evaluate an arithmetic expression given as a string\
    \ and return the result as a float.\nThe function should support the following\
    \ syntax:\n\n<expression> ::= <term> + <term> / <term>\n<expression> ::= <term>\
    \ - <term>\n<expression> ::= <term> * <term>\n<expression> ::= <term> / <term>\n\
    <expression> ::= <term> % <term>\n<expression> ::= <term> ** <term>\n<expression>\
    \ ::= <term> + <term>\n<expression> ::= <term> - <term>\n<expression> ::= <term>\
    \ * <term>\n<expression> ::= <term> / <term>\n<expression> ::= <term> % <term>\n\
    <expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression>\
    \ ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term>\
    \ ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n\
    <expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression>\
    \ ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term>\
    \ ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n\
    <expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression>\
    \ ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term>\
    \ ** <term>\n<expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n\
    <expression> ::= <term> ** <term>\n<expression> ::= <term> ** <term>\n<expression>\
    \ ::= <term> ** <term>\n<expression> ::= <term> ** <", "    var numerator = parseInt(x.split(\"\
    /\")[0]);\n    var denominator = parseInt(x.split(\"/\")[1]);\n    if(numerator\
    \ == 0 && denominator == 0){\n        return true;\n    }\n    if(numerator ==\
    \ 0){\n        return false;\n    }\n    if(denominator == 0){\n        return\
    \ false;\n    }\n    if(numerator > denominator){\n        return false;\n   \
    \ }\n    if(numerator < 0){\n        return false;\n    }\n    if(numerator ==\
    \ denominator){\n        return true;\n    }\n    if(numerator % denominator ==\
    \ 0){\n        return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot use any external\
    \ libraries. I should implement it myself.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses only basic javascript functions. I hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Unfortunately, I cannot use any external libraries.\
    \ I should implement it myself.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ only basic javascript functions. I hope it helps.\n<|/ c |>\n<| a tags=javascript,fractions\
    \ |>\n<code>", "    // Write your code here\n}\n", "    \n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take two fractions as input and return the\
    \ greatest common divisor (GCD) of those two fractions. GCD is a whole number\
    \ that is the largest integer that divides both its numerator and its denominator.\n\
    \n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will evaluate an arithmetic expression given as a string.\
    \ Your function should return a number. For example, the string \"5+5\" should\
    \ return 10, and \"5+5*5\" should return 25. You may assume that the input string\
    \ contains only valid arithmetic expressions.\n\n\n</text>\n<cell>", "    // Your\
    \ code here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take a string as input and return the number of characters in the string.\
    \ \nThe function should ignore all non-alphanumeric characters. \nThe function\
    \ should ignore all spaces and punctuation. \nThe function should ignore all empty\
    \ strings.\n\n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 7: Write a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all spaces and return 0 for the empty string.\nThe function should\
    \ ignore all non-numeric characters and return 0 for the string \"0\".\nThe function\
    \ should ignore all non-numeric characters and return 0 for the string \"-0\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"00\".\nThe function should ignore all non-numeric characters and return\
    \ 0 for the string \"000\".\nThe function should ignore all non-numeric characters\
    \ and return 0 for the string \"0000\".\nThe function should ignore all non-numeric\
    \ characters and return 0 for the string \"00000\".\nThe function should ignore\
    \ all non-numeric characters and return 0 for the string \"000000\".\nThe function\
    \ should ignore all non-numeric characters and return 0 for the string \"0000000\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"00000000\".\nThe function should ignore all non-numeric characters\
    \ and return 0 for the string \"000000000\".\nThe function should ignore all non-numeric\
    \ characters and return 0 for the string \"0000000000\".\nThe function should\
    \ ignore all non-numeric characters and return 0 for the string \"00000000000\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"000000000000\".\nThe function should ignore all non-numeric characters\
    \ and return 0 for the string \"0000000000000\".\nThe function should ignore all\
    \ non-numeric characters and return 0 for the string \"00000000000000\".\nThe\
    \ function should ignore all non-numeric characters and return 0 for the string\
    \ \"000000000000000\".\nThe function should ignore all non-numeric characters\
    \ and return 0 for the string \"0000000000000000\".\nThe function should ignore\
    \ all non-numeric characters and return 0 for the string \"00000000000000000\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"000000000000000000\".\nThe function should ignore all non-numeric characters\
    \ and return 0 for the string \"0000000000000000000\".\nThe function should ignore\
    \ all non-numeric characters and return 0 for the string \"00000000000000000000\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"000000000000000000000\".\nThe function should ignore all non-numeric\
    \ characters and return 0 for the string \"0000000000000000000000\".\nThe function\
    \ should ignore all non-numeric characters and return 0 for the string \"00000000000000000000000\"\
    .\nThe function should ignore all non-numeric characters and return 0 for the\
    \ string \"000000000000000000000000\".\nThe function should ", "  // Your code\
    \ here\n}\n</cell>\n<cell>\n# Run this cell to test your solution\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will return the number of digits in an integer.\n\n>>> count_digits(123)\n3\n\
    >>> count_digits(1234)\n4\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5", "    // Write your\
    \ code here\n}\n</cell>\n<text>\nProblem 4\nThe function below will take in a\
    \ string representing a fraction and return its simplified form.\n\n\n</text>\n\
    <cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that will return the number of digits in an integer.\n\n\n</text>\n\
    <cell>", "  // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your\
    \ code. Make sure you get 'True' before proceeding.\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string representing a fraction and returns the fraction represented\
    \ by the string.\nThe function should return False if the string does not represent\
    \ a fraction or if the fraction does not have a valid format.\nThe function should\
    \ return True if the string represents a valid fraction and False otherwise.\n\
    >>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\"\
    )\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue", "   \
    \ // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\n\
    \n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will accept two fractions as arguments and return True if\
    \ they represent the same fraction, False otherwise.\n\nThe function should return\
    \ False if either of the arguments are None, or if the numerator and denominator\
    \ are both zero, or if either of the arguments are negative.\n\n>>> fraction1\
    \ = Fraction(1, 5)\n>>> fraction2 = Fraction(2, 5)\n>>> fraction3 = Fraction(1,\
    \ 0)\n>>> fraction4 = Fraction(-1, 5)\n>>> fraction5 = Fraction(-2, 5)\n>>> fraction6\
    \ = Fraction(7, 10)\n>>> fraction7 = Fraction(10, 2)\n>>> fraction8 = Fraction(7,\
    \ 0)\n>>> fraction9 = Fraction(7, -5)\n>>> fraction10 = Fraction(7, -2)\n>>> fraction11\
    \ = Fraction(7, -10)\n>>> fraction12 = Fraction(7, -7)\n>>> fraction13 = Fraction(7,\
    \ -6)\n>>> fraction14 = Fraction(7, -3)\n>>> fraction15 = Fraction(7, -1)\n>>>\
    \ fraction16 = Fraction(7, -4)\n>>> fraction17 = Fraction(7, -2)\n>>> fraction18\
    \ = Fraction(7, -1)\n>>> fraction19 = Fraction(7, 0)\n>>> fraction20 = Fraction(7,\
    \ 1)\n>>> fraction21 = Fraction(7, 2)\n>>> fraction22 = Fraction(7, 3)\n>>> fraction23\
    \ = Fraction(7, 4)\n>>> fraction24 = Fraction(7, 5)\n>>> fraction25 = Fraction(7,\
    \ 6)\n>>> fraction26 = Fraction(7, 7)\n>>> fraction27 = Fraction(7, 8)\n>>> fraction28\
    \ = Fraction(7, 9)\n>>> fraction29 = Fraction(7, 10)\n>>> fraction30 = Fraction(7,\
    \ 11)\n>>> fraction31 = Fraction(7, 12)\n>>> fraction32 = Fraction(7, 13)\n>>>\
    \ fraction33 = Fraction(7, 14)\n>>> fraction34 = Fraction(7, 15)\n>>> fraction35\
    \ = Fraction(7, 16)\n>>> fraction36 = Fraction(7, 17)\n>>> fraction37 = Fraction(7,\
    \ 18)\n>>> fraction38 = Fraction(7, 19)\n>>> fraction39 = Fraction(7, 20)\n>>>\
    \ fraction40 = Fraction(7, 21)\n>>> fraction41 = Fraction(7, 22)\n>>> fraction42\
    \ = Fraction(7, 23)\n>>> fraction43 = Fraction(7, 24)\n>>> fraction44 = Fraction(7,\
    \ 25)\n>>> fraction45 = Fraction(7, 26)\n>>> fraction46 = Fraction(7, 27)\n>>>\
    \ fraction47 = Fraction(7, 28)\n>>> fraction48 = Fraction(7, 29)\n>>> fraction49\
    \ = Fraction(7, 30)\n>>> fraction50 = Fraction(7, 31)", "  if(x.indexOf(\"/\"\
    ) != -1){\n    var nums = x.split(\"/\");\n    var num1 = nums[0];\n    var num2\
    \ = nums[1];\n    if(num1.indexOf(\".\") == -1){\n      num1 = num1 + \".0\";\n\
    \    }\n    if(num2.indexOf(\".\") == -1){\n      num2 = num2 + \".0\";\n    }\n\
    \    var num3 = num1.split(\".\");\n    var num4 = num2.split(\".\");\n    var\
    \ num5 = num3[0];\n    var num6 = num3[1];\n    var num7 = num4[0];\n    var num8\
    \ = num4[1];\n    if(num5.indexOf(\".\") == -1){\n      num5 = num5 + \".0\";\n\
    \    }\n    if(num6.indexOf(\".\") == -1){\n      num6 = num6 + \".0\";\n    }\n\
    \    if(num7.indexOf(\".\") == -1){\n      num7 = num7 + \".0\";\n    }\n    if(num8.indexOf(\"\
    .\") == -1){\n      num8 = num8 + \".0\";\n    }\n    var num9 = num5 + num6;\n\
    \    var num10 = num7 + num8;\n    var num11 = num9 + num10;\n    var num12 =\
    \ num11 + num9;\n    var num13 = num12 + num10;\n    var num14 = num13 + num11;\n\
    \    var num15 = num14 + num12;\n    var num16 = num15 + num13;\n    var num17\
    \ = num16 + num14;\n    var num18 = num17 + num15;\n    var num19 = num18 + num16;\n\
    \    var num20 = num19 + num17;\n    var num21 = num20 + num18;\n    var num22\
    \ = num21 + num19;\n    var num23 = num22 + num20;\n    var num24 = num23 + num21;\n\
    \    var num25 = num24 + num22;\n    var num26 = num25 + num23;\n    var num27\
    \ = num26 + num24;\n    var num28 = num27 + num25;\n    var num29 = num28 + num26;\n\
    \    var num30 = num29 + num27;\n    var num31 = num30 + num28;\n    var num32\
    \ = num31 + num29;\n    var num33 = num32 + num30;\n    var num34 = num33 + num31;\n\
    \    var num35 = num34 + num32;\n    var num36 = num35 + num33;\n    var num37\
    \ = num36 + num34;\n    var num38 = num37 + num35;\n    var num", "    var nums\
    \ = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLen = nums.length;\n\
    \    var densLen = dens.length;\n    var isNum = numsLen === densLen;\n    var\
    \ isDen = densLen === 1;\n    var isNumOrDen = numsLen > densLen;\n    var isNumAndDen\
    \ = numsLen === densLen;\n    var isNumAndNum = numsLen === numsLen && numsLen\
    \ === densLen;\n    var isNumOrDenOrNumAndDen = numsLen > densLen || densLen >\
    \ numsLen;\n    var isNumOrDenOrNumAndNum = numsLen > densLen || numsLen > densLen;\n\
    \    var isNumOrDenOrNumAndDenOrNum = numsLen > densLen || densLen > numsLen ||\
    \ numsLen === densLen;\n    var isNumOrDenOrNumAndNumOrDen = numsLen > densLen\
    \ || numsLen === densLen;\n    var isNumOrDenOrNumAndNumOrDenOrNum = numsLen >\
    \ densLen || numsLen === densLen || densLen === numsLen;\n    var isNumOrDenOrNumAndNumOrDenOrNumAndDen\
    \ = numsLen > densLen || numsLen === densLen || densLen === numsLen || numsLen\
    \ === densLen || densLen === densLen;\n    var isNumOrDenOrNumAndNumOrDenOrNumAndDenOrNum\
    \ = numsLen > densLen || numsLen === densLen || densLen === numsLen || numsLen\
    \ === densLen || densLen === densLen || numsLen === numsLen && densLen === densLen;\n\
    \    var isNumOrDenOrNumAndNumOrDenOrNumAndDenOrNumAndDen = numsLen > densLen\
    \ || numsLen === densLen || densLen === numsLen || numsLen === densLen || densLen\
    \ === densLen || numsLen === numsLen && densLen === densLen || numsLen === densLen\
    \ && numsLen === densLen;\n    var isNumOrDenOrNumAndNumOrDenOrNumAndDenOrNumAndDenOr",
  "  // Your code here\n}\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ simplify a fraction into its lowest terms. For example, the function should\
    \ simplify \"1/5\" into \"1/2\".\n\nThe function should return False if the input\
    \ fraction is invalid or if the input fraction is zero. Otherwise, return True.\n\
    \n>>> simplify(\"1/5\", \"5/1\")\nTrue\n>>> simplify(\"1/6\", \"2/1\")\nFalse\n\
    >>> simplify(\"7/10\", \"10/2\")\nFalse\n>>> simplify(\"1/0\", \"0/1\")\nFalse\n\
    >>> simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"1/0\", \"0/0\")\nTrue\n>>> simplify(\"1/0\", \"0/0\")\nTrue\n>>>\
    \ simplify(\"", "    // Write your code here\n}\n", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nThe function below will return the number of digits\
    \ in an integer.\nThe function takes in an integer and returns an integer. \n\
    The function should return 0 if the integer is zero.\nThe function should return\
    \ 0 if the integer is negative.\nThe function should return 0 if the integer is\
    \ positive.\nThe function should return 1 if the integer is odd.\nThe function\
    \ should return 2 if the integer is even.\n\n\n</text>\n<cell>", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will return\
    \ the number of digits in an integer.\n\n\n</text>\n<cell>", "    // Your code\
    \ here\n}\n</cell>\n<text>\nExercise 3\nWrite a function that will return the\
    \ factorial of a number. Factorial of a number is the product of all positive\
    \ integers less than or equal to that number. For example, factorial(5) = 5 x\
    \ 4 x 3 x 2 x 1 = 120. Your function should take one parameter, x, and return\
    \ the factorial of x.\n\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>>\
    \ factorial(0)\n1\n>>> factorial(-1)\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    ValueError: factorial() arg is an empty sequence\n>>> factorial(-10)\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty sequence\n\
    >>> factorial(\"5\")\nTraceback (most recent call last):\n  File \"<stdin>\",\
    \ line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nValueError: factorial()\
    \ arg is an empty sequence\n>>> factorial(\"10\")\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\nValueError: factorial() arg is an empty sequence\n>>> factorial(\"\
    0\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty\
    \ sequence\n>>> factorial(\"-1\")\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    ValueError: factorial() arg is an empty sequence\n>>> factorial(\"-10\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty sequence\n\
    >>> factorial(\"1/5\")\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nValueError: factorial()\
    \ arg is an empty sequence\n>>> factorial(\"2/5\")\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\nValueError: factorial() arg is an empty sequence\n>>> factorial(\"\
    3/5\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty\
    \ sequence\n>>> factorial(\"4/5\")\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    ValueError: ", "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n\
    \    var numsSum = 0, densSum = 0;\n    for(var i = 0; i < nums.length; i++){\n\
    \        numsSum += parseInt(nums[i]);\n    }\n    for(var i = 0; i < dens.length;\
    \ i++){\n        densSum += parseInt(dens[i]);\n    }\n    if(numsSum == densSum){\n\
    \        return true;\n    }\n    return false;\n}\n", "    if (x === \"0\") return\
    \ false;\n    if (x === \"1\") return true;\n    if (n.indexOf(\"/\") === -1)\
    \ {\n        return false;\n    }\n    var nums = x.split(\"/\");\n    var dens\
    \ = n.split(\"/\");\n    if (nums.length !== dens.length) {\n        return false;\n\
    \    }\n    var num = 0;\n    var den = 0;\n    for (var i = 0; i < nums.length;\
    \ i++) {\n        num += parseInt(nums[i], 10);\n    }\n    for (var i = 0; i\
    \ < dens.length; i++) {\n        den += parseInt(dens[i], 10);\n    }\n    if\
    \ (den === 0) return false;\n    if (num === 0) return true;\n    if (num ===\
    \ den) return true;\n    if (num < den) return true;\n    return false;\n}\n",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string representing a fraction and returns the fraction represented\
    \ by the string.\n\n>>> fraction(\"1/5\")\n1/5\n>>> fraction(\"2/3\")\n2/3\n>>>\
    \ fraction(\"1/6\")\n1/6\n>>> fraction(\"1/2\")\n1/2\n>>> fraction(\"3/4\")\n\
    3/4\n>>> fraction(\"2/5\")\n2/5\n>>> fraction(\"1/3\")\n1/3\n>>> fraction(\"3/5\"\
    )\n3/5\n>>> fraction(\"1/4\")\n1/4\n>>> fraction(\"1/5\")\n1/5\n>>> fraction(\"\
    1/6\")\n1/6\n>>> fraction(\"1/7\")\n1/7\n>>> fraction(\"1/8\")\n1/8\n>>> fraction(\"\
    1/9\")\n1/9\n>>> fraction(\"1/10\")\n1/10\n>>> fraction(\"1/11\")\n1/11\n>>> fraction(\"\
    1/12\")\n1/12\n>>> fraction(\"1/13\")\n1/13\n>>> fraction(\"1/14\")\n1/14\n>>>\
    \ fraction(\"1/15\")\n1/15\n>>> fraction(\"1/16\")\n1/16\n>>> fraction(\"1/17\"\
    )\n1/17\n>>> fraction(\"1/18\")\n1/18\n>>> fraction(\"1/19\")\n1/19\n>>> fraction(\"\
    1/20\")\n1/20\n>>> fraction(\"1/21\")\n1/21\n>>> fraction(\"1/22\")\n1/22\n>>>\
    \ fraction(\"1/23\")\n1/23\n>>> fraction(\"1/24\")\n1/24\n>>> fraction(\"1/25\"\
    )\n1/25\n>>> fraction(\"1/26\")\n1/26\n>>> fraction(\"1/27\")\n1/27\n>>> fraction(\"\
    1/28\")\n1/28\n>>> fraction(\"1/29\")\n1/29\n>>> fraction(\"1/30\")\n1/30\n>>>\
    \ fraction(\"1/31\")\n1/31\n>>> fraction(\"1/32\")\n1/32\n>>> fraction(\"1/33\"\
    )\n1/33\n>>> fraction(\"1/34\")\n1/34\n>>> fraction(\"1/35\")\n1/35\n>>> fraction(\"\
    1/36\")\n1/36\n>>> fraction(\"1/37\")\n1/37\n>>> fraction(\"1/38\")\n1/38\n>>>\
    \ fraction(\"1/39\")\n1/39\n>>> fraction(\"1/40\")\n1/40\n>>> fraction(\"1/41\"\
    )\n1/41\n>>> fraction(\"1/42\")\n1/42\n>>> fraction(\"1/43\")\n1/43\n>>> fraction(\"\
    1/44\")\n1/44", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nImplement\
    \ a function that will evaluate a mathematical expression given as string. For\
    \ example,\n>>> evaluate(\"(5+3)*6\")\n42\n>>> evaluate(\"(5+3)*6+2\")\n42\n>>>\
    \ evaluate(\"(5+3)*6+2/1\")\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1\")\n42.0\n>>>\
    \ evaluate(\"(5+3)*6+2/1+1+1\")\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1\")\n42.0\n\
    >>> evaluate(\"(5+3)*6+2/1+1+1+1+1\")\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1\")\n42.0\n>>> evaluate(\"\
    (5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1\")\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\")\n42.0\n>>>\
    \ evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\")\n42.0\n>>> evaluate(\"\
    (5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\")\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\"\
    )\n42.0\n>>> evaluate(\"(5+3)*6+2/1+1+", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string.\n\n\n</text>\n<cell>", "    // Write your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nThe function below will take a string\
    \ of any length and return True if it is valid fraction, False otherwise. Valid\
    \ fraction has the following format, <numerator>/<denominator> where both numerator\
    \ and denominator are positive whole numbers. You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "    \n}\n", "    // Write your code here\n}\n", "  // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will accept two fractions as arguments\
    \ and return True if they are equal, False otherwise. Both fractions are valid\
    \ strings with numerator and denominator separated by \"/\".\n>>> fraction1 =\
    \ \"1/5\"\n>>> fraction2 = \"5/1\"\n>>> fraction3 = \"2/1\"\n>>> fraction4 = \"\
    1/5\"\n>>> fraction5 = \"5/1\"\n>>> fraction6 = \"7/10\"\n>>> fraction7 = \"10/2\"\
    \n>>> fraction8 = \"1/5\"\n>>> fraction9 = \"5/1\"\n>>> fraction10 = \"7/10\"\n\
    >>> fraction11 = \"10/2\"\n>>> fraction12 = \"1/5\"\n>>> fraction13 = \"5/1\"\n\
    >>> fraction14 = \"7/10\"\n>>> fraction15 = \"10/2\"\n>>> fraction16 = \"1/5\"\
    \n>>> fraction17 = \"5/1\"\n>>> fraction18 = \"7/10\"\n>>> fraction19 = \"10/2\"\
    \n>>> fraction20 = \"1/5\"\n>>> fraction21 = \"5/1\"\n>>> fraction22 = \"7/10\"\
    \n>>> fraction23 = \"10/2\"\n>>> fraction24 = \"1/5\"\n>>> fraction25 = \"5/1\"\
    \n>>> fraction26 = \"7/10\"\n>>> fraction27 = \"10/2\"\n>>> fraction28 = \"1/5\"\
    \n>>> fraction29 = \"5/1\"\n>>> fraction30 = \"7/10\"\n>>> fraction31 = \"10/2\"\
    \n>>> fraction32 = \"1/5\"\n>>> fraction33 = \"5/1\"\n>>> fraction34 = \"7/10\"\
    \n>>> fraction35 = \"10/2\"\n>>> fraction36 = \"1/5\"\n>>> fraction37 = \"5/1\"\
    \n>>> fraction38 = \"7/10\"\n>>> fraction39 = \"10/2\"\n>>> fraction40 = \"1/5\"\
    \n>>> fraction41 = \"5/1\"\n>>> fraction42 = \"7/10\"\n>>> fraction43 = \"10/2\"\
    \n>>> fraction44 = \"1/5\"\n>>> fraction45 = \"5/1\"\n>>> fraction46 = \"7/10\"\
    \n>>> fraction47 = \"10/2\"\n>>> fraction48 = \"1/5\"\n>>> fraction49 = \"5/1\"\
    \n>>> fraction50 = \"7/10\"\n>>> fraction51 = \"10/2\"\n>>> fraction52 = \"1/5\"\
    \n>>> fraction53 = \"5/1\"\n>>> fraction54 = \"7/10\"\n>>> fraction55 = \"10/2\"\
    \n>>> fraction56 = \"1/5\"\n>>> fraction57 = \"5/1\"\n>>> fraction58 = \"7/10\"\
    \n>>> fraction59 = \"10/2\"\n>>> fraction60 = \"1/5\"\n>>> fraction61 = \"5/1\"\
    \n>>> fraction62 = \"7/10\"\n>>> fraction63 = \"10/2\"\n>>> ", "    // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will accept two fractions\
    \ as arguments and return True if they are equal and False otherwise. Both fractions\
    \ are represented as strings, and have the following format, <numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers.\n\n>>> fraction1\
    \ = \"1/5\"\n>>> fraction2 = \"5/1\"\n>>> fraction3 = \"1/6\"\n>>> fraction4 =\
    \ \"2/1\"\n>>> fraction5 = \"7/10\"\n>>> fraction6 = \"10/2\"\n>>> fraction7 =\
    \ \"1/5\"\n>>> fraction8 = \"5/1\"\n>>> fraction9 = \"1/6\"\n>>> fraction10 =\
    \ \"2/1\"\n>>> fraction11 = \"7/10\"\n>>> fraction12 = \"10/2\"\n>>> fraction13\
    \ = \"1/5\"\n>>> fraction14 = \"5/1\"\n>>> fraction15 = \"1/6\"\n>>> fraction16\
    \ = \"2/1\"\n>>> fraction17 = \"7/10\"\n>>> fraction18 = \"10/2\"\n>>> fraction19\
    \ = \"1/5\"\n>>> fraction20 = \"5/1\"\n>>> fraction21 = \"1/6\"\n>>> fraction22\
    \ = \"2/1\"\n>>> fraction23 = \"7/10\"\n>>> fraction24 = \"10/2\"\n>>> fraction25\
    \ = \"1/5\"\n>>> fraction26 = \"5/1\"\n>>> fraction27 = \"1/6\"\n>>> fraction28\
    \ = \"2/1\"\n>>> fraction29 = \"7/10\"\n>>> fraction30 = \"10/2\"\n>>> fraction31\
    \ = \"1/5\"\n>>> fraction32 = \"5/1\"\n>>> fraction33 = \"1/6\"\n>>> fraction34\
    \ = \"2/1\"\n>>> fraction35 = \"7/10\"\n>>> fraction36 = \"10/2\"\n>>> fraction37\
    \ = \"1/5\"\n>>> fraction38 = \"5/1\"\n>>> fraction39 = \"1/6\"\n>>> fraction40\
    \ = \"2/1\"\n>>> fraction41 = \"7/10\"\n>>> fraction42 = \"10/2\"\n>>> fraction43\
    \ = \"1/5\"\n>>> fraction44 = \"5/1\"\n>>> fraction45 = \"1/6\"\n>>> fraction46\
    \ = \"2/1\"\n>>> fraction47 = \"7/10\"\n>>> fraction48 = \"10/2\"\n>>> fraction49\
    \ = \"1/5\"\n>>> fraction50 = \"5/1\"\n>>> fraction51 = \"1/6\"\n>>> fraction52\
    \ = \"2/1\"\n>>> fraction53 = \"7/10\"\n>>> fraction54 = \"10/2\"\n>>> fraction55\
    \ = \"1/5\"\n>>> fraction56 = \"5/1\"\n>>> fraction57 = \"1/6\"\n>>> fraction58\
    \ = \"2/1\"\n>>> fraction59 = \"7/10\"\n>>> fraction60 = \"10/2\"\n>>> fraction61\
    \ = \"", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will take a string representing a fraction and return its numerator and\
    \ denominator.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function\
    \ should raise an exception if the input string does not represent a fraction.\n\
    The function should raise an exception if the input string does not represent\
    \ a fraction.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function\
    \ should raise an exception if the input string does not represent a fraction.\n\
    The function should raise an exception if the input string does not represent\
    \ a fraction.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function\
    \ should raise an exception if the input string does not represent a fraction.\n\
    The function should raise an exception if the input string does not represent\
    \ a fraction.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function\
    \ should raise an exception if the input string does not represent a fraction.\n\
    The function should raise an exception if the input string does not represent\
    \ a fraction.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function\
    \ should raise an exception if the input string does not represent a fraction.\n\
    The function should raise an exception if the input string does not represent\
    \ a fraction.\nThe function should raise an exception if the input string does\
    \ not represent a fraction.\nThe function should raise an exception if the input\
    \ string does not represent a fraction.\nThe function should raise an exception\
    \ if the input string does not represent a fraction.\nThe function should raise\
    \ an exception if the input string does not represent a fraction.\nThe function ",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take a fraction as input and return the fraction simplified to a whole number.\n\
    \n\n</text>\n<cell>", "    if (x === n || x === \"\" || n === \"\"){\n       \
    \ return true;\n    }\n    var parts = x.split(\"/\");\n    var numer = parts[0];\n\
    \    var denom = parts[1];\n    if (numer === \"\" || numer === \"0\" || numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"\" || denom\
    \ === \"0\" || denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\"){\n        denom = denom;\n    }\n    if (numer\
    \ === \"-0\"){\n        numer = numer;\n    }\n    if (denom === \"-0\"){\n  \
    \      denom = denom;\n    }\n    if (numer === \"-0\"){\n        numer = numer;\n\
    \    }\n    if (denom === \"-0\")", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 8\nWrite a function that will take two fractions as input and\
    \ return the greatest common denominator of them. Both fractions are represented\
    \ as strings, with each fraction separated by a single space. For example, the\
    \ following two fractions are equivalent:\n\n\"1/2 3/4\"\n\"1 3 4\"\nThe function\
    \ should return \"4\".\n\n\n</text>\n<cell>", "    // Write your code here\n}\n\
    </cell>\n<text>\nTask 3\nImplement a function that will simplify a fraction into\
    \ its lowest terms. For example,\nsimplify(\"1/5\", \"5/1\") returns \"1/1\".\
    \ Both x and n are string representation of a fraction.\n\nYou can assume that\
    \ x, and n are valid fractions, and do not have zero as denominator.\n\n\n</text>\n\
    <cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem 8\nWrite a\
    \ function that will convert a fraction to a decimal number. Assume that both\
    \ fraction and decimal number have the following format,\n<numerator>/<denominator>.\
    \ For example, 1/3 can be represented as 3/10. Assume that both fraction and decimal\
    \ number do not have zero as denominator. For example, 1/3 can be represented\
    \ as 3/10. Assume that both fraction and decimal number do not have zero as numerator.\
    \ For example, 1/3 can be represented as 3/10. Assume that both fraction and decimal\
    \ number do not have zero as numerator. For example, 1/3 can be represented as\
    \ 3/10.\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that will convert a fraction to a decimal number. Assume\
    \ that both fractions are valid and do not have zero as denominator. Assume that\
    \ both fractions are represented as strings with numerator and denominator separated\
    \ by forward slash (/).\n\n\n</text>\n<cell>", "  // Your code goes here\n}\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will convert a fraction to\
    \ its decimal representation. For example, convert(\"1/2\") should return \"0.5\"\
    .\n\nThe function should return None if the input fraction is invalid.\n\n\n</text>\n\
    <cell>", "    \n}\n", "    // Write your code here\n}\n", "    var nums = x.split(\"\
    /\");\n    var dens = n.split(\"/\");\n    var numsSum = 0, densSum = 0;\n   \
    \ var numsLength, densLength;\n    var i, j, k;\n    for(i = 0; i < nums.length;\
    \ i++){\n        numsSum += parseInt(nums[i]);\n    }\n    for(i = 0; i < dens.length;\
    \ i++){\n        densSum += parseInt(dens[i]);\n    }\n    numsLength = nums.length;\n\
    \    densLength = dens.length;\n    for(i = 0; i < numsLength; i++){\n       \
    \ for(j = 0; j < densLength; j++){\n            k = parseInt(nums[i]) / parseInt(dens[j]);\n\
    \            if(k == 0){\n                return false;\n            }\n     \
    \       if(k == 1){\n                return true;\n            }\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for most cases, but fails for some cases. For example,\
    \ it fails for \"1/3\" and \"1/5\" as they both return true. Also, it fails for\
    \ \"1/3\" and \"1/4\" as they both return false. Can you please help me to fix\
    \ these issues?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ should work for all cases. I tested it and it works for all the cases I tested.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for most cases,\
    \ but fails for some cases. For example, it fails for \"1/3\" and \"1/5\" as they\
    \ both return true. Also, it fails for \"1/3\" and \"1/4\" as they both return\
    \ false. Can you please help me to fix these issues?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that should work for all cases. I tested it\
    \ and it works for all the cases I tested.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\nThe function below\
    \ takes in two fractions as strings and returns the greatest common denominator\
    \ of them. Both fractions are valid fractions and do not have zero as denominator.\
    \ Assume that both fractions are valid fractions.\n\n\n</text>\n<cell>", "   \
    \ // Write your code here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 4\nWrite a function that will convert a fraction to a decimal string.\
    \ For example, given \"1/2\", the function should return \"0.(6)\".\n\nThe function\
    \ should return False if the given fraction is not a fraction at all, or if the\
    \ denominator is zero.\n\nThe function should return True otherwise. Both x and\
    \ n, are string representation of a fraction, and have the following format,\n\
    <numerator>/<denominator> where both numerator and denominator are positive whole\
    \ numbers.\n\nYou can assume that x, and n are valid fractions, and do not have\
    \ zero as denominator.\n\n\n</text>\n<cell>", "    var numerator = x.split(\"\
    /\")[0];\n    var denominator = x.split(\"/\")[1];\n    var numeratorInt = parseInt(numerator);\n\
    \    var denominatorInt = parseInt(denominator);\n    if(numeratorInt === 0 &&\
    \ denominatorInt === 0){\n        return true;\n    }\n    if(numeratorInt > 0\
    \ && denominatorInt > 0){\n        if(numeratorInt === denominatorInt){\n    \
    \        return true;\n        }\n        if(numeratorInt % denominatorInt ===\
    \ 0){\n            return true;\n        }\n    }\n    return false;\n}\n", " \
    \   // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take two fractions as arguments and return True if they represent the same fraction,\
    \ False otherwise.\nThe function should return False if the first fraction is\
    \ zero, True otherwise.\nThe function should return False if the second fraction\
    \ is zero, True otherwise.\nThe function should return False if either of the\
    \ fractions is zero, True otherwise.\nThe function should return False if both\
    \ fractions are zero, True otherwise.\nThe function should return True only if\
    \ both fractions are equal, False otherwise.\nThe function should return True\
    \ only if both fractions are equal, False otherwise.\nThe function should return\
    \ True only if both fractions are equal, False otherwise.\nThe function should\
    \ return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False otherwise.\nThe function\
    \ should return True only if both fractions are equal, False ", "    // Your code\
    \ here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nThe\
    \ function below will take two fractions as input and return the greatest common\
    \ denominator of the two fractions. \nThe function should return False if the\
    \ two fractions are not valid fractions. \nThe function should return None if\
    \ the two fractions are equal, otherwise it should return True.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 8\nWrite a function that takes a string and returns the number\
    \ of words in the string.\n\n\n</text>\n<cell>", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 4\nWrite a function that will take two fractions as\
    \ input and return the greatest common denominator of the two fractions. You can\
    \ assume that both fractions have the same denominator.\n\n>>> gcd_fraction(\"\
    1/5\", \"2/7\")\n3\n>>> gcd_fraction(\"1/5\", \"2/3\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"1/3\")\n1\n>>> gcd_fraction(\"1/5\", \"1/2\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"1/1\")\n1\n>>> gcd_fraction(\"1/5\", \"1/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/1\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"\
    1/5\", \"0/0\")\n1\n>>> gcd_fraction(\"1/5\", \"0/0\")", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes in two fractions\
    \ as strings and returns the greatest common divisor of them. Both fractions are\
    \ valid fractions. You can assume that both fractions do not have zero as denominator.\
    \ You may assume that both fractions are valid fractions.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that will\
    \ evaluate a mathematical expression given as a string and return the result as\
    \ a float.\n\nThe function should support the following syntax:\n\nExpression\
    \ ::= <expression> [ <operator> <expression> ]\n<expression> ::= <variable>\n\
    <variable> ::= <variable> [ <operator> <variable> ]\n<operator> ::= + | - | /\
    \ | * | ^ | / | % | ~\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* Multiplication\n^ Exponentiation\n/ Division\n\
    % Modulo\n~ Bitwise NOT\nThe function should support the following operations:\n\
    \n+ Addition\n- Subtraction\n* ", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take two fractions as input and return the\
    \ greatest common denominator of the two fractions. You can assume that both fractions\
    \ have the same number of numerator and denominator. Both fractions are represented\
    \ as strings, with <numerator>/<denominator> format. Both fractions must have\
    \ at least one numerator and one denominator.\n\n>>> greatest_common_denominator(\"\
    1/3\", \"2/5\")\n3\n>>> greatest_common_denominator(\"1/3\", \"2/1\")\n3\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/1\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> greatest_common_denominator(\"1/3\", \"0/0\")\n1\n>>>\
    \ greatest_common_denominator(\"1/3\", \"1/0\")\n1\n>>> greatest_common_denominator(\"\
    1/3\", \"0/1\")\n1\n>>> ", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will evaluate a mathematical expression given\
    \ as string. For example, given \"(5 + 3) * 6\", the function should return \"\
    42\".\n\nThe function should return None if the expression is invalid.\n\nYou\
    \ can assume that all operators are valid and have the following format:\n\n<operator>\
    \ <operand1> <operand2> ... <operandN>\n\nwhere <operator> is one of the following:\n\
    \n+ - * / % // % * / % + - + < > <= >= == != <= >= <> != != <> == != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != != != != !=\
    \ != != != != != != != != != != != != != != != != != != != != != != ", "    \n\
    }\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nThe function\
    \ below takes a string as input and returns the number of characters in the string.\
    \ \nThe string may contain any character. \nThe function should return 0 if the\
    \ string contains only spaces.\n\n>>> count_chars(\"   \")\n0\n>>> count_chars(\"\
    abc def\")\n3\n>>> count_chars(\"abc defg\")\n0\n>>> count_chars(\"abc defgh\"\
    )\n1\n>>> count_chars(\"abc defghijk\")\n6\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\"\
    )\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"\
    \")\n0\n>>> count_chars(\" \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\
    \ \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\")\n0\n>>> count_chars(\"\
    abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\"\
    )\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"\
    abc defghijklmnopqrstuvwxyz\")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\
    \ \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\")\n0\n>>> count_chars(\"\
    abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\"\
    )\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"\
    abc defghijklmnopqrstuvwxyz\")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\
    \ \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\")\n0\n>>> count_chars(\"\
    abc defghijklmnopqrstuvwxyz \")\n0\n>>> count_chars(\"abc defghijklmnopqrstuvwxyz\"\
    )\n0\n>>> ", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that will return the number of digits in a number. For example, the\
    \ number 123 has 3 digits, while the number 1234 has 4 digits. You can assume\
    \ that the number is a valid positive integer.\n\n>>> digits(123)\n3\n>>> digits(1234)\n\
    4\n>>> digits(-1234)\n4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-12345)\n4\n>>> digits(12345)\n4\n>>> digits(-12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(-", "    \n}\n</cell>\n<text>\nProblem 7\nImplement a function that\
    \ will simplify the expression\nx + y. The function returns True if x + y evaluates\
    \ to a whole number and False\notherwise. Both x and y, are string representation\
    \ of a fraction, and have the following format,\n<numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\nYou can assume that\
    \ x and y are valid fractions, and do not have zero as denominator.\n>>> simplify(\"\
    1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"\
    7/10\", \"10/2\")\nfalse\n>>> simplify(\"1/2\", \"1/2\")\ntrue\n>>> simplify(\"\
    1/2\", \"1/3\")\nfalse\n>>> simplify(\"1/2\", \"1/4\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/5\")\nfalse\n>>> simplify(\"1/2\", \"1/6\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/7\")\nfalse\n>>> simplify(\"1/2\", \"1/8\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/9\")\nfalse\n>>> simplify(\"1/2\", \"1/10\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/11\")\nfalse\n>>> simplify(\"1/2\", \"1/12\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/13\")\nfalse\n>>> simplify(\"1/2\", \"1/14\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/15\")\nfalse\n>>> simplify(\"1/2\", \"1/16\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/17\")\nfalse\n>>> simplify(\"1/2\", \"1/18\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/19\")\nfalse\n>>> simplify(\"1/2\", \"1/20\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/21\")\nfalse\n>>> simplify(\"1/2\", \"1/22\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/23\")\nfalse\n>>> simplify(\"1/2\", \"1/24\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/25\")\nfalse\n>>> simplify(\"1/2\", \"1/26\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/27\")\nfalse\n>>> simplify(\"1/2\", \"1/28\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/29\")\nfalse\n>>> simplify(\"1/2\", \"1/30\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/31\")\nfalse\n>>> simplify(\"1/2\", \"1/32\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/33\")\nfalse\n>>> simplify(\"1/2\", \"1/34\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/35\")\nfalse\n>>> simplify(\"1/2\", \"1/36\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/37\")\nfalse\n>>> simplify(\"", "    // Write your code here\n}\n",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ will take two fractions as arguments and return True if they have the same numerator\
    \ and denominator, and False otherwise.\n\n>>> fraction1 = Fraction(1, 5)\n>>>\
    \ fraction2 = Fraction(1, 5)\n>>> fraction3 = Fraction(2, 5)\n>>> fraction4 =\
    \ Fraction(2, 5)\n>>> fraction5 = Fraction(3, 5)\n>>> fraction6 = Fraction(3,\
    \ 5)\n>>> fraction7 = Fraction(4, 5)\n>>> fraction8 = Fraction(4, 5)\n>>> fraction9\
    \ = Fraction(5, 5)\n>>> fraction10 = Fraction(5, 5)\n>>> fraction11 = Fraction(6,\
    \ 5)\n>>> fraction12 = Fraction(6, 5)\n>>> fraction13 = Fraction(7, 5)\n>>> fraction14\
    \ = Fraction(7, 5)\n>>> fraction15 = Fraction(8, 5)\n>>> fraction16 = Fraction(8,\
    \ 5)\n>>> fraction17 = Fraction(9, 5)\n>>> fraction18 = Fraction(9, 5)\n>>> fraction19\
    \ = Fraction(10, 5)\n>>> fraction20 = Fraction(10, 5)\n>>> fraction21 = Fraction(11,\
    \ 5)\n>>> fraction22 = Fraction(11, 5)\n>>> fraction23 = Fraction(12, 5)\n>>>\
    \ fraction24 = Fraction(12, 5)\n>>> fraction25 = Fraction(13, 5)\n>>> fraction26\
    \ = Fraction(13, 5)\n>>> fraction27 = Fraction(14, 5)\n>>> fraction28 = Fraction(14,\
    \ 5)\n>>> fraction29 = Fraction(15, 5)\n>>> fraction30 = Fraction(15, 5)\n>>>\
    \ fraction31 = Fraction(16, 5)\n>>> fraction32 = Fraction(16, 5)\n>>> fraction33\
    \ = Fraction(17, 5)\n>>> fraction34 = Fraction(17, 5)\n>>> fraction35 = Fraction(18,\
    \ 5)\n>>> fraction36 = Fraction(18, 5)\n>>> fraction37 = Fraction(19, 5)\n>>>\
    \ fraction38 = Fraction(19, 5)\n>>> fraction39 = Fraction(20, 5)\n>>> fraction40\
    \ = Fraction(20, 5)\n>>> fraction41 = Fraction(21, 5)\n>>> fraction42 = Fraction(21,\
    \ 5)\n>>> fraction43 = Fraction(22, 5)\n>>> fraction44 = Fraction(22, 5)\n>>>\
    \ fraction45 = Fraction(23, 5)\n>>> fraction46 = Fraction(23, 5)\n>>> fraction47\
    \ = Fraction(24, 5)\n>>> fraction48 = Fraction(24, 5)\n>>> fraction49 = Fraction(25,\
    \ 5)\n>>> fraction50 = Fraction(25, 5)\n>>> fraction51 = Fraction(26, 5)\n>>>\
    \ fraction52 = Fraction(26, 5)\n>>> fraction53 = Fraction(27, 5)\n>>> fraction54\
    \ = Fraction(27, 5)\n>>> fraction55 = Fraction(28, 5)\n>>> fraction5", "    //\
    \ Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. For example,\
    \ the string \"abc\" has 3 characters. Write a function that takes a string as\
    \ input and returns the number of characters in the string. For example, the string\
    \ \"abc\" has 3 characters. You can assume that all strings have at least one\
    \ character. You may assume that all strings are non-empty.\n\n</text>\n<cell>",
  "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLength\
    \ = nums.length;\n    var densLength = dens.length;\n    var isWhole = true;\n\
    \    \n    // Check if both numerator and denominator are whole numbers\n    for(var\
    \ i = 0; i < numsLength; i++){\n        if(nums[i] === \"0\"){\n            isWhole\
    \ = false;\n            break;\n        }\n    }\n    \n    for(var i = 0; i <\
    \ densLength; i++){\n        if(dens[i] === \"0\"){\n            isWhole = false;\n\
    \            break;\n        }\n    }\n    \n    if(isWhole){\n        return\
    \ true;\n    }\n    \n    // Check if numerator is greater than denominator\n\
    \    if(numsLength < densLength){\n        return false;\n    }\n    \n    //\
    \ Check if numerator is less than denominator\n    if(numsLength > densLength){\n\
    \        return true;\n    }\n    \n    // Check if numerator is equal to denominator\n\
    \    if(numsLength === densLength){\n        if(numsLength === 1){\n         \
    \   return true;\n        }\n        \n        if(numsLength === 2){\n       \
    \     return false;\n        }\n        \n        if(numsLength === 3){\n    \
    \        return true;\n        }\n        \n        if(numsLength === 4){\n  \
    \          return false;\n        }\n        \n        if(numsLength === 5){\n\
    \            return true;\n        }\n        \n        if(numsLength === 6){\n\
    \            return false;\n        }\n        \n        if(numsLength === 7){\n\
    \            return true;\n        }\n        \n        if(numsLength === 8){\n\
    \            return false;\n        }\n        \n        if(numsLength === 9){\n\
    \            return true;\n        }\n        \n        if(numsLength === 10){\n\
    \            return false;\n        }\n        \n        if(numsLength === 11){\n\
    \            return true;\n        }\n        \n        if(numsLength === 12){\n\
    \            return false;\n        }\n        \n        if(numsLength === 13){\n\
    \            return true;\n        }\n        \n        if(numsLength === 14){\n\
    \            return false;\n        }\n        \n        if(numsLength === 15){\n\
    \            return true;\n        }\n        \n        if(numsLength === 16){\n\
    \            return false;\n        }\n        \n        if(numsLength === 17){\n\
    \            return true;\n        }\n        \n        if(numsLength === 18){\n\
    \            return false;\n        }\n        \n        if(numsLength === 19){\n\
    \            return true;\n        }\n        \n        if(numsLength === 20){\n\
    \            return false;\n        }\n        \n        if(numsLength === 21){\n\
    \            return true;\n        }\n        \n        if(numsLength === 22){\n\
    \            return ", "    // Your code here\n}\n</cell>\n<cell>\n# Run this\
    \ cell to test your solution\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ return the number of digits in an integer.\n\n\n</text>\n<cell>", "    // Write\
    \ your code here\n}\n", "  if(x === n || x === \"0\" || x === \"-0\"){\n    return\
    \ true;\n  }\n  if(x.indexOf(\"/\") !== -1){\n    return simplify(x.split(\"/\"\
    ).map(Number).reduce((a, b) => a * b, 1), n);\n  }\n  if(x.indexOf(\"*\") !==\
    \ -1){\n    return simplify(x.split(\"*\").map(Number).reduce((a, b) => a * b,\
    \ 1), n);\n  }\n  if(x.indexOf(\"+\") !== -1){\n    return simplify(x.split(\"\
    +\").map(Number).reduce((a, b) => a + b, 1), n);\n  }\n  if(x.indexOf(\"-\") !==\
    \ -1){\n    return simplify(x.split(\"-\").map(Number).reduce((a, b) => a - b,\
    \ 1), n);\n  }\n  if(x.indexOf(\"*\") !== -1 && x.indexOf(\"+\") !== -1){\n  \
    \  return simplify(x.split(\"*\").map(Number).reduce((a, b) => a * b, 1) + simplify(x.split(\"\
    +\").map(Number).reduce((a, b) => a + b, 1), n);\n  }\n  return false;\n}\n",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take two fractions as arguments and return True if they represent the same\
    \ fraction and False otherwise.\n\nThe function should return False if the two\
    \ fractions do not have the same numerator or denominator.\n\n>>> fraction1 =\
    \ Fraction(1, 3)\n>>> fraction2 = Fraction(2, 4)\n>>> fraction3 = Fraction(1,\
    \ 4)\n>>> fraction1 == fraction2\nTrue\n>>> fraction1 == fraction3\nFalse\n>>>\
    \ fraction1 == Fraction(1, 4)\nFalse\n>>> fraction1 == Fraction(2, 4)\nFalse\n\
    >>> fraction1 == Fraction(3, 4)\nFalse\n>>> fraction1 == Fraction(4, 4)\nFalse\n\
    >>> fraction1 == Fraction(5, 4)\nFalse\n>>> fraction1 == Fraction(6, 4)\nFalse\n\
    >>> fraction1 == Fraction(7, 4)\nFalse\n>>> fraction1 == Fraction(8, 4)\nFalse\n\
    >>> fraction1 == Fraction(9, 4)\nFalse\n>>> fraction1 == Fraction(10, 4)\nFalse\n\
    >>> fraction1 == Fraction(11, 4)\nFalse\n>>> fraction1 == Fraction(12, 4)\nFalse\n\
    >>> fraction1 == Fraction(13, 4)\nFalse\n>>> fraction1 == Fraction(14, 4)\nFalse\n\
    >>> fraction1 == Fraction(15, 4)\nFalse\n>>> fraction1 == Fraction(16, 4)\nFalse\n\
    >>> fraction1 == Fraction(17, 4)\nFalse\n>>> fraction1 == Fraction(18, 4)\nFalse\n\
    >>> fraction1 == Fraction(19, 4)\nFalse\n>>> fraction1 == Fraction(20, 4)\nFalse\n\
    >>> fraction1 == Fraction(21, 4)\nFalse\n>>> fraction1 == Fraction(22, 4)\nFalse\n\
    >>> fraction1 == Fraction(23, 4)\nFalse\n>>> fraction1 == Fraction(24, 4)\nFalse\n\
    >>> fraction1 == Fraction(25, 4)\nFalse\n>>> fraction1 == Fraction(26, 4)\nFalse\n\
    >>> fraction1 == Fraction(27, 4)\nFalse\n>>> fraction1 == Fraction(28, 4)\nFalse\n\
    >>> fraction1 == Fraction(29, 4)\nFalse\n>>> fraction1 == Fraction(30, 4)\nFalse\n\
    >>> fraction1 == Fraction(31, 4)\nFalse\n>>> fraction1 == Fraction(32, 4)\nFalse\n\
    >>> fraction1 == Fraction(33, 4)\nFalse\n>>> fraction1 == Fraction(34, 4)\nFalse\n\
    >>> fraction1 == Fraction(35, 4)\nFalse\n>>> fraction1 == Fraction(36, 4)\nFalse\n\
    >>> fraction1 == Fraction(37, 4)\nFalse\n>>> fraction1 == Fraction(38, 4)\nFalse\n\
    >>> fraction1 == Fraction(39, 4)\nFalse\n>>> fraction1 == Fraction(40, 4)\nFalse\n\
    >>> fraction1 == Fraction(41, 4)\nFalse\n>>> fraction1 == Fraction(42, 4)\nFalse\n\
    >>> fraction1 == Fraction(43, 4)\n", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will evaluate a mathematical expression\
    \ given as string. For example, given \"(x + y)*z\", the function should return\
    \ \"(x + y)*z\". The function should return None if the expression is invalid.\n\
    \nThe function should support the following:\n\nParenthesis () are used to group\
    \ terms.\nMultiplication (*) can be used for repeated multiplication.\nAddition\
    \ (+) is used to add terms.\nSubtraction (-) is used to subtract terms.\nDivision\
    \ (/) is used to divide terms.\nExponential (**) is used to raise a number to\
    \ a power.\nModulo (%) is used to find the remainder after division.\nThe function\
    \ should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should support the\
    \ following:\n\nThe function should support the following:\n\nThe function should\
    \ support the following:\n\nThe function should support the following:\n\nThe\
    \ function should support the following:\n\nThe function should support the following:\n\
    \nThe function should support the following:\n\nThe function should ", "  // Your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take two\
    \ fractions as input and return the greatest common denominator of them. Both\
    \ fractions are valid fractions, and do not have zero as denominator. Assume that\
    \ both fractions are valid fractions.\n\n\n</text>\n<cell>", "    // Write your\
    \ code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will take two\
    \ fractions as arguments and return True if they represent the same fraction,\
    \ False otherwise. Both fractions are represented as strings, with <numerator>/<denominator>\
    \ format. Both fractions must have the same numerator and denominator.\n\n\n</text>\n\
    <cell>", "  // Write your code here\n}\n", "    var parts = x.split(\"/\");\n\
    \    var numParts = parts[0].split(\"/\").length;\n    var denParts = parts[1].split(\"\
    /\").length;\n    var num = 0;\n    var den = 1;\n    for(var i = 0; i < numParts;\
    \ i++){\n        num += parseInt(parts[i].split(\"-\")[0]);\n    }\n    for(var\
    \ i = 0; i < denParts; i++){\n        den += parseInt(parts[i].split(\"-\")[1]);\n\
    \    }\n    if(num == den){\n        return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=javascript,math |>\n<| c |>\nThis doesn't work for `simplify(\"\
    1/5\", \"5/1\")`\n<|/ c |>\n<| c |>\nIt does work. `simplify(\"1/5\", \"5/1\"\
    )` returns `true` because `numParts = 2` and `denParts = 2`\n<|/ c |>\n<| c |>\n\
    Yes, it does, but `numParts = 2` and `denParts = 2` doesn't mean `num == den`.\
    \ `numParts = 2` and `denParts = 2` means `numParts == denParts`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated my answer to reflect this.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for `simplify(\"1/5\", \"5/1\")`\n<|/ c |>\n<| a tags=javascript,math\
    \ |>\n<code>", "    // Write your code here\n}\n", "    // Write your code here\n\
    }\n", "    \n    // Your code here\n    \n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take two fractions as arguments\
    \ and return True if they have the same numerator and denominator, False otherwise.\
    \ Both fractions are represented as strings, with each fraction represented as\
    \ a string of the form <numerator>/<denominator>. You may assume that both fractions\
    \ do not have zero as denominator. Your function should return False if either\
    \ of the arguments is None, or if both arguments are None. You may assume that\
    \ the numerator and denominator are both positive whole numbers, and do not have\
    \ zero as denominator. Your function should return False if either of the arguments\
    \ is an empty string, or if both arguments are an empty string.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will evaluate a mathematical expression given in string form and return\
    \ its value.\n\nThe function should support the following:\n\nAddition (+), subtraction\
    \ (-), multiplication (*), division (/), and factorial (!) operators.\nThe function\
    \ should support the following:\n\nThe order of precedence (order of operations)\
    \ of the operators should be preserved.\nThe function should support the following:\n\
    \nThe order of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the following:\n\nThe order of precedence (order of operations) of the operators\
    \ should be preserved.\nThe function should support the following:\n\nThe order\
    \ of precedence (order of operations) of the operators should be preserved.\n\
    The function should support the following:\n\nThe order of precedence (order of\
    \ operations) of the operators should be preserved.\nThe function should support\
    \ the ", "    // Your code here\n}\n", "  // Write your code here\n}\n</cell>\n\
    <text>\nProblem 7\nWrite a function that will take two fractions as input and\
    \ return the greatest common denominator of them. Both fractions are valid fractions\
    \ and do not have zero as denominator. Assume that both fractions are valid and\
    \ do not have zero as denominator. You may assume that both fractions are valid\
    \ and do not have zero as denominator.\n\n\n</text>\n<cell>", "    var numerator=x.split(\"\
    /\")[0];\n    var denominator=x.split(\"/\")[1];\n    if(numerator==\"\" || denominator==\"\
    \"){\n        return false;\n    }\n    if(numerator==0 && denominator==0){\n\
    \        return true;\n    }\n    if(numerator==\"\" && denominator!=0){\n   \
    \     return false;\n    }\n    if(numerator!=\"\" && denominator==\"\"){\n  \
    \      return false;\n    }\n    if(numerator!=\"\" && denominator!=\"\"){\n \
    \       if(numerator*denominator==0){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    \n}\n</cell>\n<text>\nProblem 3\nThe function\
    \ below takes in two fractions as strings and returns True if they have the same\
    \ numerator and denominator and False otherwise. Both fractions are valid fractions,\
    \ do not have zero as denominator, and have the following format, <numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers.\n\n\n</text>\n\
    <cell>", "  // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will return the number of digits in a given fraction.\n\n>>> count_digits(\"\
    1/5\")\n2\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"1/6\")\n3\n>>> count_digits(\"\
    1/", "    // Your code here\n}\n", "    \n}\n", "    if (x == n) return true;\n\
    \    if (n.includes(\"/\")) {\n        let [numer, denom] = n.split(\"/\");\n\
    \        if (numer == \"\" || denom == \"\") return false;\n        if (numer\
    \ == denom) return true;\n        if (numer > denom) return simplify(numer, denom);\n\
    \        return false;\n    }\n    if (n.includes(\"*\")) {\n        let [numer,\
    \ denom] = n.split(\"*\");\n        if (numer == \"\" || denom == \"\") return\
    \ false;\n        if (numer == denom) return true;\n        if (numer > denom)\
    \ return simplify(numer, denom);\n        return false;\n    }\n    if (n.includes(\"\
    +\")) {\n        let [numer, denom] = n.split(\"+\");\n        if (numer == \"\
    \" || denom == \"\") return false;\n        if (numer == denom) return true;\n\
    \        if (numer > denom) return simplify(numer, denom);\n        return false;\n\
    \    }\n    if (n.includes(\"-\")) {\n        let [numer, denom] = n.split(\"\
    -\");\n        if (numer == \"\" || denom == \"\") return false;\n        if (numer\
    \ == denom) return true;\n        if (numer > denom) return simplify(numer, denom);\n\
    \        return false;\n    }\n    if (n.includes(\"*\")) {\n        let [numer,\
    \ denom] = n.split(\"*\");\n        if (numer == \"\" || denom == \"\") return\
    \ false;\n        if (numer == denom) return true;\n        if (numer > denom)\
    \ return simplify(numer, denom);\n        return false;\n    }\n    if (n.includes(\"\
    /\")) {\n        let [numer, denom] = n.split(\"/\");\n        if (numer == \"\
    \" || denom == \"\") return false;\n        if (numer == denom) return true;\n\
    \        if (numer > denom) return simplify(numer, denom);\n        return false;\n\
    \    }\n    if (n.includes(\"+\")) {\n        let [numer, denom] = n.split(\"\
    +\");\n        if (numer == \"\" || denom == \"\") return false;\n        if (numer\
    \ == denom) return true;\n        if (numer > denom) return simplify(numer, denom);\n\
    \        return false;\n    }\n    if (n.includes(\"-\")) {\n        let [numer,\
    \ denom] = n.split(\"-\");\n        if (numer == \"\" || denom == \"\") return\
    \ false;\n        if (numer == denom) return true;\n        if (numer > denom)\
    \ return simplify(numer, denom);\n        return false;\n    }\n    if (n.includes(\"\
    *\")) {\n        let [numer, denom] = n.split(\"*\");\n        if (numer == \"\
    \" || denom == \"\") return false;\n        if (numer == denom) return true;\n\
    \        if (numer > denom) return simplify(numer, denom);\n        return false;\n\
    \    }\n    if (n.includes(\"/\")) {\n        let [numer, denom] = n.split(\"\
    /\");\n        if (num", "  // Your code here\n}\n", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nThe function below takes in two fractions as strings\
    \ and returns the greatest common denominator of them. Both fractions are valid\
    \ fractions and do not have zero as denominator. Assume that both fractions are\
    \ valid fractions.\n\n>>> greatest_common_denominator(\"1/5\", \"5/1\")\n1\n>>>\
    \ greatest_common_denominator(\"1/6\", \"2/1\")\n2\n>>> greatest_common_denominator(\"\
    7/10\", \"10/2\")\n2\n>>> greatest_common_denominator(\"7/10\", \"1/2\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/3\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/4\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/5\")\n1\n>>>\
    \ greatest_common_denominator(\"7/10\", \"1/6\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/7\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/8\")\n1\n>>>\
    \ greatest_common_denominator(\"7/10\", \"1/9\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/10\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/11\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/12\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/13\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/14\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/15\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/16\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/17\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/18\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/19\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/20\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/21\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/22\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/23\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/24\")\n1\n>>> greatest_common_denominator(\"\
    7/10\", \"1/25\")\n1\n>>> greatest_common_denominator(\"7/10\", \"1/26\")\n1\n\
    >>> greatest_common_denominator(\"7/10\", \"1/27\")\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes in two fractions\
    \ as strings and returns the greatest common denominator of the two fractions.\
    \ You can assume that both fractions have valid denominators.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\n\
    simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will evaluate a mathematical expression given as a string. For example, the\
    \ string \"(5 + 3) * (6 - 4)\" should return \"(15 - 2)\" as output. The function\
    \ should return None if the string does not contain a valid mathematical expression.\
    \ You may assume that the input string contains only digits and operators.\n\n\
    >>> evaluate(\"(5 + 3) * (6 - 4)\")\n(15 - 2)\n>>> evaluate(\"(5 + 3) * 6\")\n\
    (15)\n>>> evaluate(\"(5 + 3) * 6 - 4\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4\
    \ *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3)\
    \ * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"(5 + 3) * 6 - 4 *\")\n(15)\n>>> evaluate(\"\
    (5 + 3) * 6 - 4", "  // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function\
    \ below will return the number of digits in a number. For example, for the number\
    \ 123, the function will return 3.\n\n\n</text>\n<cell>", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take a fraction\
    \ as input and return the fraction with the denominator equal to the number of\
    \ digits in the fraction.\n\n>>> fraction_to_decimal(\"1/5\")\n1/5\n>>> fraction_to_decimal(\"\
    1/6\")\n1/6\n>>> fraction_to_decimal(\"7/10\")\n7/10\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n>>> fraction_to_decimal(\"\
    1/3\")\n1/3\n>>> fraction_to_decimal(\"1/3\")\n1/3\n", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that will accept a fraction as\
    \ an argument and return the fraction simplified to a whole number.\n\n\n</text>\n\
    <cell>", "    \n}\n</cell>\n<text>\nProblem 3\nThe function below will take a\
    \ string as input and return the string with only the first and last character\
    \ capitalized. \nThe function should only capitalize the first and last character\
    \ of the string, if the string has more than one character. \nIf the string has\
    \ only one character, it should return the string unchanged.\n\n\n</text>\n<cell>",
  "    var numerator = x.split(\"/\");\n    var denominator = n.split(\"/\");\n  \
    \  var num = 0;\n    var den = 0;\n    var numArray = [];\n    var denArray =\
    \ [];\n    for(var i=0; i<numerator.length; i++){\n        numArray.push(parseInt(numerator[i]));\n\
    \    }\n    for(var i=0; i<denominator.length; i++){\n        denArray.push(parseInt(denominator[i]));\n\
    \    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(den == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(den == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];\n        if(num == 0){\n            return false;\n\
    \        }\n    }\n    for(var i=0; i<denArray.length; i++){\n        den = denArray[i];\n\
    \        num = numArray[i];", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 7\nWrite a function that will calculate the factorial of a number. The\
    \ function should take one parameter, x, and return the factorial of x. Assume\
    \ that x is a positive whole number.\n\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.204484017332394E+19\n\
    >>> factorial(100)\n1.8446744073709552e+19\n>>> factorial(1000)\n6.204484017332394E+19\n\
    >>> factorial(10000)\n1.8446744073709552e+19\n>>> factorial(100000)\n6.204484017332394E+19\n\
    >>> factorial(1000000)\n1.8446744073709552e+19\n>>> factorial(10000000)\n6.204484017332394E+19\n\
    >>> factorial(100000000)\n1.8446744073709552e+19\n>>> factorial(1000000000)\n\
    6.204484017332394E+19\n>>> factorial(10000000000)\n1.8446744073709552e+19\n>>>\
    \ factorial(100000000000)\n6.204484017332394E+19\n>>> factorial(1000000000000)\n\
    1.8446744073709552e+19\n>>> factorial(10000000000000)\n6.204484017332394E+19\n\
    >>> factorial(100000000000000)\n1.8446744073709552e+19\n>>> factorial(1000000000000000)\n\
    6.204484017332394E+19\n>>> factorial(10000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(100000000000000000)\n6.204484017332394E+19\n>>> factorial(1000000000000000000)\n\
    1.8446744073709552e+19\n>>> factorial(10000000000000000000)\n6.204484017332394E+19\n\
    >>> factorial(100000000000000000000)\n1.8446744073709552e+19\n>>> factorial(1000000000000000000000)\n\
    6.204484017332394E+19\n>>> factorial(10000000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(100000000000000000000000)\n6.204484017332394E+19\n>>> factori",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below will return\
    \ the number of digits in an integer.\n\n\n</text>\n<cell>", "    // Write your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate\
    \ an arithmetic expression given as a string and return the result as a float.\n\
    The function should raise a ValueError if the expression is not a valid arithmetic\
    \ expression.\n>>> evaluate(\"1/2\")\n0.5\n>>> evaluate(\"1+2\")\n3\n>>> evaluate(\"\
    1+2+3\")\n6\n>>> evaluate(\"1+2*3\")\n6\n>>> evaluate(\"1+2/3\")\n1.5\n>>> evaluate(\"\
    1+2/3+4\")\n7\n>>> evaluate(\"1+2/3+4/5\")\n7\n>>> evaluate(\"1+2/3+4/5+6\")\n\
    10\n>>> evaluate(\"1+2/3+4/5+6+7\")\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8\")\n10\n\
    >>> evaluate(\"1+2/3+4/5+6+7+8+9\")\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10\"\
    )\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11\")\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12\"\
    )\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13\")\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13+14\"\
    )\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13+14+15\")\n10\n>>> evaluate(\"\
    1+2/3+4/5+6+7+8+9+10+11+12+13+14+15+16\")\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13+14+15+16+17\"\
    )\n10\n>>> evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13+14+15+16+17+18\")\n10\n>>>\
    \ evaluate(\"1+2/3+4/5+6+7+8+9+10+11+12+13+14+15+16+17+18+19\")\n10\n>>> evaluate(\"\
    1+2/3+4/5+6+7+8+9+10+11+", "    var parts = x.split(\"/\");\n    var numerator\
    \ = parts[0];\n    var denominator = parts[1];\n    var result = false;\n    \n\
    \    if(numerator == \"\" || numerator == \"0\" || numerator == \"-0\"){\n   \
    \     numerator = 0;\n    }\n    if(denominator == \"\" || denominator == \"0\"\
    \ || denominator == \"-0\"){\n        denominator = 1;\n    }\n    \n    if(numerator\
    \ != \"\" && denominator != \"\"){\n        if(numerator == denominator){\n  \
    \          result = true;\n        }\n        else if(parseInt(numerator) == parseInt(denominator)){\n\
    \            result = true;\n        }\n        else if(parseInt(numerator) >\
    \ parseInt(denominator)){\n            result = true;\n        }\n        else\
    \ if(parseInt(denominator) > parseInt(numerator)){\n            result = true;\n\
    \        }\n    }\n    \n    if(!result){\n        return false;\n    }\n    \n\
    \    var numeratorParts = numerator.split(\"/\");\n    var numeratorPartsLength\
    \ = numeratorParts.length;\n    var denominatorParts = denominator.split(\"/\"\
    );\n    var denominatorPartsLength = denominatorParts.length;\n    \n    if(numeratorPartsLength\
    \ > denominatorPartsLength){\n        return false;\n    }\n    \n    for(var\
    \ i = 0; i < denominatorPartsLength; i++){\n        if(parseInt(numeratorParts[i])\
    \ > parseInt(denominatorParts[i])){\n            return false;\n        }\n  \
    \  }\n    \n    return true;\n}\n", "    // Your code here\n}\n</cell>\n<text>\n\
    Problem 3\nThe function below takes in two fractions as strings and returns the\
    \ fraction with the smallest denominator.\n\n\n</text>\n<cell>", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take\
    \ a string as input and return the string with all occurrences of its first and\
    \ last character swapped. For example, if the input string is \"aabbcc\", the\
    \ output should be \"abccba\".\n\nThe function should only swap the first and\
    \ last character. Do not use any string methods (i.e. replace, split, or indexing).\
    \ You may assume that the input string has at least two characters.\n\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aabbcc\")\n'abccba'\n>>> swap_first_last(\"aabbcc\")\n'abccba'\n>>> swap_first_last(\"\
    aab", "    \n}\n</cell>\n<text>\nExercise 4\nImplement a function that will simplify\
    \ the expression\nx + y. The function returns True if x + y evaluates to a whole\
    \ number and False otherwise. Both x and y, are string representation of a fraction,\
    \ and have the following format, <numerator>/<denominator> where both numerator\
    \ and denominator are positive whole numbers.\nYou can assume that x and y are\
    \ valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "    var parts = x.split(\"/\");\n    var numer = parts[0];\n    var denom = parts[1];\n\
    \    if(numer === \"0\" && denom === \"0\"){\n        return true;\n    }\n  \
    \  if(numer === \"0\" || denom === \"0\"){\n        return false;\n    }\n   \
    \ var numParts = numer.split(\"/\");\n    var numerator = numParts[0];\n    var\
    \ denominator = numParts[1];\n    if(numerator === \"0\" && denominator === \"\
    0\"){\n        return false;\n    }\n    if(numerator === \"0\" || denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"1\"){\n        return false;\n    }\n    if(numerator === \"0\" && denominator\
    \ === \"0\"){\n        return false;\n    }\n    if(numerator === \"1\" && denominator\
    \ === \"1\"){\n        return true;\n    }\n    if(numerator ", "  // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes in a string representing\
    \ a fraction and returns the fraction simplified to a whole number.\n\n>>> simplify(\"\
    1/5\")\n1\n>>> simplify(\"1/6\")\n2\n>>> simplify(\"7/10\")\n7\n>>> simplify(\"\
    7/2\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify(\"\
    7/8\")\n3\n>>> simplify(\"7/8\")\n3\n>>> simplify", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that will return the factorial\
    \ of a number. The function should accept a number as an argument and return the\
    \ factorial of that number. For example, factorial(5) should return 120, and factorial(3)\
    \ should return 6.\n\nThe function should return an integer, not a float.\n\n\
    >>> factorial(5)\n120\n>>> factorial(3)\n6\n>>> factorial(3.5)\n6.25\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> ", "  // Write your code here\n}\n</cell>\n\
    <text>\nProblem 7\nWrite a function that will convert a fraction to its decimal\
    \ representation. For example,\n>>> fraction_to_decimal(\"1/5\")\n0.125\n>>> fraction_to_decimal(\"\
    1/6\")\n
  "    var numerator = parseInt(x.split(\"/\")[0]);\n    var denominator = parseInt(x.split(\"\
    /\")[1]);\n    if(numerator == 0 && denominator == 0){\n        return true;\n\
    \    }\n    if(numerator == 0 && denominator != 0){\n        return false;\n \
    \   }\n    if(numerator != 0 && denominator == 0){\n        return false;\n  \
    \  }\n    if(numerator % denominator == 0){\n        return true;\n    }\n   \
    \ return false;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI like\
    \ this solution, but I believe it can be simplified even more. For example, `simplify(\"\
    1/2\", \"1/2\")` returns true, but `simplify(\"1/2\", \"1/3\")` returns false.\
    \ Also, the function should return false if the input is a fraction with zero\
    \ denominator. Also, `simplify(\"1/2\", \"1/0\")` returns true, but `simplify(\"\
    1/2\", \"1/1\")` returns false.\n<|/ c |>\n<| c |>\nThanks for your comments.\
    \ I added the conditions you mentioned.\n<|/ c |>\n<| c |>\nThanks for your comments.\
    \ I added the conditions you mentioned.\n<|/ c |>\n<| c |>\nThanks for your comments.\
    \ I added the conditions you mentioned.\n<|/ c |>\n<| c |>\nThanks for your comments.\
    \ I added the conditions you mentioned.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string representing a fraction and returns the fraction represented\
    \ by the string.\n\n>>> fraction(\"1/5\")\n1/5\n>>> fraction(\"1/6\")\n2/1\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>>\
    \ fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\"\
    )\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"7/10\")\n7/10\n>>> fraction(\"\
    7/10\")\n7/10\n>>> ", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that will accept two fractions as arguments and return True\
    \ if they have the same numerator and denominator, and False otherwise. Both fractions\
    \ are represented as strings, with <numerator>/<denominator> format. You may assume\
    \ that both fractions do not have zero as denominator. For example, simplify(\"\
    1/2\", \"2/3\") returns False.\n\n\n</text>\n<cell>", "    var numerator = x\n\
    \    var denominator = n\n    var wholeNumbers = false\n    var fractionalParts\
    \ = false\n    var isFractional = false\n    var isFractionalOrWholeNumber = false\n\
    \    var isWholeNumber = false\n    var isWholeNumberOrFractional = false\n  \
    \  var isFractionalOrWholeNumberOrFractional = false\n    var isWholeNumberOrFractionalOrWholeNumber\
    \ = false\n    var isWholeNumberOrFractionalOrWholeNumberOrFractional = false\n\
    \    var isWholeNumberOrFractionalOrWholeNumberOrFractionalOrWholeNumber = false\n\
    \    var wholeNumbersOrFractionalParts = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbers\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalParts\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbers\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumber\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPart\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPartOrWholeNumber\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPart\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPart\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPart\
    \ = false\n    var wholeNumbersOrFractionalPartsOrWholeNumbersOrFractionalPartsOrWholeNumbersOrWholeNumberOrFractionalPartOrWholeNumberOrFractionalPartOrW",
  "    if (x === null || x === undefined){\n        return false;\n    }\n    if (n\
    \ === null || n === undefined){\n        return false;\n    }\n    if (n.includes(\"\
    /\") === false){\n        return false;\n    }\n    let [numer, denom] = n.split(\"\
    /\");\n    if (numer === null || numer === undefined){\n        return false;\n\
    \    }\n    if (denom === null || denom === undefined){\n        return false;\n\
    \    }\n    if (numer.includes(\"/\") === false){\n        return false;\n   \
    \ }\n    let [num1, denom1] = numer.split(\"/\");\n    if (num1 === null || num1\
    \ === undefined){\n        return false;\n    }\n    if (denom1 === null || denom1\
    \ === undefined){\n        return false;\n    }\n    if (num1.includes(\"/\")\
    \ === false){\n        return false;\n    }\n    let [num2, denom2] = num1.split(\"\
    /\");\n    if (num2 === null || num2 === undefined){\n        return false;\n\
    \    }\n    if (denom2 === null || denom2 === undefined){\n        return false;\n\
    \    }\n    if (num2 === num1 && denom2 === denom1){\n        return true;\n \
    \   }\n    return false;\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nThe function below will return the number of digits in an integer.\n\
    \n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n\nThe function should ignore all punctuation marks and only count the\
    \ words that are not empty strings.\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n5\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A.\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A..\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A.\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A.\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A.\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A.\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A..A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A..A.\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A..A..A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A...A..A..A..A..A..A.\"\
    )\n5\n>>> count_words(\"The quick brown fox ", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will return the number of digits in an\
    \ integer.\nThe function should take an integer as an argument and return the\
    \ number of digits in that integer.\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n\
    4\n>>> count_digits(123)\n3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n\
    3\n>>> count_digits(12321)\n4\n>>> count_digits(123)\n3\n>>> count_digits(12",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \nThe function should ignore all non-alphanumeric characters and return the\
    \ number of characters in the string.\nThe function should ignore all spaces and\
    \ return 0 for the empty string.\n\n\n</text>\n<cell>", "    // Write your code\
    \ here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will evaluate a mathematical expression given as a string. For example,\n\
    >>> evaluate(\"(5 + 3) * 6\")\n42\n>>> evaluate(\"(5 + 3) * 6 + 2\")\n42\n>>>\
    \ evaluate(\"(5 + 3) * 6 + 2 + 1\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 +\
    \ 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0\
    \ + 0 + 0 + 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0\"\
    )\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>>\
    \ evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>>\
    \ evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 +\
    \ 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"\
    (5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>> evaluate(\"(5 + 3) * 6 + 2 + 1 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\")\n43\n>>>\
    \ evaluate(\"(5 + 3) * 6 + 2 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + ", "    //\
    \ Write your code here\n}\n</cell>\n<text>\nProblem 8\nWrite a function that will\
    \ take two fractions as arguments and return True if they have the same numerator\
    \ and denominator, and False otherwise. Both fractions are represented as strings,\
    \ with <numerator>/<denominator> format. You may assume that both fractions have\
    \ a valid format, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "    var numerator,\n        denominator,\n        fraction,\n        fractionParts,\n\
    \        wholeNumber,\n        wholeNumberParts,\n        fractionLength,\n  \
    \      fractionPart,\n        fractionParts,\n        wholeNumberLength,\n   \
    \     wholeNumberParts,\n        wholeNumber,\n        wholeNumberPart,\n    \
    \    wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n        wholeNumberPartsLength,\n\
    \        wholeNumberPartsLength", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Run this cell to test your code\nsimplify( \"1/5\", \"5/1\")\n</cell>\n<text>\n\
    Problem 3\nThe function below takes a string representing a fraction and returns\
    \ the fraction simplified to a whole number. For example, simplify(\"1/5\", \"\
    5/1\") returns 1 because \"1/5\" simplifies to 1 while \"5/1\" simplifies to 0.\n\
    \nThe function should return None if the input string does not represent a fraction.\n\
    \n>>> simplify(\"1/5\", \"5/1\")\n1\n>>> simplify(\"1/6\", \"2/1\")\n0\n>>> simplify(\"\
    7/10\", \"10/2\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\"\
    , \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"7/10\", \"10/0\")\n7\n>>> simplify( \"7/10\",\
    \ \"10/0\")\n7\n>>> simplify( \"", "    \n}\n", "    var nums = x.split(\"/\"\
    );\n    var dens = n.split(\"/\");\n    var numsSum = 0, densSum = 0;\n    for(var\
    \ i=0; i<nums.length; i++){\n        numsSum += parseInt(nums[i]);\n    }\n  \
    \  for(var i=0; i<dens.length; i++){\n        densSum += parseInt(dens[i]);\n\
    \    }\n    if(numsSum == densSum){\n        return true;\n    }\n    return false;\n\
    }\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will convert a fraction to its decimal representation. For example,\n>>>\
    \ fraction_to_decimal(\"1/5\")\n0.125\n>>> fraction_to_decimal(\"2/3\")\n0.6666666666666666\n\
    >>> fraction_to_decimal(\"3/2\")\n0.3333333333333333\n>>> fraction_to_decimal(\"\
    1/3\")\n0.3333333333333333\n>>> fraction_to_decimal(\"1/2\")\n0.5\n>>> fraction_to_decimal(\"\
    1/1\")\n1\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"0/0\"\
    )\n0\n>>> fraction_to_decimal(\"0/1\")\n0\n>>> fraction_to_decimal(\"1/-1\")\n\
    0.1111111111111111\n>>> fraction_to_decimal(\"-1/-1\")\n-0.1111111111111111\n\
    >>> fraction_to_decimal(\"-1/-2\")\n-0.2222222222222222\n>>> fraction_to_decimal(\"\
    -2/-1\")\n-0.2222222222222222\n>>> fraction_to_decimal(\"-2/-2\")\n-0.3333333333333333\n\
    >>> fraction_to_decimal(\"-1/-3\")\n-0.3333333333333333\n>>> fraction_to_decimal(\"\
    -1/-4\")\n-0.4444444444444444\n>>> fraction_to_decimal(\"-4/-1\")\n-0.4444444444444444\n\
    >>> fraction_to_decimal(\"-4/-2\")\n-0.5555555555555556\n>>> fraction_to_decimal(\"\
    -2/-3\")\n-0.5555555555555556\n>>> fraction_to_decimal(\"-2/-4\")\n-0.6666666666666666\n\
    >>> fraction_to_decimal(\"3/-2\")\n0.3333333333333333\n>>> fraction_to_decimal(\"\
    3/-3\")\n0.3333333333333333\n>>> fraction_to_decimal(\"3/-4\")\n0.4444444444444444\n\
    >>> fraction_to_decimal(\"4/-3\")\n0.4444444444444444\n>>> fraction_to_decimal(\"\
    4/-4\")\n0.5555555555555556\n>>> fraction_to_decimal(\"-1/-5\")\n0.1111111111111111\n\
    >>> fraction_to_decimal(\"-5/-1\")\n-0.1111111111111111\n>>> fraction_to_decimal(\"\
    -5/-2\")\n-0.2222222222222222\n>>> fraction_to_decimal(\"-2/-5\")\n-0.2222222222222222\n\
    >>> fraction_to_decimal(\"-2/-6\")\n-0.3333333333333333\n>>> fraction_to_decimal(\"\
    -5/-3\")\n-0.3333333333333333\n>>> fraction_to_decimal(\"-5/-4\")\n-0.4444444444444444\n\
    >>> fraction_to_decimal(\"-4/-5\")\n-0.4444444444444444\n>>> fraction_to_decimal(\"\
    -4/-6\")\n-0.5555555555555556\n>>> fraction_to_decimal(\"-5/-5\")\n-0.5555", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take a string as input and return the number of words in the string.\n\n\
    The function should ignore all non-alphanumeric characters and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ignore all characters that are not letters or digits, and treat all spaces\
    \ as word separators.\n\nThe function should ignore all characters that are not\
    \ letters or digits, and treat all spaces as word separators.\n\nThe function\
    \ should ", "    // Your code here\n}\n", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function below takes in two fractions as strings and returns\
    \ the greatest common denominator of the two fractions. Both fractions must have\
    \ at least one numerator and one denominator. You may assume that both fractions\
    \ have a valid format.\n\n>>> greatest_common_denominator(\"1/2\", \"3/4\")\n\
    2\n>>> greatest_common_denominator(\"1/2\", \"1/2\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/3\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/4\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/5\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/6\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/7\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/8\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/9\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/10\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/11\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/12\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/13\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/14\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/15\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/16\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/17\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/18\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/19\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/20\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/21\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/22\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/23\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/24\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/25\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/26\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/27\")\n1\n>>> greatest_common_denominator(\"1/2\", \"1/28\")\n1\n>>>\
    \ greatest_common_denominator(\"1/2\", \"1/29\")\n1\n>>> greatest_common_denominator(\"\
    1/2\", \"1/30\")\n1\n>>> greatest_common_denominator(\"1/2\", \"", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes in two\
    \ fractions x and y, and returns the fraction x/y rounded up to the nearest integer.\n\
    \nThe function should return None if the fractions are invalid.\n\n>>> fraction\
    \ = fractions.Fraction(\"1/3\")\n>>> fraction\nFraction(1, 3)\n>>> fraction =\
    \ fractions.Fraction(\"1/2\")\n>>> fraction\nFraction(1, 2)\n>>> fraction = fractions.Fraction(\"\
    3/4\")\n>>> fraction\nFraction(3, 4)\n>>> fraction = fractions.Fraction(\"7/8\"\
    )\n>>> fraction\nFraction(7, 8)\n>>> fraction = fractions.Fraction(\"7/10\")\n\
    >>> fraction\nFraction(7, 10)\n>>> fraction = fractions.Fraction(\"7/2\")\n>>>\
    \ fraction\nFraction(7, 2)\n>>> fraction = fractions.Fraction(\"7/8\")\n>>> fraction\n\
    Fraction(7, 8)\n>>> fraction = fractions.Fraction(\"7/10\")\n>>> fraction\nFraction(7,\
    \ 10)\n>>> fraction = fractions.Fraction(\"7/2\")\n>>> fraction\nFraction(7, 2)\n\
    >>> fraction = fractions.Fraction(\"7/8\")\n>>> fraction\nFraction(7, 8)\n>>>\
    \ fraction = fractions.Fraction(\"7/10\")\n>>> fraction\nFraction(7, 10)\n>>>\
    \ fraction = fractions.Fraction(\"7/2\")\n>>> fraction\nFraction(7, 2)\n>>> fraction\
    \ = fractions.Fraction(\"7/8\")\n>>> fraction\nFraction(7, 8)\n>>> fraction =\
    \ fractions.Fraction(\"7/10\")\n>>> fraction\nFraction(7, 10)\n>>> fraction =\
    \ fractions.Fraction(\"7/2\")\n>>> fraction\nFraction(7, 2)\n>>> fraction = fractions.Fraction(\"\
    7/8\")\n>>> fraction\nFraction(7, 8)\n>>> fraction = fractions.Fraction(\"7/10\"\
    )\n>>> fraction\nFraction(7, 10)\n>>> fraction = fractions.Fraction(\"7/2\")\n\
    >>> fraction\nFraction(7, 2)\n>>> fraction = fractions.Fraction(\"7/8\")\n>>>\
    \ fraction\nFraction(7, 8)\n>>> fraction = fractions.Fraction(\"7/10\")\n>>> fraction\n\
    Fraction(7, 10)\n>>> fraction = fractions.Fraction(\"7/2\")\n>>> fraction\nFraction(7,\
    \ 2)\n>>> fraction = fractions.Fraction(\"7/8\")\n>>> fraction\nFraction(7, 8)\n\
    >>> fraction = fractions.Fraction(\"7/10\")\n>>> fraction\nFraction(7, 10)\n>>>\
    \ fraction = fractions.Fraction(\"7/2\")\n>>> fraction\nFraction(7, 2)\n>>> fraction\
    \ = fractions.Fraction(\"7/8\")\n>>> fraction\nFraction(7, 8)\n>>> fraction",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a string as input and returns the number of occurrences of the character\
    \ 'x' in the string.\n\n\n</text>\n<cell>", "  // Your code here\n}\n", "    //\
    \ Write your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that will\
    \ convert a fraction to its decimal representation. For example,\n>>> fraction_to_decimal(\"\
    1/5\")\n0.125\n>>> fraction_to_decimal(\"2/3\")\n0.66666666666666663\n>>> fraction_to_decimal(\"\
    1/3\")\n0.33333333333333331\n>>> fraction_to_decimal(\"1/2\")\n0.5\n>>> fraction_to_decimal(\"\
    1/1\")\n1\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\"\
    )\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n\
    0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n\
    >>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>>\
    \ fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"\
    1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\"\
    )\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n\
    0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n\
    >>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>>\
    \ fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"\
    1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\"\
    )\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n\
    0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n\
    >>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>>\
    \ fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"\
    1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\"\
    )\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n\
    0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n\
    >>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"1/0\")\n0\n>>>\
    \ fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal", "    \n}\n", "  \
    \  var numerator = x[0];\n    var denominator = x[1];\n    var numeratorInt =\
    \ parseInt(numerator);\n    var denominatorInt = parseInt(denominator);\n    var\
    \ result = (numeratorInt % denominatorInt) === 0;\n    return result;\n}\n</code>\n\
    <|/ a tags=javascript,math |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `simplify(\"-1/3\", \"3/2\")` returns `true` instead of `false`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot about negative numbers. I edited my answer, now it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `simplify(\"-1/3\"\
    , \"3/2\")` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer, now it works.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `simplify(\"-1/3\", \"3/2\")` returns `true` instead of `false`.\n<|/ c |>\n\
    <| a tags=javascript,math |>\n<code>", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Run this cell to test your code. Make sure you get 'True' before proceeding.\n\
    # You will get 'False' if the function doesn't simplify the expression\nassert\
    \ simplify(\"1/5\", \"5/1\") == True, \"Expected simplify('1/5', '5/1') == True,\
    \ but got False\"\nassert simplify(\"1/6\", \"2/1\") == False, \"Expected simplify('1/6',\
    \ '2/1') == False, but got True\"\nassert simplify(\"7/10\", \"10/2\") == False,\
    \ \"Expected simplify('7/10', '10/2') == False, but got True\"\n</cell>\n<text>\n\
    Task 3\nImplement a function that will simplify the expression\nx + y * n\nwhere\
    \ x, y are string representation of a fraction, and n a positive whole number.\n\
    You can assume that x, y and n are valid fractions, and do not have zero as denominator.\n\
    >>> simplify(\"1/5\", \"5/1\", \"2\")\n'3/2'\n>>> simplify(\"1/6\", \"2/1\", \"\
    3\")\n'3/6'\n>>> simplify(\"7/10\", \"10/2\", \"2\")\n'7/2'\n>>> simplify(\"7/10\"\
    , \"10/2\", \"3\")\n'7/6'\n>>> simplify(\"7/10\", \"10/2\", \"4\")\n'7/8'\n>>>\
    \ simplify(\"7/10\", \"10/2\", \"5\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\"\
    , \"6\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"7\")\n'7/10'\n>>> simplify(\"\
    7/10\", \"10/2\", \"8\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"9\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/2\", \"10\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\"\
    , \"11\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"12\")\n'7/10'\n>>> simplify(\"\
    7/10\", \"10/2\", \"13\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"14\")\n\
    '7/10'\n>>> simplify(\"7/10\", \"10/2\", \"15\")\n'7/10'\n>>> simplify(\"7/10\"\
    , \"10/2\", \"16\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"17\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/2\", \"18\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\"\
    , \"19\")\n'7/10'\n>>> simplify(\"7/10\", \"10/2\", \"20\")\n'7/10'\n>>> simplify(\"\
    7/10\", \"10/2\", \"21\")", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 8\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all characters that do not belong\
    \ to words.\nThe function should ignore all characters that do not belong to numbers.\n\
    The function should ignore all characters that do not belong to symbols.\nThe\
    \ function should ignore all characters that do not belong to spaces.\nThe function\
    \ should ignore all characters that do not belong to punctuation.\nThe function\
    \ should ignore all characters that do not belong to lowercase letters.\nThe function\
    \ should ignore all characters that do not belong to uppercase letters.\nThe function\
    \ should ignore all characters that do not belong to digits.\nThe function should\
    \ ignore all characters that do not belong to symbols.\nThe function should ignore\
    \ all characters that do not belong to spaces.\nThe function should ignore all\
    \ characters that do not belong to punctuation.\nThe function should ignore all\
    \ characters that do not belong to lowercase letters.\nThe function should ignore\
    \ all characters that do not belong to uppercase letters.\nThe function should\
    \ ignore all characters that do not belong to digits.\nThe function should ignore\
    \ all characters that do not belong to symbols.\nThe function should ignore all\
    \ characters that do not belong to spaces.\nThe function should ignore all characters\
    \ that do not belong to punctuation.\nThe function should ignore all characters\
    \ that do not belong to lowercase letters.\nThe function should ignore all characters\
    \ that do not belong to uppercase letters.\nThe function should ignore all characters\
    \ that do not belong to digits.\nThe function should ignore all characters that\
    \ do not belong to symbols.\nThe function should ignore all characters that do\
    \ not belong to spaces.\nThe function should ignore all characters that do not\
    \ belong to punctuation.\nThe function should ignore all characters that do not\
    \ belong to lowercase letters.\nThe function should ignore all characters that\
    \ do not belong to uppercase letters.\nThe function should ignore all characters\
    \ that do not belong to digits.\nThe function should ignore all characters that\
    \ do not belong to symbols.\nThe function should ignore all characters that do\
    \ not belong to spaces.\nThe function should ignore all characters that do not\
    \ belong to punctuation.\nThe function should ignore all characters that do not\
    \ belong to lowercase letters.\nThe function should ignore all characters that\
    \ do not belong to uppercase letters.\nThe function should ignore all characters\
    \ that do not belong to digits.\nThe function should ignore all characters that\
    \ do not belong to symbols.\nThe function should ignore all characters that do\
    \ not belong to spaces.\nThe function should ignore all characters that do not\
    \ belong to punctuation.\nThe function should ignore all characters that do not\
    \ belong to lowercase letters.\nThe ", "  // Write your code here\n}\n", "   \
    \ // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take two fractions as arguments and return True if they are equal and False\
    \ otherwise.\nThe function should return False if the first fraction is zero (i.e.\
    \ the denominator is zero) and True otherwise.\nThe function should return False\
    \ if the second fraction is zero (i.e. the numerator is zero) and True otherwise.\n\
    The function should return False if both fractions are zero (i.e. both denominator\
    \ and numerator are zero) and True otherwise.\nThe function should return False\
    \ if either fraction is zero (i.e. both denominator and numerator are zero) and\
    \ True otherwise.\nThe function should return False if both fractions are negative\
    \ (i.e. both denominator and numerator are negative) and True otherwise.\nThe\
    \ function should return False if either fraction is negative (i.e. both denominator\
    \ and numerator are negative) and True otherwise.\nThe function should return\
    \ False if both fractions are zero (i.e. both denominator and numerator are zero)\
    \ and True otherwise.\nThe function should return False if either fraction is\
    \ zero (i.e. both denominator and numerator are zero) and True otherwise.\nThe\
    \ function should return False if both fractions are negative (i.e. both denominator\
    \ and numerator are negative) and True otherwise.\nThe function should return\
    \ False if either fraction is negative (i.e. both denominator and numerator are\
    \ negative) and True otherwise.\nThe function should return False if both fractions\
    \ are zero (i.e. both denominator and numerator are zero) and True otherwise.\n\
    The function should return False if either fraction is zero (i.e. both denominator\
    \ and numerator are zero) and True otherwise.\nThe function should return False\
    \ if both fractions are negative (i.e. both denominator and numerator are negative)\
    \ and True otherwise.\nThe function should return False if either fraction is\
    \ negative (i.e. both denominator and numerator are negative) and True otherwise.\n\
    The function should return False if both fractions are zero (i.e. both denominator\
    \ and numerator are zero) and True otherwise.\nThe function should return False\
    \ if either fraction is zero (i.e. both denominator and numerator are zero) and\
    \ True otherwise.\nThe function should return False if both fractions are negative\
    \ (i.e. both denominator and numerator are negative) and True otherwise.\nThe\
    \ function should return False if either fraction is negative (i.e. both denominator\
    \ and numerator are negative) and True otherwise.\nThe function should return\
    \ False if both fractions are zero (i.e. both denominator and numerator are zero)\
    \ and True otherwise.\nThe function should return False if either fraction is\
    \ zero (i.e. both denominator and numerator are zero) and True otherwise.\nThe\
    \ function should return False if both fractions are negative (i.e. both ", " \
    \ // Your code goes here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will return the number of digits in a number. For example, if the number is\
    \ 123, then the function should return 3.\n\nThe function should work for negative\
    \ numbers as well. For example, if the number is -123, then the function should\
    \ return -2.\n\nThe function should work for fractions as well. For example, if\
    \ the number is 1/2, then the function should return 1.\n\nThe function should\
    \ work for integers and fractions whose denominator is zero. For example, if the\
    \ number is 1/0, then the function should return 0.\n\nThe function should work\
    \ for integers and fractions whose denominator is not zero. For example, if the\
    \ number is 1/3, then the function should return 2.\n\n>>> digits(123)\n3\n>>>\
    \ digits(-123)\n-2\n>>> digits(1/2)\n1\n>>> digits(1/3)\n2\n>>> digits(1/0)\n\
    0\n>>> digits(1/4)\n0\n>>> digits(1/5)\n0\n>>> digits(1/6)\n0\n>>> digits(1/7)\n\
    0\n>>> digits(1/8)\n0\n>>> digits(1/9)\n0\n>>> digits(1/10)\n0\n>>> digits(1/11)\n\
    0\n>>> digits(1/12)\n0\n>>> digits(1/13)\n0\n>>> digits(1/14)\n0\n>>> digits(1/15)\n\
    0\n>>> digits(1/16)\n0\n>>> digits(1/17)\n0\n>>> digits(1/18)\n0\n>>> digits(1/19)\n\
    0\n>>> digits(1/20)\n0\n>>> digits(1/21)\n0\n>>> digits(1/22)\n0\n>>> digits(1/23)\n\
    0\n>>> digits(1/24)\n0\n>>> digits(1/25)\n0\n>>> digits(1/26)\n0\n>>> digits(1/27)\n\
    0\n>>> digits(1/28)\n0\n>>> digits(1/29)\n0\n>>> digits(1/30)\n0\n>>> digits(1/31)\n\
    0\n>>> digits(1/32)\n0\n>>> digits(1/33)\n0\n>>> digits(1/34)\n0\n>>> digits(1/35)\n\
    0\n>>> digits(1/36)\n0\n>>> digits(1/37)\n0\n>>> digits(1/38)\n0\n>>> digits(1/39)\n\
    0\n>>> digits(1/40)\n0\n>>> digits(1/41)\n0\n>>> digits(1/42)\n0\n>>> digits(1/43)\n\
    0\n>>> digits(1/44)\n0\n", "  // Your code here\n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take a string\
    \ as input and will return the number of times the string occurs in the input.\
    \ \nThe string can contain only lowercase letters, uppercase letters, and digits.\
    \ \nThe string can contain spaces, commas, and periods.\nThe string can contain\
    \ only 1 period.\nThe string can contain only 1 comma.\nThe string can contain\
    \ only 1 space.\nThe string can contain only 1 uppercase letter.\nThe string can\
    \ contain only 1 lowercase letter.\nThe string can contain only 1 digit.\nThe\
    \ string can contain only 1 special character.\nThe string can contain only 1\
    \ special character.\nThe string can contain only 1 special character.\nThe string\
    \ can contain only 1 special character.\nThe string can contain only 1 special\
    \ character.\nThe string can contain only 1 special character.\nThe string can\
    \ contain only 1 special character.\nThe string can contain only 1 special character.\n\
    The string can contain only 1 special character.\nThe string can contain only\
    \ 1 special character.\nThe string can contain only 1 special character.\nThe\
    \ string can contain only 1 special character.\nThe string can contain only 1\
    \ special character.\nThe string can contain only 1 special character.\nThe string\
    \ can contain only 1 special character.\nThe string can contain only 1 special\
    \ character.\nThe string can contain only 1 special character.\nThe string can\
    \ contain only 1 special character.\nThe string can contain only 1 special character.\n\
    The string can contain only 1 special character.\nThe string can contain only\
    \ 1 special character.\nThe string can contain only 1 special character.\nThe\
    \ string can contain only 1 special character.\nThe string can contain only 1\
    \ special character.\nThe string can contain only 1 special character.\nThe string\
    \ can contain only 1 special character.\nThe string can contain only 1 special\
    \ character.\nThe string can contain only 1 special character.\nThe string can\
    \ contain only 1 special character.\nThe string can contain only 1 special character.\n\
    The string can contain only 1 special character.\nThe string can contain only\
    \ 1 special character.\nThe string can contain only 1 special character.\nThe\
    \ string can contain only 1 special character.\nThe string can contain only 1\
    \ special character.\nThe string can contain only 1 special character.\nThe string\
    \ can contain only 1 special character.\nThe string can contain only 1 special\
    \ character.\nThe string can contain only 1 special character.\nThe string can\
    \ contain only 1 special character.\nThe string can contain only 1 special character.\n\
    The string can contain only 1 special character.\nThe string can contain only\
    \ 1 special character.\nThe string can contain only ", "    var nums = x.split(\"\
    /\");\n    var dens = n.split(\"/\");\n    var numsLen = nums.length;\n    var\
    \ densLen = dens.length;\n    var isNum = true;\n    var isDen = true;\n    for(var\
    \ i=0; i<numsLen; i++){\n        if(nums[i] === \"0\"){\n            isNum = false;\n\
    \        }\n    }\n    for(var i=0; i<densLen; i++){\n        if(dens[i] === \"\
    0\"){\n            isDen = false;\n        }\n    }\n    if(isNum && isDen){\n\
    \        return false;\n    }\n    if(isNum){\n        var numsSum = 0;\n    \
    \    for(var i=0; i<numsLen; i++){\n            numsSum += parseInt(nums[i]);\n\
    \        }\n        if(numsSum === parseInt(numsSum)){\n            return true;\n\
    \        }\n    }\n    if(isDen){\n        var densSum = 0;\n        for(var i=0;\
    \ i<densLen; i++){\n            densSum += parseInt(dens[i]);\n        }\n   \
    \     if(densSum === parseInt(densSum)){\n            return true;\n        }\n\
    \    }\n    return false;\n}", "    var numerator = x.split(\"/\");\n    var denominator\
    \ = n.split(\"/\");\n    var numeratorLength = numerator.length;\n    var denominatorLength\
    \ = denominator.length;\n    var result = true;\n    \n    if(numeratorLength\
    \ != denominatorLength){\n        result = false;\n    }\n    \n    for(var i\
    \ = 0; i < numeratorLength; i++){\n        if(numerator[i] != denominator[i]){\n\
    \            result = false;\n        }\n    }\n    \n    return result;\n}\n",
  "  // Your code goes here\n}\n</cell>\n<cell>\n# Run the code cell below to test\
    \ your function.\n# If the code cell returns PASSED, then you have implemented\
    \ the function correctly. \n# If it returns FAILED, then your code does not match\
    \ the description of the problem statement.\n# The cell will output the error\
    \ message in red.\ntry:\n    assert simplify(\"1/5\", \"5/1\") == True, \"Expected\
    \ simplify('1/5', '5/1') == True, but got False.\" \n    assert simplify(\"1/6\"\
    , \"2/1\") == False, \"Expected simplify('1/6', '2/1') == False, but got True.\"\
    \ \n    assert simplify(\"7/10\", \"10/2\") == False, \"Expected simplify('7/10',\
    \ '10/2') == False, but got True.\" \nexcept AssertionError as error:\n    print(\"\
    Incorrect result!. Error message:\")\n    print(error) \n</cell>\n<text>\nThe\
    \ simplify function works well enough for our purposes, but we now have a new\
    \ problem: we need a function that can tell us if a number is of the form n/m,\
    \ where n and m are positive whole numbers. We will use another function from\
    \ our library to help us with this problem: is_whole_number.\n\nImplement the\
    \ is_whole_number function below so that it takes a string that represents a fraction\
    \ and returns True if it is a whole number, and False otherwise.\n\n\n</text>\n\
    <cell>\n# UNQ_C8 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: is_whole_number\n\
    def is_whole_number(fraction):\n    \"\"\"\n    Input:\n        fraction: a string\
    \ that represents a fraction, of the form n/m, where n and m are positive whole\
    \ numbers\n    Output:\n        is_whole_number: a boolean that indicates whether\
    \ the given fraction is a whole number\n    \"\"\"\n    \n    # Convert fraction\
    \ to fraction numerator and fraction denominator using split_fraction\n    fraction\
    \ = split_fraction(fraction)\n    \n    # Return True if both numerator and denominator\
    \ are positive, and False otherwise\n    return fraction[0] > 0 and fraction[1]\
    \ > 0\n</cell>\n<cell>\n# UNIT TEST\n# Test the is_whole_number function below\n\
    print(is_whole_number(\"1/2\"))\nprint(is_whole_number(\"3/4\"))\nprint(is_whole_number(\"\
    7/10\"))\nprint(is_whole_number(\"9/10\"))\nprint(is_whole_number(\"2/5\"))\n\
    print(is_whole_number(\"1/2\"))\nprint(is_whole_number(\"0\"))\nprint(is_whole_number(\"\
    -2/3\"))\n</cell>\n<text>\nFinally, we write a function that takes an input of\
    \ a whole ", "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that will take two fractions as input and return the greatest common\
    \ divisor of them. Both fractions are represented as strings, with \"<numerator>/<denominator>\"\
    \ format. Assume that both fractions have the same denominator.\n\n\n</text>\n\
    <cell>", "    \n}\n</cell>\n<text>\nProblem 7\nWrite a function that will return\
    \ the number of digits in a number. For example, the number 123 has 3 digits,\
    \ while the number 1234 has 4 digits. Write a function that will return the number\
    \ of digits in a number as a string. For example, the number 123 has 3 digits,\
    \ while the number 1234 has 4 digits. You can assume that the number is a valid\
    \ integer.\n\n\n</text>\n<cell>", "    \n}\n</cell>\n<text>\nProblem 4\nThe function\
    \ below takes a string as input and returns a string as output. The function will\
    \ take an expression as input and will simplify the expression by replacing all\
    \ fractions with their simplified versions. For example, simplify(\"1/5\", \"\
    5/1\") will return \"1/5\". Note that fractions such as \"1/5\" are valid fractions,\
    \ but not simplified fractions. For example, simplify(\"1/5\", \"1/2\") will return\
    \ \"1/2\". Note that the function does not take into account the order of fractions\
    \ in the expression. For example, simplify(\"1/5\", \"2/1\") will return \"1/2\"\
    .\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>\n# Run this\
    \ cell to check your answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes\
    \ a string representing a fraction and returns the fraction represented by the\
    \ string.\nThe function should return None if the string does not represent a\
    \ fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should ", "  // Your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take two fractions as arguments and return\
    \ True if they have the same numerator and denominator, False otherwise. Both\
    \ fractions are represented as strings, with <numerator>/<denominator> format.\
    \ You may assume that both fractions have a valid format.\n\n>>> fraction1 = \"\
    1/5\"\n>>> fraction2 = \"5/1\"\n>>> fraction3 = \"2/1\"\n>>> fraction4 = \"7/10\"\
    \n>>> fraction5 = \"10/2\"\n>>> fraction6 = \"1/6\"\n>>> fraction7 = \"2/1\"\n\
    >>> fraction8 = \"7/10\"\n>>> fraction9 = \"10/2\"\n>>> fraction10 = \"1/5\"\n\
    >>> fraction11 = \"5/1\"\n>>> fraction12 = \"2/1\"\n>>> fraction13 = \"7/10\"\n\
    >>> fraction14 = \"10/2\"\n>>> fraction15 = \"1/6\"\n>>> fraction16 = \"2/1\"\n\
    >>> fraction17 = \"7/10\"\n>>> fraction18 = \"10/2\"\n>>> fraction19 = \"1/5\"\
    \n>>> fraction20 = \"5/1\"\n>>> fraction21 = \"2/1\"\n>>> fraction22 = \"7/10\"\
    \n>>> fraction23 = \"10/2\"\n>>> fraction24 = \"1/6\"\n>>> fraction25 = \"2/1\"\
    \n>>> fraction26 = \"7/10\"\n>>> fraction27 = \"10/2\"\n>>> fraction28 = \"1/5\"\
    \n>>> fraction29 = \"5/1\"\n>>> fraction30 = \"2/1\"\n>>> fraction31 = \"7/10\"\
    \n>>> fraction32 = \"10/2\"\n>>> fraction33 = \"1/6\"\n>>> fraction34 = \"2/1\"\
    \n>>> fraction35 = \"7/10\"\n>>> fraction36 = \"10/2\"\n>>> fraction37 = \"1/5\"\
    \n>>> fraction38 = \"5/1\"\n>>> fraction39 = \"2/1\"\n>>> fraction40 = \"7/10\"\
    \n>>> fraction41 = \"10/2\"\n>>> fraction42 = \"1/6\"\n>>> fraction43 = \"2/1\"\
    \n>>> fraction44 = \"7/10\"\n>>> fraction45 = \"10/2\"\n>>> fraction46 = \"1/5\"\
    \n>>> fraction47 = \"5/1\"\n>>> fraction48 = \"2/1\"\n>>> fraction49 = \"7/10\"\
    \n>>> fraction50 = \"10/2\"\n>>> fraction51 = \"1/6\"\n>>> fraction52 = \"2/1\"\
    \n>>> fraction53 = \"7/10\"\n>>> fraction54 = \"10/2\"\n>>> fraction55 = \"1/5\"\
    \n>>> fraction56 = \"5/1\"\n>>> fraction57 = \"2/1\"\n>>> fraction58 = \"7/10\"\
    \n>>> fraction59 = \"10/2\"\n>>> fraction60 = \"1/6\"\n>>> fraction61 = ", " \
    \   if (x.indexOf('/') != -1){\n        var nums = x.split(\"/\");\n        var\
    \ num1 = nums[0];\n        var num2 = nums[1];\n        if (num1.indexOf('.')\
    \ == -1){\n            num1 = num1 + \".0\";\n        }\n        if (num2.indexOf('.')\
    \ == -1){\n            num2 = num2 + \".0\";\n        }\n        var num1Num =\
    \ parseInt(num1);\n        var num2Num = parseInt(num2);\n        if (num1Num\
    \ == 0){\n            return false;\n        }\n        if (num2Num == 0){\n \
    \           return false;\n        }\n        if (num1Num == num2Num){\n     \
    \       return true;\n        }\n        if (num1Num > num2Num){\n           \
    \ return false;\n        }\n        if (num1Num < num2Num){\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "  if(n.includes(\"/\")){\n\
    \    let [numerator, denominator] = n.split(\"/\");\n    if(numerator == \"\"\
    \ || denominator == \"\"){\n      return false;\n    }\n    if(numerator == \"\
    \"){\n      numerator = \"1\";\n    }\n    if(denominator == \"0\"){\n      return\
    \ false;\n    }\n    if(numerator == denominator){\n      return true;\n    }\n\
    \    if(numerator > denominator){\n      return true;\n    }\n    return false;\n\
    \  }\n  if(n.includes(\"*\")){\n    let [numerator, denominator] = n.split(\"\
    *\");\n    if(numerator == \"\" || denominator == \"\"){\n      return false;\n\
    \    }\n    if(numerator == \"\"){\n      numerator = \"1\";\n    }\n    if(denominator\
    \ == \"0\"){\n      return false;\n    }\n    if(numerator == denominator){\n\
    \      return true;\n    }\n    if(numerator > denominator){\n      return true;\n\
    \    }\n    return false;\n  }\n  if(n.includes(\"+\")){\n    let [numerator,\
    \ denominator] = n.split(\"+\");\n    if(numerator == \"\" || denominator == \"\
    \"){\n      return false;\n    }\n    if(numerator == \"\"){\n      numerator\
    \ = \"1\";\n    }\n    if(denominator == \"0\"){\n      return false;\n    }\n\
    \    if(numerator == denominator){\n      return true;\n    }\n    if(numerator\
    \ > denominator){\n      return true;\n    }\n    return false;\n  }\n  if(n.includes(\"\
    -\")){\n    let [numerator, denominator] = n.split(\"-\");\n    if(numerator ==\
    \ \"\" || denominator == \"\"){\n      return false;\n    }\n    if(numerator\
    \ == \"\"){\n      numerator = \"1\";\n    }\n    if(denominator == \"0\"){\n\
    \      return false;\n    }\n    if(numerator == denominator){\n      return true;\n\
    \    }\n    if(numerator > denominator){\n      return true;\n    }\n    return\
    \ false;\n  }\n  if(n.includes(\"(\")){\n    let [numerator, denominator] = n.split(\"\
    (\");\n    if(numerator == \"\" || denominator == \"\"){\n      return false;\n\
    \    }\n    if(numerator == \"\"){\n      numerator = \"1\";\n    }\n    if(denominator\
    \ == \"0\"){\n      return false;\n    }\n    if(numerator == denominator){\n\
    \      return true;\n    }\n    if(numerator > denominator){\n      return true;\n\
    \    }\n    return false;\n  }\n  if(n.includes(\")\")){\n    let [numerator,\
    \ denominator] = n.split(\")\");\n    if(numerator == \"\" || denominator == \"\
    \"){\n      return false;\n    }\n    if(numerator == \"\"){\n      numerator\
    \ = \"1\";\n    }\n    if(denominator == \"0\"){\n      return false;\n    }\n\
    \    if(numerator == denominator", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 4\nWrite a function that will take a string of any length, and\
    \ return True if that string is a valid fraction, and False otherwise.\n\n>>>\
    \ is_valid_fraction(\"1/5\")\nTrue\n>>> is_valid_fraction(\"1/6\")\nTrue\n>>>\
    \ is_valid_fraction(\"7/10\")\nTrue\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_fraction(\"7/10\")\nFalse\n\
    >>> is_valid_fraction(\"7/10\")\nFalse\n>>> is_valid_", "    var splitX = x.split(\"\
    /\");\n    var splitN = n.split(\"/\");\n    var splitXN = splitX[1].split(\"\
    /\");\n    var splitXN2 = splitXN[1].split(\"/\");\n    var splitXN3 = splitXN[2].split(\"\
    /\");\n    var splitXN4 = splitXN[3].split(\"/\");\n    var splitXN5 = splitXN[4].split(\"\
    /\");\n    var splitXN6 = splitXN[5].split(\"/\");\n    var splitXN7 = splitXN[6].split(\"\
    /\");\n    var splitXN8 = splitXN[7].split(\"/\");\n    var splitXN9 = splitXN[8].split(\"\
    /\");\n    var splitXN10 = splitXN[9].split(\"/\");\n    var splitXN11 = splitXN[10].split(\"\
    /\");\n    var splitXN12 = splitXN[11].split(\"/\");\n    var splitXN13 = splitXN[12].split(\"\
    /\");\n    var splitXN14 = splitXN[13].split(\"/\");\n    var splitXN15 = splitXN[14].split(\"\
    /\");\n    var splitXN16 = splitXN[15].split(\"/\");\n    var splitXN17 = splitXN[16].split(\"\
    /\");\n    var splitXN18 = splitXN[17].split(\"/\");\n    var splitXN19 = splitXN[18].split(\"\
    /\");\n    var splitXN20 = splitXN[19].split(\"/\");\n    var splitXN21 = splitXN[20].split(\"\
    /\");\n    var splitXN22 = splitXN[21].split(\"/\");\n    var splitXN23 = splitXN[22].split(\"\
    /\");\n    var splitXN24 = splitXN[23].split(\"/\");\n    var splitXN25 = splitXN[24].split(\"\
    /\");\n    var splitXN26 = splitXN[25].split(\"/\");\n    var splitXN27 = splitXN[26].split(\"\
    /\");\n    var splitXN28 = splitXN[27].split(\"/\");\n    var splitXN29 = splitXN[28].split(\"\
    /\");\n    var splitXN30 = splitXN[29].split(\"/\");\n    var splitXN31 = splitXN[30].split(\"\
    /\");\n    var splitXN32 = splitXN[31].split(\"/\");\n    var splitXN33 = splitXN[32].split(\"\
    /\");\n", "  if(x === n || x === \"\"){\n    return true;\n  }\n  if(n.includes(\"\
    /\")){\n    if(x.includes(\"/\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    *\")){\n    if(x.includes(\"*\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    +\")){\n    if(x.includes(\"+\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    -\")){\n    if(x.includes(\"-\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    (\")){\n    if(x.includes(\"(\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    )\")){\n    if(x.includes(\")\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    ^\")){\n    if(x.includes(\"^\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    *\")){\n    if(x.includes(\"*\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    /\")){\n    if(x.includes(\"/\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    +\")){\n    if(x.includes(\"+\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    -\")){\n    if(x.includes(\"-\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    (\")){\n    if(x.includes(\"(\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    )\")){\n    if(x.includes(\")\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    ^\")){\n    if(x.includes(\"^\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    *\")){\n    if(x.includes(\"*\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    /\")){\n    if(x.includes(\"/\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    +\")){\n    if(x.includes(\"+\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    -\")){\n    if(x.includes(\"-\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    (\")){\n    if(x.includes(\"(\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    )\")){\n    if(x.includes(\")\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    ^\")){\n    if(x.includes(\"^\")){\n      return false;\n    }\n  }\n  if(n.includes(\"\
    *\")){\n    if(x.includes(\"*\")){\n      return false;\n    }", "    // Your\
    \ code here\n}\n</cell>\n<cell>\n# Run this cell to test your solution\nassert\
    \ simplify( \"1/5\", \"5/1\") == True, \"1/5 does not simplify to True\"\nassert\
    \ simplify( \"1/6\", \"2/1\") == False, \"1/6 does not simplify to False\"\nassert\
    \ simplify( \"7/10\", \"10/2\") == False, \"7/10 does not simplify to False\"\n\
    </cell>\n<text>\n6. Implement a function that will evaluate a mathematical expression\
    \ given in string form and return its value.\nThe function should evaluate an\
    \ expression of the form \"n1/n2 + n3/n4 + n5/n6\" where n1, n2, n3, n4, n5, n6\
    \ are all positive whole numbers. You can assume that n1, n2, n3, n4, n5, n6 do\
    \ not have zero as denominator. For example, \"1/3 + 2/3 + 1/2\" should return\
    \ 5.\n\n\n</text>\n<cell>\n# Your code here\n</cell>\n<cell>\n# Run this cell\
    \ to test your solution\nassert evaluate(\"1/3 + 2/3 + 1/2\") == 5, \"Incorrect\
    \ solution\"\n</cell>\n<text>\n7. Implement a function that will evaluate a mathematical\
    \ expression given in string form and return its value.\nThe function should evaluate\
    \ an expression of the form \"n1/n2 + n3/n4 + n5/n6\" where n1, n2, n3, n4, n5,\
    \ n6 are all positive whole numbers. You can assume that n1, n2, n3, n4, n5, n6\
    \ do not have zero as denominator. For example, \"1/3 + 2/3 + 1/2\" should return\
    \ 5.\n\n\n</text>\n<cell>\n# Your code here\n</cell>\n<cell>\n# Run this cell\
    \ to test your solution\nassert evaluate(\"1/3 + 2/3 + 1/2\") == 5, \"Incorrect\
    \ solution\"\n</cell>\n<text>\n8. Implement a function that will evaluate a mathematical\
    \ expression given in string form and return its value.\nThe function should evaluate\
    \ an expression of the form \"n1/n2 + n3/n4 + n5/n6\" where n1, n2, n3, n4, n5,\
    \ n6 are all positive whole numbers. You can assume that n1, n2, n3, n4, n5, n6\
    \ do not have zero as denominator. For example, \"1/3 + 2/3 + 1/2\" should return\
    \ 5.\n\n\n</text>\n<cell>\n# Your code here\n</cell>\n<cell>\n# Run this cell\
    \ to test your solution\nassert evaluate(\"1/3 + 2/3 + 1/2\") == 5, \"Incorrect\
    \ solution\"\n</cell", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nThe function should ignore spaces and punctuation. \nThe function\
    \ should ignore leading zeroes.\n\n\n</text>\n<cell>", "    // Write your code\
    \ here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that will calculate the factorial of a number. Factorial of a number\
    \ is the number of times a number multiplied by itself equals itself. For example,\
    \ 5! = 5 x 4 x 3 x 2 x 1 = 120. Your function should take in a positive integer\
    \ and return the factorial of that number.\n\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(100)\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nTypeError: unsupported\
    \ operand type(s) for *: 'int' and 'str'\n>>> factorial(\"5\")\nTraceback (most\
    \ recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\"\
    , line 2, in factorial\nTypeError: unsupported operand type(s) for +: 'int' and\
    \ 'str'\n>>> factorial(\"10\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nTypeError:\
    \ unsupported operand type(s) for +: 'int' and 'str'\n>>> factorial(\"100\")\n\
    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nTypeError: unsupported operand type(s)\
    \ for +: 'int' and 'str'\n>>> factorial(\"a\")\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    TypeError: unsupported operand type(s) for +: 'int' and 'str'\n>>> factorial(\"\
    ab\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nTypeError: unsupported operand type(s)\
    \ for +: 'int' and 'str'\n>>> factorial(\"abc\")\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\
    >>> factorial(\"abcde\")\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nTypeError: unsupported\
    \ operand type(s) for +: 'int' and 'str'\n>>> factorial(\"abcde\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in factorial\nTypeError: unsupported operand type(s) for +:\
    \ 'int' and 'str'\n>>> factorial(\"abcde\")\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    TypeError", "    if (x.indexOf('/') !== -1){\n        var parts = x.split('/');\n\
    \        var numerator = parts[0];\n        var denominator = parts[1];\n    \
    \    if (numerator === \"\" || denominator === \"\"){\n            return false;\n\
    \        }\n        if (numerator === denominator){\n            return true;\n\
    \        }\n        if (isNaN(numerator) || isNaN(denominator)){\n           \
    \ return false;\n        }\n        var numParts = numerator.split('.');\n   \
    \     var denParts = denominator.split('.');\n        if (numParts.length !==\
    \ denParts.length){\n            return false;\n        }\n        var numZeros\
    \ = 0;\n        for (var i = 0; i < numParts.length; i++){\n            if (numParts[i].length\
    \ === 0){\n                numZeros++;\n            }\n        }\n        if (numZeros\
    \ === denParts.length){\n            return true;\n        }\n        return false;\n\
    \    }\n    if (n === 0){\n        return true;\n    }\n    if (isNaN(n) || isNaN(x)){\n\
    \        return false;\n    }\n    var numParts = x.split('.');\n    var denParts\
    \ = n.split('.');\n    if (numParts.length !== denParts.length){\n        return\
    \ false;\n    }\n    var numZeros = 0;\n    for (var i = 0; i < numParts.length;\
    \ i++){\n        if (numParts[i].length === 0){\n            numZeros++;\n   \
    \     }\n    }\n    if (numZeros === denParts.length){\n        return true;\n\
    \    }\n    return false;\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 4\nWrite a function that will return the number of digits in an integer.\n\
    \nThe function should take one integer as input, and output a positive integer.\n\
    \n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(0)\n1\n\
    >>> count_digits(-3)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n\
    1\n>>> count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(", "    \n\
    }\n</cell>\n<text>\nPart III: Implement a function to evaluate a polynomial expression\n\
    \n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell\
    \ to check your answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 4\nThe function below\
    \ takes in a string representing a fraction and returns the fraction simplified\
    \ to a whole number. For example, simplify(\"1/5\", \"5/1\") returns 1. You can\
    \ assume that x, and n are valid fractions, and do not have zero as denominator.\n\
    \n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that will evaluate a mathematical expression given as string\
    \ and return the result as a float.\nThe function should support the following\
    \ syntax:\n\nExpression ::= <expression> [ <operator> <expression> ]\nOperator\
    \ ::= + | - | / | * | ^\nThe function should return 0 if the expression is invalid\
    \ and non-zero if the expression is valid. \nThe function should support the following\
    \ operators:\n\n+ for addition\n- for subtraction\n/ for division\n* for multiplication\n\
    ^ for exponentiation\n\nThe function should support the following operators:\n\
    \n< for less than\n> for greater than\n<= for less than or equal to\n>= for greater\
    \ than or equal to\n== for equal to\n!= for not equal to\nand for logical and\n\
    or for logical or\n\nThe function should support the following operators:\n\n\
    ~ for negation\n! for logical not\nand for logical and\nor for logical or\n\n\n\
    </text>\n<cell>", "    if (x.includes(\"/\")){\n        let [numer, denom] = x.split(\"\
    /\");\n        if (numer*denom == parseInt(numer) && parseInt(denom) == parseInt(denom)){\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  // Write\
    \ your code here\n}\n", "    // Your code here\n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will return the number\
    \ of digits in a number. For example, given x = 123, the function should return\
    \ 3.\n\nThe function should return 0 if x is 0.\n\nThe function should return\
    \ 0 if x is negative.\n\nThe function should return 0 if x is NaN.\n\nThe function\
    \ should return 0 if x is infinite.\n\nThe function should return 0 if x is greater\
    \ than or equal to 0.\n\nThe function should return 0 if x is less than 0.\n\n\
    \n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe\
    \ function below takes a string as input and returns the number of characters\
    \ in the string. \nThe function should ignore spaces and punctuation marks.\n\n\
    \n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that will take a string of any length and return a string\
    \ with the first letter of each word capitalized. For example, if the input string\
    \ is \"hello world\" the output should be \"Hello World\".\n\nThe input string\
    \ may contain any characters, including spaces.\n\nThe output string may contain\
    \ any characters, including spaces.\n\nThe function should return an output string\
    \ that is the same length as the input string, with each word capitalized.\n\n\
    >>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello ", " \
    \   // Your code here\n}\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ simplify the expression\nx + y. The function returns True if x + y evaluates\
    \ to a whole number and False otherwise. Both x and y, are string representation\
    \ of a fraction, and have the following format,\n<numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\nYou can assume that\
    \ x and y are valid fractions, and do not have zero as denominator.\n>>> simplify(\"\
    1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"\
    7/10\", \"10/2\")\nfalse\n>>> simplify(\"1/2\", \"1/2\")\ntrue\n>>> simplify(\"\
    1/2\", \"1/3\")\nfalse\n>>> simplify(\"1/2\", \"1/4\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/5\")\nfalse\n>>> simplify(\"1/2\", \"1/6\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/7\")\nfalse\n>>> simplify(\"1/2\", \"1/8\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/9\")\nfalse\n>>> simplify(\"1/2\", \"1/10\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/11\")\nfalse\n>>> simplify(\"1/2\", \"1/12\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/13\")\nfalse\n>>> simplify(\"1/2\", \"1/14\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/15\")\nfalse\n>>> simplify(\"1/2\", \"1/16\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/17\")\nfalse\n>>> simplify(\"1/2\", \"1/18\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/19\")\nfalse\n>>> simplify(\"1/2\", \"1/20\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/21\")\nfalse\n>>> simplify(\"1/2\", \"1/22\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/23\")\nfalse\n>>> simplify(\"1/2\", \"1/24\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/25\")\nfalse\n>>> simplify(\"1/2\", \"1/26\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/27\")\nfalse\n>>> simplify(\"1/2\", \"1/28\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/29\")\nfalse\n>>> simplify(\"1/2\", \"1/30\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/31\")\nfalse\n>>> simplify(\"1/2\", \"1/32\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/33\")\nfalse\n>>> simplify(\"1/2\", \"1/34\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/35\")\nfalse\n>>> simplify(\"1/2\", \"1/36\")\nfalse\n>>> simplify(\"\
    1/2\", \"1/37\")\nfalse\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 7\nWrite a function that will take a string as input and return the string\
    \ with all consecutive vowels removed.\n\n>>> removeVowels(\"Hello World\")\n\
    'Hello World'\n>>> removeVowels(\"Hello World!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello\
    \ World'\n>>> removeVowels(\"Hello World!!!\")\n'Hello World'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hello World'\n>>> ", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 7\nWrite a function that will return the number of digits in an\
    \ integer.\n\n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will return the number of digits in a number.\
    \ For example, a number with 3 digits has 3 digits, a number with 4 digits has\
    \ 4 digits, and so on.\n\nThe function should take one parameter, x, which is\
    \ a string.\n\n>>> digits(\"1/3\")\n3\n>>> digits(\"1/4\")\n4\n>>> digits(\"1/5\"\
    )\n5\n>>> digits(\"1/6\")\n6\n>>> digits(\"1/7\")\n7\n>>> digits(\"1/8\")\n8\n\
    >>> digits(\"1/9\")\n9\n>>> digits(\"1/10\")\n10\n>>> digits(\"1/11\")\n11\n>>>\
    \ digits(\"1/12\")\n12\n>>> digits(\"1/13\")\n13\n>>> digits(\"1/14\")\n14\n>>>\
    \ digits(\"1/15\")\n15\n>>> digits(\"1/16\")\n16\n>>> digits(\"1/17\")\n17\n>>>\
    \ digits(\"1/18\")\n18\n>>> digits(\"1/19\")\n19\n>>> digits(\"1/20\")\n20\n>>>\
    \ digits(\"1/21\")\n21\n>>> digits(\"1/22\")\n22\n>>> digits(\"1/23\")\n23\n>>>\
    \ digits(\"1/24\")\n24\n>>> digits(\"1/25\")\n25\n>>> digits(\"1/26\")\n26\n>>>\
    \ digits(\"1/27\")\n27\n>>> digits(\"1/28\")\n28\n>>> digits(\"1/29\")\n29\n>>>\
    \ digits(\"1/30\")\n30\n>>> digits(\"1/31\")\n31\n>>> digits(\"1/32\")\n32\n>>>\
    \ digits(\"1/33\")\n33\n>>> digits(\"1/34\")\n34\n>>> digits(\"1/35\")\n35\n>>>\
    \ digits(\"1/36\")\n36\n>>> digits(\"1/37\")\n37\n>>> digits(\"1/38\")\n38\n>>>\
    \ digits(\"1/39\")\n39\n>>> digits(\"1/40\")\n40\n>>> digits(\"1/41\")\n41\n>>>\
    \ digits(\"1/42\")\n42\n>>> digits(\"1/43\")\n43\n>>> digits(\"1/44\")\n44\n>>>\
    \ digits(\"1/45\")\n45\n>>> digits(\"1/46\")\n46\n>>> digits(\"1/47\")\n47\n>>>\
    \ digits(\"1/48\")\n48\n>>> digits(\"1/49\")\n49\n>>> digits(\"1/50\")\n50\n>>>\
    \ digits(\"1/51\")\n51\n>>> digits(\"1/52\")\n52\n>>> digits(\"1/53\")\n", " \
    \   \n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate a mathematical\
    \ expression. Your function should take two arguments, the first one being a string\
    \ representing the expression, and the second one being a string representing\
    \ the variable that you want to substitute the expression with.\n\nThe function\
    \ should return a string representing the result of the evaluation.\n\n>>> evaluate(\"\
    (x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\",\
    \ \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\"\
    , \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"\
    (x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n\
    >>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"\
    (x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\",\
    \ \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\"\
    , \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"\
    (x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n\
    >>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"\
    (x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\",\
    \ \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\"\
    , \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"\
    (x + y)*z\"\n>>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n\
    >>> evaluate(\"(x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"\
    (x + y)*z\", \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z\",\
    \ \"x\", \"y\", \"z\")\n\"(x + y)*z\"\n>>> evaluate(\"(x + y)*z", "    // Your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take two\
    \ fractions as input and return the greatest common denominator of the two fractions.\
    \ You can assume that both fractions have a valid format, and do not have zero\
    \ as denominator. Both fractions are strings with format <numerator>/<denominator>.\
    \ For example, simplify(\"1/5\", \"5/1\") returns \"1/5\".\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your solution\n\
    simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function should return\
    \ True if x is a valid fraction and False otherwise. Both x and n are string representation\
    \ of a fraction, and have the following format, <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers. You can assume that\
    \ x, and n are valid fractions, and do not have zero as denominator.\n\n\n</text>\n\
    <cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem 8\nWrite a\
    \ function that will calculate the factorial of a number. Factorial of a number\
    \ is the product of all positive integers less than or equal to that number. For\
    \ example, 5! = 5 x 4 x 3 x 2 x 1 = 120. Make sure you handle non-integer inputs\
    \ and negative numbers. You can assume that x is a valid fraction.\n\n\n</text>\n\
    <cell>", "    var splitX = x.split(\"/\");\n    var splitN = n.split(\"/\");\n\
    \    var splitXN = splitX[0].split(\"/\");\n    var splitXNN = splitXN[0].split(\"\
    /\");\n    var splitXNNN = splitXNN[0].split(\"/\");\n    var splitXNNNN = splitXNNN[0].split(\"\
    /\");\n    var splitXNNNNN = splitXNNNN[0].split(\"/\");\n    var splitXNNNNNN\
    \ = splitXNNNNN[0].split(\"/\");\n    var splitXNNNNNNN = splitXNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNN = splitXNNNNNNN[0].split(\"/\");\n    var splitXNNNNNNNNN\
    \ = splitXNNNNNNNN[0].split(\"/\");\n    var splitXNNNNNNNNNN = splitXNNNNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNNNNN = splitXNNNNNNNNNN[0].split(\"/\");\n    var\
    \ splitXNNNNNNNNNNNN = splitXNNNNNNNNNNN[0].split(\"/\");\n    var splitXNNNNNNNNNNNNN\
    \ = splitXNNNNNNNNNNNN[0].split(\"/\");\n    var splitXNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNN[0].split(\"/\");\n\
    \    var splitXNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNN[0].split(\"/\");\n \
    \   var splitXNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNNN[0].split(\"/\");\n\
    \    var splitXNNNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNNNNN[0].split(\"/\"\
    );\n    var splitXNNNNNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNNNNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNNNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNNNNNNNNNNNNNNNNN[0].split(\"\
    /\");\n    var splitXNNNNNNNNNNNNNNNNNNNNNNNNNNNN = splitXNNNNNNNNNN", "    //\
    \ Your code here\n}\n</cell>\n<text>\nTask 3\nWrite a function that will return\
    \ the number of digits in an integer.\n\n\n</text>\n<cell>", "    // Write your\
    \ code here\n}\n", "    var numerator = parseInt(x.split(\"/\")[0]);\n    var\
    \ denominator = parseInt(x.split(\"/\")[1]);\n    if(isNaN(numerator) || isNaN(denominator)){\n\
    \        return false;\n    }\n    if(numerator == 0 && denominator == 0){\n \
    \       return true;\n    }\n    if(numerator == 0){\n        return false;\n\
    \    }\n    if(denominator == 0){\n        return false;\n    }\n    if(numerator\
    \ % denominator == 0){\n        return true;\n    }\n    return false;\n}\n",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 4\nThe function below\
    \ takes in a string and returns the number of words in the string. \nThe function\
    \ should ignore all characters that are not letters, numbers, or spaces.\nThe\
    \ function should ignore all leading and trailing spaces.\nThe function should\
    \ ignore all spaces before the word \"the\".\nThe function should ignore all spaces\
    \ after the word \"the\".\nThe function should ignore all spaces before the word\
    \ \"and\".\nThe function should ignore all spaces after the word \"and\".\nThe\
    \ function should ignore all spaces before the word \"the\".\nThe function should\
    \ ignore all spaces after the word \"the\".\nThe function should ignore all spaces\
    \ before the word \"and\".\nThe function should ignore all spaces after the word\
    \ \"and\".\nThe function should ignore all spaces before the word \"the\".\nThe\
    \ function should ignore all spaces after the word \"the\".\nThe function should\
    \ ignore all spaces before the word \"and\".\nThe function should ignore all spaces\
    \ after the word \"and\".\nThe function should ignore all spaces before the word\
    \ \"the\".\nThe function should ignore all spaces after the word \"the\".\nThe\
    \ function should ignore all spaces before the word \"and\".\nThe function should\
    \ ignore all spaces after the word \"and\".\nThe function should ignore all spaces\
    \ before the word \"the\".\nThe function should ignore all spaces after the word\
    \ \"the\".\nThe function should ignore all spaces before the word \"and\".\nThe\
    \ function should ignore all spaces after the word \"and\".\nThe function should\
    \ ignore all spaces before the word \"the\".\nThe function should ignore all spaces\
    \ after the word \"the\".\nThe function should ignore all spaces before the word\
    \ \"and\".\nThe function should ignore all spaces after the word \"and\".\nThe\
    \ function should ignore all spaces before the word \"the\".\nThe function should\
    \ ignore all spaces after the word \"the\".\nThe function should ignore all spaces\
    \ before the word \"and\".\nThe function should ignore all spaces after the word\
    \ \"and\".\nThe function should ignore all spaces before the word \"the\".\nThe\
    \ function should ignore all spaces after the word \"the\".\nThe function should\
    \ ignore all spaces before the word \"and\".\nThe function should ignore all spaces\
    \ after the word \"and\".\nThe function should ignore all spaces before the word\
    \ \"the\".\nThe function should ignore all spaces after the word \"the\".\nThe\
    \ function should ignore all spaces before the word \"and\".\nThe "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
