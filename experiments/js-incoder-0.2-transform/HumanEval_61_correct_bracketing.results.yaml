language: js
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_bracket;\n   \
    \     for(var j = i + 1; j < opening_brackets.length; j++){\n            closing_bracket\
    \ = closing_brackets[j] + closing_bracket;\n        }\n        if(opening_bracket\
    \ != closing_bracket){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0n_j1qzr.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n_j1qzr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \  if(all_opening_brackets.length == 0){\n    return false;\n  }\n  for(var i\
    \ = 0; i < all_opening_brackets.length; i++){\n    if(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length - 1])\n      return false;\n\
    \  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphtdm_s9g.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphtdm_s9g.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar count = 0;\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\
    \t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkzk85ppu.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkzk85ppu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_brackets[(i +\
    \ 1) % opening_brackets.length];\n        if(opening_bracket === closing_bracket){\n\
    \            closing_brackets.push(opening_bracket);\n        }\n    }\n    return\
    \ closing_brackets.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp8y3uvrw.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp8y3uvrw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\t\n\tfor(var i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tif(opening_brackets[i] != closing_brackets[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph9e9ttml.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph9e9ttml.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.trim().length > 0;\n    });\n    return all_opening_brackets_set.length\
    \ == all_opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsxjz6a1m.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsxjz6a1m.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  \n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg8thkb5l.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg8thkb5l.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  var opening_brackets_length = opening_brackets.length;\n  var closing_brackets_length\
    \ = closing_brackets.length;\n  var i;\n  for(i = 0; i < opening_brackets_length;\
    \ i++){\n    if(opening_brackets[i] === closing_brackets[closing_brackets_length\
    \ - 1]){\n      closing_brackets_length--;\n    }\n  }\n  if(opening_brackets_length\
    \ !== closing_brackets_length){\n    return false;\n  }\n  for(i = 0; i < opening_brackets_length;\
    \ i++){\n    if(opening_brackets[i] !== closing_brackets[i]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn79uuaxe.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn79uuaxe.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1779dn91.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1779dn91.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if(opening_brackets[i] === closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx3e44dwg.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpx3e44dwg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if (closing_brackets[i] != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwstrwj6w.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwstrwj6w.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1779dn91.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1779dn91.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfvmkzxgk.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfvmkzxgk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for (var i = 0; i < opening_brackets.length; i++){\n    var opening_bracket\
    \ = opening_brackets[i];\n    var closing_bracket = opening_bracket;\n    if (opening_bracket\
    \ == \"(\"){\n      closing_bracket = \")\";\n    }\n    else if (opening_bracket\
    \ == \")\"){\n      closing_bracket = \"(\";\n    }\n    closing_brackets.push(closing_bracket);\n\
    \  }\n  return closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppczbt277.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppczbt277.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var i;\n    for(i\
    \ = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3c46bam8.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3c46bam8.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.length === brackets.length;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvj22hjtc.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvj22hjtc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprspxvm1f.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprspxvm1f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    for(i =\
    \ 0; i < closing_brackets_length; i++){\n      if(opening_brackets[i] != closing_brackets[i]){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn6dwtlke.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn6dwtlke.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1779dn91.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1779dn91.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"(\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = false;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszg_kz9m.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpszg_kz9m.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var brackets_stack = [];\n  var brackets_open = [];\n  var brackets_close =\
    \ [];\n  brackets_stack.push(brackets);\n  while (brackets_stack.length > 0){\n\
    \    var brackets = brackets_stack.pop();\n    if (brackets.indexOf(\"(\") ==\
    \ -1){\n      brackets_open.push(brackets);\n    }\n    if (brackets.indexOf(\"\
    )\") == -1){\n      brackets_close.push(brackets);\n    }\n  }\n  for (var i =\
    \ 0; i < brackets_open.length; i++){\n    var open_bracket = brackets_open[i];\n\
    \    for (var j = 0; j < brackets_close.length; j++){\n      var close_bracket\
    \ = brackets_close[j];\n      if (open_bracket.indexOf(close_bracket) != -1){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphwq4ovy7.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphwq4ovy7.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar correct_brackets_count = opening_brackets_count + closing_brackets_count;\n\
    \treturn opening_brackets_count == closing_brackets_count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9ovi7npl.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ovi7npl.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg30vf4ab.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg30vf4ab.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closed = true;\n\t\
    for (var i = 0; i < all_opening_brackets; i++) {\n\t\tif (closing_brackets[i]\
    \ != opening_brackets[i]) {\n\t\t\tall_opening_brackets_are_closed = false;\n\t\
    \t}\n\t}\n\treturn all_opening_brackets_are_closed;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvy4otj8z.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvy4otj8z.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t}\n\tclosing_brackets.pop();\n\tfor(var i = 0; i < closing_brackets.length;\
    \ i++){\n\t\tif(opening_brackets[i+1] != closing_brackets[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4b2ml1x.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj4b2ml1x.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz2oi0yh8.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz2oi0yh8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz2oi0yh8.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz2oi0yh8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/[a-z]+/gi);\n\
    \tvar closing_brackets = brackets.match(/[a-z]+/gi);\n\tvar opening_brackets_count\
    \ = opening_brackets.length;\n\tvar closing_brackets_count = closing_brackets.length;\n\
    \tvar correct_bracketing = true;\n\t\n\tfor(var i = 0; i < opening_brackets_count;\
    \ i++){\n\t\tif(opening_brackets[i] !== closing_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkb50rmwy.js:15\n\tvar opening_brackets_count = opening_brackets.length;\n\
    \t                                              ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at correct_bracketing (/tmp/tmpkb50rmwy.js:15:48)\n\
    \    at test (/tmp/tmpkb50rmwy.js:33:20)\n    at Object.<anonymous> (/tmp/tmpkb50rmwy.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_brackets = all_opening_brackets\
    \ == all_closing_brackets;\n\tvar all_opening_brackets_are_opening = all_opening_brackets\
    \ == opening_brackets.length;\n\tvar all_closing_brackets_are_closing = all_closing_brackets\
    \ == closing_brackets.length;\n\tvar all_opening_brackets_are_open = all_opening_brackets_are_brackets\
    \ || all_opening_brackets_are_opening;\n\tvar all_closing_brackets_are_closed\
    \ = all_closing_brackets_are_brackets || all_closing_brackets_are_closing;\n\t\
    var all_opening_brackets_are_close = all_opening_brackets_are_closing || all_opening_brackets_are_opening;\n\
    \tvar all_closing_brackets_are_open = all_closing_brackets_are_opening || all_closing_brackets_are_closing;\n\
    \tvar all_opening_brackets_are_all = all_opening_brackets_are_open && all_closing_brackets_are_close;\n\
    \tvar all_closing_brackets_are_all = all_opening_brackets_are_close && all_closing_brackets_are_open;\n\
    \tvar all_opening_brackets_are_not_all = all_opening_brackets_are_open && !all_closing_brackets_are_close;\n\
    \tvar all_closing_brackets_are_not_all = all_opening_brackets_are_close && !all_closing_brackets_are_open;\n\
    \tvar all_opening_brackets_are_not_all = all_opening_brackets_are_open && !all_closing_brackets_are_open;\n\
    \tvar all_closing_brackets_are_not_all = all_opening_brackets_are_close && !all_closing_brackets_are_close;\n\
    \tvar all_opening_brackets_are_not_all = all_opening_brackets_are_open && !all_closing_brackets_are_close;\n\
    \tvar all_closing_brackets_are_not_all = all_opening_brackets_are_close && !all_closing_brackets_are_open;\n\
    \tvar all_opening_brackets_are_not_all_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdrd2psmj.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar count = 0;\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\
    \t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\t\n\treturn count == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp003yheht.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp003yheht.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i+1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0dat9b5o.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dat9b5o.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyyw33x6m.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyw33x6m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i=0; i<opening_brackets.length; i++){\n\t\tvar opening_bracket = opening_brackets[i];\n\
    \t\tvar closing_bracket = opening_bracket;\n\t\tif(i<opening_brackets.length-1){\n\
    \t\t\tclosing_bracket = opening_brackets[i+1];\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\treturn (opening_brackets.length == closing_brackets.length);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpii1hbalf.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpii1hbalf.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\tvar i;\n\tfor(i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tif(opening_brackets[i] !== closing_brackets[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi47vz6mm.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi47vz6mm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var correct_bracketing = true;\n    for(var i=0;\
    \ i<opening_brackets.length; i++){\n        if(closing_brackets[i] != opening_brackets[i]){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxfoe0o4s.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxfoe0o4s.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/[a-z]+/gi);\n\
    \tvar closing_brackets = brackets.match(/[a-z]+/gi);\n\tvar opening_brackets_count\
    \ = opening_brackets.length;\n\tvar closing_brackets_count = closing_brackets.length;\n\
    \tvar correct_bracketing = false;\n\t\n\tfor(var i = 0; i < opening_brackets_count;\
    \ i++){\n\t\tfor(var j = 0; j < closing_brackets_count; j++){\n\t\t\tif(opening_brackets[i]\
    \ == closing_brackets[j]){\n\t\t\t\tcorrect_bracketing = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbmug2yj8.js:15\n\tvar opening_brackets_count = opening_brackets.length;\n\
    \t                                              ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at correct_bracketing (/tmp/tmpbmug2yj8.js:15:48)\n\
    \    at test (/tmp/tmpbmug2yj8.js:35:20)\n    at Object.<anonymous> (/tmp/tmpbmug2yj8.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.length === brackets.length;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvj22hjtc.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvj22hjtc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar i;\n\tvar opening_brackets_length = opening_brackets.length;\n\t\
    var closing_brackets_length = closing_brackets.length;\n\tvar opening_brackets_counter\
    \ = 0;\n\tvar closing_brackets_counter = 0;\n\t\n\tfor(i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tif(opening_brackets_counter < closing_brackets_length){\n\t\t\tif(opening_brackets[i]\
    \ === closing_brackets[opening_brackets_counter]){\n\t\t\t\topening_brackets_counter++;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyp5ymlg9.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyp5ymlg9.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \t\n\tfor(var i=0; i<opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t\t\n\t\tfor(var j=i+1; j<opening_brackets.length; j++){\n\t\t\tclosing_brackets.push(opening_brackets[j]);\n\
    \t\t}\n\t}\n\t\n\treturn (opening_brackets.length == closing_brackets.length);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8v1h0_sv.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8v1h0_sv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n  var all_opening_brackets_are_closed = all_opening_brackets == all_closing_brackets;\n\
    \  return all_opening_brackets_are_closed;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3bikb149.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3bikb149.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"(\");\n  var closing_brackets = brackets.split(\"\
    )\");\n  var correct_bracketing = true;\n  for(var i=0; i<opening_brackets.length;\
    \ i++){\n    if(opening_brackets[i].length != closing_brackets[i].length){\n \
    \     correct_bracketing = false;\n      break;\n    }\n  }\n  return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp422m0u_c.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp422m0u_c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_bracket;\n    if(opening_bracket == \"(\"){\n\
    \      closing_bracket = \")\";\n    }\n    else if(opening_bracket == \"[\"){\n\
    \      closing_bracket = \"]\";\n    }\n    else if(opening_bracket == \"{\"){\n\
    \      closing_bracket = \"}\";\n    }\n    else if(opening_bracket == \"<\"){\n\
    \      closing_bracket = \">\";\n    }\n    else if(opening_bracket == \"%\"){\n\
    \      closing_bracket = \"%\";\n    }\n    else if(opening_bracket == \"+\"){\n\
    \      closing_bracket = \"+\";\n    }\n    else if(opening_bracket == \"-\"){\n\
    \      closing_bracket = \"-\";\n    }\n    else if(opening_bracket == \"/\"){\n\
    \      closing_bracket = \"/\";\n    }\n    else if(opening_bracket == \"*\"){\n\
    \      closing_bracket = \"*\";\n    }\n    else if(opening_bracket == \"^\"){\n\
    \      closing_bracket = \"^\";\n    }\n    else if(opening_bracket == \"%\"){\n\
    \      closing_bracket = \"%\";\n    }\n    else if(opening_bracket == \"~\"){\n\
    \      closing_bracket = \"~\";\n    }\n    else if(opening_bracket == \"&\"){\n\
    \      closing_bracket = \"&\";\n    }\n    else if(opening_bracket == \"|\"){\n\
    \      closing_bracket = \"|\";\n    }\n    else if(opening_bracket == \"<\"){\n\
    \      closing_bracket = \"<\";\n    }\n    else if(opening_bracket == \">\"){\n\
    \      closing_bracket = \">\";\n    }\n    else if(opening_bracket == \"=\"){\
    \ //this one is weird\n      closing_bracket = \"=\";\n    }\n    else if(opening_bracket\
    \ == \"/\"){\n      closing_bracket = \"/\";\n    }\n    else if(opening_bracket\
    \ == \"%\"){\n      closing_bracket = \"%\";\n    }\n    else if(opening_bracket\
    \ == \"+\"){\n      closing_bracket = \"+\";\n    }\n    \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm0oi9778.js:97\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_brackets = false;\n\t\n\tfor(var i\
    \ = 0; i < all_opening_brackets; i++){\n\t\tfor(var j = 0; j < all_closing_brackets;\
    \ j++){\n\t\t\tif(i == j){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(brackets.charAt(i)\
    \ == brackets.charAt(j)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(brackets.charAt(i)\
    \ == \")\" && brackets.charAt(j) == \")\"){\n\t\t\t\tcorrect_brackets = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(brackets.charAt(i) == \"(\" && brackets.charAt(j)\
    \ == \")\"){\n\t\t\t\tcorrect_brackets = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn correct_brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw47754ly.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpw47754ly.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1779dn91.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1779dn91.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"(\"){\n\t\t\tif(brackets[i+1] !== \"(\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse if(brackets[i] === \")\"){\n\t\t\tif(brackets[i-1]\
    \ !== \"(\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpctot80_1.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpctot80_1.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket =\
    \ opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\tif(i +\
    \ 1 < opening_brackets.length){\n\t\t\tclosing_bracket = opening_brackets[i +\
    \ 1];\n\t\t}\n\t\tif(opening_bracket != closing_bracket){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbmjlqwh2.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbmjlqwh2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ === \"(\"){\n\t\t\tif (opening_brackets[i+1] !== \"(\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"[\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"[\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"{\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"{\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"<\"){\n\t\t\tif (opening_brackets[i+1] !== \"<\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"%\"){\n\t\t\tif (opening_brackets[i+1] !== \"%\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"+\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"+\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"-\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"-\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"*\"){\n\t\t\tif (opening_brackets[i+1] !== \"*\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"/\"){\n\t\t\tif (opening_brackets[i+1] !== \"/\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"^\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"^\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"~\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"~\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"&\"){\n\t\t\tif (opening_brackets[i+1] !== \"&\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"|\"){\n\t\t\tif (opening_brackets[i+1] !== \"|\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"!\"){\n\t\t\
    \tif (\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl6su5b6a.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var i;\n    for(i\
    \ = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjdkcp3xb.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjdkcp3xb.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar\
    \ closing_brackets_length = closing_brackets.length;\n\tvar correct_bracketing\
    \ = false;\n\t\n\tfor(var i = 0; i < opening_brackets_length; i++){\n\t\tif(opening_brackets[i]\
    \ === closing_brackets[i]){\n\t\t\tcorrect_bracketing = true;\n\t\t\tbreak;\n\t\
    \t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgpevjlye.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgpevjlye.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n\treturn (all_opening_brackets == all_closing_brackets);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdj9s1vm5.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdj9s1vm5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(item){\n\
    \        return item !== undefined;\n    });\n    return all_opening_brackets_set.length\
    \ === 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmib7y73i.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmib7y73i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar correct = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(i == opening_brackets.length - 1){\n\t\t\tcorrect = correct &&\
    \ closing_brackets[i] != null;\n\t\t}else{\n\t\t\tcorrect = correct && closing_brackets[i\
    \ + 1] != null;\n\t\t}\n\t}\n\t\n\treturn correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpge0avcsl.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpge0avcsl.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i=0; i<opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ === closing_brackets[i]){\n      opening_brackets.splice(i, 1);\n      closing_brackets.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  return opening_brackets.length === 0;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp320qwltk.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp320qwltk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\tvar opening_brackets_count\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tvar closing_brackets_count\
    \ = closing_brackets ? closing_brackets.length : 0;\n\tvar all_opening_brackets_count\
    \ = opening_brackets_count + closing_brackets_count;\n\treturn (opening_brackets_count\
    \ == closing_brackets_count);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu5fljjzf.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpu5fljjzf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar correct = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect =\
    \ false;\n\t\t}\n\t}\n\treturn correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphqnphwoh.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphqnphwoh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\t\n\tfor(var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqpp_m5pv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqpp_m5pv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i=0; i<brackets.length; i++){\n\t\
    \tvar opening = brackets[i];\n\t\tvar closing = brackets[i+1];\n\t\tif(opening\
    \ === closing){\n\t\t\tbrackets.splice(i+2, 1);\n\t\t}\n\t}\n\treturn brackets.join(\"\
    \") === \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8kvutch2.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8kvutch2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var brackets_stack = [];\n  var opening_brackets = brackets.split(\"\");\n\
    \  for (var i = 0; i < opening_brackets.length; i++){\n    if (opening_brackets[i]\
    \ == \"(\"){\n      brackets_stack.push(\"(\");\n    }\n    else if (opening_brackets[i]\
    \ == \")\"){\n      if (brackets_stack.length == 0){\n        return false;\n\
    \      }\n      else if (brackets_stack[brackets_stack.length-1] == \"(\"){\n\
    \        brackets_stack.pop();\n      }\n    }\n  }\n  return brackets_stack.length\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\t\n\tfor(var i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tif(closing_brackets_length == i){\n\t\t\treturn true;\n\t\t}\n\t\t\
    else if(opening_brackets[i] != closing_brackets[closing_brackets_length-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxxv9afx1.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxxv9afx1.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyyw33x6m.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyw33x6m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ != \")\"){\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpywgpgguu.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpywgpgguu.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_bracket;\n   \
    \     if(opening_bracket == \"(\"){\n            closing_bracket = \")\";\n  \
    \      }\n        else if(opening_bracket == \"[\"){\n            closing_bracket\
    \ = \"]\";\n        }\n        else if(opening_bracket == \"{\"){\n          \
    \  closing_bracket = \"}\";\n        }\n        closing_brackets.push(closing_bracket);\n\
    \    }\n    return closing_brackets.join(\",\") === brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf8yg2b8g.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf8yg2b8g.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n  return all_opening_brackets == all_closing_brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptg4g62ki.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptg4g62ki.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var correct_bracketing\
    \ = true;\n    \n    for(var i = 0; i < opening_brackets_length; i++){\n     \
    \   if(opening_brackets[i] != closing_brackets[i]){\n            correct_bracketing\
    \ = false;\n            break;\n        }\n    }\n    \n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph11vji1_.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph11vji1_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ === closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz16_j0tg.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz16_j0tg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ === closing_brackets[opening_brackets_length - i]){\n        opening_brackets_length--;\n\
    \      }\n    }\n    return opening_brackets_length === 0;\n  }\n  return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf4twcl2h.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf4twcl2h.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"(\"){\n            closing_brackets.push(\")\");\n        }\n        else\
    \ if(opening_brackets[i] == \")\"){\n            closing_brackets.push(\"(\");\n\
    \        }\n    }\n    return closing_brackets.length == opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbhjrkuxi.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbhjrkuxi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var all_opening_brackets_count = opening_brackets_count\
    \ + closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\n    var all_closing_brackets_count_correct = closing_brackets_count\
    \ === 0;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === closing_brackets_count;\n    var all_opening_brackets_count_correct = opening_brackets_count\
    \ === 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8f8jupbc.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.filter(function(x){return x!=\"(\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\")\";});\n\tbrackets = brackets.filter(function(x){return x!=\"[\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\"]\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\"{\";});\n\tbrackets = brackets.filter(function(x){return x!=\"}\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\"<\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\">\";});\n\tbrackets = brackets.filter(function(x){return x!=\":\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\".\";});\n\tbrackets = brackets.filter(function(x){return x!=\":\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\":\";});\n\tbrackets = brackets.filter(function(x){return x!=\";\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\";\";});\n\tbrackets = brackets.filter(function(x){return x!=\";\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\";\";});\n\tbrackets = brackets.filter(function(x){return x!=\";\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\";\";});\n\tbrackets = brackets.filter(function(x){return x!=\";\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\";\";});\n\tbrackets = brackets.filter(function(x){return x!=\";\";});\n\
    \tbrackets = brackets.filter(function(x){return x!=\";\";});\n\tbrackets = brackets.filter(function(x){return\
    \ x!=\";\";});\n\tbrackets = brackets.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpygk6wctv.js:44\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i = 0;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm940vpip.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm940vpip.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var count = 0;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n           \
    \ count++;\n        }\n    }\n    return count == opening_brackets.length;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2aebpv_.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph2aebpv_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n  var all_opening_brackets_count = all_opening_brackets ? all_opening_brackets.length\
    \ : 0;\n  var all_closing_brackets_count = all_closing_brackets ? all_closing_brackets.length\
    \ : 0;\n  var all_opening_brackets_count_correct = all_opening_brackets_count\
    \ === all_closing_brackets_count;\n  var all_opening_brackets_count_correct =\
    \ all_opening_brackets_count_correct && all_opening_brackets_count === all_opening_brackets_count_correct;\n\
    \  return all_opening_brackets_count_correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1pv54mjy.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1pv54mjy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.concat(opening_brackets);\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\n\tvar all_opening_brackets_set = all_opening_brackets.sort();\n\
    \tvar all_closing_brackets_set = all_closing_brackets.sort();\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length = all_closing_brackets_set.length;\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.concat(all_closing_brackets_set);\n\
    \tvar all_opening_brackets_length = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets_set.length;\n\tvar all_opening_brackets_set = all_opening_brackets_set.sort();\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.sort();\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length = all_closing_brackets_set.length;\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.concat(all_closing_brackets_set);\n\
    \tvar all_opening_brackets_length = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets_set.length;\n\tvar all_opening_brackets_set = all_opening_brackets_set.sort();\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.sort();\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length = all_closing_brackets_set.length;\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.concat(all_closing_brackets_set);\n\
    \tvar all_opening_brackets_length = all_opening_brackets_set.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets_set.length;\n\tvar \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7794qzm0.js:40\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse().join(\"\");\n\tvar opening_brackets_length = opening_brackets.length;\n\
    \tvar closing_brackets_length = closing_brackets.length;\n\t\n\tfor (var i = 0;\
    \ i < opening_brackets_length; i++){\n\t\tif (opening_brackets[i] !== closing_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpojn7gkm1.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpojn7gkm1.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpri1ux8ub.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpri1ux8ub.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar correct_bracketing_count = 0;\n\t\n\tfor(var i = 0; i < opening_brackets_count;\
    \ i++){\n\t\tvar opening_bracket = opening_brackets[i];\n\t\tvar closing_bracket\
    \ = closing_brackets[i];\n\t\t\n\t\tif(opening_bracket === closing_bracket){\n\
    \t\t\tcorrect_bracketing_count++;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing_count\
    \ === opening_brackets_count && correct_bracketing_count === closing_brackets_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf69d9_yv.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf69d9_yv.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyyw33x6m.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyw33x6m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar correct = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect =\
    \ false;\n\t\t}\n\t}\n\t\n\treturn correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyiaj7h8c.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyiaj7h8c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tfor(var i = 0; i < all_opening_brackets.length; i++){\n\t\tif(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length - 1])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp12qdrf32.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp12qdrf32.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tvar opening = brackets[i];\n\t\tvar closing = brackets[(i+1)%brackets.length];\n\
    \t\tif(opening != closing){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpletjl1xc.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpletjl1xc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar found;\n\
    \t\n\tfor(i = 0; i < opening_brackets_length; i++){\n\t\tfound = false;\n\t\t\
    for(j = 0; j < closing_brackets_length; j++){\n\t\t\tif(opening_brackets[i] ==\
    \ closing_brackets[j]){\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif(!found){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmu3bhygi.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmu3bhygi.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"(\");\n  var closing_brackets = brackets.split(\"\
    )\");\n  var opening_brackets_length = opening_brackets.length;\n  var closing_brackets_length\
    \ = closing_brackets.length;\n  for(var i = 0; i < opening_brackets_length; i++){\n\
    \    if(opening_brackets[i] === closing_brackets[closing_brackets_length-1]){\n\
    \      closing_brackets_length--;\n    }\n  }\n  if(opening_brackets_length !=\
    \ closing_brackets_length){\n    return false;\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprfaasuyr.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprfaasuyr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closed = false;\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets; i++){\n\t\tif(closing_brackets[i]\
    \ != null){\n\t\t\tall_opening_brackets_are_closed = true;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\t\n\treturn all_opening_brackets_are_closed;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp39_shar6.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp39_shar6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets.length;\n  var all_closing_brackets\
    \ = closing_brackets.length;\n  var correct_bracketing = false;\n  for(var i =\
    \ 0; i < all_opening_brackets; i++){\n    if(opening_brackets[i] != closing_brackets[i]){\n\
    \      correct_bracketing = false;\n      break;\n    }else{\n      correct_bracketing\
    \ = true;\n    }\n  }\n  return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphxy9zqjl.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphxy9zqjl.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_bracketing = false;\n\t\n\tfor(var\
    \ i = 0; i < all_opening_brackets; i++){\n\t\tfor(var j = 0; j < all_closing_brackets;\
    \ j++){\n\t\t\tif(i == j){\n\t\t\t\tcorrect_bracketing = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5ksqffd7.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5ksqffd7.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ == \"(\"){\n\t\t\tclosing_brackets.push(\")\");\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ == \")\"){\n\t\t\tclosing_brackets.push(\"(\");\n\t\t}\n\t}\n\treturn (closing_brackets.length\
    \ == opening_brackets.length);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72ry0c34.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72ry0c34.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\t\n\t\
    \tif(opening_bracket == \"(\"){\n\t\t\tclosing_bracket = \")\";\n\t\t}\n\t\telse\
    \ if(opening_bracket == \")\"){\n\t\t\tclosing_bracket = \"(\";\n\t\t}\n\t\t\n\
    \t\tclosing_brackets.push(closing_bracket);\n\t}\n\t\n\treturn closing_brackets.join(\"\
    ,\") === brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_kwq4uhr.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_kwq4uhr.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\treturn opening_brackets_count == closing_brackets_count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphpb6vscx.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphpb6vscx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var i;\n    var\
    \ j;\n    var brackets_are_correct = true;\n    for(i = 0; i < opening_brackets_length;\
    \ i++){\n        for(j = 0; j < closing_brackets_length; j++){\n            if(opening_brackets[i]\
    \ != closing_brackets[j]){\n                brackets_are_correct = false;\n  \
    \          }\n        }\n    }\n    return brackets_are_correct;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp5r_iu1m.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp5r_iu1m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvp85rgju.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvp85rgju.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets == null || closing_brackets == null){\n    return\
    \ false;\n  }\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7z53oc1j.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7z53oc1j.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var opening_brackets_length = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var closing_brackets_length = closing_brackets ? closing_brackets.length\
    \ : 0;\n  var correct_bracketing = false;\n  \n  if(opening_brackets_length ==\
    \ closing_brackets_length){\n    correct_bracketing = true;\n  }\n  \n  return\
    \ correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpunbz2lym.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpunbz2lym.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ === \"(\"){\n\t\t\tif (opening_brackets[i+1] !== \"(\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i] === \"[\"){\n\t\t\tif\
    \ (opening_brackets[i+1] !== \"[\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\
    \t}\n\t\t}\n\t\tif (opening_brackets[i] === \"{\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"{\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i]\
    \ === \"<\"){\n\t\t\tif (opening_brackets[i+1] !== \"<\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i] === \"%\"){\n\t\t\tif\
    \ (opening_brackets[i+1] !== \"%\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\
    \t}\n\t\t}\n\t\tif (opening_brackets[i] === \"+\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"+\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i]\
    \ === \"-\"){\n\t\t\tif (opening_brackets[i+1] !== \"-\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i] === \"/\"){\n\t\t\tif\
    \ (opening_brackets[i+1] !== \"/\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\
    \t}\n\t\t}\n\t\tif (opening_brackets[i] === \"^\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"^\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i]\
    \ === \"~\"){\n\t\t\tif (opening_brackets[i+1] !== \"~\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i] === \"|\"){\n\t\t\tif\
    \ (opening_brackets[i+1] !== \"|\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\
    \t}\n\t\t}\n\t\tif (opening_brackets[i] === \"&\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"&\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i]\
    \ === \"!\"){\n\t\t\tif (opening_brackets[i+1] !== \"!\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets[i] === \"<\"){\n\t\t\tif\
    \ (opening_brackets[i+1] !== \"<\"){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5t9kao2d.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_bracketing = false;\n\t\n\tfor(var\
    \ i = 0; i < all_opening_brackets; i++){\n\t\tfor(var j = 0; j < all_closing_brackets;\
    \ j++){\n\t\t\tif(i == j){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(brackets.charAt(i)\
    \ == brackets.charAt(j)){\n\t\t\t\tcorrect_bracketing = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqppqevkk.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqppqevkk.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar open_brackets = brackets.match(/\\\
    (/g);\n\tvar closed_brackets = brackets.match(/\\)/g);\n\tvar open_brackets_count\
    \ = open_brackets ? open_brackets.length : 0;\n\tvar closed_brackets_count = closed_brackets\
    \ ? closed_brackets.length : 0;\n\tvar all_open_brackets_count = open_brackets_count\
    \ + closed_brackets_count;\n\treturn (open_brackets_count == closed_brackets_count);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4v1d3aqn.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4v1d3aqn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tfor(var j\
    \ = 0; j < closing_brackets.length; j++){\n\t\t\tif(opening_brackets[i] == closing_brackets[j]){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5e78logz.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5e78logz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var correct_bracketing = true;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === \"(\"){\n            closing_brackets.push(\"\
    )\");\n        }\n        else if(opening_brackets[i] === \"[\"){\n          \
    \  closing_brackets.push(\"]\");\n        }\n        else if(opening_brackets[i]\
    \ === \"{\"){\n            closing_brackets.push(\"}\");\n        }\n        else\
    \ if(opening_brackets[i] === \"<\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] === \"/\"){\n            closing_brackets.push(\"\
    /\");\n        }\n        else if(opening_brackets[i] === \"+\"){\n          \
    \  closing_brackets.push(\"+\");\n        }\n        else if(opening_brackets[i]\
    \ === \"-\"){\n            closing_brackets.push(\"-\");\n        }\n        else\
    \ if(opening_brackets[i] === \"*\"){\n            closing_brackets.push(\"*\"\
    );\n        }\n        else if(opening_brackets[i] === \"%\"){\n            closing_brackets.push(\"\
    %\");\n        }\n        else if(opening_brackets[i] === \"!\"){\n          \
    \  closing_brackets.push(\"!\");\n        }\n        else if(opening_brackets[i]\
    \ === \"?\"){\n            closing_brackets.push(\"?\");\n        }\n        else\
    \ if(opening_brackets[i] === \"|\"){\n            closing_brackets.push(\"|\"\
    );\n        }\n        else if(opening_brackets[i] === \"^\"){\n            closing_brackets.push(\"\
    ^\");\n        }\n        else if(opening_brackets[i] === \"~\"){\n          \
    \  closing_brackets.push(\"~\");\n        }\n        else if(opening_brackets[i]\
    \ === \"&\"){\n            closing_brackets.push(\"&\");\n        }\n        else\
    \ if(opening_brackets[i] === \"<\"){\n            closing_brackets.push(\"<<\"\
    );\n        }\n        else if(opening_brackets[i] === \"=\"){\n            closing_brackets.push(\"\
    =\");\n        }\n        else if(opening_brackets[i] === \">\"){\n          \
    \  closing_brackets.push(\">>\");\n        }\n        else if(opening_brackets[i]\
    \ === \"/\"){\n            closing_brackets.push(\"/\");\n        }\n        else\
    \ if(opening_brackets[i] === \"+\"){\n            closing_b\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppvzcxwqb.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_count\
    \ = opening_brackets.length;\n    var closing_brackets_count = closing_brackets.length;\n\
    \    var count = 0;\n    for(var i = 0; i < opening_brackets_count; i++){\n  \
    \    if(opening_brackets[i] === closing_brackets[i]){\n        count++;\n    \
    \  }\n    }\n    return count === opening_brackets_count;\n  }\n  return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1rmzrke5.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1rmzrke5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === \")\"){\n\t\t\tvar opening_brackets_length = opening_brackets.length;\n\t\
    \t\tvar opening_brackets_index = i;\n\t\t\tfor(var j = opening_brackets_index\
    \ + 1; j < opening_brackets_length; j++){\n\t\t\t\tif(opening_brackets[j] ===\
    \ \")\"){\n\t\t\t\t\topening_brackets_index++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t\tif(!opening_brackets_index){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptywwmt18.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptywwmt18.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor(var i=0; i<opening_brackets.length; i++){\n\t\tvar opening_bracket = opening_brackets[i];\n\
    \t\tvar closing_bracket = opening_brackets[(i+1)%opening_brackets.length];\n\t\
    \tif(opening_bracket != closing_bracket){\n\t\t\tcorrect_bracketing = false;\n\
    \t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm84jf0wz.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm84jf0wz.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  var correct_bracketing = true;\n  for(var i=0; i<opening_brackets.length; i++){\n\
    \    if(opening_brackets[i].length != closing_brackets[i].length){\n      correct_bracketing\
    \ = false;\n      break;\n    }\n  }\n  return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph4wk9h0t.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph4wk9h0t.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n  var correct_brackets = all_opening_brackets == all_closing_brackets;\n\
    \  return correct_brackets;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnxnvprp3.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxnvprp3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var opening_brackets_length = opening_brackets.length;\n    var i;\n\
    \    for(i = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i]\
    \ == \"(\"){\n            closing_brackets.push(\")\");\n        }\n        else\
    \ if(opening_brackets[i] == \")\"){\n            closing_brackets.push(\"(\");\n\
    \        }\n    }\n    var opening_brackets_length = closing_brackets.length;\n\
    \    var j;\n    for(j = 0; j < opening_brackets_length; j++){\n        if(closing_brackets[j]\
    \ != opening_brackets[j]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpudtp0u0h.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpudtp0u0h.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz2oi0yh8.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz2oi0yh8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar correct_bracketing = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(opening_brackets[i] != closing_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpks3e20tm.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpks3e20tm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket =\
    \ opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\twhile(opening_bracket\
    \ == closing_bracket){\n\t\t\tclosing_bracket = opening_brackets[++i];\n\t\t}\n\
    \t\tclosing_brackets.push(closing_bracket);\n\t}\n\treturn closing_brackets.length\
    \ == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7rouv0wa.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7rouv0wa.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_length = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_length = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing = false;\n    \n\
    \    if(opening_brackets_length == closing_brackets_length){\n        correct_bracketing\
    \ = true;\n    }\n    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcr76ruao.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcr76ruao.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  var count = 0;\n  for (var i = 0; i < opening_brackets.length; i++){\n    if\
    \ (closing_brackets[i] === opening_brackets[i]){\n      count++;\n    }\n  }\n\
    \  return count === opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpacdgpqg4.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpacdgpqg4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar correct_bracketing = false;\n\t\n\tfor(var i = 0; i < opening_brackets_count;\
    \ i++){\n\t\tif(opening_brackets[i] != closing_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t}else{\n\t\t\tcorrect_bracketing = true;\n\t\t}\n\t}\n\treturn\
    \ correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbi4al348.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbi4al348.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \t\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ == \"(\"){\n\t\t\tclosing_brackets.push(\")\");\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ == \")\"){\n\t\t\tclosing_brackets.push(\"(\");\n\t\t}\n\t}\n\t\n\treturn (closing_brackets.length\
    \ == opening_brackets.length);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcwujoye0.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcwujoye0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var i;\n    var\
    \ j;\n    var k;\n    var l;\n    var found;\n    for(i = 0; i < opening_brackets_length;\
    \ i++){\n        found = false;\n        for(j = 0; j < closing_brackets_length;\
    \ j++){\n            if(opening_brackets[i] == closing_brackets[j]){\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if(!found){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptem3a4qc.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptem3a4qc.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar correct_bracketing = true;\n\t\n\tfor (var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif (opening_brackets[i] != closing_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpao3ynef2.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpao3ynef2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    return opening_brackets.length\
    \ == closing_brackets.length;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdadiai2q.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdadiai2q.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \")\"){\n            closing_brackets.push(\")\");\n        }\n        else\
    \ if(opening_brackets[i] === \"(\"){\n            closing_brackets.push(\")\"\
    );\n        }\n        else if(opening_brackets[i] === \"[\"){\n            closing_brackets.push(\"\
    ]\");\n        }\n        else if(opening_brackets[i] === \"{\"){\n          \
    \  closing_brackets.push(\"}\");\n        }\n    }\n    return closing_brackets.every(function(bracket){\n\
    \        return brackets.indexOf(bracket) === brackets.lastIndexOf(bracket);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjq3_mvo5.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjq3_mvo5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ == \"(\"){\n\t\t\tclosing_brackets.push(\")\");\n\t\t}\n\t\telse if(opening_brackets[i]\
    \ == \")\"){\n\t\t\tclosing_brackets.push(\"(\");\n\t\t}\n\t}\n\treturn closing_brackets.length\
    \ == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpug4m6a90.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpug4m6a90.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_brackets_count = opening_brackets_count\
    \ + closing_brackets_count;\n    return opening_brackets_count == closing_brackets_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphkg4_ch4.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphkg4_ch4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var open_brackets = brackets.match(/\\(/g);\n    var closed_brackets = brackets.match(/\\\
    )/g);\n    var open_brackets_count = open_brackets ? open_brackets.length : 0;\n\
    \    var closed_brackets_count = closed_brackets ? closed_brackets.length : 0;\n\
    \    var all_open_brackets_count = open_brackets_count + closed_brackets_count;\n\
    \    return all_open_brackets_count === open_brackets_count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpibcojn2n.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpibcojn2n.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\tvar opening_brackets_count\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tvar closing_brackets_count\
    \ = closing_brackets ? closing_brackets.length : 0;\n\tvar all_opening_brackets_count\
    \ = opening_brackets_count + closing_brackets_count;\n\treturn (all_opening_brackets_count\
    \ == opening_brackets_count + 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprootxb5p.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprootxb5p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closing_brackets\
    \ = all_opening_brackets == all_closing_brackets;\n\tvar all_opening_brackets_are_opening_brackets\
    \ = all_opening_brackets == 0;\n\tvar all_closing_brackets_are_opening_brackets\
    \ = all_closing_brackets == 0;\n\tvar all_opening_brackets_are_closing_brackets_or_opening_brackets\
    \ = all_opening_brackets_are_closing_brackets || all_opening_brackets_are_opening_brackets;\n\
    \tvar all_opening_brackets_are_opening_brackets_or_closing_brackets = all_opening_brackets_are_opening_brackets\
    \ || all_closing_brackets_are_opening_brackets;\n\tvar all_opening_brackets_are_opening_brackets_or_opening_brackets_or_closing_brackets\
    \ = all_opening_brackets_are_opening_brackets_or_closing_brackets || all_opening_brackets_are_opening_brackets_or_opening_brackets_are_closing_brackets;\n\
    \tvar all_opening_brackets_are_opening_brackets_or_opening_brackets_or_opening_brackets_or_closing_brackets\
    \ = all_opening_brackets_are_opening_brackets_or_opening_brackets_or_opening_brackets_or_closing_brackets\
    \ || all_opening_brackets_are_opening_brackets_or_opening_brackets_or_opening_brackets_or_opening_brackets_are_closing_brackets;\n\
    \tvar all_opening_brackets_are_opening_brackets_or_opening_brackets_or_opening_brackets_or_opening_brackets_or_closing_brackets\
    \ = all_opening_brackets_are_opening_brackets_or_opening_brackets_or_opening_brackets_or_opening_brackets_or_opening_brackets_or_closing_brackets;\n\
    \tvar all_opening_b\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5i98e6p6.js:44\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tvar opening_brackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket === \"(\" || bracket === \"[\";\n\t});\n\tvar closing_brackets\
    \ = brackets.filter(function(bracket){\n\t\treturn bracket === \")\" || bracket\
    \ === \"]\";\n\t});\n\treturn opening_brackets.length === closing_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7v3yvh7g.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7v3yvh7g.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing_count = opening_brackets_count\
    \ - closing_brackets_count;\n    return correct_bracketing_count === 0;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdqit5e_l.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdqit5e_l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(val){\n\t\
    \treturn val != \"\";\n\t});\n\treturn all_opening_brackets_set.length == all_opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpinjinulz.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpinjinulz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz2oi0yh8.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz2oi0yh8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_count\
    \ = opening_brackets.length;\n    var closing_brackets_count = closing_brackets.length;\n\
    \    var count = 0;\n    for(var i = 0; i < opening_brackets_count; i++){\n  \
    \    if(opening_brackets[i] === closing_brackets[i]){\n        count++;\n    \
    \  }\n    }\n    return count === opening_brackets_count;\n  }\n  return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1rmzrke5.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1rmzrke5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing = true;\n    \n \
    \   if(opening_brackets_count != closing_brackets_count){\n        correct_bracketing\
    \ = false;\n    }\n    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsbu7_htb.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsbu7_htb.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplcp342o3.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplcp342o3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar correct = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect =\
    \ false;\n\t\t}\n\t}\n\t\n\treturn correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyiaj7h8c.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyiaj7h8c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpri1ux8ub.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpri1ux8ub.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    for(var i = 0;\
    \ i < opening_brackets_length; i++){\n        if(closing_brackets_length == opening_brackets_length){\n\
    \            return true;\n        }\n        else if(closing_brackets_length\
    \ < opening_brackets_length){\n            return false;\n        }\n        else\
    \ if(opening_brackets[i] != closing_brackets[closing_brackets_length - opening_brackets_length\
    \ + i]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_aapmnxm.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_aapmnxm.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyyw33x6m.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyw33x6m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  var all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n  return all_opening_brackets == all_closing_brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptg4g62ki.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptg4g62ki.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ == \"(\"){\n\t\t\tclosing_brackets.push(\")\");\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ == \")\"){\n\t\t\tclosing_brackets.push(\"(\");\n\t\t}\n\t}\n\treturn closing_brackets.join(\"\
    \") == brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxsqur4ro.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxsqur4ro.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\t\n\tfor(var i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tfor(var j = 0; j < closing_brackets_length; j++){\n\t\t\tif(opening_brackets[i]\
    \ == closing_brackets[j]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy22fxack.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy22fxack.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_closing_brackets = closing_brackets.concat(opening_brackets);\n\tvar\
    \ all_opening_brackets_set = all_opening_brackets.sort();\n\tvar all_closing_brackets_set\
    \ = all_closing_brackets.sort();\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item == all_opening_brackets_set[index+1];\n\t});\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item == all_closing_brackets_set[index+1];\n\t});\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_opening_brackets_set[index+1];\n\t});\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_closing_brackets_set[index+1];\n\t});\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_opening_brackets_set[index+1];\n\t});\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_closing_brackets_set[index+1];\n\t});\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_opening_brackets_set[index+1];\n\t});\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_closing_brackets_set[index+1];\n\t});\n\
    \tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_opening_brackets_set[index+1];\n\t});\n\
    \tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(item,\
    \ index, arr){\n\t\treturn item != all_closing_brackets_set[index+1];\n\t});\n\
    \tvar all_opening_brackets_set = all_open\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4mbxj64f.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1779dn91.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1779dn91.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets ?\
    \ opening_brackets.length : 0;\n    var all_closing_brackets = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_brackets = all_opening_brackets\
    \ === all_closing_brackets;\n    return correct_brackets;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphy788tkw.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphy788tkw.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var correct = true;\n    \n    for(var i = 0;\
    \ i < opening_brackets.length; i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n\
    \            correct = false;\n        }\n    }\n    \n    return correct;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprb7uf_im.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprb7uf_im.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_brackets = all_opening_brackets + all_closing_brackets;\n\t\
    return all_brackets == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn1h43dlx.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn1h43dlx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var correct = true;\n    \n    for(var i = 0;\
    \ i < opening_brackets.length; i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n\
    \            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzv0neuyy.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv0neuyy.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse().join(\"\");\n\tvar opening_brackets_length = opening_brackets.length;\n\
    \tvar closing_brackets_length = closing_brackets.length;\n\tvar i;\n\t\n\tfor(i\
    \ = 0; i < opening_brackets_length; i++){\n\t\tif(opening_brackets[i] !== closing_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyqkl4o5x.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyqkl4o5x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\t\n\tif (opening_brackets\
    \ == null || closing_brackets == null){\n\t\treturn false;\n\t}\n\t\n\tfor (var\
    \ i = 0; i < opening_brackets.length; i++){\n\t\tif (closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1lg5dalp.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1lg5dalp.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo56g0qk1.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo56g0qk1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.length;\n\
    \    var all_closing_brackets = closing_brackets.length;\n    var correct_bracketing\
    \ = false;\n    \n    // If there are more opening brackets than closing brackets,\
    \ return false.\n    if(all_opening_brackets > all_closing_brackets){\n      \
    \  return false;\n    }\n    \n    // If there are more closing brackets than\
    \ opening brackets, return false.\n    if(all_closing_brackets > all_opening_brackets){\n\
    \        return false;\n    }\n    \n    // If there are more opening brackets\
    \ than closing brackets, return false.\n    if(all_opening_brackets < all_closing_brackets){\n\
    \        return false;\n    }\n    \n    // If there are more opening brackets\
    \ than closing brackets, return false.\n    if(all_opening_brackets == all_closing_brackets){\n\
    \        correct_bracketing = true;\n    }\n    \n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprwm6twrh.js:51:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprwm6twrh.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing_count = opening_brackets_count\
    \ === closing_brackets_count;\n    return correct_bracketing_count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_hwjy11h.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_hwjy11h.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing = false;\n    \n\
    \    if(opening_brackets_count === closing_brackets_count){\n        correct_bracketing\
    \ = true;\n    }\n    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsd6ynio0.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsd6ynio0.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_bracketing = true;\n\t\n\tfor(var\
    \ i = 0; i < all_opening_brackets; i++){\n\t\tfor(var j = 0; j < all_closing_brackets;\
    \ j++){\n\t\t\tif(opening_brackets[i] == closing_brackets[j]){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprvos0wa0.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprvos0wa0.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar all_closing_brackets = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_brackets = all_opening_brackets + all_closing_brackets;\n\t\
    var correct_brackets = all_brackets == opening_brackets.length + closing_brackets.length;\n\
    \treturn correct_brackets;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnmdftm70.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnmdftm70.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\tvar opening_brackets_count\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tvar closing_brackets_count\
    \ = closing_brackets ? closing_brackets.length : 0;\n\tvar all_opening_brackets_count\
    \ = opening_brackets_count + closing_brackets_count;\n\tvar all_closing_brackets_count\
    \ = opening_brackets_count - closing_brackets_count;\n\treturn (all_opening_brackets_count\
    \ == all_closing_brackets_count);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbhwlh7y_.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbhwlh7y_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ === \"(\"){\n\t\t\tif (opening_brackets[i+1] !== \"(\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"[\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"[\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"{\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"{\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"<\"){\n\t\t\tif (opening_brackets[i+1] !== \"<\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"%\"){\n\t\t\tif (opening_brackets[i+1] !== \"%\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"+\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"+\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"-\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"-\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"/\"){\n\t\t\tif (opening_brackets[i+1] !== \"/\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"*\"){\n\t\t\tif (opening_brackets[i+1] !== \"*\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"^\"){\n\t\t\
    \tif (opening_brackets[i+1] !== \"^\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"~\"){\n\t\t\tif (opening_brackets[i+1]\
    \ !== \"~\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (opening_brackets[i] === \"|\"){\n\t\t\tif (opening_brackets[i+1] !== \"|\"\
    ){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i]\
    \ === \"&\"){\n\t\t\tif (opening_brackets[i+1] !== \"&\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \"<\"){\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp34poin3b.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(item){\n\
    \t\treturn item !== \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== false;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== true;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== 0;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== NaN;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -1;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -2;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -3;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -4;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -5;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -6;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -7;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item){\n\
    \t\treturn item !== -8;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(item\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpe918u8j0.js:61\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t}\n\tclosing_brackets.pop();\n\tfor(var i = 0; i < closing_brackets.length;\
    \ i++){\n\t\tif(opening_brackets.indexOf(closing_brackets[i]) == -1){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyomfz7cd.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyomfz7cd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_brackets = all_opening_brackets ==\
    \ all_closing_brackets;\n\treturn correct_brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbvqmid7x.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbvqmid7x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpye52anj3.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpye52anj3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(x){\n\t\t\
    return x != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != undefined;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){\n\
    \t\treturn x != null;\n\t});\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpengzdvkt.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_length = all_opening_brackets.length;\n    var all_closing_brackets\
    \ = opening_brackets.concat(closing_brackets);\n    var all_closing_brackets_length\
    \ = all_closing_brackets.length;\n    var correct_bracketing = false;\n    for(var\
    \ i = 0; i < all_opening_brackets_length; i++){\n        if(all_opening_brackets[i]\
    \ != all_closing_brackets[i]){\n            correct_bracketing = true;\n     \
    \   }\n    }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5wzfjq4b.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5wzfjq4b.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \t\n\tvar correct_bracketing = true;\n\t\n\tfor(var i = 0; i < all_opening_brackets.length;\
    \ i++){\n\t\tif(all_opening_brackets[i] != all_opening_brackets[all_opening_brackets.length\
    \ - 1 - i]){\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn8qeto83.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn8qeto83.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets.length; i++){\n\t\tif(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length-1]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm0z5d0rv.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm0z5d0rv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var count = 0;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n          \
    \  count++;\n        }\n    }\n    return count === opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppp7vfxbb.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppp7vfxbb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"(\");\n  var closing_brackets = brackets.split(\"\
    )\");\n  if(opening_brackets.length != closing_brackets.length){\n    return false;\n\
    \  }\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwzdal_2x.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwzdal_2x.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\treturn opening_brackets_count == closing_brackets_count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphpb6vscx.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphpb6vscx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_opening_brackets_count = opening_brackets_count + closing_brackets_count;\n\
    \treturn (all_opening_brackets_count === opening_brackets_count);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeii4xswu.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeii4xswu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"]\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")(\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"](\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"][\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[]\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"]()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"][]\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[]()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"]()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"][]()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[]()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"]()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"][]()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")()()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[]()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"]()()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \"][]()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")()()()()()\";\n\t});\n\tbrackets = brackets.filter(function(bracket){\n\
    \t\treturn bracket != \")[]()()\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb38kttqp.js:83\n\t\treturn bracket != \")[]()()\n\t\t         \
    \         ^^^^^^^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar all_opening_brackets_have_closing_brackets = false;\n\t\
    for (var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket =\
    \ opening_brackets[i];\n\t\tvar closing_bracket = closing_brackets[i];\n\t\tif\
    \ (opening_bracket != closing_bracket){\n\t\t\tall_opening_brackets_have_closing_brackets\
    \ = false;\n\t\t}\n\t\telse if (opening_bracket == \")\"){\n\t\t\tall_opening_brackets_have_closing_brackets\
    \ = true;\n\t\t}\n\t}\n\treturn all_opening_brackets_have_closing_brackets;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1114zhgw.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1114zhgw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_brackets_count = opening_brackets_count\
    \ + closing_brackets_count;\n    return opening_brackets_count === closing_brackets_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_ipxw5jk.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ipxw5jk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closed = false;\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets; i++){\n\t\tif(i == all_opening_brackets\
    \ - 1){\n\t\t\tall_opening_brackets_are_closed = true;\n\t\t}\n\t\t\n\t\tif(opening_brackets[i]\
    \ != closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn all_opening_brackets_are_closed;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7fe1urpn.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7fe1urpn.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket){\n        return\
    \ opening_brackets.indexOf(opening_bracket) !== -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnomuxau_.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnomuxau_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var count = 0;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n          \
    \  count++;\n        }\n    }\n    return count === opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppp7vfxbb.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppp7vfxbb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar correct_bracketing = true;\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(opening_brackets[i].length != closing_brackets[i].length){\n\t\
    \t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpns41wswg.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpns41wswg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket, i){\n       \
    \ return opening_bracket === closing_brackets[i];\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdy4zbily.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdy4zbily.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for (var i = 0; i < opening_brackets.length; i++){\n    if (opening_brackets[i]\
    \ == \"(\"){\n      closing_brackets.push(\")\");\n    }\n    if (opening_brackets[i]\
    \ == \")\"){\n      closing_brackets.push(\"(\");\n    }\n  }\n  return closing_brackets.length\
    \ == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt9as0sdn.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt9as0sdn.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar correct_bracketing = true;\n\t\n\tfor(var\
    \ i = 0; i < all_opening_brackets; i++){\n\t\tif(opening_brackets[i] != closing_brackets[i]){\n\
    \t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvmsxw9_q.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvmsxw9_q.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpri1ux8ub.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpri1ux8ub.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794770
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.toLowerCase();\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\
    \");\n\tbrackets = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\
    brackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\tbrackets\
    \ = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\
    \tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\
    \");\n\tbrackets = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\
    brackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\tbrackets\
    \ = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\
    \tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\
    \");\n\tbrackets = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\
    brackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\tbrackets\
    \ = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\
    \tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\
    \");\n\tbrackets = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\
    brackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\tbrackets\
    \ = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\
    \tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\
    \");\n\tbrackets = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\
    brackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\tbrackets\
    \ = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets = brackets.reverse();\n\
    \tbrackets = brackets.join(\"\");\n\tbrackets = brackets.split(\"\");\n\tbrackets\
    \ = brackets.reverse();\n\tbrackets = brackets.join(\"\");\n\t\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpadw2dqs_.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"(\"){\n\t\t\tif(brackets[i+1] === \")\"){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu4jhes2w.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpu4jhes2w.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\t\n\tfor(var i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tif(closing_brackets_length == i){\n\t\t\treturn true;\n\t\t}\n\t\t\
    \n\t\tif(opening_brackets[i] != closing_brackets[closing_brackets_length]){\n\t\
    \t\treturn false;\n\t\t}\n\t\t\n\t\tclosing_brackets_length--;\n\t}\n\t\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeqwsbqwu.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeqwsbqwu.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var brackets_stack = []\n  brackets_stack[0] = brackets\n  brackets_stack_string\
    \ = brackets_stack.join('')\n  brackets_stack_string = brackets_stack_string.split('')\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n  brackets_stack_string.pop()\n\
    \  brackets_stack_string.pop()\n  brackets_stack\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi0unww9b.js:103\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closed = true;\n\t\
    var all_closing_brackets_are_open = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tall_opening_brackets_are_closed = all_opening_brackets_are_closed\
    \ && opening_brackets[i+1] == closing_brackets[i];\n\t}\n\t\n\tfor(var i = 0;\
    \ i < closing_brackets.length; i++){\n\t\tall_closing_brackets_are_open = all_closing_brackets_are_open\
    \ && closing_brackets[i-1] == opening_brackets[i];\n\t}\n\t\n\treturn (all_opening_brackets_are_closed\
    \ && all_closing_brackets_are_open);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsqh4996f.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsqh4996f.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_opening_brackets_count = opening_brackets_count + closing_brackets_count;\n\
    \treturn (opening_brackets_count == closing_brackets_count);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpre3m6576.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpre3m6576.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets == null || closing_brackets == null){\n    return\
    \ false;\n  }\n  if(opening_brackets.length != closing_brackets.length){\n   \
    \ return false;\n  }\n  for(var i = 0; i < opening_brackets.length; i++){\n  \
    \  if(opening_brackets[i] != closing_brackets[i]){\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcux8zfny.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcux8zfny.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ == \"(\"){\n\t\t\tclosing_brackets.push(\")\");\n\t\t}\n\t\telse if(opening_brackets[i]\
    \ == \")\"){\n\t\t\tclosing_brackets.push(\"(\");\n\t\t}\n\t}\n\treturn closing_brackets.length\
    \ == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpug4m6a90.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpug4m6a90.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if (opening_brackets[i] != closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvy67875c.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvy67875c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  \n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ === closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjx1zj2du.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjx1zj2du.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_closing_brackets = closing_brackets.concat(opening_brackets);\n \
    \   return all_opening_brackets.length === all_closing_brackets.length;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy453fhps.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy453fhps.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets =\
    \ brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ > 0 && closing_brackets[i].length < opening_brackets[i].length){\n         \
    \   correct_bracketing = false;\n            break;\n        }\n    }\n    return\
    \ correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg9z3a515.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg9z3a515.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closing_brackets\
    \ = all_opening_brackets == all_closing_brackets;\n\tvar all_opening_brackets_are_opening_brackets\
    \ = all_opening_brackets == 0;\n\treturn all_opening_brackets_are_opening_brackets\
    \ && all_opening_brackets_are_closing_brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_v115zak.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_v115zak.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ === closing_brackets[opening_brackets_length - i]){\n        opening_brackets_length--;\n\
    \      }\n    }\n    if(opening_brackets_length === 0){\n      return true;\n\
    \    }\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph65dq6re.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph65dq6re.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphz_5iac8.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphz_5iac8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets.length; i++){\n\t\tif(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length - 1])\n\t\t\treturn false;\n\
    \t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphgk13a58.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphgk13a58.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for (var i = 0; i < opening_brackets.length; i++){\n    var opening_bracket\
    \ = opening_brackets[i];\n    var closing_bracket = opening_brackets[(i+1)%opening_brackets.length];\n\
    \    if (opening_bracket === closing_bracket){\n      closing_brackets.push(closing_bracket);\n\
    \    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw0hurt7y.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpw0hurt7y.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i=0; i<opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmj6fcp65.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmj6fcp65.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_closing_brackets = closing_brackets.concat(opening_brackets);\n\tvar\
    \ all_opening_brackets_set = all_opening_brackets.filter(function(el){\n\t\treturn\
    \ el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(el){\n\
    \t\treturn el != null;\n\t});\n\tvar all_closing_brackets_set = all_closing_brackets_set.filter(function(el){\n\
    \t\treturn el != \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_484mb02.js:63\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.length;\n\
    \    var all_closing_brackets = closing_brackets.length;\n    var all_opening_brackets_are_closing_brackets\
    \ = all_opening_brackets == all_closing_brackets;\n    var all_opening_brackets_are_opening_brackets\
    \ = all_opening_brackets == 0;\n    var all_closing_brackets_are_opening_brackets\
    \ = all_closing_brackets == 0;\n    var all_opening_brackets_are_opening_or_closing_brackets\
    \ = all_opening_brackets_are_opening_brackets || all_opening_brackets_are_closing_brackets;\n\
    \    return all_opening_brackets_are_opening_or_closing_brackets;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp01_jeui1.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp01_jeui1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i=0; i<opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz6w866ug.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz6w866ug.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n\
    \  var opening_brackets_count = opening_brackets.length;\n  var closing_brackets_count\
    \ = closing_brackets.length;\n  \n  if(opening_brackets_count > closing_brackets_count){\n\
    \    return false;\n  }\n  \n  for(var i=0; i<opening_brackets_count; i++){\n\
    \    if(opening_brackets[i] !== closing_brackets[i]){\n      return false;\n \
    \   }\n  }\n  \n  return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7gcm_ckg.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gcm_ckg.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar all_opening_brackets = opening_brackets.length;\n\tvar all_closing_brackets\
    \ = closing_brackets.length;\n\tvar all_opening_brackets_are_closing_brackets\
    \ = all_opening_brackets == all_closing_brackets;\n\tvar all_opening_brackets_are_opening_brackets\
    \ = all_opening_brackets == 0;\n\tvar all_closing_brackets_are_opening_brackets\
    \ = all_closing_brackets == 0;\n\tvar all_opening_brackets_are_opening_or_closing_brackets\
    \ = all_opening_brackets_are_opening_brackets || all_opening_brackets_are_closing_brackets;\n\
    \tvar all_opening_brackets_are_opening_or_closing_brackets_or_both = all_opening_brackets_are_opening_brackets\
    \ || all_opening_brackets_are_closing_brackets;\n\tvar all_opening_brackets_are_opening_or_both\
    \ = all_opening_brackets_are_opening_brackets || all_opening_brackets_are_opening_or_closing_brackets;\n\
    \tvar all_opening_brackets_are_opening_or_both_or_both = all_opening_brackets_are_opening_brackets\
    \ || all_opening_brackets_are_opening_or_both;\n\tvar all_opening_brackets_are_opening_or_both_or_both_or_both\
    \ = all_opening_brackets_are_opening_brackets || all_opening_brackets_are_opening_or_both;\n\
    \tvar all_opening_brackets_are_opening_or_both_or_both_or_both_or_both = all_opening_brackets_are_opening_brackets\
    \ || all_opening_brackets_are_opening_or_both;\n\tvar all_opening_brackets_are_opening_or_both_or_both_or_both_or_both_or_both\
    \ = all_opening_brackets_are_opening_brackets || all_opening_brackets_are_opening_or_both;\n\
    \tvar all_opening_brackets_are_opening_or_both_or_both_or_both_or_both_or_both_or_both\
    \ = all_opening_brackets_are_opening_brackets || all_open\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9e2wfz4t.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.length;\n\
    \    var all_closing_brackets = closing_brackets.length;\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < all_opening_brackets; i++){\n        if(opening_brackets[i]\
    \ != closing_brackets[i]){\n            correct_bracketing = true;\n         \
    \   break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8d7fdqi6.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8d7fdqi6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplcp342o3.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplcp342o3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets = brackets.match(/\\\
    )/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_opening_brackets_count = opening_brackets_count + closing_brackets_count;\n\
    \treturn all_opening_brackets_count === opening_brackets_count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp93_1y4mh.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp93_1y4mh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar brackets_length = opening_brackets_length\
    \ + closing_brackets_length;\n\tvar opening_brackets_array = [];\n\tvar closing_brackets_array\
    \ = [];\n\tvar opening_brackets_array_length = opening_brackets_array.length;\n\
    \tvar closing_brackets_array_length = closing_brackets_array.length;\n\tvar opening_brackets_array_index;\n\
    \tvar closing_brackets_array_index;\n\tvar opening_brackets_array_value;\n\tvar\
    \ closing_brackets_array_value;\n\tvar opening_brackets_array_value_length;\n\t\
    var closing_brackets_array_value_length;\n\tvar opening_brackets_array_value_length_minus_1;\n\
    \tvar closing_brackets_array_value_length_minus_1;\n\tvar opening_brackets_array_value_length_minus_2;\n\
    \tvar closing_brackets_array_value_length_minus_2;\n\tvar opening_brackets_array_value_length_minus_3;\n\
    \tvar closing_brackets_array_value_length_minus_3;\n\tvar opening_brackets_array_value_length_minus_4;\n\
    \tvar closing_brackets_array_value_length_minus_4;\n\tvar opening_brackets_array_value_length_minus_5;\n\
    \tvar closing_brackets_array_value_length_minus_5;\n\tvar opening_brackets_array_value_length_minus_6;\n\
    \tvar closing_brackets_array_value_length_minus_6;\n\tvar opening_brackets_array_value_length_minus_7;\n\
    \tvar closing_brackets_array_value_length_minus_7;\n\tvar opening_brackets_array_value_length_minus_8;\n\
    \tvar closing_brackets_array_value_length_minus_8;\n\tvar opening_brackets_array_value_length_minus_9;\n\
    \tvar closing_brackets_array_value_length_minus_9;\n\tvar opening_brackets_array_value_length_minus_10;\n\
    \tvar closing_brackets_array_value_length_minus_10;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp673ml2ef.js:85\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\\
    )/g);\n  if(opening_brackets && closing_brackets){\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n      if(opening_brackets[i] != closing_brackets[i]){\n        return\
    \ false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7ok_l5mw.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ok_l5mw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794771
