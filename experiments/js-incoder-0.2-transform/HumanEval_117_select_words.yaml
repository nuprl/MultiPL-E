name: HumanEval_117_select_words
language: js
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a\
  \ little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white\
  \ space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n\
  // >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s,\
  \ n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
  little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
  , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
  Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
  Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
  a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
completions: []
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
