name: HumanEval_57_monotonic
language: js
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
  \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
  \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
completions: ["    var s = monotonicSort;\n    return l(s) ? s[0] === s[1] : false;\n\
    }\n", "  var s = monotonicSort;\n  return l(s).cmp(l(s).reverse()) === 1;\n}\n",
  "    var o=[], diff=[], l=l.slice(), l2=l.slice(), i;\n    for(i=0;i<l.length;i++){\n\
    \        diff[i] = l[i] - l2[i];\n    }\n    for(i=l.length-1;i>0;i--){\n    \
    \    if(diff[i-1]>0){\n            o.push(l[i]);\n        }\n        else{\n \
    \           break;\n        }\n    }\n    return o.length>1 && o.every(function(elem,\
    \ index, array){\n        return index === array.indexOf(elem);\n    });\n}\n",
  "  var n = l.length,\n      out = 0,\n      i,\n      j,\n      xi,\n      yi,\n\
    \      yj;\n  for(i = 0; i < n; i++){\n    xi = l[i];\n    yi = l[i - 1];\n  \
    \  yj = l[i];\n    if(xi > yi){\n      if(yj > xi){\n        out++;\n      }else{\n\
    \        out--;\n      }\n    }else{\n      if(yi < xi){\n        out++;\n   \
    \   }else{\n        out--;\n      }\n    }\n  }\n  return out < 0;\n}\n", "  \
    \  var s = l.slice();\n    var n = s.length;\n    if (n < 3) return true;\n  \
    \  var m = s[0];\n    for (var i = 1; i < n; ++i){\n        if (s[i] > m){\n \
    \           m = s[i];\n        }\n    }\n    if (m > s[n-1]){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    var n = l.length,\n        monotone\
    \ = true,\n        i, j, p1, p2; // monotonically increasing or decreasing\n\n\
    \    if (n <= 1) {\n        return true; // empty lists are monotonically increasing\n\
    \    }\n\n    for (i = 1; i < n; ++i) {\n        p1 = l[i-1];\n        p2 = l[i];\n\
    \n        if (p1 !== p2) {\n            monotone = false;\n            break;\n\
    \        }\n    }\n\n    return monotone;\n}\n", "    var o=[], diff=Infinity;\n\
    \    for(var i=l.length-1; i>=0; i--){\n        var v=l[i];\n        if(v<diff){\n\
    \            o.unshift(v);\n            diff=v;\n        }\n        else if(v>diff){\n\
    \            o.push(v);\n            diff=v;\n        }\n    }\n    return o.length>1\
    \ && diff===Infinity;\n}\n", "    var n = l.length;\n    if (n < 2) return false;\n\
    \    var i, j, p = [], q = [];\n    for (i = 0; i < n; ++i){\n        p.push(l[i]);\n\
    \    }\n    j = p.length;\n    for (i = 0; i < n; ++i){\n        while (q[j] ===\
    \ p[i]){\n            q[j] = q[j-1];\n            --j;\n        }\n        q[j]\
    \ = p[i];\n    }\n    return j === 0;\n}\n", "  var s = monotonicSort;\n  return\
    \ l(s) ? s[0] === s[1] : false;\n}\n", "    var s = monotonicSort;\n    return\
    \ l(s).sort(function(a, b){\n        return s(a) - s(b);\n    }).join(\"\") ===\
    \ \"\";\n}\nmonotonic.tests = [\n    {\n        name: \"monotonic\",\n       \
    \ func: monotonic,\n        args: function(){\n            return [\n        \
    \        [0, 1],\n                [1, 1],\n                [2, 1],\n         \
    \       [3, 1],\n                [4, 1],\n                [5, 1],\n          \
    \      [6, 1],\n                [7, 1],\n                [8, 1],\n           \
    \     [9, 1],\n                [10, 1],\n                [11, 1],\n          \
    \      [12, 1],\n                [13, 1],\n                [14, 1],\n        \
    \        [15, 1],\n                [16, 1],\n                [17, 1],\n      \
    \          [18, 1],\n                [19, 1],\n                [20, 1]\n     \
    \       ];\n        },\n        exp: \"true\"\n    },\n    {\n        name: \"\
    monotonic (desc)\",\n        func: monotonic,\n        args: function(){\n   \
    \         return [\n                [0, 1],\n                [19, 1],\n      \
    \          [18, 1],\n                [17, 1],\n                [16, 1],\n    \
    \            [15, 1],\n                [14, 1],\n                [13, 1],\n  \
    \              [12, 1],\n                [11, 1],\n                [10, 1],\n\
    \                [9, 1],\n                [8, 1],\n                [7, 1],\n \
    \               [6, 1],\n                [5, 1],\n                [4, 1],\n  \
    \              [3, 1],\n                [2, 1],\n                [1, 1],\n   \
    \             [0, 0]\n            ];\n        },\n        exp: \"true\"\n    },\n\
    \    {\n        name: \"monotonic (desc, no dups)\",\n        func: monotonic,\n\
    \        args: function(){\n            return [\n                [0, 1],\n  \
    \              [19, 1],\n                [18, 1],\n                [17, 1],\n\
    \                [16, 1],\n                [15, 1],\n                [14, 1],\n\
    \                [13, 1],\n                [12, 1],\n                [11, 1],\n\
    \                [10, 1],\n                [9, 1],\n                [8, 1],\n\
    \                [7, 1],\n                [6, 1],\n                [5, 1],\n \
    \               [4, 1],\n                [3, 1],\n                [2, 1],\n  \
    \              [1, 1],\n                [0, 0]\n            ];\n        },\n \
    \       exp: \"true\"\n    },\n    {\n        name: \"monotonic (desc, no dups,\
    \ no dups)\",\n        func: monotonic,\n        args: function(){\n         \
    \   return [\n                [0, 1],\n                [19, 1],\n            \
    \    [18, 1],\n                [17, 1],\n                [16, 1],\n          \
    \      [15, 1],\n                [14, 1],\n                [13, 1],\n        \
    \        [12, 1],\n                [11, 1],\n                [10, 1],\n      \
    \          [9, 1],\n                [8, 1],\n                [7, 1],\n       \
    \         [6, 1],\n                [5, 1],\n                [4, 1],\n        \
    \        [3, 1],\n                [2, 1],\n                [1, 1],\n         \
    \       [0, 0]\n            ];\n        },\n", "    var n = l.length;\n    return\
    \ !(n<1 || Math.abs(l[n-1] - l[n-2]) > 1);\n}\n", "    var s = 0, n = l.length;\n\
    \    for(var i = 0; i < n; i++){\n        if(l[i] > l[i+1]){\n            return\
    \ false;\n        }\n        s += l[i] - l[i+1];\n    }\n    return s > 0;\n}\n",
  "    var n = l.length;\n    if(n < 2) return false;\n    var s = l[0], e = l[n-1];\n\
    \    for(var i = 1; i < n; i++){\n        if(l[i] < e || (l[i] == e && l[i-1]\
    \ < s)){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    var n = l.length,\n        monotonic = true,\n        i, j, p0, p1, q0, q1,\
    \ q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15;\n    for(i = 0;\
    \ i < n; i++){\n        p0 = l[i];\n        p1 = l[(i+1)%n];\n        if(p0 >\
    \ p1){\n            monotonic = false;\n            break;\n        }\n    }\n\
    \    if(monotonic){\n        return true;\n    }\n    for(i = 0; i < n; i++){\n\
    \        q10 = l[i];\n        q14 = l[(i+2)%n];\n        q15 = l[(i+3)%n];\n \
    \       q16 = l[(i+4)%n];\n        q17 = l[(i+5)%n];\n        q18 = l[(i+6)%n];\n\
    \        q19 = l[(i+7)%n];\n        q13 = l[(i+8)%n];\n        q12 = l[(i+9)%n];\n\
    \        q11 = l[(i+10)%n];\n        q9 = l[(i+11)%n];\n        q8 = l[(i+12)%n];\n\
    \        q7 = l[(i+13)%n];\n        q6 = l[(i+14)%n];\n        q5 = l[(i+15)%n];\n\
    \        q4 = l[(i+16)%n];\n        q3 = l[(i+17)%n];\n        q2 = l[(i+18)%n];\n\
    \        q1 = l[(i+19)%n];\n        if((q10 > q9) && (q10 > q8) && (q10 > q7)\
    \ && (q10 > q6) && (q10 > q5) && (q10 > q4) && (q10 > q3) && (q10 > q2) && (q10\
    \ > q1)){\n            if((q14 > q13) && (q14 > q12) && (q14 > q11) && (q14 >\
    \ q10) && (q14 > q9) && (q14 > q8) && (q14 > q7) && (q14 > q6) && (q14 > q5) &&\
    \ (q14 > q4) && (q14 > q3) && (q14 > q2) && (q14 > q1)){\n                if((q15\
    \ > q14) && (q15 > q13) && (q15 > q12) && (q15 > q11) && (q15 > q10) && (q15 >\
    \ q9) && (q15 > q8) && (q15 > q7) && (q15 > q6", "  var s = monotonicSort;\n \
    \ return l(s);\n}\n\nmonotonic.version = '1.1.0';\n\nmodule.exports = monotonic;\n\
    \n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar isNumeric =\
    \ require('fast-isnumeric');\n\nvar BADNUM = _dereq_('../constants/numerical').BADNUM;\n",
  "  var n = l.length,\n      m = +l.shift(),\n      flag = true,\n      i = 0;\n\n\
    \  for (; i < n; i++){\n    if (l[i] <= m){\n      flag = false;\n      break;\n\
    \    }\n  }\n  return flag;\n}\n\nmodule.exports = monotonic;\n\n},{}],17:[function(require,module,exports){\n\
    var indexOf = require('indexof');\n\nvar Object_keys = function (obj) {\n    if\
    \ (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n \
    \       for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\n\
    var forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n\
    \    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n \
    \   }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({},\
    \ '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj,\
    \ name, {\n                writable: true,\n                enumerable: false,\n\
    \                configurable: true,\n                value: value\n         \
    \   })\n        };\n    } catch(e) {\n        return function(obj, name, value)\
    \ {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals =\
    \ ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity',\
    \ 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError',\
    \ 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent',\
    \ 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat',\
    \ 'parseInt', 'undefined', 'unescape'];\n", "  var s = 0, n = l.length, m = +l[0],\
    \ i, l;\n  for(i = 1; i < n; i++){\n    l = l[i];\n    if(l < m || (m === l &&\
    \ l<l[i])){\n      m = l;\n    }\n  }\n  return m === l[n - 1];\n}\n", "  var\
    \ s = monotonicSort;\n  return s(l, function(a, b){\n    return a < b ? -1 : a\
    \ > b ? 1 : a >= b ? 0 : NaN;\n  });\n}\n\nmonotonic.radix = 2; // 10 or Math.pow(10,\
    \ 10)\nmodule.exports = monotonic;\n\n},{\"./sort\":15}],15:[function(require,module,exports){\n\
    'use strict';\n\nvar compareAsc  = require('./compareAsc');\nvar compareDesc =\
    \ require('./compareDesc');\nvar identity    = require('./identity');\n", "  \
    \  var n = l.length,\n        monotone = true,\n        i, j, p0, p1;\n\n    for\
    \ (i = 0; i < n; ++i) {\n        p0 = l[i];\n        p1 = l[i - 1];\n        if\
    \ (p0 > p1) {\n            monotone = false;\n            break;\n        }\n\
    \    }\n\n    return monotone;\n}\n", "  var n = l.length;\n  if(n < 1) return\
    \ false;\n  for(var i = 1;i < n;i++){\n    if(l[i-1] > l[i]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
