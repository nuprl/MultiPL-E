language: js
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(number => {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n \
    \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach((number) => {\n    sum\
    \ += number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach((number) => {\n    sum\
    \ += number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n \
    \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i in numbers){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0;i<numbers.length;i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum,product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let num of numbers){\n    sum += num;\n\
    \    product *= num;\n  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,0];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpilqqdww0.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpilqqdww0.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(number => {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let num of numbers){\n      \
    \  sum += num;\n        product *= num;\n    }\n    return [sum, product];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i=0; i<numbers.length; i++){\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(number => {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0;i<numbers.length;i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum,product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  let sum = 0;\n  let product\
    \ = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n \
    \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,0];\n  }\n  let sum = 0;\n  let product\
    \ = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n \
    \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpkcv58nn2.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkcv58nn2.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let num of numbers){\n    sum += num;\n\
    \    product *= num;\n  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(number => {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let num of numbers){\n    sum += num;\n\
    \    product *= num;\n  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(number => {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i=0;i<numbers.length;i++){\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum,product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  let sum = 0;\n  let product\
    \ = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n \
    \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i=0;i<numbers.length;i++){\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum,product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i=0; i<numbers.length; i++){\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i in numbers){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0;i<numbers.length;i++){\n  \
    \  sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum +=\
    \ num;\n    product *= num;\n  });\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0,1];\n  }\n  var sum = 0;\n  var product\
    \ = 1;\n  for(var i=0;i<numbers.length;i++){\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum,product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803890
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum += n;\n\
    \    product *= n;\n  });\n  return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i=0; i<numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
