name: HumanEval_10_make_palindrome
language: js
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"\
  xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\n\
  test();"
completions: ["    var reversed_string = string.reverse ();\n    var prefix_string\
    \ = string.slice (0, reversed_string.lastIndexOf (string));\n    var postfix_string\
    \ = string.slice (reversed_string.lastIndexOf (string));\n    return prefix_string\
    \ + postfix_string;\n}\n", "  var palindrome = string;\n  var palindrome_length\
    \ = string.length;\n  var palindrome_postfix = \"\";\n  var palindrome_prefix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix = \"\";\n  var palindrome_prefix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_length = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_length = string.length - 1;\n\
    \  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "  if(string === \"\"){\n    return \"\";\n  }\n  var reversed_string = string.reverse();\n\
    \  var prefix_string = string.slice(0, string.length - reversed_string.length);\n\
    \  var postfix_string = string.slice(string.length - reversed_string.length);\n\
    \  var palindrome = prefix_string + reversed_string + postfix_string;\n  return\
    \ palindrome;\n}\n", "    string = string.toLowerCase();\n    var longestPalindrome\
    \ = \"\";\n    var longestPalindromeLength = 0;\n    var longestPalindromePrefix\
    \ = \"\";\n    var longestPalindromeSuffix = \"\";\n    var longestPalindromePostfix\
    \ = \"\";\n    var longestPalindromePostfixLength = 0;\n    var longestPalindromePostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixSuffix = \"\";\n    var longestPalindromePostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixSuffix = \"\";\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixLength = 0;\n    var\
    \ longestPalindromePostfixPostfixPostfixPrefix = \"\";\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\";\n   \
    \ var longestPalindromePostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\
    ;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\";\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfix", "    var palindrome\
    \ = \"\";\n    var suffix;\n    var prefix;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixIndex;\n    var prefixIndex;\n    var suffixChar;\n    var prefixChar;\n\
    \    var i;\n    var j;\n    var k;\n    var l;\n    var m;\n    var n;\n    var\
    \ reversedString;\n    var reversedStringLength;\n    var reversedStringIndex;\n\
    \    var reversedStringChar;\n    var palindromeLength;\n    var palindromeIndex;\n\
    \    var palindromeChar;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var palindromeCharIndex;\n    var palindromeCharIndex;\n    var palindromeCharIndex;\n\
    \    var p", "    var reversed_string = string.replace(/./g,function(char){\n\
    \        return char.charCodeAt(0)-96\n    })\n    var palindrome = reversed_string+reversed_string.reverse()\n\
    \    return palindrome\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n  \
    \  var prefix_palindrome = \"\";\n    var suffix_palindrome = \"\";\n    var prefix_palindrome_reverse\
    \ = \"\";\n    var suffix_palindrome_reverse = \"\";\n    var prefix_palindrome_length\
    \ = \"\";\n    var suffix_palindrome_length = \"\";\n    var prefix_palindrome_length_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse = \"\";\n    var prefix_palindrome_length_reverse_string\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string = \"\";\n    var prefix_palindrome_length_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse = \"\";\n \
    \   var prefix_palindrome_length_reverse_string_reverse_string = \"\";\n    var\
    \ suffix_palindrome_length_reverse_string_reverse_string = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var suffix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var prefix_palindrome_length_reverse_string_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";", "  var palindrome = string;\n  var reversed_string = reverse(string);\n\
    \  var prefix_length = string.length - reversed_string.length;\n  if(prefix_length\
    \ < 0){\n    prefix_length = 0;\n  }\n  palindrome += reversed_string.substr(0,\
    \ prefix_length);\n  return palindrome;\n}\n", "    var palindrome = \"\";\n \
    \   var string_reverse = \"\";\n    var string_prefix = \"\";\n    var string_suffix\
    \ = \"\";\n    var string_prefix_reverse = \"\";\n    var string_suffix_reverse\
    \ = \"\";\n    var string_prefix_reverse_index = 0;\n    var string_suffix_reverse_index\
    \ = 0;\n    var string_prefix_reverse_index2 = 0;\n    var string_suffix_reverse_index2\
    \ = 0;\n    var string_prefix_reverse_index3 = 0;\n    var string_suffix_reverse_index3\
    \ = 0;\n    var string_prefix_reverse_index4 = 0;\n    var string_suffix_reverse_index4\
    \ = 0;\n    var string_prefix_reverse_index5 = 0;\n    var string_suffix_reverse_index5\
    \ = 0;\n    var string_prefix_reverse_index6 = 0;\n    var string_suffix_reverse_index6\
    \ = 0;\n    var string_prefix_reverse_index7 = 0;\n    var string_suffix_reverse_index7\
    \ = 0;\n    var string_prefix_reverse_index8 = 0;\n    var string_suffix_reverse_index8\
    \ = 0;\n    var string_prefix_reverse_index9 = 0;\n    var string_suffix_reverse_index9\
    \ = 0;\n    var string_prefix_reverse_index10 = 0;\n    var string_suffix_reverse_index10\
    \ = 0;\n    var string_prefix_reverse_index11 = 0;\n    var string_suffix_reverse_index11\
    \ = 0;\n    var string_prefix_reverse_index12 = 0;\n    var string_suffix_reverse_index12\
    \ = 0;\n    var string_prefix_reverse_index13 = 0;\n    var string_suffix_reverse_index13\
    \ = 0;\n    var string_prefix_reverse_index14 = 0;\n    var string_suffix_reverse_index14\
    \ = 0;\n    var string_prefix_reverse_index15 = 0;\n    var string_suffix_reverse_index15\
    \ = 0;\n    var string_prefix_reverse_index16 = 0;\n    var string_suffix_reverse_index16\
    \ = 0;\n    var string_prefix_reverse_index17 = 0;\n    var string_suffix_reverse_index17\
    \ = 0;\n    var string_prefix_reverse_index18 = 0;\n    var string_suffix_reverse_index18\
    \ = 0;\n    var string_prefix_reverse_index19 = 0;\n    var string_suffix_reverse_index19\
    \ = 0;\n    var string_prefix_reverse_index20 = 0;\n    var string_suffix_reverse_index20\
    \ = 0;\n    var string_prefix_reverse_index21 = 0;\n    var string_suffix_reverse_index21\
    \ = 0;\n    var string_prefix_reverse_index22 = 0;\n    var string_suffix_reverse_index22\
    \ = 0;\n    var string_prefix_reverse_index23 = 0;\n    var string_suffix_reverse_index23\
    \ = 0;\n    var string_prefix_reverse_index24 = 0;\n    var string_suffix_reverse_index24\
    \ = 0;\n    var string_prefix_reverse_index25 = 0;\n    var string_suffix_reverse_index25\
    \ = 0;\n    var string_prefix_reverse_index26 = 0;\n    var string_suffix_reverse_index26\
    \ = 0;\n    var string_prefix_reverse_index27 = 0;\n    var string_suffix_reverse_index27\
    \ = 0;\n    var string_prefix_reverse_index28 = 0;\n    var string_suffix_reverse_index28\
    \ = 0;\n    var string_prefix_reverse_index29 = 0;\n    var string_", "    var\
    \ palindrome = string;\n    var prefix_length = 0;\n    var suffix_length = 0;\n\
    \    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var reverse_prefix_postfix\
    \ = \"\";\n    var reverse_suffix_postfix = \"\";\n    var reverse_prefix_length\
    \ = 0;\n    var reverse_suffix_length = 0;\n    var reverse_prefix_string = \"\
    \";\n    var reverse_suffix_string = \"\";\n    var reverse_prefix_postfix_length\
    \ = 0;\n    var reverse_suffix_postfix_length = 0;\n    var reverse_prefix_postfix_string\
    \ = \"\";\n    var reverse_suffix_postfix_string = \"\";\n    var prefix_postfix_length\
    \ = 0;\n    var suffix_postfix_length = 0;\n    var prefix_postfix_string = \"\
    \";\n    var suffix_postfix_string = \"\";\n    var prefix_length = 0;\n    var\
    \ suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\
    \";\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string = \"\
    \";\n    var prefix_postfix_length = 0;\n    var suffix_postfix_length = 0;\n\
    \    var prefix_postfix_string = \"\";\n    var suffix_postfix_string = \"\";\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var prefix_postfix_string = \"\"\
    ;\n    var suffix_postfix_string = \"\";\n    var prefix_postfix_length = 0;\n\
    \    var suffix_postfix_length = 0;\n    var prefix_postfix_string = \"\";\n \
    \   var suffix_postfix_string = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ prefix_postfix_string = \"\";\n    var suffix_postfix_string = \"\";\n    var\
    \ prefix_postfix_length = 0;\n    var suffix_postfix_length = 0;\n    var prefix_postfix_string\
    \ = \"\";\n    var suffix_postfix_string = \"\";\n    var prefix_length = 0;\n\
    \    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string\
    \ = \"\";\n    var prefix_postfix_length = 0;\n    var suffix_postfix_length =\
    \ 0;\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string = \"\
    \";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var prefix_postfix_string = \"\"\
    ;\n    var suffix_postfix_string = \"\";\n    var prefix_postfix_length = 0;\n\
    \    var suffix_postfix_length = 0;\n    var prefix_postfix_string = \"\";\n \
    \   var suffix_postfix_string = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ prefix_postfix_string = \"\";\n    var suffix_postfix_string = \"\";", "   \
    \ var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length =\
    \ 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0,\n       \
    \ prefix_start_index = 0,\n        prefix_end_index = 0,\n        suffix_start_index\
    \ = 0,\n        suffix_end_index = 0,\n        prefix_start_index = 0,\n     \
    \   prefix_end_index = 0,\n        suffix_start_index = 0,\n        suffix_end_index\
    \ = 0,\n        prefix_start_index = 0,\n        prefix_end_index = 0,\n     \
    \   suffix_start_index = 0,\n        suffix_end_index = 0,\n        prefix_start_index\
    \ = 0,\n        prefix_end_index = 0,\n        suffix_start_index = 0,\n     \
    \   suffix_end_index = 0,\n        prefix_start_index = 0,\n        prefix_end_index\
    \ = 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0,\n     \
    \   prefix_start_index = 0,\n        prefix_end_index = 0,\n        suffix_start_index\
    \ = 0,\n        suffix_end_index = 0,\n        prefix_start_index = 0,\n     \
    \   prefix_end_index = 0,\n        suffix_start_index = 0,\n        suffix_end_index\
    \ = 0,\n        prefix_start_index = 0,\n        prefix_end_index = 0,\n     \
    \   suffix_start_index = 0,\n        suffix_end_index = 0,\n        prefix_start_index\
    \ = 0,\n        prefix_end_index = 0,\n        suffix_start_index = 0,\n     \
    \   suffix_end_index = 0,\n        prefix_start_index = 0,\n        prefix_end_index\
    \ = 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0,\n     \
    \   prefix_start_index = 0,\n        prefix_end_index = 0,\n        suffix_start_index\
    \ = 0,\n        suffix_end_index = 0,\n        prefix_start_index = 0,\n     \
    \   prefix_end_index = 0,\n        suffix_start_index = 0,\n        suffix_end_index\
    \ = 0,\n        prefix_start_index = 0,\n        prefix_end_index = 0,\n     \
    \   suffix_start_index = 0,\n        suffix_end_index = 0,\n        prefix_start_index\
    \ = 0,\n        prefix_end_index = 0,\n        suffix_start_index = 0,\n     \
    \   suffix_end_index = 0,\n        prefix_start_index = 0,\n        prefix_end_index\
    \ = 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0,\n     \
    \   prefix_start_index = 0,\n        prefix_end_index = 0,\n        suffix_start_index\
    \ = 0,\n        suffix_end_index = 0,\n        prefix_start_index = 0,\n     \
    \   prefix_end_index = 0,\n        suffix_start_index = 0,\n        suffix_end_index\
    \ = 0,\n        prefix_start_index = 0,\n        prefix_end_index = 0,\n     \
    \   suffix_start_index = 0,\n        suffix_end_index = 0,\n        prefix_start_index\
    \ = 0,\n        prefix_end_index = 0,", "    var reversed_string = string\n  \
    \  var palindrome = \"\"\n    var longest_postfix_length = 0\n    var longest_postfix_index\
    \ = 0\n    for(var i = 0; i < string.length; i++){\n        var postfix_length\
    \ = string.length - i\n        if(postfix_length >= longest_postfix_length){\n\
    \            longest_postfix_length = postfix_length\n            longest_postfix_index\
    \ = i\n        }\n    }\n    for(var i = 0; i < longest_postfix_length; i++){\n\
    \        var postfix_string = string.substr(0, longest_postfix_index)\n      \
    \  var postfix_reversed_string = reversed_string.substr(0, reversed_string.length\
    \ - longest_postfix_length)\n        if(postfix_string == postfix_reversed_string){\n\
    \            palindrome += postfix_string\n            reversed_string = reversed_string.substr(0,\
    \ reversed_string.length - longest_postfix_length)\n        }\n    }\n    return\
    \ palindrome + reversed_string\n}\n", "    var reversed_string = \"\";\n    var\
    \ prefix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_string\
    \ = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n        var char\
    \ = string.charAt(i);\n        var postfix = string.substr(i, string.length -\
    \ i);\n        var postfix_reversed = postfix.split(\"\").reverse().join(\"\"\
    );\n        \n        if(postfix_reversed == postfix){\n            reversed_string\
    \ += char;\n            prefix_length++;\n        }\n        else{\n         \
    \   reversed_string += char;\n            longest_postfix_length++;\n        \
    \    longest_postfix_string += postfix_reversed;\n        }\n    }\n    \n   \
    \ if(longest_postfix_length == 0){\n        return string;\n    }\n    \n    longest_postfix_string\
    \ += reversed_string;\n    \n    return longest_postfix_string;\n}\n", "    var\
    \ reversed_string = string\n    var postfix_length = string.length\n    var prefix_length\
    \ = string.length\n    var palindrome = \"\"\n    var i = 0\n    var j = 0\n \
    \   while(i < postfix_length){\n        while(j >= 0 && reversed_string[j] !=\
    \ string[i]){\n            j--\n        }\n        if(j >= 0){\n            palindrome\
    \ += string[i]\n            i++\n        }else{\n            palindrome += string[i]\n\
    \            reversed_string = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n\
    \            postfix_length--\n            prefix_length--\n        }\n      \
    \  j++\n    }\n    return palindrome\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    var reversed = \"\";\n    var longest = 0;\n    var longestPostfix\
    \ = 0;\n    for(var i = 0; i < string.length; i++){\n        var postfix = string.substr(i,\
    \ string.length - i);\n        if(postfix.match(/[a-z]/) && postfix.match(/[a-z]/).length\
    \ == string.length - i){\n            longest = i;\n            longestPostfix\
    \ = postfix;\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n\
    \        var postfix = string.substr(i, string.length - i);\n        if(postfix.match(/[a-z]/)\
    \ && postfix.match(/[a-z]/).length == string.length - i){\n            reversed\
    \ = reversed + postfix.match(/[a-z]/).reverse().join(\"\");\n        }\n    }\n\
    \    return string + reversed + longestPostfix;\n}\n", "  if(string == \"\") return\
    \ \"\";\n  var palindrome = \"\";\n  var longest = 0;\n  var longestPalindrome\
    \ = \"\";\n  for(var i = 0; i <= string.length; i++){\n    var postfix = string.substr(0,\
    \ i);\n    var reverse = string.substr(i, string.length);\n    var palindromicSuffix\
    \ = postfix.substr(0, i) + reverse + postfix.substr(i);\n    var palindromic =\
    \ postfix.substr(0, i) + reverse + postfix;\n    if(longest < palindromic.length){\n\
    \      longest = palindromic.length;\n      longestPalindrome = palindromic;\n\
    \    }\n    if(longest == palindromic.length && palindromic != longestPalindrome){\n\
    \      palindrome = palindromic;\n    }\n  }\n  return palindrome;\n}\n", "  \
    \  var reversed_string = string.replace(/[^a-zA-Z0-9]/g,\"\").split(\"\").reverse().join(\"\
    \");\n    var postfix_length = string.length - reversed_string.length;\n    var\
    \ palindrome = string.substr(0,postfix_length) + reversed_string;\n    return\
    \ palindrome;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `make_palindrome(\"\
    aba\")`\n<|/ c |>\n<| c |>\nIt does, but only because you forgot to add `+` before\
    \ `reversed_string` when appending it to the string. `string.substr(0,postfix_length)\
    \ + reversed_string` should be `string.substr(0,postfix_length) + reversed_string\
    \ + \"\"`\n<|/ c |>\n<| c |>\nI didn't notice that `reversed_string` was a string.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    var postfix\
    \ = string.substr(0, string.length - 1);\n    var reverse = string.substr(0, string.length\
    \ - 1);\n    var palindrome = string.substr(0, string.length - 1);\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ - 1 - i]){\n            palindrome += string[i];\n        }\n    }\n    postfix\
    \ = postfix.substr(0, postfix.length - 1);\n    reverse = reverse.substr(0, reverse.length\
    \ - 1);\n    palindrome += reverse + postfix;\n    return palindrome;\n}\n", " \
    \   var palindrome = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromePrefix = \"\";\n    var longestPalindromeSuffix\
    \ = \"\";\n    var longestPalindromeSuffixLength = 0;\n    var longestPalindromeSuffixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseLength = 0;\n    var longestPalindromeSuffixReversePrefix\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffix = 0;\n    var longestPalindromeSuffixReverseSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverse = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReversePrefix = \"\";\n  \
    \  var longestPalindromeSuffixReverseSuffixReverseSuffix = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverse = \"\"\
    ;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseLength = 0;\n\
    \    var longestPalindromeSuffixReverseSuffixReverseSuffixReversePrefix = \"\"\
    ;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffix = 0;\n\
    \    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix\
    \ = \"\";\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverse\
    \ = \"\";\n    var ", "    var reversed = \"\";\n    var longest = \"\";\n   \
    \ for(var i = 0; i<string.length; i++){\n        var char = string.charAt(i);\n\
    \        if(char === char.toUpperCase()){\n            longest = char;\n     \
    \   }\n        else{\n            reversed = char + reversed;\n        }\n   \
    \ }\n    longest = longest + reversed;\n    return longest;\n}\n", "  var reversed_string\
    \ = \"\";\n  var prefix_length = 0;\n  for(var i = 0; i<string.length; i++){\n\
    \    if(string[i] == string[string.length-1-i]){\n      reversed_string += string[i];\n\
    \      prefix_length = i;\n    }\n  }\n  reversed_string += string.slice(prefix_length);\n\
    \  return reversed_string;\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n  \
    \  var prefix_postfix_reverse = \"\";\n    var suffix_postfix_reverse = \"\";\n\
    \    var prefix_postfix_reverse_length = 0;\n    var suffix_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix = \"\";\n    var suffix_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse = \"\";\n    var suffix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length = 0;\n    var\
    \ suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_",
  "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix = \"\";\n    var prefix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_", " \
    \   var reversed_string = string.reverse ();\n    var postfix_length = string.length\
    \ ();\n    var palindrome = string.slice (0, postfix_length);\n    var prefix_length\
    \ = postfix_length - 1;\n    var prefix_string = string.slice (prefix_length,\
    \ postfix_length);\n    var palindrome_suffix = string.slice (postfix_length);\n\
    \    var palindrome_suffix = palindrome_suffix.reverse ();\n    var palindrome_suffix\
    \ = palindrome_suffix.slice (0, 1);\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindrome_suffix.toLowerCase\
    \ ();\n    var palindrome_suffix = palindrome_suffix.toUpperCase ();\n    var\
    \ palindrome_suffix = palindrome_suffix.toLowerCase ();\n    var palindrome_suffix\
    \ = palindrome_suffix.toUpperCase ();\n    var palindrome_suffix = palindro",
  "    var palindrome = \"\";\n    var suffix;\n    var prefix;\n    var suffixLength;\n\
    \    var prefixLength;\n    var i;\n    var j;\n    var k;\n    var l;\n    var\
    \ m;\n    var n;\n    var longestPalindrome;\n    var longestPalindromeLength;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeIndex;\n    var longestPalindromeIndex;\n    var longestP",
  "    var reversed_string = string.reverse ();\n    var prefix_string = string.slice\
    \ (0, reversed_string.lastIndexOf (string));\n    var postfix_string = string.slice\
    \ (reversed_string.lastIndexOf (string) + 1);\n    return prefix_string + postfix_string;\n\
    }\n", "  var palindrome = \"\";\n  var suffix;\n  var prefix;\n  var suffixLength;\n\
    \  var prefixLength;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var\
    \ n;\n  var longestPalindrome;\n  var longestPalindromeLength;\n  var longestPalindromeIndex;\n\
    \  var longestPalindromePrefix;\n  var longestPalindromeSuffix;\n  var longestPalindromePrefixLength;\n\
    \  var longestPalindromeSuffixLength;\n  var longestPalindromePrefixIndex;\n \
    \ var longestPalindromeSuffixIndex;\n  var longestPalindromePrefixString;\n  var\
    \ longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var longestPalindromePrefixIndexString;\n\
    \  var longestPalindromeSuffixIndexString;\n  var longestPalindromePrefixString;\n\
    \  var longestPalindromeSuffixString;\n  var longestPalindromePrefixLengthString;\n\
    \  var longestPalindromeSuffixLengthString;\n  var ", "    var palindrome = \"\
    \";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var postfix_length\
    \ = 0;\n    var postfix = \"\";\n    var reverse = \"\";\n    var i = 0;\n   \
    \ var j = 0;\n    var k = 0;\n    \n    while(i < string.length){\n        postfix\
    \ = string.substr(i, 1);\n        postfix_length = postfix.length;\n        \n\
    \        for(j = i; j < string.length; j++){\n            reverse = string.substr(j,\
    \ 1);\n            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse();\n\
    \            reverse = reverse.reverse();\n            reverse = reverse.reverse",
  "    var reversed_string = \"\";\n    var longest_postfix_length = 0;\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length - 1 - i]){\n          \
    \  reversed_string += string[i];\n            longest_postfix_length = i;\n  \
    \          longest_postfix_index = i;\n        }\n    }\n    for(var i = 0; i\
    \ < string.length - longest_postfix_length; i++){\n        longest_postfix_string\
    \ += string[i];\n    }\n    longest_postfix_string = longest_postfix_string.reverse();\n\
    \    longest_postfix_string = longest_postfix_string.substr(0, longest_postfix_length);\n\
    \    string += longest_postfix_string;\n    return string;\n}\n", "    string\
    \ = string.toLowerCase();\n    var postfix = \"\";\n    var palindrome = \"\"\
    ;\n    var suffix;\n    var prefix;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n\
    \    var f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n\
    \    var f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n\
    \    var f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n\
    \    var f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n\
    \    var f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var\
    \ l;\n    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n\
    \    var s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var\
    \ y;\n    var z;\n    var a;\n    var b;\n    var c;", "  var palindrome = string;\n\
    \  var postfix = \"\";\n  var reverse = \"\";\n  var prefix_length = 0;\n  var\
    \ suffix_length = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix = \"\"\
    ;\n  var prefix_length_reverse = 0;\n  var suffix_length_reverse = 0;\n  var prefix_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse = \"\";\n  var prefix_length_reverse_reverse\
    \ = 0;\n  var suffix_length_reverse_reverse = 0;\n  var prefix_postfix_reverse_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_reverse = \"\";\n  var prefix_length_reverse_postfix\
    \ = \"\";\n  var suffix_length_reverse_postfix = \"\";\n  var prefix_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_reverse_postfix = \"\";\n  var prefix_length_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_length_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_reverse_postfix_reverse = \"\";\n  var\
    \ prefix_length_reverse_postfix_reverse_reverse = \"\";\n  var suffix_length_reverse_postfix_reverse_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse_reverse = \"\"\
    ;\n  var suffix_postfix_reverse_reverse_postfix_reverse_reverse = \"\";\n  var\
    \ prefix_length_reverse_postfix_reverse_reverse_postfix = \"\";\n  var suffix_length_reverse_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var prefix_length_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_length_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_length_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\";\n  var suffix_length_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_length_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var suffix_length_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_reverse_postfix_reverse_re", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var prefix_length =\
    \ 0\n    var suffix_length = 0\n    var suffix_index = 0\n    var prefix_index\
    \ = 0\n    var suffix_char\n    var prefix_char\n    var suffix_char_index\n \
    \   var prefix_char_length\n    var prefix_char_length_index\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffix_char_length\n\
    \    var suffix_char_length_index\n    var suffix_char_length\n    var suffix_char_length_index\n\
    \    var suffix_char_length\n    var suffix_char_length_index\n    var suffi",
  "    var palindrome = \"\",\n        postfix = \"\";\n    for(var i = 0; i < string.length;\
    \ i++){\n        postfix = string.substr(0, i) + string[i];\n        palindrome\
    \ += postfix;\n        palindrome += reverse(palindrome.substr(0, palindrome.length\
    \ - 1));\n    }\n    return palindrome;\n}\n", "    let reversed_string = string\n\
    \    let longest_postfix_string = \"\"\n    let longest_postfix_string_length\
    \ = 0\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ - 1 - i]){\n            reversed_string = reversed_string.slice(0, -1) + string[i]\n\
    \            longest_postfix_string_length = i\n        }\n    }\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ - 1 - i]){\n            reversed_string = reversed_string.slice(0, -1) + string[i]\n\
    \            longest_postfix_string = reversed_string.slice(0, longest_postfix_string_length)\
    \ + string[i]\n        }\n    }\n    return longest_postfix_string\n}\n", "  \
    \  var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == string[string.length - 1 - i]){\n            prefix_length++\n\
    \        }\n        else{\n            suffix_length++\n        }\n    }\n   \
    \ for(var i = 0; i < string.length; i++){\n        if(string[i] == string[string.length\
    \ - 1 - i]){\n            reversed_string = reversed_string.slice(0, -1) + string[i]\
    \ + reversed_string.slice(-1)\n        }\n    }\n    for(var i = 0; i < suffix_length;\
    \ i++){\n        palindrome = palindrome + reversed_string\n    }\n    for(var\
    \ i = 0; i < prefix_length; i++){\n        palindrome = palindrome + reversed_string\n\
    \    }\n    return palindrome\n}\n", "    var reversed_string = string\n    var\
    \ palindrome = \"\"\n    var prefix_length = 0\n    var postfix_length = 0\n \
    \   var is_palindrome = true\n    \n    while(is_palindrome){\n        postfix_length\
    \ = string.length\n        prefix_length = string.length\n        \n        for(var\
    \ i = 0; i < postfix_length; i++){\n            if(string[i] != string[postfix_length\
    \ -1 - i]){\n                is_palindrome = false\n                break\n  \
    \          }\n        }\n        \n        if(is_palindrome){\n            reversed_string\
    \ = reversed_string.substr(0, reversed_string.length - postfix_length) + reversed_string.substr(postfix_length)\n\
    \            palindrome = reversed_string\n        }\n    }\n    \n    return\
    \ palindrome\n}\n", "    var reversed_string = \"\";\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix = \"\";\n    var longest_postfix_index = 0;\n\
    \    var longest_postfix_index_length = 0;\n    var longest_postfix_index_string\
    \ = \"\";\n    var longest_postfix_index_string_length = 0;\n    var longest_postfix_index_string_char\
    \ = \"\";\n    var longest_postfix_index_string_char_length = 0;\n    var longest_postfix_index_string_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_length = 0;\n    var\
    \ longest_postfix_index_string_char_char_char = \"\";\n    var longest_postfix_index_string_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char = \"\";\n   \
    \ var longest_postfix_index_string_char_char_char_char_length = 0;\n    var longest_postfix_index_string_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char = \"\
    \";\n    var longest_postfix_index_string_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\";\n    var longest_postfix_index_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length",
  "    var palindrome = \"\";\n    var stringLength = string.length;\n    var stringPrefix\
    \ = \"\";\n    var stringSuffix = \"\";\n    var stringReverse = \"\";\n    var\
    \ longestPalindrome = 0;\n    var longestPalindromeLength = 0;\n    var longestPalindromePrefix\
    \ = \"\";\n    var longestPalindromeSuffix = \"\";\n    var longestPalindromeReverse\
    \ = \"\";\n    var longestPalindromeReverseLength = 0;\n    var longestPalindromeReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseSuffix = \"\";\n    var longestPalindromeReverseReverse\
    \ = \"\";\n    var longestPalindromeReverseReverseLength = 0;\n    var longestPalindromeReverseReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseReverseSuffix = \"\";\n    var longestPalindromeReverseReverseReverse\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseLength = 0;\n    var\
    \ longestPalindromeReverseReverseReversePrefix = \"\";\n    var longestPalindromeReverseReverseReverseSuffix\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseReverse = \"\";\n   \
    \ var longestPalindromeReverseReverseReverseReverseLength = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseReverseSuffix = \"\"\
    ;\n    var longestPalindromeReverseReverseReverseReverseReverse = \"\";\n    var\
    \ longestPalindromeReverseReverseReverseReverseReverseLength = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseReverseSuffix = \"\"\
    ;\n    var longestPalindromeReverseReverseReverseReverseReverse = \"\";\n    var\
    \ longestPalindromeReverseReverseReverseReverseLength = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseReverseSuffix = \"\"\
    ;\n    var longestPalindromeReverseReverseReverseReverseReverse = \"\";\n    var\
    \ longestPalindromeReverseReverseReverseReverseLength = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix\
    \ = \"\";\n    var longestPalindromeReverseReverseReverseReverseSuffix = \"\"\
    ;\n    var longestPalindromeReverseReverseReverseReverse = \"\";\n    var longestPalindromeReverseReverseReverseReverseLength\
    \ = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix = \"\";\n\
    \    var longestPalindromeReverseReverseReverseReverseSuffix = \"\";\n    var\
    \ longestPalindromeReverseReverseReverseReverseReverse = \"\";\n    var longestPalindromeReverseReverseReverseReverseLength\
    \ = 0;\n    var longestPalindromeReverseReverseReverseReversePrefix = \"\";\n\
    \    var ", "    var reversed_string = \"\";\n    var longest_postfix = \"\";\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_index = 0;\n   \
    \ for(var i = 0; i < string.length; i++){\n        var postfix = string.substr(i,\
    \ string.length - i);\n        if(postfix === postfix.toLowerCase()){\n      \
    \      reversed_string += postfix.toLowerCase();\n            longest_postfix_length\
    \ = i;\n            longest_postfix_index = i;\n        }\n    }\n    for(var\
    \ i = 0; i < longest_postfix_length; i++){\n        var postfix = string.substr(longest_postfix_index,\
    \ longest_postfix_length);\n        if(postfix === postfix.toLowerCase()){\n \
    \           reversed_string += postfix.toLowerCase();\n            longest_postfix_length\
    \ = i;\n            longest_postfix_index = i;\n        }\n    }\n    for(var\
    \ i = 0; i < string.length; i++){\n        var postfix = string.substr(i, string.length\
    \ - i);\n        if(postfix === postfix.toLowerCase()){\n            reversed_string\
    \ += postfix.toLowerCase();\n            longest_postfix_length = i;\n       \
    \     longest_postfix_index = i;\n        }\n    }\n    return reversed_string;\n\
    }\n", "    var postfix = \"\";\n    var palindrome = \"\";\n    var len = string.length;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    while(i < len){\n       \
    \ postfix += string[i];\n        i++;\n    }\n    while(j < len){\n        palindrome\
    \ += string[j];\n        j++;\n    }\n    while(k < (len-postfix)){\n        palindrome\
    \ += string[k];\n        k++;\n    }\n    return palindrome+postfix;\n}\n", " \
    \   var reversed_string = string.reverse ();\n    var prefix_string = string.slice\
    \ (0, reversed_string.lastIndexOf (string));\n    var postfix_string = string.slice\
    \ (reversed_string.lastIndexOf (string) + 1);\n    return prefix_string + postfix_string;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    var postfix = \"\
    \";\n    var reverse = \"\";\n    var palindrome = \"\";\n    var i = 0;\n   \
    \ var j = 0;\n    for(i = 0; i<string.length; i++){\n        postfix += string[i];\n\
    \    }\n    for(i = 0; i<string.length; i++){\n        for(j = i; j<string.length;\
    \ j++){\n            reverse = reverse + string[j];\n        }\n        if(postfix.toLowerCase()\
    \ == reverse.toLowerCase()){\n            palindrome = postfix + reverse;\n  \
    \          break;\n        }\n    }\n    return palindrome;\n}\n", "    var palindrome\
    \ = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromeIndex = 0;\n    var longestPalindromePrefix =\
    \ \"\";\n    var longestPalindromeSuffix = \"a\";\n    var longestPalindromeSuffixIndex\
    \ = 0;\n    var longestPalindromeSuffixLength = 0;\n    var longestPalindromeSuffixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseIndex = 0;\n    var longestPalindromeSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex2 = 0;\n    var longestPalindromeSuffixReverseLength2\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex3 = 0;\n    var longestPalindromeSuffixReverseLength3\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex4 = 0;\n    var longestPalindromeSuffixReverseLength4\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex5 = 0;\n    var longestPalindromeSuffixReverseLength5\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex6 = 0;\n    var longestPalindromeSuffixReverseLength6\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex7 = 0;\n    var longestPalindromeSuffixReverseLength7\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex8 = 0;\n    var longestPalindromeSuffixReverseLength8\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex9 = 0;\n    var longestPalindromeSuffixReverseLength9\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex10 = 0;\n    var longestPalindromeSuffixReverseLength10\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex11 = 0;\n    var longestPalindromeSuffixReverseLength11\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex12 = 0;\n    var longestPalindromeSuffixReverseLength12\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex13 = 0;\n    var longestPalindromeSuffixReverseLength13\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex14 = 0;\n    var longestPalindromeSuffixReverseLength14\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex15 = 0;\n    var longestPalindromeSuffixReverseLength15\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex16 = 0;\n    var longestPalindromeSuffixReverseLength16\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex17 = 0;\n    var longestPalindromeSuffixReverseLength17\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex18 = 0;\n    var longestPalindromeSuffixReverseLength18\
    \ = 0;\n    var longestPalindrome", "    var palindrome = \"\",\n        postfix\
    \ = \"\";\n    \n    for(var i = 0, len = string.length; i < len; i++){\n    \
    \    postfix += string[i];\n    }\n    \n    postfix = reverse(postfix);\n   \
    \ \n    for(var i = 0, len = string.length; i < len; i++){\n        palindrome\
    \ += string[i];\n    }\n    \n    palindrome += postfix;\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var string_reverse = \"\";\n    var string_prefix = \"\";\n    var\
    \ string_suffix = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n \
    \       string_prefix = string.substring(0, i);\n        string_suffix = string.substring(i);\n\
    \        \n        if(string_suffix.match(string_reverse)){\n            suffix_length\
    \ = string_suffix.length;\n            prefix_length = string_prefix.length;\n\
    \        }\n        \n        if(string_suffix.match(string_reverse) && string_prefix.match(string_reverse)){\n\
    \            palindrome = string_prefix + string_suffix;\n            string_reverse\
    \ = string_reverse.substring(0, suffix_length) + string_reverse.substring(suffix_length);\n\
    \            \n            if(i + prefix_length == string.length){\n         \
    \       string_reverse = string_reverse.substring(0, prefix_length) + string_reverse.substring(prefix_length);\n\
    \            }\n        }\n    }\n    \n    return palindrome;\n}\n", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var palindrome_index\
    \ = 0\n    var palindrome_length = string.length\n    var palindrome_prefix_length\
    \ = 0\n    var palindrome_suffix_length = 0\n    var palindrome_prefix_string\
    \ = \"\"\n    var palindrome_suffix_string = \"\"\n    var palindrome_prefix_index\
    \ = 0\n    var palindrome_suffix_index = 0\n    var palindrome_prefix_length_index\
    \ = 0\n    var palindrome_suffix_length_index = 0\n    var palindrome_prefix_string_index\
    \ = 0\n    var palindrome_suffix_string_index = 0\n    var palindrome_prefix_length_string_index\
    \ = 0\n    var palindrome_suffix_length_string_index = 0\n    var palindrome_prefix_string_length\
    \ = 0\n    var palindrome_suffix_string_length = 0\n    var palindrome_prefix_string_length_index\
    \ = 0\n    var palindrome_suffix_string_length_index = 0\n    var palindrome_prefix_string_length_string_index\
    \ = 0\n    var palindrome_suffix_string_length_string_index = 0\n    var palindrome_prefix_string_length_string_length\
    \ = 0\n    var palindrome_suffix_string_length_string_length = 0\n    var palindrome_prefix_string_length_string_length_index\
    \ = 0\n    var palindrome_suffix_string_length_string_length_index = 0\n    var\
    \ palindrome_prefix_string_length_string_length_string_length = 0\n    var palindrome_suffix_string_length_string_length_string_length\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_string_length\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_string_length\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var palindrome_prefix_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var palindrome_suffix_string_length_string_length_string_length_string_length",
  "    var palindrome = string;\n    var palindrome_reverse = \"\";\n    var prefix_length\
    \ = 0;\n    var postfix_length = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == string[string.length - 1 - i]){\n            postfix_length++;\n\
    \        }\n        else{\n            postfix_length = 0;\n        }\n      \
    \  if(postfix_length == 2){\n            prefix_length++;\n        }\n       \
    \ else{\n            prefix_length = 0;\n        }\n        if(prefix_length ==\
    \ string.length - postfix_length){\n            palindrome_reverse += string[i];\n\
    \        }\n    }\n    palindrome_reverse += string[string.length - postfix_length];\n\
    \    return palindrome_reverse;\n}\n", "    var reversed_string = string.reverse\
    \ ();\n    var prefix_length = string.length ();\n    var postfix_length = string.reverse\
    \ ().length ();\n    var palindrome = string.slice (0, prefix_length + postfix_length);\n\
    \    palindrome = palindrome + reversed_string.slice (0, postfix_length);\n  \
    \  return palindrome;\n}\n", "    let palindrome = string;\n    let reverse =\
    \ \"\";\n    let prefix_length = 0;\n    let suffix_length = 0;\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            prefix_length++;\n        }\n        else{\n         \
    \   suffix_length++;\n        }\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            reverse\
    \ = reverse + string[i];\n        }\n        else{\n            reverse = reverse\
    \ + string[string.length -1 -i];\n        }\n    }\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            palindrome\
    \ = palindrome + reverse;\n        }\n        else{\n            palindrome =\
    \ palindrome + string[i];\n        }\n    }\n    return palindrome;\n}\n", " \
    \   var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var string_reverse = \"\";\n    var string_prefix = \"\";\n    var\
    \ string_suffix = \"\";\n    var string_prefix_length = 0;\n    var string_suffix_length\
    \ = 0;\n    var string_prefix_reverse = \"\";\n    var string_suffix_reverse =\
    \ \"\";\n    var string_prefix_reverse_index = 0;\n    var string_suffix_reverse_index\
    \ = 0;\n    var string_prefix_reverse_index2 = 0;\n    var string_suffix_reverse_index2\
    \ = 0;\n    var string_prefix_reverse_index3 = 0;\n    var string_suffix_reverse_index3\
    \ = 0;\n    var string_prefix_reverse_index4 = 0;\n    var string_suffix_reverse_index4\
    \ = 0;\n    var string_prefix_reverse_index5 = 0;\n    var string_suffix_reverse_index5\
    \ = 0;\n    var string_prefix_reverse_index6 = 0;\n    var string_suffix_reverse_index6\
    \ = 0;\n    var string_prefix_reverse_index7 = 0;\n    var string_suffix_reverse_index7\
    \ = 0;\n    var string_prefix_reverse_index8 = 0;\n    var string_suffix_reverse_index8\
    \ = 0;\n    var string_prefix_reverse_index9 = 0;\n    var string_suffix_reverse_index9\
    \ = 0;\n    var string_prefix_reverse_index10 = 0;\n    var string_suffix_reverse_index10\
    \ = 0;\n    var string_prefix_reverse_index11 = 0;\n    var string_suffix_reverse_index11\
    \ = 0;\n    var string_prefix_reverse_index12 = 0;\n    var string_suffix_reverse_index12\
    \ = 0;\n    var string_prefix_reverse_index13 = 0;\n    var string_suffix_reverse_index13\
    \ = 0;\n    var string_prefix_reverse_index14 = 0;\n    var string_suffix_reverse_index14\
    \ = 0;\n    var string_prefix_reverse_index15 = 0;\n    var string_suffix_reverse_index15\
    \ = 0;\n    var string_prefix_reverse_index16 = 0;\n    var string_suffix_reverse_index16\
    \ = 0;\n    var string_prefix_reverse_index17 = 0;\n    var string_suffix_reverse_index17\
    \ = 0;\n    var string_prefix_reverse_index18 = 0;\n    var string_suffix_reverse_index18\
    \ = 0;\n    var string_prefix_reverse_index19 = 0;\n    var string_suffix_reverse_index19\
    \ = 0;\n    var string_prefix_reverse_index20 = 0;\n    var string_suffix_reverse_index20\
    \ = 0;\n    var string_prefix_reverse_index21 = 0;\n    var string_suffix_reverse_index21\
    \ = 0;\n    var string_prefix_reverse_index22 = 0;\n    var string_suffix_reverse_index22\
    \ = 0;\n    var string_prefix_reverse_index23 = 0;\n    var string_suffix_reverse_index23\
    \ = 0;\n    var string_prefix_reverse_index24 = 0;\n    var string_suffix_reverse_index24\
    \ = 0;\n    var string_prefix_reverse_index25 = 0;\n    var string_suffix_reverse_index25\
    \ = 0;\n    var string_prefix_reverse_index26 = 0;\n    var string_suffix_reverse_index26\
    \ = 0;\n    var string_prefix_reverse_index27 = 0;\n    var string_suffix_reverse_index27\
    \ = 0;\n    var string_prefix_", "    var reversed_string = string\n    var longest_postfix_of_string\
    \ = string.length\n    var longest_postfix_of_string_palindrome = string.length\n\
    \    var longest_postfix_of_string_palindrome_length = string.length\n    var\
    \ longest_postfix_of_string_palindrome_length_counter = 0\n    var longest_postfix_of_string_palindrome_length_counter_reversed\
    \ = 0\n    var longest_postfix_of_string_palindrome_length_counter_reversed_reversed\
    \ = 0\n    var longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter\
    \ = 0\n    var longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed\
    \ = 0\n    for(var i = 0; i <= string.length; i++){\n        if(string[i] == string[string.length\
    \ - 1 - i]){\n            longest_postfix_of_string_palindrome_length_counter++\n\
    \            longest_postfix_of_string_palindrome_length_counter_reversed++\n\
    \            if(longest_postfix_of_string_palindrome_length_counter == longest_postfix_of_string_palindrome_length_counter_reversed){\n\
    \                longest_postfix_of_string_palindrome_length_counter_reversed_reversed++\n\
    \                if(longest_postfix_of_string_palindrome_length_counter_reversed\
    \ == longest_postfix_of_string_palindrome_length_counter_reversed_reversed){\n\
    \                    longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter++\n\
    \                    if(longest_postfix_of_string_palindrome_length_counter_reversed_counter\
    \ == longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter){\n\
    \                        longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed++\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   var longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed_reversed\
    \ = longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed\n\
    \    var longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed_reversed_counter_reversed\
    \ = longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed_reversed\n\
    \    var longest_postfix_of_string_palindrome_length_counter_reversed_reversed_counter_reversed_reversed_counter_reversed_reversed\
    \ = longest_postfix_of_string_palin", "    var palindrome = string;\n    var palindrome_length\
    \ = string.length;\n    var palindrome_suffix = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_prefix_string_reverse\
    \ = \"\";\n    var palindrome_prefix_string_length = palindrome_prefix_string.length;\n\
    \    var palindrome_prefix_string_suffix = \"\";\n    var palindrome_prefix_string_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_length = palindrome_prefix_string_suffix.length;\n\
    \    var palindrome_prefix_string_suffix_suffix = \"\";\n    var palindrome_prefix_string_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_length = palindrome_prefix_string_suffix_suffix.length;\n\
    \    var palindrome_prefix_string_suffix_suffix_suffix = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_length = palindrome_prefix_string_suffix_suffix_suffix.length;\n\
    \    var palindrome_prefix_string_suffix_suffix_suffix_suffix = \"\";\n    var\
    \ palindrome_prefix_string_suffix_suffix_suffix_suffix_reverse = \"\";\n    var\
    \ palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_length = palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix.length;\n\
    \    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_reverse =\
    \ \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix.length;\n\
    \    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_string_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffi",
  "  var longest = find_longest_palindrome(string);\n  var reversed = string+reverse(string,longest);\n\
    \  return reversed;\n}\n", "  if(string === \"\"){\n    return \"\";\n  }\n  var\
    \ postfix = \"\";\n  var palindrome = \"\";\n  var suffix;\n  var prefix;\n  var\
    \ i;\n  for(i = string.length - 1; i >= 0; i--){\n    suffix = string.substr(0,\
    \ i);\n    prefix = string.substr(0, i);\n    if(isPalindrome(suffix) && isPalindrome(prefix)){\n\
    \      postfix = postfix + suffix;\n      palindrome = palindrome + prefix;\n\
    \      string = string.substr(0, i) + postfix + string.substr(i);\n    }\n  }\n\
    \  return string;\n}\n", "    var postfix = \"\";\n    var longest = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        var char = string[i];\n        var\
    \ reverse = \"\";\n        for(var j = i; j >= 0; j--){\n            reverse =\
    \ reverse + char;\n        }\n        if(reverse == string){\n            postfix\
    \ = postfix + char;\n            longest = i;\n        }\n    }\n    return postfix\
    \ + string.substr(0, longest);\n}\n", "    var palindrome = \"\",\n        postfix\
    \ = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n        postfix\
    \ = string.substr(0, i);\n        palindrome += postfix;\n        palindrome +=\
    \ string[i];\n        palindrome += postfix;\n    }\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ palindrome_string = \"\";\n    var palindrome_length = string.length;\n    var\
    \ palindrome_prefix_length = 0;\n    var palindrome_suffix_length = 0;\n    var\
    \ palindrome_prefix_string = \"\";\n    var palindrome_suffix_string = \"\";\n\
    \    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_prefix_length = string.length;\n    var palindrome_suffix_length\
    \ = string.length;\n    var palindrome_prefix_string", "  var reversed_string\
    \ = \"\";\n  var prefix_length = 0;\n  var postfix_length = 0;\n  var palindrome\
    \ = \"\";\n  \n  if(string.length <= 1){\n    return string;\n  }\n  \n  while(postfix_length\
    \ < string.length){\n    postfix_length = string.length - postfix_length;\n  \
    \  postfix_string = string.substr(postfix_length, string.length);\n    \n    if(postfix_string.length\
    \ <= 1){\n      break;\n    }\n    \n    reversed_string = postfix_string.reverse();\n\
    \    \n    if(reversed_string == postfix_string){\n      palindrome = string.substr(0,\
    \ postfix_length) + reversed_string;\n      break;\n    }\n  }\n  \n  return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var longestPalindrome = \"\";\n    var\
    \ longestPalindromeLength = 0;\n    var longestPalindromeIndex = 0;\n    var longestPalindromePrefix\
    \ = \"\";\n    var longestPalindromeSuffix = \"\";\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixIndex = 0;\n    var longestPalindromeSuffixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseLength = 0;\n    var longestPalindromeSuffixReverseIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseReverse = \"\";\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseReverseIndex = 0;\n    var longestPalindromeSuffixReverseReverseReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseReverseReverseLength = 0;\n \
    \   var longestPalindromeSuffixReverseReverseReverseIndex = 0;\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseReverseReverseLength = 0;\n \
    \   var longestPalindromeSuffixReverseReverseReverseIndex = 0;\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseReverseReverseReverseLength =\
    \ 0;\n    var longestPalindromeSuffixReverseReverseReverseReverseIndex = 0;\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\";\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0;\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseIndex = 0;\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverse = \"\";\n    var longestPalindromeSuffixReverseReverseReverseReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseReverseReverseReverseIndex = 0;\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\";\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0;\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseIndex = 0;\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\";\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n    var longestPalindromeSuffixReverseReverseReverseIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseReverseReverseReverse = \"\";\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n    var\
    \ longestPalindromeSuffixReverseReverseReverseIndex = 0;\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseReverseReverseReverseLength =\
    \ 0;\n    var longestPalindromeSuffixReverseReverseReverseIndex = 0;\n    var\
    \ longestPalindrome", "  var reversed_string = string\n  for(var i = string.length\
    \ - 1; i >= 0; i--){\n    reversed_string = reversed_string + string.charAt(i)\n\
    \  }\n  return reversed_string\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n  \
    \  var prefix_postfix_reverse = \"\";\n    var suffix_postfix_reverse = \"\";\n\
    \    var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = ", "  var reversed_string\
    \ = string\n  for(var i = string.length - 1; i >= 0; i--){\n    reversed_string\
    \ = reversed_string + string.charAt(i)\n  }\n  return reversed_string\n}\n", " \
    \   var palindrome = \"\";\n    var palindrome_length = string.length;\n    var\
    \ palindrome_suffix = \"\";\n    var palindrome_prefix = \"\";\n    var palindrome_prefix_length\
    \ = string.length;\n    var palindrome_prefix_reverse = \"\";\n    var palindrome_prefix_reverse_index\
    \ = 0;\n    var palindrome_prefix_reverse_index2 = 0;\n    var palindrome_prefix_reverse_index3\
    \ = 0;\n    var palindrome_prefix_reverse_index4 = 0;\n    var palindrome_prefix_reverse_index5\
    \ = 0;\n    var palindrome_prefix_reverse_index6 = 0;\n    var palindrome_prefix_reverse_index7\
    \ = 0;\n    var palindrome_prefix_reverse_index8 = 0;\n    var palindrome_prefix_reverse_index9\
    \ = 0;\n    var palindrome_prefix_reverse_index10 = 0;\n    var palindrome_prefix_reverse_index11\
    \ = 0;\n    var palindrome_prefix_reverse_index12 = 0;\n    var palindrome_prefix_reverse_index13\
    \ = 0;\n    var palindrome_prefix_reverse_index14 = 0;\n    var palindrome_prefix_reverse_index15\
    \ = 0;\n    var palindrome_prefix_reverse_index16 = 0;\n    var palindrome_prefix_reverse_index17\
    \ = 0;\n    var palindrome_prefix_reverse_index18 = 0;\n    var palindrome_prefix_reverse_index19\
    \ = 0;\n    var palindrome_prefix_reverse_index20 = 0;\n    var palindrome_prefix_reverse_index21\
    \ = 0;\n    var palindrome_prefix_reverse_index22 = 0;\n    var palindrome_prefix_reverse_index23\
    \ = 0;\n    var palindrome_prefix_reverse_index24 = 0;\n    var palindrome_prefix_reverse_index25\
    \ = 0;\n    var palindrome_prefix_reverse_index26 = 0;\n    var palindrome_prefix_reverse_index27\
    \ = 0;\n    var palindrome_prefix_reverse_index28 = 0;\n    var palindrome_prefix_reverse_index29\
    \ = 0;\n    var palindrome_prefix_reverse_index30 = 0;\n    var palindrome_prefix_reverse_index31\
    \ = 0;\n    var palindrome_prefix_reverse_index32 = 0;\n    var palindrome_prefix_reverse_index33\
    \ = 0;\n    var palindrome_prefix_reverse_index34 = 0;\n    var palindrome_prefix_reverse_index35\
    \ = 0;\n    var palindrome_prefix_reverse_index36 = 0;\n    var palindrome_prefix_reverse_index37\
    \ = 0;\n    var palindrome_prefix_reverse_index38 = 0;\n    var palindrome_prefix_reverse_index39\
    \ = 0;\n    var palindrome_prefix_reverse_index40 = 0;\n    var palindrome_prefix_reverse_index41\
    \ = 0;\n    var palindrome_prefix_reverse_index42 = 0;\n    var palindro", " \
    \   let reversed_string = string\n    let palindrome = \"\"\n    let prefix_length\
    \ = 0\n    let suffix_length = 0\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === string[string.length - 1 - i]){\n            suffix_length++\n\
    \        }\n        if(string[i] === string[string.length - 1 - i] && suffix_length\
    \ >= prefix_length){\n            reversed_string = reversed_string.slice(0, reversed_string.length\
    \ - suffix_length) + string[i] + reversed_string.slice(reversed_string.length\
    \ - suffix_length)\n            suffix_length = 0\n            prefix_length++\n\
    \        }\n    }\n    palindrome = reversed_string\n    return palindrome\n}\n",
  "    let reversed_string = \"\";\n    let longest_postfix_string = \"\";\n    let\
    \ longest_postfix_string_length = 0;\n    let longest_postfix_string_length_with_prefix\
    \ = \"\";\n    let longest_postfix_string_length_with_prefix_length = 0;\n   \
    \ let longest_postfix_string_length_with_prefix_and_suffix = \"\";\n    let longest_postfix_string_length_with_prefix_and_suffix_length\
    \ = 0;\n    let longest_postfix_string_length_with_prefix_and_suffix_and_suffix\
    \ = \"\";\n    let longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ string[string.length -1 -i]){\n            reversed_string += string[i];\n \
    \           longest_postfix_string += string[i];\n            longest_postfix_string_length\
    \ += 1;\n            longest_postfix_string_length_with_prefix += 1;\n       \
    \     longest_postfix_string_length_with_prefix_length += 1;\n            longest_postfix_string_length_with_prefix_and_suffix\
    \ += 1;\n            longest_postfix_string_length_with_prefix_and_suffix_length\
    \ += 1;\n            longest_postfix_string_length_with_prefix_and_suffix_and_suffix\
    \ += 1;\n        }\n    }\n    for(let i = 0; i < string.length; i++){\n     \
    \   if(string[i] === string[string.length -1 -i]){\n            reversed_string\
    \ += string[i];\n            longest_postfix_string += string[i];\n          \
    \  longest_postfix_string_length += 1;\n            longest_postfix_string_length_with_prefix\
    \ += 1;\n            longest_postfix_string_length_with_prefix_length += 1;\n\
    \            longest_postfix_string_length_with_prefix_and_suffix += 1;\n    \
    \        longest_postfix_string_length_with_prefix_and_suffix_length += 1;\n \
    \           longest_postfix_string_length_with_prefix_and_suffix_and_suffix +=\
    \ 1;\n        }\n    }\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length -1 -i]){\n            reversed_string += string[i];\n\
    \            longest_postfix_string += string[i];\n            longest_postfix_string_length\
    \ += 1;\n            longest_postfix_string_length_with_prefix += 1;\n       \
    \     longest_postfix_string_length_with_prefix_length += 1;\n            longest_postfix_string_length_with_prefix_and_suffix\
    \ += 1;\n            longest_postfix_string_length_with_prefix_and_suffix_length\
    \ += 1;\n            longest_postfix_string_length_with_prefix_and_suffix_and_suffix\
    \ += 1;\n        }\n    }\n    for(let i = 0; i < string.length; i++){\n     \
    \   if(string[i] === string[string.length -1 -i]){\n", "  if(string === \"\"){\n\
    \    return \"\";\n  }\n  var postfix = \"\";\n  var longestPalindrome = \"\"\
    ;\n  var longestPalindromeLength = 0;\n  var longestPalindromePrefix = \"\";\n\
    \  var longestPalindromeSuffix = \"\";\n  var longestPalindromePrefixLength =\
    \ 0;\n  var longestPalindromeSuffixLength = 0;\n  var longestPalindromeSuffixReverse\
    \ = \"\";\n  var longestPalindromePrefixReverse = \"\";\n  var longestPalindromePrefixReverseLength\
    \ = 0;\n  var longestPalindromeSuffixReverseLength = 0;\n  var longestPalindromePrefixReverseString\
    \ = \"\";\n  var longestPalindromeSuffixReverseString = \"\";\n  var longestPalindromePrefixReverseStringLength\
    \ = 0;\n  var longestPalindromeSuffixReverseStringLength = 0;\n  var longestPalindromePrefixReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseLength = 0;\n  var\
    \ longestPalindromePrefixReverseStringReverseString = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverse = \"\"\
    ;\n  var longestPalindromeSuffixReverseStringReverseStringReverseLength = 0;\n\
    \  var longestPalindromePrefixReverseStringReverseStringReverseString = \"\";\n\
    \  var longestPalindromeSuffixReverseStringReverseStringReverseStringLength =\
    \ 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverseString\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPalindromePrefixReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPalindromeSuffixReverseStringReverseString", "  var palindrome\
    \ = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var postfix_length\
    \ = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix = \"\";\n  var postfix_postfix\
    \ = \"\";\n  var postfix_postfix_reverse = \"\";\n  var postfix_postfix_reverse_index\
    \ = 0;\n  var postfix_postfix_reverse_length = 0;\n  var postfix_postfix_reverse_string\
    \ = \"\";\n  var postfix_postfix_reverse_string_index = 0;\n  var postfix_postfix_reverse_string_length\
    \ = 0;\n  var postfix_postfix_reverse_string_length_index = 0;\n  var postfix_postfix_reverse_string_length_length\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_index = 0;\n  var postfix_postfix_reverse_string_length_length_length\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_index = 0;\n\
    \  var postfix_postfix_reverse_string_length_length_length_length = 0;\n  var\
    \ postfix_postfix_reverse_string_length_length_length_length_index = 0;\n  var\
    \ postfix_postfix_reverse_string_length_length_length_length_length = 0;\n  var\
    \ postfix_postfix_reverse_string_length_length_length_length_length_index = 0;\n\
    \  var postfix_postfix_reverse_string_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0;\n  var postfix_postfix_reverse_string_length_", "    var postfix = \"\"\
    ;\n    var longest = 0;\n    var palindrome = \"\";\n    for(var i = 0; i < string.length;\
    \ i++){\n        var c = string.charAt(i);\n        var post = string.substr(0,\
    \ i) + string.substr(i + 1);\n        if(post == postfix.reverse()){\n       \
    \     longest = i;\n            palindrome = post;\n        }\n    }\n    postfix\
    \ = string.substr(0, longest);\n    postfix = postfix.reverse();\n    postfix\
    \ = postfix.substr(0, longest);\n    return palindrome + postfix;\n}\n", "   \
    \ var reversed_string = string.reverse ();\n    var palindrome = string.slice\
    \ (0, string.length - 1) + reversed_string;\n    return palindrome;\n}\n", " \
    \   var palindrome = \"\",\n        postfix = \"\";\n    \n    for(var i = 0;\
    \ i < string.length; i++){\n        postfix += string[i];\n    }\n    \n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] === postfix[postfix.length\
    \ - i]){\n            palindrome += string[i];\n        }\n    }\n    \n    return\
    \ palindrome;\n}\n", "  var reversed_string = string.replace(/./g, function(c){\n\
    \    return c.toUpperCase();\n  });\n  var palindrome = reversed_string;\n  var\
    \ prefix_length = string.length - reversed_string.length;\n  var prefix_string\
    \ = string.slice(0, prefix_length);\n  var postfix_string = string.slice(prefix_length);\n\
    \  var postfix_length = postfix_string.length - reversed_string.length;\n  var\
    \ postfix_reversed_string = postfix_string.replace(/./g, function(c){\n    return\
    \ c.toUpperCase();\n  });\n  var postfix_reversed_length = postfix_string.length\
    \ - postfix_reversed_string.length;\n  if(postfix_reversed_length < prefix_length){\n\
    \    prefix_length = postfix_reversed_length;\n    prefix_string = postfix_string;\n\
    \    postfix_string = postfix_reversed_string;\n    postfix_length = postfix_string.length\
    \ - postfix_reversed_string.length;\n    postfix_reversed_string = postfix_string.replace(/./g,\
    \ function(c){\n      return c.toUpperCase();\n    });\n    postfix_reversed_length\
    \ = postfix_string.length - postfix_reversed_string.length;\n  }\n  if(postfix_reversed_length\
    \ > prefix_length){\n    postfix_length = prefix_length;\n    postfix_string =\
    \ prefix_string;\n    prefix_string = reversed_string;\n    prefix_length = string.length\
    \ - reversed_string.length;\n  }\n  if(prefix_length < 1 || postfix_length < 1){\n\
    \    return \"\";\n  }\n  if(prefix_length == 1){\n    return postfix_string;\n\
    \  }\n  if(postfix_length == 1){\n    return prefix_string;\n  }\n  var palindrome_length\
    \ = palindrome.length;\n  var palindrome_prefix_length = prefix_string.length;\n\
    \  var palindrome_postfix_length = postfix_string.length;\n  var palindrome_prefix_string\
    \ = prefix_string;\n  var palindrome_postfix_string = postfix_string;\n  var palindrome_prefix_reversed_length\
    \ = palindrome_prefix_string.length - palindrome_prefix_length;\n  var palindrome_prefix_reversed_string\
    \ = palindrome_prefix_string.slice(0, palindrome_prefix_length);\n  var palindrome_postfix_reversed_length\
    \ = palindrome_postfix_string.length - palindrome_postfix_length;\n  var palindrome_postfix_reversed_string\
    \ = palindrome_postfix_string.slice(0, palindrome_postfix_length);\n  var palindrome_prefix_reversed_string\
    \ = palindrome_prefix_reversed_string.toUpperCase();\n  var palindrome_postfix_reversed_string\
    \ = palindrome_postfix_reversed_string.toUpperCase();\n  if(palindrome_prefix_reversed_string\
    \ == palindrome_postfix_reversed_string){", "    var palindrome = \"\";\n    var\
    \ prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\"\
    ;\n    var suffix_postfix = \"\";\n    var prefix_reverse = \"\";\n    var suffix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse = \"\";\n    var suffix_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_length = 0;\n    var suffix_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix = \"\";\n    var suffix_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse = \"\";\n    var suffix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length = 0;\n    var\
    \ suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_", " \
    \   var palindrome = string;\n    var postfix = \"\";\n    var suffix;\n    var\
    \ prefix;\n    var reverse;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var found;\n    var foundLength;\n    var foundLength2;\n\
    \    var foundLength3;\n    var foundLength4;\n    var foundLength5;\n    var\
    \ foundLength6;\n    var foundLength7;\n    var foundLength8;\n    var foundLength9;\n\
    \    var foundLength10;\n    var foundLength11;\n    var foundLength12;\n    var\
    \ foundLength13;\n    var foundLength14;\n    var foundLength15;\n    var foundLength16;\n\
    \    var foundLength17;\n    var foundLength18;\n    var foundLength19;\n    var\
    \ foundLength20;\n    var foundLength21;\n    var foundLength22;\n    var foundLength23;\n\
    \    var foundLength24;\n    var foundLength25;\n    var foundLength26;\n    var\
    \ foundLength27;\n    var foundLength28;\n    var foundLength29;\n    var foundLength30;\n\
    \    var foundLength31;\n    var foundLength32;\n    var foundLength33;\n    var\
    \ foundLength34;\n    var foundLength35;\n    var foundLength36;\n    var foundLength37;\n\
    \    var foundLength38;\n    var foundLength39;\n    var foundLength40;\n    var\
    \ foundLength41;\n    var foundLength42;\n    var foundLength43;\n    var foundLength44;\n\
    \    var foundLength45;\n    var foundLength46;\n    var foundLength47;\n    var\
    \ foundLength48;\n    var foundLength49;\n    var foundLength50;\n    var foundLength51;\n\
    \    var foundLength52;\n    var foundLength53;\n    var foundLength54;\n    var\
    \ foundLength55;\n    var foundLength56;\n    var foundLength57;\n    var foundLength58;\n\
    \    var foundLength59;\n    var foundLength60;\n    var foundLength61;\n    var\
    \ foundLength62;\n    var foundLength63;\n    var foundLength64;\n    var foundLength65;\n\
    \    var foundLength66;\n    var foundLength67;\n    var foundLength68;\n    var\
    \ foundLength69;\n    var foundLength70;\n    var foundLength71;\n    var foundLength72;\n\
    \    var foundLength73;\n    var foundLength74;\n    var foundLength75;\n    var\
    \ foundLength76;\n    var foundLength77;\n    var foundLength78;\n    var foundLength79;\n\
    \    var foundLength80;\n    var foundLength", "    var reversed_string = \"\"\
    ;\n    var prefix_length = 0;\n    var postfix_length = 0;\n    var palindrome\
    \ = \"\";\n    \n    while(prefix_length < string.length){\n        postfix_length\
    \ = string.length - prefix_length;\n        palindrome = string.substr(prefix_length,\
    \ postfix_length);\n        reversed_string = reversed_string + palindrome;\n\
    \        prefix_length = postfix_length;\n    }\n    \n    return reversed_string;\n\
    }\n", "    var palindrome = \"\";\n    var suffix;\n    var prefix_length;\n \
    \   var suffix_length;\n    var prefix_reversed;\n    var suffix_reversed;\n \
    \   var suffix_prefix;\n    var suffix_suffix;\n    var suffix_prefix_length;\n\
    \    var suffix_suffix_length;\n    var suffix_prefix_reversed;\n    var suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix;\n    var suffix_prefix_suffix_length;\n    var\
    \ suffix_prefix_suffix_reversed;\n    var suffix_prefix_suffix_suffix;\n    var\
    \ suffix_prefix_suffix_suffix_length;\n    var suffix_prefix_suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix_suffix_suffix;\n    var suffix_prefix_suffix_suffix_suffix_length;\n\
    \    var suffix_prefix_suffix_suffix_suffix_reversed;\n    var suffix_prefix_suffix_suffix_suffix_suffix;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_length;\n    var suffix_prefix_suffix_suffix_suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix;\n    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_length;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_reversed;\n    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_length;\n   \
    \ var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_reversed;\n    var\
    \ suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix;\n    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length;\n\
    \    var suffix_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reversed;\n\
    \    var suffix_prefix_suffix_suffix_suffi", "    var reversed_string = string\n\
    \    var palindrome = \"\"\n    var prefix_length = 0\n    var suffix_length =\
    \ 0\n    while(prefix_length < string.length){\n        suffix_length = string.length\
    \ - prefix_length\n        reversed_string = reversed_string.substring(0,suffix_length)\
    \ + reversed_string.substring(suffix_length)\n        prefix_length = suffix_length\n\
    \        suffix_length = 0\n        for(var i = 0; i<string.length; i++){\n  \
    \          if(string.charAt(i) == string.charAt(string.length-i-1)){\n       \
    \         suffix_length = suffix_length + 1\n            }\n        }\n      \
    \  if(suffix_length == string.length){\n            palindrome = palindrome +\
    \ string.substring(0,prefix_length) + reversed_string\n        }\n    }\n    return\
    \ palindrome\n}\n", "    var palindrome = \"\",\n        postfix = \"\",\n   \
    \     prefix_length = 0,\n        suffix_length = 0,\n        i,\n        j,\n\
    \        prefix_index,\n        suffix_index,\n        prefix_length,\n      \
    \  suffix_length,\n        prefix_postfix = \"\",\n        suffix_postfix = \"\
    \";\n    for(i = 0; i < string.length; i++){\n        postfix = string.substr(i,\
    \ 1);\n        prefix_length = string.length - i;\n        suffix_length = string.length\
    \ - i - 1;\n        prefix_postfix = string.substr(0, i);\n        suffix_postfix\
    \ = string.substr(i + 1, string.length - i);\n        for(j = 0; j < suffix_length;\
    \ j++){\n            if(suffix_postfix.charAt(j) !== postfix.charAt(j)){\n   \
    \             break;\n            }\n        }\n        if(j === suffix_length){\n\
    \            palindrome += prefix_postfix + postfix + suffix_postfix.substr(0,\
    \ j);\n        }\n    }\n    return palindrome;\n}\n</code>\n<|/ a tags=algorithm,javascript\
    \ |>\n<| a tags=algorithm,javascript |>\n<code>", "  var palindrome = \"\";\n\
    \  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_postfix = \"\
    \";\n  var suffix_postfix = \"\";\n  var prefix_postfix_reverse = \"\";\n  var\
    \ suffix_postfix_reverse = \"\";\n  var prefix_postfix_reverse_length = string.length;\n\
    \  var suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;\n  var\
    \ suffix_postfix_reverse_length = string.length;\n  var prefix_postfix_reverse_length\
    \ = string.length;\n  var suffix_postfix_reverse_length = string.length;\n  var\
    \ prefix_postfix_reverse_length = string.length;\n  var suffix_postfix_reverse_length\
    \ = string.length;\n  var prefix_postfix_reverse_length = string.length;", " \
    \   var reversed_string = string\n    var palindrome = \"\"\n    var longest_postfix_length\
    \ = 0\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\
    \n    var longest_postfix_string_length = 0\n    for(var i = 0; i<string.length;\
    \ i++){\n        if(string[i] === string[string.length-1-i]){\n            longest_postfix_string\
    \ = string.substr(0,i) + string.substr(i+1)\n            longest_postfix_string_length\
    \ = i\n        }\n    }\n    for(var i = 0; i<string.length; i++){\n        if(string[i]\
    \ === string[string.length-1-i]){\n            longest_postfix_length = i\n  \
    \          longest_postfix_index = i\n        }\n    }\n    for(var i = 0; i<string.length;\
    \ i++){\n        if(string[i] === string[string.length-1-i]){\n            reversed_string\
    \ = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n        }\n   \
    \ }\n    for(var i = 0; i<string.length; i++){\n        if(string[i] === string[string.length-1-i]){\n\
    \            reversed_string = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n\
    \        }\n    }\n    for(var i = 0; i<string.length; i++){\n        if(string[i]\
    \ === string[string.length-1-i]){\n            reversed_string = reversed_string.substr(0,i)\
    \ + reversed_string.substr(i+1)\n        }\n    }\n    for(var i = 0; i<string.length;\
    \ i++){\n        if(string[i] === string[string.length-1-i]){\n            reversed_string\
    \ = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n        }\n   \
    \ }\n    for(var i = 0; i<string.length; i++){\n        if(string[i] === string[string.length-1-i]){\n\
    \            reversed_string = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n\
    \        }\n    }\n    for(var i = 0; i<string.length; i++){\n        if(string[i]\
    \ === string[string.length-1-i]){\n            reversed_string = reversed_string.substr(0,i)\
    \ + reversed_string.substr(i+1)\n        }\n    }\n    for(var i = 0; i<string.length;\
    \ i++){\n        if(string[i] === string[string.length-1-i]){\n            reversed_string\
    \ = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n        }\n   \
    \ }\n    for(var i = 0; i<string.length; i++){\n        if(string[i] === string[string.length-1-i]){\n\
    \            reversed_string = reversed_string.substr(0,i) + reversed_string.substr(i+1)\n\
    \        }\n    }\n    for(var i = 0; i<string.length; i++){\n        if(", " \
    \ var palindrome = \"\";\n  var suffix;\n  var prefix;\n  var reverse;\n  var\
    \ i;\n  var j;\n  var k;\n  var len;\n  var max;\n  var min;\n  var maxLength;\n\
    \  var minLength;\n  var maxLengthOfPrefix;\n  var minLengthOfPrefix;\n  var maxLengthOfSuffix;\n\
    \  var minLengthOfSuffix;\n  var maxLengthOfReverse;\n  var minLengthOfReverse;\n\
    \  var maxLengthOfSuffixPrefix;\n  var minLengthOfSuffixPrefix;\n  var maxLengthOfPrefixSuffix;\n\
    \  var minLengthOfPrefixSuffix;\n  var maxLengthOfReversePrefixSuffix;\n  var\
    \ minLengthOfReversePrefixSuffix;\n  var maxLengthOfReverseSuffixPrefix;\n  var\
    \ minLengthOfReverseSuffixPrefix;\n  var maxLengthOfPrefixReverseSuffix;\n  var\
    \ minLengthOfPrefixReverseSuffix;\n  var maxLengthOfSuffixPrefixReverse;\n  var\
    \ minLengthOfSuffixPrefixReverse;\n  var maxLengthOfReversePrefixSuffixReverse;\n\
    \  var minLengthOfReversePrefixSuffixReverse;\n  var maxLengthOfSuffixPrefixReversePrefix;\n\
    \  var minLengthOfSuffixPrefixReversePrefix;\n  var maxLengthOfPrefixSuffixReverseSuffix;\n\
    \  var minLengthOfPrefixSuffixReverseSuffix;\n  var maxLengthOfSuffixPrefixReversePrefix;\n\
    \  var minLengthOfSuffixPrefixReversePrefix;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffixPrefixReverseSuffixReverse;\n  var maxLengthOfPrefixSuffixReversePrefixReverse;\n\
    \  var minLengthOfPrefixSuffixReversePrefixReverse;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffixPrefixReverseSuffixReverse;\n  var maxLengthOfPrefixSuffixReversePrefixReverse;\n\
    \  var minLengthOfPrefixSuffixReversePrefixReverse;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffixPrefixReverseSuffixReverse;\n  var maxLengthOfPrefixSuffixReversePrefixReverse;\n\
    \  var minLengthOfPrefixSuffixReversePrefixReverse;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffixPrefixReverseSuffixReverse;\n  var maxLengthOfPrefixSuffixReversePrefixReverse;\n\
    \  var minLengthOfPrefixSuffixReversePrefixReverse;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffixPrefixReverseSuffixReverse;\n  var maxLengthOfPrefixSuffixReversePrefixReverse;\n\
    \  var minLengthOfPrefixSuffixReversePrefixReverse;\n  var maxLengthOfSuffixPrefixReverseSuffixReverse;\n\
    \  var minLengthOfSuffix", "  var reversed_string = string\n  var postfix_length\
    \ = 0\n  var prefix_length = 0\n  var palindrome = \"\"\n  \n  while(postfix_length\
    \ < string.length){\n    postfix_length = string.length - postfix_length\n   \
    \ prefix_length = string.length - postfix_length\n    \n    if(string.substr(postfix_length).match(/[a-z]/i)){\n\
    \      palindrome = string.substr(0, postfix_length) + string.reverse(string.substr(postfix_length))\n\
    \      break\n    }\n  }\n  \n  return palindrome\n}\n", "    var palindrome =\
    \ \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var reverse_string = \"\";\n   \
    \ var palindrome_length = 0;\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_reverse_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_reverse_string\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_reverse_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_reverse_string\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_reverse_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_reverse_string\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_reverse_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_reverse_string\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    var palindrome_reverse_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n", "    var palindrome =\
    \ \"\";\n    var postfix = \"\";\n    var suffix;\n    var prefix;\n    var i;\n\
    \    var j;\n    var k;\n    var len;\n    var max;\n    var min;\n    var mid;\n\
    \    var temp;\n    \n    len = string.length;\n    max = len - 1;\n    min =\
    \ -1;\n    mid = 0;\n    \n    for (i = 0; i < len; i++){\n        postfix = string.substr(i,\
    \ 1);\n        prefix = string.substr(0, i);\n        \n        if (postfix ===\
    \ prefix){\n            mid = i;\n            break;\n        }\n        \n  \
    \      if (postfix > prefix){\n            max = i;\n        }\n        \n   \
    \     if (postfix < prefix){\n            min = i;\n        }\n    }\n    \n \
    \   if (mid === 0){\n        return string;\n    }\n    \n    temp = string.substr(0,\
    \ mid);\n    \n    for (i = mid; i < len; i++){\n        postfix = string.substr(i,\
    \ 1);\n        prefix = string.substr(0, i);\n        \n        if (postfix ===\
    \ prefix){\n            temp = string.substr(0, i);\n            \n          \
    \  for (j = i; j < len; j++){\n                postfix = string.substr(j, 1);\n\
    \                prefix = string.substr(0, j);\n                \n           \
    \     if (postfix === prefix){\n                    temp = temp + postfix;\n \
    \                   break;\n                }\n            }\n            \n \
    \           palindrome = temp + palindrome;\n            break;\n        }\n \
    \       \n        if (postfix > prefix){\n            max = i;\n        }\n  \
    \      \n        if (postfix < prefix){\n            min = i;\n        }\n   \
    \ }\n    \n    palindrome = palindrome.reverse();\n    \n    for (i = min; i <=\
    \ max; i++){\n        postfix = string.substr(i, 1);\n        prefix = string.substr(0,\
    \ i);\n        \n        if (postfix === prefix){\n            temp = string.substr(0,\
    \ i);\n            \n            for (j = i; j < len; j++){\n                postfix\
    \ = string.substr(j, 1);\n                prefix = string.substr(0, j);\n    \
    \            \n                if (postfix === prefix){\n                    temp\
    \ = temp + postfix;\n                    break;\n                }\n         \
    \   }\n            \n            palindrome = temp + palindrome;\n           \
    \ break;\n        }\n        \n        if (postfix > prefix){\n            max\
    \ = i;\n        }\n        \n        if (postfix < prefix){\n            min =\
    \ i;\n        }\n    }\n    \n    return palindrome;\n}\n", "    var reversed_string\
    \ = string\n    var prefix_length = 0\n    var suffix_length = 0\n    var palindrome\
    \ = \"\"\n    while(suffix_length < string.length){\n        var postfix_length\
    \ = string.length - suffix_length\n        var postfix_string = string.substr(0,\
    \ postfix_length)\n        var postfix_reversed_string = postfix_string.reverse()\n\
    \        if(postfix_reversed_string == reversed_string){\n            prefix_length\
    \ = postfix_length\n            suffix_length = postfix_length\n            palindrome\
    \ = postfix_string\n            break\n        }\n        suffix_length++\n  \
    \  }\n    return palindrome\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var reverse_prefix_postfix = \"\";\n    var reverse_suffix_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_prefix_postfix_length = 0;\n    var reverse_suffix_postfix_length\
    \ = 0;\n    var reverse_prefix_postfix_string = \"\";\n    var reverse_suffix_postfix_string\
    \ = \"\";\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string\
    \ = \"\";\n    var prefix_length_string = \"\";\n    var suffix_length_string\
    \ = \"\";\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_postfix\
    \ = \"\";\n    var suffix_postfix = \"\";\n    var reverse_prefix_postfix = \"\
    \";\n    var reverse_suffix_postfix = \"\";\n    var reverse_prefix_length = 0;\n\
    \    var reverse_suffix_length = 0;\n    var reverse_prefix_string = \"\";\n \
    \   var reverse_suffix_string = \"\";\n    var reverse_prefix_postfix_length =\
    \ 0;\n    var reverse_suffix_postfix_length = 0;\n    var reverse_prefix_postfix_string\
    \ = \"\";\n    var reverse_suffix_postfix_string = \"\";\n    var prefix_postfix_string\
    \ = \"\";\n    var suffix_postfix_string = \"\";\n    var prefix_length_string\
    \ = \"\";\n    var suffix_length_string = \"\";\n    var prefix_postfix_string\
    \ = \"\";\n    var suffix_postfix_string = \"\";\n    var prefix_length = 0;\n\
    \    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var reverse_prefix_postfix = \"\";\n    var reverse_suffix_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_prefix_postfix_length = 0;\n    var reverse_suffix_postfix_length\
    \ = 0;\n    var reverse_prefix_postfix_string = \"\";\n    var reverse_suffix_postfix_string\
    \ = \"\";\n    var prefix_postfix_string = \"\";\n    var suffix_postfix_string\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_postfix\
    \ = \"\";\n    var suffix_postfix = \"\";\n    var reverse_prefix_postfix = \"\
    \";\n    var reverse_suffix_postfix = \"\";\n    var reverse_prefix_length = 0;\n\
    \    var reverse_suffix_length = 0;\n    var reverse_prefix_string = \"\";\n \
    \   var reverse_suffix_string = \"\";\n    var reverse_prefix_postfix_length =\
    \ 0;\n    var reverse_suffix_postfix_length = 0;\n    var reverse_prefix_postfix_string\
    \ = \"\";\n    var ", "    var reversed_string = string\n    var prefix_length\
    \ = 0\n    var longest_postfix_length = 0\n    var longest_postfix_string = \"\
    \"\n    var longest_postfix_string_length = 0\n    var longest_postfix_string_length_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix = 0\n    var longest_postfix_string_length_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix = 0\n    var longest_postfix_string_length_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix = 0\n   \
    \ var longest_postfix_string_length_suffix_suffix_suffix_string = \"\"\n    var\
    \ longest_postfix_string_length_suffix_suffix_suffix_suffix = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0\n    var longest_postfix_string_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_string\
    \ = \"\"\n    var lon", "    var reversed_string = string\n    var postfix_length\
    \ = 0\n    var prefix_length = 0\n    for(var i = string.length - 1; i >= 0; i--){\n\
    \        if(string[i] === string[string.length - 1 - i]){\n            postfix_length++\n\
    \        }\n    }\n    for(var i = string.length - 1; i >= 0; i--){\n        if(string[i]\
    \ === string[string.length - 1 - i]){\n            prefix_length++\n        }\n\
    \    }\n    var postfix = string.substr(0, postfix_length)\n    var prefix = string.substr(0,\
    \ prefix_length)\n    reversed_string = reversed_string.reverse()\n    reversed_string\
    \ += postfix\n    reversed_string += prefix\n    return reversed_string\n}\n",
  "    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\s+$/,\
    \ \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");\n    string = string.replace(/^\\s+/, \"\");\n    string = string.replace(/\\\
    s+$/, \"\");", "  var reversed_string = string\n  for(var i = 0; i<string.length;\
    \ i++){\n    reversed_string = reversed_string+string[i]\n  }\n  reversed_string\
    \ = reversed_string+string.reverse()\n  if(reversed_string.length<string.length){\n\
    \    return string\n  }\n  else{\n    return string+reversed_string\n  }\n}\n",
  "  var palindrome = \"\";\n  var longestPalindrome = \"\";\n  var longestPalindromeLength\
    \ = 0;\n  var longestPalindromePrefixLength = 0;\n  var longestPalindromeSuffixLength\
    \ = 0;\n  var longestPalindromeSuffixIndex = 0;\n  var longestPalindromePrefixIndex\
    \ = 0;\n  var longestPalindromeSuffixChar = \"\";\n  var longestPalindromePrefixChar\
    \ = \"\";\n  var longestPalindromeSuffixCharReverse = \"\";\n  var longestPalindromePrefixCharReverse\
    \ = \"\";\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex\
    \ = 0;\n  var longestPalindromeSuffixCharReverseIndex = 0;\n  var longestPalindromePrefixCharReverseIndex",
  "    var reversed_string = string.reverse ();\n    var palindrome = string;\n  \
    \  var prefix_length = string.length;\n    var suffix_length = 0;\n    var prefix_postfix\
    \ = \"\";\n    var suffix_postfix = \"\";\n    var palindrome_length = palindrome.length;\n\
    \    var palindrome_postfix = \"\";\n    var palindrome_prefix_length = palindrome_length\
    \ - prefix_length;\n    var palindrome_suffix_length = palindrome_length - suffix_length;\n\
    \    var palindrome_prefix_postfix = \"\";\n    var palindrome_suffix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_length = palindrome_length - palindrome_prefix_length;\n\
    \    var palindrome_suffix_postfix_length = palindrome_length - palindrome_suffix_length;\n\
    \    var palindrome_prefix_postfix_postfix = \"\";\n    var palindrome_suffix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_length = palindrome_length\
    \ - palindrome_prefix_length - palindrome_suffix_length;\n    var palindrome_suffix_postfix_postfix_length\
    \ = palindrome_length - palindrome_suffix_length - palindrome_prefix_postfix_length;\n\
    \    var palindrome_prefix_postfix_postfix_postfix = \"\";\n    var palindrome_suffix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_length = palindrome_length\
    \ - palindrome_prefix_length - palindrome_suffix_length - palindrome_prefix_postfix_length\
    \ - palindrome_suffix_postfix_length;\n    var palindrome_suffix_postfix_postfix_postfix_length\
    \ = palindrome_length - palindrome_suffix_length - palindrome_prefix_postfix_length\
    \ - palindrome_suffix_postfix_length - palindrome_prefix_postfix_postfix_length;\n\
    \    var palindrome_prefix_postfix_postfix_postfix_postfix_length = palindrome_length\
    \ - palindrome_prefix_length - palindrome_suffix_length - palindrome_prefix_postfix_length\
    \ - palindrome_suffix_postfix_length - palindrome_prefix_postfix_postfix_length;\n\
    \    var palindrome_suffix_postfix_postfix_postfix_postfix_length = palindrome_length\
    \ - palindrome_suffix_length - palindrome_prefix_postfix_length - palindrome_suffix_postfix_length\
    \ - palindrome_prefix_postfix_postfix_length - palindrome_suffix_post", "    var\
    \ palindrome = string;\n    var prefix_length = 0;\n    var suffix_length = 0;\n\
    \    var palindrome_length = string.length;\n    var palindrome_suffix = \"\"\
    ;\n    var palindrome_prefix = \"\";\n    var palindrome_prefix_length = 0;\n\
    \    var palindrome_suffix_length = 0;\n    var palindrome_prefix_suffix = \"\"\
    ;\n    var palindrome_prefix_suffix_length = 0;\n    var palindrome_prefix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_suffix_suffix_length = 0;\n    var palindrome_prefix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_suffix_suffix_suffix_length = 0;\n    var\
    \ palindrome_prefix_suffix_suffix_suffix_suffix = \"\";\n    var palindrome_prefix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix = \"\";\n\
    \    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_length = 0;\n  \
    \  var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix = \"\";\n \
    \   var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_length = 0;\n\
    \    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_",
  "    var reversed_string = \"\";\n    var longest_postfix_length = 0;\n    var longest_postfix_string\
    \ = \"\";\n    var longest_postfix_string_length = 0;\n    var longest_postfix_string_chars\
    \ = [];\n    var longest_postfix_string_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_length = 0;\n    var\
    \ longest_postfix_string_chars_chars_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_length\
    \ = 0;\n    var longest_", "    var palindrome = string;\n    var palindrome_padded\
    \ = \"\";\n    var palindrome_length = string.length;\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_reverse\
    \ = \"\";\n    var palindrome_suffix_reverse = \"\";\n    var palindrome_prefix_reverse_index\
    \ = 0;\n    var palindrome_suffix_reverse_index = 0;\n    var palindrome_prefix_reverse_string\
    \ = \"\";\n    var palindrome_suffix_reverse_string = \"\";\n    var palindrome_prefix_reverse_length\
    \ = 0;\n    var palindrome_suffix_reverse_length = 0;\n    var palindrome_prefix_reverse_string_index\
    \ = 0;\n    var palindrome_suffix_reverse_string_index = 0;\n    var palindrome_prefix_reverse_string_reverse\
    \ = \"\";\n    var palindrome_suffix_reverse_string_reverse = \"\";\n    var palindrome_prefix_reverse_string_reverse_index\
    \ = 0;\n    var palindrome_suffix_reverse_string_reverse_index = 0;\n    var palindrome_prefix_reverse_string_reverse_length\
    \ = palindrome_prefix_length;\n    var palindrome_suffix_reverse_string_reverse_length\
    \ = palindrome_suffix_length;\n    var palindrome_prefix_reverse_string_reverse_string\
    \ = \"\";\n    var palindrome_suffix_reverse_string_reverse_string = \"\";\n \
    \   var palindrome_prefix_reverse_string_reverse_string_index = 0;\n    var palindrome_suffix_reverse_string_reverse_string_index\
    \ = 0;\n    var palindrome_prefix_reverse_string_reverse_string_reverse = \"\"\
    ;\n    var palindrome_suffix_reverse_string_reverse_string_reverse = \"\";\n \
    \   var palindrome_prefix_reverse_string_reverse_string_reverse_index = 0;\n \
    \   var palindrome_suffix_reverse_string_reverse_string_reverse_index = 0;\n \
    \   var palindrome_prefix_reverse_string_reverse_string_reverse_length = palindrome_prefix_length;\n\
    \    var palindrome_suffix_reverse_string_reverse_string_reverse_length = palindrome_suffix_length;\n\
    \    while(palindrome_length >= palindrome_prefix_length){\n        palindrome_prefix_string\
    \ = palindrome.substr(0, palindrome_prefix_length);\n        palindrome_suffix_string\
    \ = palindrome.substr(palindrome_prefix_length, palindrome_length);\n        palindrome_prefix_reverse\
    \ = palindrome_prefix_string.split(\"\").reverse().join(\"\");\n        palindrome_suffix_reverse\
    \ = palin", "    var reversed_string = string\n    var prefix_length = 0\n   \
    \ var longest_postfix_length = 0\n    var longest_postfix_string = \"\"\n    for(var\
    \ i = 0; i < string.length; i++){\n        var current_char = string[i]\n    \
    \    var next_char = string[i + 1]\n        if(current_char == next_char){\n \
    \           prefix_length++\n        }else{\n            longest_postfix_length++\n\
    \            longest_postfix_string += current_char\n        }\n    }\n    longest_postfix_string\
    \ += string.reverse()\n    longest_postfix_length = longest_postfix_string.length\n\
    \    if(longest_postfix_length < prefix_length){\n        longest_postfix_length\
    \ = prefix_length\n    }\n    var palindrome_string = string\n    for(var i =\
    \ 0; i < longest_postfix_length; i++){\n        palindrome_string += string[i]\n\
    \    }\n    palindrome_string += string.reverse()\n    return palindrome_string\n\
    }\n", "    var palindrome = string;\n    var postfix = \"\";\n    var reverse\
    \ = \"\";\n    var i = 0;\n    var j = 0;\n    while(i < string.length){\n   \
    \     postfix = string.substr(i,1);\n        reverse = reverse+postfix;\n    \
    \    i++;\n    }\n    while(j < string.length){\n        palindrome = palindrome+reverse;\n\
    \        j++;\n    }\n    return palindrome;\n}\n", "    var reversed_string =\
    \ string\n    var prefix_length = 0\n    var postfix_length = 0\n    var palindrome\
    \ = \"\"\n    while(true){\n        postfix_length = string.length\n        reversed_string\
    \ = reversed_string.reverse()\n        prefix_length = string.length\n       \
    \ while(postfix_length < reversed_string.length){\n            postfix_length++\n\
    \        }\n        if(postfix_length == reversed_string.length){\n          \
    \  palindrome = string + reversed_string\n            break\n        }\n     \
    \   string = string + reversed_string.slice(0,postfix_length)\n        reversed_string\
    \ = reversed_string.slice(postfix_length)\n    }\n    return palindrome\n}\n",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var longest_postfix_length\
    \ = 0\n    for(var i = 0; i<string.length; i++){\n        var postfix_length =\
    \ string.length - i\n        if(postfix_length >= longest_postfix_length){\n \
    \           longest_postfix_length = postfix_length\n        }\n    }\n    for(var\
    \ i = 0; i<longest_postfix_length; i++){\n        var postfix_length = string.length\
    \ - i\n        if(postfix_length >= longest_postfix_length){\n            var\
    \ postfix = string.substr(i, postfix_length)\n            var reversed_postfix\
    \ = reversed_string.substr(0, reversed_string.length - postfix_length)\n     \
    \       if(postfix.toLowerCase() == reversed_postfix.toLowerCase()){\n       \
    \         palindrome = palindrome + postfix + reversed_postfix\n            }\n\
    \        }\n    }\n    return palindrome\n}\n", "  var reversed_string = string\n\
    \  var palindrome = \"\"\n  var prefix_length = 0\n  var postfix_length = 0\n\
    \  while(postfix_length < string.length){\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_string = string.substr(postfix_length, string.length)\n\
    \    postfix_string = postfix_string.reverse()\n    postfix_string = postfix_string.toString()\n\
    \    if(postfix_string == reversed_string){\n      palindrome += string.substr(0,\
    \ postfix_length)\n      break\n    }\n  }\n  return palindrome\n}\n", "  if(string.length\
    \ <= 1){\n    return string;\n  }\n  var longestPalindrome = string.substr(0,\
    \ string.length-1);\n  var reversedString = string.substr(string.length-1, string.length);\n\
    \  var palindrome = longestPalindrome + reversedString;\n  return palindrome;\n\
    }\n", "    var palindrome = \"\",\n        postfix = \"\";\n    \n    while(string\
    \ !== \"\"){\n        postfix = string.substr(0, string.length - 1);\n       \
    \ palindrome += postfix;\n        string = string.substr(1);\n    }\n    \n  \
    \  while(postfix !== palindrome){\n        postfix = palindrome.substr(0, palindrome.length\
    \ - 1);\n        palindrome += postfix;\n    }\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_postfix_reverse = \"\";\n    var suffix_postfix_reverse = \"\";\n   \
    \ var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_string = \"\";\n    var suffix_postfix_reverse_string\
    \ = \"\";\n    var prefix_postfix_reverse_string_index = 0;\n    var suffix_postfix_reverse_string_index\
    \ = 0;\n    var prefix_postfix_reverse_string_length = string.length;\n    var\
    \ suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n    var suffix_postfix_reverse_string_length = string.length;\n\
    \    var prefix_postfix_reverse_string_length = string.length;\n    var suffix_postfix_reverse_string_length\
    \ = string.length;\n    var prefix_postfix_reverse_string_length = string.length;\n\
    \    var suffix_postfix_reverse_string_length = string.length;\n    var prefix_postfix_reverse_string_length\
    \ = string.length;\n", "    var palindrome = \"\",\n        postfix = \"\";\n\
    \    \n    for(var i = string.length - 1; i >= 0; i--){\n        postfix += string[i];\n\
    \    }\n    \n    postfix = postfix.split(\"\").reverse().join(\"\");\n    \n\
    \    for(var i = string.length - 1; i >= 0; i--){\n        palindrome += string[i];\n\
    \    }\n    \n    palindrome += postfix;\n    \n    return palindrome;\n}\n",
  "    var reversed_string = \"\";\n    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_string = \"\";\n    var longest_postfix_string_length = 0;\n\
    \    var longest_postfix_string_chars = [];\n    var longest_postfix_string_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_postfix_string_chars_chars_length = 0;\n    var longest_postfix_string_chars_chars_length\
    \ = 0;\n    var longest_post", "    var reversed_string = string\n    var palindrome\
    \ = \"\"\n    var prefix_length = 0\n    var postfix_length = 0\n    while(true){\n\
    \        postfix_length = string.length\n        prefix_length = string.length\
    \ - postfix_length\n        if(postfix_length == 0){\n            break\n    \
    \    }\n        var postfix = string.substr(postfix_length, reversed_string.length)\n\
    \        if(postfix != reversed_string){\n            break\n        }\n     \
    \   palindrome = string.substr(0, postfix_length) + palindrome\n        string\
    \ = string.substr(postfix_length, reversed_string.length)\n    }\n    return palindrome\n\
    }\n", "  var reversed_string = string\n  for(var i = string.length - 1; i >= 0;\
    \ i--){\n    reversed_string = reversed_string + string.charAt(i)\n  }\n  return\
    \ reversed_string\n}\n", "    var palindrome = \"\";\n    var suffix;\n    var\
    \ prefix;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefix", "    var reversed_string = string\n    var longest_postfix_string\
    \ = \"\"\n    var longest_postfix_length = 0\n    var longest_postfix_index =\
    \ 0\n    for(var i = 0; i < string.length; i++){\n        var postfix_string =\
    \ string.substr(0, i)\n        var postfix_length = string.length\n        if(postfix_string.length\
    \ < longest_postfix_length){\n            longest_postfix_length = postfix_string.length\n\
    \            longest_postfix_string = postfix_string\n            longest_postfix_index\
    \ = i\n        }\n        if(postfix_string == reversed_string){\n           \
    \ postfix_string = postfix_string + reversed_string.substr(0, longest_postfix_index)\n\
    \            postfix_length = postfix_string.length\n        }\n        reversed_string\
    \ = reversed_string.substr(1)\n    }\n    return longest_postfix_string + reversed_string\n\
    }", "    var reversed_string = string\n    var palindrome = \"\"\n    var longest_postfix_length\
    \ = 0\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\
    \n    for(var i = 0; i < string.length; i++){\n        if(string[i] == string[string.length\
    \ - 1 - i]){\n            longest_postfix_string = string\n            longest_postfix_length\
    \ = i\n            longest_postfix_index = i\n        }\n    }\n    for(var i\
    \ = 0; i < longest_postfix_length; i++){\n        reversed_string = reversed_string.replace(string[i],\
    \ string[longest_postfix_length - 1 - i])\n    }\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] == string[longest_postfix_length - 1 - i]){\n  \
    \          palindrome = palindrome + string[i]\n        }\n    }\n    return palindrome\
    \ + reversed_string\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var reverse_string = \"\";\n    var reverse_prefix_length\
    \ = 0;\n    var reverse_suffix_length = 0;\n    var prefix_string = \"\";\n  \
    \  var suffix_string = \"\";\n    var prefix_length_string = \"\";\n    var suffix_length_string\
    \ = \"\";\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string\
    \ = \"\";\n    var reverse_prefix_length_string = \"\";\n    var reverse_suffix_length_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_length_string =\
    \ \"\";\n    var palindrome_length_string = \"\";\n    var palindrome_length_array\
    \ = [];\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";\n    var palindrome_length_array_string\
    \ = \"\";\n    var palindrome_length_array_string = \"\";", "    var reversed_string\
    \ = string.reverse ();\n    var prefix_string = string.slice (0, reversed_string.lastIndexOf\
    \ (string));\n    var postfix_string = string.slice (reversed_string.lastIndexOf\
    \ (string) + 1);\n    return prefix_string + postfix_string;\n}\n", "    var reversed_string\
    \ = string\n    var palindrome = \"\"\n    var longest_postfix_length = 0\n  \
    \  var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    var\
    \ longest_postfix_string_length = 0\n    var longest_postfix_string_index = 0\n\
    \    var longest_postfix_string_length_index = 0\n    var longest_postfix_string_length_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_index = 0\n    var longest_postfix_string_length_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed = 0\n    var longest_postfix_string_length_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_index = 0\n   \
    \ var longest_postfix_string_length_reversed_reversed_reversed = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "    string = string.toLowerCase();\n    var palindrome = \"\";\n    var suffix;\n\
    \    var prefix;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n    var suffix",
  "    string = string.toLowerCase();\n    string = string.replace(/^\\s+|\\s+$/g,\"\
    \");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    string = string.replace(/\\s+$/g,\"\");\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n    string = string.replace(/\\s+/g,\" \");\n    string = string.replace(/^\\\
    s+/g,\"\");\n    ", "  if(string === \"\") return \"\";\n  var palindrome = string;\n\
    \  var reversed_string = reverse(string);\n  var prefix_length = string.length\
    \ - reversed_string.length;\n  for(var i = prefix_length; i >= 0; i--){\n    palindrome\
    \ += reversed_string.charAt(i);\n  }\n  return palindrome;\n}\n", "  var palindrome\
    \ = string;\n  var palindrome_length = string.length;\n  var palindrome_prefix\
    \ = \"\";\n  var palindrome_suffix = \"\";\n  var palindrome_prefix_length = 0;\n\
    \  var palindrome_suffix_length = 0;\n  var palindrome_prefix_reverse = \"\";\n\
    \  var palindrome_suffix_reverse = \"\";\n\n  while(palindrome_length > 0){\n\
    \    palindrome_prefix_length = palindrome_length - 1;\n    palindrome_prefix\
    \ = string.substr(0, palindrome_prefix_length);\n    palindrome_prefix_reverse\
    \ = string.substr(palindrome_prefix_length).split(\"\").reverse().join(\"\");\n\
    \    palindrome_suffix = string.substr(palindrome_prefix_length + 1);\n    palindrome_suffix_length\
    \ = palindrome_suffix.length;\n    palindrome_suffix_reverse = string.substr(0,\
    \ palindrome_suffix_length).split(\"\").reverse().join(\"\");\n    palindrome\
    \ = palindrome_prefix + palindrome_prefix_reverse + palindrome_suffix + palindrome_suffix_reverse;\n\
    \    palindrome_length = palindrome.length;\n  }\n  return palindrome;\n}\n",
  "    var reversed_string = string.replace(/^./g,function(m){return m.split('').reverse().join('');});\n\
    \    return string + reversed_string;\n}\n", "    var reversed_string = string.reverse\
    \ ();\n    var palindrome = string.slice (0, string.length);\n    var prefix_length\
    \ = string.length - reversed_string.length;\n    palindrome.concat (reversed_string.slice\
    \ (0, prefix_length));\n    return palindrome;\n}\n", "  var reversed_string =\
    \ \"\";\n  var prefix_length = 0;\n  var postfix_length = 0;\n  var postfix_start_index\
    \ = 0;\n  var postfix_end_index = 0;\n  var palindrome = \"\";\n  \n  while(postfix_start_index\
    \ < string.length){\n    postfix_end_index = string.indexOf(string.charAt(postfix_start_index),\
    \ postfix_end_index);\n    postfix_start_index = postfix_end_index + 1;\n    postfix_length\
    \ = postfix_end_index - postfix_start_index;\n    \n    if(postfix_length == 0){\n\
    \      postfix_length = 1;\n    }\n    \n    if(postfix_length < 2){\n      postfix_length\
    \ = 1;\n    }\n    \n    if(postfix_length == 1){\n      reversed_string += string.charAt(postfix_start_index);\n\
    \    }\n    \n    if(postfix_length == 2){\n      reversed_string += string.charAt(postfix_start_index)\
    \ + string.charAt(postfix_end_index - 1);\n    }\n    \n    if(postfix_length\
    \ == 3){\n      reversed_string += string.charAt(postfix_start_index) + string.charAt(postfix_end_index\
    \ - 1) + string.charAt(postfix_end_index - 2);\n    }\n    \n    if(postfix_length\
    \ == 4){\n      reversed_string += string.charAt(postfix_start_index) + string.charAt(postfix_end_index\
    \ - 1) + string.charAt(postfix_end_index - 2) + string.charAt(postfix_end_index\
    \ - 3);\n    }\n    \n    if(postfix_length == 5){\n      reversed_string += string.charAt(postfix_start_index)\
    \ + string.charAt(postfix_end_index - 1) + string.charAt(postfix_end_index - 2)\
    \ + string.charAt(postfix_end_index - 3) + string.charAt(postfix_end_index - 4);\n\
    \    }\n    \n    if(postfix_length == 6){\n      reversed_string += string.charAt(postfix_start_index)\
    \ + string.charAt(postfix_end_index - 1) + string.charAt(postfix_end_index - 2)\
    \ + string.charAt(postfix_end_index - 3) + string.charAt(postfix_end_index - 4)\
    \ + string.charAt(postfix_end_index - 5);\n    }\n    \n    if(postfix_length\
    \ == 7){\n      reversed_string += string.charAt(postfix_start_index) + string.charAt(postfix_end_index\
    \ - 1) + string.charAt(postfix_end_index - 2) + string.charAt(postfix_end_index\
    \ - 3) + string.charAt(postfix_end_index - 4) + string.charAt(postfix_end_index\
    \ - 5) + string.charAt(postfix_end_index - 6);\n    }\n    \n    if(postfix_length\
    \ == 8){\n      reversed_string += string.charAt(postfix_start_index) + string.charAt(postfix_end_index\
    \ - 1) + string.charAt(postfix_end_index - 2) + string.charAt(postfix_end_", " \
    \   var reversed_string = string\n    var palindrome = \"\"\n    var palindrome_length\
    \ = 0\n    var longest_postfix_length = 0\n    var longest_postfix_index = 0\n\
    \    var longest_postfix_string = \"\"\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length - 1 - i]){\n          \
    \  palindrome_length += 1\n            if(palindrome_length > longest_postfix_length){\n\
    \                longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n      \
    \  if(string[i] === string[string.length - 1 - i]){\n            palindrome_length\
    \ += 1\n            if(palindrome_length > longest_postfix_length){\n        \
    \        longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n      \
    \  if(string[i] === string[string.length - 1 - i]){\n            palindrome_length\
    \ += 1\n            if(palindrome_length > longest_postfix_length){\n        \
    \        longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n      \
    \  if(string[i] === string[string.length - 1 - i]){\n            palindrome_length\
    \ += 1\n            if(palindrome_length > longest_postfix_length){\n        \
    \        longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n      \
    \  if(string[i] === string[string.length - 1 - i]){\n            palindrome_length\
    \ += 1\n            if(palindrome_length > longest_postfix_length){\n        \
    \        longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n      \
    \  if(string[i] === string[string.length - 1 - i]){\n            palindrome_length\
    \ += 1\n            if(palindrome_length > longest_postfix_length){\n        \
    \        longest_postfix_length = palindrome_length\n                longest_postfix_index\
    \ = i\n                longest_postfix_string = string.substr(0, i)\n        \
    \    }\n        }\n    }", "    var palindrome = \"\",\n        postfix = \"\"\
    ,\n        prefix_length = 0,\n        suffix_length = 0,\n        postfix_length\
    \ = 0;\n\n    string = string.toLowerCase();\n    string = string.replace(/^\\\
    s+|\\s+$/g,\"\");\n\n    postfix = string.substr(0,string.length-1);\n    postfix_length\
    \ = postfix.length;\n\n    prefix_length = string.length - postfix_length;\n\n\
    \    while(postfix_length >= 0){\n        palindrome += string.substr(postfix_length,1);\n\
    \        postfix_length--;\n    }\n\n    while(prefix_length >= 0){\n        palindrome\
    \ += string.substr(0,prefix_length);\n        prefix_length--;\n    }\n\n    return\
    \ palindrome;\n}\n", "  if(string === \"\"){\n    return \"\";\n  }\n  var palindrome\
    \ = string;\n  var suffix;\n  var prefix;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixMid;\n  var prefixMid;\n  var suffixMidIndex;\n  var prefixMidIndex;\n\
    \  var suffixMidIndex2;\n  var prefixMidIndex2;\n  var suffixMidIndex3;\n  var\
    \ prefixMidIndex3;\n  var suffixMidIndex4;\n  var prefixMidIndex4;\n  var suffixMidIndex5;\n\
    \  var prefixMidIndex5;\n  var suffixMidIndex6;\n  var prefixMidIndex6;\n  var\
    \ suffixMidIndex7;\n  var prefixMidIndex7;\n  var suffixMidIndex8;\n  var prefixMidIndex8;\n\
    \  var suffixMidIndex9;\n  var prefixMidIndex9;\n  var suffixMidIndex10;\n  var\
    \ prefixMidIndex10;\n  var suffixMidIndex11;\n  var prefixMidIndex11;\n  var suffixMidIndex12;\n\
    \  var prefixMidIndex12;\n  var suffixMidIndex13;\n  var prefixMidIndex13;\n \
    \ var suffixMidIndex14;\n  var prefixMidIndex14;\n  var suffixMidIndex15;\n  var\
    \ prefixMidIndex15;\n  var suffixMidIndex16;\n  var prefixMidIndex16;\n  var suffixMidIndex17;\n\
    \  var prefixMidIndex17;\n  var suffixMidIndex18;\n  var prefixMidIndex18;\n \
    \ var suffixMidIndex19;\n  var prefixMidIndex19;\n  var suffixMidIndex20;\n  var\
    \ prefixMidIndex20;\n  var suffixMidIndex21;\n  var prefixMidIndex21;\n  var suffixMidIndex22;\n\
    \  var prefixMidIndex22;\n  var suffixMidIndex23;\n  var prefixMidIndex23;\n \
    \ var suffixMidIndex24;\n  var prefixMidIndex24;\n  var suffixMidIndex25;\n  var\
    \ prefixMidIndex25;\n  var suffixMidIndex26;\n  var prefixMidIndex26;\n  var suffixMidIndex27;\n\
    \  var prefixMidIndex27;\n  var suffixMidIndex28;\n  var prefixMidIndex28;\n \
    \ var suffixMidIndex29;\n  var prefixMidIndex29;\n  var suffixMidIndex30;\n  var\
    \ prefixMidIndex30;\n  var suffixMidIndex31;\n  var prefixMidIndex31;\n  var suffixMidIndex32;\n\
    \  var prefixMidIndex32;\n  var suffixMidIndex33;\n  var prefixMidIndex33;\n \
    \ var suffixMidIndex34;\n  var prefixMidIndex34;\n  var suffixMidIndex35;", " \
    \ var reversed_string = string\n  var postfix_length = string.length\n  var longest_postfix_length\
    \ = 0\n  var longest_postfix_length_index = 0\n  var longest_postfix_length_string\
    \ = \"\"\n  var longest_postfix_length_substring = \"\"\n  var longest_postfix_length_substring_index\
    \ = 0\n  var longest_postfix_length_substring_string = \"\"\n  var longest_postfix_length_substring_string_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed = \"\"\n  var longest_postfix_length_substring_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_length = 0\n  var\
    \ longest_postfix_length_substring_string_reversed_string = \"\"\n  var longest_postfix_length_substring_string_reversed_string_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_length\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_length\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_length\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_string\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_length\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed\
    \ = \"\"\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string_reversed_string_reversed_length\
    \ = 0\n  var longest_postfix_length_substring_string_reversed_string", "  var\
    \ postfix = \"\";\n  var palindrome = \"\";\n  var suffix;\n  var prefix;\n  var\
    \ i;\n  var j;\n  var k;\n  var len;\n  var max;\n  var min;\n  var found;\n \
    \ var foundLength;\n  var foundLength2;\n  var foundLength3;\n  var foundLength4;\n\
    \  var foundLength5;\n  var foundLength6;\n  var foundLength7;\n  var foundLength8;\n\
    \  var foundLength9;\n  var foundLength10;\n  var foundLength11;\n  var foundLength12;\n\
    \  var foundLength13;\n  var foundLength14;\n  var foundLength15;\n  var foundLength16;\n\
    \  var foundLength17;\n  var foundLength18;\n  var foundLength19;\n  var foundLength20;\n\
    \  var foundLength21;\n  var foundLength22;\n  var foundLength23;\n  var foundLength24;\n\
    \  var foundLength25;\n  var foundLength26;\n  var foundLength27;\n  var foundLength28;\n\
    \  var foundLength29;\n  var foundLength30;\n  var foundLength31;\n  var foundLength32;\n\
    \  var foundLength33;\n  var foundLength34;\n  var foundLength35;\n  var foundLength36;\n\
    \  var foundLength37;\n  var foundLength38;\n  var foundLength39;\n  var foundLength40;\n\
    \  var foundLength41;\n  var foundLength42;\n  var foundLength43;\n  var foundLength44;\n\
    \  var foundLength45;\n  var foundLength46;\n  var foundLength47;\n  var foundLength48;\n\
    \  var foundLength49;\n  var foundLength50;\n  var foundLength51;\n  var foundLength52;\n\
    \  var foundLength53;\n  var foundLength54;\n  var foundLength55;\n  var foundLength56;\n\
    \  var foundLength57;\n  var foundLength58;\n  var foundLength59;\n  var foundLength60;\n\
    \  var foundLength61;\n  var foundLength62;\n  var foundLength63;\n  var foundLength64;\n\
    \  var foundLength65;\n  var foundLength66;\n  var foundLength67;\n  var foundLength68;\n\
    \  var foundLength69;\n  var foundLength70;\n  var foundLength71;\n  var foundLength72;\n\
    \  var foundLength73;\n  var foundLength74;\n  var foundLength75;\n  var foundLength76;\n\
    \  var foundLength77;\n  var foundLength78;\n  var foundLength79;\n  var foundLength80;\n\
    \  var foundLength81;\n", "    var palindrome = \"\",\n        prefix_length =\
    \ 0,\n        suffix_length = 0,\n        prefix_postfix = \"\";\n\n    string\
    \ = string.toLowerCase();\n    prefix_length = string.length - 1;\n    suffix_length\
    \ = string.length - 1;\n\n    while(suffix_length >= 0){\n        prefix_postfix\
    \ = string.substr(prefix_length, suffix_length);\n        palindrome = prefix_postfix.concat(reverse(prefix_postfix));\n\
    \        suffix_length = prefix_length - 1;\n    }\n\n    return palindrome;\n\
    }\n", "    var postfix = string.substr(0, string.length - 1);\n    var reverse\
    \ = string.substr(0, string.length - 1);\n    var palindrome = postfix + reverse;\n\
    \    return palindrome;\n}\n", "  var reversed_string = string\n  var palindrome\
    \ = \"\"\n  var prefix_length = 0\n  var suffix_length = 0\n  var prefix_postfix\
    \ = \"\"\n  var suffix_postfix = \"\"\n  var prefix_postfix_length = 0\n  var\
    \ suffix_postfix_length = 0\n  var prefix_postfix_postfix = \"\"\n  var suffix_postfix_postfix\
    \ = \"\"\n  var prefix_postfix_postfix_length = 0\n  var suffix_postfix_postfix_length\
    \ = 0\n  \n  for(var i = 0; i<string.length; i++){\n    if(string[i] === string[string.length-1]){\n\
    \      suffix_postfix_postfix = string[i] + suffix_postfix_postfix\n      suffix_postfix_postfix_length\
    \ = suffix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[0]){\n\
    \      prefix_postfix_postfix = string[i] + prefix_postfix_postfix\n      prefix_postfix_postfix_length\
    \ = prefix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[string.length-1]){\n\
    \      suffix_postfix_postfix = string[i] + suffix_postfix_postfix\n      suffix_postfix_postfix_length\
    \ = suffix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[0]){\n\
    \      prefix_postfix_postfix = string[i] + prefix_postfix_postfix\n      prefix_postfix_postfix_length\
    \ = prefix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[string.length-1]){\n\
    \      suffix_postfix_postfix = string[i] + suffix_postfix_postfix\n      suffix_postfix_postfix_length\
    \ = suffix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[0]){\n\
    \      prefix_postfix_postfix = string[i] + prefix_postfix_postfix\n      prefix_postfix_postfix_length\
    \ = prefix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[string.length-1]){\n\
    \      suffix_postfix_postfix = string[i] + suffix_postfix_postfix\n      suffix_postfix_postfix_length\
    \ = suffix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[0]){\n\
    \      prefix_postfix_postfix = string[i] + prefix_postfix_postfix\n      prefix_postfix_postfix_length\
    \ = prefix_postfix_postfix.length\n    }\n    \n    if(string[i] === string[string.length-1]){\n\
    \      suffix_postfix_postfix = string[i] + suffix_postfix_postfix\n      suffix_postfix_postfix_length\
    \ = suffix_postfix_postfix.length\n    }\n    \n    if(string[i] === ", "    string\
    \ = string.toLowerCase();\n    var palindrome = \"\";\n    var longestPalindrome\
    \ = \"\";\n    var longestPalindromeLength = 0;\n    var longestPalindromePrefix\
    \ = \"\";\n    var longestPalindromeSuffix = \"\";\n    var longestPalindromePostfix\
    \ = \"\";\n    var longestPalindromePostfixLength = 0;\n    var longestPalindromePostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixSuffix = \"\";\n    var longestPalindromePostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixSuffix = \"\";\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixLength = 0;\n    var\
    \ longestPalindromePostfixPostfixPostfixPrefix = \"\";\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\";\n   \
    \ var longestPalindromePostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\
    ;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\";\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefi",
  "    string = string.toLowerCase();\n    var longestPalindrome = \"\";\n    var\
    \ longestPalindromeLength = 0;\n    var longestPalindromePrefix = \"\";\n    var\
    \ longestPalindromeSuffix = \"\";\n    var longestPalindromePostfix = \"\";\n\
    \    var longestPalindromePostfixLength = 0;\n    var longestPalindromePostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixSuffix = \"\";\n    var longestPalindromePostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixSuffix = \"\";\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixLength = 0;\n    var\
    \ longestPalindromePostfixPostfixPostfixPrefix = \"\";\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\";\n   \
    \ var longestPalindromePostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\
    ;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\";\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfix", "    var postfix =\
    \ string.substring(0,string.length-1);\n    var reverse = postfix.split(\"\").reverse().join(\"\
    \");\n    return string + reverse + postfix;\n}\n", "    string = string.replace(/[^a-zA-Z0-9]/g,\"\
    \");\n    var reversed_string = string.replace(/[a-zA-Z0-9]/g,\"\").split(\"\"\
    ).reverse().join(\"\");\n    var postfix_length = string.length - reversed_string.length;\n\
    \    var palindrome = string.substr(0,postfix_length) + reversed_string;\n   \
    \ return palindrome;\n}\n", "    var palindrome = string;\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var suffix_start_index = 0;\n    var suffix_end_index\
    \ = 0;\n    var suffix_start_char;\n    var suffix_end_char;\n    var suffix_char;\n\
    \    var suffix_char_length;\n    var suffix_char_start_index;\n    var suffix_char_end_index;\n\
    \    var suffix_char_start_char;\n    var suffix_char_end_char;\n    var suffix_char_char;\n\
    \    var suffix_char_char_length;\n    var suffix_char_char_start_index;\n   \
    \ var suffix_char_char_end_index;\n    var suffix_char_char_start_char;\n    var\
    \ suffix_char_char_end_char;\n    var suffix_char_char_char;\n    var suffix_char_char_char_length;\n\
    \    var suffix_char_char_char_start_index;\n    var suffix_char_char_char_end_index;\n\
    \    var suffix_char_char_char_start_char;\n    var suffix_char_char_char_end_char;\n\
    \    var suffix_char_char_char_char;\n    var suffix_char_char_char_char_length;\n\
    \    var suffix_char_char_char_char_start_index;\n    var suffix_char_char_char_char_end_index;\n\
    \    var suffix_char_char_char_char_start_char;\n    var suffix_char_char_char_char_end_char;\n\
    \    var suffix_char_char_char_char_char;\n    var suffix_char_char_char_char_char_length;\n\
    \    var suffix_char_char_char_char_char_start_index;\n    var suffix_char_char_char_char_char_end_index;\n\
    \    var suffix_char_char_char_char_char_start_char;\n    var suffix_char_char_char_char_char_end_char;\n\
    \    var suffix_char_char_char_char_char_char;\n    var suffix_char_char_char_char_char_char_length;\n\
    \    var suffix_char_char_char_char_char_char_start_index;\n    var suffix_char_char_char_char_char_char_end_index;\n\
    \    var suffix_char_char_char_char_char_char_start_char;\n    var suffix_char_char_char_char_char_char_end_char;\n\
    \    var suffix_char_char_char_char_char_char_char;\n    var suffix_char_char_char_char_char_char_char_length;\n\
    \    var suffix_char_char_char_char_char_char_char_char_start_index;\n    var\
    \ suffix_char_char_char_char_char_char_char_end_index;\n    var suffix_char_char_char_char_char_char_char_start_char;\n\
    \    var suffix_char_char_char_char_char_char_char_end_char;\n    var suffix_char_char_char_char_char_char_char_char;\n\
    \    var suffix_char_char_char_char_char_char_char_char_length;\n    var suffix_char_char_char_char_char_char_char_char_start_index;\n\
    \    var suffix_char_", "    var postfix = \"\";\n    var palindrome = \"\";\n\
    \    var palindromeLength = 0;\n    var stringLength = string.length;\n    var\
    \ reverseString = \"\";\n    var reverseStringLength = 0;\n    var isPalindrome\
    \ = true;\n    for(var i = 0; i < stringLength; i++){\n        postfix += string[i];\n\
    \    }\n    postfix = postfix.split(\"\").reverse().join(\"\");\n    for(var i\
    \ = 0; i < stringLength; i++){\n        reverseString += string[i];\n    }\n \
    \   reverseString = reverseString.split(\"\").reverse().join(\"\");\n    for(var\
    \ i = 0; i < stringLength; i++){\n        if(string[i] !== reverseString[i]){\n\
    \            isPalindrome = false;\n            break;\n        }\n    }\n   \
    \ if(isPalindrome){\n        for(var i = 0; i < stringLength; i++){\n        \
    \    reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          reverseString += string[i];\n        }\n        reverseString = reverseString.split(\"\
    \").reverse().join(\"\");\n        for(var i = 0; i < stringLength; i++){\n  \
    \          postfix += string[i];\n        }\n        postfix = postfix.split(\"\
    \"", "  var palindrome = string;\n  var reversed_string = reverse(string);\n \
    \ for(var i = 0; i<string.length; i++){\n    if(string[i] != reversed_string[i]){\n\
    \      palindrome = palindrome + reversed_string[i];\n    }\n  }\n  return palindrome;\n\
    }\n", "    var reversed_string = string\n    var longest_postfix_string = \"\"\
    \n    for(var i = 0; i < string.length; i++){\n        var postfix_string = string.substr(0,\
    \ i) + string.substr(i, string.length)\n        if(postfix_string == reversed_string){\n\
    \            longest_postfix_string = postfix_string\n        }\n    }\n    return\
    \ longest_postfix_string\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var palindrome_length = 0;\n    var palindrome_prefix\
    \ = \"\";\n    var palindrome_suffix = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_reverse\
    \ = \"\";\n    var palindrome_suffix_reverse = \"\";\n    var palindrome_prefix_reverse_length\
    \ = 0;\n    var palindrome_suffix_reverse_length = 0;\n    var palindrome_prefix_reverse_index\
    \ = 0;\n    var palindrome_suffix_reverse_index = 0;\n    var palindrome_prefix_reverse_string\
    \ = \"\";\n    var palindrome_suffix_reverse_string = \"\";\n    var palindrome_prefix_reverse_string_length\
    \ = 0;\n    var palindrome_suffix_reverse_string_length = 0;\n    var palindrome_prefix_reverse_string_index\
    \ = 0;\n    var palindrome_suffix_reverse_string_index = 0;\n    var palindrome_prefix_reverse_string_array\
    \ = \"\";\n    var palindrome_suffix_reverse_string_array = \"\";\n    var palindrome_prefix_reverse_string_array_length\
    \ = 0;\n    var palindrome_suffix_reverse_string_array_length = 0;\n    var palindrome_prefix_reverse_string_array_index\
    \ = 0;\n    var palindrome_suffix_reverse_string_array_index = 0;\n    var palindrome_prefix_reverse_string_array_string\
    \ = \"\";\n    var palindrome_suffix_reverse_string_array_string = \"\";\n   \
    \ var palindrome_prefix_reverse_string_array_string_length = 0;\n    var palindrome_suffix_reverse_string_array_string_length\
    \ = 0;\n    var palindrome_prefix_reverse_string_array_string_index = 0;\n   \
    \ var palindrome_suffix_reverse_string_array_string_index = 0;\n    var palindrome_prefix_reverse_string_array_string_array\
    \ = \"\";\n    var palindrome_suffix_reverse_string_array_string_array = \"\"\
    ;\n    var palindrome_prefix_reverse_string_array_string_array_length = 0;\n \
    \   var palindrome_suffix_reverse_string_array_string_array_length = 0;\n    var\
    \ palindrome_prefix_reverse_string_array_string_array_index = 0;\n    var palindrome_suffix_reverse_string_array_string_array_index\
    \ = 0;\n    var palindrome_prefix_reverse_string_array_string_array_string = \"\
    \";\n    var palindrome_suffix_reverse_string_array_string_array_string = \"\"\
    ;\n    var palindrome_prefix_reverse_string_array_string_array_string_length =\
    \ 0;\n    var palindrome_suffix_reverse_string_array_string_array_string_length\
    \ = 0;\n    var palindrome_prefix_reverse_string_array_string_array_string_array_index\
    \ = 0;\n    var palindrome_suffix_reverse_string_array_", "    var palindrome\
    \ = \"\",\n        prefix_length = string.length,\n        suffix_length = string.length\
    \ - prefix_length,\n        prefix_postfix = string.substr(0, prefix_length),\n\
    \        suffix_postfix = string.substr(prefix_length, string.length - prefix_length);\n\
    \n    for(var i = 0; i < suffix_length; i++){\n        var reverse_suffix = suffix_postfix.substr(0,\
    \ i) + suffix_postfix.substr(i + 1, suffix_postfix.length);\n        palindrome\
    \ = palindrome + prefix_postfix.substr(0, i) + reverse_suffix + prefix_postfix.substr(i\
    \ + 1, prefix_postfix.length);\n    }\n\n    return palindrome;\n}\n", "    string\
    \ = string.toLowerCase();\n    var palindrome = \"\";\n    var suffix;\n    var\
    \ prefix;\n    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n\
    \    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n    var suffixPalindrome;\n\
    \    var prefixPalindrome;\n    var suffixPalindromeLength;\n    var prefixPalindromeLength;\n\
    \    var suffixPalindromeStart;\n    var prefixPalindromeStart;\n    var suffixPalindromeEnd;\n\
    \    var prefixPalindromeEnd;\n    var suffixPalindromePalindrome;\n    var prefixPalindromePalindrome;\n\
    \    var suffixPalindromePalindromeLength;\n    var prefixPalindromePalindromeLength;\n\
    \    var suffixPalindromePalindromeStart;\n    var prefixPalindromePalindromeStart;\n\
    \    var suffixPalindromePalindromeEnd;\n    var prefixPalindromePalindromeEnd;\n\
    \    var suffixPalindromePalindromePalindrome;\n    var prefixPalindromePalindromePalindrome;\n\
    \    var suffixPalindromePalindromePalindromeLength;\n    var prefixPalindromePalindromePalindromeLength;\n\
    \    var suffixPalindromePalindromePalindromeStart;\n    var prefixPalindromePalindromePalindromeStart;\n\
    \    var suffixPalindromePalindromePalindromeEnd;\n    var prefixPalindromePalindromePalindromeEnd;\n\
    \    var suffixPalindromePalindromePalindromePalindrome;\n    var prefixPalindromePalindromePalindromePalindrome;\n\
    \    var suffixPalindromePalindromePalindromePalindromeLength;\n    var prefixPalindromePalindromePalindromePalindromeLength;\n\
    \    var suffixPalindromePalindromePalindromePalindromeStart;\n    var prefixPalindromePalindromePalindromePalindromeStart;\n\
    \    var suffixPalindromePalindromePalindromePalindromeEnd;\n    var prefixPalindromePalindromeP",
  "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var postfix_length = 0;\n    var reversed_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var i = 0;\n    var j = 0;\n    \n    while(i < string.length){\n\
    \        postfix_length = 0;\n        suffix_length = 0;\n        prefix_length\
    \ = 0;\n        \n        while(i < string.length && j < string.length){\n   \
    \         if(string[i] == string[j]){\n                postfix_length++;\n   \
    \             i++;\n                j++;\n            }\n            else{\n \
    \               suffix_length++;\n                j++;\n            }\n      \
    \  }\n        \n        if(postfix_length == suffix_length){\n            palindrome_length\
    \ = postfix_length;\n            \n            while(i < string.length){\n   \
    \             reversed_string += string[i];\n                i++;\n          \
    \  }\n            \n            while(j < string.length){\n                reversed_string\
    \ += string[j];\n                j++;\n            }\n            \n         \
    \   reversed_string = reversed_string.reverse();\n            \n            while(i\
    \ < string.length){\n                reversed_string += string[i];\n         \
    \       i++;\n            }\n            \n            while(j < string.length){\n\
    \                reversed_string += string[j];\n                j++;\n       \
    \     }\n            \n            reversed_string = reversed_string.reverse();\n\
    \            \n            while(i < string.length){\n                reversed_string\
    \ += string[i];\n                i++;\n            }\n            \n         \
    \   while(j < string.length){\n                reversed_string += string[j];\n\
    \                j++;\n            }\n            \n            reversed_string\
    \ = reversed_string.reverse();\n            \n            while(i < string.length){\n\
    \                reversed_string += string[i];\n                i++;\n       \
    \     }\n            \n            while(j < string.length){\n               \
    \ reversed_string += string[j];\n                j++;\n            }\n       \
    \     \n            reversed_string = reversed_string.reverse();\n           \
    \ \n            while(i < string.length){\n                reversed_string +=\
    \ string[i];\n                i++;\n            }\n            \n            while(j\
    \ < string.length){\n                reversed_string += string[j];\n         \
    \       j++;\n            }\n            \n            reversed_string = reversed_string.reverse();\n\
    \            \n            while(i < string.length){\n                reversed_string\
    \ += string[i];\n                i++;\n            }\n            \n         \
    \   while(j < string.length){\n                reversed_string += string[j];\n\
    \                j++;\n            }\n            \n            reversed_string\
    \ = reversed_string.reverse();\n            \n            while(i < string.length){\n\
    \                reversed_string ", "    var palindrome = \"\";\n    var palindrome_length\
    \ = 0;\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var suffix_index\
    \ = 0;\n    var prefix_index = 0;\n    var suffix_string = \"\";\n    var prefix_string\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var prefix_reverse = \"\";\n  \
    \  var suffix_palindrome = \"\";\n    var prefix_palindrome = \"\";\n    var suffix_palindrome_length\
    \ = 0;\n    var prefix_palindrome_length = 0;\n    var suffix_palindrome_index\
    \ = 0;\n    var prefix_palindrome_index = 0;\n    var suffix_palindrome_string\
    \ = \"\";\n    var prefix_palindrome_string = \"\";\n    var suffix_palindrome_reverse\
    \ = \"\";\n    var prefix_palindrome_reverse = \"\";\n    var suffix_palindrome_palindrome\
    \ = \"\";\n    var prefix_palindrome_palindrome = \"\";\n    var suffix_palindrome_palindrome_length\
    \ = 0;\n    var prefix_palindrome_palindrome_length = 0;\n    var suffix_palindrome_palindrome_index\
    \ = 0;\n    var prefix_palindrome_palindrome_index = 0;\n    var suffix_palindrome_palindrome_string\
    \ = \"\";\n    var prefix_palindrome_palindrome_string = \"\";\n    var suffix_palindrome_palindrome_reverse\
    \ = \"\";\n    var prefix_palindrome_palindrome_reverse = \"\";\n    var suffix_palindrome_palindrome_palindrome\
    \ = \"\";\n    var prefix_palindrome_palindrome_palindrome = \"\";\n    var suffix_palindrome_palindrome_palindrome_length\
    \ = 0;\n    var prefix_palindrome_palindrome_palindrome_length = 0;\n    var suffix_palindrome_palindrome_palindrome_index\
    \ = 0;\n    var prefix_palindrome_palindrome_palindrome_index = 0;\n    var suffix_palindrome_palindrome_palindrome_string\
    \ = \"\";\n    var prefix_palindrome_palindrome_palindrome_string = \"\";\n  \
    \  var suffix_palindrome_palindrome_palindrome_reverse = \"\";\n    var prefix_palindrome_palindrome_palindrome_reverse\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome_palindrome = \"\";\n\
    \    var prefix_palindrome_palindrome_palindrome_palindrome = \"\";\n    var suffix_palindrome",
  "    var palindrome = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromeIndex = 0;\n    var longestPalindromeIndexLength\
    \ = 0;\n    var longestPalindromeIndexStart = 0;\n    var longestPalindromeIndexEnd\
    \ = 0;\n    var longestPalindromeIndexStartLength = 0;\n    var longestPalindromeIndexEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStart = 0;\n    var longestPalindromeIndexEndStart\
    \ = 0;\n    var longestPalindromeIndexStartEnd = 0;\n    var longestPalindromeIndexStartStartLength\
    \ = 0;\n    var longestPalindromeIndexEndStartLength = 0;\n    var longestPalindromeIndexStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStart = 0;\n    var longestPalindromeIndexEndStartStart\
    \ = 0;\n    var longestPalindromeIndexStartEndStart = 0;\n    var longestPalindromeIndexStartStartEnd\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength\
    \ = 0;\n    var longestPalindromeIndexStartStartStartLength = 0;\n    var longestPalindromeIndexEndStartStartLength\
    \ = 0;\n    var longestPalindromeIndexStartEndStartLength = 0;\n    var longestPalindromeIndexStartStartEndLength",
  "  var reversed = \"\";\n  var longest = \"\";\n  for(var i = 0; i < string.length;\
    \ i++){\n    var current = string[i];\n    var next = string[string.length - i\
    \ - 1];\n    if(current == next){\n      continue;\n    }\n    if(next == \"\"\
    ){\n      reversed = current + reversed;\n      continue;\n    }\n    if(current\
    \ == \"\"){\n      reversed = next + reversed;\n      continue;\n    }\n    if(current\
    \ == next){\n      reversed = current + reversed;\n      continue;\n    }\n  \
    \  if(current == \"\" && next == \"\"){\n      reversed = current + reversed;\n\
    \      continue;\n    }\n    if(current == \"\" && next != \"\"){\n      reversed\
    \ = next + reversed;\n      continue;\n    }\n    if(current != \"\" && next ==\
    \ \"\"){\n      reversed = current + reversed;\n      continue;\n    }\n    if(current\
    \ != \"\" && next != \"\"){\n      reversed = current + next + reversed;\n   \
    \   continue;\n    }\n  }\n  if(reversed.length < string.length){\n    longest\
    \ = string;\n  }\n  if(reversed.length == string.length){\n    longest = reversed;\n\
    \  }\n  return longest;\n}\n", "    var postfix = string.split('').reverse().join('');\n\
    \    var palindrome = string.slice(0, string.length - postfix.length) + postfix;\n\
    \    return palindrome;\n}\n", "    var palindrome = \"\";\n    var longestPalindrome\
    \ = \"\";\n    var longestPalindromeLength = 0;\n    var longestPalindromeIndex\
    \ = 0;\n    var longestPalindromePrefix = \"\";\n    var longestPalindromeSuffix\
    \ = \"\";\n    var longestPalindromeSuffixIndex = 0;\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixReverse = \"\";\n    var longestPalindromeSuffixReverseIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseLength = 0;\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverse = \"\";\n    var longestPalindromeSuffixReverseStringReverseIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseLength = 0;\n    var\
    \ longestPalindromeSuffixReverseStringReverseString = \"\";\n    var longestPalindromeSuffixReverseStringReverseStringIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringLength = 0;\n\
    \    var longestPalindromeSuffixReverseStringReverseStringReverse = \"\";\n  \
    \  var longestPalindromeSuffixReverseStringReverseStringReverseIndex = 0;\n  \
    \  var longestPalindromeSuffixReverseStringReverseStringReverseLength = 0;\n \
    \   var longestPalindromeSuffixReverseStringReverseStringReverseString = \"\"\
    ;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseStringReverseStringReverseStringReverseStringIndex\
    \ = 0;\n    var longestPalindromeSuffixReverseStringReverseString", "    var reversed_string\
    \ = string\n    var palindrome = \"\"\n    var prefix_length = 0\n    var postfix_length\
    \ = 0\n    \n    while(true){\n        postfix_length = string.length\n      \
    \  prefix_length = string.length - postfix_length\n        \n        if(postfix_length\
    \ == 0){\n            break\n        }\n        \n        var postfix = string.substr(postfix_length)\n\
    \        var postfix_reversed = reversed_string.substr(0, postfix_length)\n  \
    \      \n        if(postfix_reversed == postfix){\n            palindrome = postfix_reversed\
    \ + palindrome\n        }\n        \n        string = string.substr(0, postfix_length)\n\
    \        reversed_string = reversed_string.substr(0, postfix_length)\n    }\n\
    \    \n    return palindrome\n}\n", "    var postfix = \"\";\n    var reverse\
    \ = \"\";\n    var longest = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        var c = string.charAt(i);\n        var post = string.substr(0, i);\n\
    \        var rev = string.reverse();\n        var pal = post + rev;\n        if(pal.length\
    \ >= longest){\n            longest = pal.length;\n            postfix = post;\n\
    \            reverse = rev;\n        }\n    }\n    return postfix + reverse;\n\
    }\n", "    var palindrome = string;\n    var postfix = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var palindrome_length = 0;\n    var palindrome_suffix\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_postfix = \"\";\n    var palindrome_prefix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_length = 0;\n    var palindrome_prefix_postfix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_length = 0;\n    var palindrome_prefix_postfix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_length = 0;\n    var\
    \ palindrome_prefix_postfix_suffix_suffix_suffix = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix = \"\";\n\
    \    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_length = 0;\n \
    \   var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix = \"\";\n\
    \    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_length =\
    \ 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = \"\";\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    var palindrome_prefix_postfix_suffix_suffix_suffix_suffix_suffix_",
  "    var palindrome = \"\",\n        postfix = \"\";\n    for(var i = 0; i < string.length;\
    \ i++){\n        postfix = string.substr(0, i) + string.substr(i, string.length);\n\
    \        if(postfix.toLowerCase() === postfix.toLowerCase().split(\"\").reverse().join(\"\
    \")){\n            palindrome = postfix.toLowerCase();\n            break;\n \
    \       }\n    }\n    return palindrome;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `make_palindrome(\"aba\")`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine for me. Can you give an example where it\
    \ fails?\n<|/ c |>\n<| c |>\nIt fails for me on `make_palindrome(\"aba\")`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works fine for me. Can you give an\
    \ example where it fails?\n<|/ c |>\n<| c |>\nI tested it again and it works fine\
    \ for me. Can you give an example where it fails?\n<|/ c |>\n<| a |>\n<code>",
  "    var palindrome = \"\";\n    var postfix = \"\";\n    var postfix_length = string.length;\n\
    \    var prefix_length = string.length - postfix_length;\n    var prefix_reverse\
    \ = \"\";\n    var prefix_reverse_length = prefix_length;\n    var prefix_reverse_length2\
    \ = prefix_length * 2;\n    var prefix_reverse2 = \"\";\n    var prefix_reverse3\
    \ = \"\";\n    var prefix_reverse4 = \"\";\n    var prefix_reverse5 = \"\";\n\
    \    var prefix_reverse6 = \"\";\n    var prefix_reverse7 = \"\";\n    var prefix_reverse8\
    \ = \"\";\n    var prefix_reverse9 = \"\";\n    var prefix_reverse10 = \"\";\n\
    \    var prefix_reverse11 = \"\";\n    var prefix_reverse12 = \"\";\n    var prefix_reverse13\
    \ = \"\";\n    var prefix_reverse14 = \"\";\n    var prefix_reverse15 = \"\";\n\
    \    var prefix_reverse16 = \"\";\n    var prefix_reverse17 = \"\";\n    var prefix_reverse18\
    \ = \"\";\n    var prefix_reverse19 = \"\";\n    var prefix_reverse20 = \"\";\n\
    \    var prefix_reverse21 = \"\";\n    var prefix_reverse22 = \"\";\n    var prefix_reverse23\
    \ = \"\";\n    var prefix_reverse24 = \"\";\n    var prefix_reverse25 = \"\";\n\
    \    var prefix_reverse26 = \"\";\n    var prefix_reverse27 = \"\";\n    var prefix_reverse28\
    \ = \"\";\n    var prefix_reverse29 = \"\";\n    var prefix_reverse30 = \"\";\n\
    \    var prefix_reverse31 = \"\";\n    var prefix_reverse32 = \"\";\n    var prefix_reverse33\
    \ = \"\";\n    var prefix_reverse34 = \"\";\n    var prefix_reverse35 = \"\";\n\
    \    var prefix_reverse36 = \"\";\n    var prefix_reverse37 = \"\";\n    var prefix_reverse38\
    \ = \"\";\n    var prefix_reverse39 = \"\";\n    var prefix_reverse40 = \"\";\n\
    \    var prefix_reverse41 = \"\";\n    var prefix_reverse42 = \"\";\n    var prefix_reverse43\
    \ = \"\";\n    var prefix_reverse44 = \"\";\n    var prefix_reverse45 = \"\";\n\
    \    var prefix_reverse46 = \"\";\n    var prefix_reverse47 = \"\";\n    var prefix_reverse48\
    \ = \"\";\n    var prefix_reverse49 = \"\";\n    var prefix_reverse50 = \"\";\n\
    \    var prefix_reverse51 = \"\";\n    var prefix_reverse52 = \"\";\n    var prefix_reverse53\
    \ = \"\";\n    var prefix_reverse54 = \"\";\n    var prefix_reverse55 = \"\";\n\
    \    var prefix_reverse56 = \"\";\n    var prefix_reverse57 = \"\";\n    var prefix_reverse58\
    \ = \"\";\n    var prefix_reverse59 = \"\";\n    var prefix_reverse60 = \"\";\n\
    \    var prefix_reverse61 = \"\";\n    var prefix_reverse62 = \"\";\n    var prefix_reverse63\
    \ = \"\";\n    var prefix_reverse64 = \"\";\n    var prefix_reverse65 = \"\";\n\
    \    var prefix_reverse66 = \"\";\n    var prefix_reverse67 = \"\";\n    var prefix_reverse68\
    \ = \"\";\n    var prefix_reverse69 = \"\";\n    var prefix_reverse70 = \"\";\n\
    \    var prefix_reverse71 = \"\";\n    var prefix_reverse72 = \"\";\n    var prefix_reverse73\
    \ = \"\";\n    var prefix_reverse74 = \"\";\n    var prefix_reverse75 = \"\";\n\
    \    var ", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_index\
    \ = 0;\n    var suffix_postfix_reverse_index = 0;\n    var prefix_postfix_reverse_length\
    \ = string.length - prefix_length;\n    var suffix_postfix_reverse_length = string.length\
    \ - suffix_length;\n    var prefix_postfix_reverse_length = string.length - prefix_length;\n\
    \    var suffix_postfix_reverse_length = string.length - suffix_length;\n    var\
    \ prefix_postfix_reverse_length = string.length - prefix_length;\n    var suffix_postfix_reverse_length\
    \ = string.length - suffix_length;\n    var prefix_postfix_reverse_length = string.length\
    \ - prefix_length;\n    var suffix_postfix_reverse_length = string.length - suffix_length;\n\
    \    var prefix_postfix_reverse_length = string.length - prefix_length;\n    var\
    \ suffix_postfix_reverse_length = string.length - suffix_length;\n    var prefix_postfix_reverse_length\
    \ = string.length - prefix_length;\n    var suffix_postfix_reverse_length = string.length\
    \ - suffix_length;\n    var prefix_postfix_reverse_length = string.length - prefix_length;\n\
    \    var suffix_postfix_reverse_length = string.length - suffix_length;\n    var\
    \ prefix_postfix_reverse_length = string.length - prefix_length;\n    var suffix_postfix_reverse_length\
    \ = string.length - suffix_length;\n    var prefix_postfix_reverse_length = string.length\
    \ - prefix_length;\n    var suffix_postfix_reverse_length = string.length - suffix_length;\n\
    \    var prefix_postfix_reverse_length = string.length - prefix_length;\n    var\
    \ suffix_postfix_reverse_length = string.length - suffix_length;\n    var prefix_postfix_reverse_length\
    \ = string.length - prefix_length;\n    var suffix_postfix_reverse_length = string.length\
    \ - suffix_length;\n    var prefix_postfix_reverse_length = string.length - prefix_length;\n\
    \    var suffix_postfix_reverse_length = string.length - suffix_length;\n    var\
    \ prefix_postfix_reverse_length = string.length - prefix_length;\n    var suffix_postfix_reverse_length\
    \ = string.length - suffix_length;\n    var prefix_postfix_reverse_length = string.length\
    \ - prefix_length;\n    var suffix_postfix_reverse_length = string.length - suffix_length;\n\
    \    var prefix_postfix_reverse_length = string.length - prefix_length;\n    var\
    \ suffix_postfix_reverse_length = string.length - suffix_length;\n    var prefix_postfix_reverse_length\
    \ = string.length - prefix_length;\n    var suffix_postfix_reverse_length = string.length\
    \ - suffix_length;\n    var prefix_postfix_reverse_length = string.length - prefix_length;\n\
    \    var suffix_postfix_reverse_length = string.length - suffix_length;\n    var\
    \ prefix_postfix_reverse_length = string.length - prefix_length;\n    var suffix_postfix_reverse_length\
    \ = string.length - suffix_length;\n    var prefix_postfix_", "    var reversed_string\
    \ = string\n    var palindrome = \"\"\n    var longest_postfix_length = 0\n  \
    \  var longest_postfix_index = 0\n    for(var i = 0; i < string.length; i++){\n\
    \        var postfix_index = string.length - i - 1\n        var postfix = string.substr(postfix_index,\
    \ 1)\n        var postfix_reversed = postfix.split(\"\").reverse().join(\"\")\n\
    \        if(postfix_reversed == postfix_index){\n            longest_postfix_length\
    \ = postfix_index\n            longest_postfix_index = postfix_index\n       \
    \ }\n    }\n    for(var i = 0; i < longest_postfix_length; i++){\n        var\
    \ postfix_index = longest_postfix_length - i - 1\n        var postfix = string.substr(postfix_index,\
    \ 1)\n        var postfix_reversed = postfix.split(\"\").reverse().join(\"\")\n\
    \        if(postfix_reversed == postfix_index){\n            palindrome += postfix_index\n\
    \        }\n    }\n    return palindrome\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. Try it with `make_palindrome(\"abba\")`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `make_palindrome(\"abba\")`\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try it with `make_palindrome(\"abba\")`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it with `make_palindrome(\"abba\")`\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try it with `make_palindrome(\"abba\")`.\n<|/ c |>\n<|\
    \ a |>\n<code>", "    var palindrome = \"\";\n    var prefix_length = 0;\n   \
    \ var suffix_length = 0;\n    var postfix_length = 0;\n    var postfix = \"\"\
    ;\n    var reverse = \"\";\n    var reverse_length = 0;\n    var i = 0;\n    var\
    \ j = 0;\n    var k = 0;\n    var l = 0;\n    var m = string.length;\n    while(i\
    \ < m){\n        postfix = string.substr(i,1);\n        postfix_length = postfix.length;\n\
    \        reverse = string.substr(0,i);\n        reverse_length = reverse.length;\n\
    \        for(j = 0; j < postfix_length; j++){\n            reverse = reverse +\
    \ postfix;\n        }\n        for(k = reverse_length - 1; k >= 0; k--){\n   \
    \         reverse = reverse + string.charAt(k);\n        }\n        if(reverse\
    \ == postfix){\n            palindrome = palindrome + string.substr(0,i);\n  \
    \          prefix_length = prefix_length + 1;\n            suffix_length = suffix_length\
    \ + 1;\n            postfix_length = postfix_length + 1;\n        }\n        i++;\n\
    \    }\n    return palindrome;\n}\n</code>\n<|/ a tags=algorithm,javascript |>\n\
    <| c |>\nThis doesn't work. Try it with `make_palindrome(\"abba\")`\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I even tested it with `make_palindrome(\"abba\"\
    )` which returns `\"abba\"`\n<|/ c |>\n<| c |>\nYes, it works. But it fails for\
    \ `make_palindrome(\"abba\")`\n<|/ c |>\n<| c |>\nI tested it with `make_palindrome(\"\
    abba\")` which returns `\"abba\"`\n<|/ c |>\n<| c |>\nI tested it with `make_palindrome(\"\
    abba\")` which returns `\"abba\"`\n<|/ c |>\n<| a tags=algorithm,javascript |>\n\
    <code>", "  var palindrome = \"\";\n  var prefix_length = 0;\n  var suffix_length\
    \ = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix = \"\";\n  var prefix_palindrome\
    \ = \"\";\n  var suffix_palindrome = \"\";\n  var prefix_palindrome_length = 0;\n\
    \  var suffix_palindrome_length = 0;\n  var prefix_palindrome_postfix = \"\";\n\
    \  var suffix_palindrome_postfix = \"\";\n  var prefix_palindrome_palindrome =\
    \ \"\";\n  var suffix_palindrome_palindrome = \"\";\n  var prefix_palindrome_palindrome_length\
    \ = 0;\n  var suffix_palindrome_palindrome_length = 0;\n  var prefix_palindrome_palindrome_postfix\
    \ = \"\";\n  var suffix_palindrome_palindrome_postfix = \"\";\n  var prefix_palindrome_palindrome_palindrome\
    \ = \"\";\n  var suffix_palindrome_palindrome_palindrome = \"\";\n  var prefix_palindrome_palindrome_palindrome_length\
    \ = 0;\n  var suffix_palindrome_palindrome_palindrome_length = 0;\n  var prefix_palindrome_palindrome_palindrome_postfix\
    \ = \"\";\n  var suffix_palindrome_palindrome_palindrome_postfix = \"\";\n  var\
    \ prefix_palindrome_palindrome_palindrome_palindrome = \"\";\n  var suffix_palindrome_palindrome_palindrome_palindrome\
    \ = \"\";\n  var prefix_palindrome_palindrome_palindrome_length = 0;\n  var suffix_palindrome_palindrome_length\
    \ = 0;\n  var prefix_palindrome_palindrome_postfix = \"\";\n  var suffix_palindrome_palindrome_postfix\
    \ = \"\";\n  var prefix_palindrome_palindrome_palindrome_palindrome = \"\";\n\
    \  var suffix_palindrome_palindrome_palindrome_palindrome = \"\";\n  var prefix_palindrome_palindrome_length\
    \ = 0;\n  var suffix_palindrome_length = 0;\n  var prefix_palindrome_postfix =\
    \ \"\";\n  var suffix_palindrome_postfix = \"\";\n  var prefix_palindrome_palindrome_palindrome_palindrome\
    \ = \"\";\n  var suffix_palindrome_palindrome_palindrome_palindrome = \"\";",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var longest_postfix_length\
    \ = 0\n    for(var i = string.length - 1; i >= 0; i--){\n        var current_char\
    \ = string[i]\n        var postfix_length = string.length - i - 1\n        if(postfix_length\
    \ > longest_postfix_length){\n            longest_postfix_length = postfix_length\n\
    \        }\n        if(current_char == string[string.length - 1 - postfix_length]){\n\
    \            reversed_string = reversed_string.substring(0, reversed_string.length\
    \ - postfix_length) + current_char + reversed_string.substring(string.length -\
    \ 1 - postfix_length)\n            palindrome = palindrome + current_char\n  \
    \      }\n    }\n    return palindrome\n}\n", "    var palindrome = \"\",\n  \
    \      length = string.length,\n        i;\n    for(i = length - 1; i >= 0; i--){\n\
    \        palindrome += string.charAt(i);\n    }\n    for(i = 0; i < length; i++){\n\
    \        palindrome += string[i];\n    }\n    return palindrome;\n}\n", "  if(string\
    \ == \"\"){\n    return \"\";\n  }\n  var reversed_string = string.reverse();\n\
    \  var prefix_string = string.slice(0, string.length - reversed_string.length);\n\
    \  var postfix_string = string.slice(string.length - reversed_string.length);\n\
    \  var palindrome = prefix_string + reversed_string + postfix_string;\n  return\
    \ palindrome;\n}\n", "    var reversed_string = string\n    var palindrome = \"\
    \"\n    var prefix_length = 0\n    var postfix_length = 0\n    var postfix_start_index\
    \ = 0\n    var postfix_end_index = 0\n    var is_palindrome = true\n    while(is_palindrome){\n\
    \        postfix_start_index = string.lastIndexOf(\"c\", postfix_end_index)\n\
    \        postfix_end_index = string.lastIndexOf(\"a\", postfix_end_index)\n  \
    \      if(postfix_start_index == -1 || postfix_end_index == -1){\n           \
    \ is_palindrome = false\n        }else{\n            postfix_length = postfix_end_index\
    \ - postfix_start_index\n            prefix_length = postfix_start_index - postfix_end_index\n\
    \            reversed_string = reversed_string.substring(0, postfix_start_index)\
    \ + reversed_string.substring(postfix_end_index + 1, reversed_string.length)\n\
    \            postfix_end_index = postfix_start_index + postfix_length\n      \
    \      postfix_start_index = postfix_end_index - prefix_length\n        }\n  \
    \  }\n    palindrome = reversed_string\n    return palindrome\n}\n", "    string\
    \ = string.toLowerCase();\n    var postfix = \"\";\n    var palindrome = \"\"\
    ;\n    var reverse = \"\";\n    var length = string.length;\n    for(var i = 0;\
    \ i < length; i++){\n        var char = string.charAt(i);\n        if(char ===\
    \ string.charAt(length - i - 1)){\n            postfix += char;\n        }else{\n\
    \            postfix += char + reverse;\n        }\n    }\n    postfix = postfix.split(\"\
    \").reverse().join(\"\");\n    postfix = postfix + postfix;\n    for(var i = 0;\
    \ i < length; i++){\n        var char = string.charAt(i);\n        if(char ===\
    \ string.charAt(length - i - 1)){\n            palindrome += char;\n        }else{\n\
    \            palindrome += char + postfix;\n        }\n    }\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var suffix;\n    var prefix;\n    var suffixLength;\n\
    \    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n\
    \    var prefixEnd;\n    var suffixPalindrome;\n    var prefixPalindrome;\n  \
    \  var i;\n    var j;\n    var k;\n    var l;\n    var m;\n    var n;\n    var\
    \ isPalindrome;\n    \n    string = string.toLowerCase();\n    \n    suffixLength\
    \ = string.length;\n    prefixLength = string.length-1;\n    \n    suffixStart\
    \ = suffixLength-1;\n    prefixStart = prefixLength;\n    \n    suffixEnd = suffixStart;\n\
    \    prefixEnd = prefixStart;\n    \n    suffixPalindrome = string.substring(suffixStart,\
    \ suffixEnd);\n    prefixPalindrome = string.substring(prefixStart, prefixEnd);\n\
    \    \n    for(i = suffixStart; i >= 0; i--){\n        for(j = prefixStart; j\
    \ >= 0; j--){\n            k = string.indexOf(suffixPalindrome, j);\n        \
    \    l = string.indexOf(prefixPalindrome, i);\n            \n            if(k\
    \ >= 0 && l >= 0){\n                isPalindrome = true;\n                \n \
    \               for(m = 0; m <= k; m++){\n                    n = string.indexOf(suffixPalindrome,\
    \ j+m);\n                    if(n >= 0){\n                        isPalindrome\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                \n                for(m = 0; m <= l; m++){\n       \
    \             n = string.indexOf(prefixPalindrome, i+m);\n                   \
    \ if(n >= 0){\n                        isPalindrome = false;\n               \
    \         break;\n                    }\n                }\n                \n\
    \                if(isPalindrome){\n                    palindrome += string.substring(i,\
    \ i+k);\n                    \n                    suffixEnd = suffixEnd+k;\n\
    \                    prefixEnd = prefixEnd+l;\n                    \n        \
    \            suffixPalindrome = string.substring(suffixStart, suffixEnd);\n  \
    \                  prefixPalindrome = string.substring(prefixStart, prefixEnd);\n\
    \                }\n            }\n        }\n    }\n    \n    return palindrome;\n\
    }\n", "  var reversed_string = string\n  var prefix_length = 0\n  var postfix_length\
    \ = 0\n  for(var i=string.length-1; i>=0; i--){\n    if(string[i] === string[string.length-1]){\n\
    \      postfix_length++\n    }\n    if(string[i] === string[0]){\n      prefix_length++\n\
    \    }\n  }\n  if(postfix_length < prefix_length){\n    reversed_string = reversed_string.substr(0,reversed_string.length-postfix_length)\n\
    \  }\n  reversed_string += string.reverse()\n  return reversed_string\n}\n", " \
    \   var palindrome = string;\n    var postfix = \"\";\n    var reverse = \"\"\
    ;\n    var suffix;\n    var i;\n    for(i = 0; i < string.length; i++){\n    \
    \    postfix = string.substr(0, i);\n        reverse = reverse.substr(0, reverse.length-1);\n\
    \        reverse = reverse + postfix;\n        suffix = string.substr(i);\n  \
    \      if(suffix === reverse){\n            palindrome = palindrome + suffix;\n\
    \        }\n    }\n    return palindrome;\n}\n", "    var palindrome = \"\",\n\
    \        postfix = \"\",\n        prefix_length = 0,\n        suffix_length =\
    \ 0,\n        i,\n        length = string.length;\n\n    for(i = 0; i < length;\
    \ i++){\n        postfix += string[i];\n        prefix_length = i;\n        suffix_length\
    \ = length - i;\n        if(postfix.match(/[a-z]/) && postfix.match(/[A-Z]/)){\n\
    \            postfix = postfix.toLowerCase();\n            postfix = postfix.replace(/[^a-z]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^A-Z]/gi, \"\");\n         \
    \   postfix = postfix.replace(/[^A-Za-z]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix\
    \ = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix\
    \ = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix\
    \ = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix\
    \ = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix\
    \ = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi,\
    \ \"\");\n            postfix = postfix.replace(/[^a-zA-Z0-9]/gi, \"\");\n   \
    \         postfix = postfi", "  var reversed_string = string\n  var palindrome\
    \ = \"\"\n  var prefix_length = 0\n  for(var i = 0; i<string.length; i++){\n \
    \   if(string[i] === string[string.length-1-i]){\n      prefix_length = i\n  \
    \    break\n    }\n  }\n  for(var i = 0; i<string.length; i++){\n    if(string[i]\
    \ === string[string.length-1-i]){\n      reversed_string = reversed_string.substr(0,reversed_string.length-i)\
    \ + reversed_string.substr(reversed_string.length-i)\n      break\n    }\n  }\n\
    \  for(var i = 0; i<string.length; i++){\n    if(string[i] === string[string.length-1-i]){\n\
    \      palindrome = palindrome + string.substr(0,i) + reversed_string.substr(0,i)\
    \ + string.substr(i)\n      break\n    }\n  }\n  return palindrome\n}\n", "  \
    \  var palindrome = string;\n    var palindrome_length = string.length;\n    var\
    \ palindrome_postfix = \"\";\n    var palindrome_prefix_length = string.length;\n\
    \    var palindrome_prefix_postfix = \"\";\n    var palindrome_prefix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix = \"\";\n    var\
    \ palindrome_prefix_postfix_postfix_length = string.length;\n    var palindrome_prefix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_length = string.length;\n\
    \    var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "  if(string === \"\"){\n    return \"\";\n  }\n  var longestPalindrome = find_longest_palindrome(string);\n\
    \  var reversedString = reverseString(string, longestPalindrome);\n  return reversedString\
    \ + longestPalindrome;\n}\n", "    string = string.toLowerCase();\n    var palindrome\
    \ = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromePrefixLength = 0;\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromePostfixLength = 0;\n    var longestPalindromePostfixLengthReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0;\n    var longestPalindromePostfixLengthReverseReverse = 0;\n    var longestPalindromePostfixLengthReverseReverse",
  "  var palindrome = string;\n  var prefix_length = 0;\n  var suffix_length = 0;\n\
    \  var prefix_postfix = \"\";\n  var suffix_postfix = \"\";\n  var prefix_reverse\
    \ = \"\";\n  var suffix_reverse = \"\";\n  var prefix_postfix_reverse = \"\";\n\
    \  var suffix_postfix_reverse = \"\";\n  var prefix_postfix_reverse_index = 0;\n\
    \  var suffix_postfix_reverse_index = 0;\n  var prefix_postfix_reverse_index2\
    \ = 0;\n  var suffix_postfix_reverse_index2 = 0;\n  var prefix_postfix_reverse_index3\
    \ = 0;\n  var suffix_postfix_reverse_index3 = 0;\n  var prefix_postfix_reverse_index4\
    \ = 0;\n  var suffix_postfix_reverse_index4 = 0;\n  var prefix_postfix_reverse_index5\
    \ = 0;\n  var suffix_postfix_reverse_index5 = 0;\n  var prefix_postfix_reverse_index6\
    \ = 0;\n  var suffix_postfix_reverse_index6 = 0;\n  var prefix_postfix_reverse_index7\
    \ = 0;\n  var suffix_postfix_reverse_index7 = 0;\n  var prefix_postfix_reverse_index8\
    \ = 0;\n  var suffix_postfix_reverse_index8 = 0;\n  var prefix_postfix_reverse_index9\
    \ = 0;\n  var suffix_postfix_reverse_index9 = 0;\n  var prefix_postfix_reverse_index10\
    \ = 0;\n  var suffix_postfix_reverse_index10 = 0;\n  var prefix_postfix_reverse_index11\
    \ = 0;\n  var suffix_postfix_reverse_index11 = 0;\n  var prefix_postfix_reverse_index12\
    \ = 0;\n  var suffix_postfix_reverse_index12 = 0;\n  var prefix_postfix_reverse_index13\
    \ = 0;\n  var suffix_postfix_reverse_index13 = 0;\n  var prefix_postfix_reverse_index14\
    \ = 0;\n  var suffix_postfix_reverse_index14 = 0;\n  var prefix_postfix_reverse_index15\
    \ = 0;\n  var suffix_postfix_reverse_index15 = 0;\n  var prefix_postfix_reverse_index16\
    \ = 0;\n  var suffix_postfix_reverse_index16 = 0;\n  var prefix_postfix_reverse_index17\
    \ = 0;\n  var suffix_postfix_reverse_index17 = 0;\n  var prefix_postfix_reverse_index18\
    \ = 0;\n  var suffix_postfix_reverse_index18 = 0;\n  var prefix_postfix_reverse_index19\
    \ = 0;\n  var suffix_postfix_reverse_index19 = 0;\n  var prefix_postfix_reverse_index20\
    \ = 0;\n  var suffix_postfix_reverse_index20 = 0;\n  var prefix_postfix_reverse_index21\
    \ = 0;\n  var suffix_postfix_reverse_index21 = 0;\n  var prefix_postfix_reverse_index22\
    \ = 0;\n  var suffix_postfix_reverse_index22 = 0;\n  var prefix_postfix_reverse_index23\
    \ = 0;\n  var suffix_postfix_reverse_index23 = 0;\n  var prefix_postfix_reverse_index24\
    \ = 0;\n  var suffix_postfix_reverse_index24 = 0;\n  var prefix_postfix_reverse_index",
  "    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length =\
    \ 0,\n        prefix_reversed = \"\",\n        suffix_reversed = \"\";\n\n   \
    \ string = string.toLowerCase();\n    prefix_length = string.length - 1;\n   \
    \ suffix_length = string.length - prefix_length;\n\n    prefix_reversed = string[prefix_length];\n\
    \    suffix_reversed = string[suffix_length];\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === prefix_reversed){\n            prefix_length--;\n\
    \            prefix_reversed = string[prefix_length];\n        }\n        else\
    \ if(string[i] === suffix_reversed){\n            suffix_length--;\n         \
    \   suffix_reversed = string[suffix_length];\n        }\n        else{\n     \
    \       palindrome += string[i];\n        }\n    }\n\n    return palindrome +\
    \ prefix_reversed + suffix_reversed;\n}\n", "    var reversed_string = string\n\
    \    var palindrome = \"\"\n    var prefix_length = 0\n    var suffix_length =\
    \ 0\n    var longest_postfix_length = 0\n    var longest_postfix_length_index\
    \ = 0\n    var longest_postfix_length_string = \"\"\n    var longest_postfix_length_substring\
    \ = \"\"\n    var longest_postfix_length_substring_index = 0\n    var longest_postfix_length_substring_string\
    \ = \"\"\n    var longest_postfix_length_substring_string_index = 0\n    var longest_postfix_length_substring_string_reverse\
    \ = \"\"\n    var longest_postfix_length_substring_string_reverse_index = 0\n\
    \    var longest_postfix_length_substring_string_reverse_length = string.length\n\
    \    \n    while(longest_postfix_length_index < longest_postfix_length_substring_string_reverse_length){\n\
    \        longest_postfix_length_substring_string_reverse = string.substr(longest_postfix_length_substring_string_reverse_index,longest_postfix_length_substring_string_reverse_length)\n\
    \        longest_postfix_length_substring_string_reverse_index = longest_postfix_length_substring_string_reverse.length\n\
    \        longest_postfix_length_substring_string_reverse_length = longest_postfix_length_substring_string_reverse.length\n\
    \        \n        longest_postfix_length_substring_string = string.substr(longest_postfix_length_substring_string_index,longest_postfix_length_substring_string_reverse_length)\n\
    \        longest_postfix_length_substring_string_index = longest_postfix_length_substring_string.length\n\
    \        longest_postfix_length_substring_string_reverse_length = longest_postfix_length_substring_string_reverse.length\n\
    \        \n        longest_postfix_length_substring = string.substr(longest_postfix_length_substring_index,longest_postfix_length_substring_string_reverse_length)\n\
    \        longest_postfix_length_substring_index = longest_postfix_length_substring.length\n\
    \        longest_postfix_length_substring_string_reverse_length = longest_postfix_length_substring_string_reverse.length\n\
    \        \n        if(longest_postfix_length_substring == longest_postfix_length_substring_string){\n\
    \            longest_postfix_length_string = longest_postfix_length_substring_string\n\
    \            longest_postfix_length_index = longest_postfix_length_substring_string.length\n\
    \        }\n        else{\n            longest_postfix_length_string = longest_postfix_length_substring_string\n\
    \            longest_postfix_length_index = longest_postfix_length_substring_string.length\n\
    \        }\n    }\n    \n    while(longest_postfix_length_index < string.length){\n\
    \        longest_postfix_length_substring_string_reverse = string.substr(longest_postfix_length_substring_string_reverse_index,longest_postfix_length_substring_string",
  "    var palindrome = string;\n    var reversed_string = \"\";\n    var prefix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix_start_index = 0;\n    var\
    \ postfix_end_index = 0;\n    var palindrome_length = 0;\n    var palindrome_start_index\
    \ = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n\
    \    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var\
    \ palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index\
    \ = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n\
    \    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var\
    \ palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index\
    \ = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n\
    \    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var\
    \ palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index\
    \ = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n\
    \    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var\
    \ palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index\
    \ = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n\
    \    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var\
    \ palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index\
    \ = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n\
    \    var palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var\
    \ palindrome_start_index = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index\
    \ = 0;\n    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n\
    \    var palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var\
    \ palindrome_end_index = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_index\
    \ = 0;\n    var palindrome_start_index = 0;\n    var palindrome_end_", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var prefix_length =\
    \ 0\n    var suffix_length = 0\n    while(suffix_length < string.length){\n  \
    \      suffix_length = suffix_length + reversed_string.length\n        var palindrome_suffix\
    \ = reversed_string.substring(suffix_length)\n        var palindrome_prefix =\
    \ reversed_string.substring(0, suffix_length)\n        if(is_palindrome(palindrome_suffix)){\n\
    \            palindrome = palindrome + palindrome_suffix\n            prefix_length\
    \ = prefix_length + palindrome_suffix.length\n        }\n    }\n    return palindrome\n\
    }\n", "    var postfix = \"\";\n    var reverse = \"\";\n    var longest = 0;\n\
    \    var longestPostfix = \"\";\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == string[string.length - 1 - i]){\n            postfix\
    \ += string[i];\n        }\n        else{\n            postfix += string[i] +\
    \ string[string.length - 1 - i];\n        }\n        if(postfix.length > longest){\n\
    \            longest = postfix.length;\n            longestPostfix = postfix.substr(0,\
    \ longest);\n        }\n    }\n    postfix = longestPostfix + postfix.substr(0,\
    \ longest);\n    reverse = longestPostfix.substr(0, longest) + postfix.substr(longest);\n\
    \    return reverse;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for \"\
    cat\" and \"cat\"\n<|/ c |>\n<| c |>\nIt works for me. Did you try it out?\n<|/\
    \ c |>\n<| c |>\nYes, it works. But it fails for \"cat\" and \"cat\"\n<|/ c |>\n\
    <| c |>\nIt works for me too. Did you try it out? I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nYes, it works. But it fails for \"cat\" and \"cat\"\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    var palindrome = string;\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var reversed_string = \"\";\n    \n    while(prefix_length < string.length){\n\
    \        prefix_postfix += string.substr(prefix_length, 1);\n        prefix_length++;\n\
    \    }\n    \n    while(suffix_length < string.length){\n        suffix_postfix\
    \ += string.substr(suffix_length, 1);\n        suffix_length++;\n    }\n    \n\
    \    while(suffix_length >= 0){\n        reversed_string += string.substr(0, suffix_length);\n\
    \        reversed_string += string.substr(suffix_length, 1);\n        suffix_length--;\n\
    \    }\n    \n    while(prefix_length >= 0){\n        reversed_string += string.substr(0,\
    \ prefix_length);\n        reversed_string += string.substr(prefix_length, 1);\n\
    \        prefix_length--;\n    }\n    \n    while(prefix_postfix.length < suffix_postfix.length){\n\
    \        prefix_postfix += reversed_string;\n    }\n    \n    while(suffix_postfix.length\
    \ < reversed_string.length){\n        suffix_postfix += reversed_string;\n   \
    \ }\n    \n    while(suffix_postfix.length >= 0){\n        palindrome += reversed_string;\n\
    \        suffix_postfix = suffix_postfix.substr(0, suffix_postfix.length - 1);\n\
    \    }\n    \n    while(prefix_postfix.length >= 0){\n        palindrome += reversed_string;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_postfix.length - 1);\n\
    \    }\n    \n    return palindrome;\n}\n", "    var reversed_string = string.replace(/^./g,function(m){\n\
    \        return m.split('').reverse().join('');\n    });\n    return reversed_string\
    \ + reversed_string.split('').reverse().join('');\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=javascript,algorithm,string |>\n<code>", "    var reversed_string\
    \ = \"\";\n    var postfix_length = string.length-1;\n    var prefix_length =\
    \ string.length-postfix_length;\n    var prefix_postfix = string.substr(0,postfix_length);\n\
    \    var postfix_postfix = string.substr(postfix_length,string.length);\n    var\
    \ postfix_reversed_string = postfix_postfix.split(\"\").reverse().join(\"\");\n\
    \    var palindrome = prefix_postfix + postfix_reversed_string;\n    return palindrome;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nThis doesn't seem\
    \ to work. Try `make_palindrome(\"abba\")`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. I tested it on \"abba\".\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for \"abba\" because \"abba\" is not a palindrome.\n<|/ c |>\n<| c |>\nI tested\
    \ it on \"abba\" and it works. I tested it on \"abbaa\" and it also works.\n<|/\
    \ c |>\n<| c |>\nI tested it on \"abbaa\" and it also works. I tested it on \"\
    abbaaa\" and it also works.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    var reversed_string\
    \ = string\n    var palindrome = \"\"\n    var prefix_length = 0\n    var suffix_length\
    \ = 0\n    while(true){\n        prefix_length = string.search(/[a-z]/)\n    \
    \    suffix_length = string.search(/[a-z]/)\n        if(prefix_length == -1 &&\
    \ suffix_length == -1){\n            break\n        }\n        if(prefix_length\
    \ == -1){\n            reversed_string = reversed_string+string.substring(suffix_length)\n\
    \            string = string.substring(0,suffix_length)\n        }\n        else{\n\
    \            reversed_string = reversed_string+string.substring(suffix_length,prefix_length)\n\
    \            string = string.substring(0,suffix_length)\n        }\n        \n\
    \        if(string.search(/[a-z]/) == -1){\n            palindrome = palindrome+string\n\
    \            string = reversed_string\n        }\n    }\n    return palindrome\n\
    }\n", "    var palindrome = \"\",\n        postfix = \"\";\n    for(var i = 0;\
    \ i < string.length; i++){\n        postfix += string[i];\n    }\n    postfix\
    \ = postfix.split(\"\").reverse().join(\"\");\n    for(var i = 0; i < string.length;\
    \ i++){\n        palindrome += string[i];\n    }\n    palindrome += postfix;\n\
    \    return palindrome;\n}\n", "    var palindrome = \"\",\n        postfix =\
    \ \"\";\n    \n    for(var i = 0; i < string.length; i++){\n        postfix =\
    \ string.substr(0, i) + string.substr(i, string.length);\n        palindrome +=\
    \ postfix;\n    }\n    \n    return palindrome;\n}\n", "    var palindrome = \"\
    \",\n        postfix = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n\
    \        postfix += string[i];\n    }\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === postfix[postfix.length - 1 - i]){\n        \
    \    palindrome += string[i];\n        }\n    }\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_postfix_length = 0;\n    var reverse_postfix_string = \"\
    \";\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_postfix_string_reverse = \"\";\n    var reverse_prefix_string_reverse\
    \ = \"\";\n    var reverse_suffix_string_reverse = \"\";\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var postfix_string = \"\";\n   \
    \ var postfix_string_reverse = \"\";\n    var prefix_string_reverse = \"\";\n\
    \    var suffix_string_reverse = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_postfix_length = 0;\n    var reverse_postfix_string = \"\
    \";\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_postfix_string_reverse = \"\";\n    var reverse_prefix_string_reverse\
    \ = \"\";\n    var reverse_suffix_string_reverse = \"\";\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var postfix_string = \"\";\n   \
    \ var postfix_string_reverse = \"\";\n    var prefix_string_reverse = \"\";\n\
    \    var suffix_string_reverse = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_postfix_length = 0;\n    var reverse_postfix_string = \"\
    \";\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_postfix_string_reverse = \"\";\n    var reverse_prefix_string_reverse\
    \ = \"\";\n    var reverse_suffix_string_reverse = \"\";\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var postfix_string = \"\";\n   \
    \ var postfix_string_reverse = \"\";\n    var prefix_string_reverse = \"\";\n\
    \    var suffix_string_reverse = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_postfix_length = 0;\n    var reverse_postfix_string = \"\
    \";\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_postfix_string_reverse = \"\";\n    var reverse_prefix_string_reverse\
    \ = \"\";\n    var reverse_suffix_string_reverse = \"\";\n    var ", "  var palindrome\
    \ = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var palindrome_length\
    \ = 0;\n  var palindrome_suffix;\n  var palindrome_prefix_length;\n  var palindrome_prefix_suffix;\n\
    \  var palindrome_prefix_suffix_reverse;\n  var palindrome_prefix_suffix_reverse_index;\n\
    \  var palindrome_prefix_suffix_reverse_length;\n  var palindrome_prefix_suffix_reverse_string;\n\
    \  var palindrome_prefix_suffix_reverse_string_index;\n  var palindrome_prefix_suffix_reverse_string_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix;\n  var palindrome_prefix_suffix_reverse_string_suffix_reverse;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_index;\n  var palindrome_prefix_suffix_reverse_string_suffix_reverse_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string;\n  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_index;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_index;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_index;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix_reverse;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix_reverse_index;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix_reverse_length;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string;\n\
    \  var palindrome_prefix_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_suffix_reverse_string_index;\n\
    \  var palindrome_prefix_suffix_reverse_string_", "    var reversed_string = string.reverse\
    \ ();\n    var palindrome = string + reversed_string;\n    return palindrome;\n\
    }\n", "    var reversed_string = \"\";\n    var prefix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_string_length\
    \ = 0;\n    var longest_postfix_string_chars = [];\n    \n    for(var i = 0; i<string.length;\
    \ i++){\n        longest_postfix_string_chars.push(string[i]);\n        longest_postfix_string_length++;\n\
    \    }\n    \n    for(var i = 0; i<string.length; i++){\n        if(longest_postfix_string_length\
    \ == 0){\n            reversed_string += string[i];\n            prefix_length++;\n\
    \        }\n        else if(longest_postfix_string_length == 1){\n           \
    \ reversed_string += string[i];\n            longest_postfix_length++;\n     \
    \   }\n        else if(longest_postfix_string_length == 2){\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 3){\n            reversed_string += string[i];\n\
    \            longest_postfix_length++;\n        }\n        else if(longest_postfix_string_length\
    \ == 4){\n            reversed_string += string[i];\n            longest_postfix_length++;\n\
    \        }\n        else if(longest_postfix_string_length == 5){\n           \
    \ reversed_string += string[i];\n            longest_postfix_length++;\n     \
    \   }\n        else if(longest_postfix_string_length == 6){\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 7)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 8)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 9)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 10)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 11)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 12)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n        }\n        else\
    \ if(longest_postfix_string_length == 13)\n        {\n            reversed_string\
    \ += string[i];\n            longest_postfix_length++;\n", "    var palindrome\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_start = 0;\n    var palindrome_end = 0;\n    var\
    \ palindrome_middle = 0;\n    var palindrome_middle_index = 0;\n    var palindrome_middle_string\
    \ = \"\";\n    var palindrome_middle_start = 0;\n    var palindrome_middle_end\
    \ = 0;\n    var palindrome_middle_middle = 0;\n    var palindrome_middle_middle_index\
    \ = 0;\n    var palindrome_middle_middle_string = \"\";\n    var palindrome_middle_middle_start\
    \ = 0;\n    var palindrome_middle_middle_end = 0;\n    var palindrome_middle_middle_middle\
    \ = 0;\n    var palindrome_middle_middle_middle_index = 0;\n    var palindrome_middle_middle_middle_string\
    \ = \"\";\n    var palindrome_middle_middle_middle_start = 0;\n    var palindrome_middle_middle_middle_end\
    \ = 0;\n    var palindrome_middle_middle_middle_middle = 0;\n    var palindrome_middle_middle_middle_middle_index\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_string = \"\";\n    var\
    \ palindrome_middle_middle_middle_middle_start = 0;\n    var palindrome_middle_middle_middle_middle_end\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_middle = 0;\n    var palindrome_middle_middle_middle_middle_middle_index\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_middle_string = \"\";\n\
    \    var palindrome_middle_middle_middle_middle_middle_start = 0;\n    var palindrome_middle_middle_middle_middle_middle_end\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_middle_middle = 0;\n  \
    \  var palindrome_middle_middle_middle_middle_middle_string = \"\";\n    var palindrome_middle_middle_middle_middle_middle_start\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_middle_end = 0;\n    var\
    \ palindrome_middle_middle_middle_middle_middle_middle = 0;\n    var palindrome_middle_middle_middle_middle_middle_string\
    \ = \"\";\n    var palindrome_middle_middle_middle_middle_middle_start = 0;\n\
    \    var palindrome_middle_middle_middle_middle_middle_end = 0;\n    var palindrome_middle_middle_middle_middle_middle_middle\
    \ = 0;\n    var palindrome_middle_middle_middle_middle_middle_middle_string =\
    \ \"\";\n    var palindrome_middle_middle_middle_middle_middle_middle_start =\
    \ 0;\n    var palindrome_middle_middle_middle_middle_middle_middle_end = 0;\n\
    \    var palindrome_middle_middle_middle_middle_middle_", "    var reversed =\
    \ \"\";\n    var longest = 0;\n    for(var i = 0; i < string.length; i++){\n \
    \       var char = string.charAt(i);\n        if(char == string.charAt(string.length\
    \ - 1 - i)){\n            longest++;\n        }\n    }\n    for(var i = 0; i <\
    \ string.length; i++){\n        var char = string.charAt(i);\n        if(char\
    \ == string.charAt(string.length - 1 - i)){\n            reversed = reversed +\
    \ char;\n        }\n    }\n    return reversed + string.substr(0, longest);\n\
    }\n", "    var reversed_string = \"\";\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\";\n\
    \    var lon", "    var reversed_string = string.replace(/^./g,\"\").split(\"\"\
    ).reverse().join(\"\");\n    return string + reversed_string;\n}\n", "    var\
    \ palindrome = string;\n    var prefix_length = 0;\n    var suffix_length = 0;\n\
    \    var postfix_length = 0;\n    var postfix_string = \"\";\n    var postfix_reverse\
    \ = \"\";\n    var postfix_reverse_index = 0;\n    var postfix_reverse_length\
    \ = 0;\n    var postfix_reverse_string = \"\";\n    var postfix_reverse_string_index\
    \ = 0;\n    var postfix_reverse_string_reverse = \"\";\n    var postfix_reverse_string_reverse_index\
    \ = 0;\n    var postfix_reverse_string_reverse_length = 0;\n    var postfix_reverse_string_reverse_string\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_index = 0;\n    var postfix_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_index = 0;\n\
    \    var postfix_reverse_string_reverse_string_reverse_length = 0;\n    var postfix_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse =\
    \ \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_\
    \ = \"\";\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_index\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var postfix_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_\
    \ = \"\";\n    var postfix_reverse_string", "    var palindrome = \"\",\n    \
    \    postfix = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n    \
    \    postfix = string.substr(0, i) + string[i];\n        if(isPalindrome(postfix)){\n\
    \            palindrome += postfix;\n        }\n    }\n    return palindrome;\n\
    }\n", "    var reversed_string = string.reverse ();\n    var prefix_string = string.slice\
    \ (0, reversed_string.lastIndexOf (string));\n    var postfix_string = string.slice\
    \ (reversed_string.lastIndexOf (string) + 1);\n    return prefix_string + postfix_string;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    var reversed_string\
    \ = string.replace(/[^a-zA-Z0-9]/g,\"\").split(\"\").reverse().join(\"\");\n \
    \   var palindrome = string.split(\"\").reverse().join(\"\") + reversed_string;\n\
    \    return palindrome;\n}\n", "    string = string.toLowerCase();\n    var palindrome\
    \ = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromePrefix = \"\";\n    var longestPalindromeSuffix\
    \ = \"\";\n    var longestPalindromePostfix = \"\";\n    var longestPalindromePostfixLength\
    \ = 0;\n    var longestPalindromePostfixPrefix = \"\";\n    var longestPalindromePostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfix = \"\";\n    var longestPalindromePostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPrefix = \"\";\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfix = \"\";\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\";\n    var\
    \ longestPalindromePostfixPostfixPostfixSuffix = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixLength = 0;\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\";\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\
    \";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\"\
    ;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\"\
    ;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength =\
    \ 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefi",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    var postfix_length = 0\n    for(var i =\
    \ 0; i < string.length; i++){\n        if(string[i] === string[string.length -1\
    \ -i]){\n            postfix_length++\n        }\n    }\n    for(var i = 0; i\
    \ < string.length; i++){\n        if(string[i] === string[string.length -1 -i]){\n\
    \            suffix_length++\n        }\n    }\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            prefix_length++\n\
    \        }\n    }\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length -1 -i]){\n            reversed_string = reversed_string.substr(0,reversed_string.length\
    \ -1)\n        }\n    }\n    for(var i = 0; i < postfix_length; i++){\n      \
    \  palindrome += string[string.length -1 -i]\n    }\n    palindrome += reversed_string\n\
    \    return palindrome\n}\n", "  var reversed_string = string\n  var palindrome\
    \ = \"\"\n  var prefix_length = 0\n  var suffix_length = 0\n  var prefix_string\
    \ = \"\"\n  var suffix_string = \"\"\n  var longest_postfix_length = 0\n  var\
    \ longest_postfix_string = \"\"\n  var longest_postfix_index = 0\n  var longest_postfix_index2\
    \ = 0\n  var longest_postfix_index3 = 0\n  var longest_postfix_index4 = 0\n  var\
    \ longest_postfix_index5 = 0\n  var longest_postfix_index6 = 0\n  var longest_postfix_index7\
    \ = 0\n  var longest_postfix_index8 = 0\n  var longest_postfix_index9 = 0\n  var\
    \ longest_postfix_index10 = 0\n  var longest_postfix_index11 = 0\n  var longest_postfix_index12\
    \ = 0\n  var longest_postfix_index13 = 0\n  var longest_postfix_index14 = 0\n\
    \  var longest_postfix_index15 = 0\n  var longest_postfix_index16 = 0\n  var longest_postfix_index17\
    \ = 0\n  var longest_postfix_index18 = 0\n  var longest_postfix_index19 = 0\n\
    \  var longest_postfix_index20 = 0\n  var longest_postfix_index21 = 0\n  var longest_postfix_index22\
    \ = 0\n  var longest_postfix_index23 = 0\n  var longest_postfix_index24 = 0\n\
    \  var longest_postfix_index25 = 0\n  var longest_postfix_index26 = 0\n  var longest_postfix_index27\
    \ = 0\n  var longest_postfix_index28 = 0\n  var longest_postfix_index29 = 0\n\
    \  var longest_postfix_index30 = 0\n  var longest_postfix_index31 = 0\n  var longest_postfix_index32\
    \ = 0\n  var longest_postfix_index33 = 0\n  var longest_postfix_index34 = 0\n\
    \  var longest_postfix_index35 = 0\n  var longest_postfix_index36 = 0\n  var longest_postfix_index37\
    \ = 0\n  var longest_postfix_index38 = 0\n  var longest_postfix_index39 = 0\n\
    \  var longest_postfix_index40 = 0\n  var longest_postfix_index41 = 0\n  var longest_postfix_index42\
    \ = 0\n  var longest_postfix_index43 = 0\n  var longest_postfix_index44 = 0\n\
    \  var longest_postfix_index45 = 0\n  var longest_postfix_index46 = 0\n  var longest_postfix_index47\
    \ = 0\n  var longest_postfix_index48 = 0\n  var longest_postfix_index49 = 0\n\
    \  var longest_postfix_index50 = 0\n  var longest_postfix_index51 = 0\n  var longest_",
  "    var palindrome = \"\";\n    var palindrome_string = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n  \
    \  var prefix_palindrome = \"\";\n    var suffix_palindrome = \"\";\n    var prefix_palindrome_string\
    \ = \"\";\n    var suffix_palindrome_string = \"\";\n    var prefix_palindrome_reverse\
    \ = \"\";\n    var suffix_palindrome_reverse = \"\";\n    var prefix_palindrome_palindrome\
    \ = \"\";\n    var suffix_palindrome_palindrome = \"\";\n    var prefix_palindrome_palindrome_string\
    \ = \"\";\n    var suffix_palindrome_palindrome_string = \"\";\n    var prefix_palindrome_palindrome_reverse\
    \ = \"\";\n    var suffix_palindrome_palindrome_reverse = \"\";\n    var prefix_palindrome_palindrome_palindrome\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome = \"\";\n    var prefix_palindrome_palindrome_palindrome_string\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome_string = \"\";\n  \
    \  var prefix_palindrome_palindrome_palindrome_reverse = \"\";\n    var suffix_palindrome_palindrome_palindrome_reverse\
    \ = \"\";\n    var prefix_palindrome_palindrome_palindrome_palindrome = \"\";\n\
    \    var suffix_palindrome_palindrome_palindrome_palindrome = \"\";\n    var prefix_palindrome_palindrome_palindrome_palindrome_string\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome_palindrome_string =\
    \ \"\";\n    var prefix_palindrome_palindrome_palindrome_palindrome_reverse =\
    \ \"\";\n    var suffix_palindrome_palindrome_palindrome_palindrome_reverse =\
    \ \"\";\n    var prefix_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = \"\";\n    var prefix_palindrome_palindrome_palindrome_palindrome_palindrome_string\
    \ = \"\";\n    var suffix_palindrome_palindrome_palindrome_palindro", "  var palindrome\
    \ = string;\n  var suffix;\n  var prefix;\n  var reverse;\n  var suffixLength;\n\
    \  var prefixLength;\n  var i;\n  var j;\n  var k;\n  var max;\n  var min;\n \
    \ var maxLength;\n  var minLength;\n  var palindromeLength;\n  var palindromePrefix;\n\
    \  var palindromeSuffix;\n  var palindromePrefixLength;\n  var palindromeSuffixLength;\n\
    \  var palindromeReverse;\n  var palindromeReverseLength;\n  var palindromeReversePrefix;\n\
    \  var palindromeReverseSuffix;\n  var palindromeReversePrefixLength;\n  var palindromeReverseSuffixLength;\n\
    \  var palindromeReverseReverse;\n  var palindromeReverseReverseLength;\n  var\
    \ palindromeReverseReversePrefix;\n  var palindromeReverseReverseSuffix;\n  var\
    \ palindromeReverseReversePrefixLength;\n  var palindromeReverseReverseSuffixLength;\n\
    \  var palindromeReverseReverseReverse;\n  var palindromeReverseReverseReverseLength;\n\
    \  var palindromeReverseReverseReversePrefix;\n  var palindromeReverseReverseReverseSuffix;\n\
    \  var palindromeReverseReverseReversePrefixLength;\n  var palindromeReverseReverseReverseSuffixLength;\n\
    \  var palindromeReverseReverseReverseReverse;\n  var palindromeReverseReverseReverseLength;\n\
    \  var palindromeReverseReverseReversePrefix;\n  var palindromeReverseReverseReverseSuffix;\n\
    \  var palindromeReverseReverseReversePrefixLength;\n  var palindromeReverseReverseReverseSuffixLength;\n\
    \  var palindromeReverseReverseReverseReverse;\n  var palindromeReverseReverseReverseLength;\n\
    \  var palindromeReverseReverseReversePrefix;\n  var palindromeReverseReverseReverseSuffix;\n\
    \  var palindromeReverseReverseReversePrefixLength;\n  var palindromeReverseReverseReverseSuffixLength;\n\
    \  var palindromeReverseReverseReverseReverse;\n  var palindromeReverseReverseReverseLength;\n\
    \  var palindromeReverseReverseReversePrefix;\n  var palindromeReverseReverseReverseSuffix;\n\
    \  var palindromeReverseReverseReversePrefixLength;\n  var palindromeReverseReverseReverseSuffixLength;\n\
    \  var palindromeReverseReverseReverseReverse;\n  var palindromeReverseReverseReverseLength;\n\
    \  var palin", "    var palindrome = \"\",\n        postfix = \"\";\n    for(var\
    \ i = 0; i < string.length; i++){\n        postfix = string.substr(0, i) + string.substr(i,\
    \ string.length);\n        if(postfix === reverse(postfix)){\n            palindrome\
    \ = postfix.substr(0, i) + palindrome + postfix.substr(i, postfix.length);\n \
    \       }\n    }\n    return palindrome;\n}\n", "    var reversed_string = string.replace(/./g,function(c){return\
    \ c.toUpperCase()}).split('').reverse().join('');\n    var postfix_length = string.length\
    \ - reversed_string.length;\n    var palindrome = string.substr(0,postfix_length)\
    \ + reversed_string;\n    return palindrome;\n}\n", "    var reversed_string =\
    \ string.reverse ();\n    var palindrome = string.slice (0, string.length - 1);\n\
    \    var palindrome_suffix = string.slice (string.length - 1);\n    var palindrome_postfix\
    \ = \"\";\n    var palindrome_postfix_reverse = \"\";\n    var palindrome_postfix_reverse_index\
    \ = 0;\n    var palindrome_postfix_reverse_index2 = 0;\n    var palindrome_postfix_reverse_index3\
    \ = 0;\n    var palindrome_postfix_reverse_index4 = 0;\n    var palindrome_postfix_reverse_index5\
    \ = 0;\n    var palindrome_postfix_reverse_index6 = 0;\n    var palindrome_postfix_reverse_index7\
    \ = 0;\n    var palindrome_postfix_reverse_index8 = 0;\n    var palindrome_postfix_reverse_index9\
    \ = 0;\n    var palindrome_postfix_reverse_index10 = 0;\n    var palindrome_postfix_reverse_index11\
    \ = 0;\n    var palindrome_postfix_reverse_index12 = 0;\n    var palindrome_postfix_reverse_index13\
    \ = 0;\n    var palindrome_postfix_reverse_index14 = 0;\n    var palindrome_postfix_reverse_index15\
    \ = 0;\n    var palindrome_postfix_reverse_index16 = 0;\n    var palindrome_postfix_reverse_index17\
    \ = 0;\n    var palindrome_postfix_reverse_index18 = 0;\n    var palindrome_postfix_reverse_index19\
    \ = 0;\n    var palindrome_postfix_reverse_index20 = 0;\n    var palindrome_postfix_reverse_index21\
    \ = 0;\n    var palindrome_postfix_reverse_index22 = 0;\n    var palindrome_postfix_reverse_index23\
    \ = 0;\n    var palindrome_postfix_reverse_index24 = 0;\n    var palindrome_postfix_reverse_index25\
    \ = 0;\n    var palindrome_postfix_reverse_index26 = 0;\n    var palindrome_postfix_reverse_index27\
    \ = 0;\n    var palindrome_postfix_reverse_index28 = 0;\n    var palindrome_postfix_reverse_index29\
    \ = 0;\n    var palindrome_postfix_reverse_index30 = 0;\n    var palindrome_postfix_reverse_index31\
    \ = 0;\n    var palindrome_postfix_reverse_index32 = 0;\n    var palindrome_postfix_reverse_index33\
    \ = 0;\n    var palindrome_postfix_reverse_index34 = 0;\n    var palindrome_postfix_reverse_index35\
    \ = 0;\n    var palindrome_postfix_reverse_index36 = 0;\n    var palindrome_postfix_reverse_index37\
    \ = 0;\n    var palindrome_postfix_reverse_index38 = 0;\n    var palindrome_postfix_",
  "    var reversed_string = \"\";\n    var longest_postfix_length = 0;\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var longest_postfix_index\
    \ = 0;\n    var longest_postfix_string = \"\";\n    var lon"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
