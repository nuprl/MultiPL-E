name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name_extension = class_name + extension;\n\t\tlet class_name_extension_strength\
    \ = Extension_Strength(class_name_extension);\n\t\tif(class_name_extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = class_name_extension;\n\
    \t\t\tstrongest_extension_strength = class_name_extension_strength;\n\t\t}\n\t\
    }\n\treturn strongest_extension;\n}\n", "    let class_name_split = class_name.split('.');\n\
    \    let class_name = class_name_split[class_name_split.length-1];\n    let extension_strengths\
    \ = [];\n    for (let extension of extensions){\n        let extension_split =\
    \ extension.split('.');\n        let extension_name = extension_split[extension_split.length-1];\n\
    \        let extension_strength = extension_name.match(/[A-Z]/g).length -\n  \
    \          extension_name.match(/[a-z]/g).length;\n        extension_strengths.push(extension_strength);\n\
    \    }\n    let max_strength = extension_strengths.reduce((a, b) => Math.max(a,\
    \ b));\n    let max_index = extension_strengths.indexOf(max_strength);\n    return\
    \ class_name + \".\" + extensions[max_index];\n}\n", "  var strongest_extension\
    \ = \"\";\n  var strongest_extension_strength = 0;\n  var extension_counter =\
    \ 0;\n  var class_counter = 0;\n  var class_name = class_name.split(' ');\n  for(var\
    \ i=0; i<class_name.length; i++){\n    class_counter++;\n    if(class_name[i].toUpperCase()\
    \ === class_name[i]){\n      strongest_extension_strength = -1;\n    }\n  }\n\
    \  for(var i=0; i<extensions.length; i++){\n    extension_counter++;\n    if(extensions[i].toUpperCase()\
    \ === extensions[i]){\n      strongest_extension_strength = -1;\n    }\n  }\n\
    \  if(strongest_extension_strength === -1){\n    return class_name;\n  }\n  for(var\
    \ i=0; i<extensions.length; i++){\n    if(extensions[i].toUpperCase() === extensions[i]){\n\
    \      if(extension_counter > strongest_extension_strength){\n        strongest_extension\
    \ = extensions[i];\n        strongest_extension_strength = extension_counter;\n\
    \      }\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_strength_counter = 0;\n\tlet strongest_extension_counter\
    \ = 0;\n\tlet strongest_extension_counter_counter = 0;\n\tfor (let i = 0; i <\
    \ extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_counter\
    \ = 0;\n\t\tfor (let j = 0; j < class_name.length; j++){\n\t\t\tif (class_name[j]\
    \ === extension){\n\t\t\t\textension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter\
    \ > strongest_extension_strength_counter){\n\t\t\tstrongest_extension_strength\
    \ = extension_counter;\n\t\t\tstrongest_extension_strength_counter = extension_counter;\n\
    \t\t\tstrongest_extension_counter = i;\n\t\t\tstrongest_extension_counter_counter\
    \ = extension_counter;\n\t\t}\n\t\textension_counter = 0;\n\t\tfor (let j = 0;\
    \ j < class_name.length; j++){\n\t\t\tif (class_name[j] === extension){\n\t\t\t\
    \textension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter === strongest_extension_counter_counter){\n\
    \t\t\tstrongest_extension_strength_counter = extension_counter;\n\t\t}\n\t}\n\t\
    return class_name.substr(0, strongest_extension_counter) + extensions[strongest_extension_counter];\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "  var strongest = null;\n\
    \  var strongest_strength = 0;\n  for(var i = 0; i<extensions.length; i++){\n\
    \    var extension = extensions[i];\n    var class_name = class_name + extension;\n\
    \    var class_object = eval(class_name);\n    var class_strength = class_object.strength;\n\
    \    if(class_strength > strongest_strength){\n      strongest = class_name;\n\
    \      strongest_strength = class_strength;\n    }\n  }\n  return strongest;\n\
    }\n", "    var max_strength = -1;\n    var max_extension = \"\";\n    for(var\
    \ i=0;i<extensions.length;i++){\n        var extension = extensions[i];\n    \
    \    var strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    var strongest_extension = \"\";\n    var\
    \ strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_name_lower\
    \ = class_name.toLowerCase();\n        var class_name_upper = class_name_lower.toUpperCase();\n\
    \        var class_name_upper_cap = class_name_upper.charAt(0).toUpperCase() +\
    \ class_name_upper.slice(1);\n        var class_name_lower_cap = class_name_lower.charAt(0).toLowerCase()\
    \ + class_name_lower.slice(1);\n        var class_name_strength = class_name_upper_cap.length\
    \ - class_name_lower_cap.length;\n        if(class_name_strength > strongest_extension_strength){\n\
    \            strongest_extension = class_name;\n            strongest_extension_strength\
    \ = class_name_strength;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((a, b)\
    \ => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    var strongest_extension_strength_counter = 0;\n    for(var i = 1;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n        if(extension_strength == strongest_extension_strength){\n\
    \            strongest_extension_strength_counter++;\n        }\n    }\n    if(strongest_extension_strength_counter\
    \ > 1){\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ return class_name;\n}\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tlet extension_counter = 0;\n\tlet extension_counter_strength = 0;\n\t\
    let extension_counter_counter_strength = 0;\n\tlet extension_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_strength = 0;\n\tlet extension_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
    \ - extension_length;\n\t\tif (strength > max_strength){\n\t\t\tmax_strength =\
    \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + max_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
