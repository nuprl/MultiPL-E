name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name_extension = class_name + extension;\n\t\tlet class_name_extension_strength\
    \ = Extension_Strength(class_name_extension);\n\t\tif(class_name_extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = class_name_extension;\n\
    \t\t\tstrongest_extension_strength = class_name_extension_strength;\n\t\t}\n\t\
    }\n\treturn strongest_extension;\n}\n", "    let class_name_split = class_name.split('.');\n\
    \    let class_name = class_name_split[class_name_split.length-1];\n    let extension_strengths\
    \ = [];\n    for (let extension of extensions){\n        let extension_split =\
    \ extension.split('.');\n        let extension_name = extension_split[extension_split.length-1];\n\
    \        let extension_strength = extension_name.match(/[A-Z]/g).length -\n  \
    \          extension_name.match(/[a-z]/g).length;\n        extension_strengths.push(extension_strength);\n\
    \    }\n    let max_strength = extension_strengths.reduce((a, b) => Math.max(a,\
    \ b));\n    let max_index = extension_strengths.indexOf(max_strength);\n    return\
    \ class_name + \".\" + extensions[max_index];\n}\n", "  var strongest_extension\
    \ = \"\";\n  var strongest_extension_strength = 0;\n  var extension_counter =\
    \ 0;\n  var class_counter = 0;\n  var class_name = class_name.split(' ');\n  for(var\
    \ i=0; i<class_name.length; i++){\n    class_counter++;\n    if(class_name[i].toUpperCase()\
    \ === class_name[i]){\n      strongest_extension_strength = -1;\n    }\n  }\n\
    \  for(var i=0; i<extensions.length; i++){\n    extension_counter++;\n    if(extensions[i].toUpperCase()\
    \ === extensions[i]){\n      strongest_extension_strength = -1;\n    }\n  }\n\
    \  if(strongest_extension_strength === -1){\n    return class_name;\n  }\n  for(var\
    \ i=0; i<extensions.length; i++){\n    if(extensions[i].toUpperCase() === extensions[i]){\n\
    \      if(extension_counter > strongest_extension_strength){\n        strongest_extension\
    \ = extensions[i];\n        strongest_extension_strength = extension_counter;\n\
    \      }\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_strength_counter = 0;\n\tlet strongest_extension_counter\
    \ = 0;\n\tlet strongest_extension_counter_counter = 0;\n\tfor (let i = 0; i <\
    \ extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_counter\
    \ = 0;\n\t\tfor (let j = 0; j < class_name.length; j++){\n\t\t\tif (class_name[j]\
    \ === extension){\n\t\t\t\textension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter\
    \ > strongest_extension_strength_counter){\n\t\t\tstrongest_extension_strength\
    \ = extension_counter;\n\t\t\tstrongest_extension_strength_counter = extension_counter;\n\
    \t\t\tstrongest_extension_counter = i;\n\t\t\tstrongest_extension_counter_counter\
    \ = extension_counter;\n\t\t}\n\t\textension_counter = 0;\n\t\tfor (let j = 0;\
    \ j < class_name.length; j++){\n\t\t\tif (class_name[j] === extension){\n\t\t\t\
    \textension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter === strongest_extension_counter_counter){\n\
    \t\t\tstrongest_extension_strength_counter = extension_counter;\n\t\t}\n\t}\n\t\
    return class_name.substr(0, strongest_extension_counter) + extensions[strongest_extension_counter];\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "  var strongest = null;\n\
    \  var strongest_strength = 0;\n  for(var i = 0; i<extensions.length; i++){\n\
    \    var extension = extensions[i];\n    var class_name = class_name + extension;\n\
    \    var class_object = eval(class_name);\n    var class_strength = class_object.strength;\n\
    \    if(class_strength > strongest_strength){\n      strongest = class_name;\n\
    \      strongest_strength = class_strength;\n    }\n  }\n  return strongest;\n\
    }\n", "    var max_strength = -1;\n    var max_extension = \"\";\n    for(var\
    \ i=0;i<extensions.length;i++){\n        var extension = extensions[i];\n    \
    \    var strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    var strongest_extension = \"\";\n    var\
    \ strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_name_lower\
    \ = class_name.toLowerCase();\n        var class_name_upper = class_name_lower.toUpperCase();\n\
    \        var class_name_upper_cap = class_name_upper.charAt(0).toUpperCase() +\
    \ class_name_upper.slice(1);\n        var class_name_lower_cap = class_name_lower.charAt(0).toLowerCase()\
    \ + class_name_lower.slice(1);\n        var class_name_strength = class_name_upper_cap.length\
    \ - class_name_lower_cap.length;\n        if(class_name_strength > strongest_extension_strength){\n\
    \            strongest_extension = class_name;\n            strongest_extension_strength\
    \ = class_name_strength;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((a, b)\
    \ => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    var strongest_extension_strength_counter = 0;\n    for(var i = 1;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n        if(extension_strength == strongest_extension_strength){\n\
    \            strongest_extension_strength_counter++;\n        }\n    }\n    if(strongest_extension_strength_counter\
    \ > 1){\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ return class_name;\n}\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tlet extension_counter = 0;\n\tlet extension_counter_strength = 0;\n\t\
    let extension_counter_counter_strength = 0;\n\tlet extension_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_strength = 0;\n\tlet extension_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_strength\
    \ = 0;\n\tlet extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
    \ - extension_length;\n\t\tif (strength > max_strength){\n\t\t\tmax_strength =\
    \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_extension\
    \ = class_name + extension;\n\t\tlet strength = extension_strength(class_name_extension);\n\
    \t\tif(strength > max_strength){\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tlet strongest_extension_strength = -1;\n\
    \tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((sum, letter)=>{\n\t\t\treturn sum + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n\
    \t\t}, 0);\n\t\tif(extension_strength > strongest_extension_strength){\n\t\t\t\
    strongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest_extension = \"\";\n    var strongest_extension_strength = 0;\n   \
    \ var extension_counter = 0;\n    for(var extension in extensions){\n        extension_counter++;\n\
    \        if(extension_counter > 1){\n            strongest_extension_strength\
    \ = extension_counter - 1;\n        }\n        if(extensions[extension] == class_name){\n\
    \            strongest_extension = class_name + extensions[extension];\n     \
    \       break;\n        }\n    }\n    return strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor\
    \ (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength =\
    \ -1\n\tlet max_extension = \"\"\n\tfor (let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i]\n\t\tlet class_name = class_name + extension\n\
    \t\tlet class_object = eval(class_name)\n\t\tlet class_strength = class_object.strength\n\
    \t\tif (class_strength > max_strength){\n\t\t\tmax_strength = class_strength\n\
    \t\t\tmax_extension = extension\n\t\t}\n\t}\n\treturn class_name + max_extension\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tif (current_extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ current_extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var strongest_extension_strength_counter = 0;\n    var strongest_extension_counter\
    \ = 0;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = 0;\n        for(var j = 0;\
    \ j < class_name.length; j++){\n            if(extension_counter < class_name[j]){\n\
    \                extension_counter = class_name[j];\n            }\n        }\n\
    \        if(extension_counter > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_counter;\n            strongest_extension = extension;\n       \
    \ }\n        extension_counter = 0;\n    }\n    \n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_counter\
    \ = 0;\n        for(var j = 0; j < class_name.length; j++){\n            if(extension_counter\
    \ < class_name[j]){\n                extension_counter = class_name[j];\n    \
    \        }\n        }\n        if(extension_counter > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter;\n            strongest_extension\
    \ = extension;\n        }\n        extension_counter = 0;\n    }\n    \n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_counter = 0;\n        for(var j = 0; j < class_name.length;\
    \ j++){\n            if(extension_counter < class_name[j]){\n                extension_counter\
    \ = class_name[j];\n            }\n        }\n        if(extension_counter > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter;\n            strongest_extension\
    \ = extension;\n        }\n        extension_counter = 0;\n    }\n    \n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_counter = 0;\n        for(var j = 0; j < class_name.length;\
    \ j++){\n            if(extension_counter < class_name[j]){\n                extension_counter\
    \ = class_name[j];\n            }\n        }\n        if(extension_counter > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter;\n            strongest_extension\
    \ = extension;\n        }\n        extension_counter = 0;\n    }\n    \n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_counter = 0;\n        for(var j = 0; j < class_name.length;\
    \ j++){\n            if(extension_counter < class_name[j]){\n                extension_counter\
    \ = class_name[j];\n            }\n        }\n        if(extension_counter > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter;\n            strongest_extension",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    let extension_strength_frac = extension_strength / extension.length;\n\t\tlet\
    \ extension_strength_int = extension_strength_frac * Math.pow(10, extension.length);\n\
    \t\tlet extension_strength_rounded = Math.round(extension_strength_int);\n\t\t\
    if(extension_strength_rounded > max_strength){\n\t\t\tmax_strength = extension_strength_rounded;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet extensions_length = extensions.length;\n\tfor(let i = 0; i < extensions_length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength\
    \ = -1\n\tlet max_extension = \"\"\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i]\n\t\tlet class_name = class_name + extension\n\
    \t\tlet class_obj = eval(class_name)\n\t\tlet class_extensions = class_obj.extensions\n\
    \t\tlet class_extensions_length = class_extensions.length\n\t\tfor(let j = 0;\
    \ j < class_extensions_length; j++){\n\t\t\tlet extension = class_extensions[j]\n\
    \t\t\tlet extension_strength = extension.strength\n\t\t\tif(extension_strength\
    \ > max_strength){\n\t\t\t\tmax_strength = extension_strength\n\t\t\t\tmax_extension\
    \ = extension\n\t\t\t}\n\t\t}\n\t}\n\treturn class_name + max_extension\n}\n",
  "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength = 0;\n\t\
    for(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet class_name_lower\
    \ = class_name.split('').map(x => x.toLowerCase());\n\tlet extensions_lower =\
    \ extensions.map(x => x.toLowerCase());\n\tlet max_extension_strength = -1;\n\t\
    let max_extension_extension = null;\n\tfor(let i = 0; i < extensions_lower.length;\
    \ i++){\n\t\tlet extension_strength = class_name_lower.length - extensions_lower[i].length;\n\
    \t\tif(extension_strength > max_extension_strength){\n\t\t\tmax_extension_strength\
    \ = extension_strength;\n\t\t\tmax_extension_extension = extensions_lower[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension_extension;\n}\n", "  \
    \  var strongest_extension = \"\";\n    var strongest_extension_strength = 0;\n\
    \    var extension_counter = 0;\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_counter = extension_counter\
    \ + 1;\n        var extension_strength = extension_counter;\n        var class_name_counter\
    \ = 0;\n        var class_name_counter = class_name_counter + 1;\n        var\
    \ class_name_strength = class_name_counter;\n        var class_name_counter =\
    \ class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n        var class_name_strength = class_name_counter;\n\
    \        var class_name_counter = class_name_counter + 1;\n        var class_name_strength\
    \ = class_name_counter;\n        var class_name_counter = class_name_counter +\
    \ 1;\n        var class_name_strength = class_name_counter;\n        var class_name_counter\
    \ = class_name_counter + 1;\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_obj\
    \ = GetClassObject(class_name);\n\t\tlet class_extensions = class_obj.extensions;\n\
    \t\tlet class_extensions_length = class_extensions.length;\n\t\tfor (let j = 0;\
    \ j < class_extensions_length; j++){\n\t\t\tlet extension = class_extensions[j];\n\
    \t\t\tlet class_extension = class_name + extension;\n\t\t\tlet class_extension_obj\
    \ = GetClassObject(class_extension);\n\t\t\tlet class_extension_strength = class_extension_obj.strength;\n\
    \t\t\tif (class_extension_strength > max_strength){\n\t\t\t\tmax_extension = class_extension;\n\
    \t\t\t\tmax_strength = class_extension_strength;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\tfor (let\
    \ i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let strongest_extension = null;\n    let\
    \ strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension_class;\n        }\n    }\n    return strongest_extension;\n}\n",
  "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength = 0;\n\t\
    for (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        extension_counter++;\n\
    \        var extension = extensions[i];\n        var extension_counter_string\
    \ = extension_counter.toString();\n        var extension_counter_string = extension_counter_string.substr(0,\
    \ extension_counter_string.length-1);\n        var extension_counter_string =\
    \ extension_counter_string + \".\";\n        var extension_counter_string = extension_counter_string\
    \ + extension;\n        var extension_counter_string = extension_counter_string.replace(/\\\
    ./g, \"_\");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_counter_string.replace(/_/g,\
    \ \" \");\n        var extension_counter_string = extension_", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet strongest_extension_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    var max_strength\
    \ = 0;\n    var best_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            best_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + best_extension;\n}\n", "\tlet strength = 0;\n\tlet strongest_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm\
    \ = extension.charAt(0).toLowerCase();\n\t\tlet fraction = cap - sm;\n\t\tstrength\
    \ += fraction;\n\t\tif (strength > 0){\n\t\t\tstrongest_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest_extension = null;\n    var strongest_extension_strength = -1;\n  \
    \  for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    let cap_extensions = extensions.map(e\
    \ => e.match(/[A-Z]/).length);\n    let sm_extensions = extensions.map(e => e.match(/[a-z]/).length);\n\
    \    let strength = cap_extensions[0] - sm_extensions[0];\n    extensions.sort((a,b)\
    \ => b.length - a.length);\n    for (let i = 0; i < extensions.length; i++){\n\
    \        let e = extensions[i];\n        let cap_letters = e.match(/[A-Z]/).length;\n\
    \        let sm_letters = e.match(/[a-z]/).length;\n        let diff = cap_letters\
    \ - sm_letters;\n        if (diff > 0){\n            strength += diff;\n     \
    \   }\n    }\n    return class_name + extensions.map(e => e.match(/[A-Z]/)[0]).join('.')\
    \ + '.' + extensions.map(e => e.match(/[a-z]/)[0]).join('.');\n}\n", "    var\
    \ strongest = null;\n    var strongest_strength = -1;\n    var strongest_extension\
    \ = null;\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length;\n\
    \        if(extension_strength > strongest_strength){\n            strongest_strength\
    \ = extension_strength;\n            strongest = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let max_strength = -1;\n    let max_extension = \"\";\n    for(let i = 0; i\
    \ < extensions.length; i++){\n        let extension = extensions[i];\n       \
    \ let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength =\
    \ -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i];\n\t\tlet class_name = class_name + extension;\n\
    \t\tlet class_object = eval(class_name);\n\t\tlet class_strength = class_object.strength;\n\
    \t\tif(class_strength > max_strength){\n\t\t\tmax_strength = class_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    var extension_counter = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_counter\
    \ = extension_counter + 1;\n        var extension_strength = extension_counter;\n\
    \        var extension_class_name = class_name + extension;\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        for(var j = 0; j < extension_class_name_length;\
    \ j++){\n            var letter = extension_class_name.charAt(j);\n          \
    \  var letter_upper = letter.toUpperCase();\n            var letter_lower = letter.toLowerCase();\n\
    \            var letter_counter = 0;\n            for(var k = 0; k < letter_upper.length;\
    \ k++){\n                var letter_upper = letter_upper.charAt(k);\n        \
    \        letter_counter = letter_counter + 1;\n            }\n            for(var\
    \ l = 0; l < letter_lower.length; l++){\n                var letter_lower = letter_lower.charAt(l);\n\
    \                letter_counter = letter_counter + 1;\n            }\n       \
    \     var letter_counter_ratio = letter_counter / extension_class_name_length;\n\
    \            if(letter_counter_ratio > extension_strength){\n                extension_strength\
    \ = letter_counter_ratio;\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n    }\n    return strongest_extension;\n}\n", "    var max_strength\
    \ = 0;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate\
    \ it. I will try this out and see how it goes.\n<|/ c |>\n<| c |>\nI ran the code\
    \ and it gave me this error: Traceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 5, in Strongest_Extension\nTypeError:\
    \ expected string or buffer\n<|/ c |>\n<| c |>\nI fixed the error, but now it\
    \ says this: Traceback (most recent call last):\n  File \"<stdin>\", line 1, in\
    \ <module>\n  File \"<stdin>\", line 5, in Strongest_Extension\nTypeError: expected\
    \ string or buffer\n<|/ c |>\n<| c |>\nI fixed the error, but now it says this:\
    \ Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 5, in Strongest_Extension\nTypeError: expected string\
    \ or buffer\n<|/ c |>\n<| c |>\nI fixed the error, but now it says this: Traceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 5, in Strongest_Extension\nTypeError: expected string or buffer\n\
    <|/ c |>\n<| a tags=python |>\n<code>\ndef Strongest_Extension(class_name, extensions):\n\
    \    extension_strength = extensions[0].count('a') - extensions[0].count('b')\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength > 0 else 0\n\
    \    extension_strength = extension_strength if extension_strength", "    var\
    \ strongest_extension = null;\n    var strongest_extension_strength = 0;\n   \
    \ for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength = 0;\n\t\
    let strongest_extension_class_name = \"\";\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_extension = class_name\
    \ + extension;\n\t\tlet class_name_extension_strength = Extension_Strength(class_name_extension);\n\
    \t\tif(strongest_extension_strength < class_name_extension_strength){\n\t\t\t\
    strongest_extension_strength = class_name_extension_strength;\n\t\t\tstrongest_extension\
    \ = class_name_extension;\n\t\t\tstrongest_extension_class_name = class_name;\n\
    \t\t}\n\t}\n\treturn strongest_extension_class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_strength_pos = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension_strength_pos\
    \ = i;\n\t\t}\n\t}\n\tstrongest_extension = class_name + extensions[strongest_extension_strength_pos];\n\
    \treturn strongest_extension;\n}\n", "    var strongest = extensions[0];\n   \
    \ var cap = class_name.length;\n    var sm = extensions[0].length;\n    for(var\
    \ i = 1; i < extensions.length; i++){\n        var c = extensions[i].length;\n\
    \        var s = extensions[i].length;\n        if(c == cap){\n            cap\
    \ = cap - s;\n        }\n        if(s == sm){\n            sm = s - c;\n     \
    \   }\n    }\n    return class_name + \".\" + strongest;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_counter = 0;\n\t\tfor (let j = 0; j < class_name.length; j++){\n\
    \t\t\tif (class_name[j] == extension){\n\t\t\t\textension_counter++;\n\t\t\t}\n\
    \t\t}\n\t\tif (extension_counter > strongest_extension_strength_counter){\n\t\t\
    \tstrongest_extension_strength = extension_counter;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength_counter = extension_counter;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet class_name_length =\
    \ class_name.length;\n\tlet extensions_length = extensions.length;\n\tfor(let\
    \ i = 0; i < extensions_length; i++){\n\t\tlet extension = extensions[i];\n\t\t\
    let extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - class_name_length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var cap = extension.charAt(0).toUpperCase();\n        var sm = extension.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = 0;\n    let extension_counter\
    \ = 0;\n    for(let extension of extensions){\n        extension_counter++;\n\
    \        if(extension_counter > 1){\n            extension_counter = 0;\n    \
    \    }\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ max_strength = -1\n\tlet max_extension = \"\"\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i]\n\t\tlet class_name = class_name +\
    \ extension\n\t\tlet class_obj = LoadClass(class_name)\n\t\tlet class_extensions\
    \ = class_obj.extensions\n\t\tfor (let j = 0; j < class_extensions.length; j++){\n\
    \t\t\tlet extension = class_extensions[j]\n\t\t\tlet class_name = class_name +\
    \ extension\n\t\t\tlet class_obj = LoadClass(class_name)\n\t\t\tlet class_extensions\
    \ = class_obj.extensions\n\t\t\tlet class_strength = class_obj.strength\n\t\t\t\
    if (class_strength > max_strength){\n\t\t\t\tmax_strength = class_strength\n\t\
    \t\t\tmax_extension = extension\n\t\t\t}\n\t\t}\n\t}\n\treturn class_name + max_extension\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var extension_counter = 0;\n    var extension_counter_strength = 0;\n\
    \    var extension_counter_array = [];\n    var extension_counter_array_strength\
    \ = [];\n    \n    for(var i = 0; i < extensions.length; i++){\n        extension_counter++;\n\
    \        extension_counter_strength = extensions[i].match(/[A-Z]/g).length;\n\
    \        extension_counter_array.push(extension_counter_strength);\n        extension_counter_array_strength.push(extension_counter);\n\
    \    }\n    \n    for(var i = 0; i < extension_counter_array.length; i++){\n \
    \       if(extension_counter_array_strength[i] > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter_array_strength[i];\n\
    \            strongest_extension = class_name + \".\" + extensions[i];\n     \
    \   }\n    }\n    \n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = -1;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest = -1;\n    var strongest_extension = \"\";\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var class_name = class_name + extension;\n        var class_object = eval(class_name);\n\
    \        var class_extensions = class_object.extensions;\n        for(var j =\
    \ 0; j < class_extensions.length; j++){\n            var extension = class_extensions[j];\n\
    \            var class_name = class_name + extension;\n            var class_object\
    \ = eval(class_name);\n            var class_extensions = class_object.extensions;\n\
    \            for(var k = 0; k < class_extensions.length; k++){\n             \
    \   var extension = class_extensions[k];\n                var class_name = class_name\
    \ + extension;\n                var class_object = eval(class_name);\n       \
    \         var class_extensions = class_object.extensions;\n                for(var\
    \ l = 0; l < class_extensions.length; l++){\n                    var extension\
    \ = class_extensions[l];\n                    var class_name = class_name + extension;\n\
    \                    var class_object = eval(class_name);\n                  \
    \  var class_extensions = class_object.extensions;\n                    for(var\
    \ m = 0; m < class_extensions.length; m++){\n                        var extension\
    \ = class_extensions[m];\n                        var class_name = class_name\
    \ + extension;\n                        var class_object = eval(class_name);\n\
    \                        var class_extensions = class_object.extensions;\n   \
    \                     for(var n = 0; n < class_extensions.length; n++){\n    \
    \                        var extension = class_extensions[n];\n              \
    \              var class_name = class_name + extension;\n                    \
    \        var class_object = eval(class_name);\n                            var\
    \ class_extensions = class_object.extensions;\n                            for(var\
    \ o = 0; o < class_extensions.length; o++){\n                                var\
    \ extension = class_extensions[o];\n                                var class_name\
    \ = class_name + extension;\n                                var class_object\
    \ = eval(class_name);\n                                var class_extensions =\
    \ class_object.extensions;\n                                for(var p = 0; p <\
    \ class_extensions.length; p++){\n                                    var extension\
    \ = class_extensions[p];\n                                    var class_name =\
    \ class_name + extension;\n                                    var class_object\
    \ = eval(class_name);\n                                    var class_extensions\
    \ = class_object.extensions;\n                                    for(var q =\
    \ 0; q < class_extensions.length; q++){\n                                    \
    \    var extension = class_extensions[q];\n                                  \
    \      var class_name = class_name + extension;\n                            \
    \            var class_object = eval(class_name);\n                          \
    \              var class_extensions = class_object.extensions;\n             \
    \                           for(var r = 0; r < class_extensions.length; r++){\n\
    \                                            var extension = class_extensions[r];\n\
    \                                            var class_name = class_name + extension;\n\
    \                                            var class_object = eval(class_name);\n\
    \                                            var class_extensions = class_object.extensions;\n\
    \                                            for(var s = 0; s < class_extensions.length;\
    \ s++){\n                                                var extension = class_extensions[s];\n\
    \                                                var class_name = class_name + ",
  "    let strongest_extension = null;\n    let strongest_extension_strength = 0;\n\
    \    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength =\
    \ -1;\n\t\n\textensions.forEach((extension)=>{\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t});\n\t\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].charCodeAt(0) - extensions[i].charCodeAt(0).toLowerCase();\n\
    \t\tif (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase()){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet\
    \ strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - class_name_length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strength = 0;\n\tlet strongest = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i].toLowerCase();\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet numCap = cap.length;\n\
    \t\tlet numSm  = sm.length;\n\t\tlet numDiff = numCap - numSm;\n\t\tlet diff =\
    \ numCap - numDiff;\n\t\tlet capDiff = numCap - diff;\n\t\tlet smDiff = numSm\
    \ - diff;\n\t\tlet numDiffCap = numDiff * numCap;\n\t\tlet numDiffSm = numDiff\
    \ * numSm;\n\t\tlet numDiffCapSm = numDiffCap + numDiffSm;\n\t\tlet numDiffCapSmDiff\
    \ = numDiffCapSm * numDiff;\n\t\tlet numDiffCapSmDiffSm = numDiffCapSmDiff * numDiffSm;\n\
    \t\tlet numDiffCapSmDiffSmDiff = numDiffCapSmDiffSm * numDiff;\n\t\tlet numDiffCapSmDiffSmDiffSm\
    \ = numDiffCapSmDiffSmDiff * numDiffSm;\n\t\tlet numDiffCapSmDiffSmDiffSmDiff\
    \ = numDiffCapSmDiffSmDiffSm + numDiffCapSmDiffSmDiff;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSm\
    \ = numDiffCapSmDiffSmDiffSmDiff * numDiffSm;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiff\
    \ = numDiffCapSmDiffSmDiffSmDiffSm + numDiffCapSmDiffSmDiffSmDiff;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiffSm\
    \ = numDiffCapSmDiffSmDiffSmDiffSmDiff * numDiffSm;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiff\
    \ = numDiffCapSmDiffSmDiffSmDiffSmDiffSm + numDiffCapSmDiffSmDiffSmDiffSmDiff;\n\
    \t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiffSm = numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiff\
    \ * numDiffSm;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiff = numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiff\
    \ * numDiffSm;\n\t\tlet numDiffCapSmDiffSmDiffSmDiffSmDiffSmDiffSmDiff = numDiffCapSmDiffSmDiffSmDiffSmDiff",
  "\tlet strongest_extension = null;\n\tlet strongest_extension_strength = 0;\n\t\
    let extension_counter = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\
    \textension_counter++;\n\t\tlet extension = extensions[i];\n\t\tlet extension_counter_string\
    \ = extension_counter.toString();\n\t\tlet extension_counter_string_capitalized\
    \ = extension_counter_string.toUpperCase();\n\t\tlet extension_counter_string_smaller\
    \ = extension_counter_string_capitalized.toLowerCase();\n\t\tlet extension_counter_string_smaller_index\
    \ = extension_counter_string_smaller.indexOf(class_name.substr(class_name.lastIndexOf('.')+1));\n\
    \t\tlet extension_counter_string_smaller_length = extension_counter_string_smaller.length;\n\
    \t\tlet extension_counter_string_smaller_cap = extension_counter_string_smaller.substr(0,\
    \ extension_counter_string_smaller_index);\n\t\tlet extension_counter_string_smaller_cap_length\
    \ = extension_counter_string_smaller_cap.length;\n\t\tlet extension_counter_string_smaller_cap_lowercase\
    \ = extension_counter_string_smaller_cap.toLowerCase();\n\t\tlet extension_counter_string_smaller_cap_lowercase_index\
    \ = extension_counter_string_smaller_cap_lowercase.indexOf(class_name.substr(class_name.lastIndexOf('.')+1));\n\
    \t\tlet extension_counter_string_smaller_cap_lowercase_length = extension_counter_string_smaller_cap_lowercase.length;\n\
    \t\tlet extension_counter_string_smaller_cap_lowercase_lowercase = extension_counter_string_smaller_cap_lowercase.substr(0,\
    \ extension_counter_string_smaller_cap_lowercase_index);\n\t\tlet extension_counter_string_smaller_cap_lowercase_lowercase_length\
    \ = extension_counter_string_smaller_cap_lowercase_lowercase.length;\n\t\tlet\
    \ extension_counter_string_smaller_cap_lowercase_lowercase_cap = extension_counter_string_smaller_cap_lowercase_lowercase.substr(0,\
    \ extension_counter_string_smaller_cap_lowercase_lowercase_index);\n\t\tlet extension_counter_string_smaller_cap_lowercase_lowercase_cap_length\
    \ = extension_counter_string_smaller_cap_lowercase_lowercase_cap.length;\n\t\t\
    let extension_counter_string_smaller_cap_lowercase_cap_lowercase_cap = extension_counter_string_smaller_cap_lowercase_lowercase_cap.substr(0,\
    \ extension_counter_string_smaller_cap_lowercase_cap_lowercase_index);\n\t\tlet\
    \ extension_counter_string_smaller_cap_lowercase_cap_lowercase_cap_length = extension_counter_string_smaller_cap_lowercase_cap_lowercase_cap.length;",
  "    var max_strength = -1;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_object = eval(class_name);\n        var strength\
    \ = class_object.Strength();\n        if(strength > max_strength){\n         \
    \   max_strength = strength;\n            max_extension = extension;\n       \
    \ }\n    }\n    return class_name + max_extension;\n}\n", "\tlet max_strength\
    \ = -1\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i]\n\
    \t\tlet class_name = class_name + extension\n\t\tlet class_exists = class_exists(class_name)\n\
    \t\tif (class_exists){\n\t\t\tlet class_extensions = class_extensions(class_name)\n\
    \t\t\tlet class_extensions_length = class_extensions.length\n\t\t\tlet class_extensions_count\
    \ = class_extensions_length\n\t\t\tfor (let j = 0; j < class_extensions_length;\
    \ j++){\n\t\t\t\tlet extension = class_extensions[j]\n\t\t\t\tlet extension_exists\
    \ = extension_exists(extension)\n\t\t\t\tif (extension_exists){\n\t\t\t\t\tlet\
    \ extension_strength = extension_strength(extension)\n\t\t\t\t\tif (extension_strength\
    \ > max_strength){\n\t\t\t\t\t\tmax_strength = extension_strength\n\t\t\t\t\t\t\
    max_extension = extension\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ class_name + max_extension\n}\n", "    var strongest_extension = null;\n   \
    \ var strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet class_name_split\
    \ = class_name.split('.');\n\tlet class_name = class_name_split[class_name_split.length-1];\n\
    \tlet extensions_sorted = extensions.sort((a,b) => b.length - a.length);\n\tlet\
    \ strongest_extension = extensions_sorted[0];\n\tlet strongest_extension_split\
    \ = strongest_extension.split('.');\n\tlet strongest_extension_name = strongest_extension_split[strongest_extension_split.length-1];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 0; i < extensions_sorted.length;\
    \ i++){\n\t\tlet extension_split = extensions_sorted[i].split('.');\n\t\tlet extension_name\
    \ = extension_split[extension_split.length-1];\n\t\tlet extension_strength = -1;\n\
    \t\tfor (let j = 0; j < class_name_split.length; j++){\n\t\t\tif (extension_name\
    \ == class_name_split[j]){\n\t\t\t\textension_strength = j - i;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (extension_strength > strongest_extension_strength){\n\t\
    \t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extensions_sorted[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension_name;\n\
    }\n", "    let class_name_split = class_name.split('.');\n    let class_name =\
    \ class_name_split[class_name_split.length-1];\n    let extension_strengths =\
    \ [];\n    for (let extension of extensions){\n        let extension_split = extension.split('.');\n\
    \        let extension_name = extension_split[extension_split.length-1];\n   \
    \     let extension_strength = extension_name.match(/[A-Z]/g).length -\n     \
    \       extension_name.match(/[a-z]/g).length;\n        extension_strengths.push(extension_strength);\n\
    \    }\n    let max_strength = extension_strengths.reduce((a, b) => Math.max(a,\
    \ b));\n    let max_index = extension_strengths.indexOf(max_strength);\n    return\
    \ class_name + '.' + extensions[max_index];\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet strongest_extension_class_name\
    \ = \"\";\n\tlet strongest_extension_class_name_strength = 0;\n\tlet strongest_extension_class_name_extension\
    \ = \"\";\n\tlet strongest_extension_class_name_extension_strength = 0;\n\t\n\t\
    for(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name_extension = class_name + extension;\n\t\tlet class_name_extension_strength\
    \ = Extension_Strength(class_name_extension);\n\t\t\n\t\tif(strongest_extension_strength\
    \ < class_name_extension_strength){\n\t\t\tstrongest_extension_strength = class_name_extension_strength;\n\
    \t\t\tstrongest_extension_class_name = class_name_extension;\n\t\t\tstrongest_extension_class_name_strength\
    \ = class_name_extension_strength;\n\t\t\tstrongest_extension_class_name_extension\
    \ = extension;\n\t\t\tstrongest_extension_class_name_extension_strength = class_name_extension_strength;\n\
    \t\t}\n\t}\n\t\n\treturn strongest_extension_class_name + \".\" + strongest_extension_class_name_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_obj\
    \ = GetClass(class_name);\n\t\tlet class_extensions = class_obj.extensions;\n\t\
    \tlet class_extensions_length = class_extensions.length;\n\t\tlet extension_strength\
    \ = class_extensions_length - class_obj.extension_strength;\n\t\tif (extension_strength\
    \ > max_strength){\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension[0].toUpperCase().charCodeAt(0)\
    \ - extension[0].toLowerCase().charCodeAt(0);\n        let sm = extension[0].toLowerCase().charCodeAt(0)\
    \ - extension[0].toUpperCase().charCodeAt(0);\n        let strength = cap - sm;\n\
    \        if (strength > 0){\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", " \
    \ var strongest_extension = null;\n  var strongest_extension_strength = 0;\n \
    \ for(var i=0; i<extensions.length; i++){\n    var extension = extensions[i];\n\
    \    var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if(extension_strength > strongest_extension_strength){\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].split(\"\").reduce((acc,\
    \ letter)=>{\n            return acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0);\n\
    \        }, 0);\n        if (extension_strength > strongest_extension.split(\"\
    \").reduce((acc, letter)=>{\n            return acc + letter.toUpperCase().charCodeAt(0)\
    \ - letter.charCodeAt(0);\n        }, 0)){\n            strongest_extension =\
    \ extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = \"\";\n    let max_strength = 0;\n    for\
    \ (let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var strongest_extension = null;\n\
    \    var strongest_extension_strength = 0;\n    var class_name_length = class_name.length;\n\
    \    var extensions_length = extensions.length;\n    for(var i=0; i<extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_length\
    \ = extension.length;\n        var extension_strength = extension_length - class_name_length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = null;\n    var strongest_extension_strength = -1;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  var strongest_extension = \"\";\n  var extension_strength = 0;\n  for(var i=0;\
    \ i<extensions.length; i++){\n    var extension = extensions[i];\n    var class_name_length\
    \ = class_name.length;\n    var extension_length = extension.length;\n    var\
    \ extension_strength_numerator = extension_length - class_name_length;\n    var\
    \ extension_strength_denominator = class_name_length;\n    var extension_strength\
    \ = extension_strength_numerator / extension_strength_denominator;\n    if(extension_strength\
    \ > extension_strength_numerator){\n      extension_strength = extension_strength_numerator;\n\
    \    }\n    if(extension_strength < extension_strength_denominator){\n      extension_strength\
    \ = extension_strength_denominator;\n    }\n    if(extension_strength == 0){\n\
    \      extension_strength = 1;\n    }\n    if(extension_strength > extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ == 0){\n      extension_strength = 1;\n    }\n    if(extension_strength < extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ > extension_strength){\n      extension_strength = extension_strength;\n   \
    \ }\n    if(extension_strength == 0){\n      extension_strength = 1;\n    }\n\
    \    if(extension_strength < extension_strength){\n      extension_strength =\
    \ extension_strength;\n    }\n    if(extension_strength > extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ == 0){\n      extension_strength = 1;\n    }\n    if(extension_strength < extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ > extension_strength){\n      extension_strength = extension_strength;\n   \
    \ }\n    if(extension_strength == 0){\n      extension_strength = 1;\n    }\n\
    \    if(extension_strength < extension_strength){\n      extension_strength =\
    \ extension_strength;\n    }\n    if(extension_strength > extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ == 0){\n      extension_strength = 1;\n    }\n    if(extension_strength < extension_strength){\n\
    \      extension_strength = extension_strength;\n    }\n    if(extension_strength\
    \ > extension_strength){\n      extension_strength = extension_strength;\n   \
    \ }\n    if(extension_strength == 0){\n      extension_strength = 1;\n    }\n\
    \    if(extension_strength < extension_strength){\n      extension_strength =\
    \ extension_strength;", "    var strongest = null;\n    var strongest_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length;\n        var\
    \ extension_strength_lower = extension.match(/[a-z]/g).length;\n        var extension_strength_upper\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     var extension_strength_total = extension_strength + extension_strength_lower\
    \ + extension_strength_upper;\n        if(extension_strength_total > strongest_strength){\n\
    \            strongest = extension;\n            strongest_strength = extension_strength_total;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "    let\
    \ strongest_extension = \"\";\n    let strongest_extension_strength = 0;\n   \
    \ for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ \n    // Your code here\n    \n}\n</cell>\n<cell>\n# Run this cell to check\
    \ your work.\n# You should not change the contents of this cell, but you can change\
    \ the values when calling the function.\nprint(\"Your code should pass the tests!\
    \ (Note: If there are minor mistakes or errors in your code, please go back and\
    \ edit your previous answer)\")\n</cell>\n<text>\nQuestion 3\nWrite a Python program\
    \ to find the longest common prefix string amongst an array of strings.\n\nFor\
    \ example, given [\"flower\",\"flow\",\"flight\"], the longest common prefix is\
    \ \"fl\".\n\nWrite a function to find the longest common prefix string amongst\
    \ an array of strings.\n\nThe function should return the longest common prefix\
    \ string. If there is no common prefix, return an empty string \"\".\n\nThe function\
    \ accepts following parameters:\n\narr: an array of strings (strings are in quotes,\
    \ e.g. [\"flower\",\"flow\",\"flight\"])\narr_size: length of the array arr (integer).\n\
    \nThe function should return the longest common prefix string.\n\n\n</text>\n\
    <cell>\n# Write your function below.\ndef LongestCommonPrefix(arr, arr_size):\n\
    \    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>\narr1 = [\"\
    flower\",\"flow\",\"flight\"]\narr2 = [\"flower\",\"flow\",\"flight\"]\narr3 =\
    \ [\"flower\",\"flow\",\"flight\"]\narr4 = [\"flower\",\"flow\",\"flight\"]\n\
    arr5 = [\"flower\",\"flow\",\"flight\"]\narr6 = [\"flower\",\"flow\",\"flight\"\
    ]\narr7 = [\"flower\",\"flow\",\"flight\"]\narr8 = [\"flower\",\"flow\",\"flight\"\
    ]\narr9 = [\"flower\",\"flow\",\"flight\"]\narr10 = [\"flower\",\"flow\",\"flight\"\
    ]\narr11 = [\"flower\",\"flow\",\"flight\"]\narr12 = [\"flower\",\"flow\",\"flight\"\
    ]\narr13 = [\"flower\",\"flow\",\"flight\"]\narr14 = [\"flower\",\"flow\",\"flight\"\
    ]\narr15 = [\"flower\",\"flow\",\"flight\"]\narr16 = [\"flower\",\"flow\",\"flight\"\
    ]\narr17 = [\"flower\",\"flow\",\"flight\"]\narr18 = [\"flower\",\"flow\",\"flight\"\
    ]\narr19 = [\"flower\",\"flow\",\"flight\"]\narr20 = [\"flower\",\"flow\",\"flight\"\
    ]\narr21 = [\"flower\",\"flow\",\"flight\"]\narr22 = [\"flower\",\"flow\",\"flight\"\
    ]\narr23 = [\"flower\",\"flow\",\"flight\"]\narr24 = [\"flower\",\"flow\",\"flight\"\
    ]\narr25 = [\"flow", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for(let i = 1; i < extensions.length; i++){\n        let\
    \ extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var max_strength = 0;\n    var max_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "  var\
    \ strongest = -1;\n  for(var i=0; i<extensions.length; i++){\n    var extension\
    \ = extensions[i].toLowerCase();\n    var cap = extension.charAt(0).toUpperCase();\n\
    \    var sm = extension.charAt(0).toLowerCase();\n    var strength = cap - sm;\n\
    \    if(strength > strongest){\n      strongest = strength;\n    }\n  }\n  return\
    \ class_name + \".\" + extensions[strongest];\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest_extension = null;\n    var strongest_extension_strength = 0;\n   \
    \ var class_name_length = class_name.length;\n    var extensions_length = extensions.length;\n\
    \    for(var i = 0; i < extensions_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet extension_length = extension.length;\n\t\
    \tlet extension_strength = extension_length - class_name_length;\n\t\tlet extension_strength_sign\
    \ = extension_strength < 0 ? -1 : 1;\n\t\tlet extension_strength_magnitude = Math.abs(extension_strength);\n\
    \t\tif (extension_strength_magnitude > strongest_extension_strength){\n\t\t\t\
    strongest_extension = class_name;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn strongest_extension;\n}\n", "\tlet strongest_extension =\
    \ extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension_strength){\n\t\t\
    \tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strength = 0;\n\tlet strongest_extension\
    \ = null;\n\textensions.forEach(extension => {\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet fraction = cap - sm;\n\
    \t\tstrength += fraction;\n\t\tif (fraction > 0){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t});\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    var strongest_extension_strength_counter\
    \ = 0;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n        else if(extension_strength == strongest_extension_strength){\n\
    \            strongest_extension_strength_counter++;\n        }\n    }\n    if(strongest_extension_strength_counter\
    \ > 1){\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ else{\n        return class_name;\n    }\n}\n", "    var strongest_extension\
    \ = \"\";\n    var extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_object = eval(class_name);\n        var class_extensions\
    \ = class_object.extensions;\n        for(var j = 0; j < class_extensions.length;\
    \ j++){\n            var class_extension = class_extensions[j];\n            var\
    \ class_extension_name = class_name + class_extension;\n            var class_extension_object\
    \ = eval(class_extension_name);\n            var class_extension_strength = class_extension_object.strength;\n\
    \            if(class_extension_strength > extension_strength){\n            \
    \    strongest_extension = class_extension_name;\n                extension_strength\
    \ = class_extension_strength;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    var strongest_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_class = class_name + \".\" + extension;\n\
    \        var extension_strength = Extension_Strength(extension_class);\n     \
    \   if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_name = extension;\n            strongest_extension = extension_class;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    let strongest_extension\
    \ = \"\";\n    let strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ class_name_array = class_name.split('.');\n\tlet class_name = class_name_array.pop();\n\
    \tlet extension_array = [];\n\tfor(let i = 0; i < extensions.length; i++){\n\t\
    \tlet extension = extensions[i];\n\t\tlet extension_array = extension.split('.');\n\
    \t\tlet extension_class = extension_array.pop();\n\t\tlet extension_name = extension_array.pop();\n\
    \t\tlet extension_strength = extension_array.length;\n\t\tlet extension_class_array\
    \ = extension_class.split('');\n\t\tlet extension_class_name = extension_class_array.pop();\n\
    \t\tlet extension_class_strength = extension_class_array.length;\n\t\tlet extension_strength_array\
    \ = [];\n\t\tfor(let j = 0; j < extension_strength; j++){\n\t\t\tlet extension_letter\
    \ = extension_class_array[j];\n\t\t\tlet extension_letter_strength = extension_class_strength\
    \ - j;\n\t\t\textension_strength_array.push(extension_letter + extension_letter_strength);\n\
    \t\t}\n\t\textension_array.push(extension_strength_array);\n\t}\n\tlet extension_strength_array\
    \ = [];\n\tfor(let i = 0; i < extension_array.length; i++){\n\t\tlet extension_letter\
    \ = extension_array[i];\n\t\tlet extension_letter_strength = extension_array.length\
    \ - i;\n\t\textension_strength_array.push(extension_letter + extension_letter_strength);\n\
    \t}\n\tlet extension_strength_array_sorted = extension_strength_array.sort();\n\
    \tlet extension_strength_array_sorted = extension_strength_array_sorted.reverse();\n\
    \tlet extension_strength_array_sorted = extension_strength_array_sorted.toString();\n\
    \tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/,/g,'');\n\
    \tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/\\\
    s+/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/\\\
    s+$/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/^\\\
    s+/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/\\\
    s+\\s/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/\\\
    s+$/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/^\\\
    s+/g,'');\n\tlet extension_strength_array_sorted = extension_strength_array_sorted.replace(/\\\
    s+\\", "    var strongest = null;\n    var strongest_strength = -1;\n    \n  \
    \  for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_strength){\n            strongest =\
    \ extension;\n            strongest_strength = extension_strength;\n        }\n\
    \    }\n    return class_name + \".\" + strongest;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = null;\n    var strongest_strength\
    \ = 0;\n    var strongest_extension = null;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class =\
    \ class_name + extension;\n        var extension_class_name = extension_class.substr(0,\
    \ extension_class.lastIndexOf('.'));\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        var extension_class_name_upper = extension_class_name.substr(0,\
    \ extension_class_name_length-1);\n        var extension_class_name_lower = extension_class_name.substr(extension_class_name_length-1);\n\
    \        var extension_class_name_strength = extension_class_name_upper.length\
    \ - extension_class_name_lower.length;\n        if(extension_class_name_strength\
    \ > strongest_strength){\n            strongest = extension_class;\n         \
    \   strongest_strength = extension_class_name_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return strongest;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = -1;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet max_strength = 0;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - class_name_length;\n\t\tlet extension_uppercase_letters = extension.match(/[A-Z]/);\n\
    \t\tlet extension_lowercase_letters = extension.match(/[a-z]/);\n\t\tlet extension_uppercase_letters_number\
    \ = extension_uppercase_letters.length;\n\t\tlet extension_lowercase_letters_number\
    \ = extension_lowercase_letters.length;\n\t\tlet extension_strength_number = extension_strength;\n\
    \t\tlet extension_strength_number_string = extension_strength_number.toString();\n\
    \t\tlet extension_strength_number_string_length = extension_strength_number_string.length;\n\
    \t\tlet extension_strength_number_string_length_without_zeros = extension_strength_number_string_length\
    \ - extension_strength_number_string_length_without_zeros;\n\t\tlet extension_strength_number_string_length_without_zeros_string\
    \ = extension_strength_number_string_length_without_zeros.toString();\n\t\tlet\
    \ extension_strength_number_string_length_without_zeros_string_integer = parseInt(extension_strength_number_string_length_without_zeros_string);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float\
    \ = parseFloat(extension_strength_number_string_length_without_zeros_string);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded\
    \ = Math.round(extension_strength_number_string_length_without_zeros_string_integer_float);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string\
    \ = extension_strength_number_string_length_without_zeros_string_integer_float_rounded.toString();\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string_integer\
    \ = parseInt(extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string_integer_float\
    \ = parseFloat(extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string_integer_float_rounded\
    \ = Math.round(extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string_integer_float);\n\
    \t\tlet extension_strength_number_string_length_without_zeros_string_integer_float_rounded_string_integer_float_roun",
  "\tlet strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length;\n\t\tlet current_extension_strength_lower\
    \ = current_extension.match(/[a-z]/g).length;\n\t\tlet current_extension_strength_upper\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tlet current_extension_strength_total = current_extension_strength + current_extension_strength_lower\
    \ + current_extension_strength_upper;\n\t\tlet current_extension_strength_percentage\
    \ = current_extension_strength_total / extensions.length;\n\t\tlet current_extension_strength_percentage_lower\
    \ = current_extension_strength_percentage * current_extension_strength_lower;\n\
    \t\tlet current_extension_strength_percentage_upper = current_extension_strength_percentage\
    \ * current_extension_strength_upper;\n\t\tlet current_extension_strength_percentage_total\
    \ = current_extension_strength_percentage * current_extension_strength;\n\t\t\
    let current_extension_strength_percentage_percentage = current_extension_strength_percentage_total\
    \ / 100;\n\t\tlet current_extension_strength_percentage_percentage_lower = current_extension_strength_percentage_percentage\
    \ * current_extension_strength_lower;\n\t\tlet current_extension_strength_percentage_percentage_upper\
    \ = current_extension_strength_percentage_percentage * current_extension_strength_upper;\n\
    \t\tlet current_extension_strength_percentage_percentage_total = current_extension_strength_percentage_percentage\
    \ * current_extension_strength;\n\t\tlet current_extension_strength_percentage_percentage_percentage\
    \ = current_extension_strength_percentage_percentage_total / 100;\n\t\tlet current_extension_strength_percentage_percentage_percentage_lower\
    \ = current_extension_strength_percentage_percentage_percentage * current_extension_strength_lower;\n\
    \t\tlet current_extension_strength_percentage_percentage_percentage_upper = current_extension_strength_percentage_percentage_percentage\
    \ * current_extension_strength_upper;\n\t\tlet current_extension_strength_percentage_percentage_percentage_total\
    \ = current_extension_strength_percentage_percentage_percentage * current_extension_strength;\n\
    \t\tlet current_extension_strength_percentage_percentage_percentage_percentage\
    \ = current_extension_strength_percentage_percentage_percentage_total / 100;\n\
    \t\tlet current_extension_strength_percentage_percentage_percentage_percentage_lower\
    \ = current_extension_strength_percentage_percentage_percentage_percentage * current_extension_",
  "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet strength\
    \ = 0;\n\tlet strongest_extension = null;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_exists = class_exists(class_name);\n\t\tif (class_exists){\n\
    \t\t\tlet class_extensions = class_extensions(class_name);\n\t\t\tlet class_extensions_length\
    \ = class_extensions.length;\n\t\t\tlet extension_strength = extension_strength(class_extensions);\n\
    \t\t\tif (extension_strength > strength){\n\t\t\t\tstrength = extension_strength;\n\
    \t\t\t\tstrongest_extension = class_name + extension;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return strongest_extension;\n}\n", "  var strongest_extension = extensions[0];\n\
    \  for(var i = 1; i < extensions.length; i++){\n    var extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n    if(extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n      strongest_extension =\
    \ extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet extension_counter = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\textension_counter++;\n\t\tlet extension = extensions[i];\n\t\tlet extension_counter_string\
    \ = extension_counter.toString();\n\t\tlet extension_counter_string_capital =\
    \ extension_counter_string.toUpperCase();\n\t\tlet extension_counter_string_smaller\
    \ = extension_counter_string.toLowerCase();\n\t\tlet extension_counter_string_smallerCapital\
    \ = extension_counter_string_smaller.toUpperCase();\n\t\tlet extension_counter_string_smallerSmaller\
    \ = extension_counter_string_smaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapital.toLowerCase();\n\t\tlet extension_counter_string_capitalSmaller\
    \ = extension_counter_string_capital.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_capitalSmaller\
    \ = extension_counter_string_capitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_smallerCapitalSmaller\
    \ = extension_counter_string_smallerCapitalSmaller.toLowerCase();\n\t\tlet extension_counter_string_sm",
  "    var strongest = -1;\n    var strongest_extension = \"\";\n    var extension_length\
    \ = extensions.length;\n    for(var i = 0; i < extension_length; i++){\n     \
    \   var extension = extensions[i];\n        var class_name_length = class_name.length;\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        var extension_strength_percentage\
    \ = extension_strength / class_name_length;\n        if(extension_strength > strongest){\n\
    \            strongest = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return strongest_extension;\n}\n", "\tlet\
    \ strength = 0;\n\tlet strongest_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
    \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_lower = extension.toLowerCase();\n\
    \t\tlet extension_upper = extension.toUpperCase();\n\t\tlet extension_length_lower\
    \ = extension_lower.length;\n\t\tlet extension_length_upper = extension_upper.length;\n\
    \t\tlet extension_strength = extension_length_upper - extension_length_lower;\n\
    \t\tlet extension_strength_upper = extension_strength - extension_length;\n\t\t\
    let extension_strength_lower = extension_strength - extension_length;\n\t\tlet\
    \ extension_strength_length = extension_strength_upper - extension_strength_lower;\n\
    \t\tlet extension_strength_length_upper = extension_strength_length - extension_length_lower;\n\
    \t\tlet extension_strength_length_lower = extension_strength_length - extension_length_lower;\n\
    \t\tlet extension_strength_length_length = extension_strength_length_upper - extension_strength_length_lower;\n\
    \t\tlet extension_strength_length_length_upper = extension_strength_length_length\
    \ - extension_length_length_lower;\n\t\tlet extension_strength_length_length_lower\
    \ = extension_strength_length_length - extension_length_length_lower;\n\t\tlet\
    \ extension_strength_length_length_length = extension_strength_length_length_upper\
    \ - extension_strength_length_length_lower;\n\t\tlet extension_strength_length_length_length_upper\
    \ = extension_strength_length_length_length - extension_length_length_length_lower;\n\
    \t\tlet extension_strength_length_length_length_lower = extension_strength_length_length_length\
    \ - extension_length_length_length_lower;\n\t\tlet extension_strength_length_length_length_length\
    \ = extension_strength_length_length_length_upper - extension_strength_length_length_length_lower;\n\
    \t\tlet extension_strength_length_length_length_length_upper = extension_strength_length_length_length_length\
    \ - extension_length_length_length_length_lower;\n\t\tlet extension_strength_length_length_length_length_lower\
    \ = extension_strength_length_length_length_length - extension_length_length_length_length_lower;\n\
    \t\tlet extension_strength_length_length_length_length_length = extension_strength_length_length_length_length_upper\
    \ - extension_strength_length_length_length_length_length_lower;\n\t\tlet extension_strength_length_length_length_length_length_upper\
    \ = extension_strength_length_length_", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength(extension);\n\t\tif (extension_strength > strongest_extension.length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var strongest = \"\";\n    var max_strength\
    \ = 0;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_class = class_name\
    \ + extension;\n        var extension_strength = Extension_Strength(extension_class);\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + max_extension;\n}\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_object =\
    \ eval(class_name);\n        var class_object_properties = Object.getOwnPropertyNames(class_object);\n\
    \        for(var j=0; j<class_object_properties.length; j++){\n            var\
    \ property = class_object_properties[j];\n            var value = class_object[property];\n\
    \            if(typeof value == \"object\"){\n                var property_value\
    \ = Object.getOwnPropertyNames(value);\n                for(var k=0; k<property_value.length;\
    \ k++){\n                    var property_value = property_value[k];\n       \
    \             if(property_value == extension){\n                        if(strongest_extension_strength\
    \ < 0){\n                            strongest_extension_strength = -1;\n    \
    \                        strongest_extension = class_name + \".\" + extension;\n\
    \                        }\n                        else if(strongest_extension_strength\
    \ > 0){\n                            strongest_extension_strength = -1;\n    \
    \                        strongest_extension = class_name + \".\" + extension;\n\
    \                        }\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    let class_name_array = class_name.split(\"\");\n    let class_name_array_length\
    \ = class_name_array.length;\n    let extensions_length = extensions.length;\n\
    \    let extensions_array = new Array(extensions_length);\n    for(let i = 0;\
    \ i < extensions_length; i++){\n        extensions_array[i] = extensions[i].split(\"\
    \");\n    }\n    let extensions_array_length = extensions_array.length;\n    let\
    \ strongest_extension = \"\";\n    for(let i = 0; i < class_name_array_length;\
    \ i++){\n        let current_class_name_char = class_name_array[i];\n        let\
    \ current_extension_length = extensions_array_length;\n        for(let j = 0;\
    \ j < current_extension_length; j++){\n            let current_extension_char\
    \ = extensions_array[j][i];\n            if(current_class_name_char == current_extension_char){\n\
    \                current_extension_length--;\n            }\n        }\n     \
    \   if(current_extension_length == 0){\n            strongest_extension += current_class_name_char;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_length\
    \ = extensions.length;\n    for(var i=0; i<extension_length; i++){\n        var\
    \ extension = extensions[i];\n        var extension_class = class_name + \".\"\
    \ + extension;\n        var extension_strength = Extension_Strength(extension_class);\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension_class;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  var strongest = \"\";\n  var cap_extensions\
    \ = extensions.filter(function(e){return e.match(/[A-Z]/);});\n  var sm_extensions\
    \ = extensions.filter(function(e){return e.match(/[a-z]/);});\n  var cap_extensions_count\
    \ = cap_extensions.length;\n  var sm_extensions_count = sm_extensions.length;\n\
    \  var cap_extensions_strength = cap_extensions.map(function(e){return e.match(/[A-Z]/).length;});\n\
    \  var sm_extensions_strength = sm_extensions.map(function(e){return e.match(/[a-z]/).length;});\n\
    \  var max_extension_strength = Math.max.apply(null, cap_extensions_strength);\n\
    \  var max_extension_strength_length = cap_extensions_strength.indexOf(max_extension_strength);\n\
    \  var max_extension_strength_length = max_extension_strength_length + 1;\n  \n\
    \  for(var i = 0; i <= max_extension_strength_length; i++){\n    var extension_strength\
    \ = cap_extensions_strength[i] - sm_extensions_strength[i];\n    if(extension_strength\
    \ > 0){\n      strongest = class_name + \".\" + extensions[i];\n      break;\n\
    \    }\n  }\n  return strongest;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet class_name_array = class_name.split('');\n\tlet class_name_array_length\
    \ = class_name_array.length;\n\tlet extensions_array = extensions.map(e => e.split(''));\n\
    \tlet extensions_array_length = extensions_array.length;\n\tlet strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strength = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength\
    \ = -1;\n\tlet strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension",
  "\tlet max_strength = -1\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet\
    \ extension = extensions[i]\n\t\tlet class_name = class_name + extension\n\t\t\
    let class_exists = class_exists(class_name)\n\t\tif (class_exists){\n\t\t\tlet\
    \ class_extensions = class_extensions(class_name)\n\t\t\tlet class_extensions_length\
    \ = class_extensions.length\n\t\t\tlet class_extensions_strength = class_extensions_length\n\
    \t\t\tlet class_extensions_count = 0\n\t\t\tfor (let j = 0; j < class_extensions.length;\
    \ j++){\n\t\t\t\tlet extension = class_extensions[j]\n\t\t\t\tlet extension_exists\
    \ = extension_exists(extension)\n\t\t\t\tif (extension_exists){\n\t\t\t\t\tlet\
    \ extension_strength = extension_strength(extension)\n\t\t\t\t\tif (extension_strength\
    \ > max_strength){\n\t\t\t\t\t\tmax_strength = extension_strength\n\t\t\t\t\t\t\
    class_name = class_name\n\t\t\t\t\t\tclass_extensions_strength = extension_strength\n\
    \t\t\t\t\t\tclass_extensions_count = extension_strength\n\t\t\t\t\t}\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tif (class_extensions_strength == class_extensions_count){\n\t\
    \t\t\tclass_name = class_name + class_extensions_strength\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn class_name\n}\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var extension_length = extensions.length;\n    var class_length =\
    \ class_name.length;\n    \n    for(var i=0; i<extension_length; i++){\n     \
    \   var extension = extensions[i];\n        var extension_class = extension.charAt(0);\n\
    \        var extension_class_strength = extension.charAt(1).toUpperCase().charCodeAt(0)\
    \ - extension.charAt(1).toLowerCase().charCodeAt(0);\n        \n        if(extension_class_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_class_strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest_extension = \"\";\n \
    \   var strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  \
    \  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count\
    \ = cap_extensions.length;\n    let sm_extensions_count = sm_extensions.length;\n\
    \    let cap_extensions_strength = cap_extensions_count - sm_extensions_count;\n\
    \    let sm_extensions_strength = sm_extensions_count - cap_extensions_count;\n\
    \    let cap_extension_strength = Math.floor(cap_extensions_strength / 2);\n \
    \   let sm_extension_strength = Math.floor(sm_extensions_strength / 2);\n    let\
    \ strongest_extension = class_name + cap_extensions[cap_extension_strength];\n\
    \    if (cap_extensions_strength > sm_extensions_strength){\n        strongest_extension\
    \ += \".\" + sm_extensions[sm_extension_strength];\n    }\n    return strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tlet strength = extension_strength -\
    \ strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length;\n\
    \t\tif(strength > 0){\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength =\
    \ -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].charCodeAt(0) - extensions[i].charCodeAt(0).toLowerCase();\n\
    \t\tif (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase()){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = null;\n    var strongest_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_object =\
    \ LoadClass(class_name);\n        var class_extensions = class_object.extensions;\n\
    \        for(var j=0; j<class_extensions.length; j++){\n            var extension\
    \ = class_extensions[j];\n            var class_name = class_name + extension;\n\
    \            var class_object = LoadClass(class_name);\n            var class_extensions\
    \ = class_object.extensions;\n            var extension_strength = class_extensions.length\
    \ - j;\n            if(extension_strength > strongest_strength){\n           \
    \     strongest = class_name;\n                strongest_strength = extension_strength;\n\
    \            }\n        }\n    }\n    return strongest;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    var extension_counter_strength = 0;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        extension_counter++;\n        extension_counter_strength = extension_counter;\n\
    \        \n        for(var j=0; j<extensions.length; j++){\n            if(j ==\
    \ i){\n                continue;\n            }\n            extension_counter_strength\
    \ += extensions[j].length;\n        }\n        \n        if(extension_counter_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_counter_strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    let extension_strength_percentage = extension_strength / extension.length;\n\t\
    \tif(extension_strength_percentage > max_strength){\n\t\t\tmax_strength = extension_strength_percentage;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - extension_strength(extension);\n\
    \t\tif (extension_strength > strongest_extension.length){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if(extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    for(var i=0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet extension_counter = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\textension_counter++;\n\t\tlet extension_counter_string = extension_counter.toString();\n\
    \t\tlet extension_counter_string_capitalized = extension_counter_string.toUpperCase();\n\
    \t\tlet extension_counter_string_smaller = extension_counter_string_capitalized.toLowerCase();\n\
    \t\tlet extension_counter_string_smaller_index = extension_counter_string_smaller.indexOf(class_name.charAt(0));\n\
    \t\tlet extension_counter_string_smaller_length = extension_counter_string_smaller.length;\n\
    \t\tlet extension_counter_string_smaller_cap = extension_counter_string_smaller.charAt(0);\n\
    \t\tlet extension_counter_string_smaller_cap_length = extension_counter_string_smaller_cap.length;\n\
    \t\tlet extension_counter_string_smaller_sm = extension_counter_string_smaller.charAt(extension_counter_string_smaller_cap_length);\n\
    \t\tlet extension_counter_string_smaller_sm_length = extension_counter_string_smaller_sm.length;\n\
    \t\tlet extension_counter_string_smaller_sm_cap = extension_counter_string_smaller.charAt(extension_counter_string_smaller_sm_length);\n\
    \t\tlet extension_counter_string_smaller_sm_cap_length = extension_counter_string_smaller_sm_cap.length;\n\
    \t\tlet extension_counter_string_smaller_sm_sm = extension_counter_string_smaller.charAt(extension_counter_string_smaller_sm_cap_length);\n\
    \t\tlet extension_counter_string_smaller_sm_sm_length = extension_counter_string_smaller_sm_sm.length;\n\
    \t\tlet extension_counter_string_smaller_sm_sm_cap = extension_counter_string_smaller.charAt(extension_counter_string_smaller_sm_sm_length);\n\
    \t\tlet extension_counter_string_smaller_sm_sm_cap_length = extension_counter_string_smaller_sm_sm_cap.length;\n\
    \t\tlet extension_counter_string_smaller_sm_sm_sm = extension_counter_string_smaller.charAt(extension_counter_string_smaller_sm_sm_length);\n\
    \t\tlet extension_counter_string_smaller_sm_sm_sm_length = extension_counter_string_smaller_sm_sm_sm.length;\n\
    \t\tlet extension_counter_string_smaller_sm_sm_sm_cap = extension_counter_string_smaller.charAt(extension_counter_string_smaller_sm_sm_sm_length);\n\
    \t\tlet extension_counter_string_smaller_sm_sm_sm_cap_length = extension_counter_string_smaller_sm_sm_sm_cap.length;\n\
    \t\tlet ", "\tlet max_strength = -1\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i]\n\t\tlet class_name = class_name +\
    \ extension\n\t\tlet class_object = eval(class_name)\n\t\tlet class_strength =\
    \ class_object.strength\n\t\tif (class_strength > max_strength){\n\t\t\tmax_strength\
    \ = class_strength\n\t\t}\n\t}\n\treturn class_name + extensions[extensions.length-1]\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extension_counter = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        extension_counter = 0;\n        for(var j = 0; j < class_name.length;\
    \ j++){\n            if(class_name[j] == extensions[i]){\n                extension_counter++;\n\
    \            }\n        }\n        if(extension_counter > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_counter;\n        }\n    }\n    return strongest_extension;\n}\n",
  "\tlet max_strength = 0;\n\tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_object = eval(class_name);\n\t\tlet class_strength\
    \ = class_object.strength;\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tlet strength = class_strength - extension_strength;\n\
    \t\tif(strength > max_strength){\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "\tlet strongest_extension = null;\n\tlet strongest_extension_strength = -1;\n\t\
    for (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = null;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tlet extension_strength_counter = 0;\n\t\tfor(let j = 0; j < extension.length;\
    \ j++){\n\t\t\tif(extension[j].match(/[A-Z]/g).length > extension[j].match(/[a-z]/g).length){\n\
    \t\t\t\textension_strength_counter++;\n\t\t\t}\n\t\t}\n\t\tif(extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extension;\n\t\
    \t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension_strength_counter\
    \ = extension_strength_counter;\n\t\t}\n\t}\n\tif(strongest_extension_strength_counter\
    \ > 0){\n\t\treturn class_name + \".\" + strongest_extension;\n\t}\n\treturn class_name;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length\
    \ = class_name.length;\n\t\tlet extension_length = extension.length;\n\t\tlet\
    \ strength = class_name_length - extension_length;\n\t\tif (strength > max_strength){\n\
    \t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\
    \treturn class_name + \".\" + max_extension;\n}\n", "    var max_strength = 0;\n\
    \    var strongest_extension = \"\";\n    for(var i=0;i<extensions.length;i++){\n\
    \        var extension = extensions[i];\n        var class_name_with_extension\
    \ = class_name + \".\" + extension;\n        var extension_strength = Extension_Strength(class_name_with_extension);\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = class_name_with_extension;\n        }\n   \
    \ }\n    return strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\
    \tlet strongest_extension_strength = 0;\n\tlet strongest_extension_strength_position\
    \ = 0;\n\tlet strongest_extension_strength_positions = [];\n\t\n\tfor(let i =\
    \ 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet\
    \ extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - CAP_TO_STRONG(extension);\n\t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension_strength_position = i;\n\t\t}\n\t\t\n\t\tfor(let j =\
    \ 0; j < extensions.length; j++){\n\t\t\tif(j != i){\n\t\t\t\tlet extension_j\
    \ = extensions[j];\n\t\t\t\tlet extension_j_length = extension_j.length;\n\t\t\
    \t\tlet extension_j_strength = extension_j_length - CAP_TO_STRONG(extension_j);\n\
    \t\t\t\t\n\t\t\t\tif(extension_j_strength > strongest_extension_strength){\n\t\
    \t\t\t\tstrongest_extension = extension_j;\n\t\t\t\t\tstrongest_extension_strength\
    \ = extension_j_strength;\n\t\t\t\t\tstrongest_extension_strength_position = j;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstrongest_extension_strength_positions.push(strongest_extension_strength_position);\n\
    \t\n\tfor(let i = 0; i < strongest_extension_strength_positions.length; i++){\n\
    \t\tlet position = strongest_extension_strength_positions[i];\n\t\t\n\t\tif(position\
    \ < strongest_extension_strength_position){\n\t\t\tstrongest_extension_strength_position\
    \ = position;\n\t\t}\n\t}\n\t\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var class_name_length = class_name.length;\n    var extensions_length\
    \ = extensions.length;\n    \n    for(var i = 0; i < extensions_length; i++){\n\
    \        var extension_length = extensions[i].length;\n        var extension_strength\
    \ = extensions[i].charCodeAt(0) - class_name_length;\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extensions[i];\n    \
    \    }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tlet strongest_extension_strength =\
    \ -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "  var max_strength\
    \ = -1;\n  var max_extension = \"\";\n  for(var i=0;i<extensions.length;i++){\n\
    \    var extension = extensions[i];\n    var class_name = class_name + extension;\n\
    \    var class_object = eval(class_name);\n    var strength = class_object.strength;\n\
    \    if(strength > max_strength){\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - extension.match(/[A-Z]/g).length;\n\
    \        if (extension_strength > strongest_extension.length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tlet strength = extension_strength -\
    \ strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length;\n\
    \t\tif(strength > 0){\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_class_name = \"\";\n\tlet strongest_extension_class_name_strength\
    \ = 0;\n\tlet strongest_extension_class_name_extension = \"\";\n\tlet strongest_extension_class_name_extension_strength\
    \ = 0;\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet class_name_extension = class_name + \".\" + extension;\n\
    \t\tlet class_name_extension_strength = Extension_Strength(class_name_extension);\n\
    \t\t\n\t\tif(strongest_extension_strength < class_name_extension_strength){\n\t\
    \t\tstrongest_extension_strength = class_name_extension_strength;\n\t\t\tstrongest_extension_class_name\
    \ = class_name_extension;\n\t\t\tstrongest_extension_class_name_strength = class_name_extension_strength;\n\
    \t\t\tstrongest_extension_class_name_extension = extension;\n\t\t\tstrongest_extension_class_name_extension_strength\
    \ = class_name_extension_strength;\n\t\t}\n\t\t\n\t\tif(strongest_extension_strength\
    \ > strongest_extension_class_name_strength){\n\t\t\tstrongest_extension_class_name_extension\
    \ = extension;\n\t\t\tstrongest_extension_class_name_extension_strength = class_name_extension_strength;\n\
    \t\t}\n\t}\n\t\n\treturn strongest_extension_class_name + \".\" + strongest_extension_class_name_extension;\n\
    }\n", "\tlet class_name_array = class_name.split(\"\").map(function(x){return\
    \ x.toUpperCase()});\n\tlet extensions_array = extensions.map(function(x){return\
    \ x.split(\"\").map(function(x){return x.toUpperCase()})});\n\tlet max_extension_strength\
    \ = 0;\n\tlet max_extension_extension = \"\";\n\tlet max_extension_class_name\
    \ = \"\";\n\tfor(let i = 0; i < extensions_array.length; i++){\n\t\tlet extension_strength\
    \ = extensions_array[i].length - class_name_array.length;\n\t\tif(extension_strength\
    \ > max_extension_strength){\n\t\t\tmax_extension_strength = extension_strength;\n\
    \t\t\tmax_extension_extension = extensions_array[i];\n\t\t\tmax_extension_class_name\
    \ = class_name;\n\t\t}\n\t}\n\treturn max_extension_class_name + \".\" + max_extension_extension[0];\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_length = extension.length;\n        var extension_strength = extension_length/class_name.length;\n\
    \        if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_name = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_name;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for(let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extension_length = extensions.length;\n    for(var i=0; i<extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_length\
    \ = class_name.length;\n        var extension_length = extension.length;\n   \
    \     var extension_strength = extension_length - class_name_length;\n       \
    \ if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = -1;\n\
    \    \n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        \n        if(extension_strength > strongest_extension_strength){\n  \
    \          strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\t\
    for (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - CAP_SM_RE.exec(extension)[0].length;\n\t\tif (extension_strength > strongest_extension.length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var strongest_extension = \"\";\n    var\
    \ max_strength = 0;\n    var max_strength_extension = \"\";\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_strength_extension\
    \ = extension;\n        }\n    }\n    return class_name + max_strength_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    for(var i=0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
