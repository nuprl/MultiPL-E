name: HumanEval_5_intersperse
language: js
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5,\
  \ 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2],\
  \ 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  var result = [];\n  numbers.forEach(function(number){\n    result.push(number);\n\
    \    if (numbers.length > 1){\n      result.push(delimeter);\n    }\n  });\n \
    \ return result;\n}\n", "  var result = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    result.push(numbers[i]);\n    if(numbers[i+1]) result.push(delimeter);\n\
    \  }\n  return result;\n}\n", "  return numbers.reduce(function(acc, cur, i){\n\
    \    return i > 0 && i % 2 === 0\n      ? acc.concat(cur, delimeter)\n      :\
    \ acc.concat(cur)\n  }, [])\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length > 1) {\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length > 0){\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length > 0){\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length){\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length){\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length > 1) {\n      result.push(delimeter);\n\
    \    }\n  });\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    result.push(delimeter);\n  });\n  return result;\n\
    }\n", "  var result = [];\n  var i = 0;\n  var len = numbers.length;\n  \n  for(;\
    \ i < len; i++){\n    result.push(numbers[i]);\n    if(i < len - 1){\n      result.push(delimeter);\n\
    \    }\n  }\n  \n  return result;\n}\n", "  var result = [];\n  for (var i = 0;\
    \ i < numbers.length; i++){\n    result.push(numbers[i]);\n    if (i !== numbers.length\
    \ - 1){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", " \
    \ if(numbers.length === 0) return [];\n  if(delimeter === undefined) delimeter\
    \ = ',';\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n   \
    \ result.push(numbers[i]);\n    if(numbers[i + 1]) result.push(delimeter);\n \
    \ }\n  return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length && number != numbers[numbers.length-1]){\n\
    \      result.push(delimeter);\n    }\n  });\n  return result;\n}\n", "  var result\
    \ = [];\n  numbers.forEach(function(number){\n    result.push(number);\n    if\
    \ (numbers.length > 0){\n      result.push(delimeter);\n    }\n  });\n  return\
    \ result;\n}\n", "  if(numbers.length === 0) return [];\n  if(delimeter === undefined)\
    \ delimeter = ',';\n  if(typeof delimeter !== 'string') delimeter = delimeter.toString();\n\
    \  if(typeof numbers !== 'object') numbers = [numbers];\n  var result = [];\n\
    \  var i = 0;\n  while(i < numbers.length){\n    result.push(numbers[i]);\n  \
    \  result.push(delimeter);\n    i++;\n  }\n  return result.join('');\n}\n", " \
    \ var result = [];\n  for (var i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n    result.push(numbers[i + 1]);\n  }\n  return\
    \ result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n  \
    \  result.push(number);\n    result.push(delimeter);\n  });\n  return result;\n\
    }\n", "  var result = [];\n  numbers.forEach(function(number){\n    result.push(number);\n\
    \    if (numbers.length > 1){\n      result.push(delimeter);\n    }\n  });\n \
    \ return result;\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.push(number);\n    if (numbers.length && number !== numbers[numbers.length-1])\
    \ {\n      result.push(delimeter);\n    }\n  });\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
