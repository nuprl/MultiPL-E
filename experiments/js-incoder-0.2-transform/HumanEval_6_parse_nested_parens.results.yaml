language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvq7vq58z.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level);\n            paren_level++;\n         \
    \   paren_levels.push(paren_level);\n        }\n        else if(char == ')'){\n\
    \            paren_level = paren_stack.pop();\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == ' ' && paren_stack.length == 0){\n       \
    \     nested_parens.push(paren_levels.length);\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  12,\n\
    \  14\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpcdi0dwhi.js:35:10)\n    at Object.<anonymous> (/tmp/tmpcdi0dwhi.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 14\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_stack =\
    \ [];\n\tvar paren_levels = [];\n\tvar paren_level_stack = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpovx2_stk.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_level_stack = [];\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_string = \"\";\n  var paren_level_stack_string_index = 0;\n\
    \  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphmf8a0_7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = {};\n    paren_levels_index[paren_string]\
    \ = 1;\n    paren_stack.push(paren_string);\n    while(paren_stack.length > 0){\n\
    \        var current_paren_string = paren_stack.pop();\n        var current_paren_level\
    \ = paren_levels_index[current_paren_string];\n        var current_paren_levels\
    \ = paren_levels[current_paren_level];\n        var current_paren_levels_length\
    \ = current_paren_levels.length;\n        for(var i=0; i<current_paren_levels_length;\
    \ i++){\n            var current_paren_level_string = current_paren_levels[i];\n\
    \            var current_paren_level_length = current_paren_level_string.length;\n\
    \            for(var j=0; j<current_paren_level_length; j++){\n              \
    \  var current_paren_level_char = current_paren_level_string.charAt(j);\n    \
    \            if(current_paren_level_char === '('){\n                    paren_level++;\n\
    \                    if(paren_levels[paren_level] === undefined){\n          \
    \              paren_levels[paren_level] = [];\n                    }\n      \
    \              paren_levels[paren_level].push(current_paren_string);\n       \
    \             paren_levels_index[current_paren_string] = paren_level;\n      \
    \          }\n                else if(current_paren_level_char === ')'){\n   \
    \                 paren_level--;\n                    if(paren_level === -1){\n\
    \                        paren_levels.pop();\n                    }\n        \
    \            if(paren_levels[paren_level] === undefined){\n                  \
    \      paren_levels[paren_level] = [];\n                    }\n              \
    \      paren_levels[paren_level].push(current_paren_string);\n               \
    \     paren_levels_index[current_paren_string] = paren_level;\n              \
    \  }\n            }\n        }\n    }\n    return paren_levels.length;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_n139u72.js:18\n        var current_paren_levels_length = current_paren_levels.length;\n\
    \                                                               ^\n\nTypeError:\
    \ Cannot read properties of undefined (reading 'length')\n    at parse_nested_parens\
    \ (/tmp/tmp_n139u72.js:18:64)\n    at test (/tmp/tmp_n139u72.js:54:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_n139u72.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0e9g0wy3.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_level_stack[paren_level_stack_index]\
    \ = paren_level;\n            paren_level_stack_index++;\n            paren_stack.push(c);\n\
    \            paren_level++;\n        }\n        else if(c == ')'){\n         \
    \   paren_level_stack_index--;\n            paren_level = paren_level_stack[paren_level_stack_index];\n\
    \            paren_stack.pop();\n        }\n        else if(c == '(' || c == ')'){\n\
    \            paren_level++;\n        }\n        else{\n            paren_level--;\n\
    \        }\n        if(paren_level == 0){\n            nested_paren_level = Math.max(nested_paren_level,\
    \ paren_level);\n        }\n    }\n    return nested_paren_level;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkqac_6z5.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkqac_6z5.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6oheoep_.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar max_level = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\
    \tvar paren_levels_string = \"\";\n\tvar paren_level_counter = 0;\n\tvar paren_level_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_string = \"\";\n\tvar paren_level_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8s915a70.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tvar paren_groups =\
    \ [];\n\tvar paren_group_count = [];\n\tvar paren_group_level = [];\n\tvar paren_group_stack\
    \ = [];\n\tvar paren_group_level_count = [];\n\tvar paren_group_level_stack =\
    \ [];\n\tvar paren_group_level_stack_count = [];\n\tvar paren_group_level_stack_max\
    \ = [];\n\tvar paren_group_level_stack_max_count = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7h_be7__.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        if(paren_string[i] == '('){\n        \
    \    paren_stack.push(paren_level.length);\n            paren_level.push(level);\n\
    \        }\n        else if(paren_string[i] == ')'){\n            level = paren_level.pop();\n\
    \        }\n        else if(paren_string[i] == ' '){\n            level = paren_level.pop();\n\
    \        }\n        else{\n            paren_level.push(level);\n        }\n \
    \   }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp391fe95f.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp391fe95f.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_stack = [];\n  for (var i = 0; i < paren_string.length;\
    \ i++){\n    var c = paren_string[i];\n    if (c == '('){\n      paren_stack.push(level);\n\
    \      level++;\n    } else if (c == ')'){\n      var current_level = paren_stack.pop();\n\
    \      if (current_level > level){\n        level = current_level;\n      }\n\
    \    }\n  }\n  return level;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbz2f_god.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbz2f_god.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpid15hrjq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpid15hrjq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    paren_string = paren_string.trim();\n    paren_string = paren_string.replace(/\\\
    s+/g, \" \");\n    paren_string = paren_string.replace(/\\s+$/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)$/g, \"\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)/g, \"\
    )\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)$/g, \"\");\n  \
    \  paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n   \
    \ paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\
    \    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g,\
    \ \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g,\
    \ \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmntwnr2x.js:29\n    paren_string = paren_string.replace(/\\s+\\\
    )\\s+\\)\\s+\\\n                                        ^\n\nSyntaxError: Invalid\
    \ regular expression: missing /\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_level++;\n    }\n    if(paren_string[i]\
    \ == ')'){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpwg_rh1gh.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwg_rh1gh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_count\
    \ = [];\n    var paren_level_max = 0;\n    var paren_level_max_index = 0;\n  \
    \  var paren_level_max_count = 0;\n    var paren_level_max_string = \"\";\n  \
    \  for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level.length);\n\
    \            paren_level.push(level);\n            paren_level_count.push(1);\n\
    \            paren_level_max = Math.max(paren_level_max, level);\n           \
    \ paren_level_max_index = i;\n            paren_level_max_count = paren_level_count[paren_level_max_index];\n\
    \            level++;\n        }else if(char == \")\"){\n            level--;\n\
    \            paren_level_count[paren_level_max_index] -= 1;\n            if(paren_level_count[paren_level_max_index]\
    \ == 0){\n                paren_level_max_count--;\n                paren_level_max_index--;\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxp7ojfa5.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxp7ojfa5.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tvar paren_level_stack\
    \ = [];\n\tvar paren_level_stack_index = 0;\n\tvar paren_level_stack_index2 =\
    \ 0;\n\tvar paren_level_stack_index3 = 0;\n\tvar paren_level_stack_index4 = 0;\n\
    \tvar paren_level_stack_index5 = 0;\n\tvar paren_level_stack_index6 = 0;\n\tvar\
    \ paren_level_stack_index7 = 0;\n\tvar paren_level_stack_index8 = 0;\n\tvar paren_level_stack_index9\
    \ = 0;\n\tvar paren_level_stack_index10 = 0;\n\tvar paren_level_stack_index11\
    \ = 0;\n\tvar paren_level_stack_index12 = 0;\n\tvar paren_level_stack_index13\
    \ = 0;\n\tvar paren_level_stack_index14 = 0;\n\tvar paren_level_stack_index15\
    \ = 0;\n\tvar paren_level_stack_index16 = 0;\n\tvar paren_level_stack_index17\
    \ = 0;\n\tvar paren_level_stack_index18 = 0;\n\tvar paren_level_stack_index19\
    \ = 0;\n\tvar paren_level_stack_index20 = 0;\n\tvar paren_level_stack_index21\
    \ = 0;\n\tvar paren_level_stack_index22 = 0;\n\tvar paren_level_stack_index23\
    \ = 0;\n\tvar paren_level_stack_index24 = 0;\n\tvar paren_level_stack_index25\
    \ = 0;\n\tvar paren_level_stack_index26 = 0;\n\tvar paren_level_stack_index27\
    \ = 0;\n\tvar paren_level_stack_index28 = 0;\n\tvar paren_level_stack_index29\
    \ = 0;\n\tvar paren_level_stack_index30 = 0;\n\tvar paren_level_stack_index31\
    \ = 0;\n\tvar paren_level_stack_index32 = 0;\n\tvar paren_level_stack_index33\
    \ = 0;\n\tvar paren_level_stack_index34 = 0;\n\tvar paren_level_stack_index35\
    \ = 0;\n\tvar paren_level_stack_index36 = 0;\n\tvar paren_level_stack_index37\
    \ = 0;\n\tvar paren_level_stack_index38 = 0;\n\tvar paren_level_stack_index39\
    \ = 0;\n\tvar paren_level_stack_index40 = 0;\n\tvar paren_level_stack_index41\
    \ = 1;\n\tvar paren_level_stack_index42 = 1;\n\tvar paren_level_stack_index43\
    \ = 1;\n\tvar paren_level_stack_index44 = 1;\n\tvar paren_level_stack_index45\
    \ = 1;\n\tvar paren_level_stack_index46 = 1;\n\tvar paren_level_stack_index47\
    \ = 1;\n\tvar paren_level_stack_index48 = 1;\n\tvar paren_level_stack_index49\
    \ = 1;\n\tvar paren_level_stack_index50 = 1;\n\tvar paren_level_stack_index51\
    \ = 1;\n\tvar paren_level_stack_index52 = 1;\n\tvar paren_level_stack_index53\
    \ = 1;\n\tvar paren_level_stack_index54 = 1;\n\tvar paren_level_stack\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp623q37ux.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_level = 0;\n    var paren_level_max\
    \ = 0;\n    var paren_level_max_index = 0;\n    var paren_level_max_index2 = 0;\n\
    \    var paren_level_max_index3 = 0;\n    var paren_level_max_index4 = 0;\n  \
    \  var paren_level_max_index5 = 0;\n    var paren_level_max_index6 = 0;\n    var\
    \ paren_level_max_index7 = 0;\n    var paren_level_max_index8 = 0;\n    var paren_level_max_index9\
    \ = 0;\n    var paren_level_max_index10 = 0;\n    var paren_level_max_index11\
    \ = 0;\n    var paren_level_max_index12 = 0;\n    var paren_level_max_index13\
    \ = 0;\n    var paren_level_max_index14 = 0;\n    var paren_level_max_index15\
    \ = 0;\n    var paren_level_max_index16 = 0;\n    var paren_level_max_index17\
    \ = 0;\n    var paren_level_max_index18 = 0;\n    var paren_level_max_index19\
    \ = 0;\n    var paren_level_max_index20 = 0;\n    var paren_level_max_index21\
    \ = 0;\n    var paren_level_max_index22 = 0;\n    var paren_level_max_index23\
    \ = 0;\n    var paren_level_max_index24 = 0;\n    var paren_level_max_index25\
    \ = 0;\n    var paren_level_max_index26 = 0;\n    var paren_level_max_index27\
    \ = 0;\n    var paren_level_max_index28 = 0;\n    var paren_level_max_index29\
    \ = 0;\n    var paren_level_max_index30 = 0;\n    var paren_level_max_index31\
    \ = 0;\n    var paren_level_max_index32 = 0;\n    var paren_level_max_index33\
    \ = 0;\n    var paren_level_max_index34 = 0;\n    var paren_level_max_index35\
    \ = 0;\n    var paren_level_max_index36 = 0;\n    var paren_level_max_index37\
    \ = 0;\n    var paren_level_max_index38 = 0;\n    var paren_level_max_index39\
    \ = 0;\n    var paren_level_max_index40 = 0;\n    var paren_level_max_index41\
    \ = 1;\n    var paren_level_max_index42 = 1;\n    var paren_level_max_index43\
    \ = 1;\n    var paren_level_max_index44 = 1;\n    var paren_level_max_index45\
    \ = 1;\n    var paren_level_max_index46 = 1;\n    var paren_level_max_index47\
    \ = 1;\n    var paren_level_max_index48 = 1;\n    var paren_level_max_index49\
    \ = 1;\n    var paren_level_max_index50 = 1;\n    var paren_level_max_index51\
    \ = 1;\n    var paren_level_max_index52 = 1;\n    var paren_level_max_index53\
    \ = 1;\n    var paren_level_max_index54 = 1;\n    var paren_level_max_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp10f9gf_t.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_counter = 0;\n  var paren_level_counter_reset = 0;\n\
    \  var paren_level_counter_reset_index = 0;\n  var paren_level_counter_reset_index2\
    \ = 0;\n  var paren_level_counter_reset_index3 = 0;\n  var paren_level_counter_reset_index4\
    \ = 0;\n  var paren_level_counter_reset_index5 = 0;\n  var paren_level_counter_reset_index6\
    \ = 0;\n  var paren_level_counter_reset_index7 = 0;\n  var paren_level_counter_reset_index8\
    \ = 0;\n  var paren_level_counter_reset_index9 = 0;\n  var paren_level_counter_reset_index10\
    \ = 0;\n  var paren_level_counter_reset_index11 = 0;\n  var paren_level_counter_reset_index12\
    \ = 0;\n  var paren_level_counter_reset_index13 = 0;\n  var paren_level_counter_reset_index14\
    \ = 0;\n  var paren_level_counter_reset_index15 = 0;\n  var paren_level_counter_reset_index16\
    \ = 0;\n  var paren_level_counter_reset_index17 = 0;\n  var paren_level_counter_reset_index18\
    \ = 0;\n  var paren_level_counter_reset_index19 = 0;\n  var paren_level_counter_reset_index20\
    \ = 0;\n  var paren_level_counter_reset_index21 = 0;\n  var paren_level_counter_reset_index22\
    \ = 0;\n  var paren_level_counter_reset_index23 = 0;\n  var paren_level_counter_reset_index24\
    \ = 0;\n  var paren_level_counter_reset_index25 = 0;\n  var paren_level_counter_reset_index26\
    \ = 0;\n  var paren_level_counter_reset_index27 = 0;\n  var paren_level_counter_reset_index28\
    \ = 0;\n  var paren_level_counter_reset_index29 = 0;\n  var paren_level_counter_reset_index30\
    \ = 0;\n  var paren_level_counter_reset_index31 = 0;\n  var paren_level_counter_reset_index32\
    \ = 0;\n  var paren_level_counter_reset_index33 = 0;\n  var paren_level_counter_reset_index34\
    \ = 0;\n  var paren_level_counter_reset_index35 = 0;\n  var paren_level_counter_reset_index36\
    \ = 0;\n  var paren_level_counter_reset_index37 = 0;\n  var paren_level_counter_reset_index38\
    \ = 0;\n  var paren_level_counter_reset_index39 = 0;\n  var paren_level_counter_reset_index40\
    \ = 0;\n  var paren_level_counter_reset_index41 = 0;\n  var paren_level_counter_reset_index42\
    \ = 0;\n  var paren_level_counter_reset_index43 = 0;\n  var paren_level_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpii8ijf6g.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
