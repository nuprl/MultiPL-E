language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvq7vq58z.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level);\n            paren_level++;\n         \
    \   paren_levels.push(paren_level);\n        }\n        else if(char == ')'){\n\
    \            paren_level = paren_stack.pop();\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == ' ' && paren_stack.length == 0){\n       \
    \     nested_parens.push(paren_levels.length);\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  12,\n\
    \  14\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpcdi0dwhi.js:35:10)\n    at Object.<anonymous> (/tmp/tmpcdi0dwhi.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 14\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_stack =\
    \ [];\n\tvar paren_levels = [];\n\tvar paren_level_stack = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar\
    \ paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count\
    \ = [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count =\
    \ [];\n\tvar paren_level_stack_count = [];\n\tvar paren_level_stack_count = [];\n\
    \tvar paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpovx2_stk.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_level_stack = [];\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_string = \"\";\n  var paren_level_stack_string_index = 0;\n\
    \  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphmf8a0_7.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = {};\n    paren_levels_index[paren_string]\
    \ = 1;\n    paren_stack.push(paren_string);\n    while(paren_stack.length > 0){\n\
    \        var current_paren_string = paren_stack.pop();\n        var current_paren_level\
    \ = paren_levels_index[current_paren_string];\n        var current_paren_levels\
    \ = paren_levels[current_paren_level];\n        var current_paren_levels_length\
    \ = current_paren_levels.length;\n        for(var i=0; i<current_paren_levels_length;\
    \ i++){\n            var current_paren_level_string = current_paren_levels[i];\n\
    \            var current_paren_level_length = current_paren_level_string.length;\n\
    \            for(var j=0; j<current_paren_level_length; j++){\n              \
    \  var current_paren_level_char = current_paren_level_string.charAt(j);\n    \
    \            if(current_paren_level_char === '('){\n                    paren_level++;\n\
    \                    if(paren_levels[paren_level] === undefined){\n          \
    \              paren_levels[paren_level] = [];\n                    }\n      \
    \              paren_levels[paren_level].push(current_paren_string);\n       \
    \             paren_levels_index[current_paren_string] = paren_level;\n      \
    \          }\n                else if(current_paren_level_char === ')'){\n   \
    \                 paren_level--;\n                    if(paren_level === -1){\n\
    \                        paren_levels.pop();\n                    }\n        \
    \            if(paren_levels[paren_level] === undefined){\n                  \
    \      paren_levels[paren_level] = [];\n                    }\n              \
    \      paren_levels[paren_level].push(current_paren_string);\n               \
    \     paren_levels_index[current_paren_string] = paren_level;\n              \
    \  }\n            }\n        }\n    }\n    return paren_levels.length;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_n139u72.js:18\n        var current_paren_levels_length = current_paren_levels.length;\n\
    \                                                               ^\n\nTypeError:\
    \ Cannot read properties of undefined (reading 'length')\n    at parse_nested_parens\
    \ (/tmp/tmp_n139u72.js:18:64)\n    at test (/tmp/tmp_n139u72.js:54:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_n139u72.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0e9g0wy3.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_level_stack[paren_level_stack_index]\
    \ = paren_level;\n            paren_level_stack_index++;\n            paren_stack.push(c);\n\
    \            paren_level++;\n        }\n        else if(c == ')'){\n         \
    \   paren_level_stack_index--;\n            paren_level = paren_level_stack[paren_level_stack_index];\n\
    \            paren_stack.pop();\n        }\n        else if(c == '(' || c == ')'){\n\
    \            paren_level++;\n        }\n        else{\n            paren_level--;\n\
    \        }\n        if(paren_level == 0){\n            nested_paren_level = Math.max(nested_paren_level,\
    \ paren_level);\n        }\n    }\n    return nested_paren_level;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkqac_6z5.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkqac_6z5.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6oheoep_.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar max_level = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\
    \tvar paren_levels_string = \"\";\n\tvar paren_level_counter = 0;\n\tvar paren_level_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_string = \"\";\n\tvar paren_level_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8s915a70.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tvar paren_groups =\
    \ [];\n\tvar paren_group_count = [];\n\tvar paren_group_level = [];\n\tvar paren_group_stack\
    \ = [];\n\tvar paren_group_level_count = [];\n\tvar paren_group_level_stack =\
    \ [];\n\tvar paren_group_level_stack_count = [];\n\tvar paren_group_level_stack_max\
    \ = [];\n\tvar paren_group_level_stack_max_count = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_level_stack_max_index\
    \ = [];\n\tvar paren_group_level_stack_max_index = [];\n\tvar paren_group_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7h_be7__.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        if(paren_string[i] == '('){\n        \
    \    paren_stack.push(paren_level.length);\n            paren_level.push(level);\n\
    \        }\n        else if(paren_string[i] == ')'){\n            level = paren_level.pop();\n\
    \        }\n        else if(paren_string[i] == ' '){\n            level = paren_level.pop();\n\
    \        }\n        else{\n            paren_level.push(level);\n        }\n \
    \   }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp391fe95f.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp391fe95f.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_stack = [];\n  for (var i = 0; i < paren_string.length;\
    \ i++){\n    var c = paren_string[i];\n    if (c == '('){\n      paren_stack.push(level);\n\
    \      level++;\n    } else if (c == ')'){\n      var current_level = paren_stack.pop();\n\
    \      if (current_level > level){\n        level = current_level;\n      }\n\
    \    }\n  }\n  return level;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbz2f_god.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbz2f_god.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpid15hrjq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpid15hrjq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    paren_string = paren_string.trim();\n    paren_string = paren_string.replace(/\\\
    s+/g, \" \");\n    paren_string = paren_string.replace(/\\s+$/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)$/g, \"\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)/g, \"\
    )\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)$/g, \"\");\n  \
    \  paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n   \
    \ paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\
    \    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g,\
    \ \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g,\
    \ \")\");\n    paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n    paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmntwnr2x.js:29\n    paren_string = paren_string.replace(/\\s+\\\
    )\\s+\\)\\s+\\\n                                        ^\n\nSyntaxError: Invalid\
    \ regular expression: missing /\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_level++;\n    }\n    if(paren_string[i]\
    \ == ')'){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpwg_rh1gh.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwg_rh1gh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_count\
    \ = [];\n    var paren_level_max = 0;\n    var paren_level_max_index = 0;\n  \
    \  var paren_level_max_count = 0;\n    var paren_level_max_string = \"\";\n  \
    \  for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level.length);\n\
    \            paren_level.push(level);\n            paren_level_count.push(1);\n\
    \            paren_level_max = Math.max(paren_level_max, level);\n           \
    \ paren_level_max_index = i;\n            paren_level_max_count = paren_level_count[paren_level_max_index];\n\
    \            level++;\n        }else if(char == \")\"){\n            level--;\n\
    \            paren_level_count[paren_level_max_index] -= 1;\n            if(paren_level_count[paren_level_max_index]\
    \ == 0){\n                paren_level_max_count--;\n                paren_level_max_index--;\n\
    \            }\n        }\n    }\n    return paren_level;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxp7ojfa5.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxp7ojfa5.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tvar paren_level_stack\
    \ = [];\n\tvar paren_level_stack_index = 0;\n\tvar paren_level_stack_index2 =\
    \ 0;\n\tvar paren_level_stack_index3 = 0;\n\tvar paren_level_stack_index4 = 0;\n\
    \tvar paren_level_stack_index5 = 0;\n\tvar paren_level_stack_index6 = 0;\n\tvar\
    \ paren_level_stack_index7 = 0;\n\tvar paren_level_stack_index8 = 0;\n\tvar paren_level_stack_index9\
    \ = 0;\n\tvar paren_level_stack_index10 = 0;\n\tvar paren_level_stack_index11\
    \ = 0;\n\tvar paren_level_stack_index12 = 0;\n\tvar paren_level_stack_index13\
    \ = 0;\n\tvar paren_level_stack_index14 = 0;\n\tvar paren_level_stack_index15\
    \ = 0;\n\tvar paren_level_stack_index16 = 0;\n\tvar paren_level_stack_index17\
    \ = 0;\n\tvar paren_level_stack_index18 = 0;\n\tvar paren_level_stack_index19\
    \ = 0;\n\tvar paren_level_stack_index20 = 0;\n\tvar paren_level_stack_index21\
    \ = 0;\n\tvar paren_level_stack_index22 = 0;\n\tvar paren_level_stack_index23\
    \ = 0;\n\tvar paren_level_stack_index24 = 0;\n\tvar paren_level_stack_index25\
    \ = 0;\n\tvar paren_level_stack_index26 = 0;\n\tvar paren_level_stack_index27\
    \ = 0;\n\tvar paren_level_stack_index28 = 0;\n\tvar paren_level_stack_index29\
    \ = 0;\n\tvar paren_level_stack_index30 = 0;\n\tvar paren_level_stack_index31\
    \ = 0;\n\tvar paren_level_stack_index32 = 0;\n\tvar paren_level_stack_index33\
    \ = 0;\n\tvar paren_level_stack_index34 = 0;\n\tvar paren_level_stack_index35\
    \ = 0;\n\tvar paren_level_stack_index36 = 0;\n\tvar paren_level_stack_index37\
    \ = 0;\n\tvar paren_level_stack_index38 = 0;\n\tvar paren_level_stack_index39\
    \ = 0;\n\tvar paren_level_stack_index40 = 0;\n\tvar paren_level_stack_index41\
    \ = 1;\n\tvar paren_level_stack_index42 = 1;\n\tvar paren_level_stack_index43\
    \ = 1;\n\tvar paren_level_stack_index44 = 1;\n\tvar paren_level_stack_index45\
    \ = 1;\n\tvar paren_level_stack_index46 = 1;\n\tvar paren_level_stack_index47\
    \ = 1;\n\tvar paren_level_stack_index48 = 1;\n\tvar paren_level_stack_index49\
    \ = 1;\n\tvar paren_level_stack_index50 = 1;\n\tvar paren_level_stack_index51\
    \ = 1;\n\tvar paren_level_stack_index52 = 1;\n\tvar paren_level_stack_index53\
    \ = 1;\n\tvar paren_level_stack_index54 = 1;\n\tvar paren_level_stack\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp623q37ux.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_level = 0;\n    var paren_level_max\
    \ = 0;\n    var paren_level_max_index = 0;\n    var paren_level_max_index2 = 0;\n\
    \    var paren_level_max_index3 = 0;\n    var paren_level_max_index4 = 0;\n  \
    \  var paren_level_max_index5 = 0;\n    var paren_level_max_index6 = 0;\n    var\
    \ paren_level_max_index7 = 0;\n    var paren_level_max_index8 = 0;\n    var paren_level_max_index9\
    \ = 0;\n    var paren_level_max_index10 = 0;\n    var paren_level_max_index11\
    \ = 0;\n    var paren_level_max_index12 = 0;\n    var paren_level_max_index13\
    \ = 0;\n    var paren_level_max_index14 = 0;\n    var paren_level_max_index15\
    \ = 0;\n    var paren_level_max_index16 = 0;\n    var paren_level_max_index17\
    \ = 0;\n    var paren_level_max_index18 = 0;\n    var paren_level_max_index19\
    \ = 0;\n    var paren_level_max_index20 = 0;\n    var paren_level_max_index21\
    \ = 0;\n    var paren_level_max_index22 = 0;\n    var paren_level_max_index23\
    \ = 0;\n    var paren_level_max_index24 = 0;\n    var paren_level_max_index25\
    \ = 0;\n    var paren_level_max_index26 = 0;\n    var paren_level_max_index27\
    \ = 0;\n    var paren_level_max_index28 = 0;\n    var paren_level_max_index29\
    \ = 0;\n    var paren_level_max_index30 = 0;\n    var paren_level_max_index31\
    \ = 0;\n    var paren_level_max_index32 = 0;\n    var paren_level_max_index33\
    \ = 0;\n    var paren_level_max_index34 = 0;\n    var paren_level_max_index35\
    \ = 0;\n    var paren_level_max_index36 = 0;\n    var paren_level_max_index37\
    \ = 0;\n    var paren_level_max_index38 = 0;\n    var paren_level_max_index39\
    \ = 0;\n    var paren_level_max_index40 = 0;\n    var paren_level_max_index41\
    \ = 1;\n    var paren_level_max_index42 = 1;\n    var paren_level_max_index43\
    \ = 1;\n    var paren_level_max_index44 = 1;\n    var paren_level_max_index45\
    \ = 1;\n    var paren_level_max_index46 = 1;\n    var paren_level_max_index47\
    \ = 1;\n    var paren_level_max_index48 = 1;\n    var paren_level_max_index49\
    \ = 1;\n    var paren_level_max_index50 = 1;\n    var paren_level_max_index51\
    \ = 1;\n    var paren_level_max_index52 = 1;\n    var paren_level_max_index53\
    \ = 1;\n    var paren_level_max_index54 = 1;\n    var paren_level_max_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp10f9gf_t.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_counter = 0;\n  var paren_level_counter_reset = 0;\n\
    \  var paren_level_counter_reset_index = 0;\n  var paren_level_counter_reset_index2\
    \ = 0;\n  var paren_level_counter_reset_index3 = 0;\n  var paren_level_counter_reset_index4\
    \ = 0;\n  var paren_level_counter_reset_index5 = 0;\n  var paren_level_counter_reset_index6\
    \ = 0;\n  var paren_level_counter_reset_index7 = 0;\n  var paren_level_counter_reset_index8\
    \ = 0;\n  var paren_level_counter_reset_index9 = 0;\n  var paren_level_counter_reset_index10\
    \ = 0;\n  var paren_level_counter_reset_index11 = 0;\n  var paren_level_counter_reset_index12\
    \ = 0;\n  var paren_level_counter_reset_index13 = 0;\n  var paren_level_counter_reset_index14\
    \ = 0;\n  var paren_level_counter_reset_index15 = 0;\n  var paren_level_counter_reset_index16\
    \ = 0;\n  var paren_level_counter_reset_index17 = 0;\n  var paren_level_counter_reset_index18\
    \ = 0;\n  var paren_level_counter_reset_index19 = 0;\n  var paren_level_counter_reset_index20\
    \ = 0;\n  var paren_level_counter_reset_index21 = 0;\n  var paren_level_counter_reset_index22\
    \ = 0;\n  var paren_level_counter_reset_index23 = 0;\n  var paren_level_counter_reset_index24\
    \ = 0;\n  var paren_level_counter_reset_index25 = 0;\n  var paren_level_counter_reset_index26\
    \ = 0;\n  var paren_level_counter_reset_index27 = 0;\n  var paren_level_counter_reset_index28\
    \ = 0;\n  var paren_level_counter_reset_index29 = 0;\n  var paren_level_counter_reset_index30\
    \ = 0;\n  var paren_level_counter_reset_index31 = 0;\n  var paren_level_counter_reset_index32\
    \ = 0;\n  var paren_level_counter_reset_index33 = 0;\n  var paren_level_counter_reset_index34\
    \ = 0;\n  var paren_level_counter_reset_index35 = 0;\n  var paren_level_counter_reset_index36\
    \ = 0;\n  var paren_level_counter_reset_index37 = 0;\n  var paren_level_counter_reset_index38\
    \ = 0;\n  var paren_level_counter_reset_index39 = 0;\n  var paren_level_counter_reset_index40\
    \ = 0;\n  var paren_level_counter_reset_index41 = 0;\n  var paren_level_counter_reset_index42\
    \ = 0;\n  var paren_level_counter_reset_index43 = 0;\n  var paren_level_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpii8ijf6g.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_count);\n    \
    \        paren_count++;\n        }else if(char == \")\"){\n            paren_count\
    \ = paren_stack.pop();\n        }else if(char == \" \"){\n            if(paren_count\
    \ > 0){\n                nested_parens.push(paren_level);\n            }\n   \
    \         paren_count = 0;\n            paren_level++;\n        }\n    }\n   \
    \ if(paren_count > 0){\n        nested_parens.push(paren_level);\n    }\n    return\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpydb1fnwr.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpydb1fnwr.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_stack = [];\n    var\
    \ paren_level_stacks = [];\n    var paren_level_stacks_len = 0;\n    var paren_level_stacks_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpisr3151y.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counter_stack =\
    \ [];\n    var paren_level_counter_reset = 0;\n    var paren_level_counter_reset_stack\
    \ = [];\n    var paren_level_counter_reset_counter = 0;\n    var paren_level_counter_reset_counter_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset = 0;\n    var paren_level_counter_reset_counter_reset_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter = 0;\n    var\
    \ paren_level_counter_reset_counter_reset_counter_stack = [];\n    var paren_level_counter_reset_counter_reset_counter_reset\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_stack =\
    \ [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter =\
    \ 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_stack\
    \ = [];\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0;\n    var paren_level_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphrw3eiug.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count2\
    \ = [];\n    var paren_level_stack_count3 = [];\n    var paren_level_stack_count4\
    \ = [];\n    var paren_level_stack_count5 = [];\n    var paren_level_stack_count6\
    \ = [];\n    var paren_level_stack_count7 = [];\n    var paren_level_stack_count8\
    \ = [];\n    var paren_level_stack_count9 = [];\n    var paren_level_stack_count10\
    \ = [];\n    var paren_level_stack_count11 = [];\n    var paren_level_stack_count12\
    \ = [];\n    var paren_level_stack_count13 = [];\n    var paren_level_stack_count14\
    \ = [];\n    var paren_level_stack_count15 = [];\n    var paren_level_stack_count16\
    \ = [];\n    var paren_level_stack_count17 = [];\n    var paren_level_stack_count18\
    \ = [];\n    var paren_level_stack_count19 = [];\n    var paren_level_stack_count20\
    \ = [];\n    var paren_level_stack_count21 = [];\n    var paren_level_stack_count22\
    \ = [];\n    var paren_level_stack_count23 = [];\n    var paren_level_stack_count24\
    \ = [];\n    var paren_level_stack_count25 = [];\n    var paren_level_stack_count26\
    \ = [];\n    var paren_level_stack_count27 = [];\n    var paren_level_stack_count28\
    \ = [];\n    var paren_level_stack_count29 = [];\n    var paren_level_stack_count30\
    \ = [];\n    var paren_level_stack_count31 = [];\n    var paren_level_stack_count32\
    \ = [];\n    var paren_level_stack_count33 = [];\n    var paren_level_stack_count34\
    \ = [];\n    var paren_level_stack_count35 = [];\n    var paren_level_stack_count36\
    \ = [];\n    var paren_level_stack_count37 = [];\n    var paren_level_stack_count38\
    \ = [];\n    var paren_level_stack_count39 = [];\n    var paren_level_stack_count40\
    \ = [];\n    var paren_level_stack_count41 = [];\n    var paren_level_stack_count42\
    \ = [];\n    var paren_level_stack_count43 = [];\n    var paren_level_stack_count44\
    \ = [];\n    var paren_level_stack_count45 = [];\n    var paren_level_stack_count46\
    \ = [];\n    var paren_level_stack_count47 = [];\n    var paren_level_stack_count48\
    \ = [];\n    var paren_level_stack_count49 = [];\n    var paren_level_stack_count50\
    \ = [];\n    var paren_level_stack_count51 = [];\n    var paren_level_stack_count52\
    \ = [];\n    var paren_level_stack_count53 = [];\n    var paren_level_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2cg7ipc9.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_paren_count\
    \ = 0;\n    var paren_level_stack_paren_count_index = 0;\n    var paren_level_stack_paren_count_string\
    \ = \"\";\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren_level_stack_paren_count_string_index\
    \ = 0;\n    var paren_level_stack_paren_count_string_index = 0;\n    var paren\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9g79r3jt.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string =\
    \ paren_string.replace(/\\s+$/g, \"\");\n  paren_string = paren_string.replace(/^\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/^\\s+$/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren_string.replace(/\\s+/g, \"\");\n  paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n  paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n  paren_string = paren\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9vtnzmwy.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  var paren_levels\
    \ = [];\n  var paren_nesting_levels = [];\n  var paren_levels_string = \"\";\n\
    \  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i] == \"(\"\
    ){\n      paren_stack.push(paren_level);\n      paren_level++;\n      paren_nesting++;\n\
    \      paren_levels.push(paren_nesting);\n      paren_nesting_levels.push(paren_nesting);\n\
    \      paren_levels_string += paren_string[i];\n    }else if(paren_string[i] ==\
    \ \")\"){\n      paren_level--;\n      paren_nesting--;\n      paren_levels.push(paren_nesting);\n\
    \      paren_nesting_levels.push(paren_nesting);\n      paren_levels_string +=\
    \ paren_string[i];\n    }else if(paren_string[i] == \" \"){\n      if(paren_stack.length\
    \ == 0){\n        paren_levels_string += paren_string[i];\n      }else{\n    \
    \    var current_level = paren_stack.pop();\n        var current_nesting = paren_nesting_levels.pop();\n\
    \        if(current_nesting > current_level){\n          paren_levels_string +=\
    \ paren_string[i];\n        }\n      }\n    }\n  }\n  return paren_levels;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  1,\n  0,\n  1,\n\
    \  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp79viz9q3.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp79viz9q3.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 1, 2,\n    3, 2, 1, 0, 1, 0, 1, 2,\n    3, 2, 1, 2, 1, 2, 1,\
    \ 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_levels_str = \"\";\n    var paren_levels_str_len = \"\"\
    ;\n    var paren_levels_str_len_reverse = \"\";\n    var paren_levels_str_len_total\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n    var paren_levels_str_len_total_reverse\
    \ = \"\";\n    var paren_levels_str_len_total_reverse = \"\";\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb8jctajv.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i]==\"(\"){\n\t\t\tparen_stack.push(paren_level.length);\n\
    \t\t\tparen_level.push(1);\n\t\t}\n\t\telse if(paren_string[i]==\")\"){\n\t\t\t\
    paren_level.pop();\n\t\t\tif(paren_level.length<nested_paren_count){\n\t\t\t\t\
    nested_paren_count = paren_level.length;\n\t\t\t}\n\t\t}\n\t}\n\treturn nested_paren_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7xrhz_z1.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7xrhz_z1.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_max = 0;\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_max = 0;\n    var paren_level_counter_max_max_string\
    \ = \"\";\n    var paren_level_counter_max_min = 0;\n    var paren_level_counter_max_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_max = 0;\n    var paren_level_counter_max_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min = 0;\n    var paren_level_counter_max_min_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_max = 0;\n    var paren_level_counter_max_min_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min = 0;\n    var paren_level_counter_max_min_min_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_max = 0;\n    var paren_level_counter_max_min_min_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min = 0;\n    var paren_level_counter_max_min_min_min_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min_max = 0;\n    var paren_level_counter_max_min_min_min_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min = 0;\n    var paren_level_counter_max_min_min_min_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min_max = 0;\n    var paren_level_counter_max_min_min_min_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min_min = 0;\n    var paren_level_counter_max_min_min_min_min_min_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min_min_max = 0;\n    var\
    \ paren_level_counter_max_min_min_min_min_min_max_string = \"\";\n    var paren_level_counter_max_min_min_min_min_min_min\
    \ = 0;\n    var paren_level_counter_max_min_min_min_min_min_string = \"\";\n \
    \   var paren_level_counter_max_min_min_min_min_min_max = 0;\n    var paren_level_counter_max_min_min_min_min_min_max_string\
    \ = \"\";\n    var paren_level_counter_max_min_min_min_min_min_min = 0;\n    var\
    \ paren_level_counter_max_min_min_min_min_min_min_string = \"\";\n    var paren_level_counter_max_min_min_min_min_min_min_max\
    \ = 0;\n    var paren_level_counter_max_min_min_min_min_min_min_max_string = \"\
    \";\n    var paren_level_counter_max_min_min_min_min_min_min_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9xktr63_.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var nested_paren_array = [];\n  var paren_stack\
    \ = [];\n  var paren_stack_array = [];\n  var paren_stack_array_index = 0;\n \
    \ var paren_stack_array_length = 0;\n  var paren_stack_array_max_index = 0;\n\
    \  var paren_stack_array_max_length = 0;\n  var paren_stack_array_max_value =\
    \ 0;\n  var paren_stack_array_max_count = 0;\n  var paren_stack_array_max_count_index\
    \ = 0;\n  var paren_stack_array_max_count_length = 0;\n  var paren_stack_array_max_count_value\
    \ = 0;\n  var paren_stack_array_max_count_count = 0;\n  var paren_stack_array_max_count_count_index\
    \ = 0;\n  var paren_stack_array_max_count_count_length = 0;\n  var paren_stack_array_max_count_count_value\
    \ = 0;\n  var paren_stack_array_max_count_count_count = 0;\n  var paren_stack_array_max_count_count_count_index\
    \ = 0;\n  var paren_stack_array_max_count_count_count_length = 0;\n  var paren_stack_array_max_count_count_count_value\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count = 0;\n  var paren_stack_array_max_count_count_count_count_index\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_length = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_value = 0;\n  var paren_stack_array_max_count_count_count_count_count\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_index = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_length = 0;\n  var paren_stack_array_max_count_count_count_count_value\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_count = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_index = 0;\n  var paren_stack_array_max_count_count_count_count_length\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_value = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_count = 0;\n  var paren_stack_array_max_count_count_count_count_index\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_length = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_value = 0;\n  var paren_stack_array_max_count_count_count_count_count\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_count_index = 0;\n\
    \  var paren_stack_array_max_count_count_count_count_length = 0;\n  var paren_stack_array_max_count_count_count_count_value\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_count = 0;\n  var\
    \ paren_stack_array_max_count_count_count_count_count_index = 0;\n  var paren_stack_array_max_count_count_count_count_count_length\
    \ = 0;\n  var paren_stack_array_max_count_count_count_count_count_value = 0;\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqw1pbhqq.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  var paren_levels_stack = [];\n  var paren_levels_stacks\
    \ = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack = [];\n  var\
    \ paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmitc6u9n.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_stack_string = \"\";\n\tvar paren_level_stack = [];\n\tvar\
    \ paren_level_stack_string = \"\";\n\tvar paren_level_stack_strings = [];\n\t\
    var paren_level_stack_strings_string = \"\";\n\tvar paren_level_stack_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_string = \"\";\n\tvar paren_level_stack_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_string = \"\";\n\tvar\
    \ paren_level_stack_strings_strings_strings_strings = [];\n\tvar paren_level_stack_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings = [];\n\
    \tvar paren_level_stack_strings_strings_strings_strings_strings_string = \"\"\
    ;\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings = [];\n\
    \tvar paren_level_stack_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_stack_strings_strings_strings_string\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbwr9k7g4.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_stack = [];\n    var\
    \ paren_level_stacks = [];\n    var paren_level_stacks_len = 0;\n    var paren_level_stacks_len_max\
    \ = 0;\n    var paren_level_stacks_len_max_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_max = 0;\n    var paren_level_stacks_len_max_min_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max = 0;\n    var paren_level_stacks_len_max_min_min_max_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_max_max = 0;\n    var paren_level_stacks_len_max_min_min_max_max_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_max_min_max = 0;\n    var\
    \ paren_level_stacks_len_max_min_min_max_max_min_min = 0;\n    var paren_level_stacks_len_max_min_min_max_min_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_min_max_max = 0;\n\
    \    var paren_level_stacks_len_max_min_min_max_min_max_min_min = 0;\n    var\
    \ paren_level_stacks_len_max_min_min_max_min_max_min_min = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max = 0;\n\
    \    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_max = 0;\n\
    \    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min = 0;\n\
    \    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max =\
    \ 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_min_max_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_min_max_min\
    \ = 0;\n    var paren_level_stacks_len_max_min_min_max_min_max_min_min_max_min_max_min_max_min\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa2714dys.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_levels = [];\n\tvar paren_level_counter\
    \ = 0;\n\tvar paren_level_counters = [];\n\tvar paren_level_counters_index = 0;\n\
    \tvar paren_level_counters_length = 0;\n\tvar paren_level_counters_max = 0;\n\t\
    var paren_level_counters_max_index = 0;\n\tvar paren_level_counters_max_length\
    \ = 0;\n\tvar paren_level_counters_max_count = 0;\n\tvar paren_level_counters_max_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_length = 0;\n\tvar paren_level_counters_max_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_index = 0;\n\tvar paren_level_counters_max_count_count_length\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count = 0;\n\tvar paren_level_counters_max_count_count_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_length = 0;\n\tvar paren_level_counters_max_count_count_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_index = 0;\n\tvar paren_level_counters_max_count_count_count_length\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_count = 0;\n\tvar paren_level_counters_max_count_count_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_length = 0;\n\tvar paren_level_counters_max_count_count_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_index = 0;\n\tvar paren_level_counters_max_count_count_count_length\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_count = 0;\n\tvar paren_level_counters_max_count_count_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_length = 0;\n\tvar paren_level_counters_max_count_count_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_index = 0;\n\tvar paren_level_counters_max_count_count_count_length\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_count = 0;\n\tvar paren_level_counters_max_count_count_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_length = 0;\n\tvar paren_level_counters_max_count_count_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_index = 0;\n\tvar paren_level_counters_max_count_count_count_length\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_count = 0;\n\tvar paren_level_counters_max_count_count_count_index\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_length = 0;\n\tvar paren_level_counters_max_count_count_count_count\
    \ = 0;\n\tvar paren_level_counters_max_count_count_count_index = 0;\n\tvar paren\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3q8zbin9.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  for(var i=0; i<paren_string.length; i++){\n\
    \    var char = paren_string[i];\n    if(char == \"(\"){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n      paren_levels.push(paren_stack);\n      paren_stacks.push(paren_stack);\n\
    \    }\n    else if(char == \")\"){\n      paren_level = paren_stack.pop();\n\
    \      paren_levels.push(paren_stack);\n    }\n    else if(char == \" \"){\n \
    \     if(paren_stack.length == 0){\n        nested_parens.push(paren_level);\n\
    \      }\n      else{\n        var paren_stack = paren_stacks[paren_stacks.length-1];\n\
    \        var paren_level = paren_stacks[paren_stacks.length-2];\n        nested_parens.push(paren_level);\n\
    \      }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_vl9u9_q.js:43:10)\n    at Object.<anonymous> (/tmp/tmp_vl9u9_q.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\
    \tvar c = paren_string[i];\n\t\tif(c == '('){\n\t\t\tparen_stack.push(level);\n\
    \t\t\tlevel++;\n\t\t}\n\t\telse if(c == ')'){\n\t\t\tlevel = paren_stack.pop();\n\
    \t\t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1w4f6l8_.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1w4f6l8_.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_max\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level_max = 0;\n\
    \    var paren_nesting_level_max_index = 0;\n    var paren_nesting_level_max_index2\
    \ = 0;\n    var paren_nesting_level_max_index3 = 0;\n    var paren_nesting_level_max_index4\
    \ = 0;\n    var paren_nesting_level_max_index5 = 0;\n    var paren_nesting_level_max_index6\
    \ = 0;\n    var paren_nesting_level_max_index7 = 0;\n    var paren_nesting_level_max_index8\
    \ = 0;\n    var paren_nesting_level_max_index9 = 0;\n    var paren_nesting_level_max_index10\
    \ = 0;\n    var paren_nesting_level_max_index11 = 0;\n    var paren_nesting_level_max_index12\
    \ = 0;\n    var paren_nesting_level_max_index13 = 0;\n    var paren_nesting_level_max_index14\
    \ = 0;\n    var paren_nesting_level_max_index15 = 0;\n    var paren_nesting_level_max_index16\
    \ = 0;\n    var paren_nesting_level_max_index17 = 0;\n    var paren_nesting_level_max_index18\
    \ = 0;\n    var paren_nesting_level_max_index19 = 0;\n    var paren_nesting_level_max_index20\
    \ = 0;\n    var paren_nesting_level_max_index21 = 0;\n    var paren_nesting_level_max_index22\
    \ = 0;\n    var paren_nesting_level_max_index23 = 0;\n    var paren_nesting_level_max_index24\
    \ = 0;\n    var paren_nesting_level_max_index25 = 0;\n    var paren_nesting_level_max_index26\
    \ = 0;\n    var paren_nesting_level_max_index27 = 0;\n    var paren_nesting_level_max_index28\
    \ = 0;\n    var paren_nesting_level_max_index29 = 0;\n    var paren_nesting_level_max_index30\
    \ = 0;\n    var paren_nesting_level_max_index31 = 0;\n    var paren_nesting_level_max_index32\
    \ = 0;\n    var paren_nesting_level_max_index33 = 0;\n    var paren_nesting_level_max_index34\
    \ = 0;\n    var paren_nesting_level_max_index35 = 0;\n    var paren_nesting_level_max_index36\
    \ = 0;\n    var paren_nesting_level_max_index37 = 0;\n    var paren_nesting_level_max_index38\
    \ = 0;\n    var paren_nesting_level_max_index39 = 0;\n    var paren_nesting_level_max_index40\
    \ = 0;\n    var paren_nesting_level_max_index41 = 1;\n    var paren_nesting_level_max_index42\
    \ = 1;\n    var paren_nesting_level_max_index43 = 1;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1740zcha.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(level);\n            level++;\n        } else if(char == \"\
    )\"){\n            level--;\n            if(level == 0){\n                paren_stack.pop();\n\
    \            }\n        }\n    }\n    return paren_stack;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpww7z9ao3.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpww7z9ao3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tvar paren_levels =\
    \ [];\n\tvar paren_level_stack = [];\n\tvar paren_level_stack_index = 0;\n\tvar\
    \ paren_level_stack_string = \"\";\n\tvar paren_level_stack_string_index = 0;\n\
    \tvar paren_level_stack_string_value = \"\";\n\tvar paren_level_stack_string_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_index = 0;\n\tvar paren_level_stack_string_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length = \"\";\n\t\
    var paren_level_stack_string_value_length_value_length_index = 0;\n\tvar paren_level_stack_string_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = \"\";\n\tvar paren_level_stack_string_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7re3vvoh.js:41\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max_count = 0;\n    var paren_level_max_count_index\
    \ = 0;\n    var paren_level_max_count_index2 = 0;\n    var paren_level_max_count_index3\
    \ = 0;\n    var paren_level_max_count_index4 = 0;\n    var paren_level_max_count_index5\
    \ = 0;\n    var paren_level_max_count_index6 = 0;\n    var paren_level_max_count_index7\
    \ = 0;\n    var paren_level_max_count_index8 = 0;\n    var paren_level_max_count_index9\
    \ = 0;\n    var paren_level_max_count_index10 = 0;\n    var paren_level_max_count_index11\
    \ = 0;\n    var paren_level_max_count_index12 = 0;\n    var paren_level_max_count_index13\
    \ = 0;\n    var paren_level_max_count_index14 = 0;\n    var paren_level_max_count_index15\
    \ = 0;\n    var paren_level_max_count_index16 = 0;\n    var paren_level_max_count_index17\
    \ = 0;\n    var paren_level_max_count_index18 = 0;\n    var paren_level_max_count_index19\
    \ = 0;\n    var paren_level_max_count_index20 = 0;\n    var paren_level_max_count_index21\
    \ = 0;\n    var paren_level_max_count_index22 = 0;\n    var paren_level_max_count_index23\
    \ = 0;\n    var paren_level_max_count_index24 = 0;\n    var paren_level_max_count_index25\
    \ = 0;\n    var paren_level_max_count_index26 = 0;\n    var paren_level_max_count_index27\
    \ = 0;\n    var paren_level_max_count_index28 = 0;\n    var paren_level_max_count_index29\
    \ = 0;\n    var paren_level_max_count_index30 = 0;\n    var paren_level_max_count_index31\
    \ = 0;\n    var paren_level_max_count_index32 = 0;\n    var paren_level_max_count_index33\
    \ = 0;\n    var paren_level_max_count_index34 = 0;\n    var paren_level_max_count_index35\
    \ = 0;\n    var paren_level_max_count_index36 = 0;\n    var paren_level_max_count_index37\
    \ = 0;\n    var paren_level_max_count_index38 = 0;\n    var paren_level_max_count_index39\
    \ = 0;\n    var paren_level_max_count_index40 = 0;\n    var paren_level_max_count_index41\
    \ = 0;\n    var paren_level_max_count_index42 = 0;\n    var paren_level_max_count_index43\
    \ = 0;\n    var paren_level_max_count_index44 = 0;\n    var paren_level_max_count_index45\
    \ = 0;\n    var paren_level_max_count_index46 = 0;\n    var paren_level_max_count_index47\
    \ = 0;\n    var paren_level_max_count_index48 = 0;\n    var paren_level_max_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp65eifkb.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_level++;\n        }else if(char == ')'){\n            paren_level =\
    \ paren_stack.pop();\n        }\n        if(paren_level > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  1,\n  2,\n  3,\n  2,\n  1,\n  1,\n  1,\n  2,\n  3,\n  2,\n\
    \  1,\n  2,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpaciaqk9k.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaciaqk9k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 1, 2,\n    3, 2, 1, 1, 1, 2, 3,\n    2, 1, 2, 1, 2, 1\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level.length);\n            paren_level.push(1);\n\
    \        }\n        else if(char == \")\"){\n            paren_level.pop();\n\
    \            paren_stack.push(paren_level.length);\n        }\n        else if(char\
    \ == \" \"){\n            if(paren_stack[paren_stack.length-1] == paren_level.length){\n\
    \                nested_paren_count++;\n            }\n        }\n    }\n    return\
    \ nested_paren_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9_xgd6d5.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9_xgd6d5.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_xa2zn03.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_max_level = 0;\n    var paren_max_level_char\
    \ = '';\n    var paren_max_level_char_length = 0;\n    var paren_max_level_char_length_count\
    \ = 0;\n    var paren_max_level_char_length_count_index = 0;\n    var paren_max_level_char_length_count_index2\
    \ = 0;\n    var paren_max_level_char_length_count_index3 = 0;\n    var paren_max_level_char_length_count_index4\
    \ = 0;\n    var paren_max_level_char_length_count_index5 = 0;\n    var paren_max_level_char_length_count_index6\
    \ = 0;\n    var paren_max_level_char_length_count_index7 = 0;\n    var paren_max_level_char_length_count_index8\
    \ = 0;\n    var paren_max_level_char_length_count_index9 = 0;\n    var paren_max_level_char_length_count_index10\
    \ = 0;\n    var paren_max_level_char_length_count_index11 = 0;\n    var paren_max_level_char_length_count_index12\
    \ = 0;\n    var paren_max_level_char_length_count_index13 = 0;\n    var paren_max_level_char_length_count_index14\
    \ = 0;\n    var paren_max_level_char_length_count_index15 = 0;\n    var paren_max_level_char_length_count_index16\
    \ = 0;\n    var paren_max_level_char_length_count_index17 = 0;\n    var paren_max_level_char_length_count_index18\
    \ = 0;\n    var paren_max_level_char_length_count_index19 = 0;\n    var paren_max_level_char_length_count_index20\
    \ = 0;\n    var paren_max_level_char_length_count_index21 = 0;\n    var paren_max_level_char_length_count_index22\
    \ = 0;\n    var paren_max_level_char_length_count_index23 = 0;\n    var paren_max_level_char_length_count_index24\
    \ = 0;\n    var paren_max_level_char_length_count_index25 = 0;\n    var paren_max_level_char_length_count_index26\
    \ = 0;\n    var paren_max_level_char_length_count_index27 = 0;\n    var paren_max_level_char_length_count_index28\
    \ = 0;\n    var paren_max_level_char_length_count_index29 = 0;\n    var paren_max_level_char_length_count_index30\
    \ = 0;\n    var paren_max_level_char_length_count_index31 = 0;\n    var paren_max_level_char_length_count_index32\
    \ = 0;\n    var paren_max_level_char_length_count_index33 = 0;\n    var paren_max_level_char_length_count_index34\
    \ = 0;\n    var paren_max_level_char_length_count_index35 = 0;\n    var paren_max_level_char_length_count_index36\
    \ = 0;\n    var paren_max_level_char_length_count_index37 = 0;\n    var paren_max_level_char_length_count_index38\
    \ = 0;\n    var paren_max_level_char_length_count_index39 = 0;\n    var paren_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyc5ownho.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}else if(paren_string[i] == \")\"){\n\t\t\tparen_level--;\n\
    \t\t\tif(paren_level == 0){\n\t\t\t\tparen_nesting++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return paren_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf_8pg5x5.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf_8pg5x5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_levels = [];\n    var paren_levels_stack = [];\n    var\
    \ paren_levels_stack_index = 0;\n    var paren_levels_stack_indexes = [];\n  \
    \  var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_indexes\
    \ = [];\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_index\
    \ = 0;\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyqj13276.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var c = paren_string[i];\n        if(c == '('){\n           \
    \ nested_paren_stack.push(nested_paren_level);\n            nested_paren_level++;\n\
    \        }\n        else if(c == ')'){\n            var current_level = nested_paren_stack.pop();\n\
    \            if(current_level > nested_paren_level){\n                nested_paren_level\
    \ = current_level;\n            }\n        }\n    }\n    return nested_paren_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_skn0bq9.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_skn0bq9.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_pointer\
    \ = 0;\n    var paren_level_stack_pointer_max = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index2 = 0;\n    var paren_level_stack_pointer_max_index3\
    \ = 0;\n    var paren_level_stack_pointer_max_index4 = 0;\n    var paren_level_stack_pointer_max_index5\
    \ = 0;\n    var paren_level_stack_pointer_max_index6 = 0;\n    var paren_level_stack_pointer_max_index7\
    \ = 0;\n    var paren_level_stack_pointer_max_index8 = 0;\n    var paren_level_stack_pointer_max_index9\
    \ = 0;\n    var paren_level_stack_pointer_max_index10 = 0;\n    var paren_level_stack_pointer_max_index11\
    \ = 0;\n    var paren_level_stack_pointer_max_index12 = 0;\n    var paren_level_stack_pointer_max_index13\
    \ = 0;\n    var paren_level_stack_pointer_max_index14 = 0;\n    var paren_level_stack_pointer_max_index15\
    \ = 0;\n    var paren_level_stack_pointer_max_index16 = 0;\n    var paren_level_stack_pointer_max_index17\
    \ = 0;\n    var paren_level_stack_pointer_max_index18 = 0;\n    var paren_level_stack_pointer_max_index19\
    \ = 0;\n    var paren_level_stack_pointer_max_index20 = 0;\n    var paren_level_stack_pointer_max_index21\
    \ = 0;\n    var paren_level_stack_pointer_max_index22 = 0;\n    var paren_level_stack_pointer_max_index23\
    \ = 0;\n    var paren_level_stack_pointer_max_index24 = 0;\n    var paren_level_stack_pointer_max_index25\
    \ = 0;\n    var paren_level_stack_pointer_max_index26 = 0;\n    var paren_level_stack_pointer_max_index27\
    \ = 0;\n    var paren_level_stack_pointer_max_index28 = 0;\n    var paren_level_stack_pointer_max_index29\
    \ = 0;\n    var paren_level_stack_pointer_max_index30 = 0;\n    var paren_level_stack_pointer_max_index31\
    \ = 0;\n    var paren_level_stack_pointer_max_index32 = 0;\n    var paren_level_stack_pointer_max_index33\
    \ = 0;\n    var paren_level_stack_pointer_max_index34 = 0;\n    var paren_level_stack_pointer_max_index35\
    \ = 0;\n    var paren_level_stack_pointer_max_index36 = 0;\n    var paren_level_stack_pointer_max_index37\
    \ = 0;\n    var paren_level_stack_pointer_max_index38 = 0;\n    var paren_level_stack_pointer_max_index39\
    \ = 0;\n    var paren_level_stack_pointer_max_index40 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpicdgj47t.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char == \"(\"){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(char == \")\"){\n    \
    \        paren_count = paren_stack.pop();\n        }\n        else if(char ==\
    \ \" \"){\n            if(paren_count > 0){\n                nested_parens.push(paren_level);\n\
    \            }\n            paren_count = 0;\n            paren_level++;\n   \
    \     }\n    }\n    if(paren_count > 0){\n        nested_parens.push(paren_level);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpe6717jpo.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe6717jpo.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_level_count = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsb_ddmpe.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counter_index =\
    \ 0;\n    var paren_level_counter_max = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_index = 0;\n    var paren_level_counter_max_index\
    \ = 0;\n    var paren_level_counter_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt4nsb440.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  for (var i = 0; i <\
    \ paren_string.length; i++){\n    if (paren_string[i] == \"(\"){\n      paren_level++;\n\
    \    }\n    else if (paren_string[i] == \")\"){\n      paren_level--;\n    }\n\
    \    else if (paren_level == 0){\n      nested_parens.push(paren_count);\n   \
    \   paren_count = 0;\n    }\n    paren_count++;\n  }\n  return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  7,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpif5s407n.js:31:10)\n    at Object.<anonymous> (/tmp/tmpif5s407n.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 7, 3\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_index = 0;\n    var paren_level_counters_length\
    \ = 0;\n    var paren_level_counters_max = 0;\n    var paren_level_counters_max_index\
    \ = 0;\n    var paren_level_counters_max_length = 0;\n    var paren_level_counters_max_value\
    \ = 0;\n    var paren_level_counters_max_value_length = 0;\n    var paren_level_counters_max_value_counter\
    \ = 0;\n    var paren_level_counters_max_value_counter_index = 0;\n    var paren_level_counters_max_value_counter_length\
    \ = 0;\n    var paren_level_counters_max_value_counter_value = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter_value_index\
    \ = 0;\n    var paren_level_counters_max_value_counter_value_index = 0;\n    var\
    \ paren_level_counters_max_value_counter_value_index = 0;\n    var paren_level_counters_max_value_counter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk3_524cf.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ === '('){\n            paren_nesting++;\n        }else if(char === ')'){\n \
    \           paren_nesting--;\n        }\n        if(paren_nesting === 0){\n  \
    \          nested_parens.push(paren_level);\n        }\n        paren_level++;\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n\
    \  12,\n  13,\n  15,\n  16,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpw_c1je5s.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw_c1je5s.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_levels_string = \"\";\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(paren_nesting);\n            paren_nesting++;\n   \
    \     }\n        else if(char == \")\"){\n            paren_nesting = paren_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_nesting == 0){\n\
    \                paren_levels.push(paren_level);\n                paren_level\
    \ = 0;\n            }\n            else{\n                paren_level++;\n   \
    \         }\n        }\n    }\n    for(var i=0; i<paren_levels.length; i++){\n\
    \        paren_levels_string += paren_levels[i] + \", \";\n    }\n    return paren_levels_string;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0, 0, 0, '\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp94bdrzt8.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp94bdrzt8.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0, 0, 0,\
    \ ',\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_len2 = 0;\n    var paren_level_stack_len3 = 0;\n\
    \    var paren_level_stack_len4 = 0;\n    var paren_level_stack_len5 = 0;\n  \
    \  var paren_level_stack_len6 = 0;\n    var paren_level_stack_len7 = 0;\n    var\
    \ paren_level_stack_len8 = 0;\n    var paren_level_stack_len9 = 0;\n    var paren_level_stack_len10\
    \ = 0;\n    var paren_level_stack_len11 = 0;\n    var paren_level_stack_len12\
    \ = 0;\n    var paren_level_stack_len13 = 0;\n    var paren_level_stack_len14\
    \ = 0;\n    var paren_level_stack_len15 = 0;\n    var paren_level_stack_len16\
    \ = 0;\n    var paren_level_stack_len17 = 0;\n    var paren_level_stack_len18\
    \ = 0;\n    var paren_level_stack_len19 = 0;\n    var paren_level_stack_len20\
    \ = 0;\n    var paren_level_stack_len21 = 0;\n    var paren_level_stack_len22\
    \ = 0;\n    var paren_level_stack_len23 = 0;\n    var paren_level_stack_len24\
    \ = 0;\n    var paren_level_stack_len25 = 0;\n    var paren_level_stack_len26\
    \ = 0;\n    var paren_level_stack_len27 = 0;\n    var paren_level_stack_len28\
    \ = 0;\n    var paren_level_stack_len29 = 0;\n    var paren_level_stack_len30\
    \ = 0;\n    var paren_level_stack_len31 = 0;\n    var paren_level_stack_len32\
    \ = 0;\n    var paren_level_stack_len33 = 0;\n    var paren_level_stack_len34\
    \ = 0;\n    var paren_level_stack_len35 = 0;\n    var paren_level_stack_len36\
    \ = 0;\n    var paren_level_stack_len37 = 0;\n    var paren_level_stack_len38\
    \ = 0;\n    var paren_level_stack_len39 = 0;\n    var paren_level_stack_len40\
    \ = 0;\n    var paren_level_stack_len41 = 0;\n    var paren_level_stack_len42\
    \ = 0;\n    var paren_level_stack_len43 = 0;\n    var paren_level_stack_len44\
    \ = 0;\n    var paren_level_stack_len45 = 0;\n    var paren_level_stack_len46\
    \ = 0;\n    var paren_level_stack_len47 = 0;\n    var paren_level_stack_len48\
    \ = 0;\n    var paren_level_stack_len49 = 0;\n    var paren_level_stack_len50\
    \ = 0;\n    var paren_level_stack_len51 = 0;\n    var paren_level_stack_len52\
    \ = 0;\n    var paren_level_stack_len53 = 0;\n    var paren_level_stack_len54\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp__lgzwu1.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_stack = [];\n    var\
    \ paren_level_stacks = [];\n    var paren_level_stacks_len = 0;\n    var paren_level_stacks_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_len = 0;\n    var paren_level_stacks_lens_lens\
    \ = [];\n    var paren_level_stacks_lens_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpisr3151y.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_levels = [];\n\tvar paren_level_counter\
    \ = 0;\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i]\
    \ == \"(\"){\n\t\t\tparen_level++;\n\t\t\tparen_levels[paren_level_counter] =\
    \ paren_level;\n\t\t\tparen_level_counter++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == \")\"){\n\t\t\tparen_level--;\n\t\t\tparen_level_counter--;\n\t\t}\n\t}\n\
    \tfor(var i = 0; i < paren_levels.length; i++){\n\t\tif(paren_levels[i] > 0){\n\
    \t\t\tnested_parens.push(paren_levels[i]);\n\t\t}\n\t}\n\treturn nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpumgv3u3s.js:35:10)\n    at Object.<anonymous> (/tmp/tmpumgv3u3s.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyl9rbxuu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyl9rbxuu.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tvar paren_levels_string = \"\";\n\tvar paren_level_counter = 0;\n\t\
    var paren_level_counter_array = [];\n\tvar paren_level_counter_array_string =\
    \ \"\";\n\tvar paren_level_counter_array_index = 0;\n\tvar paren_level_counter_array_index_string\
    \ = \"\";\n\tvar paren_level_counter_array_index_counter = 0;\n\tvar paren_level_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_string = \"\";\n\t\
    var paren_level_counter_array_index_counter_array_index = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array\
    \ = [];\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index\
    \ = 0;\n\tvar paren_level_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter_array_index_counter\
    \ = 0;\n\tvar paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdoziyai9.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i]==\"(\"){\n\t\t\tparen_stack.push(paren_level);\n\t\t\t\
    paren_level++;\n\t\t}else if(paren_string[i]==\")\"){\n\t\t\tparen_level--;\n\t\
    \t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjrm0bjum.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjrm0bjum.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nestings = [];\n    var paren_levels_string = \"\";\n \
    \   var paren_nestings_string = \"\";\n    var paren_levels_string_reversed =\
    \ \"\";\n    var paren_nestings_string_reversed = \"\";\n    var paren_levels_string_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed = \"\";\n    var paren_levels_string_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed = \"\";\n\
    \    var paren_levels_string_reversed_reversed_reversed_reversed = \"\";\n   \
    \ var paren_nestings_string_reversed_reversed_reversed_reversed = \"\";\n    var\
    \ paren_levels_string_reversed_reversed_reversed_reversed_reversed = \"\";\n \
    \   var paren_nestings_string_reversed_reversed_reversed_reversed_reversed = \"\
    \";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpykkgk4yo.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nesting_levels = [];\n    var paren_levels_string = \"\"\
    ;\n    var paren_nesting_levels_string = \"\";\n    var paren_levels_string_index\
    \ = 0;\n    var paren_nesting_levels_string_index = 0;\n    var paren_level_counter\
    \ = 0;\n    var paren_nesting_level_counter = 0;\n    var paren_level_counter_string\
    \ = \"\";\n    var paren_nesting_level_counter_string = \"\";\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\n    var paren_nesting_level_counter_string_index = 0;\n    var paren_level_counter_string_index\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp72dqparo.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_level\
    \ = 0;\n  var paren_stack_max = 0;\n  var paren_stack_max_index = 0;\n  var paren_stack_max_level\
    \ = 0;\n  var paren_stack_max_level_char = '';\n  var paren_stack_max_level_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length = 0;\n  var paren_stack_max_level_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char = '';\n  var paren_stack_max_level_char_length_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length = 0;\n  var paren_stack_max_level_char_length_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char = '';\n  var\
    \ paren_stack_max_level_char_length_char_length_char_index = 0;\n  var paren_stack_max_level_char_length_char_length_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_index = 0;\n\
    \  var paren_stack_max_level_char_length_char_length_char_length_char = '';\n\
    \  var paren_stack_max_level_char_length_char_length_char_length_char_index =\
    \ 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char\
    \ = '';\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char\
    \ = '';\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = '';\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0;\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0h26mjjm.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  var paren_stack_pointer = 0;\n  var paren_stack_top = 0;\n  var paren_stack_max\
    \ = 0;\n  var paren_stack_max_index = 0;\n  var paren_stack_max_count = 0;\n \
    \ var paren_stack_max_count_index = 0;\n  var paren_stack_max_count_count = 0;\n\
    \  var paren_stack_max_count_index2 = 0;\n  var paren_stack_max_count_index2 =\
    \ 0;\n  var paren_stack_max_count_index3 = 0;\n  var paren_stack_max_count_index3\
    \ = 0;\n  var paren_stack_max_count_index4 = 0;\n  var paren_stack_max_count_index4\
    \ = 0;\n  var paren_stack_max_count_index5 = 0;\n  var paren_stack_max_count_index5\
    \ = 0;\n  var paren_stack_max_count_index6 = 0;\n  var paren_stack_max_count_index6\
    \ = 0;\n  var paren_stack_max_count_index7 = 0;\n  var paren_stack_max_count_index7\
    \ = 0;\n  var paren_stack_max_count_index8 = 0;\n  var paren_stack_max_count_index8\
    \ = 0;\n  var paren_stack_max_count_index9 = 0;\n  var paren_stack_max_count_index9\
    \ = 0;\n  var paren_stack_max_count_index10 = 0;\n  var paren_stack_max_count_index10\
    \ = 0;\n  var paren_stack_max_count_index11 = 0;\n  var paren_stack_max_count_index11\
    \ = 0;\n  var paren_stack_max_count_index12 = 0;\n  var paren_stack_max_count_index12\
    \ = 0;\n  var paren_stack_max_count_index13 = 0;\n  var paren_stack_max_count_index13\
    \ = 0;\n  var paren_stack_max_count_index14 = 0;\n  var paren_stack_max_count_index14\
    \ = 0;\n  var paren_stack_max_count_index15 = 0;\n  var paren_stack_max_count_index15\
    \ = 0;\n  var paren_stack_max_count_index16 = 0;\n  var paren_stack_max_count_index16\
    \ = 0;\n  var paren_stack_max_count_index17 = 0;\n  var paren_stack_max_count_index17\
    \ = 0;\n  var paren_stack_max_count_index18 = 0;\n  var paren_stack_max_count_index18\
    \ = 0;\n  var paren_stack_max_count_index19 = 0;\n  var paren_stack_max_count_index19\
    \ = 0;\n  var paren_stack_max_count_index20 = 0;\n  var paren_stack_max_count_index20\
    \ = 0;\n  var paren_stack_max_count_index21 = 0;\n  var paren_stack_max_count_index21\
    \ = 0;\n  var paren_stack_max_count_index22 = 0;\n  var paren_stack_max_count_index22\
    \ = 0;\n  var paren_stack_max_count_index23 = 0;\n  var paren_stack_max_count_index23\
    \ = 0;\n  var paren_stack_max_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0siehs1i.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_current_index = 0;\n    var paren_level_stack_current_string\
    \ = \"\";\n    var paren_level_stack_current_length = 0;\n    var paren_level_stack_current_index\
    \ = 0;\n    var paren_level_stack_current_string = \"\";\n    var paren_level_stack_current_length\
    \ = 0;\n    var paren_level_stack_\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkiegkekj.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_value\
    \ = \"\";\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack_string_value_index\
    \ = 0;\n    var paren_level_stack_string_value_index = 0;\n    var paren_level_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjvhg1ehe.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_groups = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group.length == 0){\n            continue;\n\
    \        }\n        var paren_group_split = paren_group.split(\"\");\n       \
    \ var paren_group_split_length = paren_group_split.length;\n        var paren_group_split_index\
    \ = 0;\n        while(paren_group_split_index < paren_group_split_length){\n \
    \           var paren_group_char = paren_group_split[paren_group_split_index];\n\
    \            if(paren_group_char == \"(\"){\n                nested_paren_level++;\n\
    \            }else if(paren_group_char == \")\"){\n                nested_paren_level--;\n\
    \            }\n            paren_group_split_index++;\n        }\n        nested_paren_groups.push(nested_paren_level);\n\
    \    }\n    return nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpt9anxz0o.js:37:10)\n    at Object.<anonymous> (/tmp/tmpt9anxz0o.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var nested_paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack = [];\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n\
    \    var paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var\
    \ paren_stack_string = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string\
    \ = \"\";\n    var paren_stack_string = \"\";\n    var paren_stack_string = \"\
    \";\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptb5w2ev_.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level);\n    \
    \        paren_level_stack.push(paren_level);\n            paren_level++;\n  \
    \      }\n        else if(char == \")\"){\n            paren_level = paren_level_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_stack.length\
    \ > 0){\n                paren_level = paren_stack.pop();\n            }\n   \
    \     }\n        else if(char == \"(\"){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }\n        else if(char == \")\"){\n    \
    \        paren_level = paren_level_stack.pop();\n        }\n        else if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level = paren_level_stack.pop();\n\
    \        }\n        else if(char == \"[\"){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }\n        else if(char == \"]\"){\n    \
    \        paren_level = paren_level_stack.pop();\n        }\n        else if(char\
    \ == \"{\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \"}\"){\n            paren_level = paren_level_stack.pop();\n\
    \        }\n        else if(char == \"<\"){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }\n        else if(char == \">\"){\n    \
    \        paren_level = paren_level_stack.pop();\n        }\n        else if(char\
    \ == \"{\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \"}\"){\n            paren_level = paren_level_stack.pop();\n\
    \        }\n        else if(char == \"(\"){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }\n        else if(char == \")\"){\n    \
    \        paren_level = paren_level_stack.pop();\n        }\n        else if(char\
    \ == \"[\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \"]\"){\n            paren_level = paren_level_stack.pop();\n\
    \        }\n        else if(char == \"{\"){\n            paren_stack.push(paren_level);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgphz2o6i.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    for(var\
    \ i = 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char === \"(\"){\n            paren_level_stack.push(paren_level);\n\
    \            paren_level++;\n        }else if(char === \")\"){\n            paren_level\
    \ = paren_level_stack.pop();\n        }\n        nested_paren_levels.push(paren_level);\n\
    \    }\n    return nested_paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbqvo5xqw.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbqvo5xqw.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgmvf_ndt.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_stack_string = \"\";\n\tvar paren_level_string = \"\";\n\t\
    var paren_level_counter = 0;\n\tvar paren_level_counter_string = \"\";\n\tvar\
    \ paren_level_counter_max = 0;\n\tvar paren_level_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\tvar\
    \ paren_level_counter_max_counter_max_counter_max_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprl9srgc6.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i]==\"(\"){\n      paren_level++;\n    }\n    if(paren_string[i]==\"\
    )\"){\n      paren_level--;\n    }\n    if(paren_level<0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm3sw6niu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm3sw6niu.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar nested_parens = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_char;\n\tfor(var i=0;i<paren_string.length;i++){\n\t\tparen_char\
    \ = paren_string[i];\n\t\tif(paren_char == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}else if(paren_char == \")\"){\n\t\t\tparen_level =\
    \ paren_stack.pop();\n\t\t}\n\t\tnested_parens.push(paren_level);\n\t}\n\treturn\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphf4iixjp.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmphf4iixjp.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n\
    \    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var\
    \ paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var\
    \ paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var\
    \ paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var\
    \ paren_levels_string = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_levels_index = 0;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_qvc2ifl.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_level++;\n        }else if(char == ')'){\n            paren_level =\
    \ paren_stack.pop();\n        }\n        paren_array.push(paren_level);\n    }\n\
    \    return paren_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpx3b_ewm7.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx3b_ewm7.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_stack_level++;\n        }\n        else if(c == ')'){\n            paren_stack_level--;\n\
    \            if(paren_stack_level == 0){\n                nested_parens.push(paren_stack.pop());\n\
    \            }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmprzb08ffb.js:32:10)\n    at Object.<anonymous> (/tmp/tmprzb08ffb.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(paren_count);\n            paren_count++;\n       \
    \ }else if(char == \")\"){\n            paren_count = paren_stack.pop();\n   \
    \     }else if(char == \" \"){\n            if(paren_stack_pointer > 0){\n   \
    \             nested_parens.push(paren_level);\n            }\n            paren_level++;\n\
    \        }\n        paren_stack_pointer++;\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmppa5pqhte.js:35:10)\n    at Object.<anonymous> (/tmp/tmppa5pqhte.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_stack = [];\n    var paren_levels_stack_index =\
    \ 0;\n    var paren_levels_stack_index2 = 0;\n    var paren_levels_stack_index3\
    \ = 0;\n    var paren_levels_stack_index4 = 0;\n    var paren_levels_stack_index5\
    \ = 0;\n    var paren_levels_stack_index6 = 0;\n    var paren_levels_stack_index7\
    \ = 0;\n    var paren_levels_stack_index8 = 0;\n    var paren_levels_stack_index9\
    \ = 0;\n    var paren_levels_stack_index10 = 0;\n    var paren_levels_stack_index11\
    \ = 0;\n    var paren_levels_stack_index12 = 0;\n    var paren_levels_stack_index13\
    \ = 0;\n    var paren_levels_stack_index14 = 0;\n    var paren_levels_stack_index15\
    \ = 0;\n    var paren_levels_stack_index16 = 0;\n    var paren_levels_stack_index17\
    \ = 0;\n    var paren_levels_stack_index18 = 0;\n    var paren_levels_stack_index19\
    \ = 0;\n    var paren_levels_stack_index20 = 0;\n    var paren_levels_stack_index21\
    \ = 0;\n    var paren_levels_stack_index22 = 0;\n    var paren_levels_stack_index23\
    \ = 0;\n    var paren_levels_stack_index24 = 0;\n    var paren_levels_stack_index25\
    \ = 0;\n    var paren_levels_stack_index26 = 0;\n    var paren_levels_stack_index27\
    \ = 0;\n    var paren_levels_stack_index28 = 0;\n    var paren_levels_stack_index29\
    \ = 0;\n    var paren_levels_stack_index30 = 0;\n    var paren_levels_stack_index31\
    \ = 0;\n    var paren_levels_stack_index32 = 0;\n    var paren_levels_stack_index33\
    \ = 0;\n    var paren_levels_stack_index34 = 0;\n    var paren_levels_stack_index35\
    \ = 0;\n    var paren_levels_stack_index36 = 0;\n    var paren_levels_stack_index37\
    \ = 0;\n    var paren_levels_stack_index38 = 0;\n    var paren_levels_stack_index39\
    \ = 0;\n    var paren_levels_stack_index40 = 0;\n    var paren_levels_stack_index41\
    \ = 1;\n    var paren_levels_stack_index42 = 1;\n    var paren_levels_stack_index43\
    \ = 1;\n    var paren_levels_stack_index44 = 1;\n    var paren_levels_stack_index45\
    \ = 1;\n    var paren_levels_stack_index46 = 1;\n    var paren_levels_stack_index47\
    \ = 1;\n    var paren_levels_stack_index48 = 1;\n    var paren\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa9h46ut4.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level.length);\n\
    \t\t\tparen_level.push(level);\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\
    \t\t\tvar level = paren_level.pop();\n\t\t\tif(!paren_stack.length){\n\t\t\t\t\
    return paren_level;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvar parent_level = paren_stack.pop();\n\
    \t\t\t\tif(parent_level < level){\n\t\t\t\t\treturn paren_level;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn paren_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpicsruju7.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpicsruju7.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_levels\
    \ = [];\n\tparen_string = paren_string.trim();\n\tvar paren_stack = [];\n\tvar\
    \ paren_level = 0;\n\tvar paren_level_count = 0;\n\tvar paren_level_max_count\
    \ = 0;\n\tvar paren_level_max_count_index = 0;\n\tvar paren_level_max_count_index2\
    \ = 0;\n\tvar paren_level_max_count_index3 = 0;\n\tvar paren_level_max_count_index4\
    \ = 0;\n\tvar paren_level_max_count_index5 = 0;\n\tvar paren_level_max_count_index6\
    \ = 0;\n\tvar paren_level_max_count_index7 = 0;\n\tvar paren_level_max_count_index8\
    \ = 0;\n\tvar paren_level_max_count_index9 = 0;\n\tvar paren_level_max_count_index10\
    \ = 0;\n\tvar paren_level_max_count_index11 = 0;\n\tvar paren_level_max_count_index12\
    \ = 0;\n\tvar paren_level_max_count_index13 = 0;\n\tvar paren_level_max_count_index14\
    \ = 0;\n\tvar paren_level_max_count_index15 = 0;\n\tvar paren_level_max_count_index16\
    \ = 0;\n\tvar paren_level_max_count_index17 = 0;\n\tvar paren_level_max_count_index18\
    \ = 0;\n\tvar paren_level_max_count_index19 = 0;\n\tvar paren_level_max_count_index20\
    \ = 0;\n\tvar paren_level_max_count_index21 = 0;\n\tvar paren_level_max_count_index22\
    \ = 0;\n\tvar paren_level_max_count_index23 = 0;\n\tvar paren_level_max_count_index24\
    \ = 0;\n\tvar paren_level_max_count_index25 = 0;\n\tvar paren_level_max_count_index26\
    \ = 0;\n\tvar paren_level_max_count_index27 = 0;\n\tvar paren_level_max_count_index28\
    \ = 0;\n\tvar paren_level_max_count_index29 = 0;\n\tvar paren_level_max_count_index30\
    \ = 0;\n\tvar paren_level_max_count_index31 = 0;\n\tvar paren_level_max_count_index32\
    \ = 0;\n\tvar paren_level_max_count_index33 = 0;\n\tvar paren_level_max_count_index34\
    \ = 0;\n\tvar paren_level_max_count_index35 = 0;\n\tvar paren_level_max_count_index36\
    \ = 0;\n\tvar paren_level_max_count_index37 = 0;\n\tvar paren_level_max_count_index38\
    \ = 0;\n\tvar paren_level_max_count_index39 = 0;\n\tvar paren_level_max_count_index40\
    \ = 0;\n\tvar paren_level_max_count_index41 = 0;\n\tvar paren_level_max_count_index42\
    \ = 0;\n\tvar paren_level_max_count_index43 = 0;\n\tvar paren_level_max_count_index44\
    \ = 0;\n\tvar paren_level_max_count_index45 = 0;\n\tvar paren_level_max_count_index46\
    \ = 0;\n\tvar paren_level_max_count_index47 = 0;\n\tvar paren_level_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoc05evwe.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_array = [];\n  \
    \  var paren_array = paren_string.split(\" \");\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        if(paren_array[i].indexOf(\"(\") > -1){\n            nested_paren_count\
    \ += 1;\n            if(nested_paren_count == nested_paren_level){\n         \
    \       nested_paren_array.push(nested_paren_count);\n            }\n        }\n\
    \        else if(paren_array[i].indexOf(\")\") > -1){\n            nested_paren_count\
    \ -= 1;\n            if(nested_paren_count < 0){\n                nested_paren_array.push(nested_paren_count);\n\
    \            }\n        }\n    }\n    return nested_paren_array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvz688vfj.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvz688vfj.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_len_count = 0;\n    var paren_level_stack_len_count2\
    \ = 0;\n    var paren_level_stack_len_count3 = 0;\n    var paren_level_stack_len_count4\
    \ = 0;\n    var paren_level_stack_len_count5 = 0;\n    var paren_level_stack_len_count6\
    \ = 0;\n    var paren_level_stack_len_count7 = 0;\n    var paren_level_stack_len_count8\
    \ = 0;\n    var paren_level_stack_len_count9 = 0;\n    var paren_level_stack_len_count10\
    \ = 0;\n    var paren_level_stack_len_count11 = 0;\n    var paren_level_stack_len_count12\
    \ = 0;\n    var paren_level_stack_len_count13 = 0;\n    var paren_level_stack_len_count14\
    \ = 0;\n    var paren_level_stack_len_count15 = 0;\n    var paren_level_stack_len_count16\
    \ = 0;\n    var paren_level_stack_len_count17 = 0;\n    var paren_level_stack_len_count18\
    \ = 0;\n    var paren_level_stack_len_count19 = 0;\n    var paren_level_stack_len_count20\
    \ = 0;\n    var paren_level_stack_len_count21 = 0;\n    var paren_level_stack_len_count22\
    \ = 0;\n    var paren_level_stack_len_count23 = 0;\n    var paren_level_stack_len_count24\
    \ = 0;\n    var paren_level_stack_len_count25 = 0;\n    var paren_level_stack_len_count26\
    \ = 0;\n    var paren_level_stack_len_count27 = 0;\n    var paren_level_stack_len_count28\
    \ = 0;\n    var paren_level_stack_len_count29 = 0;\n    var paren_level_stack_len_count30\
    \ = 0;\n    var paren_level_stack_len_count31 = 0;\n    var paren_level_stack_len_count32\
    \ = 0;\n    var paren_level_stack_len_count33 = 0;\n    var paren_level_stack_len_count34\
    \ = 0;\n    var paren_level_stack_len_count35 = 0;\n    var paren_level_stack_len_count36\
    \ = 0;\n    var paren_level_stack_len_count37 = 0;\n    var paren_level_stack_len_count38\
    \ = 0;\n    var paren_level_stack_len_count39 = 0;\n    var paren_level_stack_len_count40\
    \ = 0;\n    var paren_level_stack_len_count41 = 0;\n    var paren_level_stack_len_count42\
    \ = 0;\n    var paren_level_stack_len_count43 = 0;\n    var paren_level_stack_len_count44\
    \ = 0;\n    var paren_level_stack_len_count45 = 0;\n    var paren_level_stack_len_count46\
    \ = 0;\n    var paren_level_stack_len_count47 = 0;\n    var paren_level_stack_len_count\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzs5_xjaw.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == \"(\"){\n            paren_stack.push(paren_level);\n       \
    \     paren_level++;\n        }\n        else if(char == \")\"){\n           \
    \ paren_level = paren_stack.pop();\n        }\n        else if(char == \" \"){\n\
    \            if(paren_stack.length == 0){\n                nested_parens.push(paren_level);\n\
    \            }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpi8on1t5s.js:33:10)\n    at Object.<anonymous> (/tmp/tmpi8on1t5s.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  for(var i = 0; i <\
    \ paren_string.length; i++){\n    var c = paren_string[i];\n    if(c == '('){\n\
    \      paren_stack.push(paren_level);\n      paren_level++;\n    }\n    else if(c\
    \ == ')'){\n      paren_level = paren_stack.pop();\n    }\n    else if(c == '\
    \ '){\n      if(paren_stack.length > 0){\n        nested_parens.push(paren_level);\n\
    \      }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpapoizo3i.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapoizo3i.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_stack_count = [];\n  var paren_level_stack_string =\
    \ [];\n  var paren_level_stack_string_count = [];\n  var paren_level_stack_string_string\
    \ = [];\n  var paren_level_stack_string_string_count = [];\n  var paren_level_stack_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_count = [];\n  var paren_level_stack_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_count = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdghk8yo9.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_stack_string =\
    \ \"\";\n    var paren_groups = paren_string.split(\" \");\n    for(var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        if(paren_group === \"()\"){\n            nested_paren_stack.push(nested_paren_level);\n\
    \            nested_paren_level++;\n        }else if(paren_group === \"()\"){\n\
    \            nested_paren_level--;\n        }else if(paren_group === \"()\"){\n\
    \            nested_paren_stack.pop();\n        }\n    }\n    return nested_paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplfimar5c.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmplfimar5c.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_index2\
    \ = 0;\n    var paren_level_stack_len_index3 = 0;\n    var paren_level_stack_len_index4\
    \ = 0;\n    var paren_level_stack_len_index5 = 0;\n    var paren_level_stack_len_index6\
    \ = 0;\n    var paren_level_stack_len_index7 = 0;\n    var paren_level_stack_len_index8\
    \ = 0;\n    var paren_level_stack_len_index9 = 0;\n    var paren_level_stack_len_index10\
    \ = 0;\n    var paren_level_stack_len_index11 = 0;\n    var paren_level_stack_len_index12\
    \ = 0;\n    var paren_level_stack_len_index13 = 0;\n    var paren_level_stack_len_index14\
    \ = 0;\n    var paren_level_stack_len_index15 = 0;\n    var paren_level_stack_len_index16\
    \ = 0;\n    var paren_level_stack_len_index17 = 0;\n    var paren_level_stack_len_index18\
    \ = 0;\n    var paren_level_stack_len_index19 = 0;\n    var paren_level_stack_len_index20\
    \ = 0;\n    var paren_level_stack_len_index21 = 0;\n    var paren_level_stack_len_index22\
    \ = 0;\n    var paren_level_stack_len_index23 = 0;\n    var paren_level_stack_len_index24\
    \ = 0;\n    var paren_level_stack_len_index25 = 0;\n    var paren_level_stack_len_index26\
    \ = 0;\n    var paren_level_stack_len_index27 = 0;\n    var paren_level_stack_len_index28\
    \ = 0;\n    var paren_level_stack_len_index29 = 0;\n    var paren_level_stack_len_index30\
    \ = 0;\n    var paren_level_stack_len_index31 = 0;\n    var paren_level_stack_len_index32\
    \ = 0;\n    var paren_level_stack_len_index33 = 0;\n    var paren_level_stack_len_index34\
    \ = 0;\n    var paren_level_stack_len_index35 = 0;\n    var paren_level_stack_len_index36\
    \ = 0;\n    var paren_level_stack_len_index37 = 0;\n    var paren_level_stack_len_index38\
    \ = 0;\n    var paren_level_stack_len_index39 = 0;\n    var paren_level_stack_len_index40\
    \ = 0;\n    var paren_level_stack_len_index41 = 1;\n    var paren_level_stack_len_index42\
    \ = 1;\n    var paren_level_stack_len_index43 = 1;\n    var paren_level_stack_len_index44\
    \ = 1;\n    var paren_level_stack_len_index45 = 1;\n    var paren_level_stack_len_index46\
    \ = 1;\n    var paren_level_stack_len_index47 = 1;\n    var paren_level_stack_len\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4fd_r50y.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyl9rbxuu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyl9rbxuu.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_max_level = 0;\n    var paren_max_level_stack\
    \ = [];\n    var paren_max_level_stack_length = 0;\n    var paren_max_level_stack_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_length = 0;\n    var paren_max_level_stack_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_length = 0;\n    var paren_max_level_stack_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_length = 0;\n  \
    \  var paren_max_level_stack_pointer_pointer_pointer_pointer_length = 0;\n   \
    \ var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_length = 0;\n\
    \    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6d6wlkb5.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tvar paren_stack_pointer\
    \ = 0;\n\tvar paren_stack_pointer_max = 0;\n\tvar paren_stack_pointer_max_index\
    \ = 0;\n\tvar paren_stack_pointer_max_index2 = 0;\n\tvar paren_stack_pointer_max_index3\
    \ = 0;\n\tvar paren_stack_pointer_max_index4 = 0;\n\tvar paren_stack_pointer_max_index5\
    \ = 0;\n\tvar paren_stack_pointer_max_index6 = 0;\n\tvar paren_stack_pointer_max_index7\
    \ = 0;\n\tvar paren_stack_pointer_max_index8 = 0;\n\tvar paren_stack_pointer_max_index9\
    \ = 0;\n\tvar paren_stack_pointer_max_index10 = 0;\n\tvar paren_stack_pointer_max_index11\
    \ = 0;\n\tvar paren_stack_pointer_max_index12 = 0;\n\tvar paren_stack_pointer_max_index13\
    \ = 0;\n\tvar paren_stack_pointer_max_index14 = 0;\n\tvar paren_stack_pointer_max_index15\
    \ = 0;\n\tvar paren_stack_pointer_max_index16 = 0;\n\tvar paren_stack_pointer_max_index17\
    \ = 0;\n\tvar paren_stack_pointer_max_index18 = 0;\n\tvar paren_stack_pointer_max_index19\
    \ = 0;\n\tvar paren_stack_pointer_max_index20 = 0;\n\tvar paren_stack_pointer_max_index21\
    \ = 0;\n\tvar paren_stack_pointer_max_index22 = 0;\n\tvar paren_stack_pointer_max_index23\
    \ = 0;\n\tvar paren_stack_pointer_max_index24 = 0;\n\tvar paren_stack_pointer_max_index25\
    \ = 0;\n\tvar paren_stack_pointer_max_index26 = 0;\n\tvar paren_stack_pointer_max_index27\
    \ = 0;\n\tvar paren_stack_pointer_max_index28 = 0;\n\tvar paren_stack_pointer_max_index29\
    \ = 0;\n\tvar paren_stack_pointer_max_index30 = 0;\n\tvar paren_stack_pointer_max_index31\
    \ = 0;\n\tvar paren_stack_pointer_max_index32 = 0;\n\tvar paren_stack_pointer_max_index33\
    \ = 0;\n\tvar paren_stack_pointer_max_index34 = 0;\n\tvar paren_stack_pointer_max_index35\
    \ = 0;\n\tvar paren_stack_pointer_max_index36 = 0;\n\tvar paren_stack_pointer_max_index37\
    \ = 0;\n\tvar paren_stack_pointer_max_index38 = 0;\n\tvar paren_stack_pointer_max_index39\
    \ = 0;\n\tvar paren_stack_pointer_max_index40 = 0;\n\tvar paren_stack_pointer_max_index41\
    \ = 0;\n\tvar paren_stack_pointer_max_index42 = 0;\n\tvar paren_stack_pointer_max_index43\
    \ = 0;\n\tvar paren_stack_pointer_max_index44\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi0s0bkv0.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_max\
    \ = 0;\n    var paren_level_max_index = 0;\n    var paren_level_max_index2 = 0;\n\
    \    var paren_level_max_index3 = 0;\n    var paren_level_max_index4 = 0;\n  \
    \  var paren_level_max_index5 = 0;\n    var paren_level_max_index6 = 0;\n    var\
    \ paren_level_max_index7 = 0;\n    var paren_level_max_index8 = 0;\n    var paren_level_max_index9\
    \ = 0;\n    var paren_level_max_index10 = 0;\n    var paren_level_max_index11\
    \ = 0;\n    var paren_level_max_index12 = 0;\n    var paren_level_max_index13\
    \ = 0;\n    var paren_level_max_index14 = 0;\n    var paren_level_max_index15\
    \ = 0;\n    var paren_level_max_index16 = 0;\n    var paren_level_max_index17\
    \ = 0;\n    var paren_level_max_index18 = 0;\n    var paren_level_max_index19\
    \ = 0;\n    var paren_level_max_index20 = 0;\n    var paren_level_max_index21\
    \ = 0;\n    var paren_level_max_index22 = 0;\n    var paren_level_max_index23\
    \ = 0;\n    var paren_level_max_index24 = 0;\n    var paren_level_max_index25\
    \ = 0;\n    var paren_level_max_index26 = 0;\n    var paren_level_max_index27\
    \ = 0;\n    var paren_level_max_index28 = 0;\n    var paren_level_max_index29\
    \ = 0;\n    var paren_level_max_index30 = 0;\n    var paren_level_max_index31\
    \ = 0;\n    var paren_level_max_index32 = 0;\n    var paren_level_max_index33\
    \ = 0;\n    var paren_level_max_index34 = 0;\n    var paren_level_max_index35\
    \ = 0;\n    var paren_level_max_index36 = 0;\n    var paren_level_max_index37\
    \ = 0;\n    var paren_level_max_index38 = 0;\n    var paren_level_max_index39\
    \ = 0;\n    var paren_level_max_index40 = 0;\n    var paren_level_max_index41\
    \ = 0;\n    var paren_level_max_index42 = 0;\n    var paren_level_max_index43\
    \ = 0;\n    var paren_level_max_index44 = 0;\n    var paren_level_max_index45\
    \ = 0;\n    var paren_level_max_index46 = 0;\n    var paren_level_max_index47\
    \ = 0;\n    var paren_level_max_index48 = 0;\n    var paren_level_max_index49\
    \ = 0;\n    var paren_level_max_index50 = 0;\n    var paren_level_max_index51\
    \ = 0;\n    var paren_level_max_index52 = 0;\n    var paren_level_max_index53\
    \ = 0;\n    var paren_level_max_index54 = 0;\n    var paren_level_max_index55\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp18v16oct.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_string = \"\";\n  var paren_level_stack_last_index\
    \ = 0;\n  var paren_level_stack_last_string = \"\";\n  var paren_level_stack_last_paren_level\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack = [];\n  var paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_string = \"\";\n  var paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_string = \"\";\n \
    \ var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n  var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy0nqo65o.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level_stack = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(paren_level);\n            paren_level++;\n       \
    \ }\n        else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_level == 0){\n\
    \                nested_parens.push(paren_level);\n            }\n           \
    \ else{\n                paren_levels.push(paren_level);\n            }\n    \
    \    }\n    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd1sykn6b.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd1sykn6b.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for (var i = 0; i < paren_string.length; i++){\n\
    \    if (paren_string[i] == '('){\n      paren_level++;\n    } else if (paren_string[i]\
    \ == ')'){\n      paren_level--;\n    }\n    if (paren_level == 0){\n      nested_parens.push(paren_string[i]);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')',\n  '\
    \ ',\n  ')',\n  ' ',\n  ')',\n  ' ',\n  ')'\n]\n\nshould loosely deep-equal\n\n\
    [\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpveezeo8y.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpveezeo8y.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    ')',\
    \ ' ', ')',\n    ' ', ')', ' ',\n    ')'\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_count = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n      \
    \      nested_parens[nested_level] = paren_count;\n            nested_level++;\n\
    \            paren_count = 0;\n        }else if(paren_string[i] == \")\"){\n \
    \           nested_level--;\n            paren_count++;\n        }\n    }\n  \
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7i1346sq.js:28:10)\n    at Object.<anonymous> (/tmp/tmp7i1346sq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_lengths = [];\n    var paren_level_lengths_index\
    \ = 0;\n    var paren_level_lengths_max = 0;\n    var paren_level_lengths_max_index\
    \ = 0;\n    var paren_level_lengths_max_index2 = 0;\n    var paren_level_lengths_max_index3\
    \ = 0;\n    var paren_level_lengths_max_index4 = 0;\n    var paren_level_lengths_max_index5\
    \ = 0;\n    var paren_level_lengths_max_index6 = 0;\n    var paren_level_lengths_max_index7\
    \ = 0;\n    var paren_level_lengths_max_index8 = 0;\n    var paren_level_lengths_max_index9\
    \ = 0;\n    var paren_level_lengths_max_index10 = 0;\n    var paren_level_lengths_max_index11\
    \ = 0;\n    var paren_level_lengths_max_index12 = 0;\n    var paren_level_lengths_max_index13\
    \ = 0;\n    var paren_level_lengths_max_index14 = 0;\n    var paren_level_lengths_max_index15\
    \ = 0;\n    var paren_level_lengths_max_index16 = 0;\n    var paren_level_lengths_max_index17\
    \ = 0;\n    var paren_level_lengths_max_index18 = 0;\n    var paren_level_lengths_max_index19\
    \ = 0;\n    var paren_level_lengths_max_index20 = 0;\n    var paren_level_lengths_max_index21\
    \ = 0;\n    var paren_level_lengths_max_index22 = 0;\n    var paren_level_lengths_max_index23\
    \ = 0;\n    var paren_level_lengths_max_index24 = 0;\n    var paren_level_lengths_max_index25\
    \ = 0;\n    var paren_level_lengths_max_index26 = 0;\n    var paren_level_lengths_max_index27\
    \ = 0;\n    var paren_level_lengths_max_index28 = 0;\n    var paren_level_lengths_max_index29\
    \ = 0;\n    var paren_level_lengths_max_index30 = 0;\n    var paren_level_lengths_max_index31\
    \ = 0;\n    var paren_level_lengths_max_index32 = 0;\n    var paren_level_lengths_max_index33\
    \ = 0;\n    var paren_level_lengths_max_index34 = 0;\n    var paren_level_lengths_max_index35\
    \ = 0;\n    var paren_level_lengths_max_index36 = 0;\n    var paren_level_lengths_max_index37\
    \ = 0;\n    var paren_level_lengths_max_index38 = 0;\n    var paren_level_lengths_max_index39\
    \ = 0;\n    var paren_level_lengths_max_index40 = 0;\n    var paren_level_lengths_max_index41\
    \ = 0;\n    var paren_level_lengths_max_index42 = 0;\n    var paren_level_length\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmply0iu3xf.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_stack_count = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_value = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_value2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_value3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_value4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_value5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_value6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_value7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_value8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_value9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_value10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_value11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_value12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_value13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_value14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_value15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_value16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_value17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_value18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_value19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_value20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = -1;\n    var paren_stack_pointer_max_value21 = -1;\n    var paren_stack_pointer_max_index22\
    \ = -1;\n    var paren_stack_pointer_max_value22 = -1;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptose62bn.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_stacks = [];\n    var paren_levels_index = 0;\n    var\
    \ paren_stacks_index = 0;\n    var paren_levels_string = \"\";\n    var paren_stacks_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n\
    \    var paren_levels_string = \"\";\n    var paren_stacks_string = \"\";\n  \
    \  var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_stacks_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n    var paren_stacks_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_stacks_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_stacks_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n    var paren_stacks_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_stacks_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_stacks_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n    var paren_stacks_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_stacks_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n\
    \    var paren_stacks_index = 0;\n    var paren_levels_string = \"\";\n    var\
    \ paren_stacks_string = \"\";\n    var paren_levels_index = 0;\n    var paren_stacks_index\
    \ = 0;\n    var paren_levels_string = \"\";\n    var paren_stacks_string = \"\"\
    ;\n    var paren_levels_index = 0;\n    var paren_stacks_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_stacks_string = \"\";\n    var paren_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj0u1v3wb.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_index = 0;\n    var paren_levels_string_index\
    \ = 0;\n    var paren_levels_string_index2 = 0;\n    var paren_levels_string_index3\
    \ = 0;\n    var paren_levels_string_index4 = 0;\n    var paren_levels_string_index5\
    \ = 0;\n    var paren_levels_string_index6 = 0;\n    var paren_levels_string_index7\
    \ = 0;\n    var paren_levels_string_index8 = 0;\n    var paren_levels_string_index9\
    \ = 0;\n    var paren_levels_string_index10 = 0;\n    var paren_levels_string_index11\
    \ = 0;\n    var paren_levels_string_index12 = 0;\n    var paren_levels_string_index13\
    \ = 0;\n    var paren_levels_string_index14 = 0;\n    var paren_levels_string_index15\
    \ = 0;\n    var paren_levels_string_index16 = 0;\n    var paren_levels_string_index17\
    \ = 0;\n    var paren_levels_string_index18 = 0;\n    var paren_levels_string_index19\
    \ = 0;\n    var paren_levels_string_index20 = 0;\n    var paren_levels_string_index21\
    \ = 0;\n    var paren_levels_string_index22 = 0;\n    var paren_levels_string_index23\
    \ = 0;\n    var paren_levels_string_index24 = 0;\n    var paren_levels_string_index25\
    \ = 0;\n    var paren_levels_string_index26 = 0;\n    var paren_levels_string_index27\
    \ = 0;\n    var paren_levels_string_index28 = 0;\n    var paren_levels_string_index29\
    \ = 0;\n    var paren_levels_string_index30 = 0;\n    var paren_levels_string_index31\
    \ = 0;\n    var paren_levels_string_index32 = 0;\n    var paren_levels_string_index33\
    \ = 0;\n    var paren_levels_string_index34 = 0;\n    var paren_levels_string_index35\
    \ = 0;\n    var paren_levels_string_index36 = 0;\n    var paren_levels_string_index37\
    \ = 0;\n    var paren_levels_string_index38 = 0;\n    var paren_levels_string_index39\
    \ = 0;\n    var paren_levels_string_index40 = 0;\n    var paren_levels_string_index41\
    \ = 0;\n    var paren_levels_string_index42 = 0;\n    var paren_levels_string_index43\
    \ = 0;\n    var paren_levels_string_index44 = 0;\n    var paren_levels_string_index45\
    \ = 0;\n    var paren_levels_string_index46 = 0;\n    var paren_levels_string_index47\
    \ = 0;\n    var paren_levels_string_index48 = 0;\n    var paren_level\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2jxbnfnz.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_stack = [];\n\tvar paren_level = 0;\n\t\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\t\n\t\tswitch(paren_string[i]){\n\t\t\tcase \")\":\n\t\t\t\tif(paren_stack.length\
    \ == 0){\n\t\t\t\t\tnested_parens.push(paren_level);\n\t\t\t\t}\n\t\t\t\tparen_stack.pop();\n\
    \t\t\t\tbreak;\n\t\t\tcase \"(\":\n\t\t\t\tparen_stack.push(paren_level);\n\t\t\
    \t\tbreak;\n\t\t\tcase \" \":\n\t\t\t\tif(paren_stack.length > 0){\n\t\t\t\t\t\
    paren_stack.pop();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tparen_level++;\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6s91j7a5.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6s91j7a5.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string_reverse = \"\";\n    var paren_level_counter_reverse\
    \ = 0;\n    var paren_level_counter_reverse_string = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string_reverse = \"\";\n    var paren_level_counter_reverse_string_reverse\
    \ = \"\";\n    var paren_level_counter_reverse_string_reverse = \"\";\n    var\
    \ paren_level_counter_reverse_string\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6dnwwfan.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\
    \tvar paren_stack_level = 0;\n\tvar paren_stack_max_level = 0;\n\tvar paren_stack_max_level_char\
    \ = \"\";\n\t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tparen_stack.push(paren_string[i]);\n\
    \t\tparen_stack_level++;\n\t\t\n\t\tif(paren_string[i]==\"(\"){\n\t\t\tparen_count++;\n\
    \t\t}\n\t\telse if(paren_string[i]==\")\"){\n\t\t\tparen_count--;\n\t\t}\n\t\t\
    \n\t\tif(paren_count==0){\n\t\t\tparen_stack_level--;\n\t\t\tif(paren_stack_level==0){\n\
    \t\t\t\tif(paren_stack_max_level<paren_stack_level){\n\t\t\t\t\tparen_stack_max_level\
    \ = paren_stack_level;\n\t\t\t\t\tparen_stack_max_level_char = paren_stack[paren_stack_level];\n\
    \t\t\t\t}\n\t\t\t\t\n\t\t\t\tparen_stack.pop();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ paren_stack_max_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvfi1rrc7.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvfi1rrc7.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  var paren_levels\
    \ = [];\n  var paren_nesting_levels = [];\n  var paren_levels_string = \"\";\n\
    \  var paren_nesting_levels_string = \"\";\n  var paren_level_counter = 0;\n \
    \ var paren_nesting_level_counter = 0;\n  var paren_level_counter_string = \"\"\
    ;\n  var paren_nesting_level_counter_string = \"\";\n  var paren_level_counter_strings\
    \ = [];\n  var paren_nesting_level_counter_strings = [];\n  var paren_level_counter_strings_array\
    \ = [];\n  var paren_nesting_level_counter_strings_array = [];\n  var paren_level_counter_strings_array_string\
    \ = \"\";\n  var paren_nesting_level_counter_strings_array_string = \"\";\n  var\
    \ paren_level_counter_strings_array_string_temp = \"\";\n  var paren_nesting_level_counter_strings_array_string_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp = \"\";\n\
    \  var paren_nesting_level_counter_strings_array_string_temp_temp = \"\";\n  var\
    \ paren_level_counter_strings_array_string_temp_temp_temp = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = \"\";\n  var paren_level_counter_strings_array_string_temp_temp_temp_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz740pwd4.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max = 0;\n    var paren_level_max_count = 0;\n   \
    \ var paren_level_max_max = 0;\n    var paren_level_max_max_count = 0;\n    var\
    \ paren_level_max_max_max = 0;\n    var paren_level_max_max_max_count = 0;\n \
    \   var paren_level_max_max_max_max = 0;\n    var paren_level_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max = 0;\n    var paren_level_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_count = 0;\n    var paren_level_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_count = 0;\n    var paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_count = 0;\n    var\
    \ paren_level_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_level_max_max_max_max_max_max_max_max_max_count = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n   \
    \ var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_level_max_max_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpozyi44t3.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack_len_index = 0;\n    var paren_level_stack_len_len\
    \ = 0;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmlpikxoo.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_level = 0;\n\tvar paren_stack\
    \ = [];\n\tvar paren_stack_string = \"\";\n\tvar paren_level_string = \"\";\n\t\
    var paren_level_counter = 0;\n\tvar paren_level_counter_string = \"\";\n\tvar\
    \ paren_level_counter_max = 0;\n\tvar paren_level_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\tvar\
    \ paren_level_counter_max_counter_max_counter_max_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8nql3t97.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplth9fsrk.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_count = 0;\n    var paren_stack = [];\n\
    \    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string.charAt(i);\n\
    \        if(c == '('){\n            paren_stack.push(paren_count);\n         \
    \   paren_count++;\n        }\n        else if(c == ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }\n        else{\n            paren_count = 0;\n\
    \        }\n        if(paren_count == max_level){\n            max_level = paren_count;\n\
    \        }\n        level++;\n    }\n    return max_level;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjzxl1tnw.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjzxl1tnw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  var paren_levels = [];\n  var paren_levels_string = \"\";\n  var paren_level_counter\
    \ = 0;\n  var paren_level_counter_max = 0;\n  var paren_level_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter = 0;\n  var paren_level_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_string = \"\";\n  var paren_level_counter_max_counter_max_counter\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max = 0;\n  var paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6zzq21_h.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack_len-1];\n\
    \    var paren_stack_bottom = paren_stack[paren_stack_len-2];\n    var paren_stack_len\
    \ = paren_stack.length;\n    var paren_stack_top = paren_stack[paren_stack\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj054_l91.js:45\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_stack\
    \ = [];\n    var paren_levels_stack_index = 0;\n    var paren_levels_stack_len\
    \ = 0;\n    var paren_levels_stack_len_index = 0;\n    var paren_levels_stack_len_index2\
    \ = 0;\n    var paren_levels_stack_len_index3 = 0;\n    var paren_levels_stack_len_index4\
    \ = 0;\n    var paren_levels_stack_len_index5 = 0;\n    var paren_levels_stack_len_index6\
    \ = 0;\n    var paren_levels_stack_len_index7 = 0;\n    var paren_levels_stack_len_index8\
    \ = 0;\n    var paren_levels_stack_len_index9 = 0;\n    var paren_levels_stack_len_index10\
    \ = 0;\n    var paren_levels_stack_len_index11 = 0;\n    var paren_levels_stack_len_index12\
    \ = 0;\n    var paren_levels_stack_len_index13 = 0;\n    var paren_levels_stack_len_index14\
    \ = 0;\n    var paren_levels_stack_len_index15 = 0;\n    var paren_levels_stack_len_index16\
    \ = 0;\n    var paren_levels_stack_len_index17 = 0;\n    var paren_levels_stack_len_index18\
    \ = 0;\n    var paren_levels_stack_len_index19 = 0;\n    var paren_levels_stack_len_index20\
    \ = 0;\n    var paren_levels_stack_len_index21 = 0;\n    var paren_levels_stack_len_index22\
    \ = 0;\n    var paren_levels_stack_len_index23 = 0;\n    var paren_levels_stack_len_index24\
    \ = 0;\n    var paren_levels_stack_len_index25 = 0;\n    var paren_levels_stack_len_index26\
    \ = 0;\n    var paren_levels_stack_len_index27 = 0;\n    var paren_levels_stack_len_index28\
    \ = 0;\n    var paren_levels_stack_len_index29 = 0;\n    var paren_levels_stack_len_index30\
    \ = 0;\n    var paren_levels_stack_len_index31 = 0;\n    var paren_levels_stack_len_index32\
    \ = 0;\n    var paren_levels_stack_len_index33 = 0;\n    var paren_levels_stack_len_index34\
    \ = 0;\n    var paren_levels_stack_len_index35 = 0;\n    var paren_levels_stack_len_index36\
    \ = 0;\n    var paren_levels_stack_len_index37 = 0;\n    var paren_levels_stack_len_index38\
    \ = 0;\n    var paren_levels_stack_len_index39 = 0;\n    var paren_levels_stack_len_index40\
    \ = 0;\n    var paren_levels_stack_len_index41 = 1;\n    var paren_levels_stack_len_index42\
    \ = 1;\n    var paren_levels_stack_len_index43 = 1;\n    var \nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaf0ao92y.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_string_length = \"\";\n    var paren_levels_string_length_count\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_length_count_max = 0;\n    var paren_levels_string_length_count_max_index\
    \ = 0;\n    var paren_levels_string_length_count_min = 0;\n    var paren_levels_string_length_count_min_index\
    \ = 0;\n    var paren_levels_string_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl5i1qvnb.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(level);\n            paren_level.push(level);\n\
    \            level++;\n        }else if(char == \")\"){\n            level--;\n\
    \            if(paren_stack[paren_stack.length-1] == level){\n               \
    \ paren_stack.pop();\n                paren_level.pop();\n            }\n    \
    \    }\n    }\n    return paren_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpacswdfne.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpacswdfne.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  for (var i = 0; i\
    \ < paren_string.length; i++){\n    var char = paren_string[i];\n    if (char\
    \ == \"(\"){\n      paren_nesting++;\n    } else if (char == \")\"){\n      paren_nesting--;\n\
    \      if (paren_nesting == 0){\n        nested_parens.push(paren_level);\n  \
    \    }\n    } else if (char == \" \"){\n      if (paren_nesting == 0){\n     \
    \   nested_parens.push(paren_level);\n      }\n    }\n  }\n  return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpyqvmru4f.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyqvmru4f.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_char;\n    var i;\n    for(i = 0; i < paren_string.length; i++){\n\
    \        paren_char = paren_string[i];\n        if(paren_char === '('){\n    \
    \        paren_level++;\n        }else if(paren_char === ')'){\n            paren_level--;\n\
    \        }\n        if(paren_level === 0){\n            nested_parens.push(paren_count);\n\
    \        }\n        paren_count++;\n    }\n    return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n\
    \  12,\n  13,\n  15,\n  16,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpl2cfxp1l.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl2cfxp1l.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_stack_level = 0;\n \
    \   var paren_stack_array = [];\n    var paren_stack_array_string = \"\";\n  \
    \  var paren_stack_array_level = 0;\n    var paren_stack_array_index = 0;\n  \
    \  var paren_stack_array_string_index = 0;\n    var paren_stack_array_index2 =\
    \ 0;\n    var paren_stack_array_string_index2 = 0;\n    var paren_stack_array_index3\
    \ = 0;\n    var paren_stack_array_string_index3 = 0;\n    var paren_stack_array_index4\
    \ = 0;\n    var paren_stack_array_string_index4 = 0;\n    var paren_stack_array_index5\
    \ = 0;\n    var paren_stack_array_string_index5 = 0;\n    var paren_stack_array_index6\
    \ = 0;\n    var paren_stack_array_string_index6 = 0;\n    var paren_stack_array_index7\
    \ = 0;\n    var paren_stack_array_string_index7 = 0;\n    var paren_stack_array_index8\
    \ = 0;\n    var paren_stack_array_string_index8 = 0;\n    var paren_stack_array_index9\
    \ = 0;\n    var paren_stack_array_string_index9 = 0;\n    var paren_stack_array_index10\
    \ = 0;\n    var paren_stack_array_string_index10 = 0;\n    var paren_stack_array_index11\
    \ = 0;\n    var paren_stack_array_string_index11 = 0;\n    var paren_stack_array_index12\
    \ = 0;\n    var paren_stack_array_string_index12 = 0;\n    var paren_stack_array_index13\
    \ = 0;\n    var paren_stack_array_string_index13 = 0;\n    var paren_stack_array_index14\
    \ = 0;\n    var paren_stack_array_string_index14 = 0;\n    var paren_stack_array_index15\
    \ = 0;\n    var paren_stack_array_string_index15 = 0;\n    var paren_stack_array_index16\
    \ = 0;\n    var paren_stack_array_string_index16 = 0;\n    var paren_stack_array_index17\
    \ = 0;\n    var paren_stack_array_string_index17 = 0;\n    var paren_stack_array_index18\
    \ = 0;\n    var paren_stack_array_string_index18 = 0;\n    var paren_stack_array_index19\
    \ = 0;\n    var paren_stack_array_string_index19 = 0;\n    var paren_stack_array_index20\
    \ = 0;\n    var paren_stack_array_string_index20 = 0;\n    var paren_stack_array_index21\
    \ = 0;\n    var paren_stack_array_string_index21 = 0;\n    var paren_stack_array_index22\
    \ = 0;\n    var paren_stack_array_string_index22 = 0;\n    var paren_stack_array_index23\
    \ = 0;\n    var paren_stack_array_string_index23 = 0;\n    var paren_stack_array_index24\
    \ = 0;\n    var paren_stack_array_string_index24 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyolhrzpw.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_nesting++;\n\t\t}else\
    \ if(paren_string[i] == \")\"){\n\t\t\tparen_nesting--;\n\t\t}\n\t\tif(paren_nesting\
    \ == 0){\n\t\t\tnested_parens.push(paren_level);\n\t\t}\n\t}\n\treturn nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp6e6y4fbp.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6e6y4fbp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  for(var i = 0; i < paren_string.length; i++){\n\
    \    if(paren_string[i] === '('){\n      paren_count++;\n    }\n    if(paren_string[i]\
    \ === ')'){\n      paren_count--;\n    }\n    if(paren_count === 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp8ani1xgr.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ani1xgr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string = \"\";\n    var paren_level_counter_max\
    \ = 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_max = 0;\n    var paren_level_counter_max_max_string\
    \ = \"\";\n    var paren_level_counter_max_max_string = \"\";\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_counter_max_max_max = 0;\n    var paren_level_counter_max_max_max\
    \ = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw1ah6ogc.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n\
    \    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n  \
    \  var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters\
    \ = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n\
    \    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var\
    \ paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n\
    \    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n\
    \    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n  \
    \  var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters\
    \ = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n\
    \    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var\
    \ paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n\
    \    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n\
    \    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n  \
    \  var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters\
    \ = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb7v_bxjt.js:86\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_stack = [];\n\
    \    var paren_level_stack_string = \"\";\n    var paren_level_stack_strings =\
    \ [];\n    var paren_level_stack_strings_string = \"\";\n    var paren_level_stack_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_string = \"\";\n    var paren_level_stack_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_string = \"\";\n  \
    \  var paren_level_stack_strings_strings_strings_strings = [];\n    var paren_level_stack_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings =\
    \ [];\n    var paren_level_stack_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_level_stack_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_level_stack_strings_strings_strings_strings_strings_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8773n7kb.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_stack);\n\t\t\t\
    nested_paren_level++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tvar\
    \ current_paren_stack = paren_stack.pop();\n\t\t\tif(current_paren_stack.length\
    \ == 0){\n\t\t\t\tnested_paren_level--;\n\t\t\t}\n\t\t}\n\t}\n\treturn nested_paren_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0ixqun4g.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0ixqun4g.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_level = [];\n\
    \    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_string = \"\";\n    var paren_level_stack_string_index = 0;\n\
    \    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_w7raal2.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var max_level = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var c = paren_string[i];\n        if(c == '('){\n           \
    \ paren_stack.push(level);\n            level++;\n        }\n        else if(c\
    \ == ')'){\n            level--;\n        }\n        if(level > max_level){\n\
    \            max_level = level;\n        }\n    }\n    return max_level;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpoo_7ddwn.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoo_7ddwn.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level);\n            paren_stack_pointer++;\n \
    \           if(paren_stack_pointer > paren_stack_pointer_max){\n             \
    \   paren_stack_pointer_max = paren_stack_pointer;\n            }\n        }\n\
    \        else if(char == ')'){\n            paren_level--;\n            if(paren_level\
    \ == 0){\n                nested_parens.push(paren_stack);\n                paren_stack\
    \ = [];\n                paren_stack_pointer = 0;\n                paren_stack_pointer_max\
    \ = 0;\n            }\n        }\n        else if(char == ' ' && paren_stack.length\
    \ > 0){\n            paren_level--;\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprrbpmyb9.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmprrbpmyb9.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpid15hrjq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_level\
    \ = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == \"(\"){\n      paren_stack.push(paren_level);\n   \
    \   paren_level++;\n    }\n    else if(paren_string[i] == \")\"){\n      paren_level--;\n\
    \    }\n  }\n  return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy2owyc2r.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy2owyc2r.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index2 = 0;\n  var paren_level_stack_pointer_max_index3\
    \ = 0;\n  var paren_level_stack_pointer_max_index4 = 0;\n  var paren_level_stack_pointer_max_index5\
    \ = 0;\n  var paren_level_stack_pointer_max_index6 = 0;\n  var paren_level_stack_pointer_max_index7\
    \ = 0;\n  var paren_level_stack_pointer_max_index8 = 0;\n  var paren_level_stack_pointer_max_index9\
    \ = 0;\n  var paren_level_stack_pointer_max_index10 = 0;\n  var paren_level_stack_pointer_max_index11\
    \ = 0;\n  var paren_level_stack_pointer_max_index12 = 0;\n  var paren_level_stack_pointer_max_index13\
    \ = 0;\n  var paren_level_stack_pointer_max_index14 = 0;\n  var paren_level_stack_pointer_max_index15\
    \ = 0;\n  var paren_level_stack_pointer_max_index16 = 0;\n  var paren_level_stack_pointer_max_index17\
    \ = 0;\n  var paren_level_stack_pointer_max_index18 = 0;\n  var paren_level_stack_pointer_max_index19\
    \ = 0;\n  var paren_level_stack_pointer_max_index20 = 0;\n  var paren_level_stack_pointer_max_index21\
    \ = 0;\n  var paren_level_stack_pointer_max_index22 = 0;\n  var paren_level_stack_pointer_max_index23\
    \ = 0;\n  var paren_level_stack_pointer_max_index24 = 0;\n  var paren_level_stack_pointer_max_index25\
    \ = 0;\n  var paren_level_stack_pointer_max_index26 = 0;\n  var paren_level_stack_pointer_max_index27\
    \ = 0;\n  var paren_level_stack_pointer_max_index28 = 0;\n  var paren_level_stack_pointer_max_index29\
    \ = 0;\n  var paren_level_stack_pointer_max_index30 = 0;\n  var paren_level_stack_pointer_max_index31\
    \ = 0;\n  var paren_level_stack_pointer_max_index32 = 0;\n  var paren_level_stack_pointer_max_index33\
    \ = 0;\n  var paren_level_stack_pointer_max_index34 = 0;\n  var paren_level_stack_pointer_max_index35\
    \ = 0;\n  var paren_level_stack_pointer_max_index36 = 0;\n  var paren_level_stack_pointer_max_index37\
    \ = 0;\n  var paren_level_stack_pointer_max_index38 = 0;\n  var paren_level_stack_pointer_max_index39\
    \ = 0;\n  var paren_level_stack_pointer_max_index40 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph8mf9a3y.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    var paren_stack_max = 0;\n    var paren_stack_curr = 0;\n    var paren_stack_curr_depth\
    \ = 0;\n    var paren_stack_curr_max = 0;\n    var paren_stack_curr_curr = 0;\n\
    \    var paren_stack_curr_curr_depth = 0;\n    var paren_stack_curr_curr_max =\
    \ 0;\n    var paren_stack_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_depth = 0;\n    var paren_stack_curr_curr_curr_curr_max\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_depth = 0;\n    var paren_stack_curr_curr_curr_curr_curr_max\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n\
    \    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_max = 0;\n\
    \    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_curr = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_curr_max\
    \ = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2mzsgkts.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_nesting\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level);\n    \
    \        paren_level++;\n        }else if(char == \")\"){\n            paren_level\
    \ = paren_stack.pop();\n        }else if(char == \" \"){\n            if(paren_stack.length\
    \ == 0){\n                nested_parens.push(paren_nesting);\n            }\n\
    \            paren_nesting++;\n        }\n    }\n    return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp1_t95rtt.js:33:10)\n    at Object.<anonymous> (/tmp/tmp1_t95rtt.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_count = 0;\n    var paren\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjze4gyc2.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  var paren_level_stack = [];\n  var paren_level_stack_pointer = 0;\n\
    \  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index2 = 0;\n  var paren_level_stack_pointer_max_index3\
    \ = 0;\n  var paren_level_stack_pointer_max_index4 = 0;\n  var paren_level_stack_pointer_max_index5\
    \ = 0;\n  var paren_level_stack_pointer_max_index6 = 0;\n  var paren_level_stack_pointer_max_index7\
    \ = 0;\n  var paren_level_stack_pointer_max_index8 = 0;\n  var paren_level_stack_pointer_max_index9\
    \ = 0;\n  var paren_level_stack_pointer_max_index10 = 0;\n  var paren_level_stack_pointer_max_index11\
    \ = 0;\n  var paren_level_stack_pointer_max_index12 = 0;\n  var paren_level_stack_pointer_max_index13\
    \ = 0;\n  var paren_level_stack_pointer_max_index14 = 0;\n  var paren_level_stack_pointer_max_index15\
    \ = 0;\n  var paren_level_stack_pointer_max_index16 = 0;\n  var paren_level_stack_pointer_max_index17\
    \ = 0;\n  var paren_level_stack_pointer_max_index18 = 0;\n  var paren_level_stack_pointer_max_index19\
    \ = 0;\n  var paren_level_stack_pointer_max_index20 = 0;\n  var paren_level_stack_pointer_max_index21\
    \ = 0;\n  var paren_level_stack_pointer_max_index22 = 0;\n  var paren_level_stack_pointer_max_index23\
    \ = 0;\n  var paren_level_stack_pointer_max_index24 = 0;\n  var paren_level_stack_pointer_max_index25\
    \ = 0;\n  var paren_level_stack_pointer_max_index26 = 0;\n  var paren_level_stack_pointer_max_index27\
    \ = 0;\n  var paren_level_stack_pointer_max_index28 = 0;\n  var paren_level_stack_pointer_max_index29\
    \ = 0;\n  var paren_level_stack_pointer_max_index30 = 0;\n  var paren_level_stack_pointer_max_index31\
    \ = 0;\n  var paren_level_stack_pointer_max_index32 = 0;\n  var paren_level_stack_pointer_max_index33\
    \ = 0;\n  var paren_level_stack_pointer_max_index34 = 0;\n  var paren_level_stack_pointer_max_index35\
    \ = 0;\n  var paren_level_stack_pointer_max_index36 = 0;\n  var paren_level_stack_pointer_max_index37\
    \ = 0;\n  var paren_level_stack_pointer_max_index38 = 0;\n  var paren_level_stack_pointer_max_index39\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps72cm1ct.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_stack = [];\n    var paren_level =\
    \ 0;\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == \"(\"){\n            paren_stack.push(paren_level);\n       \
    \     paren_level++;\n        }\n        else if(c == \")\"){\n            paren_level\
    \ = paren_stack.pop();\n        }\n        else if(paren_stack.length){\n    \
    \        nested_parens.push(paren_level);\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpb7z9mn_2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb7z9mn_2.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_levels\
    \ = [];\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i]==\"(\"){\n\t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i]==\"\
    )\"){\n\t\t\tparen_level--;\n\t\t}\n\t\telse if(paren_string[i]==\" \"){\n\t\t\
    \tnested_paren_levels.push(paren_level);\n\t\t}\n\t}\n\treturn nested_paren_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpyr5_fhrn.js:28:10)\n    at Object.<anonymous> (/tmp/tmpyr5_fhrn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(nested_level);\n   \
    \         paren_level++;\n        }\n        else if(char == \")\"){\n       \
    \     nested_level = paren_stack.pop();\n        }\n        else if(char == \"\
    \ \"){\n            if(paren_level == 0){\n                nested_parens.push(nested_level);\n\
    \            }\n            else{\n                nested_parens.push(nested_level-1);\n\
    \            }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0i1raxwc.js:37:10)\n    at Object.<anonymous> (/tmp/tmp0i1raxwc.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -1,\
    \ -1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var paren_stack = [];\n    var paren_level = 0;\n    var paren_stack_string\
    \ = \"\";\n    var paren_level_string = \"\";\n    var paren_level_counter = 0;\n\
    \    var paren_level_counter_string = \"\";\n    var paren_level_counter_string2\
    \ = \"0\";\n    var paren_level_counter_string3 = \"0\";\n    var paren_level_counter_string4\
    \ = \"0\";\n    var paren_level_counter_string5 = \"0\";\n    var paren_level_counter_string6\
    \ = \"0\";\n    var paren_level_counter_string7 = \"0\";\n    var paren_level_counter_string8\
    \ = \"0\";\n    var paren_level_counter_string9 = \"0\";\n    var paren_level_counter_string10\
    \ = \"0\";\n    var paren_level_counter_string11 = \"0\";\n    var paren_level_counter_string12\
    \ = \"0\";\n    var paren_level_counter_string13 = \"0\";\n    var paren_level_counter_string14\
    \ = \"0\";\n    var paren_level_counter_string15 = \"0\";\n    var paren_level_counter_string16\
    \ = \"0\";\n    var paren_level_counter_string17 = \"0\";\n    var paren_level_counter_string18\
    \ = \"0\";\n    var paren_level_counter_string19 = \"0\";\n    var paren_level_counter_string20\
    \ = \"0\";\n    var paren_level_counter_string21 = \"0\";\n    var paren_level_counter_string22\
    \ = \"0\";\n    var paren_level_counter_string23 = \"0\";\n    var paren_level_counter_string24\
    \ = \"0\";\n    var paren_level_counter_string25 = \"0\";\n    var paren_level_counter_string26\
    \ = \"0\";\n    var paren_level_counter_string27 = \"0\";\n    var paren_level_counter_string28\
    \ = \"0\";\n    var paren_level_counter_string29 = \"0\";\n    var paren_level_counter_string30\
    \ = \"0\";\n    var paren_level_counter_string31 = \"0\";\n    var paren_level_counter_string32\
    \ = \"0\";\n    var paren_level_counter_string33 = \"0\";\n    var paren_level_counter_string34\
    \ = \"0\";\n    var paren_level_counter_string35 = \"0\";\n    var paren_level_counter_string36\
    \ = \"0\";\n    var paren_level_counter_string37 = \"0\";\n    var paren_level_counter_string38\
    \ = \"0\";\n    var paren_level_counter_string39 = \"0\";\n    var paren_level_counter_string40\
    \ = \"0\";\n    var paren_level_counter_string41 = \"0\";\n    var paren_level_counter_string42\
    \ = \"\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxrjx01g2.js:56\n    var paren_level_counter_string42 = \"\n   \
    \                                    ^\n\nSyntaxError: Invalid or unexpected token\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_stack = [];\n    var\
    \ paren_level_stacks = [];\n    var paren_level_stacks_len = 0;\n    var paren_level_stacks_len_max\
    \ = 0;\n    var paren_level_stacks_len_max_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_max_max\
    \ = 0;\n    var paren_level_stacks_len_max_min = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_min_min = 0;\n    var paren_level_stacks_len_min_max\
    \ = 0;\n    var paren_level_stacks_len_max_min = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_max_max\
    \ = 0;\n    var paren_level_stacks_len_max_min = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_min_min\
    \ = 0;\n    var paren_level_stacks_len_min_max = 0;\n    var paren_level_stacks_len_max_min\
    \ = 0;\n    var paren_level_stacks_len_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppj1qcaac.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_count = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_stack_pointer = 0;\n  var paren_level_stack_pointer_max\
    \ = 0;\n  var paren_level_stack_pointer_max_index = 0;\n  var paren_level_stack_pointer_max_index2\
    \ = 0;\n  var paren_level_stack_pointer_max_index3 = 0;\n  var paren_level_stack_pointer_max_index4\
    \ = 0;\n  var paren_level_stack_pointer_max_index5 = 0;\n  var paren_level_stack_pointer_max_index6\
    \ = 0;\n  var paren_level_stack_pointer_max_index7 = 0;\n  var paren_level_stack_pointer_max_index8\
    \ = 0;\n  var paren_level_stack_pointer_max_index9 = 0;\n  var paren_level_stack_pointer_max_index10\
    \ = 0;\n  var paren_level_stack_pointer_max_index11 = 0;\n  var paren_level_stack_pointer_max_index12\
    \ = 0;\n  var paren_level_stack_pointer_max_index13 = 0;\n  var paren_level_stack_pointer_max_index14\
    \ = 0;\n  var paren_level_stack_pointer_max_index15 = 0;\n  var paren_level_stack_pointer_max_index16\
    \ = 0;\n  var paren_level_stack_pointer_max_index17 = 0;\n  var paren_level_stack_pointer_max_index18\
    \ = 0;\n  var paren_level_stack_pointer_max_index19 = 0;\n  var paren_level_stack_pointer_max_index20\
    \ = 0;\n  var paren_level_stack_pointer_max_index21 = 0;\n  var paren_level_stack_pointer_max_index22\
    \ = 0;\n  var paren_level_stack_pointer_max_index23 = 0;\n  var paren_level_stack_pointer_max_index24\
    \ = 0;\n  var paren_level_stack_pointer_max_index25 = 0;\n  var paren_level_stack_pointer_max_index26\
    \ = 0;\n  var paren_level_stack_pointer_max_index27 = 0;\n  var paren_level_stack_pointer_max_index28\
    \ = 0;\n  var paren_level_stack_pointer_max_index29 = 0;\n  var paren_level_stack_pointer_max_index30\
    \ = 0;\n  var paren_level_stack_pointer_max_index31 = 0;\n  var paren_level_stack_pointer_max_index32\
    \ = 0;\n  var paren_level_stack_pointer_max_index33 = 0;\n  var paren_level_stack_pointer_max_index34\
    \ = 0;\n  var paren_level_stack_pointer_max_index35 = 0;\n  var paren_level_stack_pointer_max_index36\
    \ = 0;\n  var paren_level_stack_pointer_max_index37 = 0;\n  var paren_level_stack_pointer_max_index38\
    \ = 0;\n  var paren_level_stack_pointer_max_index39 = 0;\n  var paren_level_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_zy8o81k.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_stack = [];\n  var paren_level = 0;\n  var\
    \ paren_stack_string = \"\";\n  var paren_level_string = \"\";\n  var paren_level_counter\
    \ = 0;\n  var paren_level_counter_string = \"\";\n  var paren_level_counter_string2\
    \ = \"\";\n  var paren_level_counter_string3 = \"\";\n  var paren_level_counter_string4\
    \ = \"\";\n  var paren_level_counter_string5 = \"\";\n  var paren_level_counter_string6\
    \ = \"\";\n  var paren_level_counter_string7 = \"\";\n  var paren_level_counter_string8\
    \ = \"\";\n  var paren_level_counter_string9 = \"\";\n  var paren_level_counter_string10\
    \ = \"\";\n  var paren_level_counter_string11 = \"\";\n  var paren_level_counter_string12\
    \ = \"\";\n  var paren_level_counter_string13 = \"\";\n  var paren_level_counter_string14\
    \ = \"\";\n  var paren_level_counter_string15 = \"\";\n  var paren_level_counter_string16\
    \ = \"\";\n  var paren_level_counter_string17 = \"\";\n  var paren_level_counter_string18\
    \ = \"\";\n  var paren_level_counter_string19 = \"\";\n  var paren_level_counter_string20\
    \ = \"\";\n  var paren_level_counter_string21 = \"\";\n  var paren_level_counter_string22\
    \ = \"\";\n  var paren_level_counter_string23 = \"\";\n  var paren_level_counter_string24\
    \ = \"\";\n  var paren_level_counter_string25 = \"\";\n  var paren_level_counter_string26\
    \ = \"\";\n  var paren_level_counter_string27 = \"\";\n  var paren_level_counter_string28\
    \ = \"\";\n  var paren_level_counter_string29 = \"\";\n  var paren_level_counter_string30\
    \ = \"\";\n  var paren_level_counter_string31 = \"\";\n  var paren_level_counter_string32\
    \ = \"\";\n  var paren_level_counter_string33 = \"\";\n  var paren_level_counter_string34\
    \ = \"\";\n  var paren_level_counter_string35 = \"\";\n  var paren_level_counter_string36\
    \ = \"\";\n  var paren_level_counter_string37 = \"\";\n  var paren_level_counter_string38\
    \ = \"\";\n  var paren_level_counter_string39 = \"\";\n  var paren_level_counter_string40\
    \ = \"\";\n  var paren_level_counter_string41 = \"\";\n  var paren_level_counter_string42\
    \ = \"\";\n  var paren_level_counter_string43 = \"\";\n  var paren_level_counter_string44\
    \ = \"\";\n  var paren_level_counter_string45 = \"\";\n  var paren_level_counter_string46\
    \ = \"\";\n  var paren_level_counter_string47 = \"\";\n  var paren_level_counter_string48\
    \ = \"\";\n  var paren_level_counter_string49 = \"\";\n  var paren_level_counter_string50\
    \ = \"\";\n  var paren_level_counter_string51 = \"\";\n  var paren_level_counter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8pqpp128.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \" \");\n    paren_string = paren_string.replace(/\\\
    s+$/g, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(/, \"\");\n    paren_string = paren_string.replace(/\\\
    )/, \"\");\n    paren_string = paren_string.replace(/\\(/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\)/, \"\");\n    paren_string = paren_string.replace(/\\\
    (/, \"\");\n    paren_string = paren_string.replace(/\\)/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjg9zjqm3.js:49\n    paren_string = paren_string.replace(/\\(\n\
    \                                        ^\n\nSyntaxError: Invalid regular expression:\
    \ missing /\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tvar paren_nesting_levels = [];\n\tvar paren_level_char;\n\tvar paren_nesting_level_char;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\
    \tvar paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar\
    \ paren_level_char_length;\n\tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\
    \tvar paren_nesting_level_char_length;\n\tvar paren_level_char_length;\n\tvar\
    \ paren_nesting_level_char_length;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpot8zcgqq.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_level_string\
    \ = \"\";\n    var paren_nesting_string = \"\";\n    var paren_level_length =\
    \ paren_string.length;\n    var paren_nesting_length = paren_level_length;\n \
    \   for(var i=0; i<paren_level_length; i++){\n        if(paren_string[i]==\"(\"\
    ){\n            paren_nesting++;\n            paren_level_string = paren_level_string.concat(paren_string[i]);\n\
    \        }\n        else if(paren_string[i]==\")\"){\n            paren_nesting--;\n\
    \            paren_level_string = paren_level_string.concat(paren_string[i]);\n\
    \        }\n        else if(paren_string[i]==\" \"){\n            paren_level_string\
    \ = paren_level_string.concat(paren_string[i]);\n        }\n        else if(paren_nesting==0){\n\
    \            nested_paren_levels.push(paren_level_string);\n            paren_level_string\
    \ = \"\";\n        }\n    }\n    return nested_paren_levels;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprnnbyq17.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmprnnbyq17.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_groups = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var paren_group_index = 0; paren_group_index < paren_groups.length;\
    \ paren_group_index++){\n        var paren_group = paren_groups[paren_group_index];\n\
    \        var paren_group_level = 0;\n        var paren_group_paren_levels = [];\n\
    \        var paren_group_paren_groups = [];\n        var paren_group_paren_groups_index\
    \ = 0;\n        var paren_group_paren_groups_length = paren_group_paren_groups.length;\n\
    \        while(paren_group_paren_groups_index < paren_group_paren_groups_length){\n\
    \            var paren_group_paren_group = paren_group_paren_groups[paren_group_paren_groups_index];\n\
    \            var paren_group_paren_group_paren_level = 0;\n            var paren_group_paren_group_paren_group_index\
    \ = 0;\n            var paren_group_paren_group_paren_groups_length = paren_group_paren_group_paren_groups.length;\n\
    \            while(paren_group_paren_group_paren_group_index < paren_group_paren_group_paren_groups_length){\n\
    \                var paren_group_paren_group_paren_group = paren_group_paren_group_paren_groups[paren_group_paren_group_paren_group_index];\n\
    \                var paren_group_paren_group_paren_group_paren_level = 0;\n  \
    \              var paren_group_paren_group_paren_group_paren_group_index = 0;\n\
    \                var paren_group_paren_group_paren_group_paren_groups_length =\
    \ paren_group_paren_group_paren_group_paren_groups.length;\n                while(paren_group_paren_group_paren_group_paren_group_index\
    \ < paren_group_paren_group_paren_group_paren_groups_length){\n              \
    \      var paren_group_paren_group_paren_group_paren_group = paren_group_paren_group_paren_group_paren_groups[paren_group_paren_group_paren_group_paren_group_index];\n\
    \                    if(paren_group_paren_group == paren_group_paren_group_paren_group){\n\
    \                        paren_group_paren_group_paren_group_paren_level = paren_group_paren_group_paren_group_index;\n\
    \                        break;\n                    }\n                    paren_group_paren_group_paren_group_paren_group_index++;\n\
    \                }\n                if(paren_group_paren_group_paren_group_paren_level\
    \ == 0){\n                    paren_group_paren_group_paren_groups.push(paren_group_paren_group);\n\
    \                    paren_group_paren_group_paren_group_paren_level = paren_group_paren\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwfbubpb2.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_nesting\
    \ = 0;\n    var paren_levels = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_level_counters_index = 0;\n    var\
    \ paren_level_counters_indexs = [];\n    var paren_level_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters = [];\n    var paren_level_counters_index_counters_index\
    \ = 0;\n    var paren_level_counters_index_counters_indexs = [];\n    var paren_level_counters_index_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters = [];\n   \
    \ var paren_level_counters_index_counters_index_counters_index = 0;\n    var paren_level_counters_index_counters_index_counters_indexs\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_indexs\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_indexs\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_indexs\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index_counter\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index_counters\
    \ = [];\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index\
    \ = 0;\n    var paren_level_counters_index_counters_index_counters_index_counters_index_counters_index_counters_index_counters_indexs\
    \ = [];\n    var paren_level_counters_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd68092nq.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_count2\
    \ = 0;\n    var paren_level_stack_count3 = 0;\n    var paren_level_stack_count4\
    \ = 0;\n    var paren_level_stack_count5 = 0;\n    var paren_level_stack_count6\
    \ = 0;\n    var paren_level_stack_count7 = 0;\n    var paren_level_stack_count8\
    \ = 0;\n    var paren_level_stack_count9 = 0;\n    var paren_level_stack_count10\
    \ = 0;\n    var paren_level_stack_count11 = 0;\n    var paren_level_stack_count12\
    \ = 0;\n    var paren_level_stack_count13 = 0;\n    var paren_level_stack_count14\
    \ = 0;\n    var paren_level_stack_count15 = 0;\n    var paren_level_stack_count16\
    \ = 0;\n    var paren_level_stack_count17 = 0;\n    var paren_level_stack_count18\
    \ = 0;\n    var paren_level_stack_count19 = 0;\n    var paren_level_stack_count20\
    \ = 0;\n    var paren_level_stack_count21 = 0;\n    var paren_level_stack_count22\
    \ = 0;\n    var paren_level_stack_count23 = 0;\n    var paren_level_stack_count24\
    \ = 0;\n    var paren_level_stack_count25 = 0;\n    var paren_level_stack_count26\
    \ = 0;\n    var paren_level_stack_count27 = 0;\n    var paren_level_stack_count28\
    \ = 0;\n    var paren_level_stack_count29 = 0;\n    var paren_level_stack_count30\
    \ = 0;\n    var paren_level_stack_count31 = 0;\n    var paren_level_stack_count32\
    \ = 0;\n    var paren_level_stack_count33 = 0;\n    var paren_level_stack_count34\
    \ = 0;\n    var paren_level_stack_count35 = 0;\n    var paren_level_stack_count36\
    \ = 0;\n    var paren_level_stack_count37 = 0;\n    var paren_level_stack_count38\
    \ = 0;\n    var paren_level_stack_count39 = 0;\n    var paren_level_stack_count40\
    \ = 0;\n    var paren_level_stack_count41 = 0;\n    var paren_level_stack_count42\
    \ = 0;\n    var paren_level_stack_count43 = 0;\n    var paren_level_stack_count44\
    \ = 0;\n    var paren_level_stack_count45 = 0;\n    var paren_level_stack_count46\
    \ = 0;\n    var paren_level_stack_count47 = 0;\n    var paren_level_stack_count48\
    \ = 0;\n    var paren_level_stack_count49 = 0;\n    var paren_level_stack_count50\
    \ = 0;\n    var paren_level_stack_count51 = 0;\n    var paren_level_stack_count52\
    \ = 0;\n    var paren_level_stack_count53 = 0;\n    var paren_level_stack_count54\
    \ = 0;\n    var paren_level_stack_count55\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4jonjzn6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_levels =\
    \ [];\n  var paren_level_counter = 0;\n  var paren_level_counters = [];\n  var\
    \ paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n \
    \ var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index = 0;\n  var paren_level_counters_indexs = [];\n\
    \  var paren_level_counters_index\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvz86iqo7.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_top\
    \ = 0;\n    var paren_stack_bottom = 0;\n    var paren_stack_max_level = 0;\n\
    \    var paren_stack_max_level_top = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_level_bottom = 0;\n    var paren_stack_max_level_bottom\
    \ = 0;\n    var paren_stack_max_\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1ybgag_5.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar nested_paren_stack = [];\n\tvar nested_paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack = [];\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\
    \tvar paren_stack_string = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren_stack_string\
    \ = \"\";\n\tvar paren_stack_string = \"\";\n\tvar paren\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxe3_wayp.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n   \
    \ paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \"\");\n    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\(|\\\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi7jdf5l0.js:47\n    paren_string = paren_string.replace(/\\(|\\\
    \n                                        ^\n\nSyntaxError: Invalid regular expression:\
    \ missing /\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level--;\n            paren_nesting++;\n\
    \        }\n        if(paren_level == 0 && paren_nesting > 0){\n            paren_nesting--;\n\
    \        }\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5xz9vg9a.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xz9vg9a.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_level_counters_index = 0;\n    var\
    \ paren_level_counters_indexs = [];\n    var paren_level_counters_length = 0;\n\
    \    var paren_level_counters_lengths = [];\n    var paren_level_counters_max\
    \ = 0;\n    var paren_level_counters_maxs = [];\n    var paren_level_counters_max_index\
    \ = 0;\n    var paren_level_counters_max_indexs = [];\n    var paren_level_counters_max_length\
    \ = 0;\n    var paren_level_counters_max_lengths = [];\n    var paren_level_counters_max_max\
    \ = 0;\n    var paren_level_counters_max_maxs = [];\n    var paren_level_counters_max_max_index\
    \ = 0;\n    var paren_level_counters_max_max_indexs = [];\n    var paren_level_counters_max_max_length\
    \ = 0;\n    var paren_level_counters_max_max_lengths = [];\n    var paren_level_counters_max_max_max\
    \ = 0;\n    var paren_level_counters_max_max_maxs = [];\n    var paren_level_counters_max_max_max_index\
    \ = 0;\n    var paren_level_counters_max_max_max_indexs = [];\n    var paren_level_counters_max_max_max_length\
    \ = 0;\n    var paren_level_counters_max_max_max_lengths = [];\n    var paren_level_counters_max_max_max_max\
    \ = 0;\n    var paren_level_counters_max_max_max_maxs = [];\n    var paren_level_counters_max_max_max_max_index\
    \ = 0;\n    var paren_level_counters_max_max_max_max_indexs = [];\n    var paren_level_counters_max_max_max_max_length\
    \ = 0;\n    var paren_level_counters_max_max_max_max_lengths = [];\n    var paren_level_counters_max_max_max_max_max\
    \ = 0;\n    var paren_level_counters_max_max_max_max_maxs = [];\n    var paren_level_counters_max_max_max_max_max_index\
    \ = 0;\n    var paren_level_counters_max_max_max_max_max_indexs = [];\n    var\
    \ paren_level_counters_max_max_max_max_max_length = 0;\n    var paren_level_counters_max_max_max_max_max_lengths\
    \ = [];\n    var paren_level_counters_max_max_max_max_max_max = 0;\n    var paren_level_counters_max_max_max_max_max_maxs\
    \ = [];\n    var paren_level_counters_max_max_max_max_max_max_index = 0;\n   \
    \ var paren_level_counters_max_max_max_max_max_max_indexs = [];\n    var paren_level_counters_max_max_max_max_max_max_length\
    \ = 0;\n    var paren_level_counters_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp61gvy6ok.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index2 = 0;\n  var paren_level_stack_pointer_max_index3\
    \ = 0;\n  var paren_level_stack_pointer_max_index4 = 0;\n  var paren_level_stack_pointer_max_index5\
    \ = 0;\n  var paren_level_stack_pointer_max_index6 = 0;\n  var paren_level_stack_pointer_max_index7\
    \ = 0;\n  var paren_level_stack_pointer_max_index8 = 0;\n  var paren_level_stack_pointer_max_index9\
    \ = 0;\n  var paren_level_stack_pointer_max_index10 = 0;\n  var paren_level_stack_pointer_max_index11\
    \ = 0;\n  var paren_level_stack_pointer_max_index12 = 0;\n  var paren_level_stack_pointer_max_index13\
    \ = 0;\n  var paren_level_stack_pointer_max_index14 = 0;\n  var paren_level_stack_pointer_max_index15\
    \ = 0;\n  var paren_level_stack_pointer_max_index16 = 0;\n  var paren_level_stack_pointer_max_index17\
    \ = 0;\n  var paren_level_stack_pointer_max_index18 = 0;\n  var paren_level_stack_pointer_max_index19\
    \ = 0;\n  var paren_level_stack_pointer_max_index20 = 0;\n  var paren_level_stack_pointer_max_index21\
    \ = 0;\n  var paren_level_stack_pointer_max_index22 = 0;\n  var paren_level_stack_pointer_max_index23\
    \ = 0;\n  var paren_level_stack_pointer_max_index24 = 0;\n  var paren_level_stack_pointer_max_index25\
    \ = 0;\n  var paren_level_stack_pointer_max_index26 = 0;\n  var paren_level_stack_pointer_max_index27\
    \ = 0;\n  var paren_level_stack_pointer_max_index28 = 0;\n  var paren_level_stack_pointer_max_index29\
    \ = 0;\n  var paren_level_stack_pointer_max_index30 = 0;\n  var paren_level_stack_pointer_max_index31\
    \ = 0;\n  var paren_level_stack_pointer_max_index32 = 0;\n  var paren_level_stack_pointer_max_index33\
    \ = 0;\n  var paren_level_stack_pointer_max_index34 = 0;\n  var paren_level_stack_pointer_max_index35\
    \ = 0;\n  var paren_level_stack_pointer_max_index36 = 0;\n  var paren_level_stack_pointer_max_index37\
    \ = 0;\n  var paren_level_stack_pointer_max_index38 = 0;\n  var paren_level_stack_pointer_max_index39\
    \ = 0;\n  var paren_level_stack_pointer_max_index40 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph8mf9a3y.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i = 0; i <\
    \ paren_string.length; i++){\n    var char = paren_string[i];\n    if(char ==\
    \ \"(\"){\n      paren_stack.push(paren_level);\n      paren_level++;\n    }else\
    \ if(char == \")\"){\n      var current_level = paren_stack.pop();\n      if(current_level\
    \ > paren_level){\n        nested_parens.push(paren_level);\n      }\n      paren_level\
    \ = current_level;\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6cmvng3i.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6cmvng3i.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var max_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = [];\n    var paren_levels_index[0] = 0;\n\
    \    var paren_levels_index[1] = 0;\n    var paren_levels_index[2] = 0;\n    var\
    \ paren_levels_index[3] = 0;\n    var paren_levels_index[4] = 0;\n    var paren_levels_index[5]\
    \ = 0;\n    var paren_levels_index[6] = 0;\n    var paren_levels_index[7] = 0;\n\
    \    var paren_levels_index[8] = 0;\n    var paren_levels_index[9] = 0;\n    var\
    \ paren_levels_index[10] = 0;\n    var paren_levels_index[11] = 0;\n    var paren_levels_index[12]\
    \ = 0;\n    var paren_levels_index[13] = 0;\n    var paren_levels_index[14] =\
    \ 0;\n    var paren_levels_index[15] = 0;\n    var paren_levels_index[16] = 0;\n\
    \    var paren_levels_index[17] = 0;\n    var paren_levels_index[18] = 0;\n  \
    \  var paren_levels_index[19] = 0;\n    var paren_levels_index[20] = 0;\n    var\
    \ paren_levels_index[21] = 0;\n    var paren_levels_index[22] = 0;\n    var paren_levels_index[23]\
    \ = 0;\n    var paren_levels_index[24] = 0;\n    var paren_levels_index[25] =\
    \ 0;\n    var paren_levels_index[26] = 0;\n    var paren_levels_index[27] = 0;\n\
    \    var paren_levels_index[28] = 0;\n    var paren_levels_index[29] = 0;\n  \
    \  var paren_levels_index[30] = 0;\n    var paren_levels_index[31] = 0;\n    var\
    \ paren_levels_index[32] = 0;\n    var paren_levels_index[33] = 0;\n    var paren_levels_index[34]\
    \ = 0;\n    var paren_levels_index[35] = 0;\n    var paren_levels_index[36] =\
    \ 0;\n    var paren_levels_index[37] = 0;\n    var paren_levels_index[38] = 0;\n\
    \    var paren_levels_index[39] = 0;\n    var paren_levels_index[40] = 0;\n  \
    \  var paren_levels_index[41] = 0;\n    var paren_levels_index[42] = 0;\n    var\
    \ paren_levels_index[43] = 0;\n    var paren_levels_index[44] = 0;\n    var paren_levels_index[45]\
    \ = 0;\n    var paren_levels_index[46] = 0;\n    var paren_levels_index[47] =\
    \ 0;\n    var paren_levels_index[48] = 0;\n    var paren_levels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprbdsuk9q.js:12\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = [];\n  var paren_level = 0;\n  var paren_level_count = 0;\n  var paren_level_char;\n\
    \  var paren_level_char_length;\n  var paren_level_char_position;\n  var paren_level_char_position_count;\n\
    \  var paren_level_char_position_char;\n  var paren_level_char_position_char_length;\n\
    \  var paren_level_char_position_char_position;\n  var paren_level_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char;\n  var paren_level_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position;\n  var paren_level_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char;\n  var paren_level_char_position_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position_char_position;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_char;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_char_length;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_char_position;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_char_position_count;\n\
    \  var paren_level_char_position_char_position_char_position_char_position_char_position_char_position_char_position_char_position_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps0csyesx.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvwaipbml.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var paren_stack = [];\n  var paren_levels = [];\n  var paren_levels_stack\
    \ = [];\n  var paren_levels_stack_index = 0;\n  var paren_level_stack_index =\
    \ 0;\n  var paren_level_stack = [];\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index\
    \ = 0;\n  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n\
    \  var paren_level_stack_index = 0;\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5tvidjgv.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i]==\"(\"){\n\t\t\tparen_stack.push(paren_string[i]);\n\t\t\
    }\n\t\telse if(paren_string[i]==\")\"){\n\t\t\tnested_level--;\n\t\t\tif(nested_level<0){\n\
    \t\t\t\tthrow new Error(\"Unbalanced parenthesis\");\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(paren_string[i]==\" \"){\n\t\t\tnested_level++;\n\t\t}\n\t}\n\treturn paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3cdmxl8h.js:16\n\t\t\t\tthrow new Error(\"Unbalanced parenthesis\"\
    );\n\t\t\t\t^\n\nError: Unbalanced parenthesis\n    at parse_nested_parens (/tmp/tmp3cdmxl8h.js:16:11)\n\
    \    at test (/tmp/tmp3cdmxl8h.js:31:20)\n    at Object.<anonymous> (/tmp/tmp3cdmxl8h.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char === '('){\n    \
    \        paren_stack.push(paren_level);\n            paren_level_stack.push(paren_level_stack_index);\n\
    \            paren_level++;\n        }else if(char === ')'){\n            paren_level--;\n\
    \            if(paren_level === 0){\n                paren_level_stack_index--;\n\
    \            }\n        }\n        if(paren_level > max_level){\n            max_level\
    \ = paren_level;\n        }\n    }\n    return max_level;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr8prj_e_.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr8prj_e_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps89s2m4f.js:65\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char == \"(\"){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }else if(char == \")\"){\n            var\
    \ paren_level = paren_stack.pop();\n            if(paren_level == 0){\n      \
    \          nested_parens.push(paren_count);\n            }\n            paren_count--;\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpkvz7v_pt.js:32:10)\n    at Object.<anonymous> (/tmp/tmpkvz7v_pt.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(nested_level);\n\t\t\
    \tnested_level++;\n\t\t}else if(paren_string[i] == \")\"){\n\t\t\tnested_level\
    \ = paren_stack.pop();\n\t\t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgif5bjrv.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgif5bjrv.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_count++;\n\t\t}\n\t\t\
    else if(paren_string[i] == \")\"){\n\t\t\tparen_count--;\n\t\t}\n\t\telse if(paren_count\
    \ == 0){\n\t\t\tnested_parens[paren_level] = paren_level;\n\t\t\tparen_count =\
    \ 0;\n\t\t\tparen_level++;\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp8y_lzlz9.js:31:10)\n    at Object.<anonymous> (/tmp/tmp8y_lzlz9.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nesting_levels = [];\n    var paren_level_counter = 0;\n\
    \    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var\
    \ paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n\
    \    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n\
    \    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n  \
    \  var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters\
    \ = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n\
    \    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var\
    \ paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n\
    \    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n\
    \    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n  \
    \  var paren_level_counter = 0;\n    var paren_nesting_counter = 0;\n    var paren_level_counters\
    \ = [];\n    var paren_nesting_counters = [];\n    var paren_level_counter = 0;\n\
    \    var paren_nesting_counter = 0;\n    var paren_level_counters = [];\n    var\
    \ paren_nesting_counters = [];\n    var paren_level_counter = 0;\n    var paren_nesting_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_nesting_counters = [];\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoixs2ig6.js:86\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_lengths = [];\n    var paren_level_lengths_index\
    \ = 0;\n    var paren_level_lengths_max = 0;\n    var paren_level_lengths_max_index\
    \ = 0;\n    var paren_level_lengths_max_count = 0;\n    var paren_level_lengths_max_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count = 0;\n    var paren_level_lengths_max_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_lengths_max_count_count_index = 0;\n    var paren_level_lengths_max_count_count_index\
    \ = 0;\n    var paren_level_length\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph9vlj0ix.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_stack = [];\n    var paren_level_counters_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes = [];\n    var paren_level_counters_stack_indexes_stack\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_index = 0;\n    var\
    \ paren_level_counters_stack_indexes_stack_indexes = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_stack_indexes_stack_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_stack_index\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3rn38qvb.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tfor(var i = 0; i < paren_string.length; i++){\n\
    \t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == \")\"){\n\t\t\tparen_level--;\n\t\t}\n\t\telse if(paren_level == 0){\n\t\t\
    \tnested_parens.push(paren_level);\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmppm2biaww.js:28:10)\n    at Object.<anonymous> (/tmp/tmppm2biaww.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_string_length = \"\";\n    var paren_levels_string_length_max\
    \ = 0;\n    var paren_levels_string_length_min = 0;\n    var paren_levels_string_length_avg\
    \ = 0;\n    var paren_levels_string_length_median = 0;\n    var paren_levels_string_length_min_index\
    \ = 0;\n    var paren_levels_string_length_max_index = 0;\n    var paren_levels_string_length_avg_index\
    \ = 0;\n    var paren_levels_string_length_median_index = 0;\n    var paren_levels_string_length_min_string\
    \ = \"\";\n    var paren_levels_string_length_max_string = \"\";\n    var paren_levels_string_length_avg_string\
    \ = \"\";\n    var paren_levels_string_length_median_string = \"\";\n    var paren_levels_string_length_min_string_length\
    \ = \"\";\n    var paren_levels_string_length_max_string_length = \"\";\n    var\
    \ paren_levels_string_length_avg_string_length = \"\";\n    var paren_levels_string_length_median_string_length\
    \ = \"\";\n    var paren_levels_string_length_min_string_length_length = \"\"\
    ;\n    var paren_levels_string_length_max_string_length_length = \"\";\n    var\
    \ paren_levels_string_length_avg_string_length_length = \"\";\n    var paren_levels_string_length_median_string_length_length\
    \ = \"\";\n    var paren_levels_string_length_min_string_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_avg_string_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_median_string_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_min_string_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_avg_string_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_median_string_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_min_string_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_avg_string_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_median_string_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_min_string_length_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_length_length_length_length_length\
    \ = \"\";\n    var paren_levels_string_length_avg_string_length_length_length_length_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8cctof9u.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tparen_string = paren_string.replace(/\\s+/g,\
    \ \" \");\n\tparen_string = paren_string.replace(/\\s+$/g, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/^\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/\\s+/, \"\");\n\tparen_string = paren_string.replace(/^\\\
    s+/, \"\");\n\tparen_string = paren_string.replace(/\\s+/, \"\");\n\tparen_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+/, \"\");\n\tparen_string\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9c2uev0q.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_groups\
    \ = [];\n    var paren_group_level = 0;\n    var paren_group_nesting = 0;\n  \
    \  var paren_group_groups = [];\n    var paren_group_group_level = 0;\n    var\
    \ paren_group_group_nesting = 0;\n    var paren_group_group_groups = [];\n   \
    \ var paren_group_group_group_level = 0;\n    var paren_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx4xjnn5t.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i]==\"(\"){\n\t\t\tnested_paren_stack.push(nested_paren_level);\n\
    \t\t}\n\t\telse if(paren_string[i]==\")\"){\n\t\t\tnested_paren_level = nested_paren_stack.pop();\n\
    \t\t}\n\t}\n\treturn nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6vylvomu.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6vylvomu.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else{\n            nested_parens.push(paren_level);\n    \
    \    }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpeya8ecei.js:31:10)\n    at Object.<anonymous> (/tmp/tmpeya8ecei.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level--;\n            if(paren_level\
    \ == 0){\n                paren_levels.push(paren_stack);\n            }\n   \
    \     }\n    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n\
    \    1,\n    1,\n    0,\n    1,\n    2,\n    0,\n    0,\n    1,\n    2,\n    1,\n\
    \    1\n  ],\n  [\n    0,\n    1,\n    1,\n    0,\n    1,\n    2,\n    0,\n  \
    \  0,\n    1,\n    2,\n    1,\n    1\n  ],\n  [\n    0,\n    1,\n    1,\n    0,\n\
    \    1,\n    2,\n    0,\n    0,\n    1,\n    2,\n    1,\n    1\n  ],\n  [\n  \
    \  0,\n    1,\n    1,\n    0,\n    1,\n    2,\n    0,\n    0,\n    1,\n    2,\n\
    \    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n \
    \ 3\n]\n    at test (/tmp/tmpe24vgqj8.js:30:10)\n    at Object.<anonymous> (/tmp/tmpe24vgqj8.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [\n\
    \      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ],\n    [\n     \
    \ 0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ],\n    [\n      0, 1,\
    \ 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ],\n    [\n      0, 1, 1, 0,\
    \ 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ]\n  ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_stacks = [];\n    var paren_levels_stack = [];\n    var\
    \ paren_levels_stacks = [];\n    var paren_levels_stacks_stack = [];\n    var\
    \ paren_levels_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stack =\
    \ [];\n    var paren_levels_stacks_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stack = [];\n    var\
    \ paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack =\
    \ [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdxc675sn.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_length\
    \ = 0;\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_stack_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq9lxmx59.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_stack_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4xz81bgi.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar max_level = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\
    \t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] == \"\
    (\"){\n\t\t\tparen_stack.push(paren_levels.length);\n\t\t\tparen_levels.push(level);\n\
    \t\t\tlevel++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tlevel = paren_stack.pop();\n\
    \t\t\tmax_level = Math.max(level, max_level);\n\t\t\tparen_levels[level] = level;\n\
    \t\t}\n\t}\n\t\n\treturn max_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuh28dipp.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuh28dipp.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_stack_string = \"\";\n\tvar paren_level_string = \"\";\n\t\
    var paren_level_counter = 0;\n\tvar paren_level_counter_string = \"\";\n\tvar\
    \ paren_level_counter_string2 = \"\";\n\tvar paren_level_counter_string3 = \"\"\
    ;\n\tvar paren_level_counter_string4 = \"\";\n\tvar paren_level_counter_string5\
    \ = \"\";\n\tvar paren_level_counter_string6 = \"\";\n\tvar paren_level_counter_string7\
    \ = \"\";\n\tvar paren_level_counter_string8 = \"\";\n\tvar paren_level_counter_string9\
    \ = \"\";\n\tvar paren_level_counter_string10 = \"\";\n\tvar paren_level_counter_string11\
    \ = \"\";\n\tvar paren_level_counter_string12 = \"\";\n\tvar paren_level_counter_string13\
    \ = \"\";\n\tvar paren_level_counter_string14 = \"\";\n\tvar paren_level_counter_string15\
    \ = \"\";\n\tvar paren_level_counter_string16 = \"\";\n\tvar paren_level_counter_string17\
    \ = \"\";\n\tvar paren_level_counter_string18 = \"\";\n\tvar paren_level_counter_string19\
    \ = \"\";\n\tvar paren_level_counter_string20 = \"\";\n\tvar paren_level_counter_string21\
    \ = \"\";\n\tvar paren_level_counter_string22 = \"\";\n\tvar paren_level_counter_string23\
    \ = \"\";\n\tvar paren_level_counter_string24 = \"\";\n\tvar paren_level_counter_string25\
    \ = \"\";\n\tvar paren_level_counter_string26 = \"\";\n\tvar paren_level_counter_string27\
    \ = \"\";\n\tvar paren_level_counter_string28 = \"\";\n\tvar paren_level_counter_string29\
    \ = \"\";\n\tvar paren_level_counter_string30 = \"\";\n\tvar paren_level_counter_string31\
    \ = \"\";\n\tvar paren_level_counter_string32 = \"\";\n\tvar paren_level_counter_string33\
    \ = \"\";\n\tvar paren_level_counter_string34 = \"\";\n\tvar paren_level_counter_string35\
    \ = \"\";\n\tvar paren_level_counter_string36 = \"\";\n\tvar paren_level_counter_string37\
    \ = \"\";\n\tvar paren_level_counter_string38 = \"\";\n\tvar paren_level_counter_string39\
    \ = \"\";\n\tvar paren_level_counter_string40 = \"\";\n\tvar paren_level_counter_string41\
    \ = \"\";\n\tvar paren_level_counter_string42 = \"\";\n\tvar paren_level_counter_string43\
    \ = \"\";\n\tvar paren_level_counter_string44 = \"\";\n\tvar paren_level_counter_string45\
    \ = \"\";\n\tvar paren_level_counter_string46 = \"\";\n\tvar paren_level_counter_string47\
    \ = \"\";\n\tvar paren_level_counter_string48 = \"\";\n\tvar paren_level_counter_string49\
    \ = \"\";\n\tvar paren_level_counter_string50 = \"\";\n\tvar paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpomy_pvif.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var nested_paren_stack = [];\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_stack_string = \"\";\n  var paren_level_string\
    \ = \"\";\n  var paren_level_counter = 0;\n  var paren_level_counter_string =\
    \ \"\";\n  var paren_level_counter_max = 0;\n  var paren_level_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter = 0;\n  var paren_level_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max = 0;\n  var paren_level_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter = 0;\n  var paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max = 0;\n  var paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \  var paren_level_counter_max_counter_max_counter_max_counter_string = \"\";\n\
    \  var paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n  var\
    \ paren_level_counter_max_counter_max_counter_max_counter_max_string = \"\";\n\
    \  var paren_level_counter_max_counter_max_counter_max_counter_max_counter = 0;\n\
    \  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n  var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n  var paren_level_counter_max_counter_max_counter_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt1ouwjhv.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_level = 0;\n    var paren_char;\n \
    \   var paren_char_count = 0;\n    var paren_char_count_in_paren = 0;\n    var\
    \ paren_char_count_in_paren_group = 0;\n    var paren_char_count_in_paren_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group = 0;\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group = 0;\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group = 0;\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group =\
    \ 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpue29eg8t.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(c);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level--;\n         \
    \   if(paren_level == 0){\n                nested_paren_stack.push(paren_stack);\n\
    \                paren_stack = [];\n            }\n        }\n    }\n    return\
    \ nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    '(',\n\
    \    '(',\n    '('\n  ],\n  [\n    '(',\n    '(',\n    '('\n  ],\n  [\n    '('\n\
    \  ],\n  [\n    '(',\n    '(',\n    '(',\n    '(',\n    '('\n  ]\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqdacuk2o.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqdacuk2o.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ '(',\
    \ '(', '(' ],\n    [ '(', '(', '(' ],\n    [ '(' ],\n    [ '(', '(', '(', '(',\
    \ '(' ]\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_max = 0;\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter = 0;\n    var paren_level_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqkukq65m.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tparen_level\
    \ = paren_stack.pop();\n\t\t}\n\t\telse if(paren_string[i] == \" \"){\n\t\t\t\
    if(paren_stack.length == 0){\n\t\t\t\tnested_parens.push(paren_level);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7bzaiq0z.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7bzaiq0z.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_groups = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group == \"(\"){\n            nested_paren_level++;\n\
    \        }else if(paren_group == \")\"){\n            nested_paren_level--;\n\
    \        }\n        if(nested_paren_level == 0){\n            nested_paren_groups.push(paren_group);\n\
    \        }\n    }\n    return nested_paren_groups.length;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwlj8k1li.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwlj8k1li.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n      \
    \  if(c == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(paren_stack.length > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwlv9ld7j.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwlv9ld7j.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char === '('){\n    \
    \        paren_stack.push(level);\n            level++;\n        }\n        else\
    \ if(char === ')'){\n            level = paren_stack.pop();\n        }\n     \
    \   else if(char === ' ' && level > 0){\n            nested_parens.push(level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9i3knn2k.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9i3knn2k.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaovnv9hf.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_level++;\n        }\n        else if(c == ')'){\n            paren_level--;\n\
    \            paren_levels.push(paren_level);\n        }\n        else if(paren_stack.length\
    \ > 0){\n            var paren_level = paren_stack.pop();\n            if(paren_level\
    \ == 0){\n                nested_parens.push(paren_levels.length);\n         \
    \   }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8ux0gxgg.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8ux0gxgg.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_string = \"\";\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_strings = paren_string.split(\" \");\n    for(var\
    \ i = 0; i < paren_level_stack_strings.length; i++){\n        var paren_level_stack_string\
    \ = paren_level_stack_strings[i];\n        if(paren_level_stack_string.indexOf(\"\
    (\") != -1){\n            paren_level_stack_string_index = paren_level_stack_string.indexOf(\"\
    (\");\n            paren_level_stack_string = paren_level_stack_string.substr(0,\
    \ paren_level_stack_string_index);\n        }\n        paren_level_stack_string\
    \ = paren_level_stack_string.trim();\n        if(paren_level_stack_string.indexOf(\"\
    )\") != -1){\n            paren_level_stack_string_index = paren_level_stack_string.indexOf(\"\
    )\");\n            paren_level_stack_string = paren_level_stack_string.substr(0,\
    \ paren_level_stack_string_index);\n        }\n        paren_level_stack_string\
    \ = paren_level_stack_string.trim();\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    )/g,\"\");\n        paren_level_stack_string = paren_level_stack_string.replace(/\\\
    (/g,\"\");\n        paren_level_\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwf7i2e5h.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_xa2zn03.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0e9g0wy3.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_index2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_index4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_index6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_index8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_index10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_index12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_index14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_index16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_index18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_index20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = 0;\n    var paren_stack_pointer_max_index22 = 0;\n    var paren_stack_pointer_max_index23\
    \ = 0;\n    var paren_stack_pointer_max_index24 = 0;\n    var paren_stack_pointer_max_index25\
    \ = 0;\n    var paren_stack_pointer_max_index26 = 0;\n    var paren_stack_pointer_max_index27\
    \ = 0;\n    var paren_stack_pointer_max_index28 = 0;\n    var paren_stack_pointer_max_index29\
    \ = 0;\n    var paren_stack_pointer_max_index30 = 0;\n    var paren_stack_pointer_max_index31\
    \ = 0;\n    var paren_stack_pointer_max_index32 = 0;\n    var paren_stack_pointer_max_index33\
    \ = 0;\n    var paren_stack_pointer_max_index34 = 0;\n    var paren_stack_pointer_max_index35\
    \ = 0;\n    var paren_stack_pointer_max_index36 = 0;\n    var paren_stack_pointer_max_index37\
    \ = 0;\n    var paren_stack_pointer_max_index38 = 0;\n    var paren_stack_pointer_max_index39\
    \ = 0;\n    var paren_stack_pointer_max_index40 = 0;\n    var paren_stack_pointer_max_index41\
    \ = 0;\n    var paren_stack_pointer_max_index42 = 0;\n    var paren_stack_pointer_max_index43\
    \ = 0;\n    var paren_stack_pointer_max_index44 = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplqotld2m.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level\
    \ = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_len = 0;\n    var paren_level_stack_len_index = 0;\n\
    \    var paren_level_stack_len_index2 = 0;\n    var paren_level_stack_len_index3\
    \ = 0;\n    var paren_level_stack_len_index4 = 0;\n    var paren_level_stack_len_index5\
    \ = 0;\n    var paren_level_stack_len_index6 = 0;\n    var paren_level_stack_len_index7\
    \ = 0;\n    var paren_level_stack_len_index8 = 0;\n    var paren_level_stack_len_index9\
    \ = 0;\n    var paren_level_stack_len_index10 = 0;\n    var paren_level_stack_len_index11\
    \ = 0;\n    var paren_level_stack_len_index12 = 0;\n    var paren_level_stack_len_index13\
    \ = 0;\n    var paren_level_stack_len_index14 = 0;\n    var paren_level_stack_len_index15\
    \ = 0;\n    var paren_level_stack_len_index16 = 0;\n    var paren_level_stack_len_index17\
    \ = 0;\n    var paren_level_stack_len_index18 = 0;\n    var paren_level_stack_len_index19\
    \ = 0;\n    var paren_level_stack_len_index20 = 0;\n    var paren_level_stack_len_index21\
    \ = 0;\n    var paren_level_stack_len_index22 = 0;\n    var paren_level_stack_len_index23\
    \ = 0;\n    var paren_level_stack_len_index24 = 0;\n    var paren_level_stack_len_index25\
    \ = 0;\n    var paren_level_stack_len_index26 = 0;\n    var paren_level_stack_len_index27\
    \ = 0;\n    var paren_level_stack_len_index28 = 0;\n    var paren_level_stack_len_index29\
    \ = 0;\n    var paren_level_stack_len_index30 = 0;\n    var paren_level_stack_len_index31\
    \ = 0;\n    var paren_level_stack_len_index32 = 0;\n    var paren_level_stack_len_index33\
    \ = 0;\n    var paren_level_stack_len_index34 = 0;\n    var paren_level_stack_len_index35\
    \ = 0;\n    var paren_level_stack_len_index36 = 0;\n    var paren_level_stack_len_index37\
    \ = 0;\n    var paren_level_stack_len_index38 = 0;\n    var paren_level_stack_len_index39\
    \ = 0;\n    var paren_level_stack_len_index40 = 0;\n    var paren_level_stack_len_index41\
    \ = 0;\n    var paren_level_stack_len_index42 = 0;\n    var paren_level_stack_len_index43\
    \ = 0;\n    var paren_level_stack_len_index44 = 0;\n    var paren_level_stack_len_index45\
    \ = 0;\n    var paren_level_stack_len_index46 = 0;\n    var paren_level_stack_len_index47\
    \ = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0zfl7l1m.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_level = [];\n\
    \    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_len = 0;\n    var paren_level_stack_len_index = 0;\n    var\
    \ paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index = 0;\n \
    \   var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index =\
    \ 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n    var paren_level_stack_len_index\
    \ = 0;\n    var paren_level_stack_len_len = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf4_zs4kx.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_index\
    \ = [];\n\t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i]\
    \ == \"(\"){\n\t\t\tparen_stack.push(paren_string[i]);\n\t\t\tparen_levels.push(nested_level);\n\
    \t\t\tparen_levels_index.push(i);\n\t\t}\n\t\telse if(paren_string[i] == \")\"\
    ){\n\t\t\tvar current_level = paren_levels[paren_stack.length-1];\n\t\t\tvar current_index\
    \ = paren_levels_index[paren_stack.length-1];\n\t\t\t\n\t\t\tif(current_level\
    \ > nested_level){\n\t\t\t\tnested_level = current_level;\n\t\t\t}\n\t\t\t\n\t\
    \t\tparen_stack.pop();\n\t\t\tparen_levels_index.pop();\n\t\t}\n\t}\n\t\n\treturn\
    \ nested_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsoezoktg.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsoezoktg.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == \"(\"){\n            paren_stack.push(paren_level);\n       \
    \     paren_level++;\n        }\n        else if(char == \")\"){\n           \
    \ paren_level = paren_stack.pop();\n        }\n        else if(char == \" \"){\n\
    \            if(paren_stack.length == 0){\n                nested_parens.push(paren_level);\n\
    \            }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp35_bws04.js:33:10)\n    at Object.<anonymous> (/tmp/tmp35_bws04.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_value\
    \ = -1;\n    var paren_stack_pointer_max_value_index = 0;\n    var paren_stack_pointer_max_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_index = 0;\n    var paren_stack_pointer_max_value_length_max\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_index = 0;\n    var paren_stack_pointer_max_value_length_max_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_index = 0;\n  \
    \  var paren_stack_pointer_max_value_length_max_value_length = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max = 0;\n\
    \    var paren_stack_pointer_max_value_length_max_value_length_max_index = 0;\n\
    \    var paren_stack_pointer_max_value_length_max_value_length_max_value = 0;\n\
    \    var paren_stack_pointer_max_value_length_max_value_length_max_index = 0;\n\
    \    var paren_stack_pointer_max_value_length_max_value_length_max_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_max\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_max_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_max_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_max_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_max_value_length_max_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_max_value_length_max_value_length_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4n8rp4wk.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797794
