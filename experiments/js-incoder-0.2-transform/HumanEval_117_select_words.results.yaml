language: js
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(!word.length){\n\t\t\t\
    words.push(word);\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tlet count = 0;\n\t\t\t\
    for(let j = 0; j < word.length; j++){\n\t\t\t\tif(word[j] === \"a\"){\n\t\t\t\t\
    \tcount++;\n\t\t\t\t}\n\t\t\t\telse if(word[j] === \"e\"){\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t\telse if(word[j] === \"i\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\
    \t\t\t\telse if(word[j] === \"o\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\
    \ if(word[j] === \"u\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count\
    \ === n){\n\t\t\t\twords.push(word);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpavmpgggh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpavmpgggh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet j = 0;\n\t\
    \twhile(j < n){\n\t\t\tif(letter == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"a\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"e\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"i\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"o\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"u\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"y\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"s\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"t\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"h\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"d\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"n\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"g\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"f\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"b\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"v\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"k\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"j\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"q\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"p\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"w\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"z\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"x\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"c\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"y\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"k\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"v\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"b\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"n\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"d\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"r\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"q\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"p\")\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm06htm2h.js:137\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n        else if(s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    !\"){\n            words.push(s.substr(0, i));\n            s = s.substr(i + 1);\n\
    \        }\n        else if(s.charAt(i) == n){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpa_j7kyr8.js:41:10)\n    at Object.<anonymous> (/tmp/tmpa_j7kyr8.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substring(i+1);\n        }\n    }\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \" && words.length == n){\n\
    \            words.push(s.substr(0, i));\n            s = s.substring(i+1);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpdygts7rt.js:39:10)\n    at Object.<anonymous> (/tmp/tmpdygts7rt.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet chars = s.split('');\n\tfor(let i = 0; i < chars.length;\
    \ i++){\n\t\tlet char = chars[i];\n\t\tlet count = 0;\n\t\tfor(let j = 0; j <\
    \ char.length; j++){\n\t\t\tif(char.charAt(j) === 'a'){\n\t\t\t\tcount++;\n\t\t\
    \t}\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(chars.slice(index, i+1));\n\
    \t\t\tindex = i+1;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq8edfq6f.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpq8edfq6f.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\
    \tlist.push(word);\n\t\t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpm6wil_dq.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm6wil_dq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  if(s.length == 0){\n\
    \    return words;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && words.length == n){\n      words.push(s.substr(0, i));\n      s\
    \ = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  return words;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7ah3hygj.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7ah3hygj.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  if(s.length == 0){\n\
    \    return result;\n  }\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      count++;\n    }\n    if(count == n){\n \
    \     result.push(s.substr(i, s.length));\n      count = 0;\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5rkg_xsi.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5rkg_xsi.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var index = 0;\n\
    \    while(index < s.length){\n        var word = s.substring(index, index+n);\n\
    \        if(word.length == n){\n            words.push(word);\n            index\
    \ += n;\n        }\n        else{\n            index += word.length;\n       \
    \ }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpg7xb4c3v.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg7xb4c3v.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\tif(s.charAt(i) == \" \" && j == s.length-1){\n\t\t\
    \t\t\twords.push(s.substr(i, j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpejjj5rlo.js:38:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpejjj5rlo.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i = 0;\
    \ i<s.length; i++){\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(s.charAt(i) ==\
    \ \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\twords.push(s.substring(i, j));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    \n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  '',\n  '',\n  'ary h',\n  'ary had ',\n  'ary had a little l'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfo32s7iu.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfo32s7iu.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '',\
    \ '', '', 'ary h', 'ary had ', 'ary had a little l' ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  if(s.length == 0){\n\
    \    return result;\n  }\n  \n  for(var i = 0; i<s.length; i++){\n    var word\
    \ = s.substr(i, n);\n    result.push(word);\n  }\n  \n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb',\n  'amb',\n  'mb',\n  'b'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn_wpjas5.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn_wpjas5.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h', 'y ha',\n    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a\
    \ li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam',\
    \ 'lamb', 'amb',\n    'mb',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.substr(i, n);\n    if(word.length == n){\n      words.push(word);\n\
    \    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp139w6f04.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp139w6f04.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\twords.push(s.substring(i, j));\n\t\t\t\ti = j;\n\t\
    \t\t\tj++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tif(words.length\
    \ == n){\n\t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_5lk4goe.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_5lk4goe.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let last = 0;\n\tlet i = 0;\n\tlet j = 0;\n\twhile(i < s.length){\n\t\tlet letter\
    \ = s.charAt(i);\n\t\tlet nextLetter = s.charAt(i+1);\n\t\tlet nextNextLetter\
    \ = s.charAt(i+2);\n\t\tlet nextNextNextLetter = s.charAt(i+3);\n\t\tlet nextNextNextNextLetter\
    \ = s.charAt(i+4);\n\t\tlet nextNextNextNextNextLetter = s.charAt(i+5);\n\t\t\
    let nextNextNextNextNextNextLetter = s.charAt(i+6);\n\t\tlet nextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+7);\n\t\tlet nextNextNextNextNextNextNextNextLetter = s.charAt(i+8);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextLetter = s.charAt(i+9);\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+10);\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter =\
    \ s.charAt(i+11);\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+12);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+13);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+14);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+15);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+16);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+17);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+18);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+19);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+20);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+21);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+22);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+23);\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+24);\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7umrl59d.js:34\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+10);\n\t\t    ^\n\nSyntaxError: Identifier 'nextNextNextNextNextNextNextNextNextLetter'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"\
    \ && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+3);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+4);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+5);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"\
    \ && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \"\
    \ && s.charAt(i+5) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+6);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \" && s.charAt(i+5) == \" \"\
    \ && s.charAt(i+6) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+7);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_nhnfk80.js:90\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n      s =\
    \ s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length-1){\n \
    \     words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length-1;\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && i == s.length-1){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length-1){\n \
    \     words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length-1;\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && i == s.length-1){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo0i8k5lr.js:127\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var c = s.charAt(i);\n    if(c == \" \"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"n\" || c == \"N\" || c ==\
    \ \"r\" || c == \"R\" || c == \"l\" || c == \"L\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"a\" || c == \"A\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"t\" || c == \"T\" || c == \"e\" || c == \"E\" || c == \"o\" || c == \"\
    O\" || c == \"i\" || c == \"I\" || c == \"n\" || c == \"N\" || c == \"g\" || c\
    \ == \"G\"){\n      words.push(s.substring(i));\n      i = s.length - 1;\n   \
    \ }\n    else if(c == \"s\" || c == \"S\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"h\" || c == \"H\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"d\" || c == \"D\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"u\" || c == \"U\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"c\" || c == \"C\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"m\" || c == \"M\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"p\" || c == \"P\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"f\" || c == \"F\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"v\" || c == \"V\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"w\" || c == \"W\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"b\" || c == \"B\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"k\" || c == \"K\")\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsvlr2yho.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(index < s.length){\n\t\tlet letter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count === n){\n\t\t\t\
    words.push(s.substring(index));\n\t\t\tindex++;\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    index++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkl56g9kt.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkl56g9kt.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
