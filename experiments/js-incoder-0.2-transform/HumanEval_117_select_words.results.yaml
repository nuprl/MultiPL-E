language: js
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(!word.length){\n\t\t\t\
    words.push(word);\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tlet count = 0;\n\t\t\t\
    for(let j = 0; j < word.length; j++){\n\t\t\t\tif(word[j] === \"a\"){\n\t\t\t\t\
    \tcount++;\n\t\t\t\t}\n\t\t\t\telse if(word[j] === \"e\"){\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t\telse if(word[j] === \"i\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\
    \t\t\t\telse if(word[j] === \"o\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\
    \ if(word[j] === \"u\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count\
    \ === n){\n\t\t\t\twords.push(word);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpavmpgggh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpavmpgggh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet j = 0;\n\t\
    \twhile(j < n){\n\t\t\tif(letter == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"a\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"e\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"i\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"o\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"u\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"y\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"s\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"t\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"h\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"d\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"n\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"g\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"f\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"b\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"v\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"k\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"j\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"q\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"p\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"w\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"z\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"x\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"c\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"y\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"k\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"v\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"b\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"n\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"d\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"r\"\
    ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"q\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"p\")\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm06htm2h.js:137\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n        else if(s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    !\"){\n            words.push(s.substr(0, i));\n            s = s.substr(i + 1);\n\
    \        }\n        else if(s.charAt(i) == n){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpa_j7kyr8.js:41:10)\n    at Object.<anonymous> (/tmp/tmpa_j7kyr8.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substring(i+1);\n        }\n    }\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \" && words.length == n){\n\
    \            words.push(s.substr(0, i));\n            s = s.substring(i+1);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpdygts7rt.js:39:10)\n    at Object.<anonymous> (/tmp/tmpdygts7rt.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet chars = s.split('');\n\tfor(let i = 0; i < chars.length;\
    \ i++){\n\t\tlet char = chars[i];\n\t\tlet count = 0;\n\t\tfor(let j = 0; j <\
    \ char.length; j++){\n\t\t\tif(char.charAt(j) === 'a'){\n\t\t\t\tcount++;\n\t\t\
    \t}\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(chars.slice(index, i+1));\n\
    \t\t\tindex = i+1;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq8edfq6f.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpq8edfq6f.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\
    \tlist.push(word);\n\t\t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpm6wil_dq.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm6wil_dq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  if(s.length == 0){\n\
    \    return words;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && words.length == n){\n      words.push(s.substr(0, i));\n      s\
    \ = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  return words;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7ah3hygj.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7ah3hygj.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  if(s.length == 0){\n\
    \    return result;\n  }\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      count++;\n    }\n    if(count == n){\n \
    \     result.push(s.substr(i, s.length));\n      count = 0;\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5rkg_xsi.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5rkg_xsi.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var index = 0;\n\
    \    while(index < s.length){\n        var word = s.substring(index, index+n);\n\
    \        if(word.length == n){\n            words.push(word);\n            index\
    \ += n;\n        }\n        else{\n            index += word.length;\n       \
    \ }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpg7xb4c3v.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg7xb4c3v.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\tif(s.charAt(i) == \" \" && j == s.length-1){\n\t\t\
    \t\t\twords.push(s.substr(i, j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpejjj5rlo.js:38:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpejjj5rlo.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i = 0;\
    \ i<s.length; i++){\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(s.charAt(i) ==\
    \ \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\twords.push(s.substring(i, j));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    \n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  '',\n  '',\n  'ary h',\n  'ary had ',\n  'ary had a little l'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfo32s7iu.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfo32s7iu.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '',\
    \ '', '', 'ary h', 'ary had ', 'ary had a little l' ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  if(s.length == 0){\n\
    \    return result;\n  }\n  \n  for(var i = 0; i<s.length; i++){\n    var word\
    \ = s.substr(i, n);\n    result.push(word);\n  }\n  \n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb',\n  'amb',\n  'mb',\n  'b'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn_wpjas5.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn_wpjas5.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h', 'y ha',\n    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a\
    \ li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam',\
    \ 'lamb', 'amb',\n    'mb',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.substr(i, n);\n    if(word.length == n){\n      words.push(word);\n\
    \    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp139w6f04.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp139w6f04.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\twords.push(s.substring(i, j));\n\t\t\t\ti = j;\n\t\
    \t\t\tj++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tif(words.length\
    \ == n){\n\t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_5lk4goe.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_5lk4goe.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let last = 0;\n\tlet i = 0;\n\tlet j = 0;\n\twhile(i < s.length){\n\t\tlet letter\
    \ = s.charAt(i);\n\t\tlet nextLetter = s.charAt(i+1);\n\t\tlet nextNextLetter\
    \ = s.charAt(i+2);\n\t\tlet nextNextNextLetter = s.charAt(i+3);\n\t\tlet nextNextNextNextLetter\
    \ = s.charAt(i+4);\n\t\tlet nextNextNextNextNextLetter = s.charAt(i+5);\n\t\t\
    let nextNextNextNextNextNextLetter = s.charAt(i+6);\n\t\tlet nextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+7);\n\t\tlet nextNextNextNextNextNextNextNextLetter = s.charAt(i+8);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextLetter = s.charAt(i+9);\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+10);\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter =\
    \ s.charAt(i+11);\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+12);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+13);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+14);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+15);\n\t\t\
    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+16);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+17);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+18);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+19);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+20);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+21);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = s.charAt(i+22);\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+23);\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+24);\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7umrl59d.js:34\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s.charAt(i+10);\n\t\t    ^\n\nSyntaxError: Identifier 'nextNextNextNextNextNextNextNextNextLetter'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"\
    \ && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+3);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+4);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+5);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"\
    \ && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \"\
    \ && s.charAt(i+5) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+6);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"\
    \ && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \" && s.charAt(i+5) == \" \"\
    \ && s.charAt(i+6) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+7);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n \
    \   if(s.charAt(i) == \" \" && \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_nhnfk80.js:90\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n      s =\
    \ s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length-1){\n \
    \     words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length-1;\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && i == s.length-1){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length-1){\n \
    \     words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length-1;\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && i == s.length-1){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && i != s.length-1){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && i == s.length-1){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  \n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo0i8k5lr.js:127\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var c = s.charAt(i);\n    if(c == \" \"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"n\" || c == \"N\" || c ==\
    \ \"r\" || c == \"R\" || c == \"l\" || c == \"L\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"a\" || c == \"A\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"t\" || c == \"T\" || c == \"e\" || c == \"E\" || c == \"o\" || c == \"\
    O\" || c == \"i\" || c == \"I\" || c == \"n\" || c == \"N\" || c == \"g\" || c\
    \ == \"G\"){\n      words.push(s.substring(i));\n      i = s.length - 1;\n   \
    \ }\n    else if(c == \"s\" || c == \"S\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"h\" || c == \"H\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"d\" || c == \"D\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"u\" || c == \"U\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"c\" || c == \"C\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"m\" || c == \"M\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"p\" || c == \"P\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"f\" || c == \"F\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"v\" || c == \"V\"){\n      words.push(s.substring(i));\n      i = s.length\
    \ - 1;\n    }\n    else if(c == \"w\" || c == \"W\"){\n      words.push(s.substring(i));\n\
    \      i = s.length - 1;\n    }\n    else if(c == \"b\" || c == \"B\"){\n    \
    \  words.push(s.substring(i));\n      i = s.length - 1;\n    }\n    else if(c\
    \ == \"k\" || c == \"K\")\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsvlr2yho.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(index < s.length){\n\t\tlet letter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count === n){\n\t\t\t\
    words.push(s.substring(index));\n\t\t\tindex++;\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    index++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkl56g9kt.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkl56g9kt.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substring(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    !\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" ||\
    \ s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"\
    !\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" ||\
    \ s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"\
    ;\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" ||\
    \ s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    .\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" ||\
    \ s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"\
    !\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" ||\
    \ s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"\
    ;\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" ||\
    \ s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    .\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" ||\
    \ s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"\
    !\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" ||\
    \ s.charAt(i) == \";\" || s.charAt(i) == \":\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmbbuyi34.js:24\n        else if(s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i)\
    \ == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" ||\
    \ s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \"\
    ,\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i)\
    \ == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" ||\
    \ s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \"\
    ,\" || s.charAt(i) == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i)\
    \ == \";\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \";\" ||\
    \ s.charAt(i) == \":\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                    "
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.substr(i, n);\n    if(word.length == n){\n      words.push(word);\n\
    \    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp139w6f04.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp139w6f04.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let index = 0;\n\
    \    while(index < s.length){\n        let word = s.substring(index, index+n);\n\
    \        if(word.length == n){\n            words.push(word);\n            index\
    \ += n;\n        }\n        else{\n            index += word.length;\n       \
    \ }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmph1sh23s5.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph1sh23s5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tvar vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\tvar vowels_count = vowels.length;\n\
    \tvar consonants_count = consonants.length;\n\tvar vowels_index = 0;\n\tvar consonants_index\
    \ = 0;\n\tvar vowels_found = false;\n\tvar consonants_found = false;\n\tvar vowels_found\
    \ = false;\n\tvar consonants_found = false;\n\t\n\twhile(vowels_index < vowels_count\
    \ && consonants_index < consonants_count){\n\t\tif(vowels[vowels_index] == s[vowels_index]){\n\
    \t\t\tvowels_found = true;\n\t\t\tvowels_index++;\n\t\t}\n\t\telse if(consonants[consonants_index]\
    \ == s[consonants_index]){\n\t\t\tconsonants_found = true;\n\t\t\tconsonants_index++;\n\
    \t\t}\n\t\telse{\n\t\t\tvowels_found = false;\n\t\t\tconsonants_found = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(vowels_found == true){\n\t\twhile(vowels_index\
    \ < vowels_count && consonants_index < consonants_count){\n\t\t\tif(vowels[vowels_index]\
    \ == s[vowels_index]){\n\t\t\t\tvowels_found = true;\n\t\t\t\tvowels_index++;\n\
    \t\t\t}\n\t\t\telse if(consonants[consonants_index] == s[consonants_index]){\n\
    \t\t\t\tconsonants_found = true;\n\t\t\t\tconsonants_index++;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tvowels_found = false;\n\t\t\t\tconsonants_found = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(vowels_found == true){\n\t\twhile(vowels_index\
    \ < vowels_count && consonants_index < consonants_count){\n\t\t\tif(vowels[vowels_index]\
    \ == s[vowels_index]){\n\t\t\t\tvowels_found = true;\n\t\t\t\tvowels_index++;\n\
    \t\t\t}\n\t\t\telse if(consonants[consonants_index] == s[consonants_index]){\n\
    \t\t\t\tconsonants_found = true;\n\t\t\t\tconsonants_index++;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tvowels_found = false;\n\t\t\t\tconsonants_found = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(vowels_found == true){\n\t\twhile(vowels_index\
    \ < vowels_count && consonants_index < consonants_count){\n\t\t\tif(vowels[vowels_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfr1gqkv5.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar letter = s[i];\n\t\tvar count = 0;\n\t\tfor(var j=0; j<letter.length;\
    \ j++){\n\t\t\tif(letter.charAt(j) == letter){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == n){\n\t\t\twords.push(letter);\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfx0v6zhq.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpfx0v6zhq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(i, s.length));\n\
    \      i = s.length-1;\n    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little\
    \ lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpknli2d2z.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpknli2d2z.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpaa89gwie.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaa89gwie.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\
    \tif(char == \" \"){\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count =\
    \ 0;\n\t\tfor(let i = 0; i < n; i++){\n\t\t\tif(char == consonants[i]){\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substring(index,\
    \ index+n));\n\t\t\tindex += n;\n\t\t\tcount = 0;\n\t\t}\n\t\tindex++;\n\t}\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxlvij74k.js:29\n\t\t\tif(char == consonants[i]){\n\t\t\t      \
    \     ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpxlvij74k.js:29:15)\n\
    \    at test (/tmp/tmpxlvij74k.js:48:20)\n    at Object.<anonymous> (/tmp/tmpxlvij74k.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\tif(s.charAt(i) == \" \" && s.charAt(j) == \" \"){\n\t\t\t\t\tresult.push(s.substr(i,\
    \ j));\n\t\t\t\t}\n\t\t\t\tif(s.charAt(i) == s.charAt(j) && s.charAt(i) != \"\
    \ \" && s.charAt(j) != \" \"){\n\t\t\t\t\tresult.push(s.substr(i, j));\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'ary ha',\n  'ary had a',\n  'ary had a little la',\n  'ry',\n  'y h',\n  '\
    \ had',\n  ' had a l',\n  ' had a lit',\n  ' had a little lam',\n  'had a',\n\
    \  'a',\n  'ad a l',\n  'ad a litt',\n  'ad a little lamb',\n  'd a lit',\n  '\
    \ a l',\n  ' a littl',\n  ' a little ',\n  ' a little lamb',\n  'a',\n  'a litt',\n\
    \  'a little ',\n  'a little lamb',\n  ' lit',\n  ' little ',\n  ' little la',\n\
    \  ' little lamb',\n  'little lamb',\n  'little lamb',\n  'little lamb',\n  'ittle\
    \ lamb',\n  'ttle lamb',\n  'ttle lamb',\n  'tle lamb',\n...\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbshzkikq.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpbshzkikq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \                 'a',                   'ary ha',\n    'ary had a',        'ary\
    \ had a little la', 'ry',\n    'y h',              ' had',                ' had\
    \ a l',\n    ' had a lit',       ' had a little lam',   'had a',\n    'a',   \
    \             'ad a l',              'ad a litt',\n    'ad a little lamb', 'd\
    \ a lit',             ' a l',\n    ' a littl',         ' a little ',         \
    \ ' a little lamb',\n    'a',                'a litt',              'a little\
    \ ',\n    'a little lamb',    ' lit',                ' little ',\n    ' little\
    \ la',       ' little lamb',        'little lamb',\n    'little lamb',      'little\
    \ lamb',         'ittle lamb',\n    'ttle lamb',        'ttle lamb',         \
    \  'tle lamb',\n    'tle lamb',         'le lamb',             'le lamb',\n  \
    \  'le lamb',          'e lamb',        "
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && words.length == n){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  \n  return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps96za9ix.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmps96za9ix.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.split(\" \");\n        for(var j=0;\
    \ j<word.length; j++){\n            if(word[j].length == n){\n               \
    \ result.push(word[j]);\n            }\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoatgmd_h.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoatgmd_h.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let index = 0;\n\
    \    while(index < s.length){\n        let word = s.substring(index, index+n);\n\
    \        if(word.length == n){\n            words.push(word);\n            index\
    \ += n;\n        }\n        else{\n            index++;\n        }\n    }\n  \
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpliaga80k.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpliaga80k.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.split(\" \");\n        for(var j=0;\
    \ j<word.length; j++){\n            if(word[j].length == n){\n               \
    \ result.push(word[j]);\n            }\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoatgmd_h.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoatgmd_h.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    while(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\tif(word.length\
    \ == n){\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse{\n\t\t\t\
    index++;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpmw5sl8fj.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmw5sl8fj.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var index = 0;\n\
    \    var count = 0;\n    while(index < s.length){\n        if(s.charAt(index)\
    \ == \" \"){\n            count++;\n        }\n        if(count == n){\n     \
    \       words.push(s.substring(index, index+n));\n            index = index +\
    \ n;\n            count = 0;\n        }\n        index++;\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lam'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpg17i7u1k.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg17i7u1k.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var vowels =\
    \ \"aeiou\";\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var vowels_count\
    \ = vowels.length;\n    var consonants_count = consonants.length;\n    var vowels_index\
    \ = 0;\n    var consonants_index = 0;\n    var vowels_found = false;\n    var\
    \ consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found = false;\n    var consonants_found = false;\n\
    \    var vowels_found = false;\n    var consonants_found = false;\n    var vowels_found\
    \ = false;\n    var consonants_found = false;\n    var vowels_found = false;\n\
    \    var consonants_found = false;\n    var vowels_found = false;\n    var consonants_found\
    \ = false;\n    var vowels_found\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphwiup9si.js:104\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j) && i != j){\n\t\t\t\tif(s.charAt(i) == \" \" && j == s.length-1){\n\
    \t\t\t\t\tresult.push(s.substr(i, j));\n\t\t\t\t\ti = j;\n\t\t\t\t}\n\t\t\t\t\
    if(s.charAt(j) == \" \" && i == s.length-1){\n\t\t\t\t\tresult.push(s.substr(i,\
    \ j));\n\t\t\t\t\tj = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpez1tl6l5.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpez1tl6l5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let index = 0;\n\
    \    while(index < s.length){\n        let word = s.substring(index, index+n);\n\
    \        if(word.length == n){\n            words.push(word);\n            index\
    \ += n;\n        }\n        else{\n            index += word.length;\n       \
    \ }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmph1sh23s5.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph1sh23s5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let count = 0;\n\
    \    let index = 0;\n    while(index < s.length){\n        let letter = s.charAt(index);\n\
    \        if(letter == \" \"){\n            count++;\n            index++;\n  \
    \      }\n        else if(letter == \"a\"){\n            count++;\n          \
    \  index++;\n        }\n        else if(letter == \"e\"){\n            count++;\n\
    \            index++;\n        }\n        else if(letter == \"i\"){\n        \
    \    count++;\n            index++;\n        }\n        else if(letter == \"o\"\
    ){\n            count++;\n            index++;\n        }\n        else if(letter\
    \ == \"u\"){\n            count++;\n            index++;\n        }\n        else\
    \ if(letter == \"y\"){\n            count++;\n            index++;\n        }\n\
    \        else if(letter == \"s\"){\n            count++;\n            index++;\n\
    \        }\n        else if(letter == \"t\"){\n            count++;\n        \
    \    index++;\n        }\n        else if(letter == \"h\"){\n            count++;\n\
    \            index++;\n        }\n        else if(letter == \"l\"){\n        \
    \    count++;\n            index++;\n        }\n        else if(letter == \"d\"\
    ){\n            count++;\n            index++;\n        }\n        else if(letter\
    \ == \"n\"){\n            count++;\n            index++;\n        }\n        else\
    \ if(letter == \"g\"){\n            count++;\n            index++;\n        }\n\
    \        else if(letter == \"f\"){\n            count++;\n            index++;\n\
    \        }\n        else if(letter == \"p\"){\n            count++;\n        \
    \    index++;\n        }\n        else if(letter == \"r\"){\n            count++;\n\
    \            index++;\n        }\n        else if(letter == \"m\"){\n        \
    \    count++;\n            index++;\n        }\n        else if(letter == \"a\"\
    ){\n            count++;\n            index++;\n        }\n        else if(letter\
    \ == \"e\"){\n            count++;\n            index++;\n        }\n        else\
    \ if(letter == \"i\"){\n            count++;\n            index++;\n        }\n\
    \        else if(letter == \"o\"){\n            count++;\n            index++;\n\
    \        }\n        else if(letter == \"u\"){\n            count++;\n        \
    \    index++;\n        }\n        else if(letter == \"y\"){\n            count++;\n\
    \            index++;\n        }\n        else if(letter == \"s\"){\n        \
    \    count++;\n            index++;\n        }\n        else if(letter == \"t\"\
    ){\n            count++;\n            index++;\n        }\n        else if(letter\
    \ == \"h\"){\n            count++;\n            index++;\n        }\n        else\
    \ if(letter == \"l\"){\n            count++;\n            index++;\n        }\n\
    \        else if(letter == \"d\"){\n            count++;\n            index++;\n\
    \        }\n        else if(letter == \"n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz9sjiup1.js:139\n        else if(letter == \"n\n              \
    \            ^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\
    \tif(char == \" \"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"a\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"e\"\
    ){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\t\
    count++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"o\"){\n\t\t\tcount++;\n\
    \t\t\tindex++;\n\t\t}\n\t\telse if(char == \"u\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"y\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\t\
    else if(char == \"s\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"t\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"n\"\
    ){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"h\"){\n\t\t\t\
    count++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tcount++;\n\
    \t\t\tindex++;\n\t\t}\n\t\telse if(char == \"d\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"r\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\t\
    else if(char == \"c\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"m\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"e\"\
    ){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"a\"){\n\t\t\t\
    count++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tcount++;\n\
    \t\t\tindex++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"e\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\t\
    else if(char == \"n\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"g\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"e\"\
    ){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"t\"){\n\t\t\t\
    count++;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tcount++;\n\
    \t\t\tindex++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\tcount++;\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"n\"){\n\t\t\t\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfs3_ybv9.js:147\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \      i = s.length - 1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length\
    \ == n){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    \
    \  i = s.length - 1;\n    }\n  }\n  \n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps66wf8cr.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmps66wf8cr.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var i = 0;\n\
    \    while(i < s.length){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n        i += n;\n    }\n \
    \   return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmps6dfmb7s.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps6dfmb7s.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpmohr1r_f.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmohr1r_f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet letter = s.charAt(0);\n\tlet vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n\twhile(index < s.length){\n\t\tif(s.charAt(index) == letter){\n\
    \t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(count == n){\n\t\twords.push(s.slice(0,index));\n\
    \t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfw28qvp9.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpfw28qvp9.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  for(let i = 0; i\
    \ < s.length; i++){\n    let letter = s[i];\n    let count = 0;\n    for(let j\
    \ = 0; j < letter.length; j++){\n      if(letter[j] === \"a\"){\n        count++;\n\
    \      }\n    }\n    if(count === n){\n      words.push(letter);\n    }\n  }\n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplk1rcrwg.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplk1rcrwg.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j=0; j<word.length;\
    \ j++){\n\t\t\tif(word[j].length == n){\n\t\t\t\tresult.push(word[j]);\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmposq7l7dz.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmposq7l7dz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(count < n && i < s.length){\n\t\tif(s.charAt(i) == \" \"){\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \";\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" ||\
    \ s.charAt(i) == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i)\
    \ == \"}\" || s.charAt(i) == \"-\" || s.charAt(i) == \"_\" || s.charAt(i) == \"\
    @\" || s.charAt(i) == \"#\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" ||\
    \ s.charAt(i) == \"|\" || s.charAt(i) == \"+\" || s.charAt(i) == \"=\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" || s.charAt(i) == \"\
    ,\" || s.charAt(i) == \"!\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" ||\
    \ s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"[\" || s.charAt(i)\
    \ == \"]\" || s.charAt(i) == \"{\" || s.charAt(i) == \"}\" || s.charAt(i) == \"\
    -\" || s.charAt(i) == \"_\" || s.charAt(i) == \"@\" || s.charAt(i) == \"#\" ||\
    \ s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"|\" || s.charAt(i)\
    \ == \"+\" || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"(\" || s.charAt(i)\
    \ == \")\" || s.charAt(i) == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"\
    {\" || s.charAt(i) == \"}\" || s.charAt(i) == \"-\" || s.charAt(i) == \"_\" ||\
    \ s.charAt(i) == \"@\" || s.charAt(i) == \"#\" || s.charAt(i) == \":\" || s.charAt(i)\
    \ == \";\" || s.charAt(i) == \"|\" || s.charAt(i) == \"+\" || s.charAt(i) == \"\
    =\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \"!\" || s.charAt(i) == \":\" || s.charAt(i)\
    \ == \";\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"\
    [\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i) == \"}\" ||\
    \ s.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpra700i0z.js:27\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  \n  if(s.length\
    \ == 0){\n    return result;\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      result.push(s.substring(i));\n    }\n  }\n\
    \  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \" && result.length\
    \ >= n){\n      result.splice(result.length - 1, 1);\n    }\n  }\n  \n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little\
    \ lamb',\n  ' a little lamb',\n  ' little lamb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpx0te0dv_.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx0te0dv_.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ little lamb', ' a little lamb', ' little lamb' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet word = \"\";\n\
    \tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tlet c = s.charAt(i);\n\
    \t\tif(c == \" \"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(c == \"a\"){\n\t\t\tword = \"\";\n\t\t\tcount++;\n\t\t}\n\t\
    \telse{\n\t\t\tword += c;\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\t\
    words.push(word);\n\t\t\tcount = 0;\n\t\t}\n\t}\n\tif(word != \"\"){\n\t\twords.push(word);\n\
    \t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ry',\n \
    \ 'ry',\n  'd',\n  'd',\n  '',\n  'l',\n  'littl',\n  'little',\n  '',\n  'mb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9h706aky.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9h706aky.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'ry',\
    \    'ry',\n    'd',     'd',\n    '',      'l',\n    'littl', 'little',\n   \
    \ '',      'mb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.split(\"\").filter(function(char){\n\
    \            return char.match(/[aeiou]/i) && char.match(/[aeiou]/).length ==\
    \ n;\n        }).join(\"\");\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc8_i5dka.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpc8_i5dka.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j = 0; j<word.length; j++){\n\
    \t\t\tif(word[j].indexOf(n) != -1){\n\t\t\t\tresult.push(word[j]);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9hnvd56o.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9hnvd56o.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var list = [];\n    \n    for(var\
    \ i=0; i<s.length; i++){\n        var word = s.substr(i, n);\n        \n     \
    \   if(word.length == n){\n            list.push(word);\n        }\n    }\n  \
    \  \n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpi8lobb7i.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi8lobb7i.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let result = [];\n  \n  if(s.length\
    \ == 0){\n    return result;\n  }\n  \n  let count = 0;\n  let lastChar = s[0];\n\
    \  \n  for(let i = 1; i < s.length; i++){\n    if(s[i] === lastChar){\n      count++;\n\
    \    }\n    else{\n      if(count === n){\n        result.push(lastChar);\n  \
    \    }\n      count = 0;\n      lastChar = s[i];\n    }\n  }\n  \n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9nka6lsa.js:48:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9nka6lsa.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\
    \tlet isConsonant = false;\n\t\tfor(let i = 0; i < consonants.length; i++){\n\t\
    \t\tif(char === consonants[i]){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(!isConsonant){\n\t\t\twords.push(char);\n\t\t\tcount++;\n\
    \t\t}\n\t\tindex++;\n\t\tif(count === n){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpo4ex9_05.js:24\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmpo4ex9_05.js:24:22)\n    at test (/tmp/tmpo4ex9_05.js:47:20)\n\
    \    at Object.<anonymous> (/tmp/tmpo4ex9_05.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.split(\"\").filter(w => w.charCodeAt(0)\
    \ == s[i].charCodeAt(0));\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'a',\n\
    \    'a',\n    'a',\n    'a'\n  ],\n  [\n    ' ',\n    ' ',\n    ' ',\n    ' '\n\
    \  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ],\n  [\n    ' ',\n    '\
    \ ',\n    ' ',\n    ' '\n  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ],\n\
    \  [\n    ' ',\n    ' ',\n    ' ',\n    ' '\n  ],\n  [\n    ' ',\n    ' ',\n \
    \   ' ',\n    ' '\n  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ]\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmputptldln.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmputptldln.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'a',\
    \ 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ],\n\
    \    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ',\
    \ ' ' ],\n    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ]\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  s = s.split(\" \"\
    );\n  for(var i=0; i<s.length; i++){\n    if(s.indexOf(s[i]) >= 0 && s.indexOf(s[i])\
    \ == s.indexOf(s[i]) + n){\n      result.push(s[i]);\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqsfs8nfq.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqsfs8nfq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var letter = s[i];\n    for(var j=0; j<n; j++){\n      if(letter\
    \ == \" \"){\n        break;\n      }\n      if(letter == \"a\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"e\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"i\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"o\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"u\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"y\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"h\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"l\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"s\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"t\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"d\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"n\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"g\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"f\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"m\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"p\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"v\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"b\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"k\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"j\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"r\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"w\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"z\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"x\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"c\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"m\"){\n        words.push(letter);\n\
    \        break;\n      }\n      if(letter == \"y\"){\n        words.push(letter);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg1lec57q.js:145\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpavmpgggh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpavmpgggh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i = 0;\
    \ i<s.length; i++){\n        var letter = s[i];\n        var count = 0;\n    \
    \    for(var j = 0; j<letter.length; j++){\n            if(letter.charAt(j) ==\
    \ letter){\n                count++;\n            }\n        }\n        if(count\
    \ == n){\n            words.push(letter);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6thydt5l.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp6thydt5l.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var count = 0;\n\
    \    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n   \
    \         count++;\n        }\n        if(count == n){\n            words.push(s.substr(0,\
    \ i));\n            count = 0;\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjfley8rh.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjfley8rh.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet letter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\twords.push(s.substring(index, index+count));\n\
    \t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}\n\t\telse{\n\t\t\tif(letter ===\
    \ \"a\"){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount--;\n\t\t\t}\n\
    \t\t}\n\t\tindex++;\n\t}\n\tif(count === 0){\n\t\twords.push(s.substring(index,\
    \ s.length));\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ry',\n \
    \ 'y',\n  '',\n  'd',\n  '',\n  ' ',\n  'ittle',\n  'ttle',\n  'tle',\n  'le',\n\
    \  'e',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpbdemc8h7.js:49:10)\n    at Object.<anonymous> (/tmp/tmpbdemc8h7.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'ry',\
    \    'y',    '',\n    'd',     '',     ' ',\n    'ittle', 'ttle', 'tle',\n   \
    \ 'le',    'e',    ''\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j=0; j<word.length;\
    \ j++){\n\t\t\tif(word[j].length == n){\n\t\t\t\tresult.push(word[j]);\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmposq7l7dz.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmposq7l7dz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tvar vowels = \"\
    aeiou\";\n\tvar vowels_count = vowels.length;\n\tvar vowels_count_in_string =\
    \ vowels.split(s).length - 1;\n\tvar vowels_count_in_string_2 = vowels.split(s).join(\"\
    \").length - 1;\n\tvar vowels_count_in_string_3 = vowels.split(s).join(\"\").split(\"\
    \").length - 1;\n\tvar vowels_count_in_string_4 = vowels.split(s).join(\"\").split(\"\
    \").join(\"\").length - 1;\n\tvar vowels_count_in_string_5 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").length - 1;\n\tvar vowels_count_in_string_6\
    \ = vowels.split(s).join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").length\
    \ - 1;\n\tvar vowels_count_in_string_7 = vowels.split(s).join(\"\").split(\"\"\
    ).join(\"\").split(\"\").join(\"\").split(\"\").length - 1;\n\tvar vowels_count_in_string_8\
    \ = vowels.split(s).join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").join(\"\").length - 1;\n\tvar vowels_count_in_string_9 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").length - 1;\n\tvar vowels_count_in_string_10 = vowels.split(s).join(\"\").split(\"\
    \").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\
    \").length - 1;\n\tvar vowels_count_in_string_11 = vowels.split(s).join(\"\").split(\"\
    \").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\
    \").split(\"\").length - 1;\n\tvar vowels_count_in_string_12 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").join(\"\").split(\"\").length - 1;\n\tvar vowels_count_in_string_13 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").join(\"\").split(\"\").length - 1;\n\tvar vowels_count_in_string_14 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").join(\"\").split(\"\").length - 1;\n\tvar vowels_count_in_string_15 = vowels.split(s).join(\"\
    \").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\").join(\"\").split(\"\
    \").join(\"\").split(\"\").\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfzuuw9ab.js:36\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar letter = s[i];\n\t\tfor(var j = 0; j<n; j++){\n\t\t\tif(letter\
    \ == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"a\"){\n\t\t\t\
    \twords.push(s.substr(0, i));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter ==\
    \ \"e\"){\n\t\t\t\twords.push(s.substr(i+1, i+2));\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\telse if(letter == \"i\"){\n\t\t\t\twords.push(s.substr(i+1, i+1));\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"o\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"u\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"y\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"h\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"s\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"t\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"d\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"e\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"n\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"g\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"a\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"e\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"i\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"s\"){\n\t\t\t\twords.push(s.substr(i+1,\
    \ i+1));\n\t\t\t\tbreak;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpopbnj6ex.js:122\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpfol1i3uu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfol1i3uu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  \n  for(let i = 0;\
    \ i < s.length; i++){\n    let letter = s[i];\n    let count = 0;\n    \n    for(let\
    \ j = 0; j < letter.length; j++){\n      if(letter[j] === \"a\"){\n        count++;\n\
    \      }\n    }\n    \n    if(count === n){\n      words.push(letter);\n    }\n\
    \  }\n  \n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_7wnxtrg.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_7wnxtrg.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlist.push(word);\n\t\ti +=\
    \ n;\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpejp1epc4.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpejp1epc4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpaa89gwie.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaa89gwie.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tvar count = 0;\n\t\
    \n\tfor(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\t\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpb751jk3d.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb751jk3d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i+1));\n\
    \      s = s.substr(i+1);\n      i = s.length-1;\n    }\n    if(s.charAt(i) ==\
    \ \" \" && s.length != 0){\n      words.push(s.substr(0, i+1));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n  }\n  if(s.length != 0){\n    words.push(s);\n\
    \  }\n  return words.filter(function(word){\n    return word.length == n;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzva9dq7z.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzva9dq7z.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\twords.push(s.substr(0,i));\n\t\t\
    \ts = s.substr(i+1);\n\t\t\ti = s.length-1;\n\t\t}\n\t\tfor(var j = 0; j<s.length;\
    \ j++){\n\t\t\tif(s.charAt(j) == s.charAt(j+1)){\n\t\t\t\ts = s.substr(0,j);\n\
    \t\t\t\ti = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1utci9dx.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1utci9dx.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let list = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.split(\" \");\n        for(let j =\
    \ 0; j < word.length; j++){\n            if(word[j].includes(n)){\n          \
    \      list.push(word[j]);\n            }\n        }\n    }\n    return list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp33jmlrhi.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp33jmlrhi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length != 0){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n    \n    if(s.charAt(i) == \" \" && s.length == 0){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length != 0 && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i+2);\n    }\n    \n    if(s.charAt(i) == \" \" && s.length\
    \ == 0 && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n      s\
    \ = s.substr(i+2);\n    }\n    \n    if(s.charAt(i) == \" \" && s.length != 0\
    \ && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+3);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length == 0 && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+3);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length != 0 && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+4);\n  \
    \  }\n    \n    if(s.charAt(i) == \" \" && s.length == 0 && s.charAt(i+1) == \"\
    \ \" && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+4);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length != 0 && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3)\
    \ == \" \" && s.charAt(i+4) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+5);\n    }\n    \n    if(s.charAt(i) == \" \" && s.length\
    \ == 0 && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3) ==\
    \ \" \" && s.charAt(i+4) == \" \" && s.charAt(i+5) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+5);\n    }\n    \n    if(s.charAt(i) == \" \" &&\
    \ s.length != 0 && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3)\
    \ == \" \" && s.\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp9iz_sr8.js:77\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\tif(s.charAt(i) == \" \" && j == s.length-1){\n\t\t\t\t\twords.push(s.substr(i,\
    \ j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjj7tjwmg.js:36:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjj7tjwmg.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i = 0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n    }\n    for(var i = 0; i<s.length;\
    \ i++){\n        if(s.charAt(i) == \" \" && words.length == n){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmp3yt69mxx.js:39:10)\n    at Object.<anonymous> (/tmp/tmp3yt69mxx.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return words;\n\
    \  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+3) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+4) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+5) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+6) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+7) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+8) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+9) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+10\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4ho9f57g.js:95\n    if(s.charAt(i) == \" \" && s.charAt(i+10\n\
    \                                        ^^\n\nSyntaxError: missing ) after argument\
    \ list\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpfol1i3uu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfol1i3uu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j = 0; j<word.length; j++){\n\
    \t\t\tif(word[j].length == n){\n\t\t\t\tresult.push(word[j]);\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5cdvoowa.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5cdvoowa.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\tvar count = 0;\n\t\
    for(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\
    \t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"a\"){\n\t\t\tcount++;\n\t\t\tif(count\
    \ == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\
    }\n\t\telse if(s.charAt(i) == \"e\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\
    \t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(s.charAt(i) == \"i\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0,\
    \ i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"o\"){\n\
    \t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\
    \t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"u\"){\n\t\t\tcount++;\n\
    \t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\
    \t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"y\"){\n\t\t\tcount++;\n\t\t\tif(count\
    \ == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\
    }\n\t\telse if(s.charAt(i) == \"h\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\
    \t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(s.charAt(i) == \"l\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0,\
    \ i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"s\"){\n\
    \t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\
    \t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"r\"){\n\t\t\tcount++;\n\
    \t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\
    \t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"c\"){\n\t\t\tcount++;\n\t\t\tif(count\
    \ == n){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\
    }\n\t\telse if(s.charAt(i) == \"m\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\
    \t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(s.charAt(i) == \"e\"){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substr(0,\
    \ i));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse if(s.charAt(i) == \"t\"){\n\
    \t\t\tcount\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpug606j8e.js:135\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet res = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet char = s[i];\n\t\tif(char == \" \"\
    ){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile(i < s.length){\n\
    \t\t\tlet char2 = s[i];\n\t\t\tif(char2 == \" \"){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\tif(char == char2){\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif(count == n){\n\t\t\tres.push(s.slice(i, s.length));\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp813_imwt.js:54:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp813_imwt.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var list = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return list;\n \
    \ }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && list.indexOf(s.substr(0,\
    \ i)) < 0){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n\
    \  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && list.indexOf(s.substr(0, i)) >= 0){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length\
    \ == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && list.indexOf(s.substr(0, i)) >= 0){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && list.indexOf(s.substr(0, i)) >= 0){\n      list.push(s.substr(0, i));\n \
    \     s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return list;\n\
    \  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && list.indexOf(s.substr(0,\
    \ i)) >= 0){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \ }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && list.indexOf(s.substr(0, i)) >= 0){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length\
    \ == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && list.indexOf(s.substr(0, i)) >= 0){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && list.indexOf(s.substr(0, i)) >= 0){\n      list.push(s.substr(0, i));\n \
    \     s = s.substr(i+1);\n    }\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7w35g6n2.js:112\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var list = [];\n  if(s.length == 0){\n\
    \    return list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substring(i,i+1));\n      i = i+1;\n    }\n  }\n\
    \  for(var i = 0; i<list.length; i++){\n    if(list[i].length == n){\n      list.splice(i,1);\n\
    \    }\n  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpg293ujxt.js:41:10)\n    at Object.<anonymous> (/tmp/tmpg293ujxt.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet letter;\n\twhile(index < s.length){\n\t\tletter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\twords.push(s.slice(index));\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(letter === \"n\" || letter === \"m\" || letter ===\
    \ \"p\" || letter === \"t\" || letter === \"v\" || letter === \"x\" || letter\
    \ === \"z\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"\
    A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter ===\
    \ \"U\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"N\"\
    \ || letter === \"M\" || letter === \"P\" || letter === \"T\" || letter === \"\
    V\" || letter === \"X\" || letter === \"Z\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(letter === \"n\" || letter === \"m\" || letter === \"p\" || letter\
    \ === \"t\" || letter === \"v\" || letter === \"x\" || letter === \"z\"){\n\t\t\
    \tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"N\" || letter === \"\
    M\" || letter === \"P\" || letter === \"T\" || letter === \"V\" || letter ===\
    \ \"X\" || letter === \"Z\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ === \"n\" || letter === \"m\" || letter === \"p\" || letter === \"t\" || letter\
    \ === \"v\" || letter === \"x\" || letter === \"z\"){\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter === \"N\" || letter === \"M\" || letter === \"P\" ||\
    \ letter === \"T\" || letter === \"V\" || letter === \"X\" || letter === \"Z\"\
    ){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxfbb_a40.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var list = [];\n    for(var i=0; i<s.length;\
    \ i++){\n        var word = s.split(\" \");\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word[j].length == n){\n                list.push(word[j]);\n\
    \            }\n        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzzbje4p3.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzzbje4p3.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\
    \tlet isConsonant = isConsonant(char);\n\t\tif(!isConsonant){\n\t\t\twords.push(s.substring(index,\
    \ index+count));\n\t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}else{\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx7gktfhq.js:23\n\t\tlet isConsonant = isConsonant(char);\n\t\t\
    \                  ^\n\nReferenceError: Cannot access 'isConsonant' before initialization\n\
    \    at select_words (/tmp/tmpx7gktfhq.js:23:21)\n    at test (/tmp/tmpx7gktfhq.js:40:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx7gktfhq.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\tlet temp = \"\";\n\twhile(index < s.length){\n\t\ttemp = s.charAt(index);\n\
    \t\tif(temp.match(/[aeiou]/i)){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\
    \t\tlist.push(temp);\n\t\t\tcount = 0;\n\t\t}\n\t\tindex++;\n\t}\n\treturn list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'i'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjgnbkx2e.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjgnbkx2e.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'i' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    while(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\tlet\
    \ index = index+n;\n\t\twords.push(word);\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp34b69s5y.js:21\n\t\tlet word = s.substring(index, index+n);\n\t\
    \t                       ^\n\nReferenceError: Cannot access 'index' before initialization\n\
    \    at select_words (/tmp/tmp34b69s5y.js:21:26)\n    at test (/tmp/tmp34b69s5y.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmp34b69s5y.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tif(letter == \"\
    \ \"){\n\t\t\twords.push(s.substr(i, s.length));\n\t\t\ti += s.length;\n\t\t\t\
    count++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < n;\
    \ j++){\n\t\t\tif(letter == s[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count\
    \ == n){\n\t\t\twords.push(s.substr(i, s.length));\n\t\t\ti += s.length;\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet temp = \"\";\n\twhile(index < s.length){\n\t\ttemp = s.charAt(index);\n\
    \t\tif(temp.match(/[aeiou]/)){\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile(count\
    \ < n){\n\t\twords.push(s.substring(0,index));\n\t\ts = s.substring(index+1);\n\
    \t\tindex = 0;\n\t\tcount = 0;\n\t\twhile(index < s.length){\n\t\t\ttemp = s.charAt(index);\n\
    \t\t\tif(temp.match(/[aeiou]/)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tindex++;\n\t\
    \t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpeueyoubq.js:50:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpeueyoubq.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet count = 0;\n\
    \t\twhile(count < n && i < s.length){\n\t\t\tlet letter2 = s[i];\n\t\t\tif(letter\
    \ != letter2){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif(count ==\
    \ n){\n\t\t\twords.push(letter);\n\t\t}\n\t\ti++;\n\t}\n\treturn words;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  't'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpct1xa27u.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpct1xa27u.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 't' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(!word.length){\n\t\t\t\
    break;\n\t\t}\n\t\twords.push(word);\n\t\ti += word.length;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpjgkw8bi_.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjgkw8bi_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \" \" && s.length>1){\n            words.push(s.substr(0, i));\n        \
    \    s = s.substr(i+1);\n        }\n        else if(s.charAt(i) == \" \" && s.length==1){\n\
    \            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n   \
    \     }\n        else if(s.charAt(i) == \" \" && s.length==0){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \" \" && s.length>0 && s.charAt(i-1) == \" \" && s.length>1){\n         \
    \   words.push(s.substr(0, i));\n            s = s.substr(i+1);\n        }\n \
    \       else if(s.charAt(i) == \" \" && s.length>0 && s.charAt(i-1) == \" \" &&\
    \ s.length==0){\n            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \" \" && s.length>0 && s.charAt(i-1)\
    \ == \" \" && s.length>0 && s.charAt(i-2) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \" \" && s.length>0 && s.charAt(i-1) == \" \" && s.length>0 && s.charAt(i-2)\
    \ == \" \" && s.length>1){\n            words.push(s.substr(0, i));\n        \
    \    s = s.substr(i+1);\n        }\n        else if(s.charAt(i) == \" \" && s.length>0\
    \ && s.charAt(i-1) == \" \" && s.length>0 && s.charAt(i-2) == \" \" && s.length==0){\n\
    \            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n   \
    \     }\n        else if(s.charAt(i) == \" \" && s.length>0 && s.charAt(i-1) ==\
    \ \" \" && s.length>0 && s.charAt(i-2) == \" \" && s.length>0 && s.charAt(i-3)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \" \" && s.length>0 && s.charAt(i-1)\
    \ == \" \" && s.length>0 && s.charAt(i-2) == \" \" && s.length>0 && s.charAt(i-3)\
    \ == \" \" && s.length>1){\n            words.push(s.substr(0, i));\n        \
    \    s = s.substr(i+1);\n        }\n        else if(s.charAt(i) == \" \" && s.length>0\
    \ && s.charAt(i-1) == \" \" && s.length>0 && s.charAt(i-2) == \" \" && s.length>0\
    \ && s.charAt(i-3) == \" \" && s.length==0){\n            \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2gr3ppuy.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let list = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.split(\" \");\n        for(let j =\
    \ 0; j < word.length; j++){\n            if(word[j].includes(n)){\n          \
    \      list.push(word[j]);\n            }\n        }\n    }\n    return list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp33jmlrhi.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp33jmlrhi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length - 1;\n    }\n    \n    for(var j=0; j<n; j++){\n      if(s.charAt(i)\
    \ == s.charAt(j)){\n        words.push(s.substr(0, i));\n        s = s.substr(i+1);\n\
    \        i = s.length - 1;\n        break;\n      }\n    }\n  }\n  \n  return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp75hfvhn0.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp75hfvhn0.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  var vowels = \"\
    aeiou\";\n  var consonants = \"bcdfghjklmnpqrstvwxyz\";\n  \n  for(var i=0; i<s.length;\
    \ i++){\n    if(vowels.indexOf(s[i]) > -1){\n      result.push(s[i]);\n    }\n\
    \    else if(consonants.indexOf(s[i]) > -1){\n      for(var j=0; j<n; j++){\n\
    \        if(s[i] === consonants[j]){\n          result.push(s[i]);\n         \
    \ break;\n        }\n      }\n    }\n  }\n  \n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'd',\n  'a',\n  'i',\n  'e',\n  'a',\n  'b'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpos7y33i7.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpos7y33i7.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'a', 'd',\n    'a', 'i', 'e',\n    'a', 'b'\n  ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var letter = s[i];\n        if(letter === \" \"){\n\
    \            words.push(\"\");\n        }\n        else if(letter === \"a\" ||\
    \ letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"\
    ){\n            words.push(letter);\n        }\n        else{\n            var\
    \ count = 0;\n            for(var j=0; j<n; j++){\n                if(letter ===\
    \ s[j]){\n                    count++;\n                }\n            }\n   \
    \         if(count === n){\n                words.push(letter);\n            }\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  '',\n\
    \  'a',\n  '',\n  'a',\n  '',\n  'i',\n  'e',\n  '',\n  'a'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvhwhrw0i.js:47:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpvhwhrw0i.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ '',  'a', '',\n    'a', '',  'i', 'e',\n    '',  'a'\n  ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\ti++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tlet j = 0;\n\t\twhile(j < n){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.slice(i, i+n));\n\
    \t\t\tcount = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lit'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpe7xxb8ll.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe7xxb8ll.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lit' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var count = 0;\n\
    \    var index = 0;\n    while(index < s.length){\n        if(s.charAt(index)\
    \ == \" \"){\n            count++;\n        }\n        else{\n            if(count\
    \ == n){\n                words.push(s.substring(index, index+count));\n     \
    \           index += count;\n                count = 0;\n            }\n     \
    \       else{\n                count = 0;\n            }\n        }\n    }\n \
    \   return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let res = [];\n  if(s.length == 0){\n\
    \    return res;\n  }\n  let arr = s.split(\" \");\n  for(let i = 0; i < arr.length;\
    \ i++){\n    let word = arr[i];\n    let count = 0;\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(word[j] === \"a\"){\n        count++;\n      }\n    }\n    if(count\
    \ === n){\n      res.push(word);\n    }\n  }\n  return res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpngtms3uc.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpngtms3uc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let result = [];\n    let words =\
    \ s.split(\" \");\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let count = 0;\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(word[j] === \"a\"){\n                count++;\n      \
    \      }\n        }\n        if(count === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjsks45e1.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjsks45e1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var list = [];\n    for(var i = 0;\
    \ i<s.length; i++){\n        var word = s.split(\" \");\n        for(var j = 0;\
    \ j<word.length; j++){\n            if(word[j].length == n){\n               \
    \ list.push(word[j]);\n            }\n        }\n    }\n    return list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7kglatfg.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7kglatfg.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i =\
    \ 0; i<s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tresult.push(s.substring(i));\n\
    \t\t\ti = s.length - 1;\n\t\t}\n\t\telse{\n\t\t\tfor(var j = 0; j<s.length; j++){\n\
    \t\t\t\tif(s.charAt(j) == s.charAt(i) && s.charAt(j) != \" \"){\n\t\t\t\t\tresult.push(s.substring(i,j+1));\n\
    \t\t\t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(s.length\
    \ == 0){\n\t\treturn [];\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpc5kx0y96.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc5kx0y96.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y', ' had a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\tlet k = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length){\n\t\t\
    \tif(s.charAt(j) == s.charAt(i)){\n\t\t\t\tlist.push(s.substring(i, j));\n\t\t\
    \t\ti = j;\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t\tif(k == n){\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9u_dvcck.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9u_dvcck.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar c = s.charAt(i);\n\t\tif(c == \" \"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"n\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"a\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"t\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"e\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"s\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"h\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"l\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"l\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"o\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"w\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"d\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"r\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"c\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"k\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"m\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"a\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"y\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"p\"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t}\n\t\telse if(c == \"e\"){\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpws12_zy2.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\
    \twords.push(word);\n\t\t}\n\t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp1bhlypky.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1bhlypky.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var list = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.split(\" \");\n    for(var j=0; j<word.length; j++){\n\
    \      if(word[j].length == n){\n        list.push(word[j]);\n      }\n    }\n\
    \  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp45y329bm.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp45y329bm.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \tlet count = 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\
    \t\tif(char === \" \"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ === \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"e\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"i\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"o\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"u\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"y\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"t\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"n\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"h\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"l\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"d\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"m\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"a\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"e\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"i\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"o\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"u\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"y\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"s\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"n\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"h\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"l\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"d\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"m\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"e\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"i\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"o\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"u\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"y\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char === \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char ===\
    \ \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc6gqf4k9.js:129\n\t\telse if(char === \"\n\t\t                \
    \ ^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let res = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            if(s.length\
    \ - i < n){\n                res.push(s.substr(i, s.length - i));\n          \
    \  }\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkew0at4i.js:34:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpkew0at4i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var words =\
    \ [];\n    \n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i) == \"\
    \ \"){\n            words.push(s.substr(0, i));\n        }\n        \n       \
    \ if(s.charAt(i) == \" \" && words.length >= n){\n            result.push(words.join(\"\
    \ \"));\n            words = [];\n        }\n    }\n    \n    if(words.length){\n\
    \        result.push(words.join(\" \"));\n    }\n    \n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary Mary\
    \ had Mary had a Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpyhbwp0en.js:44:10)\n    at Object.<anonymous> (/tmp/tmpyhbwp0en.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary Mary\
    \ had Mary had a Mary had a little' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tvar count = 0;\n\t\tfor(var j=0;\
    \ j<word.length; j++){\n\t\t\tif(word[j].indexOf(word[i]) == 0){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\tresult.push(word[i]);\n\t\t}\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2kzu84kx.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp2kzu84kx.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.split(\" \");\n        for(var j=0;\
    \ j<word.length; j++){\n            if(word[j].length == n){\n               \
    \ words.push(word[j]);\n            }\n        }\n    }\n    return words;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjh0e4c8n.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjh0e4c8n.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpavmpgggh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpavmpgggh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let count = 0;\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n \
    \           count++;\n        }\n        if(count == n){\n            words.push(s.substr(0,\
    \ i));\n            count = 0;\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuzp479ge.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuzp479ge.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpfol1i3uu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfol1i3uu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length-1;\n    }\n    \n    for(var j=0; j<n; j++){\n      if(s.charAt(i)\
    \ == s.charAt(j)){\n        words.push(s.substr(0, i));\n        s = s.substr(i+1);\n\
    \        i = s.length-1;\n      }\n    }\n  }\n  \n  return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv1zm741m.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1zm741m.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar c = s.charAt(i);\n\t\tif(c == \" \"){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\ts = s.substr(i+1);\n\t\t\ti = s.length - 1;\n\t\t}\n\t\tfor(var\
    \ j=0; j<n; j++){\n\t\t\tif(c == consonants[j]){\n\t\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\ti = s.length - 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpld3d3plf.js:27\n\t\t\tif(c == consonants[j]){\n\t\t\t        ^\n\
    \nReferenceError: consonants is not defined\n    at select_words (/tmp/tmpld3d3plf.js:27:12)\n\
    \    at test (/tmp/tmpld3d3plf.js:43:20)\n    at Object.<anonymous> (/tmp/tmpld3d3plf.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let list = [];\n  if(s.length == 0){\n\
    \    return list;\n  }\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n \
    \     i = s.length - 1;\n    }\n  }\n  for(let i = 0; i < s.length; i++){\n  \
    \  if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 2);\n      i = s.length - 1;\n    }\n  }\n  if(s.length\
    \ != 0){\n    list.push(s);\n  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n \
    \   at test (/tmp/tmp7jn_nle3.js:47:10)\n    at Object.<anonymous> (/tmp/tmp7jn_nle3.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet letter;\n\twhile(index < s.length){\n\t\tletter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\twords.push(s.substring(index + 1, s.length));\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"a\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"e\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"i\"){\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(letter === \"o\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter === \"u\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\
    \t\telse if(letter === \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(letter === \"h\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ === \"l\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"\
    m\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"n\"){\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"s\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"t\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"r\"){\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(letter === \"c\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter === \"e\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\
    \t\telse if(letter === \"d\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(letter === \"a\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ === \"g\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"\
    b\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"p\"){\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"f\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"v\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter === \"k\"){\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(letter === \"j\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter === \"q\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\
    \t\telse if(letter === \"z\"){\n\t\t\tindex++;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7j15bcyd.js:145\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var word = \"\
    \";\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            count++;\n            word = word + s.charAt(i);\n \
    \       }\n        if(count == n){\n            result.push(word);\n         \
    \   word = \"\";\n            count = 0;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '    '\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp08wnnx5j.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp08wnnx5j.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '    ' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var list = [];\n  \n  if(s.length ==\
    \ 0){\n    return list;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \ }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" &&\
    \ s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+2);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk5dpm7d9.js:119\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpavmpgggh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpavmpgggh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var vowels =\
    \ \"aeiou\";\n    var vowels_count = vowels.length;\n    var vowels_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count = 0;\n    var vowels_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count = 0;\n    var vowels_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count =\
    \ 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string\
    \ = 0;\n    var vowels_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_string_count_in_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9px7x6fn.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var vowels =\
    \ \"aeiou\";\n    var vowels_count = vowels.length;\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    var consonants_count = consonants.length;\n    \n    var i, j, k;\n   \
    \ \n    for(i = 0; i < s.length; i++){\n        for(j = 0; j < vowels_count; j++){\n\
    \            if(s.charAt(i) == vowels[j]){\n                result.push(s.slice(i,\
    \ i+1));\n                break;\n            }\n        }\n        for(j = 0;\
    \ j < consonants_count; j++){\n            if(s.charAt(i) == consonants[j]){\n\
    \                result.push(s.slice(i, i+1));\n                break;\n     \
    \       }\n        }\n    }\n    \n    if(s.length == 0){\n        return result;\n\
    \    }\n    \n    for(i = 0; i < s.length; i++){\n        for(j = 0; j < vowels_count;\
    \ j++){\n            if(s.charAt(i) == vowels[j]){\n                result.push(s.slice(i,\
    \ i+1));\n                break;\n            }\n        }\n        for(j = 0;\
    \ j < consonants_count; j++){\n            if(s.charAt(i) == consonants[j]){\n\
    \                result.push(s.slice(i, i+1));\n                break;\n     \
    \       }\n        }\n    }\n    \n    for(i = 0; i < s.length; i++){\n      \
    \  for(j = 0; j < vowels_count; j++){\n            if(s.charAt(i) == vowels[j]){\n\
    \                result.push(s.slice(i, i+1));\n                break;\n     \
    \       }\n        }\n        for(j = 0; j < consonants_count; j++){\n       \
    \     if(s.charAt(i) == consonants[j]){\n                result.push(s.slice(i,\
    \ i+1));\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < s.length; i++){\n        for(j = 0; j < vowels_count; j++){\n     \
    \       if(s.charAt(i) == vowels[j]){\n                result.push(s.slice(i,\
    \ i+1));\n                break;\n            }\n        }\n        for(j = 0;\
    \ j < consonants_count; j++){\n            if(s.charAt(i) == consonants[j]){\n\
    \                result.push(s.slice(i, i+1));\n                break;\n     \
    \       }\n        }\n    }\n    \n    for(i = 0; i < s.length; i++){\n      \
    \  for(j = 0; j < vowels_count; j++){\n            if(s.charAt(i) == vowels[j]){\n\
    \                result.push(s.slice(i, i+1));\n                break;\n     \
    \       }\n        }\n        for(j = 0; j < consonants_count; j++){\n       \
    \     if(s.charAt(i) == consonants[j]){\n                result.push(s.slice(i,\
    \ i+1));\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < s.length; i++){\n        for(j = 0; j < vowels_count; j++){\n     \
    \       if(s.charAt(i) == vowels[j]){\n                result.push(\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgyjhnr74.js:109\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var list = [];\n  \n  if(s.length ==\
    \ 0){\n    return list;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1)\
    \ != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+2)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+2);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+3)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+3);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+4)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+4);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+5)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+5);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+6)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+6);\n   \
    \   \n      if(s.length == 0){\n        return list;\n      }\n    }\n  }\n  \n\
    \  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+7)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0of9xl2m.js:116\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let list = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.split(\"\").filter(x => x != \" \"\
    ).join(\"\");\n        if(word.length == n){\n            list.push(word);\n \
    \       }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpx5jo3la1.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpx5jo3la1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\t\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar c = s.charAt(i);\n\t\tif(c == \" \"){\n\t\t\tlist.push(s.substring(i));\n\
    \t\t\tbreak;\n\t\t}\n\t\t\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(c == consonants[j]){\n\
    \t\t\t\tlist.push(s.substring(i));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7bsrdp2s.js:28\n\t\t\tif(c == consonants[j]){\n\t\t\t        ^\n\
    \nReferenceError: consonants is not defined\n    at select_words (/tmp/tmp7bsrdp2s.js:28:12)\n\
    \    at test (/tmp/tmp7bsrdp2s.js:43:20)\n    at Object.<anonymous> (/tmp/tmp7bsrdp2s.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n    for(var j = 0; j<s.length;\
    \ j++){\n      if(s.charAt(j) == s.charAt(i) && s.charAt(j) != \" \"){\n     \
    \   words.push(s.substr(0, j));\n        s = s.substr(j+1);\n        i = s.length-1;\n\
    \      }\n    }\n  }\n  if(s.length == 0){\n    return [];\n  }\n  return words.filter(function(word){\n\
    \    return word.length == n;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1d0qmt4x.js:46:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1d0qmt4x.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    \n    for(var\
    \ i = 0; i<s.length; i++){\n        var letter = s[i];\n        \n        if(letter\
    \ == \" \"){\n            words.push(\"\");\n        }\n        else if(letter\
    \ == \"a\"){\n            words.push(\"a\");\n        }\n        else if(letter\
    \ == \"e\"){\n            words.push(\"e\");\n        }\n        else if(letter\
    \ == \"i\"){\n            words.push(\"i\");\n        }\n        else if(letter\
    \ == \"o\"){\n            words.push(\"o\");\n        }\n        else if(letter\
    \ == \"u\"){\n            words.push(\"u\");\n        }\n        else if(letter\
    \ == \"y\"){\n            words.push(\"y\");\n        }\n        else if(letter\
    \ == \"s\"){\n            words.push(\"s\");\n        }\n        else if(letter\
    \ == \"t\"){\n            words.push(\"t\");\n        }\n        else if(letter\
    \ == \"h\"){\n            words.push(\"h\");\n        }\n        else if(letter\
    \ == \"l\"){\n            words.push(\"l\");\n        }\n        else if(letter\
    \ == \"d\"){\n            words.push(\"d\");\n        }\n        else if(letter\
    \ == \"n\"){\n            words.push(\"n\");\n        }\n        else if(letter\
    \ == \"g\"){\n            words.push(\"g\");\n        }\n        else if(letter\
    \ == \"f\"){\n            words.push(\"f\");\n        }\n        else if(letter\
    \ == \"p\"){\n            words.push(\"p\");\n        }\n        else if(letter\
    \ == \"m\"){\n            words.push(\"m\");\n        }\n        else if(letter\
    \ == \"b\"){\n            words.push(\"b\");\n        }\n        else if(letter\
    \ == \"v\"){\n            words.push(\"v\");\n        }\n        else if(letter\
    \ == \"k\"){\n            words.push(\"k\");\n        }\n        else if(letter\
    \ == \"j\"){\n            words.push(\"j\");\n        }\n        else if(letter\
    \ == \"q\"){\n            words.push(\"q\");\n        }\n        else if(letter\
    \ == \"y\"){\n            words.push(\"y\");\n        }\n        else if(letter\
    \ == \"x\"){\n            words.push(\"x\");\n        }\n        else if(letter\
    \ == \"q\"){\n            words.push(\"q\");\n        }\n        else if(letter\
    \ == \"w\"){\n            words.push(\"w\");\n        }\n        else if(letter\
    \ == \"v\"){\n            words.push(\"v\");\n        }\n        else if(letter\
    \ == \"z\"){\n            words.push(\"z\");\n        }\n        else if(letter\
    \ == \"r\"){\n            words.push(\"r\");\n        }\n        else if(letter\
    \ == \"c\"){\n            words.push\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjei5darq.js:126\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \tlet word = \"\";\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\
    \t\tif(char == \" \"){\n\t\t\tresult.push(word);\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"a\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\
    \t\telse if(char == \"e\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse\
    \ if(char == \"i\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"o\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"\
    u\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"y\"){\n\
    \t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\t\
    word = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"t\"){\n\t\t\tword =\
    \ \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"h\"){\n\t\t\tword = \"\"\
    ;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tword = \"\";\n\t\t\
    \tindex++;\n\t\t}\n\t\telse if(char == \"d\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"n\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\
    \t\telse if(char == \"g\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse\
    \ if(char == \"m\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"a\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"\
    p\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"e\"){\n\
    \t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"r\"){\n\t\t\t\
    word = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tword =\
    \ \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"b\"){\n\t\t\tword = \"\"\
    ;\n\t\t\tindex++;\n\t\t}\n\t\telse if(char == \"v\"){\n\t\t\tword = \"\";\n\t\t\
    \tindex++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t}\n\t\telse if(char == \"c\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\
    \t\telse if(char == \"k\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse\
    \ if(char == \"m\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(char\
    \ == \"e\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t}\n\t\telse if(\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp678pbag.js:133\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tlet vowels\
    \ = \"aeiouAEIOU\";\n\tlet consonants_count = consonants.length;\n\tlet vowels_count\
    \ = vowels.length;\n\tlet consonant_count = 0;\n\tlet vowel_count = 0;\n\tlet\
    \ consonant_index = 0;\n\tlet vowel_index = 0;\n\tlet consonant_letter;\n\tlet\
    \ vowel_letter;\n\tlet consonant_count = 0;\n\tlet vowel_count = 0;\n\tlet consonant_index\
    \ = 0;\n\tlet vowel_index = 0;\n\tlet consonant_letter;\n\tlet vowel_letter;\n\
    \twhile(index < s.length){\n\t\tconsonant_letter = s.charAt(index);\n\t\tvowel_letter\
    \ = s.charAt(index+1);\n\t\tconsonant_count = consonants.indexOf(consonant_letter);\n\
    \t\tvowel_count = vowels.indexOf(vowel_letter);\n\t\tif(consonant_count === n\
    \ && vowel_count === n){\n\t\t\twords.push(s.substring(index, index+n));\n\t\t\
    }\n\t\tindex += 2;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu85yjf5f.js:30\n\tlet consonant_count = 0;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'consonant_count' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet char = s.charAt(i);\n\t\tlet isConsonant\
    \ = false;\n\t\tfor(let j = 0; j < n; j++){\n\t\t\tlet c = s.charAt(i+j);\n\t\t\
    \tif(c == char){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\tif(isConsonant){\n\t\t\twords.push(s.substring(i, i+n));\n\t\t\tcount += n;\n\
    \t\t\ti += n;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(count == s.length){\n\
    \t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpipavh513.js:51:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpipavh513.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tif(s.charAt(index) == \" \"){\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tlet letter = s.charAt(index);\n\
    \t\t\tif(letter == \" \"){\n\t\t\t\tindex++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tif(count == n){\n\t\t\t\t\twords.push(s.substring(index, s.length));\n\
    \t\t\t\t\tcount = 0;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tcount++;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzrft2899.js:50:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzrft2899.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  if(s.length != 0){\n    words.push(s);\n\
    \  }\n  if(words.length == n){\n    return words;\n  }\n  else{\n    return [];\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmparmdreh7.js:41:10)\n    at Object.<anonymous> (/tmp/tmparmdreh7.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n   \
    \ var word = s.substr(0, i);\n    \n    if(word.length == n){\n      words.push(word);\n\
    \    }\n  }\n  \n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn5s95zqp.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn5s95zqp.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\t\n\tfor(var i = 0;\
    \ i<s.length; i++){\n\t\tvar letter = s[i];\n\t\tvar count = 0;\n\t\tfor(var j\
    \ = 0; j<s.length; j++){\n\t\t\tif(s[j] == letter){\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t\tif(count == n){\n\t\t\tlist.push(letter);\n\t\t}\n\t}\n\treturn\
    \ list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  '\
    \ ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  ' ',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpgak9mtyx.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgak9mtyx.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ ' ', 'a',\n    ' ', 'a', ' ',\n    ' ', 'a'\n  ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    for(let i = 0; i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmlu6h8uw.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmlu6h8uw.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.length - i < n){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  \n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdhcc05ko.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdhcc05ko.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tvar words = s.split(\"\
    \ \");\n\tfor(var i=0; i<words.length; i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ count = 0;\n\t\tfor(var j=0; j<word.length; j++){\n\t\t\tif(word[j].match(/[aeiou]/i)){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpb_gpdwwn.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpb_gpdwwn.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  s = s.split(\" \"\
    );\n  for(let i = 0; i < s.length; i++){\n    let word = s[i];\n    let count\
    \ = 0;\n    for(let j = 0; j < word.length; j++){\n      if(word[j] === \"a\"\
    ){\n        count++;\n      }\n    }\n    if(count === n){\n      words.push(word);\n\
    \    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9my_yqc_.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9my_yqc_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n\tlet vowels = \"aeiou\";\n\tlet\
    \ vowelsCount = 0;\n\tlet consonantsCount = 0;\n\tlet vowelsArray = vowels.split(\"\
    \");\n\tlet consonantsArray = consonants.split(\"\");\n\tlet vowelsArrayLength\
    \ = vowelsArray.length;\n\tlet consonantsArrayLength = consonantsArray.length;\n\
    \tlet vowelsArrayIndex = 0;\n\tlet consonantsArrayIndex = 0;\n\tlet vowelsArrayLengthIndex\
    \ = 0;\n\tlet consonantsArrayLengthIndex = 0;\n\tlet vowelsArrayIndex2 = 0;\n\t\
    let consonantsArrayIndex2 = 0;\n\tlet vowelsArrayLengthIndex2 = 0;\n\tlet consonantsArrayLengthIndex2\
    \ = 0;\n\tlet vowelsArrayIndex3 = 0;\n\tlet consonantsArrayIndex3 = 0;\n\tlet\
    \ vowelsArrayLengthIndex3 = 0;\n\tlet consonantsArrayLengthIndex3 = 0;\n\tlet\
    \ vowelsArrayIndex4 = 0;\n\tlet consonantsArrayIndex4 = 0;\n\tlet vowelsArrayLengthIndex4\
    \ = 0;\n\tlet consonantsArrayLengthIndex4 = 0;\n\tlet vowelsArrayIndex5 = 0;\n\
    \tlet consonantsArrayIndex5 = 0;\n\tlet vowelsArrayLengthIndex5 = 0;\n\tlet consonantsArrayLengthIndex5\
    \ = 0;\n\tlet vowelsArrayIndex6 = 0;\n\tlet consonantsArrayIndex6 = 0;\n\tlet\
    \ vowelsArrayLengthIndex6 = 0;\n\tlet consonantsArrayLengthIndex6 = 0;\n\tlet\
    \ vowelsArrayIndex7 = 0;\n\tlet consonantsArrayIndex7 = 0;\n\tlet vowelsArrayLengthIndex7\
    \ = 0;\n\tlet consonantsArrayLengthIndex7 = 0;\n\tlet vowelsArrayIndex8 = 0;\n\
    \tlet consonantsArrayIndex8 = 0;\n\tlet vowelsArrayLengthIndex8 = 0;\n\tlet consonantsArrayLengthIndex8\
    \ = 0;\n\tlet vowelsArrayIndex9 = 0;\n\tlet consonantsArrayIndex9 = 0;\n\tlet\
    \ vowelsArrayLengthIndex9 = 0;\n\tlet consonantsArrayLengthIndex9 = 0;\n\tlet\
    \ vowelsArrayIndex10 = 0;\n\tlet consonantsArrayIndex10 = 0;\n\tlet vowelsArrayLengthIndex10\
    \ = 0;\n\tlet consonantsArrayLengthIndex10 = 0;\n\tlet vowelsArrayIndex11 = 0;\n\
    \tlet consonantsArrayIndex11 = 0;\n\tlet vowelsArrayLengthIndex11 = 0;\n\tlet\
    \ con\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpir89yygz.js:86\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    for(let i = 0; i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.slice(i, i+n+1));\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprah0b7lz.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmprah0b7lz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet letter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tif(count ===\
    \ n){\n\t\t\t\twords.push(s.substring(index));\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9yvtq35o.js:45:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9yvtq35o.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tvar words = [];\n\
    \t\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\t\n\
    \t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\t\n\tfor(var\
    \ i = 0; i<words.length; i++){\n\t\tvar word = words[i];\n\t\t\n\t\tfor(var j\
    \ = 0; j<word.length; j++){\n\t\t\tfor(var k = 0; k<consonants.length; k++){\n\
    \t\t\t\tif(word[j] == consonants[k]){\n\t\t\t\t\tresult.push(word);\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp20ohpwcc.js:33\n\t\t\tfor(var k = 0; k<consonants.length; k++){\n\
    \t\t\t                 ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmp20ohpwcc.js:33:21)\n    at test (/tmp/tmp20ohpwcc.js:50:20)\n\
    \    at Object.<anonymous> (/tmp/tmp20ohpwcc.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet char = s[i];\n\t\tlet isConsonant\
    \ = false;\n\t\tfor(let j = 0; j < n; j++){\n\t\t\tif(char === s[j]){\n\t\t\t\t\
    isConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isConsonant){\n\t\t\
    \twords.push(char);\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif(count === n){\n\
    \t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpj_ui4nvv.js:47:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpj_ui4nvv.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n    }\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \" && words.length == n){\n\
    \            words.push(s.substr(0, i));\n            s = s.substr(i + 1);\n \
    \       }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpfop9x5tv.js:39:10)\n    at Object.<anonymous> (/tmp/tmpfop9x5tv.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet res = [];\n\tlet count = 0;\n\t\
    let last = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet c = s.charAt(i);\n\
    \t\tif(c == \" \"){\n\t\t\tcount++;\n\t\t\tlast = i;\n\t\t}\n\t\ti++;\n\t}\n\t\
    while(count < n){\n\t\tlet c = s.charAt(last);\n\t\tif(c == \" \"){\n\t\t\tcount++;\n\
    \t\t\tlast = last+1;\n\t\t}\n\t\telse{\n\t\t\tres.push(s.substring(last, last+1))\n\
    \t\t\tcount++;\n\t\t\tlast = last+1;\n\t\t}\n\t}\n\treturn res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmppd2lbmj6.js:50:10)\n  \
    \  at Object.<anonymous> (/tmp/tmppd2lbmj6.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\t\n\t\tif(c == \" \"){\n\t\t\
    \twords.push(s.substring(i));\n\t\t\t\n\t\t\tfor(var j=i+1; j<s.length; j++){\n\
    \t\t\t\tvar c2 = s.charAt(j);\n\t\t\t\t\n\t\t\t\tif(c2 == \" \"){\n\t\t\t\t\t\
    words.push(s.substring(i, j));\n\t\t\t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t\t\n\t\t\t\tif(c2 != c){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \t\n\t\tif(c == n){\n\t\t\twords.push(s.substring(i));\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\t\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little\
    \ lamb',\n  ' a little lamb',\n  ' little lamb',\n  ' lamb'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptq9e4rs4.js:55:10)\n  \
    \  at Object.<anonymous> (/tmp/tmptq9e4rs4.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ little lamb', ' a little lamb', ' little lamb', ' lamb' ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let letter = s[i];\n        if(letter == \" \"\
    ){\n            words.push(s.substring(i));\n        }\n        else if(letter\
    \ == \"a\"){\n            words.push(s.substring(i));\n        }\n        else\
    \ if(letter == \"e\"){\n            words.push(s.substring(i));\n        }\n \
    \       else if(letter == \"i\"){\n            words.push(s.substring(i));\n \
    \       }\n        else if(letter == \"o\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"u\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"y\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"h\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"l\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"l\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"s\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"t\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"d\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"e\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"n\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"g\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"a\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"m\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"p\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"e\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"s\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"t\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"l\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"d\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"a\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"y\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"s\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter == \"e\"){\n            words.push(s.substring(i));\n\
    \        }\n        else if(letter\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_djuwck7.js:106\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tlist.push(s.substr(0, i));\n\t\t\
    \ts = s.substr(i+1);\n\t\t}\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(j)){\n\t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'y ',\n  'ad ',\n  ' lit'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp6de9sh2j.js:40:10)\n    at Object.<anonymous> (/tmp/tmp6de9sh2j.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'a',\
    \ 'y ', 'ad ', ' lit' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var count = 0;\n\
    \    var i = 0;\n    while(i < s.length){\n        if(s.charAt(i) == \" \"){\n\
    \            words.push(s.substr(i, s.length));\n            i = i + 1;\n    \
    \        count = count + 1;\n        }\n        else if(s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \"-\" || s.charAt(i) == \"_\" || s.charAt(i) == \"\
    &\" || s.charAt(i) == \"#\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" ||\
    \ s.charAt(i) == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i)\
    \ == \"}\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) ==\
    \ \"'\" || s.charAt(i) == \"+\" || s.charAt(i) == \"*\" || s.charAt(i) == \"^\"\
    \ || s.charAt(i) == \"~\" || s.charAt(i) == \"`\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \"<\" || s.charAt(i) == \">\" || s.charAt(i) == \"\
    =\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\" || s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \"&\" || s.charAt(i) == \"#\" || s.charAt(i)\
    \ == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"[\" || s.charAt(i) == \"\
    ]\" || s.charAt(i) == \"{\" || s.charAt(i) == \"}\" || s.charAt(i) == \"|\" ||\
    \ s.charAt(i) == \"\\\\\" || s.charAt(i) == \"'\" || s.charAt(i) == \"+\" || s.charAt(i)\
    \ == \"*\" || s.charAt(i) == \"^\" || s.charAt(i) == \"~\" || s.charAt(i) == \"\
    `\" || s.charAt(i) == \"!\" || s.charAt(i) == \":\" || s.charAt(i) == \"<\" ||\
    \ s.charAt(i) == \">\" || s.charAt(i) == \"=\" || s.charAt(i) == \"?\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"\
    &\" || s.charAt(i) == \"#\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" ||\
    \ s.charAt(i) == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i)\
    \ == \"}\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) ==\
    \ \"'\" || s.charAt(i) == \"+\" || s.charAt(i) == \"*\" || s.charAt(i) == \"^\"\
    \ || s.charAt(i) == \"~\" || s.charAt(i) == \"`\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \"<\" || s.charAt(i) == \">\" || s.charAt(\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp45z5lzgp.js:28\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  if(s.length == 0){\n\
    \    return words;\n  }\n  for(let i = 0; i < s.length; i++){\n    let word =\
    \ s.substr(i, n);\n    if(word.length == n){\n      words.push(word);\n    }\n\
    \  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpe6sna9mc.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe6sna9mc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  if(s.length == 0){\n\
    \    return words;\n  }\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \      i = s.length - 1;\n    }\n    for(let j = 0; j < n; j++){\n      if(s.charAt(i)\
    \ == s.charAt(j)){\n        words.push(s.substr(0, i));\n        s = s.substr(i\
    \ + 1);\n        i = s.length - 1;\n      }\n    }\n  }\n  return words;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3adslqtp.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3adslqtp.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    for(let i = 0; i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmlu6h8uw.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmlu6h8uw.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet result = [];\n\tlet words = [];\n\
    \tlet index = 0;\n\tlet count = 0;\n\twhile(index < s.length){\n\t\tlet char =\
    \ s.charAt(index);\n\t\tif(char == \" \"){\n\t\t\twords.push(s.substring(index,\
    \ index+count));\n\t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}else{\n\t\t\t\
    count++;\n\t\t}\n\t\tif(count == n){\n\t\t\tresult.push(words);\n\t\t\twords =\
    \ [];\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let result = [];\n    let i = 0;\n\
    \    while(i < s.length){\n        let word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n            i += n;\n        }\n   \
    \     else{\n            i++;\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp0sc5ytp_.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0sc5ytp_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i = 0;\
    \ i<s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\t\n\t\tif(word.length\
    \ == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpnjv11_dv.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnjv11_dv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\tlet j = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length && s[j]\
    \ === s[i] && s[j] !== ''){\n\t\t\tj++;\n\t\t}\n\t\tif(j === s.length){\n\t\t\t\
    words.push(s.slice(i, s.length));\n\t\t\ti = s.length;\n\t\t\tj = 0;\n\t\t\tcount++;\n\
    \t\t}\n\t\ti++;\n\t\tj = 0;\n\t}\n\tif(count === n){\n\t\treturn words;\n\t}\n\
    \treturn [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzcwezm_a.js:46:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzcwezm_a.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let res = [];\n  \n  if(s.length ==\
    \ 0){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n  \
    \    i = s.length - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i\
    \ + 1);\n      i = s.length - 1;\n    }\n    \n    if(s.charAt(i) == n && s.charAt(i\
    \ + 1) != \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 2);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqc5_z7bh.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqc5_z7bh.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  if(s.length == 0){\n\
    \    return words;\n  }\n  for(let i = 0; i < s.length; i++){\n    let letter\
    \ = s[i];\n    let count = 0;\n    for(let j = 0; j < letter.length; j++){\n \
    \     if(letter[j] === \"a\"){\n        count++;\n      }\n    }\n    if(count\
    \ == n){\n      words.push(letter);\n    }\n  }\n  return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpy5378ap7.js:42:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpy5378ap7.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var count = 0;\n\
    \    for(var i=0; i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n     \
    \       count++;\n        }\n        if(count == n){\n            words.push(s.substr(0,\
    \ i));\n            count = 0;\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpw90ztgu4.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw90ztgu4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet word = \"\";\n\
    \tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tif(s.charAt(i) ==\
    \ \" \"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t\
    }\n\t\telse if(s.charAt(i) == \" \" && count < n){\n\t\t\tword += s.charAt(i);\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \" \" && count == n){\n\t\t\t\
    words.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \" \" && count > n){\n\t\t\tword = \"\";\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpwjkb5l_p.js:50:10)\n    at Object.<anonymous> (/tmp/tmpwjkb5l_p.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '',\
    \ '', '' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet last = 0;\n\twhile(index<s.length){\n\t\tif(s[index] ==\
    \ \" \"){\n\t\t\twords.push(s.substring(last, index));\n\t\t\tlast = index+1;\n\
    \t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(last < s.length){\n\t\twords.push(s.substring(last,\
    \ s.length));\n\t}\n\tif(count < n){\n\t\treturn words;\n\t}\n\treturn [];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpivty_3ch.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpivty_3ch.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let count = 0;\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n \
    \           count++;\n        }\n        if(count == n){\n            words.push(s.substr(0,\
    \ i));\n            count = 0;\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuzp479ge.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuzp479ge.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.split(\"\").filter(x => x.charCodeAt(0)\
    \ == s[i].charCodeAt(0));\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'a',\n\
    \    'a',\n    'a',\n    'a'\n  ],\n  [\n    ' ',\n    ' ',\n    ' ',\n    ' '\n\
    \  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ],\n  [\n    ' ',\n    '\
    \ ',\n    ' ',\n    ' '\n  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ],\n\
    \  [\n    ' ',\n    ' ',\n    ' ',\n    ' '\n  ],\n  [\n    ' ',\n    ' ',\n \
    \   ' ',\n    ' '\n  ],\n  [\n    'a',\n    'a',\n    'a',\n    'a'\n  ]\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc958nh3x.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc958nh3x.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'a',\
    \ 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ],\n\
    \    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ',\
    \ ' ' ],\n    [ ' ', ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ]\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  for(let i = 0; i\
    \ < s.length; i++){\n    let word = s.split(\"\").filter((letter, i) => i ===\
    \ 0 || letter !== s[i - 1]);\n    if(word.length === n){\n      words.push(word.join(\"\
    \"));\n    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqatafge5.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqatafge5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\
    \t\t\t\tresult.push(s.substr(i, n));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgswb8z0m.js:21\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmpgswb8z0m.js:21:22)\n    at test (/tmp/tmpgswb8z0m.js:35:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpgswb8z0m.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tvar count = 0;\n\t\
    for(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(s.charAt(i) == \".\" || s.charAt(i) == \",\" || s.charAt(i)\
    \ == \"?\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    !\"){\n\t\t\tcount--;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0,\
    \ i+1));\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little ',\n  'Mary had a little l',\n  'Mary had a little la',\n  'Mary had\
    \ a little lam',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpqodg9jup.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqodg9jup.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little ',\n    'Mary had a little l',\n    'Mary had a little la',\n \
    \   'Mary had a little lam',\n    'Mary had a little lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlet found = false;\n\t\tfor(let\
    \ j = 0; j < words.length; j++){\n\t\t\tif(words[j] === word){\n\t\t\t\tfound\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\t\t\twords.push(word);\n\
    \t\t}\n\t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpgfw72ckq.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgfw72ckq.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    for(var i = 0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpyaxsfpwa.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyaxsfpwa.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    while(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\tindex\
    \ = index+n;\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\
    \treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpb84s4lky.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb84s4lky.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet res = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet temp = \"\";\n\twhile(index < s.length){\n\t\ttemp = s.charAt(index);\n\
    \t\tcount++;\n\t\tif(count > n){\n\t\t\tres.push(temp);\n\t\t\tcount = 0;\n\t\t\
    }\n\t\tindex++;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  'a',\n\
    \  't',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpfkx8wi5n.js:39:10)\n    at Object.<anonymous> (/tmp/tmpfkx8wi5n.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', 'a',\
    \ 't', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(index < s.length){\n\t\tif(s[index] === \" \"){\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(s[index] === \" \"){\n\t\t\tcount--;\n\t\t}\n\t\t\
    else if(s[index] === \" \" && count === n){\n\t\t\twords.push(s.slice(index, index+s.length));\n\
    \t\t\tindex = index + s.length;\n\t\t\tcount = 0;\n\t\t}\n\t\tindex++;\n\t}\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcidpc59f.js:43:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpcidpc59f.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet j = 0;\n\t\
    \twhile(j < n){\n\t\t\tif(letter == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tif(j == n){\n\t\t\twords.push(s.substring(i,\
    \ i + j));\n\t\t\ti += j;\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t\
    }\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had ',\n  'a li',\n  'ttle',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpkfw3cnla.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkfw3cnla.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had ', 'a li', 'ttle', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\twords.push(s.substr(0, i));\n\t\t\
    \ts = s.substr(i+1);\n\t\t}\n\t}\n\tif(s.length == 0){\n\t\treturn words;\n\t\
    }\n\tfor(var i=0; i<s.length; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i)\
    \ == \" \"){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpeteg9qtx.js:45:10)\n    at Object.<anonymous> (/tmp/tmpeteg9qtx.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        let word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            words.push(word);\n        }\n    }\n    return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpmohr1r_f.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmohr1r_f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsCountInString = 0;\n    var vowelsCountInStringArray = [];\n  \
    \  var vowelsCountInStringArrayIndex = 0;\n    var vowelsCountInStringArrayLength\
    \ = vowelsCountInStringArray.length;\n    var vowelsCountInStringArrayMax = vowelsCountInStringArray.length\
    \ - 1;\n    var vowelsCountInStringArrayMin = 0;\n    var vowelsCountInStringArraySum\
    \ = 0;\n    var vowelsCountInStringArraySumIndex = 0;\n    var vowelsCountInStringArraySumLength\
    \ = vowelsCountInStringArraySum.length;\n    var vowelsCountInStringArraySumMax\
    \ = vowelsCountInStringArraySum.length - 1;\n    var vowelsCountInStringArraySumMin\
    \ = 0;\n    var vowelsCountInStringArraySumSum = 0;\n    var vowelsCountInStringArraySumSumIndex\
    \ = 0;\n    var vowelsCountInStringArraySumSumLength = vowelsCountInStringArraySumSum.length;\n\
    \    var vowelsCountInStringArraySumSumMax = vowelsCountInStringArraySumSum.length\
    \ - 1;\n    var vowelsCountInStringArraySumSumMin = 0;\n    var vowelsCountInStringArraySumSumSum\
    \ = 0;\n    var vowelsCountInStringArraySumSumSumIndex = 0;\n    var vowelsCountInStringArraySumSumSumLength\
    \ = vowelsCountInStringArraySumSumSum.length;\n    var vowelsCountInStringArraySumSumSumMax\
    \ = vowelsCountInStringArraySumSumSum.length - 1;\n    var vowelsCountInStringArraySumSumSumMin\
    \ = 0;\n    var vowelsCountInStringArraySumSumSumSum = 0;\n    var vowelsCountInStringArraySumSumSumSumIndex\
    \ = 0;\n    var vowelsCountInStringArraySumSumSumSumLength = vowelsCountInStringArraySumSumSumSum.length;\n\
    \    var vowelsCountInStringArraySumSumSumSumMax = vowelsCountInStringArraySumSumSumSum.length\
    \ - 1;\n    var vowelsCountInStringArraySumSumSumSumMin = 0;\n    var vowelsCountInStringArraySumSumSumSumSum\
    \ = 0;\n    var vowelsCountInStringArraySumSumSumSumSumIndex = 0;\n    var vowelsCountInStringArraySumSumSumSumSumLength\
    \ = vowelsCountInStringArraySumSumSumSum.length;\n    var vowelsCountInStringArraySumSumSumSumSumMax\
    \ = vowelsCountInStringArraySumSumSumSumSum.length - 1;\n    var vowelsCountInStringArraySumSumSumSumSumMin\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkvv9a7ny.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n   \
    \ if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var\
    \ i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"\
    ){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n     \
    \ s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n     \
    \ s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n     \
    \ s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n     \
    \ s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i=0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdmgvpezr.js:105\n    if(s.charAt(i) == \" \n                  \
    \    ^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    var vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    \n    if (s.length\
    \ == 0){\n        return words;\n    }\n    \n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    \n    while (i < s.length){\n        if (s.charAt(i) == \"\
    \ \"){\n            i++;\n        }\n        \n        while (j < s.length){\n\
    \            if (s.charAt(j) == \" \"){\n                j++;\n            }\n\
    \            \n            while (k < s.length){\n                if (s.charAt(k)\
    \ == \" \"){\n                    k++;\n                }\n                \n\
    \                if (s.charAt(j) == s.charAt(k) && vowels.indexOf(s.charAt(j))\
    \ > -1){\n                    words.push(s.substring(i, j));\n               \
    \     i = j;\n                    j = k;\n                    k = 0;\n       \
    \         }\n                \n                else if (s.charAt(j) == s.charAt(k)\
    \ && consonants.indexOf(s.charAt(j)) > -1){\n                    words.push(s.substring(i,\
    \ j));\n                    i = j;\n                    j = k;\n             \
    \       k = 0;\n                }\n                \n                else if (s.charAt(j)\
    \ == s.charAt(k) && consonants.indexOf(s.charAt(k)) > -1){\n                 \
    \   words.push(s.substring(i, j));\n                    i = j;\n             \
    \       j = k;\n                    k = 0;\n                }\n              \
    \  \n                else if (s.charAt(j) == s.charAt(k) && vowels.indexOf(s.charAt(k))\
    \ > -1){\n                    words.push(s.substring(i, j));\n               \
    \     i = j;\n                    j = k;\n                    k = 0;\n       \
    \         }\n                \n                else if (s.charAt(j) == s.charAt(k)\
    \ && consonants.indexOf(s.charAt(k)) > -1){\n                    words.push(s.substring(i,\
    \ j));\n                    i = j;\n                    j = k;\n             \
    \       k = 0;\n                }\n                \n                else if (s.charAt(j)\
    \ == s.charAt(k) && vowels.indexOf(s.charAt(k)) > -1){\n                    words.push(s.substring(i,\
    \ j));\n                    i = j;\n                    j = k;\n             \
    \       k = 0;\n                }\n                \n                else if (s.charAt(j)\
    \ == s.charAt(k) && consonants.indexOf(s.charAt(k)) > -1){\n                 \
    \   words.push(s.substring(i, j));\n                    i = j;\n             \
    \       j = k;\n                    k = 0;\n                }\n              \
    \  \n                else if (s.charAt(j) == s.charAt(k) && vowels.indexOf(s.charAt(k))\
    \ > -1){\n                    words.push(s.substring(i, j));\n               \
    \     i = j;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjqixngo7.js:111\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlet index = words.indexOf(word);\n\
    \t\tif(index == -1){\n\t\t\twords.push(word);\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb',\n  'amb',\n  'mb',\n  'b'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp40b32zfn.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp40b32zfn.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h', 'y ha',\n    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a\
    \ li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam',\
    \ 'lamb', 'amb',\n    'mb',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length){\n\t\t\tif(s.charAt(j)\
    \ == s.charAt(i)){\n\t\t\t\twords.push(s.substring(i, j));\n\t\t\t\tj++;\n\t\t\
    \t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  '',\n  '',\n  '',\n  '',\n  '',\n  't',\n  '',\n  '',\n  ''\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprl8t4hd1.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmprl8t4hd1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \ '', '',  '', '',\n    '', '', 't', '', '',\n    ''\n  ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  \n  if(s.length ==\
    \ 0){\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \      i = s.length - 1;\n    }\n    \n    if(s.charAt(i) == \".\" || s.charAt(i)\
    \ == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \";\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" ||\
    \ s.charAt(i) == \":\" || s.charAt(i) == \"!\"){\n      s = s.substr(i + 1);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i\
    \ + 1);\n      i = s.length - 1;\n    }\n    \n    if(s.charAt(i) == \".\" ||\
    \ s.charAt(i) == \",\" || s.charAt(i) == \";\" || s.charAt(i) == \"?\" || s.charAt(i)\
    \ == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \":\" || s.charAt(i) == \"!\"){\n      s = s.substr(i +\
    \ 1);\n      i = s.length - 1;\n    }\n  }\n  \n  if(s.length != 0){\n    words.push(s);\n\
    \  }\n  \n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had',\n  'a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp18o9sd43.js:62:10)\n    at Object.<anonymous> (/tmp/tmp18o9sd43.js:71:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had', 'a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let count = 0;\n\
    \    let index = 0;\n    while(index < s.length){\n        if(s.charAt(index)\
    \ == \" \"){\n            count++;\n        }\n        if(count == n){\n     \
    \       words.push(s.substring(index, index+n));\n            count = 0;\n   \
    \     }\n        index++;\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' lam'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpefbdmsig.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpefbdmsig.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tvar count = 0;\n\t\
    for(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t\tif(count == n){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwme6hyl2.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwme6hyl2.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar letter = s[i];\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(letter\
    \ == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"a\"){\n\t\t\t\
    \tletter = \"e\";\n\t\t\t}\n\t\t\telse if(letter == \"e\"){\n\t\t\t\tletter =\
    \ \"i\";\n\t\t\t}\n\t\t\telse if(letter == \"i\"){\n\t\t\t\tletter = \"o\";\n\t\
    \t\t}\n\t\t\telse if(letter == \"o\"){\n\t\t\t\tletter = \"u\";\n\t\t\t}\n\t\t\
    \telse if(letter == \"u\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"y\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"s\"\
    ){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"h\"){\n\t\t\t\t\
    letter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\tletter = \"\
    a\";\n\t\t\t}\n\t\t\telse if(letter == \"d\"){\n\t\t\t\tletter = \"a\";\n\t\t\t\
    }\n\t\t\telse if(letter == \"e\"){\n\t\t\t\tletter = \"e\";\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"n\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"t\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"a\"\
    ){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\t\
    letter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\tletter = \"\
    a\";\n\t\t\t}\n\t\t\telse if(letter == \"c\"){\n\t\t\t\tletter = \"a\";\n\t\t\t\
    }\n\t\t\telse if(letter == \"e\"){\n\t\t\t\tletter = \"e\";\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"n\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"t\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"a\"\
    ){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\t\
    letter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\tletter = \"\
    a\";\n\t\t\t}\n\t\t\telse if(letter == \"c\"){\n\t\t\t\tletter = \"a\";\n\t\t\t\
    }\n\t\t\telse if(letter == \"e\"){\n\t\t\t\tletter = \"e\";\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"n\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"t\"){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"a\"\
    ){\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\t\
    letter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\t\t\tletter = \"\
    a\";\n\t\t\t}\n\t\t\telse if(letter\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplbzhvzle.js:116\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet result = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\
    \tresult.push(word);\n\t\t\ti += n;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp_0_gte_7.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_0_gte_7.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let i = 0;\n\twhile(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet count = 0;\n\
    \t\twhile(count < n && i < s.length){\n\t\t\tlet letter2 = s[i];\n\t\t\ti++;\n\
    \t\t\tcount++;\n\t\t\tif(letter2 === letter){\n\t\t\t\twords.push(letter);\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ',\n  'h',\n  'a',\n  'd',\n  ' ',\n  'a',\n  ' ',\n  'l',\n\
    \  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' ',\n  'l',\n  'a',\n  'm',\n  'b'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpim4x8zqo.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpim4x8zqo.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y', ' ',\n    'h', 'a', 'd', ' ', 'a',\n    ' ', 'l', 'i', 't', 't',\n\
    \    'l', 'e', ' ', 'l', 'a',\n    'm', 'b'\n  ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet word = \"\";\n\twhile(index < s.length){\n\t\tlet letter\
    \ = s[index];\n\t\tlet isConsonant = false;\n\t\tfor(let i = 0; i < consonants.length;\
    \ i++){\n\t\t\tif(letter == consonants[i]){\n\t\t\t\tisConsonant = true;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isConsonant){\n\t\t\twords.push(word);\n\t\t\
    \tcount++;\n\t\t\tword = \"\";\n\t\t}else{\n\t\t\tword += letter;\n\t\t}\n\t\t\
    index++;\n\t}\n\tif(count != n){\n\t\twords.push(word);\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr7i480tr.js:25\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmpr7i480tr.js:25:22)\n    at test (/tmp/tmpr7i480tr.js:51:20)\n\
    \    at Object.<anonymous> (/tmp/tmpr7i480tr.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\tlist.push(word);\n\
    \t\t}\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpqrwdsjm_.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqrwdsjm_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  \n  if(s.length\
    \ == 0){\n    return result;\n  }\n  \n  for(var i = 0; i <= s.length - n; i++){\n\
    \    var word = s.substr(i, n);\n    result.push(word);\n  }\n  \n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmptjhr0az_.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptjhr0az_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpfol1i3uu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfol1i3uu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar result = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j = 0; j<word.length; j++){\n\
    \t\t\tif(word[j].length == n){\n\t\t\t\tresult.push(word[j]);\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5cdvoowa.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5cdvoowa.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar letter = s[i];\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(letter\
    \ == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == \"a\"){\n\t\t\t\
    \twords.push(\"a\");\n\t\t\t}\n\t\t\telse if(letter == \"e\"){\n\t\t\t\twords.push(\"\
    e\");\n\t\t\t}\n\t\t\telse if(letter == \"i\"){\n\t\t\t\twords.push(\"i\");\n\t\
    \t\t}\n\t\t\telse if(letter == \"o\"){\n\t\t\t\twords.push(\"o\");\n\t\t\t}\n\t\
    \t\telse if(letter == \"u\"){\n\t\t\t\twords.push(\"u\");\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"y\"){\n\t\t\t\twords.push(\"y\");\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"s\"){\n\t\t\t\twords.push(\"s\");\n\t\t\t}\n\t\t\telse if(letter == \"\
    t\"){\n\t\t\t\twords.push(\"t\");\n\t\t\t}\n\t\t\telse if(letter == \"h\"){\n\t\
    \t\t\twords.push(\"h\");\n\t\t\t}\n\t\t\telse if(letter == \"l\"){\n\t\t\t\twords.push(\"\
    l\");\n\t\t\t}\n\t\t\telse if(letter == \"d\"){\n\t\t\t\twords.push(\"d\");\n\t\
    \t\t}\n\t\t\telse if(letter == \"m\"){\n\t\t\t\twords.push(\"m\");\n\t\t\t}\n\t\
    \t\telse if(letter == \"n\"){\n\t\t\t\twords.push(\"n\");\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"g\"){\n\t\t\t\twords.push(\"g\");\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"p\"){\n\t\t\t\twords.push(\"p\");\n\t\t\t}\n\t\t\telse if(letter == \"\
    f\"){\n\t\t\t\twords.push(\"f\");\n\t\t\t}\n\t\t\telse if(letter == \"r\"){\n\t\
    \t\t\twords.push(\"r\");\n\t\t\t}\n\t\t\telse if(letter == \"c\"){\n\t\t\t\twords.push(\"\
    c\");\n\t\t\t}\n\t\t\telse if(letter == \"v\"){\n\t\t\t\twords.push(\"v\");\n\t\
    \t\t}\n\t\t\telse if(letter == \"b\"){\n\t\t\t\twords.push(\"b\");\n\t\t\t}\n\t\
    \t\telse if(letter == \"k\"){\n\t\t\t\twords.push(\"k\");\n\t\t\t}\n\t\t\telse\
    \ if(letter == \"j\"){\n\t\t\t\twords.push(\"j\");\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"q\"){\n\t\t\t\twords.push(\"q\");\n\t\t\t}\n\t\t\telse if(letter == \"\
    z\"){\n\t\t\t\twords.push(\"z\");\n\t\t\t}\n\t\t\telse if(letter == \"x\"){\n\t\
    \t\t\twords.push(\"x\");\n\t\t\t}\n\t\t\telse if(letter == \"q\"){\n\t\t\t\twords.push(\"\
    q\");\n\t\t\t}\n\t\t\telse if(letter == \"s\"){\n\t\t\t\twords.push(\"s\");\n\t\
    \t\t}\n\t\t\telse if(letter == \"w\"){\n\t\t\t\twords.push(\"w\");\n\t\t\t}\n\t\
    \t\telse if(letter == \"v\"){\n\t\t\t\t\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpro6rvq7t.js:125\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet letter = s[i];\n\t\tlet count = 0;\n\t\tfor(let j = 0;\
    \ j < n; j++){\n\t\t\tif(letter == s[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \tif(count == n){\n\t\t\twords.push(letter);\n\t\t}\n\t\ti++;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp32i0b337.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp32i0b337.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n        else if(s.charAt(i)\
    \ == \" \" && s.length == n){\n            words.push(s.substr(0, i));\n     \
    \       s = s.substr(i + 1);\n        }\n        else if(s.charAt(i) == \" \"\
    \ && s.length != n){\n            words.push(s.substr(0, i));\n            s =\
    \ s.substr(i + 1);\n        }\n        else if(s.charAt(i) != \" \" && s.length\
    \ == n){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n        else if(s.charAt(i) != \" \" && s.length != n){\n\
    \            words.push(s.substr(0, i));\n            s = s.substr(i + 1);\n \
    \       }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'y ',\n  'ad ',\n  ' lit',\n  'le la'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpj9odokk0.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj9odokk0.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'a',\
    \ 'y ', 'ad ', ' lit', 'le la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(index < s.length){\n\t\tlet letter = s.charAt(index);\n\
    \t\tif(letter === \" \"){\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(count\
    \ < n && index < s.length){\n\t\t\tlet letter2 = s.charAt(index);\n\t\t\tif(letter2\
    \ === \" \"){\n\t\t\t\tindex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(letter ===\
    \ letter2){\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\
    \t\tbreak;\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(s.substring(index, index+count));\n\
    \t\t}\n\t\tindex++;\n\t\tcount = 0;\n\t}\n\treturn words;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsxh0r8te.js:54:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpsxh0r8te.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\twhile(index < s.length){\n\t\tlet char = s[index];\n\t\tlet\
    \ isConsonant = false;\n\t\tfor(let i = 0; i < consonants.length; i++){\n\t\t\t\
    if(char === consonants[i]){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif(isConsonant){\n\t\t\twords.push(char);\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(count === n){\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9sjqwiou.js:24\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmp9sjqwiou.js:24:22)\n    at test (/tmp/tmp9sjqwiou.js:47:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjqwiou.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar list = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j=0; j<word.length; j++){\n\
    \t\t\tif(word[j].length == n){\n\t\t\t\tlist.push(word[j]);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpujngj3g3.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpujngj3g3.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpfol1i3uu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfol1i3uu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805203
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\t\
    while(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\tindex\
    \ = index+n;\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\
    \treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpb84s4lky.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb84s4lky.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet words = s.split(\"\
    \ \");\n\tlet count = 0;\n\tlet word = \"\";\n\tlet letter = \"\";\n\tfor (let\
    \ i = 0; i < words.length; i++){\n\t\tletter = words[i];\n\t\tcount++;\n\t\tword\
    \ = words[i];\n\t\tif (letter.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoxlkudiy.js:19\n\tlet words = s.split(\" \");\n\t    ^\n\nSyntaxError:\
    \ Identifier 'words' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805204
