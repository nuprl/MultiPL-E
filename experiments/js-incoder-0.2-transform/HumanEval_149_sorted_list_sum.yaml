name: HumanEval_149_sorted_list_sum
language: js
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
  aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
  AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\"\
  , \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"\
  abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"\
  AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\"\
  , \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
completions: ["\tvar sorted_lst = [];\n\tfor(var i=0;i<lst.length;i++){\n\t\tfor(var\
    \ j=i+1;j<lst.length;j++){\n\t\t\tif(lst[i].length < lst[j].length){\n\t\t\t\t\
    sorted_lst.push(lst[i]);\n\t\t\t\tlst[i] = lst[j];\n\t\t\t\tlst[j] = sorted_lst;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn sorted_lst;\n}", "    let new_lst = [];\n    let\
    \ sorted_lst = [];\n    for(let i = 0; i < lst.length; i++){\n        if(new_lst.length\
    \ == 0){\n            new_lst.push(lst[i]);\n        }\n        else if(new_lst.length\
    \ == 1){\n            if(lst[i].length < new_lst[0].length){\n               \
    \ new_lst.push(lst[i]);\n            }\n            else{\n                new_lst.push(new_lst[0]);\n\
    \                new_lst.push(lst[i]);\n            }\n        }\n        else{\n\
    \            if(lst[i].length < new_lst[new_lst.length-1].length){\n         \
    \       new_lst.push(lst[i]);\n            }\n            else{\n            \
    \    new_lst.push(new_lst[new_lst.length-1]);\n                new_lst.push(lst[i]);\n\
    \            }\n        }\n    }\n    for(let i = 0; i < new_lst.length; i++){\n\
    \        sorted_lst.push(new_lst[i]);\n    }\n    return sorted_lst;\n}\n", " \
    \   var new_lst = lst;\n    new_lst.sort(function(a,b){\n        return a.length\
    \ - b.length;\n    });\n    return new_lst;\n}\n", "  var newList = [];\n  for(var\
    \ i=0;i<lst.length;i++){\n    if(newList.indexOf(lst[i]) == -1){\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n", "\tlet sorted_list =\
    \ lst;\n\tsorted_list.sort((a,b) => {\n\t\tlet a_len = a.length;\n\t\tlet b_len\
    \ = b.length;\n\t\tif(a_len < b_len){\n\t\t\treturn -1;\n\t\t}\n\t\tif(a_len >\
    \ b_len){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\treturn sorted_list;\n\
    }\n", "    let sorted_list = lst;\n    sorted_list.sort();\n    return sorted_list;\n\
    }\n", "  var newList = [];\n  for(var i=0;i<lst.length;i++){\n    if(newList.indexOf(lst[i])\
    \ == -1){\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return\
    \ newList;\n}\n", "\tlet sorted_list = lst;\n\tlet sorted_list_length = sorted_list.length;\n\
    \tlet sorted_list_length_counter = 0;\n\tlet sorted_list_length_counter2 = 0;\n\
    \tlet sorted_list_length_counter3 = 0;\n\tlet sorted_list_length_counter4 = 0;\n\
    \tlet sorted_list_length_counter5 = 0;\n\tlet sorted_list_length_counter6 = 0;\n\
    \tlet sorted_list_length_counter7 = 0;\n\tlet sorted_list_length_counter8 = 0;\n\
    \tlet sorted_list_length_counter9 = 0;\n\tlet sorted_list_length_counter10 = 0;\n\
    \tlet sorted_list_length_counter11 = 0;\n\tlet sorted_list_length_counter12 =\
    \ 0;\n\tlet sorted_list_length_counter13 = 0;\n\tlet sorted_list_length_counter14\
    \ = 0;\n\tlet sorted_list_length_counter15 = 0;\n\tlet sorted_list_length_counter16\
    \ = 0;\n\tlet sorted_list_length_counter17 = 0;\n\tlet sorted_list_length_counter18\
    \ = 0;\n\tlet sorted_list_length_counter19 = 0;\n\tlet sorted_list_length_counter20\
    \ = 0;\n\tlet sorted_list_length_counter21 = 0;\n\tlet sorted_list_length_counter22\
    \ = 0;\n\tlet sorted_list_length_counter23 = 0;\n\tlet sorted_list_length_counter24\
    \ = 0;\n\tlet sorted_list_length_counter25 = 0;\n\tlet sorted_list_length_counter26\
    \ = 0;\n\tlet sorted_list_length_counter27 = 0;\n\tlet sorted_list_length_counter28\
    \ = 0;\n\tlet sorted_list_length_counter29 = 0;\n\tlet sorted_list_length_counter30\
    \ = 0;\n\tlet sorted_list_length_counter31 = 0;\n\tlet sorted_list_length_counter32\
    \ = 0;\n\tlet sorted_list_length_counter33 = 0;\n\tlet sorted_list_length_counter34\
    \ = 0;\n\tlet sorted_list_length_counter35 = 0;\n\tlet sorted_list_length_counter36\
    \ = 0;\n\tlet sorted_list_length_counter37 = 0;\n\tlet sorted_list_length_counter38\
    \ = 0;\n\tlet sorted_list_length_counter39 = 0;\n\tlet sorted_list_length_counter40\
    \ = 0;\n\tlet sorted_list_length_counter41 = 0;\n\tlet sorted_list_length_counter42\
    \ = 0;\n\tlet sorted_list_length_counter43 = 0;\n\tlet sorted_list_length_counter44\
    \ = 0;\n\tlet sorted_list_length_counter45 = 0;\n\tlet sorted_list_length_counter46\
    \ = 0;\n\tlet sorted_list_length_counter47 = 0;\n\tlet sorted_list_length_counter48\
    \ = 0;\n\tlet sorted_list_length_counter49 = 0;\n\tlet sorted_list_length_counter50\
    \ = 0;\n\tlet sorted_list_length_counter51 = 0;\n\tlet sorted_list_length_counter52\
    \ = 0;\n\tlet sorted_list_length_counter53 = 0;\n\tlet sorted_list_length_counter54\
    \ = 0;\n\tlet sorted_list_length_counter55 = 0;\n\tlet sorted_list_length_counter",
  "    var newList = [];\n    for(var i=0;i<lst.length;i++){\n        var newWord\
    \ = lst[i];\n        var index = newList.indexOf(newWord);\n        if(index ==\
    \ -1){\n            newList.push(newWord);\n        }else{\n            newList[index]\
    \ = newWord;\n        }\n    }\n    newList.sort(function(a,b){\n        return\
    \ a.length - b.length;\n    });\n    return newList;\n}\n", "  var sorted_lst\
    \ = lst;\n  sorted_lst.sort(function(a, b){\n    return a.length - b.length;\n\
    \  });\n  return sorted_lst;\n}\n", "  var sorted_list = lst;\n  sorted_list.sort(function(a,\
    \ b){\n    return a.length - b.length;\n  });\n  return sorted_list;\n}\n", " \
    \   let sorted_list = lst;\n    sorted_list.sort();\n    return sorted_list;\n\
    }\n", "  let sortedList = [];\n  lst.forEach((word) => {\n    sortedList.push(word);\n\
    \  });\n  sortedList.sort((a, b) => {\n    if (a.length === b.length) {\n    \
    \  return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n\
    \  return sortedList;\n}\n", "    let sorted_list = lst;\n    sorted_list.sort((a,b)\
    \ => a.length - b.length);\n    return sorted_list;\n}\n", "    var sorted_lst\
    \ = [];\n    for(var i=0;i<lst.length;i++){\n        for(var j=0;j<lst.length;j++){\n\
    \            if(lst[j].length == lst[i].length){\n                if(lst[j].length\
    \ < lst[i].length){\n                    sorted_lst.push(lst[j]);\n          \
    \      }\n                else{\n                    sorted_lst.push(lst[i]);\n\
    \                }\n            }\n        }\n    }\n    sorted_lst.sort();\n\
    \    return sorted_lst;\n}", "    var new_lst = [];\n    var sorted_lst = [];\n\
    \    for(var i=0;i<lst.length;i++){\n        if(new_lst.length>0){\n         \
    \   if(new_lst[new_lst.length-1].length<lst[i].length){\n                new_lst[new_lst.length-1]+=lst[i];\n\
    \            }else{\n                new_lst.push(lst[i]);\n            }\n  \
    \      }else{\n            new_lst.push(lst[i]);\n        }\n    }\n    for(var\
    \ i=0;i<new_lst.length;i++){\n        sorted_lst.push(new_lst[i]);\n    }\n  \
    \  return sorted_lst;\n}\n", "  var sorted_list = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    for(var j=0;j<lst.length;j++){\n      if(lst[i].length < lst[j].length){\n\
    \        sorted_list.push(lst[j]);\n      }\n      else if(lst[i].length > lst[j].length){\n\
    \        sorted_list.push(lst[i]);\n      }\n      else{\n        if(lst[i].length\
    \ == lst[j].length){\n          if(lst[i].localeCompare(lst[j]) < 0){\n      \
    \      sorted_list.push(lst[j]);\n          }\n          else{\n            sorted_list.push(lst[i]);\n\
    \          }\n        }\n      }\n    }\n  }\n  return sorted_list;\n}\n", "\t\
    var sorted_list = lst;\n\tfor(var i=0;i<lst.length;i++){\n\t\tfor(var j=i+1;j<lst.length;j++){\n\
    \t\t\tif(lst[i].length < lst[j].length){\n\t\t\t\tvar temp = lst[i];\n\t\t\t\t\
    lst[i] = lst[j];\n\t\t\t\tlst[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_list;\n\
    }\n", "  var sorted_list = [];\n  for(var i = 0; i<lst.length; i++){\n    var\
    \ word = lst[i];\n    for(var j = 0; j<sorted_list.length; j++){\n      if(sorted_list[j].length\
    \ == word.length){\n        if(sorted_list[j].localeCompare(word) == 0){\n   \
    \       sorted_list.splice(j, 1);\n          j--;\n        }\n      }\n    }\n\
    \    if(sorted_list.length == 0){\n      sorted_list.push(word);\n    }\n  }\n\
    \  return sorted_list.sort();\n}\n", "    \n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
