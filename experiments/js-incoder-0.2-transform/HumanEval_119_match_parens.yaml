name: HumanEval_119_match_parens
language: js
prompt: "//You are given a list of two strings, both strings consist of open\n// parentheses\
  \ '(' or close parentheses ')' only.\n// Your job is to check if it is possible\
  \ to concatenate the two strings in\n// some order, that the resulting string will\
  \ be good.\n// A string S is considered to be good if and only if all parentheses\
  \ in S\n// are balanced. For example: the string '(())()' is good, while the string\n\
  // '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\
  \n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  )\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  (())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  ((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n\
  }\n\ntest();"
completions: ["\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}\n\t\telse if(char === \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top\
    \ !== \"(\"){\n\t\t\t\tresult = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif(result === \"No\"){\n\t\tresult = \"Yes\";\n\t}\n\treturn result;\n}\n",
  "    var stack = [];\n    var res = \"No\";\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i]==\"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i]==\")\"){\n            if(stack.length>0){\n                var top\
    \ = stack.pop();\n                if(top==i){\n                    res = \"Yes\"\
    ;\n                    break;\n                }\n            }\n        }\n \
    \   }\n    return res;\n}\n", "\tvar stack = [];\n\tfor(var i = 0; i < lst.length;\
    \ i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length > 0){\n\t\tvar str\
    \ = stack.pop();\n\t\tif(str.length == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[0]\
    \ == '('){\n\t\t\tstack.push(str.slice(1));\n\t\t}\n\t\telse if(str[0] == ')'){\n\
    \t\t\tvar str = stack.pop();\n\t\t\tif(str.length == 0){\n\t\t\t\tcontinue;\n\t\
    \t\t}\n\t\t\tif(str[0] == '('){\n\t\t\t\tstack.push(str.slice(1));\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn \"\
    No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "    var stack = [];\n    var open\
    \ = 0;\n    var close = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"\
    (\"){\n            open++;\n            stack.push(lst[i]);\n        }\n     \
    \   else if(lst[i]==\")\"){\n            close++;\n            while(open>0 &&\
    \ close>0 && stack.length>0){\n                if(lst[stack.length-1]==stack[stack.length-1]){\n\
    \                    stack.pop();\n                    close--;\n            \
    \    }\n                else{\n                    open--;\n                }\n\
    \            }\n            if(open>0 && close>0){\n                return \"\
    No\";\n            }\n            else{\n                return \"Yes\";\n   \
    \         }\n        }\n    }\n    return \"No\";\n}\n", "  var stack = [];\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        var top = stack.pop();\n        if(top\
    \ != i){\n          return \"No\";\n        }\n      }\n    }\n  }\n  return \"\
    Yes\";\n}\n", "    let stack = [];\n    let result = \"\";\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            if(stack.length ==\
    \ 0){\n                return \"No\";\n            }\n            else{\n    \
    \            let top = stack.pop();\n                if(top < i){\n          \
    \          return \"No\";\n                }\n                else{\n        \
    \            result += \"(\";\n                }\n            }\n        }\n \
    \   }\n    if(stack.length == 0){\n        return \"Yes\";\n    }\n    else{\n\
    \        return \"No\";\n    }\n}\n", "    var stack = [];\n    var res = \"No\"\
    ;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"(\"){\n        \
    \    stack.push(i);\n        }\n        else if(lst[i]==\")\"){\n            var\
    \ len = stack.length;\n            while(len>0){\n                if(stack[len-1]==i){\n\
    \                    stack.pop();\n                }\n                else{\n\
    \                    len--;\n                }\n            }\n            if(stack.length==0){\n\
    \                res = \"Yes\";\n            }\n        }\n    }\n    return res;\n\
    }\n", "\tlet stack = [];\n\tlet res = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char == \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}\n\t\telse if(char == \")\"){\n\t\t\tlet open = stack.pop();\n\t\t\tif(open\
    \ != \"(\"){\n\t\t\t\tres = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "\tlet stack = [];\n\tlet open = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t\topen++;\n\t\t}\n\t\telse if(char === \")\"){\n\t\t\topen--;\n\t\t\tif(open\
    \ === 0){\n\t\t\t\tstack.push(char);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return stack.length === 0;\n}\n", "    let stack = [];\n    let open = 0;\n  \
    \  let close = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            open++;\n            stack.push(lst[i]);\n        }\n\
    \        else if(lst[i] == \")\"){\n            close++;\n            while(open\
    \ > 0 && close > 0 && open > close){\n                stack.pop();\n         \
    \       open--;\n                close--;\n            }\n        }\n    }\n \
    \   return stack.length == 0;\n}\n", "    var stack = [];\n    var res = \"No\"\
    ;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]==\"(\"){\n          \
    \  stack.push(lst[i]);\n        }\n        else if(lst[i]==\")\"){\n         \
    \   var temp = stack.pop();\n            if(temp!=\"\"){\n                res\
    \ = temp;\n            }\n        }\n    }\n    return res;\n}\n", "    var stack\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"\
    ){\n            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n\
    \            var top = stack.pop();\n            if(top != -1){\n            \
    \    if(stack.length == 0){\n                    return \"Yes\";\n           \
    \     }\n                else{\n                    if(stack[stack.length-1] !=\
    \ top){\n                        return \"No\";\n                    }\n     \
    \               else{\n                        stack.pop();\n                \
    \    }\n                }\n            }\n        }\n    }\n    return \"No\"\
    ;\n}\n", "\tlet stack = [];\n\tlet str = \"\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}\n\t\telse if(char === \")\"){\n\t\t\twhile(stack.length && stack[stack.length-1]\
    \ !== \"(\"){\n\t\t\t\tstr = stack.pop() + str;\n\t\t\t}\n\t\t\tif(!stack.length){\n\
    \t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstr = stack.pop() + str;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\tstr += char;\n\t\t}\n\t}\n\treturn \"Yes\";\n\
    }\n", "\tlet stack = [];\n\tlet res = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet str = lst[i];\n\t\tlet open = str.indexOf(\"(\");\n\t\tlet close\
    \ = str.indexOf(\")\");\n\t\tlet len = open - close;\n\t\tif(open > close || len\
    \ > 0){\n\t\t\tres = \"No\";\n\t\t\tbreak;\n\t\t}\n\t\tstack.push(str);\n\t}\n\
    \tif(stack.length > 0){\n\t\tres = \"Yes\";\n\t}\n\treturn res;\n}\n", "  let\
    \ stack = [];\n  let result = \"No\";\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(\"(\");\n    }\n    else if(lst[i]\
    \ == \")\"){\n      if(stack.length == 0){\n        result = \"No\";\n       \
    \ break;\n      }\n      else if(stack.pop() == \"(\"){\n        result = \"Yes\"\
    ;\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "  let stack =\
    \ [];\n  let result = \"No\";\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \")\"){\n   \
    \   if(stack.length == 0){\n        result = \"No\";\n        break;\n      }\n\
    \      else{\n        stack.pop();\n      }\n    }\n  }\n  return result;\n}\n",
  "    var stack = [];\n    var result = \"No\";\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n       \
    \ else if(lst[i] == \")\"){\n            while(stack.length && lst[stack[stack.length-1]-1]\
    \ != \")\"){\n                stack.pop();\n            }\n            if(stack.length){\n\
    \                stack.pop();\n            }\n        }\n        else if(stack.length){\n\
    \            while(stack.length && lst[stack[stack.length-1]-1] != \"(\"){\n \
    \               stack.pop();\n            }\n        }\n        if(stack.length){\n\
    \            result = \"Yes\";\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "  let stack = [];\n  let res = \"No\";\n  for(let i=0; i<lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]\
    \ == \")\"){\n      if(stack.length == 0){\n        res = \"Yes\";\n        break;\n\
    \      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return res;\n\
    }\n", "    let stack = [];\n    let result = \"No\";\n    for (let i = 0; i <\
    \ lst.length; i++){\n        if (lst[i] === \"(\"){\n            stack.push(i);\n\
    \        } else if (lst[i] === \")\"){\n            if (stack.length === 0){\n\
    \                result = \"No\";\n                break;\n            }\n   \
    \         stack.pop();\n        }\n    }\n    if (result === \"Yes\"){\n     \
    \   result = \"Yes\";\n    }\n    return result;\n}\n", "\tlet stack = [];\n\t\
    let result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] ==\
    \ \"(\"){\n\t\t\tstack.push(lst[i]);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\
    \t\twhile(stack.length && stack[stack.length-1] != \"(\"){\n\t\t\t\tresult = lst[i]\
    \ + result;\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(!stack.length){\n\t\t\t\t\
    result = \"Yes\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult = \"No\";\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
