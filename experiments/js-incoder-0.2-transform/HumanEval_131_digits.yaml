name: HumanEval_131_digits
language: js
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["  if(n < 0) return 0;\n  var d = 1;\n  while(n){\n    if(n % 2 == 1)\
    \ d *= 2;\n    n /= 2;\n  }\n  return d;\n}\n", "\tif(n<10) return 1;\n\tif(n<100)\
    \ return n*2;\n\tif(n<1000) return n*3;\n\tif(n<10000) return n*4;\n\tif(n<100000)\
    \ return n*5;\n\tif(n<1000000) return n*6;\n\tif(n<10000000) return n*7;\n\tif(n<100000000)\
    \ return n*8;\n\tif(n<1000000000) return n*9;\n\tif(n<10000000000) return n*10;\n\
    \tif(n<100000000000) return n*11;\n\tif(n<1000000000000) return n*12;\n\tif(n<10000000000000)\
    \ return n*13;\n\tif(n<100000000000000) return n*14;\n\tif(n<1000000000000000)\
    \ return n*15;\n\tif(n<10000000000000000) return n*16;\n\tif(n<100000000000000000)\
    \ return n*17;\n\tif(n<1000000000000000010) return n*18;\n\tif(n<10000000000000000100)\
    \ return n*19;\n\tif(n<100000000000000001000) return n*20;\n\tif(n<1000000000000000010000)\
    \ return n*21;\n\tif(n<10000000000000000100000) return n*22;\n\tif(n<100000000000000001000000)\
    \ return n*23;\n\tif(n<1000000000000000010000000) return n*24;\n\tif(n<10000000000000000100000000)\
    \ return n*25;\n\tif(n<100000000000000001000000000) return n*26;\n\tif(n<1000000000000000010000000000)\
    \ return n*27;\n\tif(n<10000000000000000100000000000) return n*28;\n\tif(n<100000000000000001000000000000)\
    \ return n*29;\n\tif(n<1000000000000000010000000000000) return n*30;\n\tif(n<10000000000000000100000000000000)\
    \ return n*31;\n\tif(n<100000000000000001000000000000000) return n*32;\n\tif(n<1000000000000000010000000000000000)\
    \ return n*33;\n\tif(n<10000000000000000100000000000000000) return n*34;\n\tif(n<100000000000000001000000000000000000)\
    \ return n*35;\n\tif(n<1000000000000000010000000000000000000) return n*36;\n\t\
    if(n<10000000000000000100000000000000000000) return n*37;\n\tif(n<100000000000000001000000000000000000000)\
    \ return n*38;\n\tif(n<1000000000000000010000000000000000000000) return n*39;\n\
    \tif(n<10000000000000000100000000000000000000000) return n*40;\n\tif(n<100000000000000001000000000000000000000000",
  "  var product = 1;\n  while(n){\n    product *= n % 2;\n    n /= 2;\n  }\n  return\
    \ product;\n}\n", "\tif(n<0) return 0;\n\tif(n%2==0) return n*(n+1)/2;\n\telse\
    \ return n*(n-1)/2;\n}\n", "\tvar digits = 1;\n\twhile(n){\n\t\tdigits *= n %\
    \ 10;\n\t\tn = Math.floor(n / 10);\n\t}\n\treturn digits;\n}\n", "\tif(n<10) return\
    \ 1;\n\tif(n<100) return n*2;\n\tif(n<1000) return n*3;\n\tif(n<10000) return\
    \ n*4;\n\tif(n<100000) return n*5;\n\tif(n<1000000) return n*6;\n\tif(n<10000000)\
    \ return n*7;\n\tif(n<100000000) return n*8;\n\tif(n<1000000000) return n*9;\n\
    \tif(n<10000000000) return n*10;\n\tif(n<100000000000) return n*11;\n\tif(n<1000000000000)\
    \ return n*12;\n\tif(n<10000000000000) return n*13;\n\tif(n<100000000000000) return\
    \ n*14;\n\tif(n<1000000000000000) return n*15;\n}\n", "  var result = 0;\n  while(n){\n\
    \    if(n % 2 == 1) result *= 2;\n    n = Math.floor(n / 10);\n  }\n  return result;\n\
    }\n", "\tif(n<10) return 1;\n\tif(n<100) return n*2;\n\tif(n<1000) return n*3;\n\
    \tif(n<10000) return n*4;\n\tif(n<100000) return n*5;\n\tif(n<1000000) return\
    \ n*6;\n\tif(n<10000000) return n*7;\n\tif(n<100000000) return n*8;\n\tif(n<1000000000)\
    \ return n*9;\n\tif(n<10000000000) return n*10;\n\tif(n<100000000000) return n*11;\n\
    \tif(n<1000000000000) return n*12;\n\tif(n<10000000000000) return n*13;\n\tif(n<100000000000000)\
    \ return n*14;\n\tif(n<1000000000000000) return n*15;\n\tif(n<10000000000000000)\
    \ return n*16;\n\tif(n<100000000000000000) return n*17;\n\tif(n<100000000000000000)\
    \ return n*18;\n\tif(n<1000000000000000000) return n*19;\n\treturn 0;\n}\n", "\t\
    if(n<0) return 0;\n\tif(n%2==0) return n*(n+1)/2;\n\telse return n*(n-1)/2;\n\
    }\n", "  var sum = 0;\n  while(n > 0){\n    sum += n % 2;\n    n = Math.floor(n\
    \ / 2);\n  }\n  return sum;\n}\n", "    var digits = 1;\n    while(n>0){\n   \
    \     digits++;\n        n=n%10;\n    }\n    return digits;\n}\n", "\tvar digits\
    \ = 1;\n\twhile(n){\n\t\tdigits *= n % 10;\n\t\tn = Math.floor(n / 10);\n\t}\n\
    \treturn digits;\n}\n", "\tvar product = 1;\n\twhile(n){\n\t\tproduct *= n % 2;\n\
    \t\tn /= 2;\n\t}\n\treturn product;\n}\n", "  var digits = 1;\n  while (n){\n\
    \    digits *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return digits;\n}\n",
  "  var product = 1;\n  while(n){\n    product *= n % 10;\n    n /= 10;\n  }\n  return\
    \ product;\n}\n", "    var digits = 1;\n    while (n){\n        digits *= n %\
    \ 10;\n        n /= 10;\n    }\n    return digits;\n}\n", "  var sum = 0;\n  while(n\
    \ > 0){\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n\
    }\n", "  var digits = 1;\n  while(n){\n    digits *= n % 10;\n    n /= 10;\n \
    \ }\n  return digits;\n}\n", "\tif(n<0) return 0;\n\tif(n%2==0) return n*digits(n/2);\n\
    \treturn digits(n/2)*n;\n}\n", "    var digits = \"\";\n    for(var i = n; i >\
    \ 0; i--){\n        digits = digits+(i%2==1?'':i);\n    }\n    return digits;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
