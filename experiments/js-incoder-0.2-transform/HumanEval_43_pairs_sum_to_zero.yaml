name: HumanEval_43_pairs_sum_to_zero
language: js
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
  \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    for(var i=0; i<l.length; i++){\n        for(var j=i+1; j<l.length;\
    \ j++){\n            if(l[i] + l[j] === 0){\n                return false;\n \
    \           }\n        }\n    }\n    return true;\n}\n", "    var pairs = l.slice();\n\
    \    var sum = 0;\n    for(var i=0; i<pairs.length; i++){\n        sum += pairs[i];\n\
    \    }\n    return sum === 0;\n}\n", "  for(var i=0; i<l.length; i++){\n    for(var\
    \ j=i+1; j<l.length; j++){\n      if(l[i] + l[j] === 0){\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "  if(l.length < 2){\n    return\
    \ false;\n  }\n  var pairs = l.slice(1).reduce(function(p,c){\n    return p +\
    \ c;\n  }, 0);\n  if(pairs === 0){\n    return true;\n  }\n  return false;\n}\n",
  "\tfor(var i=0;i<l.length;i++){\n\t\tfor(var j=i+1;j<l.length;j++){\n\t\t\tif(l[i]+l[j]===0){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "\tfor(var i\
    \ = 1; i < l.length; i++){\n\t\tfor(var j = i; j > 0; j--){\n\t\t\tif(l[j] + l[j-1]\
    \ != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \ if(l.length < 2){\n    return false;\n  }\n  var pairs = l.slice(1).map(function(x){\n\
    \    return [x[0], x[0]+x[1]];\n  });\n  return pairs.reduce(function(prev, curr){\n\
    \    return prev && curr[1] === 0;\n  }, true);\n}\n", "    var i, j, sum;\n \
    \   for(i = 0; i < l.length; i++){\n        sum = 0;\n        for(j = 0; j < l.length;\
    \ j++){\n            sum += l[j];\n            if(sum === 0){\n              \
    \  return false;\n            }\n        }\n    }\n    return true;\n}\n", " \
    \ if(l.length < 2){\n    return false;\n  }\n  var pairs = l.slice(1).map(function(x){\n\
    \    return [x, 0];\n  });\n  pairs.forEach(function(pair){\n    var sum = 0;\n\
    \    for(var i=0; i<pairs.length; i++){\n      sum += pairs[i][0];\n    }\n  \
    \  if(sum === 0){\n      return true;\n    }\n  });\n  return false;\n}\n", " \
    \ var pairs = l.slice();\n  var sum = 0;\n  for(var i=0;i<pairs.length;i++){\n\
    \    sum += pairs[i];\n    if(sum === 0){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "  if(l.length == 0){\n    return false;\n  }\n  var pairs = l.slice(0);\n\
    \  var pair;\n  for(var i=0; i<pairs.length; i++){\n    pair = pairs[i];\n   \
    \ if(pair[0] === pair[1]){\n      pairs.splice(i, 1);\n      i--;\n    }\n  }\n\
    \  if(pairs.length > 0){\n    return false;\n  }\n  return true;\n}\n", "  if(l.length\
    \ < 2){\n    return false;\n  }\n  var pairs = l.slice(1).map(function(pair){\n\
    \    return [pair[0], pair[0]+pair[1]];\n  });\n  var zeros = pairs.filter(function(pair){\n\
    \    return pair[1] === 0;\n  });\n  return zeros.length === 0;\n}\n", "    var\
    \ pairs = l.slice();\n    var sum = 0;\n    for(var i=0; i<pairs.length; i++){\n\
    \        sum += pairs[i];\n    }\n    return sum === 0;\n}\n", "  for(var i=0;\
    \ i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i] + l[j]\
    \ === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", " \
    \ var pairs = _.pairs(l);\n  var sum = 0;\n  _.each(pairs, function(pair){\n \
    \   sum += pair[1];\n  });\n  return sum === 0;\n}\n", "    for(var i=0; i<l.length;\
    \ i++){\n        var pair = l[i];\n        for(var j=i+1; j<l.length; j++){\n\
    \            var pair2 = l[j];\n            if(pair + pair2 === 0){\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n",
  "  if(l.length == 0){\n    return false;\n  }\n  var pairs = l.slice(0);\n  pairs.sort(function(a,b){return\
    \ b-a});\n  var sum = 0;\n  for(var i=0; i<pairs.length; i++){\n    sum += pairs[i];\n\
    \    if(sum == 0){\n      return true;\n    }\n  }\n  return false;\n}\n", " \
    \ if(l.length < 2){\n    return false;\n  }\n  var pairs = _.pairs(l);\n  var\
    \ sum = 0;\n  for(var i in pairs){\n    if(pairs[i][1] > 0){\n      sum += pairs[i][1];\n\
    \    }\n  }\n  return sum === 0;\n}\n", "  for(var i=0; i<l.length; i++){\n  \
    \  for(var j=i+1; j<l.length; j++){\n      if(l[i] + l[j] == 0){\n        return\
    \ true;\n      }\n    }\n  }\n  return false;\n}\n", "    var sum = 0;\n    for(var\
    \ i=0;i<l.length;i++){\n        sum += l[i];\n    }\n    return sum===0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
