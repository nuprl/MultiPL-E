name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list\
  \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
  \ 2 5 7)\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((n n) (factors ()))\n    (cond ((= n 1) factors)\n   \
    \       ((= n 0) '())\n          ((= (mod n n) 0) (loop (/ n n) (cons n factors)))\n\
    \          (else (loop (/ n n) (cons (mod n n) factors))))))\n", "  (if (= n 1)\n\
    \      (list 1)\n      (let ((factors (factorize (sub1 n))))\n        (if (null?\
    \ factors)\n            (list n)\n            (append (cons n factors)\n     \
    \               (factorize (sub1 (car factors)))))))\n", "  (let loop ((n n) (factors\
    \ ()))\n    (cond ((= n 1) factors)\n          ((= n 0) '())\n          ((odd?\
    \ n) (loop (/ n 2) (cons (car factors) factors)))\n          (else (loop (* n\
    \ n) (cons (car factors) factors))))))\n", "  (let loop ((n n) (factors ()))\n\
    \    (cond ((= n 1) factors)\n          ((zero? (modulo n n)) (loop (quotient\
    \ n n) (cons n factors)))\n          (else (loop (quotient n n) (cons (modulo\
    \ n n) factors))))))\n", "  (let loop ((n n) (factors ()))\n    (cond ((= n 1)\
    \ factors)\n          ((even? n) (loop (/ n 2) (cons (car factors) factors)))\n\
    \          (else (loop (* n n) (cons (car factors) factors))))))\n", "  (let loop\
    \ ((n n) (factors ()))\n    (cond ((= n 1) factors)\n          ((even? n) (loop\
    \ (/ n 2) (cons (car factors) factors)))\n          (else (loop (quotient n 2)\
    \ (cons (car factors) factors))))))\n", "  (if (= n 1)\n      (list 1)\n     \
    \ (let ((factors (factorize (sub1 n))))\n        (if (null? factors)\n       \
    \     (list n)\n            (append (cons n factors)\n                    (if\
    \ (= (length factors) (length factors))\n                        (factorize (sub1\
    \ (* n n)))\n                        (factorize (sub1 (* n n))))))))\n", "  (cond\
    \ [(= n 1) '()]\n        [(= n 2) '(2 2)]\n        [(= n 3) '(3 3)]\n        [(=\
    \ n 4) '(4 2)]\n        [(= n 5) '(5 1)]\n        [(= n 6) '(6 2)]\n        [(=\
    \ n 7) '(7 3)]\n        [(= n 8) '(8 2)]\n        [(= n 9) '(9 1)]\n        [(=\
    \ n 10) '(10 2)]\n        [(= n 11) '(11 3)]\n        [(= n 12) '(12 2)]\n   \
    \     [(= n 13) '(13 3)]\n        [(= n 14) '(14 2)]\n        [(= n 15) '(15 3)]\n\
    \        [(= n 16) '(16 2)]\n        [(= n 17) '(17 3)]\n        [(= n 18) '(18\
    \ 2)]\n        [(= n 19) '(19 3)]\n        [(= n 20) '(20 2)]\n        [(= n 21)\
    \ '(21 3)]\n        [(= n 22) '(22 2)]\n        [(= n 23) '(23 3)]\n        [(=\
    \ n 24) '(24 2)]\n        [(= n 25) '(25 3)]\n        [(= n 26) '(26 2)]\n   \
    \     [(= n 27) '(27 3)]\n        [(= n 28) '(28 2)]\n        [(= n 29) '(29 3)]\n\
    \        [(= n 30) '(30 2)]\n        [(= n 31) '(31 3)]\n        [(= n 32) '(32\
    \ 2)]\n        [(= n 33) '(33 3)]\n        [(= n 34) '(34 2)]\n        [(= n 35)\
    \ '(35 3)]\n        [(= n 36) '(36 2)]\n        [(= n 37) '(37 3)]\n        [(=\
    \ n 38) '(38 2)]\n        [(= n 39) '(39 3)]\n        [(= n 40) '(40 2)]\n   \
    \     [(= n 41) '(41 3)]\n        [(= n 42) '(42 2)]\n        [(= n 43) '(43 3)]\n\
    \        [(= n 44) '(44 2)]\n        [(= n 45) '(45 3)]\n        [(= n 46) '(46\
    \ 2)]\n        [(= n 47) '(47 3)]", "  (let loop ((n n) (factors ()))\n    (cond\
    \ ((= n 1) factors)\n          ((zero? (modulo n n)) (loop (quotient n n) (cons\
    \ n factors)))\n          (else (loop (quotient n n) (cons (modulo n n) factors))))\n\
    \    factors))\n", "  (cond [(= n 1) '()]\n        [(= n 2) '(2 2)]\n        [(=\
    \ n 3) '(3 3)]\n        [(= n 4) '(4 2)]\n        [(= n 5) '(5 3)]\n        [(=\
    \ n 6) '(6 2)]\n        [(= n 7) '(7 3)]\n        [(= n 8) '(8 2)]\n        [(=\
    \ n 9) '(9 3)]\n        [(= n 10) '(10 2)]\n        [(= n 11) '(11 3)]\n     \
    \   [(= n 12) '(12 2)]\n        [(= n 13) '(13 3)]\n        [(= n 14) '(14 2)]\n\
    \        [(= n 15) '(15 3)]\n        [(= n 16) '(16 2)]\n        [(= n 17) '(17\
    \ 3)]\n        [(= n 18) '(18 2)]\n        [(= n 19) '(19 3)]\n        [(= n 20)\
    \ '(20 2)]\n        [(= n 21) '(21 3)]\n        [(= n 22) '(22 2)]\n        [(=\
    \ n 23) '(23 3)]\n        [(= n 24) '(24 2)]\n        [(= n 25) '(25 3)]\n   \
    \     [(= n 26) '(26 2)]\n        [(= n 27) '(27 3)]\n        [(= n 28) '(28 2)]\n\
    \        [(= n 29) '(29 3)]\n        [(= n 30) '(30 2)]\n        [(= n 31) '(31\
    \ 3)]\n        [(= n 32) '(32 2)]\n        [(= n 33) '(33 3)]\n        [(= n 34)\
    \ '(34 2)]\n        [(= n 35) '(35 3)]\n        [(= n 36) '(36 2)]\n        [(=\
    \ n 37) '(37 3)]\n        [(= n 38) '(38 2)]\n        [(= n 39) '(39 3)]\n   \
    \     [(= n 40) '(40 2)]\n        [(= n 41) '(41 3)]\n        [(= n 42) '(42 2)]\n\
    \        [(= n 43) '(43 3)]\n        [(= n 44) '(44 2)]\n        [(= n 45) '(45\
    \ 3)]\n        [(= n 46) '(46 2)]\n        [(= n 47) '(47 3)]", "  (define (factorize\
    \ n acc)\n    (cond [(= n 1) (cons n acc)]\n          [(= (remainder n 2) 0) (factorize\
    \ (remainder n 2) (cons n acc))]\n          [else (factorize (remainder n 2) (cons\
    \ n acc))]))\n  (factorize n '()))\n", "  (cond [(= n 1) '()]\n        [(= n 2)\
    \ '(2 2)]\n        [(= (mod n 2) 0) '(2 2)]\n        [else (cons (floor (/ n 2))\
    \ (factorize (floor (/ n 2)))]))) ; floor is needed because mod returns fractional\
    \ number\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n<code>", " \
    \ (cond [(= n 1) '()]\n        [(= (mod n 2) 0) (cons 2 (factorize (/ n 2)))]\n\
    \        [else (cons (mod n 2) (factorize (/ n 2)))]))\n", "  (cond [(= n 1) '()]\n\
    \        [(= (mod n 2) 0) (cons 2 (factorize (/ n 2)))]\n        [else (cons (mod\
    \ n 2) (factorize (/ n 2)))]))\n", "  (if (= n 1)\n      (list 1)\n      (let\
    \ ((factors (factorize (sub1 n))))\n        (if (null? factors)\n            (list\
    \ n)\n            (append (cons (car factors) (* n (car factors))) factors)))))\n",
  "  (define (factorize n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder\
    \ n 2) 0) (factorize (remainder n 2) (cons n acc))]\n          [else (factorize\
    \ (remainder n 2) (cons n acc))]))\n  (factorize n '()))\n", "  (let loop ((factors\
    \ ())\n             (n n))\n    (cond ((= n 1) factors)\n          ((odd? n) (loop\
    \ (cons n (factorize (/ n 2))) (/ n 2)))\n          (else (loop (cons (mod n n)\
    \ (factorize (/ n 2))) (/ n 2))))))\n", "  (if (= n 1)\n      (list 1)\n     \
    \ (let ((factors (factorize (sub1 n))))\n        (if (null? factors)\n       \
    \     (list n)\n            (append factors (list (car factors)))))))\n", "  (if\
    \ (= n 1)\n      (list 1)\n      (let ((factors (factorize (sub1 n))))\n     \
    \   (if (null? factors)\n            (list n)\n            (append (list (car\
    \ factors)) factors)))))\n", "  (cond [(= n 1) '()]\n        [(= n 2) '(2 2)]\n\
    \        [(= n 3) '(3 3)]\n        [(= n 4) '(4 2)]\n        [(= n 5) '(5 2)]\n\
    \        [(= n 6) '(6 2)]\n        [(= n 7) '(7 2)]\n        [(= n 8) '(8 2)]\n\
    \        [(= n 9) '(9 2)]\n        [(= n 10) '(10 2)]\n        [(= n 11) '(11\
    \ 2)]\n        [(= n 12) '(12 2)]\n        [(= n 13) '(13 2)]\n        [(= n 14)\
    \ '(14 2)]\n        [(= n 15) '(15 2)]\n        [(= n 16) '(16 2)]\n        [(=\
    \ n 17) '(17 2)]\n        [(= n 18) '(18 2)]\n        [(= n 19) '(19 2)]\n   \
    \     [(= n 20) '(20 2)]\n        [(= n 21) '(21 2)]\n        [(= n 22) '(22 2)]\n\
    \        [(= n 23) '(23 2)]\n        [(= n 24) '(24 2)]\n        [(= n 25) '(25\
    \ 2)]\n        [(= n 26) '(26 2)]\n        [(= n 27) '(27 2)]\n        [(= n 28)\
    \ '(28 2)]\n        [(= n 29) '(29 2)]\n        [(= n 30) '(30 2)]\n        [(=\
    \ n 31) '(31 2)]\n        [(= n 32) '(32 2)]\n        [(= n 33) '(33 2)]\n   \
    \     [(= n 34) '(34 2)]\n        [(= n 35) '(35 2)]\n        [(= n 36) '(36 2)]\n\
    \        [(= n 37) '(37 2)]\n        [(= n 38) '(38 2)]\n        [(= n 39) '(39\
    \ 2)]\n        [(= n 40) '(40 2)]\n        [(= n 41) '(41 2)]\n        [(= n 42)\
    \ '(42 2)]\n        [(= n 43) '(43 2)]\n        [(= n 44) '(44 2)]\n        [(=\
    \ n 45) '(45 2)]\n        [(= n 46) '(46 2)]\n        [(= n 47) '(47 2)]"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
