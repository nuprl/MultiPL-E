name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key\
  \ \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\"\
  )\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? num) 0]\n    [(digit-char? num) 0]\n    [else\
    \ (+ 1 (hex_key-helper (substring num 0 1) (substring num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else (+ (first num)\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n    [else\
    \ (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'D) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ (first num) (hex_key (subseq num 1 1)))]\n    [else (+ (first num) (hex_key\
    \ (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(null? num) 0]\n        [(=\
    \ (length num) 1) (+ 1 (char->integer (first num)))]\n        [(= (length num)\
    \ 2) (+ 1 (char->integer (first num)) (char->integer (second num)))]\n       \
    \ [(= (length num) 3) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)))]\n        [(= (length num) 4) (+ 1 (char->integer\
    \ (first num)) (char->integer (second num)) (char->integer (third num)) (char->integer\
    \ (fourth num)))]\n        [(= (length num) 5) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)))]\n        [(= (length num) 6) (+ 1 (char->integer\
    \ (first num)) (char->integer (second num)) (char->integer (third num)) (char->integer\
    \ (fourth num)) (char->integer (fifth num)) (char->integer (sixth num)))]\n  \
    \      [(= (length num) 7) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer\
    \ (fifth num)) (char->integer (sixth num)) (char->integer (seventh num)))]\n \
    \       [(= (length num) 8) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer\
    \ (fifth num)) (char->integer (sixth num)) (char->integer (seventh num)) (char->integer\
    \ (eighth num)))]\n        [(= (length num) 9) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)) (char->integer (sixth num)) (char->integer\
    \ (seventh num)) (char->integer (eighth num)) (char->integer (ninth num)))]\n\
    \        [(= (length num) 10) (+ 1 (char->integer (first num)) (char->integer\
    \ (second num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer",
  "  (cond\n    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (count (first\
    \ num)) (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (count (first num)) (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num))\
    \ #\\A) (+ 1 (hex_key (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first\
    \ num) (hex_key (subseq num 1)))]\n  ))\n", "  (cond\n    [(empty? num) 0]\n \
    \   [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring\
    \ num 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1))\
    \ 2)]\n    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n   \
    \ [(equal? (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num\
    \ 1 1)) 0)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+\
    \ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ (first num)\
    \ (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (subseq\
    \ num 1 1)))]\n    [else (+ (first num) (hex_key (subseq num 1 1)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond [(empty? num) 0]\n       \
    \ [(equal? (char-code (first num)) (char #\\A)) 0]\n        [(equal? (char-code\
    \ (first num)) (char #\\B)) 1]\n        [(equal? (char-code (first num)) (char\
    \ #\\C)) 2]\n        [(equal? (char-code (first num)) (char #\\D)) 3]\n      \
    \  [(equal? (char-code (first num)) (char #\\E)) 4]\n        [(equal? (char-code\
    \ (first num)) (char #\\F)) 5]\n        [else (+ (hex_key (rest num)) (hex_key\
    \ (first num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond [(number? num) num]\n\
    \        [else (+ (count (digit-key num) '(2 3 5 7 B D E)) (hex_key (substring\
    \ num 0 (length num))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F)\
    \ (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first num) (hex_key\
    \ (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(= (length num) 1) (+\
    \ 1 (char->integer (first num)))]\n        [(= (length num) 2) (+ 1 (char->integer\
    \ (first num)) (char->integer (second num)))]\n        [(= (length num) 3) (+\
    \ 1 (char->integer (first num)) (char->integer (second num)) (char->integer (third\
    \ num)))]\n        [(= (length num) 4) (+ 1 (char->integer (first num)) (char->integer\
    \ (second num)) (char->integer (third num)) (char->integer (fourth num)))]\n \
    \       [(= (length num) 5) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer\
    \ (fifth num)))]\n        [(= (length num) 6) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)) (char->integer (sixth num)))]\n        [(=\
    \ (length num) 7) (+ 1 (char->integer (first num)) (char->integer (second num))\
    \ (char->integer (third num)) (char->integer (fourth num)) (char->integer (fifth\
    \ num)) (char->integer (sixth num)) (char->integer (seventh num)))]\n        [(=\
    \ (length num) 8) (+ 1 (char->integer (first num)) (char->integer (second num))\
    \ (char->integer (third num)) (char->integer (fourth num)) (char->integer (fifth\
    \ num)) (char->integer (sixth num)) (char->integer (seventh num)) (char->integer\
    \ (eighth num)))]\n        [(= (length num) 9) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)) (char->integer (sixth num)) (char->integer\
    \ (seventh num)) (char->integer (eighth num)) (char->integer (ninth num)))]\n\
    \        [(= (length num) 10) (+ 1 (char->integer (first num)) (char->integer\
    \ (second num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer",
  "  (cond [(null? num) 0]\n        [(= (length num) 1) (length (string->list num))]\n\
    \        [(= (length num) 2) (length (string->list (string->list num)))]\n   \
    \     [(= (length num) 3) (length (string->list (string->list (string->list num))))]\n\
    \        [(= (length num) 4) (length (string->list (string->list (string->list\
    \ (string->list num))))])\n  (cond [(= (string-ref num 0) 'A) (+ (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (string->list (string->list (string->list (string->list (string->list (string->list\
    \ (", "  (cond [(empty? num) 0]\n        [(equal? (char-code (first num)) (char\
    \ #\\A)) 0]\n        [(equal? (char-code (first num)) (char #\\B)) 1]\n      \
    \  [(equal? (char-code (first num)) (char #\\C)) 2]\n        [(equal? (char-code\
    \ (first num)) (char #\\D)) 3]\n        [(equal? (char-code (first num)) (char\
    \ #\\E)) 4]\n        [(equal? (char-code (first num)) (char #\\F)) 5]\n      \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) (digit-char (char-code (car num))))\n     (+ (hex-key (cdr num))\
    \ 1)]\n    [else (+ (hex-key (cdr num)) (hex_key (car num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(number? num) (hex_key_num num)]\n        [else (hex_key_str num)]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (char-code (car num)) (char #\\A)) 0]\n\
    \        [(equal? (char-code (car num)) (char #\\B)) 1]\n        [(equal? (char-code\
    \ (car num)) (char #\\C)) 2]\n        [(equal? (char-code (car num)) (char #\\\
    D)) 3]\n        [(equal? (char-code (car num)) (char #\\E)) 4]\n        [(equal?\
    \ (char-code (car num)) (char #\\F)) 5]\n        [else (+ 1 (hex_key\n       \
    \              (substring (number->string num) 0 1)))))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'D) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [else (+ (first num) (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) #\\A) (+ 1\
    \ (hex_key (rest num)))]\n    [(equal? (char-code (first num)) #\\B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (char-code (first num)) #\\C) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (char-code (first num)) #\\D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (char-code (first num)) #\\E) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (char-code (first num)) #\\F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) (char #\\A)) 0]\n    [(equal? (char-code (car num)) (char #\\B))\
    \ 1]\n    [(equal? (char-code (car num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (car num)) (char #\\D)) 3]\n    [(equal? (char-code (car num)) (char #\\E))\
    \ 4]\n    [(equal? (char-code (car num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n\
    \                 (substring num 0 (- (length num) 1)))]))) ; recursion\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring\
    \ num 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1))\
    \ 2)]\n    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n   \
    \ [(equal? (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num\
    \ 1 1)) 1)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char? (first num))\
    \ (+ (hex_key (rest num)) (hex_digit (first num)))]\n    [else (hex_key (rest\
    \ num))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (char-code (car\
    \ num)) #\\A) (+ 1 (hex_key (cdr num)))]\n        [(equal? (char-code (car num))\
    \ #\\B) (+ 1 (hex_key (cdr num)))]\n        [(equal? (char-code (car num)) #\\\
    C) (+ 1 (hex_key (cdr num)))]\n        [(equal? (char-code (car num)) #\\D) (+\
    \ 1 (hex_key (cdr num)))]\n        [(equal? (char-code (car num)) #\\E) (+ 1 (hex_key\
    \ (cdr num)))]\n        [(equal? (char-code (car num)) #\\F) (+ 1 (hex_key (cdr\
    \ num)))]\n        [else (+ 1 (hex_key (cdr num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(digit? (first num)) (+ (hex_key (rest num)) (hex_key (first num)))]\n\
    \    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (first num)) (digit-char (char-code (first num))))\n     (+ 1 (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond [(empty? num)\
    \ 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n        [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num\
    \ 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char?\
    \ (car num)) (+ 1 (hex-key (cdr num)))]\n    [else (+ 1 (hex-key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) #\\A) (+ 1\
    \ (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\
    \ [(number? num) 0]\n        [(= (length num) 1) (number? (char->integer num))]\n\
    \        [(= (length num) 2) (number? (char->integer num))]\n        [(= (length\
    \ num) 3) (number? (char->integer num))]\n        [(= (length num) 4) (number?\
    \ (char->integer num))]\n        [(= (length num) 5) (number? (char->integer num))]\n\
    \        [(= (length num) 6) (number? (char->integer num))]\n        [(= (length\
    \ num) 7) (number? (char->integer num))]\n        [(= (length num) 8) (number?\
    \ (char->integer num))]\n        [(= (length num) 9) (number? (char->integer num))]\n\
    \        [(= (length num) 10) (number? (char->integer num))]\n        [(= (length\
    \ num) 11) (number? (char->integer num))]\n        [(= (length num) 12) (number?\
    \ (char->integer num))]\n        [(= (length num) 13) (number? (char->integer\
    \ num))]\n        [(= (length num) 14) (number? (char->integer num))]\n      \
    \  [(= (length num) 15) (number? (char->integer num))]\n        [(= (length num)\
    \ 16) (number? (char->integer num))]\n        [(= (length num) 17) (number? (char->integer\
    \ num))]\n        [(= (length num) 18) (number? (char->integer num))]\n      \
    \  [(= (length num) 19) (number? (char->integer num))]\n        [(= (length num)\
    \ 20) (number? (char->integer num))]\n        [(= (length num) 21) (number? (char->integer\
    \ num))]\n        [(= (length num) 22) (number? (char->integer num))]\n      \
    \  [(= (length num) 23) (number? (char->integer num))]\n        [(= (length num)\
    \ 24) (number? (char->integer num))]\n        [(= (length num) 25) (number? (char->integer\
    \ num))]\n        [(= (length num) 26) (number? (char->integer num))]\n      \
    \  [(= (length num) 27) (number? (char->integer num))]\n        [(= (length num)\
    \ 28) (number? (char->integer num))]\n        [(= (length num) 29) (number? (char->integer\
    \ num))]\n        [(= (length num) 30", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (car num)) (char #\\A)) 0]\n    [(equal? (char-code (car num)) (char\
    \ #\\B)) 1]\n    [(equal? (char-code (car num)) (char #\\C)) 2]\n    [(equal?\
    \ (char-code (car num)) (char #\\D)) 3]\n    [(equal? (char-code (car num)) (char\
    \ #\\E)) 4]\n    [(equal? (char-code (car num)) (char #\\F)) 5]\n    [else (+\
    \ (hex_key (cdr num)) (hex_key (car num)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond [(empty? num) 0]\n        [(=\
    \ (length num) 1) (length num)]\n        [(= (length num) 2) (length num)]\n \
    \       [(= (length num) 3) (length num)]\n        [(= (length num) 4) (length\
    \ num)]\n        [(= (length num) 5) (length num)]\n        [(= (length num) 6)\
    \ (length num)]\n        [(= (length num) 7) (length num)]\n        [(= (length\
    \ num) 8) (length num)]\n        [(= (length num) 9) (length num)]\n        [(=\
    \ (length num) 10) (length num)]\n        [(= (length num) 11) (length num)]\n\
    \        [(= (length num) 12) (length num)]\n        [(= (length num) 13) (length\
    \ num)]\n        [(= (length num) 14) (length num)]\n        [(= (length num)\
    \ 15) (length num)]\n        [(= (length num) 16) (length num)]\n        [(= (length\
    \ num) 17) (length num)]\n        [(= (length num) 18) (length num)]\n       \
    \ [(= (length num) 19) (length num)]\n        [(= (length num) 20) (length num)]\n\
    \        [(= (length num) 21) (length num)]\n        [(= (length num) 22) (length\
    \ num)]\n        [(= (length num) 23) (length num)]\n        [(= (length num)\
    \ 24) (length num)]\n        [(= (length num) 25) (length num)]\n        [(= (length\
    \ num) 26) (length num)]\n        [(= (length num) 27) (length num)]\n       \
    \ [(= (length num) 28) (length num)]\n        [(= (length num) 29) (length num)]\n\
    \        [(= (length num) 30) (length num)]\n        [(= (length num) 31) (length\
    \ num)]\n        [(= (length num) 32) (length num)]\n        [(= (length num)\
    \ 33) (length num)]\n        [(= (length num) 34) (length num)]\n        [(= (length\
    \ num) 35) (length num)]\n        [(= (length num) 36) (length num)]\n       \
    \ [(= (length num) 37) (length num)]\n        [(= (length num) 38) (length num)]\n\
    \        [(= (length num) ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq num 1\
    \ 2)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num 1 4)))]\n  \
    \  [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ (first num) (hex_key (subseq num 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ (first num) (hex_key (subseq num 1 7)))]\n    [else (+ (first num)\
    \ (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (char-code (car num)) (digit-char (char-code (car num))))\n     (+\
    \ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n \
    \   [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) (char\
    \ #\\A)) 0]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (car num)) 'A) (+ 1 (hex_key\n            \
    \                           (substring (num 1) 1)))]\n    [(equal? (char-code\
    \ (car num)) 'B) (+ 1 (hex_key\n                                       (substring\
    \ (num 1) 1)))]\n    [(equal? (char-code (car num)) 'C) (+ 1 (hex_key\n      \
    \                                 (substring (num 1) 1)))]\n    [(equal? (char-code\
    \ (car num)) 'D) (+ 1 (hex_key\n                                       (substring\
    \ (num 1) 1)))]\n    [(equal? (char-code (car num)) 'E) (+ 1 (hex_key\n      \
    \                                 (substring (num 1) 1)))]\n    [(equal? (char-code\
    \ (car num)) 'F) (+ 1 (hex_key\n                                       (substring\
    \ (num 1) 1)))]\n    [else (+ 1 (hex_key (substring (num 1) 1)))]))\n", "  (cond\
    \ [(number? num) 0]\n        [else (+ 1 (hex_key (number->string num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) (char #\\A)) 0]\n    [(equal? (char-code (car num)) (char #\\B))\
    \ 1]\n    [(equal? (char-code (car num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (car num)) (char #\\D)) 3]\n    [(equal? (char-code (car num)) (char #\\E))\
    \ 4]\n    [(equal? (char-code (car num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (substring num\
    \ 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n\
    \  )\n)\n", "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num)\
    \ 'B) (+ (hex_key (subseq num 0 1)) 2)]\n    [(equal? (first num) 'C) (+ (hex_key\
    \ (subseq num 0 1)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num\
    \ 0 1)) 4)]\n    [(equal? (first num) 'E) (+ (hex_key (subseq num 0 1)) 5)]\n\
    \    [(equal? (first num) 'F) (+ (hex_key (subseq num 0 1)) 6)]\n    [else (+\
    \ (hex_key (subseq num 0 1)) 7)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else\
    \ (+ (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (char-code (car num)) (char #\\A)) 0]\n    [(equal? (char-code (car\
    \ num)) (char #\\B)) 1]\n    [(equal? (char-code (car num)) (char #\\C)) 2]\n\
    \    [(equal? (char-code (car num)) (char #\\D)) 3]\n    [(equal? (char-code (car\
    \ num)) (char #\\E)) 4]\n    [(equal? (char-code (car num)) (char #\\F)) 5]\n\
    \    [else (+ 1 (hex_key\n                 (substring (string (car num)) 0 (char-code\
    \ (car num))))))))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key\
    \ (subseq num 0 1)) 1)]\n    [(equal? (first num) 'C) (+ (hex_key (subseq num\
    \ 0 1)) 1)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num 0 1)) 1)]\n\
    \    [(equal? (first num) 'E) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (subseq num 0 1)) 1)]\n    [else (+ (hex_key (subseq\
    \ num 0 1)) 1)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) #\\A) (+ 1 (hex_key (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(digit-char? num) \n     (+ (count-digits (number->string num)) (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr num)))]\n\
    \    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond [(number?\
    \ num) num]\n        [else (hex_key (number->string num))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1\
    \ (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (sub1\
    \ num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key\
    \ (subseq num 0 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (subseq num\
    \ 0 1)) 1)]\n    [(equal? (first num) 'C) (+ (hex_key (subseq num 0 1)) 1)]\n\
    \    [(equal? (first num) 'D) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (subseq num 0 1)) 1)]\n    [else (+ (hex_key (subseq num 0 1))\
    \ 1)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n    [else (+ 1 (hex_key\
    \ (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char? num) 0]\n\
    \    [(digit-char? (first num)) (+ (hex_key (rest num)) (hex_key (first num)))]\n\
    \    [else (+ (hex_key (rest num)) (hex_key (first num)))]))\n", "  (cond [(number?\
    \ num) (hex_key (number->string num))]\n        [(empty? num) 0]\n        [(equal?\
    \ (first num) 'A) (+ (hex_key (substring num 1 2)) 1)]\n        [(equal? (first\
    \ num) 'B) (+ (hex_key (substring num 1 2)) 2)]\n        [(equal? (first num)\
    \ 'C) (+ (hex_key (substring num 1 2)) 3)]\n        [(equal? (first num) 'D) (+\
    \ (hex_key (substring num 1 2)) 4)]\n        [(equal? (first num) 'E) (+ (hex_key\
    \ (substring num 1 2)) 5)]\n        [(equal? (first num) 'F) (+ (hex_key (substring\
    \ num 1 2)) 6)]\n        [else (+ (hex_key (substring num 1 2)) 7)]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (char-code (first num)) (char #\\A)) 0]\n\
    \        [(equal? (char-code (first num)) (char #\\B)) 1]\n        [(equal? (char-code\
    \ (first num)) (char #\\C)) 2]\n        [(equal? (char-code (first num)) (char\
    \ #\\D)) 3]\n        [(equal? (char-code (first num)) (char #\\E)) 4]\n      \
    \  [(equal? (char-code (first num)) (char #\\F)) 5]\n        [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (char-code (car num)) 'A) (+ 1 (hex_key\n                        \
    \               (substring (num 1) 1)))]\n    [(equal? (char-code (car num)) 'B)\
    \ (+ 1 (hex_key\n                                       (substring (num 1) 1)))]\n\
    \    [(equal? (char-code (car num)) 'C) (+ 1 (hex_key\n                      \
    \                 (substring (num 1) 1)))]\n    [(equal? (char-code (car num))\
    \ 'D) (+ 1 (hex_key\n                                       (substring (num 1)\
    \ 1)))]\n    [(equal? (char-code (car num)) 'E) (+ 1 (hex_key\n              \
    \                         (substring (num 1) 1)))]\n    [(equal? (char-code (car\
    \ num)) 'F) (+ 1 (hex_key\n                                       (substring (num\
    \ 1) 1)))]\n    [else (+ 1 (hex_key (substring (num 1) 1)))]))\n", "  (cond [(number?\
    \ num) 0]\n        [(= (length num) 0) 0]\n        [(= (length num) 1) (number?\
    \ (char->integer num))]\n        [(= (length num) 2) (+ (number? (char->integer\
    \ num)) (number? (char->integer (substring num 0 1))))]\n        [(= (length num)\
    \ 3) (+ (number? (char->integer num)) (number? (char->integer (substring num 0\
    \ 1))) (number? (char->integer (substring num 1 2))))]\n        [(= (length num)\
    \ 4) (+ (number? (char->integer num)) (number? (char->integer (substring num 0\
    \ 1))) (number? (char->integer (substring num 1 2))) (number? (char->integer (substring\
    \ num 2 3))))]\n        [(= (length num) 5) (+ (number? (char->integer num)) (number?\
    \ (char->integer (substring num 0 1))) (number? (char->integer (substring num\
    \ 1 2))) (number? (char->integer (substring num 2 3))) (number? (char->integer\
    \ (substring num 3 4))))]\n        [(= (length num) 6) (+ (number? (char->integer\
    \ num)) (number? (char->integer (substring num 0 1))) (number? (char->integer\
    \ (substring num 1 2))) (number? (char->integer (substring num 2 3))) (number?\
    \ (char->integer (substring num 3 4))) (number? (char->integer (substring num\
    \ 4 5))))]\n        [(= (length num) 7) (+ (number? (char->integer num)) (number?\
    \ (char->integer (substring num 0 1))) (number? (char->integer (substring num\
    \ 1 2))) (number? (char->integer (substring num 2 3))) (number? (char->integer\
    \ (substring num 3 4))) (number? (char->integer (substring num 4 5))) (number?\
    \ (char->integer (substring num 5 6))))]\n        [(= (length num) 8) (+ (number?\
    \ (char->integer num)) (number? (char->integer (substring num 0 1))) (number?\
    \ (char->integer (substring num 1 2))) (number? (char->integer (substring num\
    \ 2 3))) (number? (char->integer (substring num 3 4))) (number? (char->integer\
    \ (substring num 4 5))) (number? (char->integer (substring num 5 6))) (number?\
    \ (char->integer (substring num 6 7))))]\n        [(= (length ", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(number?\
    \ num) 0]\n        [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 1)))]\n        [else (+ 1 (hex_key (subseq num\
    \ 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 2)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n        [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n        [else (+ 1 (hex_key (subseq num\
    \ 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 1)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (char-code (car num))\
    \ (char #\\A)) 0]\n        [(equal? (char-code (car num)) (char #\\B)) 1]\n  \
    \      [(equal? (char-code (car num)) (char #\\C)) 2]\n        [(equal? (char-code\
    \ (car num)) (char #\\D)) 3]\n        [(equal? (char-code (car num)) (char #\\\
    E)) 4]\n        [(equal? (char-code (car num)) (char #\\F)) 5]\n        [else\
    \ (+ 1 (hex_key\n                       (substring (number->string num)\n    \
    \                           1\n                               (- (length num)\
    \ 1))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (hex_key (rest num))\
    \ (hex_key (first num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (car num)) (char #\\A)) 0]\n    [(equal? (char-code\
    \ (car num)) (char #\\B)) 1]\n    [(equal? (char-code (car num)) (char #\\C))\
    \ 2]\n    [(equal? (char-code (car num)) (char #\\D)) 3]\n    [(equal? (char-code\
    \ (car num)) (char #\\E)) 4]\n    [(equal? (char-code (car num)) (char #\\F))\
    \ 5]\n    [else (+ (hex_key (cdr num)) 1)]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key\
    \ (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n", "  (cond [(number?\
    \ num) num]\n        [else (+ (count (digit-key num) '(2 3 5 7 B D E)) (hex_key\
    \ (number->string num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char? num) 0]\n\
    \    [else (+ (hex_key (substring num 0 2)) (hex_key (substring num 2 4)))]))\n",
  "  (cond [(number? num) 0]\n        [(= (length num) 0) 0]\n        [(= (length\
    \ num) 1) 1]\n        [(= (length num) 2) 2]\n        [(= (length num) 3) 3]\n\
    \        [(= (length num) 4) 4]\n        [(= (length num) 5) 5]\n        [(= (length\
    \ num) 6) 6]\n        [(= (length num) 7) 7]\n        [(= (length num) 8) 8]\n\
    \        [(= (length num) 9) 9]\n        [(= (length num) 10) 10]\n        [(=\
    \ (length num) 11) 11]\n        [(= (length num) 12) 12]\n        [(= (length\
    \ num) 13) 13]\n        [(= (length num) 14) 14]\n        [(= (length num) 15)\
    \ 15]\n        [(= (length num) 16) 16]\n        [(= (length num) 17) 17]\n  \
    \      [(= (length num) 18) 18]\n        [(= (length num) 19) 19]\n        [(=\
    \ (length num) 20) 20]\n        [(= (length num) 21) 21]\n        [(= (length\
    \ num) 22) 22]\n        [(= (length num) 23) 23]\n        [(= (length num) 24)\
    \ 24]\n        [(= (length num) 25) 25]\n        [(= (length num) 26) 26]\n  \
    \      [(= (length num) 27) 27]\n        [(= (length num) 28) 28]\n        [(=\
    \ (length num) 29) 29]\n        [(= (length num) 30) 30]\n        [(= (length\
    \ num) 31) 31]\n        [(= (length num) 32) 32]\n        [(= (length num) 33)\
    \ 33]\n        [(= (length num) 34) 34]\n        [(= (length num) 35) 35]\n  \
    \      [(= (length num) 36) 36]\n        [(= (length num) 37) 37]\n        [(=\
    \ (length num) 38) 38]\n        [(= (length num) 39) 39]\n        [(= (length\
    \ num) 40) 40]\n        [(= (length num) 41) 41]\n        [(= (length num) 42)\
    \ 42]\n        [(= (length num) ", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num\
    \ 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond [(number?\
    \ num) 0]\n        [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 1)))]\n        [else (+ 1 (hex_key (subseq num\
    \ 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ (first\
    \ num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ (first num)\
    \ (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (subseq num\
    \ 1 1)))]\n    [else (+ (first num) (hex_key (subseq num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n  )\n)\n", "  (cond [(number? num) (hex_key (number->string num))]\n\
    \        [(or (string=? (string-ref num \"A\") \"A\")\n             (string=?\
    \ (string-ref num \"B\") \"B\")\n             (string=? (string-ref num \"C\"\
    ) \"C\")\n             (string=? (string-ref num \"D\") \"D\")\n             (string=?\
    \ (string-ref num \"E\") \"E\")\n             (string=? (string-ref num \"F\"\
    ) \"F\"))\n         (+ (hex_key (string-ref num \"A\"))\n            (hex_key\
    \ (string-ref num \"B\"))\n            (hex_key (string-ref num \"C\"))\n    \
    \        (hex_key (string-ref num \"D\"))\n            (hex_key (string-ref num\
    \ \"E\"))\n            (hex_key (string-ref num \"F\"))]\n        [(string=? (string-ref\
    \ num \"0\") \"0\")\n         (+ (hex_key (string-ref num \"0\"))\n          \
    \  (hex_key (string-ref num \"1\"))\n            (hex_key (string-ref num \"2\"\
    ))\n            (hex_key (string-ref num \"3\"))\n            (hex_key (string-ref\
    \ num \"4\"))\n            (hex_key (string-ref num \"5\"))\n            (hex_key\
    \ (string-ref num \"6\"))\n            (hex_key (string-ref num \"7\"))\n    \
    \        (hex_key (string-ref num \"8\"))\n            (hex_key (string-ref num\
    \ \"9\"))]\n        [(string=? (string-ref num \"A\") \"A\")\n         (+ (hex_key\
    \ (string-ref num \"A\"))\n            (hex_key (string-ref num \"B\"))\n    \
    \        (hex_key (string-ref num \"C\"))\n            (hex_key (string-ref num\
    \ \"D\"))\n            (hex_key (string-ref num \"E\"))\n            (hex_key\
    \ (string-ref num \"F\"))]\n        [(string=? (string-ref num \"B\") \"B\")\n\
    \         (+ (hex_key (string-ref num \"A\"))\n            (hex_key (string-ref\
    \ num \"B\"))\n            (hex_key (string-ref num \"C\"))\n            (hex_key\
    \ (string-ref num \"D\"))\n            (hex_key (string-ref num \"E\"))\n    \
    \        (hex_key (string-ref num \"F\"))]\n        [(string=? (string-ref num\
    \ \"C\") \"C\")\n         (+ (hex_key (string-ref num \"A\"))\n            (hex_key\
    \ (string-ref num \"B\"))\n            (hex_key (string-ref num \"C\"))\n    \
    \        (hex_key (string", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (char-code (first num)) (digit-char (char-code (first\
    \ num)))) \n         (+ 1 (hex_key (rest num)))]\n        [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key\
    \ (subseq num 0 1)) 2)]\n    [(equal? (first num) 'C) (+ (hex_key (subseq num\
    \ 0 1)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num 0 1)) 4)]\n\
    \    [(equal? (first num) 'E) (+ (hex_key (subseq num 0 1)) 5)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (subseq num 0 1)) 6)]\n    [else (+ (hex_key (subseq\
    \ num 0 1)) 7)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+\
    \ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ (first\
    \ num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ (first num)\
    \ (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (subseq num 1 1)))]\n    [else (+ (first num) (hex_key (subseq num 1 1)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1\
    \ 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (substring num 1 1)))]\n     \
    \   [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n        [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n        [else (+ 1 (hex_key\
    \ (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring\
    \ num 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1))\
    \ 2)]\n    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n   \
    \ [(equal? (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num\
    \ 1 1)) 7)]))\n", "  (cond [(null? num) 0]\n        [(= (length num) 1) (length\
    \ num)] \n        [(= (length num) 2) (length num)] \n        [(= (length num)\
    \ 3) (length num)] \n        [(= (length num) 4) (length num)] \n        [(= (length\
    \ num) 5) (length num)] \n        [(= (length num) 6) (length num)] \n       \
    \ [(= (length num) 7) (length num)] \n        [(= (length num) 8) (length num)]\
    \ \n        [(= (length num) 9) (length num)] \n        [(= (length num) 10) (length\
    \ num)] \n        [(= (length num) 11) (length num)] \n        [(= (length num)\
    \ 12) (length num)] \n        [(= (length num) 13) (length num)] \n        [(=\
    \ (length num) 14) (length num)] \n        [(= (length num) 15) (length num)]\
    \ \n        [(= (length num) 16) (length num)] \n        [(= (length num) 17)\
    \ (length num)] \n        [(= (length num) 18) (length num)] \n        [(= (length\
    \ num) 19) (length num)] \n        [(= (length num) 20) (length num)] \n     \
    \   [(= (length num) 21) (length num)] \n        [(= (length num) 22) (length\
    \ num)] \n        [(= (length num) 23) (length num)] \n        [(= (length num)\
    \ 24) (length num)] \n        [(= (length num) 25) (length num)] \n        [(=\
    \ (length num) 26) (length num)] \n        [(= (length num) 27) (length num)]\
    \ \n        [(= (length num) 28) (length num)] \n        [(= (length num) 29)\
    \ (length num)] \n        [(= (length num) 30) (length num)] \n        [(= (length\
    \ num) 31) (length num)] \n        [(= (length num) 32) (length num)] \n     \
    \   [(= (length num) 33) (length num)] \n        [(= (length num) 34) (length\
    \ num)] \n        [(= (length num) 35) (length num)] \n        [(= (length num)\
    \ 36) (length num)] \n        [(= (length num) 37) (length num)] \n        [(=\
    \ (length num) 38) (length num)] \n        [(= (length num) ", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) (char #\\A))\
    \ 0]\n    [(equal? (char-code (first num)) (char #\\B)) 1]\n    [(equal? (char-code\
    \ (first num)) (char #\\C)) 2]\n    [(equal? (char-code (first num)) (char #\\\
    D)) 3]\n    [(equal? (char-code (first num)) (char #\\E)) 4]\n    [(equal? (char-code\
    \ (first num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n                   (substring\
    \ (second num) 1 \n                            (length (second num)))))))\n",
  "  (cond [(empty? num) 0]\n        [(digit-char? num) 0]\n        [(digit-char?\
    \ (first num)) (+ 1 (hex_key (rest num)))]\n        [else (+ 1 (hex_key (rest\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (char-code (first num)) (char #\\A)) (+ 1\
    \ (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) (char #\\A))\
    \ 0]\n    [(equal? (char-code (car num)) (char #\\B)) 1]\n    [(equal? (char-code\
    \ (car num)) (char #\\C)) 2]\n    [(equal? (char-code (car num)) (char #\\D))\
    \ 3]\n    [(equal? (char-code (car num)) (char #\\E)) 4]\n    [(equal? (char-code\
    \ (car num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n                 (substring\
    \ (number->string num) 0 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(string=? num '())\n         0]\n        [(= (string-length num) 0)\n\
    \         0]\n        [(= (string-length num) 1)\n         0]\n        [(= (string-length\
    \ num) 2)\n         (if (string=? (char-code (num)) 'A)\n             (+ 1 (hex_key\
    \ (string-ref num (string->list (string->char (string-ref num (string->list (string->char\
    \ (string-ref num 'A))))))))\n             (+ 1 (hex_key (string-ref num (string->list\
    \ (string->char (string-ref num (string->list (string->char (string-ref num 'B))))))))\n\
    \             (+ 1 (hex_key (string-ref num (string->list (string->char (string-ref\
    \ num (string->list (string->char (string-ref num 'C))))))))\n             (+\
    \ 1 (hex_key (string-ref num (string->list (string->char (string-ref num (string->list\
    \ (string->char (string-ref num 'D))))))))\n             (+ 1 (hex_key (string-ref\
    \ num (string->list (string->char (string-ref num (string->list (string->char\
    \ (string-ref num 'E))))))))\n             (+ 1 (hex_key (string-ref num (string->list\
    \ (string->char (string-ref num (string->list (string->char (string-ref num 'F))))))))\n\
    \             (+ 1 (hex_key (string-ref num (string->list (string->char (string-ref\
    \ num (string->list (string->char (string-ref num 'A))))))))\n             (+\
    \ 1 (hex_key (string-ref num (string->list (string->char (string-ref num (string->list\
    \ (string->char (string-ref num 'B))))))))\n             (+ 1 (hex_key (string-ref\
    \ num (string->list (string->char (string-ref num (string->list (string->char\
    \ (string-ref num 'C))))))))\n             (+ 1 (hex_key (string-ref num (string->list\
    \ (string->char (string-ref num (string->list (string->char (string-ref num 'D))))))))\n\
    \             (+ 1 (hex_key (string-ref num (string->list (string->char (string-ref\
    \ num (string->list (string->char (string-ref num 'E))))))))\n             (+\
    \ 1 (hex_key (string-ref num (string->list (string->char (string-ref num (string->list\
    \ (string->char (string-ref num 'F))))))))\n             (+ 1 (hex_key (string-ref\
    \ num (string->list (string->char (", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num)\
    \ 'B) (+ (hex_key (subseq num 0 1)) 2)]\n    [(equal? (first num) 'C) (+ (hex_key\
    \ (subseq num 0 1)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num\
    \ 0 1)) 4)]\n    [(equal? (first num) 'E) (+ (hex_key (subseq num 0 1)) 5)]\n\
    \    [(equal? (first num) 'F) (+ (hex_key (subseq num 0 1)) 6)]\n    [else (+\
    \ (hex_key (subseq num 0 1)) 7)]))\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char?\
    \ (first num)) (+ (first num) (hex_key (rest num)))]\n    [else (hex_key (rest\
    \ num))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq\
    \ num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n    [else (+ (first num)\
    \ (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1\
    \ 5)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1 6)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (subseq num 1 7)))]\n  \
    \  [else (+ (first num) (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
