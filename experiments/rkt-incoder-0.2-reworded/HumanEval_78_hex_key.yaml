name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key\
  \ \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\"\
  )\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? num) 0]\n    [(digit-char? num) 0]\n    [else\
    \ (+ 1 (hex_key-helper (substring num 0 1) (substring num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else (+ (first num)\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n    [else\
    \ (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'D) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ (first num) (hex_key (subseq num 1 1)))]\n    [else (+ (first num) (hex_key\
    \ (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(null? num) 0]\n        [(=\
    \ (length num) 1) (+ 1 (char->integer (first num)))]\n        [(= (length num)\
    \ 2) (+ 1 (char->integer (first num)) (char->integer (second num)))]\n       \
    \ [(= (length num) 3) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)))]\n        [(= (length num) 4) (+ 1 (char->integer\
    \ (first num)) (char->integer (second num)) (char->integer (third num)) (char->integer\
    \ (fourth num)))]\n        [(= (length num) 5) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)))]\n        [(= (length num) 6) (+ 1 (char->integer\
    \ (first num)) (char->integer (second num)) (char->integer (third num)) (char->integer\
    \ (fourth num)) (char->integer (fifth num)) (char->integer (sixth num)))]\n  \
    \      [(= (length num) 7) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer\
    \ (fifth num)) (char->integer (sixth num)) (char->integer (seventh num)))]\n \
    \       [(= (length num) 8) (+ 1 (char->integer (first num)) (char->integer (second\
    \ num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer\
    \ (fifth num)) (char->integer (sixth num)) (char->integer (seventh num)) (char->integer\
    \ (eighth num)))]\n        [(= (length num) 9) (+ 1 (char->integer (first num))\
    \ (char->integer (second num)) (char->integer (third num)) (char->integer (fourth\
    \ num)) (char->integer (fifth num)) (char->integer (sixth num)) (char->integer\
    \ (seventh num)) (char->integer (eighth num)) (char->integer (ninth num)))]\n\
    \        [(= (length num) 10) (+ 1 (char->integer (first num)) (char->integer\
    \ (second num)) (char->integer (third num)) (char->integer (fourth num)) (char->integer",
  "  (cond\n    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (count (first\
    \ num)) (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (count (first num)) (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num))\
    \ #\\A) (+ 1 (hex_key (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first\
    \ num) (hex_key (subseq num 1)))]\n  ))\n", "  (cond\n    [(empty? num) 0]\n \
    \   [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring\
    \ num 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1))\
    \ 2)]\n    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n   \
    \ [(equal? (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num\
    \ 1 1)) 0)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
