name: HumanEval_3_below_zero
language: rkt
prompt: "#lang racket\n\n;; You're given a list of deposit and withdrawal operations\
  \ on a bank account that starts with\n;; zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n;; at that point function\
  \ should return #t. Otherwise it should return #f.\n;; >>> (below_zero (list 1 2\
  \ 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero operations)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 1\
  \ 2 -3 1 2 -3)) #f)\n    (check-equal? (candidate (list 1 2 -4 5 6)) #t)\n    (check-equal?\
  \ (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f)\n    (check-equal? (candidate (list\
  \ 1 -1 2 -2 5 -5 4 -5)) #t)\n    (check-equal? (candidate (list 1 -2 2 -2 5 -5 4\
  \ -4)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? operations) #t)\n    ((< (first operations) 0)\
    \ #t)\n    (else (below_zero (rest operations)))))\n", "  (cond\n    [(empty?\
    \ operations) #t]\n    [(> (first operations) 0) #t]\n    [else (below_zero (rest\
    \ operations))]))\n", "  (cond\n    ((null? operations) #t)\n    ((< (car operations)\
    \ 0) #t)\n    (else (below_zero (cdr operations)))))\n", "  (cond\n    [(empty?\
    \ operations) #f]\n    [(equal? (first operations) 0) #f]\n    [else (and (below_zero\
    \ (rest operations)) (equal? (first operations) 0))]))\n", "  (cond\n    ((null?\
    \ operations) #t)\n    ((< (car operations) 0) #t)\n    (else (below_zero (cdr\
    \ operations)))))\n", "  (cond ((null? operations) #t)\n        ((< (car operations)\
    \ 0) #t)\n        (else (below_zero (cdr operations)))))\n", "  (cond ((null?\
    \ operations) #t)\n        ((< (car operations) 0) #t)\n        (else (below_zero\
    \ (cdr operations)))))\n", "  (cond\n    [(empty? operations) #f]\n    [(equal?\
    \ (first operations) 0) #f]\n    [else (and (below_zero (rest operations)) (equal?\
    \ (first operations) 0))]))\n", "  (cond\n    [(empty? operations) #t]\n    [(equal?\
    \ (first operations) 0) #t]\n    [else (and (below_zero (rest operations)) (not\
    \ (equal? (first operations) 0)))]))\n", "  (cond\n    ((null? operations) #t)\n\
    \    ((< (car operations) 0) #t)\n    (else (below_zero (cdr operations)))))\n",
  "  (cond\n    [(empty? operations) #f]\n    [(equal? (first operations) 0) #f]\n\
    \    [else (and (below_zero (rest operations)) (equal? (first operations) 0))]))\n",
  "  (cond [(null? operations) #f]\n        [(< (car operations) 0) #f]\n        [else\
    \ (below_zero (cdr operations))]))\n", "  (cond\n    ((null? operations) #t)\n\
    \    ((< (car operations) 0) #t)\n    (else (below_zero (cdr operations)))))\n",
  "  (cond\n    [(empty? operations) #t]\n    [(equal? (first operations) 0) #f]\n\
    \    [else (below_zero (rest operations))]))\n", "  (cond\n    ((null? operations)\
    \ #f)\n    ((< (first operations) 0) #t)\n    (else (below_zero (rest operations)))))\n",
  "  (cond [(empty? operations) #f]\n        [(< (first operations) 0) #f]\n     \
    \   [else (below_zero (rest operations))]))\n", "  (cond\n    [(empty? operations)\
    \ #f]\n    [(equal? (first operations) 0) #f]\n    [else (and (below_zero (rest\
    \ operations)) (equal? (first operations) 0))]))\n", "  (cond\n    ((null? operations)\
    \ #f)\n    ((< (car operations) 0) #t)\n    (else (below_zero (cdr operations)))))\n",
  "  (let loop ((acc '())\n             (ops (reverse operations)))\n    (cond ((null?\
    \ ops) acc)\n          ((< (car ops) 0) (loop (cons (car ops) acc) (cdr ops)))\n\
    \          (else (loop (cons (car ops) acc) (cdr ops))))))\n", "  (let loop ((acc\
    \ '())\n             (ops operations))\n    (cond ((null? ops) (null? acc))\n\
    \          ((< (car ops) 0) (loop (cons (car ops) acc) (cdr ops)))\n         \
    \ (else (loop (cons (car ops) acc) (cdr ops))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
