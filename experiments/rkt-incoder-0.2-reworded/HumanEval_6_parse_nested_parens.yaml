name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"\
  (()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens\
  \ paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((parens ()))\n    (cond ((null? paren_string)\n      \
    \     (reverse parens))\n          ((char=? (car paren_string) '( () ))\n    \
    \       (loop (cons (car paren_string) parens)))\n          ((char=? (car paren_string)\
    \ ')')\n           (loop (cdr parens))))\n  (loop '()))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char? (car paren_string)) (loop (cdr paren_string) (+ level\
    \ 1))]\n      [else (loop (cdr paren_string) (+ level 1))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string) empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string)\n                      \
    \                    (+ paren_count 1)))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string)\n                                          (-\
    \ paren_count 1)))]\n      [else (loop (rest paren_string) (+ paren_count 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ paren_count)]))))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (max_level 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [else (loop (rest paren_string) (add1 max_level))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (if (empty? paren_string)\n\
    \        result\n        (loop (rest paren_string)\n              (cons (length\
    \ (first paren_string)) result)))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string)\n           \
    \                               (+ 1 paren_count))\n       (loop (cdr paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\n\
    \                                          (- 1 paren_count))]\n      [else (loop\
    \ (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let ((paren_stack\
    \ '())\n        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n  \
    \     (reverse paren_stack)]\n      [(equal? (first paren_string) '())\n     \
    \  (reverse paren_stack)]\n      [(equal? (first paren_string) '(())\n       (push\
    \ (first paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()))\n       (push (first paren_string) paren_stack)]\n      [(equal? (first\
    \ paren_string) '((()()()))\n       (push (first paren_string) paren_stack)]\n\
    \      [(equal? (first paren_string) '((()()()()))\n       (push (first paren_string)\
    \ paren_stack)]\n      [(equal? (first paren_string) '((()()()()()))\n       (push\
    \ (first paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()))\n       (push (first paren_string) paren_stack)]\n      [(equal?\
    \ (first paren_string) '((()()()()()()()))\n       (push (first paren_string)\
    \ paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()))\n   \
    \    (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()()()))\n       (push (first paren_string) paren_stack)]\n   \
    \   [(equal? (first paren_string) '((()()()()()()()()()))\n       (push (first\
    \ paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()()()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()()()()))\n       (push (first paren_string) paren_stack)]\n \
    \     [(equal? (first paren_string) '((()()()()()()()()()()))\n       (push (first\
    \ paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()()()()()))\n\
    \       (push (first paren_string) paren", "  (let ((result (list 0))\n      \
    \  (level (list 0))\n        (paren_stack (list paren_string)))\n    (loop\n \
    \      for i from 0 to (length paren_string)\n       for c from 0 to (length paren_stack)\n\
    \       when (char=? (char-code (char-at paren_stack c)) #\\()\n       do (set!\
    \ level (+ level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i ", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list->string (list paren_count))]\n   \
    \   [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n   \
    \          (+ paren_count 1))]\n      [(equal? (first paren_string) ')')\n   \
    \    (loop (rest paren_string)\n             (- paren_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (+ level 1))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) level)]\n      [else\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count",
  "  (let loop ((parens null) (levels null) (result null))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse result)\n       ]\n      [(equal? (first paren_string)\
    \ '(())) ; Found a group of two parentheses.\n       (loop (rest paren_string)\
    \ (cons (first paren_string) levels) result)\n       ]\n      [(equal? (first\
    \ paren_string) '(())) ; Found a group of two parentheses.\n       (loop (rest\
    \ paren_string) (cons (first paren_string) levels) result)\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; Found a group of three parentheses.\n       (loop\
    \ (rest paren_string) (cons (first paren_string) levels) result)\n       ]\n \
    \     [(equal? (first paren_string) '((())) ; Found a group of three parentheses.\n\
    \       (loop (rest paren_string) (cons (first paren_string) levels) result)\n\
    \       ]\n      [(equal? (first paren_string) '((())) ; Found a group of three\
    \ parentheses.\n       (loop (rest paren_string) (cons (first paren_string) levels)\
    \ result)\n       ]\n      [(equal? (first paren_string) '((())) ; Found a group\
    \ of three parentheses.\n       (loop (rest paren_string) (cons (first paren_string)\
    \ levels) result)\n       ]\n      [(equal? (first paren_string) '((())) ; Found\
    \ a group of three parentheses.\n       (loop (rest paren_string) (cons (first\
    \ paren_string) levels) result)\n       ]\n      [(equal? (first paren_string)\
    \ '((())) ; Found a group of three parentheses.\n       (loop (rest paren_string)\
    \ (cons (first paren_string) levels) result)\n       ]\n      [(equal? (first\
    \ paren_string) '((())) ; Found a group of three parentheses.\n       (loop (rest\
    \ paren_string) (cons (first paren_string) levels) result)\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; Found a group of three parentheses.\n       (loop\
    \ (rest paren_string) (cons (first paren_string) levels) result)\n       ]\n \
    \     [(equal? (first paren_string) '((())) ; Found a group of three parentheses.\n\
    \       (loop (rest paren_string) (cons (first paren_string) levels) result)\n\
    \       ]\n      [(equal? (first paren_string) '((())) ; Found a group of three\
    \ parentheses.\n       (loop (rest paren", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
