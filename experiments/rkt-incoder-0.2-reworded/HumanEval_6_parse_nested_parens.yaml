name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"\
  (()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens\
  \ paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((parens ()))\n    (cond ((null? paren_string)\n      \
    \     (reverse parens))\n          ((char=? (car paren_string) '( () ))\n    \
    \       (loop (cons (car paren_string) parens)))\n          ((char=? (car paren_string)\
    \ ')')\n           (loop (cdr parens))))\n  (loop '()))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char? (car paren_string)) (loop (cdr paren_string) (+ level\
    \ 1))]\n      [else (loop (cdr paren_string) (+ level 1))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string) empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string)\n                      \
    \                    (+ paren_count 1)))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string)\n                                          (-\
    \ paren_count 1)))]\n      [else (loop (rest paren_string) (+ paren_count 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ paren_count)]))))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (max_level 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 max_level))]\n\
    \      [else (loop (rest paren_string) (add1 max_level))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (if (empty? paren_string)\n\
    \        result\n        (loop (rest paren_string)\n              (cons (length\
    \ (first paren_string)) result)))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string)\n           \
    \                               (+ 1 paren_count))\n       (loop (cdr paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\n\
    \                                          (- 1 paren_count))]\n      [else (loop\
    \ (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let ((paren_stack\
    \ '())\n        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n  \
    \     (reverse paren_stack)]\n      [(equal? (first paren_string) '())\n     \
    \  (reverse paren_stack)]\n      [(equal? (first paren_string) '(())\n       (push\
    \ (first paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()))\n       (push (first paren_string) paren_stack)]\n      [(equal? (first\
    \ paren_string) '((()()()))\n       (push (first paren_string) paren_stack)]\n\
    \      [(equal? (first paren_string) '((()()()()))\n       (push (first paren_string)\
    \ paren_stack)]\n      [(equal? (first paren_string) '((()()()()()))\n       (push\
    \ (first paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()))\n       (push (first paren_string) paren_stack)]\n      [(equal?\
    \ (first paren_string) '((()()()()()()()))\n       (push (first paren_string)\
    \ paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()))\n   \
    \    (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()()()))\n       (push (first paren_string) paren_stack)]\n   \
    \   [(equal? (first paren_string) '((()()()()()()()()()))\n       (push (first\
    \ paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()()()))\n\
    \       (push (first paren_string) paren_stack)]\n      [(equal? (first paren_string)\
    \ '((()()()()()()()()()))\n       (push (first paren_string) paren_stack)]\n \
    \     [(equal? (first paren_string) '((()()()()()()()()()()))\n       (push (first\
    \ paren_string) paren_stack)]\n      [(equal? (first paren_string) '((()()()()()()()()()()()))\n\
    \       (push (first paren_string) paren", "  (let ((result (list 0))\n      \
    \  (level (list 0))\n        (paren_stack (list paren_string)))\n    (loop\n \
    \      for i from 0 to (length paren_string)\n       for c from 0 to (length paren_stack)\n\
    \       when (char=? (char-code (char-at paren_stack c)) #\\()\n       do (set!\
    \ level (+ level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i 1) to (length paren_string)\n   \
    \    when (char=? (char-code (char-at paren_string c)) #\\))\n       do (set!\
    \ level (- level 1))\n       for c from (+ i ", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list->string (list paren_count))]\n   \
    \   [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n   \
    \          (+ paren_count 1))]\n      [(equal? (first paren_string) ')')\n   \
    \    (loop (rest paren_string)\n             (- paren_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (+ level 1))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) level)]\n      [else\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count",
  "  (let loop ((parens null) (levels null) (result null))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse result)\n       ]\n      [(equal? (first paren_string)\
    \ '(())) ; Found a group of two parentheses.\n       (loop (rest paren_string)\
    \ (cons (first paren_string) levels) result)\n       ]\n      [(equal? (first\
    \ paren_string) '(())) ; Found a group of two parentheses.\n       (loop (rest\
    \ paren_string) (cons (first paren_string) levels) result)\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; Found a group of three parentheses.\n       (loop\
    \ (rest paren_string) (cons (first paren_string) levels) result)\n       ]\n \
    \     [(equal? (first paren_string) '((())) ; Found a group of three parentheses.\n\
    \       (loop (rest paren_string) (cons (first paren_string) levels) result)\n\
    \       ]\n      [(equal? (first paren_string) '((())) ; Found a group of three\
    \ parentheses.\n       (loop (rest paren_string) (cons (first paren_string) levels)\
    \ result)\n       ]\n      [(equal? (first paren_string) '((())) ; Found a group\
    \ of three parentheses.\n       (loop (rest paren_string) (cons (first paren_string)\
    \ levels) result)\n       ]\n      [(equal? (first paren_string) '((())) ; Found\
    \ a group of three parentheses.\n       (loop (rest paren_string) (cons (first\
    \ paren_string) levels) result)\n       ]\n      [(equal? (first paren_string)\
    \ '((())) ; Found a group of three parentheses.\n       (loop (rest paren_string)\
    \ (cons (first paren_string) levels) result)\n       ]\n      [(equal? (first\
    \ paren_string) '((())) ; Found a group of three parentheses.\n       (loop (rest\
    \ paren_string) (cons (first paren_string) levels) result)\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; Found a group of three parentheses.\n       (loop\
    \ (rest paren_string) (cons (first paren_string) levels) result)\n       ]\n \
    \     [(equal? (first paren_string) '((())) ; Found a group of three parentheses.\n\
    \       (loop (rest paren_string) (cons (first paren_string) levels) result)\n\
    \       ]\n      [(equal? (first paren_string) '((())) ; Found a group of three\
    \ parentheses.\n       (loop (rest paren", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list paren_count)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) ')')\n       (loop (rest paren_string)\n\
    \             (- paren_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons 1 (loop (rest paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons 2 (loop (rest paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons 3 (loop\
    \ (rest paren_string) result)))]\n      [else (loop (rest paren_string) (cons\
    \ 0 (loop (rest paren_string) result)))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ 1 paren_count))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (+ 1 paren_count))]))))\n", "  (let loop ((parens\
    \ (string->list paren_string))\n             (level (length parens))\n       \
    \      (result '()))\n    (if (null? parens)\n        result\n        (loop (cdr\
    \ parens)\n              (- level 1)\n              (cons (max level (car parens))\
    \ result))))))\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- level 1))]\n      [else (loop (rest paren_string)\
    \ level)])))\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n       ]\n    \
    \  [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))\n       ]\n      [else\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      )\n      )\n    )\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n     \
    \  (loop (rest paren_string)\n             (- 1 levels))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ level 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list)\n       ]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [else\n       (loop (rest\
    \ paren_string) (add1 level))\n       ]\n      )\n      )\n    )\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char? (car paren_string)) (loop (cdr paren_string) (cons (car\
    \ paren_string) result))]\n      [else (loop (cdr paren_string) (cons (loop (cdr\
    \ paren_string) '()) result))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string)\n             (- paren_count\
    \ 1))]\n      [else\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))])))\n", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n   \
    \   [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n   \
    \          (add1 levels))]\n      [else\n       (loop (rest paren_string)\n  \
    \           (add1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n     \
    \  (loop (rest paren_string)\n             (- 1 levels))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char? (car paren_string)) (cons\
    \ (car paren_string) (loop (cdr paren_string) (+ 1 paren_count)))]\n      [else\
    \ (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let ((paren_stack '())\n        (paren_level '()))\n  \
    \  (cond\n      [(empty? paren_string)\n       (reverse paren_level)]\n      [(equal?\
    \ (first paren_string) '(')\n       (push (first paren_string) paren_stack)\n\
    \       (push (first paren_string) paren_level)]\n      [(equal? (first paren_string)\
    \ ')')\n       (if (null? (rest paren_stack))\n           (reverse paren_level)\n\
    \           (let ((paren_level (rest paren_stack)))\n             (if (null? (rest\
    \ paren_level))\n                 (reverse paren_level)\n                 (let\
    \ ((paren_stack (rest paren_level)))\n                   (if (null? (rest paren_stack))\n\
    \                       (reverse paren_level)\n                       (let ((paren_stack\
    \ (rest paren_stack)))\n                         (if (null? (rest paren_stack))\n\
    \                             (reverse paren_level)\n                        \
    \     (let ((paren_stack (rest paren_stack)))\n                              \
    \ (if (null? (rest paren_stack))\n                                   (reverse\
    \ paren_level)\n                                   (let ((paren_stack (rest paren_stack)))\n\
    \                                     (if (null? (rest paren_stack))\n       \
    \                                  (reverse paren_level)\n                   \
    \                      (let ((paren_stack (rest paren_stack)))\n             \
    \                              (if (null? (rest paren_stack))\n              \
    \                                 (reverse paren_level)\n                    \
    \                           (let ((paren_stack (rest paren_stack)))\n        \
    \                                         (if (null? (rest paren_stack))\n   \
    \                                                  (reverse paren_level)\n   \
    \                                                  (let ((paren_stack (rest paren_stack)))\n\
    \                                                       (if (null? (rest paren_stack))\n\
    \                                                           (reverse paren_level)\n\
    \                                                           (let ((paren_stack\
    \ (rest paren_stack)))\n                                                     \
    \        (if (null? (rest paren_stack))\n                                    \
    \                             (reverse paren_level)\n                        \
    \                                         (let ((paren_stack (rest paren_stack)))\n\
    \                                                                   (if (null?\
    \ (rest paren_stack))\n                                                      \
    \                 (reverse paren_level)\n                                    \
    \                                   (let ((paren_stack (rest paren_stack)))\n\
    \                                                                         (if\
    \ (null? (rest paren_stack))\n                                               \
    \                              (reverse paren_level)\n                       \
    \                                                      (let ((paren_stack (rest\
    \ paren_stack)))\n                                                           \
    \                    (if (null? (rest paren_stack))\n                        \
    \                                                           (reverse paren_level)\n\
    \                                                                            \
    \       (let ((paren_stack (rest paren_stack)))\n                            \
    \                                         (if (null? (rest paren_stack))\n   \
    \                                                                      (reverse\
    \ paren", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (+ 1 levels))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (- 1 paren_count))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\
    \ ((null? paren_string) '())\n          ((char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (+ 1 paren_count)))\n          ((char= (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count)))\n          (else (loop (rest\
    \ paren_string) paren_count)))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string) levels]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let ((levels ()))\n    (let loop ((paren_string paren_string)\n            \
    \   (level 0))\n      (cond\n        ((null? paren_string)\n         (reverse\
    \ levels))\n        ((char=? (car paren_string) '(')\n         (loop (cdr paren_string)\
    \ (add1 level)))\n        ((char=? (car paren_string) ')')\n         (loop (cdr\
    \ paren_string) (sub1 level)))\n        (else\n         (loop (cdr paren_string)\
    \ (add1 level))))))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list levels)]\n\
    \      [(equal? (first paren_string) '(())) ; '(()) has maximum two levels of\
    \ nesting\n       (loop (rest paren_string) (add1 levels))]\n      [else\n   \
    \    (loop (rest paren_string) (add1 levels))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n \
    \     [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\n    \
    \         (+ paren_count 1))]\n      [(equal? (car paren_string) ')')\n      \
    \ (loop (cdr paren_string)\n             (- paren_count 1))]\n      [else\n  \
    \     (loop (cdr paren_string)\n             (+ paren_count 1))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((parens (string->list\
    \ paren_string))\n             (level (length parens))\n             (result '()))\n\
    \    (cond ((null? parens) result)\n          ((= level 0) (append result (list\
    \ level)))\n          ((= (first parens) (first parens))\n           (loop (rest\
    \ parens)\n                 (- level 1)\n                 (append result (list\
    \ level))))\n          (else\n           (loop (rest parens)\n               \
    \  (- level 1)\n                 (append result (list level)))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Space)\n       (loop (rest paren_string) (add1 levels))]\n      [else\n      \
    \ (loop (rest paren_string) (add1 levels))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1\
    \ paren_count))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (cdr paren_string) (+ 1 paren_count))]))\n\
    \  (loop (reverse paren_string) 0))\n", "  (let loop ((paren_string paren_string)\n\
    \             (max_level 0))\n    (cond\n      [(empty? paren_string)\n      \
    \ (list max_level)]\n      [(equal? (car paren_string) '())\n       (loop (cdr\
    \ paren_string) (+ max_level 1))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (if (equal? (car paren_string) '())\n                 (+ max_level\
    \ 1)\n                 (+ 1 (loop (cdr paren_string) max_level))))]))))\n", " \
    \ (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((parens (string->list\
    \ paren_string))\n             (level (length parens)))\n    (cond\n      [(empty?\
    \ parens) (list 0)]\n      [(equal? (first parens) '(') (loop (rest parens) (+\
    \ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n   \
    \   [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first\
    \ parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\\
    )) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop\
    \ (rest parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest\
    \ parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens)\
    \ (+ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+\
    \ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n\
    \      [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n   \
    \   [(equal? (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal?\
    \ (first parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first\
    \ parens) '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens)\
    \ '(#\\)) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\\
    )) (loop (rest parens) (+ 1 level))]\n      [(equal? (first parens) '(#\\)) (loop\
    \ (rest parens) (+ 1 level))]\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (", "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) empty]\n      [(equal? (car paren_string)\
    \ '(') (loop (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string)\
    \ ')') (loop (cdr paren_string) paren_count)]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 paren_count))\n       ]\n      [(equal? (first paren_string)\
    \ ')')\n       (loop (rest paren_string)\n             (- 1 paren_count))\n  \
    \     ]\n      [else\n       (loop (rest paren_string)\n             (+ 1 paren_count))\n\
    \       ]\n      )\n    )\n  )\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons result\
    \ (loop (rest paren_string) '())))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (loop (rest paren_string) '()) result))]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (loop\
    \ (rest paren_string) '()) (loop (rest paren_string) '())))]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (loop (rest paren_string)\
    \ '()) (loop (rest paren_string) (cons (loop (rest paren_string) '()) result))))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (loop\
    \ (rest paren_string) '()) (loop (rest paren_string) (cons (loop (rest paren_string)\
    \ '()) (loop (rest paren_string) (cons (loop (rest paren_string) '()) result))))))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n   \
    \   [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n    \
    \         (+ 1 levels))]\n      [(char= (first paren_string) ')')\n       (loop\
    \ (rest paren_string)\n             (- 1 levels))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (+ 1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count", "  (let loop ((paren_string paren_string)\n            \
    \ (max_level 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n   \
    \   [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 max_level))]\n      [(equal? (first paren_string) '(#\\\
    Tab) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(#\\Space) (loop (rest paren_string) (add1 max_level))]\n   \
    \   [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string)\
    \ (add1 max_level))]\n      [(equal? (first paren_string) '(#\\Newline) (loop\
    \ (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 max_level))]\n \
    \     [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 max_level))]\n      [(equal? (first paren_string) '(#\\\
    Space) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(#\\Space) (loop (rest paren_string) (add1 max_level))]\n   \
    \   [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 max_level))]\n      [(equal? (first paren_string) '", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char= (char (first paren_string)) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (char (first paren_string)) ')') (loop (rest\
    \ paren_string) (sub1 levels))]\n      [else (loop (rest paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [else\n       (loop (rest paren_string) (add1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char? (car paren_string)) (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(char=? (car paren_string) '(') (loop\
    \ (cdr paren_string) (add1 paren_count))]\n      [(char=? (car paren_string) ')')\
    \ (loop (cdr paren_string) (sub1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (add1 paren_count))]))\n  (if (= paren_count 0) empty\n      (append (list paren_count)\n\
    \              (loop (cdr paren_string) (add1 paren_count)))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (add1\
    \ levels))]\n      [else\n       (loop (rest paren_string)\n             (add1\
    \ levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n    \
    \  [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      ", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n  \
    \    [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string) levels]\n      [(char? (car paren_string)) (loop (cdr paren_string)\
    \ (add1 levels))]\n      [else (loop (cdr paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(equal? (car paren_string)\
    \ '())\n       (loop (cdr paren_string) (add1 level))\n       ]\n      [(equal?\
    \ (car paren_string) '(()))\n       (loop (cdr paren_string) (add1 level))\n \
    \      ]\n      [(equal? (car paren_string) '((()))\n       (loop (cdr paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (car paren_string) '((()()))\n     \
    \  (loop (cdr paren_string) (add1 level))\n       ]\n      [(equal? (car paren_string)\
    \ '((()()()))\n       (loop (cdr paren_string) (add1 level))\n       ]\n     \
    \ [(equal? (car paren_string) '((()()()()))\n       (loop (cdr paren_string) (add1\
    \ level))\n       ]\n      [(equal? (car paren_string) '((()()()()()))\n     \
    \  (loop (cdr paren_string) (add1 level))\n       ]\n      [(equal? (car paren_string)\
    \ '((()()()()()()))\n       (loop (cdr paren_string) (add1 level))\n       ]\n\
    \      [(equal? (car paren_string) '((()()()()()()()))\n       (loop (cdr paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (loop (cdr paren_string) (add1 level))\n       ]\n      [(equal? (car\
    \ paren_string) '((()()()()()()()()))\n       (loop (cdr paren_string) (add1 level))\n\
    \       ]\n      [(equal? (car paren_string) '((()()()()()()()()))\n       (loop\
    \ (cdr paren_string) (add1 level))\n       ]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()))\n       (loop (cdr paren_string) (add1 level))\n     \
    \  ]\n      [(equal? (car paren_string) '((()()()()()()()()()))\n       (loop\
    \ (cdr paren_string) (add1 level))\n       ]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()", "  (let loop ((paren_string paren_string)\n            \
    \ (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list levels)]\n\
    \      [(equal? (first paren_string) '(())) ; The first parenthesis is a \"(())\"\
    \n       (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '((())) ; The first parenthesis is a \"((()))\"\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(())) ; The first parenthesis is a \"(())\"\n       (loop (rest\
    \ paren_string)\n             (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '((())) ; The first parenthesis is a \"((()))\"\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '((())) ; The\
    \ first parenthesis is a \"((()))\"\n       (loop (rest paren_string)\n      \
    \       (+ 1 levels))]\n      [(equal? (first paren_string) '((())) ; The first\
    \ parenthesis is a \"((()))\"\n       (loop (rest paren_string)\n            \
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '((())) ; The first parenthesis\
    \ is a \"((()))\"\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '((())) ; The first parenthesis is a \"((()))\"\
    \n       (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '((())) ; The first parenthesis is a \"((()))\"\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '((())) ; The first parenthesis is a \"((()))\"\n       (loop\
    \ (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '((())) ; The first parenthesis is a \"((()))\"\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '((())) ; The\
    \ first parenthesis is a \"((()))\"\n       (loop (rest paren_string)\n      \
    \       (+ 1 levels))]\n      [(equal? (first paren_string) '((())", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space)\n       (loop (rest paren_string) (add1 levels))]\n      [else\n\
    \       (loop (rest paren_string) (add1 levels))]\n      )))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list paren_count)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond ((null?\
    \ paren_string) '())\n          ((char= (first paren_string) '(') (loop (rest\
    \ paren_string) (add1 paren_count)))\n          ((char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count)))\n          ((char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count)))\n          ((char= (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n        \
    \  ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count)))\n\
    \          ((", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal? (car paren_string)\
    \ '(') (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string)\
    \ ')') (loop (cdr paren_string) (sub1 levels))]\n      [else (loop (cdr paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 max_level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 max_level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 max_level))]\n      [else (loop (rest paren_string)\
    \ (add1 max_level))])))\n  (if (= max_level 0)\n      (error \"No levels of nesting\
    \ found\")\n      (list max_level)))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (max_level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list max_level)]\n      [(equal? (car paren_string) '())\n       (loop\
    \ (cdr paren_string) (add1 max_level))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (if (< (car paren_string) '())\n                 (add1 max_level)\n\
    \                 (add1 max_level))])]))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [else\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n            \
    \ (result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(equal?\
    \ (car paren_string) '()) result]\n      [(equal? (car paren_string) '(())) result]\n\
    \      [(equal? (car paren_string) '(()())) result]\n      [(equal? (car paren_string)\
    \ '((())) result]\n      [(equal? (car paren_string) '((()())) result]\n     \
    \ [(equal? (car paren_string) '((()()())) result]\n      [(equal? (car paren_string)\
    \ '((()()())()) result]\n      [(equal? (car paren_string) '((()()())())) result]\n\
    \      [(equal? (car paren_string) '((()()())())()) result]\n      [(equal? (car\
    \ paren_string) '((()()())())()()) result]\n      [(equal? (car paren_string)\
    \ '((()()())())()()()) result]\n      [(equal? (car paren_string) '((()()())())()()()())\
    \ result]\n      [(equal? (car paren_string) '((()()())())()()()()()) result]\n\
    \      [(equal? (car paren_string) '((()()())())()()()()()()) result]\n      [(equal?\
    \ (car paren_string) '((()()())())()()()()()()()) result]\n      [(equal? (car\
    \ paren_string) '((()()())())()()()()()()()()()) result]\n      [(equal? (car\
    \ paren_string) '((()()())())()()()()()()()()()()()()) result]\n      [(equal?\
    \ (car paren_string) '((()()())())()()()()()()()()()()()()()()) result]\n    \
    \  [(equal? (car paren_string) '((()()())())()()()()()()()()()()()()()()()()())\
    \ result]\n      [(equal? (car paren_string) '((()()())())()()()()()()()()()()()()()()()()()()()())\
    \ result]\n      [(equal? (car paren_string) '((()()())())()()", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) paren_count)]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n \
    \            (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [else\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let ((paren_stack\
    \ (make-list 0))\n        (paren_count 0))\n    (loop\n       for paren_symbol\
    \ in (split paren_string #\\Space #\\Newline)\n       for paren_count in 0\n \
    \      for paren_symbol in (split paren_string #\\Space #\\Newline)\n       for\
    \ paren_count in 0\n       for paren_symbol in (split paren_string #\\Space #\\\
    Newline)\n       for paren_count in 0\n       for paren_symbol in (split paren_string\
    \ #\\Space #\\Newline)\n       for paren_count in 0\n       for paren_symbol in\
    \ (split paren_string #\\Space #\\Newline)\n       for paren_count in 0\n    \
    \   for paren_symbol in (split paren_string #\\Space #\\Newline)\n       for paren_count\
    \ in 0\n       for paren_symbol in (split paren_string #\\Space #\\Newline)\n\
    \       for paren_count in 0\n       for paren_symbol in (split paren_string #\\\
    Space #\\Newline)\n       for paren_count in 0\n       for paren_symbol in (split\
    \ paren_string #\\Space #\\Newline)\n       for paren_count in 0\n       for paren_symbol\
    \ in (split paren_string #\\Space #\\Newline)\n       for paren_count in 0\n \
    \      for paren_symbol in (split paren_string #\\Space #\\Newline)\n       for\
    \ paren_count in 0\n       for paren_symbol in (split paren_string #\\Space #\\\
    Newline)\n       for paren_count in 0\n       for paren_symbol in (split paren_string\
    \ #\\Space #\\Newline)\n       for paren_count in 0\n       for paren_symbol in\
    \ (split paren_string #\\Space #\\Newline)\n       for paren_count in 0\n    \
    \   for paren_symbol in (split paren_string #\\Space #\\Newline)\n       for paren_count\
    \ in 0\n       for paren_symbol in (split paren_string #\\Space #\\Newline)\n\
    \       for paren_count in 0\n       for paren_symbol in (split paren_string #\\\
    Space #\\Newline)\n       for paren_count in 0\n       for paren_symbol in (split\
    \ paren_string #\\Space #", "  (let loop ((paren_string paren_string)\n      \
    \       (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list)\n       ]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [else\n\
    \       (loop (rest paren_string) (add1 level))\n       ]\n      )\n      )\n\
    \    )\n", "  (let ((levels 0))\n    (let loop ((paren_string paren_string)\n\
    \               (levels levels))\n      (cond ((null? paren_string)\n        \
    \     (list levels))\n            ((char=? (car paren_string) '( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string) result]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons result (loop (rest paren_string) '())))]\n \
    \     [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (cons\
    \ result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (cons result (loop (rest paren_string)\
    \ '())))]\n      [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string)\
    \ (cons result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (cons result (loop (rest paren_string)\
    \ '())))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (cons result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (loop (rest paren_string) (cons result (loop (rest paren_string) '())))]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (cons\
    \ result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (cons result (loop (rest paren_string)\
    \ '())))]\n      [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string)\
    \ (cons result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (cons result (loop (rest paren_string)\
    \ '())))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (cons result (loop (rest paren_string) '())))]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (loop (rest paren_string) (cons result (loop (rest paren_string) '())))]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (cons\
    \ result (loop", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n      [else\
    \ (loop (rest paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) ')')\n\
    \       (loop (rest paren_string) (sub1 levels))]\n      [else\n       (loop (rest\
    \ paren_string) (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (max_level 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 max_level))]\n\
    \      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 max_level))]\n      [else (loop (rest paren_string) (add1\
    \ max_level))]))\n  (if (= max_level 0)\n      (error \"No nested parentheses\
    \ found\")\n      (first paren_string)))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '()) empty]\n      [(equal? (car paren_string)\
    \ '(())) (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())()()) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())()()()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())()()()()) (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()) ",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list levels)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [else\n       (loop (rest paren_string) (add1 levels))]\n \
    \     )))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))\n  (if (= paren_count 0) empty\n      (loop\
    \ (rest paren_string) (add1 paren_count))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [else (loop (rest paren_string) (add1 level))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n\
    \      [(char=? (first paren_string) ')')\n       (loop (rest paren_string) (sub1\
    \ level))\n       ]\n      [else\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      )\n    )\n  )\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (add1 levels))]\n      [else\n       (loop (rest paren_string)\n\
    \             (add1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (sub1 levels))]\n\
    \      [else (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(equal? (car paren_string)\
    \ '())\n       (loop (cdr paren_string) (add1 paren_count))\n       ]\n      [(equal?\
    \ (car paren_string) '(()))\n       (loop (cdr paren_string) (add1 paren_count))\n\
    \       ]\n      [(equal? (car paren_string) '(()()))\n       (loop (cdr paren_string)\
    \ (add1 paren_count))\n       ]\n      [(equal? (car paren_string) '(())())\n\
    \       (loop (cdr paren_string) (add1 paren_count))\n       ]\n      [(equal?\
    \ (car paren_string) '((()))\n       (loop (cdr paren_string) (add1 paren_count))\n\
    \       ]\n      [(equal? (car paren_string) '((()()))\n       (loop (cdr paren_string)\
    \ (add1 paren_count))\n       ]\n      [(equal? (car paren_string) '((())())\n\
    \       (loop (cdr paren_string) (add1 paren_count))\n       ]\n      [(equal?\
    \ (car paren_string) '(()()())\n       (loop (cdr paren_string) (add1 paren_count))\n\
    \       ]\n      [(equal? (car paren_string) '(())()()\n       (loop (cdr paren_string)\
    \ (add1 paren_count))\n       ]\n      [(equal? (car paren_string) '((()()()))\n\
    \       (loop (cdr paren_string) (add1 paren_count))\n       ]\n      [(equal?\
    \ (car paren_string) '((())()())\n       (loop (cdr paren_string) (add1 paren_count))\n\
    \       ]\n      [(equal? (car paren_string) '((()()()()))\n       (loop (cdr\
    \ paren_string) (add1 paren_count))\n       ]\n      [(equal? (car paren_string)\
    \ '((())()()())\n       (loop (cdr paren_string) (add1 paren_count))\n       ]\n\
    \      [(equal? (car paren_string) '((()()()()))\n       (loop (cdr paren_string)\
    \ (add1 paren_count))\n       ]\n      [(equal? (car paren_string) '((())()()())\n\
    \       (loop (cdr paren_string) (add1 paren_count))\n       ]\n      [(equal?\
    \ (", "  (let loop ((paren_string paren_string)\n             (level 0))\n   \
    \ (cond\n      [(empty? paren_string)\n       (list level)]\n      [(equal? (car\
    \ paren_string) '())\n       (loop (cdr paren_string) (+ level 1))]\n      [else\n\
    \       (loop (cdr paren_string)\n             (+ level 1))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list)\n       ]\n      [(equal? (car paren_string) '())\n\
    \       (loop (cdr paren_string) (+ level 1))\n       ]\n      [(equal? (car paren_string)\
    \ '(()))\n       (loop (cdr paren_string) (+ level 2))\n       ]\n      [else\n\
    \       (loop (cdr paren_string) (+ level 1))\n       ]\n      )\n    )\n  )\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list level)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n\
    \      [(equal? (first paren_string) '(())) ; nested parenthesis\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\n\
    \                                          (+ paren_count 1)))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string)\n                      \
    \                  (- paren_count 1))]\n      [else (loop (rest paren_string)\
    \ (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [else\
    \ (loop (rest paren_string) (add1 levels))]))))\n", "  (let ((paren_groups (string->list\
    \ paren_string)))\n    (let loop ((i 0) (max_level 0))\n      (cond ((null? paren_groups)\
    \ (list max_level))\n            ((= i 0) (loop (+ i 1) max_level))\n        \
    \    (else (loop (+ i 1) (max 0 (car paren_groups) max_level)))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list->string levels)]\n      [(equal? (car\
    \ paren_string) '(')\n       (loop (cdr paren_string) (+ 1 levels))]\n      [(equal?\
    \ (car paren_string) ')')\n       (loop (cdr paren_string) (- 1 levels))]\n  \
    \    [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string) level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let ((levels ()))\n    (loop\n       for i from 0 to (length\
    \ paren_string)\n       for char from 0 to (length paren_string)\n       when\
    \ (char=paren_string[i])\n       do (set! levels (cons i levels))\n       finally\
    \ (return levels)))\n", "  (let ((levels (make-list 0 0))\n        (level (make-list\
    \ 0 0)))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '(')\n       (set! level (add1 level))\n\
    \       (set! levels (add1 levels))]\n      [(equal? (first paren_string) ')')\n\
    \       (set! level (add1 level))\n       (set! levels (add1 levels))\n      \
    \ (reverse levels)]\n      [(equal? (first paren_string) '(())')\n       (set!\
    \ level (add1 level))\n       (set! levels (add1 levels))\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '((()))')\n       (set! level (add1 level))\n\
    \       (set! levels (add1 levels))\n       (reverse levels)]\n      [(equal?\
    \ (first paren_string) '((()()))')\n       (set! level (add1 level))\n       (set!\
    \ levels (add1 levels))\n       (reverse levels)]\n      [(equal? (first paren_string)\
    \ '((()()()))')\n       (set! level (add1 level))\n       (set! levels (add1 levels))\n\
    \       (reverse levels)]\n      [(equal? (first paren_string) '((()()()()))')\n\
    \       (set! level (add1 level))\n       (set! levels (add1 levels))\n      \
    \ (reverse levels)]\n      [(equal? (first paren_string) '((()()()()()))')\n \
    \      (set! level (add1 level))\n       (set! levels (add1 levels))\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '((()()()()()()))')\n       (set!\
    \ level (add1 level))\n       (set! levels (add1 levels))\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '((()()()()()()()))')\n       (set! level\
    \ (add1 level))\n       (set! levels (add1 levels))\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '((()()()()()()()()))')\n       (set! level\
    \ (add1 level))\n       (set! levels (add1 levels))\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '((()()()()()()()()()))')\n       (set! level\
    \ (add1 level))\n       (set! levels (add1 ", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (first paren_string) '(())) ; found an opening parenthesis\n\
    \       (loop (rest paren_string) (+ level 1))\n       ]\n      [(equal? (first\
    \ paren_string) '((())) ; found a closing parenthesis\n       (loop (rest paren_string)\
    \ (- level 1))\n       ]\n      [else\n       (loop (rest paren_string) (+ level\
    \ 1))\n       ]\n      )\n     )\n   )\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)\n       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (cons 1 (loop (rest paren_string) result)))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (cons 2 (loop (rest\
    \ paren_string) result)))\n       ]\n      [else\n       (loop (rest paren_string)\
    \ (cons (char-code (first paren_string)) result))\n       ]\n      )\n     )\n\
    \   )\n  )\n", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list paren_count)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [else\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n            \
    \ (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (car paren_string) '(') (loop (cdr paren_string) (+ paren_count 1))]\n     \
    \ [(equal? (car paren_string) ')') (loop (cdr paren_string) paren_count)]\n  \
    \    [else (loop (cdr paren_string) paren_count)]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char= (char (first paren_string)) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (char (first paren_string)) ')') (loop (rest\
    \ paren_string) (sub1 levels))]\n      [else (loop (rest paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n     \
    \  (loop (rest paren_string)\n             (- 1 levels))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(equal? (car paren_string) '()) level]\n\
    \      [(equal? (car paren_string) '(())) (incf level)]\n      [else (incf level\
    \ (loop (cdr paren_string) (add1 level)))]\n    )\n  )\n)\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons 1 (loop (rest paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons 2 (loop (rest paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons 3 (loop\
    \ (rest paren_string) result)))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons 4 (loop (rest paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons 5 (loop (rest paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons 6 (loop (rest paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons 7 (loop (rest paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons 8 (loop\
    \ (rest paren_string) result)))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons 9 (loop (rest paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons 10 (loop (rest paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons 11 (loop (rest paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons 12 (loop (rest paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons 13 (loop\
    \ (rest paren_string) result)))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons 14 (loop (rest paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons 15 (loop (rest paren_string)\
    \ result)))]\n      [(char=? (", "  (let loop ((paren_string paren_string)\n \
    \            (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (first paren_string) '(())) ; The first character is\
    \ (\n       (loop (rest paren_string) (+ level 1))\n       ]\n      [(equal? (first\
    \ paren_string) '((())) ; The first character is (\n       (loop (rest paren_string)\
    \ (+ level 2))\n       ]\n      [(equal? (first paren_string) '((())) ; The first\
    \ character is (\n       (loop (rest paren_string) (+ level 3))\n       ]\n  \
    \    [(equal? (first paren_string) '((())) ; The first character is (\n      \
    \ (loop (rest paren_string) (+ level 4))\n       ]\n      [(equal? (first paren_string)\
    \ '((())) ; The first character is (\n       (loop (rest paren_string) (+ level\
    \ 5))\n       ]\n      [(equal? (first paren_string) '((())) ; The first character\
    \ is (\n       (loop (rest paren_string) (+ level 6))\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; The first character is (\n       (loop (rest\
    \ paren_string) (+ level 7))\n       ]\n      [(equal? (first paren_string) '((()))\
    \ ; The first character is (\n       (loop (rest paren_string) (+ level 8))\n\
    \       ]\n      [(equal? (first paren_string) '((())) ; The first character is\
    \ (\n       (loop (rest paren_string) (+ level 9))\n       ]\n      [(equal? (first\
    \ paren_string) '((())) ; The first character is (\n       (loop (rest paren_string)\
    \ (+ level 10))\n       ]\n      [(equal? (first paren_string) '((())) ; The first\
    \ character is (\n       (loop (rest paren_string) (+ level 11))\n       ]\n \
    \     [(equal? (first paren_string) '((())) ; The first character is (\n     \
    \  (loop (rest paren_string) (+ level 12))\n       ]\n      [(equal? (first paren_string)\
    \ '((())) ; The first character is (\n       (loop (rest paren_string) (+ level\
    \ 13))\n       ]\n      [(equal? (first paren_string) '((())) ; The first character\
    \ is (\n       (loop (rest paren_string) (+ level 14))\n       ]\n      [(equal?\
    \ (first paren_string) '((())) ; ", "  (let ((levels 0))\n    (cond\n      [(empty?\
    \ paren_string) empty]\n      [(equal? (first paren_string) '(') (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n\
    \      [(equal? (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (add1 levels)]\n      [(equal? (first paren_string) '(#\\Space) (add1 levels)]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count", "  (let loop ((parens (string->list\
    \ paren_string))\n             (level (length parens)))\n    (cond [(empty? parens)\
    \ (list 0)]\n          [(equal? (car parens) '(') (loop (cdr parens) (+ 1 level))]\n\
    \          [(equal? (car parens) ')') (loop (cdr parens) level)]\n          [else\
    \ (loop (cdr parens) level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(())) ; level 0\n       (loop\
    \ (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '((()))\
    \ ; level 1\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '((())()) ; level 2\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '((())()()) ; level 3\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 levels))])))\n", "  (let ((result '()))\n    (loop for i from 0 to (length\
    \ paren_string)\n          for j from 0 to (length paren_string)\n          when\
    \ (char=? (char-code (char paren_string i)) (char-code (char paren_string j)))\
    \ do\n            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list i)))\n            (set! result (append result (list j)))\n\
    \            (set! result (append result (list i)))\n            (set! result\
    \ (append result (list j)))\n            (set! result (append result (list i)))\n\
    \            (set! result (append result (list j)))\n            (set! result\
    \ (append result (list ", "  (let loop ((parens (string->list paren_string))\n\
    \             (level (length parens))\n             (result '()))\n    (if (null?\
    \ parens)\n        result\n        (loop (cdr parens)\n              (- level\
    \ 1)\n              (cons (max level (car parens)) result)))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (max_level 0))\n    (cond\n     \
    \ [(empty? paren_string)\n       (list max_level)]\n      [(equal? (car paren_string)\
    \ '())\n       (loop (cdr paren_string) (+ max_level 1))]\n      [(equal? (car\
    \ paren_string) '(())\n       (loop (cdr paren_string) (+ max_level 2))]\n   \
    \   [(equal? (car paren_string) '((()))\n       (loop (cdr paren_string) (+ max_level\
    \ 3))]\n      [else\n       (loop (cdr paren_string) (+ max_level 1))]\n    )\n\
    \  )\n)\n", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (add1 levels))]\n      [else (loop (cdr paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))\n  (if (= paren_count\
    \ 0) empty\n      (append (list paren_count)\n              (loop (rest paren_string)\
    \ (add1 paren_count)))))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (", "  (let loop ((paren_string paren_string)\n  \
    \           (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '()) empty]\n      [(equal? (car paren_string)\
    \ '(())) (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())())) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())())()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())())()()) (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())())()()()()()()()()()()())\
    \ (incf paren_count)]", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))\n  (if (equal? paren_count\
    \ 0) empty\n      (append (list paren_count)\n              (loop (rest paren_string)\
    \ (add1 paren_count)))))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let ((levels\
    \ ()))\n    (loop\n       for i from 0 to (length paren_string)\n       for char\
    \ from (char-index paren_string i)\n       when (char= char #\\())\n       collect\
    \ (+ 1 (length levels))\n       into levels\n       finally (return levels))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [else\n       (loop\
    \ (rest paren_string) (add1 level))]))))\n", "  (let ((paren_count 0))\n    (let\
    \ loop ((paren_string paren_string)\n               (paren_count 0))\n      (cond\n\
    \        ((null? paren_string)\n         (list paren_count))\n        ((char=\
    \ (first paren_string) '( () ))\n         (loop (rest paren_string)\n        \
    \       (+ 1 paren_count)))\n        (else\n         (loop (rest paren_string)\n\
    \               (+ 1 paren_count)))))) ; else (loop (rest paren_string) ...)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=scheme,racket,lisp |>\n<code>", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(())) ; '(()) has maximum two levels of nesting\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [else\n       (loop (rest paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let ((levels ()))\n    (loop\n       for i from\
    \ 0 to (length paren_string)\n       for char from (char-code (char paren_string\
    \ i))\n       when (char-code (char (char-code paren_string i)) #\\()\n      \
    \ collect (+ 1 (length levels))\n       finally (return levels))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (add1 ",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(char=? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (+ 1 levels))]\n      [(char=? (car paren_string) ')')\n     \
    \  (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (car paren_string) '(') (loop (cdr paren_string) (+ paren_count 1))]\n     \
    \ [(equal? (car paren_string) ')') (loop (cdr paren_string) (- paren_count 1))]\n\
    \      [else (loop (cdr paren_string) (+ paren_count 1))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string) levels]\n      [(equal? (first paren_string) '(') (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ ')')\n       (loop (rest paren_string) (sub1 levels))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (sub1 levels))]\n     \
    \ [else\n       (loop (rest paren_string) (add1 levels))]\n    )\n  )\n)\n", " \
    \ (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let ((levels 0))\n    (let loop ((paren_string paren_string)\n\
    \               (levels levels))\n      (cond ((string=? paren_string \"()\")\n\
    \             (set! levels (+ levels 1)))\n            ((string=? paren_string\
    \ \"()()\")\n             (set! levels (+ levels 2)))\n            ((string=?\
    \ paren_string \"(())\")\n             (set! levels (+ levels 3)))\n         \
    \   (else\n             (set! levels (+ levels 0))\n             (loop (substring\
    \ paren_string 0 (string-length paren_string))\n                  levels))))\n\
    \    (list levels)))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char?\
    \ (car paren_string)) (loop (cdr paren_string) (add1 levels))]\n      [else (loop\
    \ (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n     \
    \  (loop (rest paren_string)\n             (- 1 levels))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string) result]\n      [(char? (car paren_string))\n    \
    \   (loop (cdr paren_string)\n             (cons (char->int (car paren_string))\
    \ result))]\n      [else (loop (cdr paren_string)\n                 (cons (char->int\
    \ (car paren_string)) result))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (if (empty? paren_string)\n        result\n \
    \       (loop (rest paren_string)\n              (cons (length (first paren_string))\
    \ result)))))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (car paren_string)\
    \ '()) empty]\n      [(equal? (car paren_string) '(())) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())()())) (incf paren_count)]\n      [(equal? (car paren_string) '((()()))\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((()())()) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((()())()()) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())) (incf paren_count)]\n      [(equal? (car paren_string) '((())()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((()())) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((()())()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((()())()()) (incf paren_count)]\n      [(equal? (car paren_string) '((())())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())()) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())()()) (incf paren_count)]\n      [(equal? (car paren_string) '((()()))\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())()) (incf paren_count)]\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list paren_count)]\n      [(char= (first paren_string)\
    \ '( () )\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n\
    \      [(char= (first paren_string) '( () )\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(char=\
    \ (first paren_string) '( () )\n       (loop (rest paren_string)\n           \
    \  (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(char= (first\
    \ paren_string) '( () )\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(char= (first paren_string) '( () )\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(char=\
    \ (first paren_string) '( () )\n       (loop (rest paren_string)\n           \
    \  (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(char= (first\
    \ paren_string) '( () )\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(char= (first paren_string) '( () )\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(char=\
    \ (first paren_string) '( () )\n       (loop (rest paren_string)\n           \
    \  (+ paren_count 1))]\n      [(char= (first paren_string) '( () )\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(char= (first\
    \ paren_string) '( () )\n       (loop (rest paren_string)\n             (+ paren_count ",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '()) 1]\n\
    \      [(equal? (car paren_string) '(())) 2]\n      [(equal? (car paren_string)\
    \ '((())) 3]\n      [else (loop (cdr paren_string)\n                 (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (add1 max_level))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (sub1 max_level))]\n      [else (loop (cdr paren_string)\
    \ (max (add1 max_level) (sub1 max_level)))])))\n", "  (let ((result '()))\n  \
    \  (loop\n       for paren_group\n         on paren_string\n         for paren_level\n\
    \         on paren_group\n         until (char-equal? (car paren_group) '(')\n\
    \         collect (if (char-equal? (car paren_group) '(')\n                  \
    \   (+ 1 (parse_nested_parens (cdr paren_string)))\n                     (+ 1\
    \ (parse_deepest_level (cdr paren_string))))\n         into result\n         finally\
    \ (return result))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(equal?\
    \ (first paren_string) '( ()) (loop (rest paren_string) (cons 1 result))]\n  \
    \    [(equal? (first paren_string) '( () ( ()) (loop (rest paren_string) (cons\
    \ 2 result))]\n      [(equal? (first paren_string) '( () ( () ( ()) (loop (rest\
    \ paren_string) (cons 3 result))))]\n      [(equal? (first paren_string) '( ()\
    \ ( () ( () ( ( ())) (loop (rest paren_string) (cons 4 result))))]\n      [(equal?\
    \ (first paren_string) '( () ( () ( () ( () ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\n\
    \                                          (+ paren_count 1)))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string)\n                      \
    \                    (- paren_count 1)))]\n      [else (loop (rest paren_string)\
    \ (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ ')')\n       (loop (rest paren_string)\n             (- paren_count 1))]\n \
    \     [else\n       (loop (rest paren_string)\n             (+ paren_count 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(char? (car paren_string))\n\
    \       (loop (cdr paren_string) (+ 1 levels))]\n      [else\n       (loop (cdr\
    \ paren_string) (+ 1 levels))])))\n", "  (let ((paren_count 0))\n    (let ((paren_levels\
    \ ()))\n      (let ((paren_level (list 1)))\n        (let ((paren_string paren_string))\n\
    \          (cond\n            ((null? paren_string)\n             (reverse paren_levels))\n\
    \            ((char= (first paren_string) '(')\n             (let ((paren_string\
    \ (substring (second paren_string) 1)))\n               (cond\n              \
    \   ((char= (first paren_string) ')')\n                   (set! paren_count (add1\
    \ paren_count))\n                   (set! paren_level (add1 paren_level))\n  \
    \                 (set! paren_levels (add1 paren_levels))\n                  \
    \ (reverse paren_levels))\n                 ((char= (first paren_string) '(')\n\
    \                   (set! paren_count (add1 paren_count))\n                  \
    \ (set! paren_level (add1 paren_level))\n                   (set! paren_levels\
    \ (add1 paren_levels))\n                   (reverse paren_levels))\n         \
    \        ((char= (first paren_string) ')')\n                   (set! paren_count\
    \ (add1 paren_count))\n                   (set! paren_level (add1 paren_level))\n\
    \                   (set! paren_levels (add1 paren_levels))\n                \
    \   (reverse paren_levels))\n                 ((char= (first paren_string) '(')\n\
    \                   (set! paren_count (add1 paren_count))\n                  \
    \ (set! paren_level (add1 paren_level))\n                   (set! paren_levels\
    \ (add1 paren_levels))\n                   (reverse paren_levels))\n         \
    \        ((char= (first paren_string) ')')\n                   (set! paren_count\
    \ (add1 paren_count))\n                   (set! paren_level (add1 paren_level))\n\
    \                   (set! paren_levels (add1 paren_levels))\n                \
    \   (reverse paren_levels))\n                 ((char= (first paren_string) '(')\n\
    \                   (set! paren_count (add1 paren_count))\n                  \
    \ (set! paren_level (add1 paren_level))\n                   (set! paren_levels\
    \ (add1 paren_levels))\n                   (reverse paren_levels))\n         \
    \        ((char= (first paren_string) ')')\n                   (set! paren_count\
    \ (add1 paren_count))\n                   (set! paren_level (add1 paren_level))\n\
    \                   (set! ", "  (let loop ((paren_string paren_string)\n     \
    \        (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [else\n       (loop\
    \ (rest paren_string) (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (car paren_string) '(())) ; found an opening paren\n\
    \       (loop (cdr paren_string) (+ 1 levels))]\n      [(equal? (car paren_string)\
    \ '((())) ; found a closing paren\n       (loop (cdr paren_string) (- 1 levels))]\n\
    \      [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list->string levels)]\n      [(char= (first paren_string)\
    \ '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first\
    \ paren_string) '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n  \
    \    [(char= (first paren_string) '( () ))\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char= (first paren_string) '( () ))\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char= (first paren_string) '( () ))\n\
    \       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first paren_string)\
    \ '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first\
    \ paren_string) '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n  \
    \    [(char= (first paren_string) '( () ))\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char= (first paren_string) '( () ))\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char= (first paren_string) '( () ))\n\
    \       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first paren_string)\
    \ '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first\
    \ paren_string) '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n  \
    \    [(char= (first paren_string) '( () ))\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char= (first paren_string) '( () ))\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char= (first paren_string) '( () ))\n\
    \       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first paren_string)\
    \ '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char= (first\
    \ paren_string) '( () ))\n       (loop (rest paren_string) (+ 1 levels))]\n  \
    \    ", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) levels]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(char? (car paren_string)) (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))\n  (if (zero? paren_count)\n      (list\
    \ 0)\n      (loop (rest paren_string) (add1 paren_count))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ levels))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string) (sub1\
    \ levels))]\n      [else (loop (cdr paren_string) (add1 levels))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list)\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
