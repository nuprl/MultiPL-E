name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
  \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>>\
  \ (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
  \ 0.\n(define (double_the_difference lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
  \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0\
  \ -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
  \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst)\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n      \
    \  [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* (expt (- lst (first\
    \ lst)) 2) (first lst))\n         (* (expt (- lst (first lst)) 2) (second lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (* (first lst) (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (double_the_difference (rest lst)))]\n    [else (+ (first lst)\
    \ (double_the_difference (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* (expt (first lst) 2) (expt (first lst) 2))\n         (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first\
    \ lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (expt (- lst\
    \ (cdr lst)) 2)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n", " \
    \ (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* (expt (first lst)\
    \ 2) (expt (first lst) 2))\n         (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (* (first lst) (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* (expt (- lst (car\
    \ lst)) 2) (expt (car lst) 2))\n         (double_the_difference (cdr lst)))))\n",
  "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n", " \
    \ (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \        [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
