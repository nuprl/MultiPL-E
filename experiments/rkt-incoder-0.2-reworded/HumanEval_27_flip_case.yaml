name: HumanEval_27_flip_case
language: rkt
prompt: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define\
  \ (flip_case string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
  ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
  \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cond [(char=? (char-code string) 97) (char-code (substring\
    \ string 1 0)) #\\A]\n                      [(char=? (char-code string) 65) (char-code\
    \ (substring string 1 0)) #\\a]\n                      [(char=? (char-code string)\
    \ 10) (char-code (substring string 1 0)) #\\0]\n                      [else (cond\
    \ [(char=? (char-code string) 97) (char-code (substring string 1 0)) #\\a]\n \
    \                               [(char=? (char-code string) 65) (char-code (substring\
    \ string 1 0)) #\\A]\n                                [(char=? (char-code string)\
    \ 10) (char-code (substring string 1 0)) #\\0]\n                             \
    \   [else (cond [(char=? (char-code string) 97) (char-code (substring string 1\
    \ 0)) #\\A]\n                                          [(char=? (char-code string)\
    \ 65) (char-code (substring string 1 0)) #\\a]\n                             \
    \             [(char=? (char-code string) 10) (char-code (substring string 1 0))\
    \ #\\0]\n                                          [else (cond [(char=? (char-code\
    \ string) 97) (char-code (substring string 1 0)) #\\a]\n                     \
    \                               [(char=? (char-code string) 65) (char-code (substring\
    \ string 1 0)) #\\A]\n                                                    [(char=?\
    \ (char-code string) 10) (char-code (substring string 1 0)) #\\0]\n          \
    \                                          [else (cond [(char=? (char-code string)\
    \ 97) (char-code (substring string 1 0)) #\\A]\n                             \
    \                                 [(char=? (char-code string) 65) (char-code (substring\
    \ string 1 0)) #\\a]\n                                                       \
    \       [(char=? (char-code string) 10) (char-code (substring string 1 0)) #\\\
    0]\n                                                              [else (cond\
    \ [(char=? (char-code string) 97) (char-code (substring string 1 0)) #\\a]\n \
    \                                                                       [(char=?\
    \ (char-code string) 65) (char-code (substring string 1 0)) #\\A]\n          \
    \                                                              [(char=? (char-code\
    \ string) 10) (char-code (substring string 1 0)) ", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cond [(char=? (char-code string) 97) (char-code\
    \ (substring string 1 0)) #\\A]\n                      [(char=? (char-code string)\
    \ 65) (char-code (substring string 1 0)) #\\a]\n                      [(char=?\
    \ (char-code string) 97) (char-code (substring string 1 0)) #\\Z]\n          \
    \            [(char=? (char-code string) 65) (char-code (substring string 1 0))\
    \ #\\z]\n                      [else (cons string result)])))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))))\n  (helper\
    \ string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (make-string (string-length string)\
    \ ?upper-case) (make-string (string-length string) ?lower-case))]\n    [else (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length ", "  (cond\n\
    \    [(string-empty? string) string]\n    [(equal? (char-code (car string)) #\\\
    A) (make-string (char-code (car string)) #\\Z)]\n    [(equal? (char-code (car\
    \ string)) #\\z) (make-string (char-code (car string)) #\\A)]\n    [else (make-string\
    \ (char-code (car string)) (char-code (car string)) #\\A)]))\n", "  (cond\n  \
    \  [(empty? string) \"\"]\n    [(equal? (first string) (string-ref string 0))\
    \ (string-append (make-string 1 (string->length (first string)) #\\U) (make-string\
    \ 1 (string->length (first string)) #\\l))]\n    [else (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-string\
    \ 1 (string->length (first string)) #\\U) (make-string 1 (string->length (first\
    \ string)) #\\l) (string-append (make-string 1 (string->length (first string))\
    \ #\\U) (make-string 1 (string->length (first string)) #\\l) (string-append (make-",
  "  (define (helper string)\n    (cond\n      [(empty? string) string]\n      [(char-lower?\
    \ (car string)) (char-upcase (car string))]\n      [(char-upper? (car string))\
    \ (char-lowercase (car string))]\n      [else (helper (cdr string))]))\n  (helper\
    \ string))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (string-ref string 1))]))\n",
  "  (define (helper string)\n    (cond [(empty? string) \"\"]\n          [(char-lower?\
    \ (car string)) (helper (cdr string))\n             (cons (char-upper? (car string))\
    \ (helper (cdr string)))]\n          [else (helper (cdr string))]))\n  (helper\
    \ string))\n", "  (define (flip char)\n    (if (char-lower? char)\n        (char-upper?\
    \ char)\n        char))\n  (define (flip_char char)\n    (if (char-upper? char)\n\
    \        (char-lower? char)\n        char))\n  (define (flip_chars chars)\n  \
    \  (map flip chars))\n  (define (flip_chars_helper chars)\n    (if (null? chars)\n\
    \        '()\n        (cons (flip chars) (flip_chars_helper (cdr chars)))))\n\
    \  (define (flip_chars_helper chars)\n    (if (null? chars)\n        '()\n   \
    \     (cons (flip chars) (flip_chars_helper (cdr chars)))))\n  (define (flip_chars\
    \ chars)\n    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (flip_chars chars)\n\
    \    (map flip chars))\n  (define (flip_chars chars)\n    (map flip chars))\n\
    \  (define (flip_chars chars)\n    (map flip chars))\n  (define (f", "  (define\
    \ (helper string result)\n    (if (empty? string)\n        result\n        (helper\
    \ (cdr string) (cons (char->upper-case (car string)) result))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (append\
    \ result (substring string 0 1)\n                         (if (char-lower-case?\
    \ string) string\n                             (char-upper-case? string))))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cond [(char=? (char-code string) 97) (char-code (substring string 0 1))\
    \ (char-code (substring string 1 0))]\n                      [(char=? (char-code\
    \ string) 65) (char-code (substring string 0 1)) (char-code (substring string\
    \ 1 0))]\n                      [(char=? (char-code string) 97) (char-code (substring\
    \ string 0 1)) (char-code (substring string 1 0))]\n                      [(char=?\
    \ (char-code string) 65) (char-code (substring string 0 1)) (char-code (substring\
    \ string 1 0))]\n                      [(char=? (char-code string) 97) (char-code\
    \ (substring string 0 1)) (char-code (substring string 1 0))]\n              \
    \        [(char=? (char-code string) 65) (char-code (substring string 0 1)) (char-code\
    \ (substring string 1 0))]\n                      [(char=? (char-code string)\
    \ 97) (char-code (substring string 0 1)) (char-code (substring string 1 0))]\n\
    \                      [(char=? (char-code string) 65) (char-code (substring string\
    \ 0 1)) (char-code (substring string 1 0))]\n                      [(char=? (char-code\
    \ string) 97) (char-code (substring string 0 1)) (char-code (substring string\
    \ 1 0))]\n                      [(char=? (char-code string) 65) (char-code (substring\
    \ string 0 1)) (char-code (substring string 1 0))]\n                      [(char=?\
    \ (char-code string) 97) (char-code (substring string 0 1)) (char-code (substring\
    \ string 1 0))]\n                      [(char=? (char-code string) 65) (char-code\
    \ (substring string 0 1)) (char-code (substring string 1 0))]\n              \
    \        [(char=? (char-code string) 97) (char-code (substring string 0 1)) (char-code\
    \ (substring string 1 0))]\n                      [(char=? (char-code string)\
    \ 65) (char-code (substring string 0 1)) (char-code (substring string 1 0))]\n\
    \                      [(char=? (char-code string) 97) (char-code (substring string\
    \ 0 1)) (char", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length(string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (define (flip char)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_char char)\n    (if (char-upper?\
    \ char)\n        (char-lower? char) \n        (char-upper? char)))\n  (define\
    \ (flip_char char flip)\n    (if (flip char)\n        (char-upper? char) \n  \
    \      (char-lower? char)))\n  (define (flip_char char flip flip)\n    (if (flip\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_char char flip flip flip)\n    (if (flip char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_char char flip flip flip flip)\n\
    \    (if (flip char)\n        (char-upper? char) \n        (char-lower? char)))\n\
    \  (define (flip_char char flip flip flip flip flip)\n    (if (flip char)\n  \
    \      (char-upper? char) \n        (char-lower? char)))\n  (define (flip_char\
    \ char flip flip flip flip flip flip)\n    (if (flip char)\n        (char-upper?\
    \ char) \n        (char-lower? char)))\n  (define (flip_char char flip flip flip\
    \ flip flip flip flip)\n    (if (flip char)\n        (char-upper? char) \n   \
    \     (char-lower? char)))\n  (define (flip_char char flip flip flip flip flip\
    \ flip flip flip)\n    (if (flip char)\n        (char-upper? char) \n        (char-lower?\
    \ char)))\n  (define (flip_char char flip flip flip flip flip flip flip flip)\n\
    \    (if (flip char)\n        (char-upper? char) \n        (char-lower? char)))\n\
    \  (define (flip_char char flip flip flip flip flip flip flip flip flip)\n   \
    \ (if (flip char)\n        (char-upper? char) \n        (char-lower? char)))\n\
    \  (define (flip_char char flip flip flip flip flip flip flip flip flip flip)\n\
    \    (if (flip char)\n        (char-upper? char) \n        (", "  (define (flip\
    \ char)\n    (cond\n      [(char < 'a) (char + 26)]\n      [(char > 'Z') (char\
    \ - 26)]\n      [else char]))\n  (define (flip_char char)\n    (cond\n      [(char\
    \ < 'a) (char + 26)]\n      [(char > 'Z') (char - 26)]\n      [else char]))\n\
    \  (define (flip_string str)\n    (cond\n      [(string? str) (map flip str)]\n\
    \      [else str]))\n  (define (flip_char char)\n    (cond\n      [(char < 'a)\
    \ (char + 26)]\n      [(char > 'Z') (char - 26)]\n      [else char]))\n  (define\
    \ (flip_char char)\n    (cond\n      [(char < 'a) (char + 26)]\n      [(char >\
    \ 'Z') (char - 26)]\n      [else char]))\n  (define (flip_char char)\n    (cond\n\
    \      [(char < 'a) (char + 26)]\n      [(char > 'Z') (char - 26)]\n      [else\
    \ char]))\n  (define (flip_char char)\n    (cond\n      [(char < 'a) (char + 26)]\n\
    \      [(char > 'Z') (char - 26)]\n      [else char]))\n  (define (flip_char char)\n\
    \    (cond\n      [(char < 'a) (char + 26)]\n      [(char > 'Z') (char - 26)]\n\
    \      [else char]))\n  (define (flip_char char)\n    (cond\n      [(char < 'a)\
    \ (char + 26)]\n      [(char > 'Z') (char - 26)]\n      [else char]))\n  (define\
    \ (flip_char char)\n    (cond\n      [(char < 'a) (char + 26)]\n      [(char >\
    \ 'Z') (char - 26)]\n      [else char]))\n  (define (flip_char char)\n    (cond\n\
    \      [(char < 'a) (char + 26)]\n      [(char > 'Z') (char - 26)]\n      [else\
    \ char]))\n  (define (flip_char char)\n    (cond\n      [(char < 'a) (char + 26)]\n\
    \      [(char > 'Z') (char - 26)]\n      [else char]))\n  (define (flip_char char)\n\
    \    (cond\n      [(char < 'a) (char + 26)]\n      [(char > 'Z') (char - 26)]\n\
    \      [else char]))\n  (define (flip_", "  (define (helper string)\n    (cond\n\
    \      [(empty? string) string]\n      [(char-lower? (car string)) (string-append\
    \ (char-upcase (car string)) (string-append (char-downcase (car string)) (helper\
    \ (cdr string))))]\n      [(char-upper? (car string)) (string-append (char-downcase\
    \ (car string)) (string-append (char-upcase (car string)) (helper (cdr string))))]\n\
    \      [else (string-append (car string) (string-append (char-downcase (car string))\
    \ (helper (cdr string))))]))\n  (helper string))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (string-append (substring string 0 1) (substring\
    \ string 1 string)))\n               (helper (substring string 1 string) result\
    \ (substring string 0 1)))))\n  (helper string '()))\n", "  (define (flip_case-helper\
    \ char str)\n    (if (char-lower? (char-code str))\n        (char-upper? (char-code\
    \ str))\n        (char-code str)))\n  (define (flip_case-helper str char)\n  \
    \  (if (char-lower? (char-code str))\n        (char-upper? (char-code str))\n\
    \        (char-code str)))\n  (define (flip_case-helper str char str)\n    (if\
    \ (char-lower? (char-code str))\n        (char-upper? (char-code str))\n     \
    \   (char-code str)))\n  (define (flip_case-helper str char str)\n    (if (char-lower?\
    \ (char-code str))\n        (char-upper? (char-code str))\n        (char-code\
    \ str)))\n  (define (flip_case-helper str char str)\n    (if (char-lower? (char-code\
    \ str))\n        (char-upper? (char-code str))\n        (char-code str)))\n  (define\
    \ (flip_case-helper str char str)\n    (if (char-lower? (char-code str))\n   \
    \     (char-upper? (char-code str))\n        (char-code str)))\n  (define (flip_case-helper\
    \ str char str)\n    (if (char-lower? (char-code str))\n        (char-upper? (char-code\
    \ str))\n        (char-code str)))\n  (define (flip_case-helper str char str)\n\
    \    (if (char-lower? (char-code str))\n        (char-upper? (char-code str))\n\
    \        (char-code str)))\n  (define (flip_case-helper str char str)\n    (if\
    \ (char-lower? (char-code str))\n        (char-upper? (char-code str))\n     \
    \   (char-code str)))\n  (define (flip_case-helper str char str)\n    (if (char-lower?\
    \ (char-code str))\n        (char-upper? (char-code str))\n        (char-code\
    \ str)))\n  (define (flip_case-helper str char str)\n    (if (char-lower? (char-code\
    \ str))\n        (char-upper? (char-code str))\n        (char-code str)))\n  (define\
    \ (flip_case-helper str char str)\n    (if (char-lower? (char-code str))\n   \
    \     (char-upper? (char-code str))\n        (char-code str)))\n  (define (flip_case-helper\
    \ str char "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
