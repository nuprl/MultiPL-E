name: HumanEval_35_max_element
language: rkt
prompt: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
  \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
  ;; 123\n(define (max_element l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
  \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
  \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
completions: ["  (if (null? l)\n      (error \"max_element: empty list\")\n      (let\
    \ ([m (first l)]\n            [l (rest l)])\n        (if (< m (first l))\n   \
    \         (max_element l)\n            (max_element l)))))\n", "  (if (null? l)\n\
    \      (error \"max_element: empty list\")\n      (let ((m (car l)))\n       \
    \ (if (> (car l) m)\n            (max_element (cdr l))\n            (max_element\
    \ (cdr l)))))\n", "  (if (null? l)\n      '()\n      (if (< (car l) (cadr l))\n\
    \          (cadr l)\n          (max_element (cdr l)))))\n", "  (if (null? l)\n\
    \      '()\n      (let ((m (car l)))\n        (if (> (car l) m)\n            (max_element\
    \ (cdr l))\n            (cons m (max_element (cdr l)))))))\n", "  (cond\n    [(empty?\
    \ l) empty]\n    [(> (first l) (first l)) (first l)]\n    [else (max_element (rest\
    \ l))]))\n", "  (cond\n    ((null? l) '())\n    ((< (car l) (cadr l)) (max_element\
    \ (cdr l)))\n    (else (max_element (cdr l)))))\n", "  (if (null? l)\n      null\n\
    \      (let ((m (car l)))\n        (if (> (car l) m)\n            (max_element\
    \ (cdr l))\n            m))))\n", "  (cond\n    [(empty? l) empty]\n    [(> (first\
    \ l) (first l)) (first l)]\n    [else (max_element (rest l))]))\n", "  (if (null?\
    \ l)\n      (error \"~a is not a list\" l)\n      (let ([m (first l)]\n      \
    \      [max (first l)])\n        (if (> m max)\n            (max_element (rest\
    \ l))\n            (max_element (rest l)))))\n", "  (if (null? l)\n      null\n\
    \      (max (car l) (max_element (cdr l)))))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(> (first l) (first l)) (first l)]\n    [else (max_element (rest l))]))\n",
  "  (if (null? l)\n      null\n      (if (< (car l) (cadr l))\n          (cadr l)\n\
    \          (max_element (cdr l)))))\n", "  (if (null? l)\n      '()\n      (let\
    \ ((max (car l)))\n        (if (> (car l) max)\n            (max_element (cdr\
    \ l))\n            (max_element (cdr l)))))\n  )\n", "  (if (null? l)\n      '()\n\
    \      (let ((m (car l)))\n        (if (> (car l) m)\n            (max_element\
    \ (cdr l))\n            (max_element (cdr l)))))\n", "  (if (null? l)\n      null\n\
    \      (let ((m (car l)))\n        (if (> (car l) m)\n            (max_element\
    \ (cdr l))\n            m))))\n", "  (if (null? l)\n      null\n      (if (< (car\
    \ l) (cadr l))\n          (cadr l)\n          (max_element (cdr l)))))\n", " \
    \ (if (null? l)\n      (error \"max_element: empty list\")\n      (let ((x (car\
    \ l)))\n        (if (< (car l) x)\n            (max_element (cdr l))\n       \
    \     (max_element (cdr l)))))\n", "  (cond\n    ((null? l) '())\n    ((< (car\
    \ l) (cadr l)) (max_element (cdr l)))\n    (else (max_element (cdr l)))))\n",
  "  (if (null? l)\n      null\n      (max (car l) (max_element (cdr l)))))\n", " \
    \ (if (null? l)\n      (error \"~a is not an element\" l)\n      (let ([m (first\
    \ l)]\n            [max (max_element (rest l))])\n        (if (< m max)\n    \
    \        max\n            m))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
