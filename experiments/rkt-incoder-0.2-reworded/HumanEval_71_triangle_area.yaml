name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< a b) (* -1 -1)]\n    [(< b c) (* -1 -1)]\n    [(<\
    \ c a) (* -1 -1)]\n    [else (* -1 (/ (+ (* a b) (* b c)) (* a c)))]))\n", " \
    \ (cond\n    [(or (= a b) (= a c)) (* a b)]\n    [(or (= b c) (= b a)) (* b c)]\n\
    \    [(or (= c a) (= c b)) (* c a)]\n    [else -1]))\n", "  (cond\n    [(< a b)\
    \ (/ a b)]\n    [(< b c) (/ b c)]\n    [(< c a) (/ c a)]\n    [else (/ a b)]))\n",
  "  (if (> (+ a b c) a)\n      (* a b c)\n      (* a c b)\n      (* b c a)))\n",
  "  (cond\n    [(< a b) (/ -1 2)]\n    [(< b c) (/ -1 2)]\n    [(< c a) (/ -1 2)]\n\
    \    [else (/ -1 2)]))\n", "  (if (< (+ a b) (+ c a))\n      (/ a b)\n      (/\
    \ c a)))\n", "  (cond\n    [(< a b) (/ -1 3)]\n    [(< b c) (/ -1 3)]\n    [(<\
    \ c a) (/ -1 3)]\n    [else (/ -1 4)]))\n", "  (cond\n    [(= a b) (* a c)]\n\
    \    [(= b c) (* b a)]\n    [(< a b) (* a c)]\n    [(< b c) (* b a)]\n    [else\
    \ (* a b)]))\n", "  (cond\n    [(< a b) (/ a b)]\n    [(< b c) (/ b c)]\n    [(<\
    \ c a) (/ c a)]\n    [else (/ a b)]))\n", "  (if (> (+ a b c) (+ b c a))\n   \
    \   (round (/ (+ a b c) (+ b c a))) \n      -1))\n", "  (cond\n    [(< a b) (/\
    \ a b)]\n    [(< b c) (/ b c)]\n    [(< c a) (/ c a)]\n    [else (/ a b)]))\n",
  "  (if (> (+ a b c) (+ b c a))\n      (round (/ (+ a b c) (+ b c a))) \n      -1))\n",
  "  (if (> (+ a b c) (+ b c a))\n      (round (* a b c))\n      (round (* b c a))))\n",
  "  (if (> (+ a b c) (+ b c a))\n      (/ a 2)\n      (/ b 2)\n      (/ c 2)))\n",
  "  (cond\n    [(< a b) (/ a b)]\n    [(< b c) (/ b c)]\n    [(< c a) (/ c a)]\n\
    \    [else (/ a b)]))\n", "  (cond\n    [(< a b) (/ a b)]\n    [(< b c) (/ b c)]\n\
    \    [(< c a) (/ c a)]\n    [else (/ a b)]))\n", "  (cond\n    [(<= a b c) (*\
    \ a b c)]\n    [(<= b c a) (* b c a)]\n    [(<= c a b) (* c a b)]))\n", "  (cond\n\
    \    [(< a b) (* -1 -1)]\n    [(< b c) (* -1 -1)]\n    [(< c a) (* -1 -1)]\n \
    \   [else (* -1 (/ (+ (* a b) (* b c) (* c a)) 2))]))\n", "  (cond\n    [(< a\
    \ b) (/ a b)]\n    [(< b c) (/ b c)]\n    [(< c a) (/ c a)]\n    [else (/ a b)]))\n",
  "  (cond\n    [(<= a b c) (/ a b)\n     (/ a c)\n     (/ b c)]\n    [else -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
