name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
  \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
  ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (append (list (car lst))\n    \
    \          (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n      '()\n\
    \      (append (sort (first lst) '<)\n              (strange_sort_list (rest lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (let loop ((lst lst)\n\
    \             (result '()))\n    (if (null? lst)\n        result\n        (loop\
    \ (cdr lst)\n              (cons (car lst)\n                    (loop (cdr lst)\n\
    \                          result))))))\n", "  (let loop ((lst lst)\n        \
    \     (result '()))\n    (if (null? lst)\n        result\n        (loop (cdr lst)\n\
    \              (cons (car lst)\n                    (loop (cdr lst)\n        \
    \                  result))))))\n", "  (if (null? lst)\n      '()\n      (let\
    \ ([head (car lst)])\n        (strange_sort_list (cdr lst))\n        (cons head\
    \ (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (list (car lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (list (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (list\
    \ (car lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n             \
    \ (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car\
    \ lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n\
    \      lst\n      (let ((min (car lst))\n            (max (car lst)))\n      \
    \  (if (< min max)\n            (cons (strange_sort_list (cdr lst))\n        \
    \          (strange_sort_list (list (max min) max))\n                  (strange_sort_list\
    \ (list (min max) min))))\n        (cons (strange_sort_list (cdr lst))\n     \
    \         (strange_sort_list (list (max min) max))\n              (strange_sort_list\
    \ (list (min max) min))))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      (list)\n      (let ([minval (first\
    \ lst)\n             maxval (rest lst)])\n        (if (< minval maxval)\n    \
    \        (cons (first lst)\n                  (strange_sort_list (rest lst)))\n\
    \            (cons (first lst)\n                  (strange_sort_list (rest lst)\n\
    \                                     (cons (first lst) maxval)))))))\n", "  (if\
    \ (null? lst)\n      lst\n      (let ([min (car lst)]\n            [max (cdr lst)]\n\
    \            [min (car lst)]\n            [max (cdr lst)])\n        (if (< min\
    \ max)\n            (strange_sort_list (cons min max))\n            (strange_sort_list\
    \ (cons max min))\n            (strange_sort_list (cons min max))\n          \
    \  (strange_sort_list (cons max min))\n            (strange_sort_list (cons min\
    \ max))\n            (strange_sort_list (cons max min))\n            (strange_sort_list\
    \ (cons min max))\n            (strange_sort_list (cons max min))\n          \
    \  (strange_sort_list (cons min max))\n            (strange_sort_list (cons max\
    \ min))\n            (strange_sort_list (cons min max))\n            (strange_sort_list\
    \ (cons max min))\n            (strange_sort_list (cons min max))\n          \
    \  (strange_sort_list (cons max min))\n            (strange_sort_list (cons min\
    \ max))\n            (strange_sort_list (cons max min))\n            (strange_sort_list\
    \ (cons min max))\n            (strange_sort_list (cons max min))\n          \
    \  (strange_sort_list (cons min max))\n            (strange_sort_list (cons max\
    \ min))\n            (strange_sort_list (cons min max))\n            (strange_sort_list\
    \ (cons max min))\n            (strange_sort_list (cons min max))\n          \
    \  (strange_sort_list (cons max min))\n            (strange_sort_list (cons min\
    \ max))\n            (strange_sort_list (cons max min))\n            (strange_sort_list\
    \ (cons min max))\n            (strange_sort_list (cons max min))\n          \
    \  (strange_sort_list (cons min max))\n            (strange_sort_list (cons max\
    \ min))\n            (strange_sort_list (cons min max))\n            (strange_sort_list\
    \ (cons max min))\n            (strange_sort_list (cons min max))\n          \
    \  (strange_sort_list (cons max min))\n            (strange_sort_list (cons min\
    \ max))\n            (strange_sort_list (cons max min))\n            (strange_sort_list\
    \ (cons min max))\n            (strange_sort_list (cons max min))\n          \
    \  (strange_sort_list (cons ", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (sub1 lst))\n              (list (car lst))\n              (strange_sort_list\
    \ (sub1 lst))))) ;; #lang racket\n", "  (if (null? lst)\n      '()\n      (append\
    \ (strange_sort_list (sub1 lst))\n              (list (car lst))\n           \
    \   (strange_sort_list (sub1 lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
