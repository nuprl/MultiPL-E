name: HumanEval_29_filter_by_prefix
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;;\
  \ >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list\
  \ \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix)\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n        [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n    [(empty?\
    \ strings) '()]\n    [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (str)\n            (string-starts-with? str prefix))\n      \
    \    strings))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (str)\n            (string-match\
    \ prefix str))\n          strings))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) '()]\n    [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) empty]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (string-starts-with x prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (if (null? strings)\n      '()\n      (if (string=? (car strings) prefix)\n \
    \         (cons (car strings) (filter_by_prefix (cdr strings) prefix))\n     \
    \     (filter_by_prefix (cdr strings) prefix))))\n", "  (cond [(empty? strings)\
    \ empty]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (if (null? strings)\n      '()\n      (if (string-prefix?\
    \ prefix strings)\n          (cons strings (filter_by_prefix (cdr strings) prefix))\n\
    \          (filter_by_prefix (cdr strings) prefix))))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n        [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (if\
    \ (null? strings)\n      '()\n      (if (string=? prefix \"\")\n          (list\
    \ strings)\n          (cons (string=? prefix (car strings)) (filter_by_prefix\
    \ (cdr strings) prefix)))))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) empty]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (if\
    \ (null? strings)\n      '()\n      (if (string-starts-with? prefix strings)\n\
    \          (cons strings (filter_by_prefix (cdr strings) prefix))\n          (cons\
    \ (car strings) (filter_by_prefix (cdr strings) prefix)))))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (filter_by_prefix (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (if (null? strings)\n\
    \      '()\n      (if (string-prefix? (car strings) prefix)\n          (cons (car\
    \ strings) (filter_by_prefix (cdr strings) prefix))\n          (filter_by_prefix\
    \ (cdr strings) prefix))))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n\
    \    [(empty? strings) empty]\n    [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ '()]\n        [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n    [(empty?\
    \ strings) empty]\n    [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n        [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n    [(empty?\
    \ strings) '()]\n    [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (x) (equal? (string-ref x 0)\
    \ prefix)) strings))\n", "  (if (null? strings)\n      '()\n      (if (string-prefix?\
    \ prefix strings)\n          (cons strings (filter_by_prefix (cdr strings) prefix))\n\
    \          (cons (car strings) (filter_by_prefix (cdr strings) prefix))))))\n",
  "  (filter (lambda (str)\n            (string-match prefix str))\n          strings))\n",
  "  (filter (lambda (x) (equal? (substring x 0) prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ '()]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (string-prefix-p x prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) '()]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (cons (first strings)\n                    (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (filter (lambda (x) (string-prefix-p x prefix))\
    \ strings))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first strings)\
    \ prefix) (filter_by_prefix (rest strings) prefix)]\n        [else (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (if (null? strings)\n\
    \      '()\n      (if (string-starts-with? prefix strings)\n          (cons strings\
    \ (filter_by_prefix (cdr strings) prefix))\n          (cons (car strings) (filter_by_prefix\
    \ (cdr strings) prefix)))))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) empty]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) empty]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n        [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) empty]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (filter (lambda (x) (string-prefix? x prefix)) strings))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix (rest\
    \ strings) prefix)]\n    [else (cons (first strings)\n               (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n        [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n        [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (if (null? strings)\n\
    \      strings\n      (if (string=? prefix \"\")\n          strings\n        \
    \  (if (string=? (first strings) prefix)\n              (cons (first strings)\
    \ (filter_by_prefix (rest strings) prefix))\n              (filter_by_prefix (rest\
    \ strings) prefix))))))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) empty]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n    [else (cons (first\
    \ strings)\n                (filter_by_prefix (rest strings) prefix))]))\n", " \
    \ (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (x) (equal? (substring x 0\
    \ length) prefix)) strings))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (if (null? strings)\n   \
    \   strings\n      (if (string-prefix? (car strings) prefix)\n          (cons\
    \ (car strings) (filter_by_prefix (cdr strings) prefix))\n          (filter_by_prefix\
    \ (cdr strings) prefix))))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings)\n                (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (filter (lambda (str)\n            (string-match\
    \ prefix str))\n          strings))\n", "  (cond [(empty? strings) '()]\n    \
    \    [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (if (null? strings)\n      strings\n      (if (string-prefix? prefix strings)\n\
    \          (cons strings (filter_by_prefix (cdr strings) prefix))\n          (filter_by_prefix\
    \ (cdr strings) prefix))))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n    [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) empty]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) empty]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (s) (starts-with? s prefix))\
    \ strings))\n", "  (cond [(empty? strings) '()]\n        [(equal? (first strings)\
    \ prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix (rest\
    \ strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (if (null? strings)\n      '()\n      (if (string-starts-with?\
    \ prefix strings)\n          (cons strings (filter_by_prefix (cdr strings) prefix))\n\
    \          (cons (car strings) (filter_by_prefix (cdr strings) prefix)))))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (x) (equal? (substring x 0)\
    \ prefix)) strings))\n", "  (cond [(empty? strings) empty]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (cons (first\
    \ strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) '()]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n\
    \    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (if (null? strings)\n      strings\n      (if\
    \ (string=? (car strings) prefix)\n          (cons (car strings) (filter_by_prefix\
    \ (cdr strings) prefix))\n          (filter_by_prefix (cdr strings) prefix))))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (if (null? strings)\n\
    \      '()\n      (if (string=? prefix \"\")\n          strings\n          (cons\
    \ (car strings)\n                (filter_by_prefix (cdr strings) prefix)))))\n",
  "  (cond [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n    [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) empty]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
