name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\\
    Y #\\Z)) (cons (char->string (char->integer (char->integer s))) \n           \
    \                     (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n               \
    \             [(char->integer? (car s)) (cond \n                             \
    \                       [(char->integer? (char->integer? (car s))) (cond \n  \
    \                                                                            \
    \            [(char->integer? (char->integer? (char->integer? (car s))))\n   \
    \                                                                            \
    \            (char->integer? (char->integer? (char->integer? (char->integer? (car\
    \ s)))))]\n                                                    [(char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s)))))\n              \
    \                                                   (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))]\n            \
    \                                        [(char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))\n             \
    \                                                    (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))]\n\
    \                                                    [(char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (car s))))))\n                                                             \
    \    (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (car s))))))]\n                            \
    \                        [(char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))))\n\
    \                                                                 (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (car s))))))))])]\n                        \
    \    [(char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))))\n           \
    \                  (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))))])]\n\
    \                            [(char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (car s))))))))\n                             (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ (lambda (c) (if (char->string c) \n                                       (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                           (char->string (char->string\
    \ c) \n                                             (char->string (char->string\
    \ c) \n                                               (char->string (char->string\
    \ c) \n                                                 (char->string (char->string\
    \ c) \n                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (second\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n \
    \   [else (cons (first s) (solve (sub1 s)))]))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons\
    \ (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper\
    \ (car s)) (reverse (solve (cdr s))))]\n    [else (cons (car s) (solve (cdr s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let* ([letter (first s)]\
    \ [(upper-case letter) (lower-case letter)])\n                      (cond\n  \
    \                      [(empty? letter) (solve (rest s))]\n                  \
    \      [(not (empty? letter)) (cons (first letter) (solve (rest s)))]\n      \
    \                  [else (cons (first letter) (solve (rest s)))]))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nThanks for your answer. Can you please explain what does `(let* ([letter\
    \ (first s)] [(upper-case letter) (lower-case letter)])` do?\n<|/ c |>\n<| c |>\n\
    `(let* ([letter (first s)] [(upper-case letter) (lower-case letter)])` creates\
    \ a new variable `letter` that is bound to the first element of the list `s`.\
    \ Then `(upper-case letter)` returns the first element of the list `letter` but\
    \ in upper case. `(lower-case letter)` does the same but in lower case. `(cons\
    \ (first letter) (solve (rest s)))` adds the result of the recursive call to the\
    \ list `letter`.\n<|/ c |>\n<| c |>\nThanks a lot. Can you please explain what\
    \ does `(let* ([letter (first s)] [(upper-case letter) (lower-case letter)])`\
    \ do?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<|\
    \ a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n", "  (cond\n\
    \    [(empty? s) s]\n    [(char? (car s)) (cond\n                       [(char?\
    \ (car s)) (cond\n                                         [(char? (car s)) (cond\n\
    \                                                           [(char? (car s)) (cond\n\
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \              [(char? (car s)) (cond\n                                      \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \ [(char? (car s)) (cond\n                                                   \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          ", "  (cond\n    [(empty?\
    \ s) s]\n    [(letter? (first s)) (cond\n                            [(upper?\
    \ (first s)) (cond\n                                                [(lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\\
    Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond [(empty?\
    \ s) s]\n        [(equal? (first s) (first s)) (second s)]\n        [else (cons\
    \ (first s)\n                    (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \              #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A\
    \ #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n      \
    \                              #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                              [(equal? (first s) #\\a) (cond\n              \
    \                                                                 [(equal? (first\
    \ s) #\\A) (cond\n                                                           \
    \                                     [(equal? (first s) #\\b) (cond\n       \
    \                                                                            \
    \                [(equal? (first s) #\\B) (cond\n                            \
    \                                                                        [(equal?\
    \ (first s) #\\c) (cond\n                                                    \
    \                                                   [(equal? (first s) #\\C) (cond\n\
    \                                                                            \
    \                            [(equal? (first s) #\\d) (cond\n                \
    \                                                                            \
    \               [(equal? (first s) #\\D) (cond\n                             \
    \                                                                            \
    \     [(equal? (first s) #\\e) (cond\n                                       \
    \                                                                          [(equal?\
    \ (first s) #\\E) (cond\n                                                    \
    \                                                               [(equal? (first\
    \ s) #\\f) (cond\n                                                           \
    \                                                          [(equal? (first s)\
    \ #\\F) (cond\n                                                              \
    \                                                         [(equal? (first s) #\\\
    g) (cond\n                                                                   \
    \                                                      [(equal? (first s) #\\\
    G) (cond\n                                                                   \
    \                                                        [(equal? (first s) #\\\
    h) (cond\n                                                                   \
    \                                                          [(equal? (first s)\
    \ #\\H) (cond\n                                                              \
    \                                                                 [(equal? (first\
    \ s) #\\i) (cond\n                                                           \
    \                                                                        [(equal?\
    \ (first s) #\\I) (cond\n                                                    \
    \                                                                            \
    \     [(equal? (first s) #\\j) (cond\n                                       \
    \                                                                            \
    \                    [(equal? (first s) #\\J) (cond\n                        \
    \                                                                            \
    \                                   [(equal? (first s) #\\k) (cond\n         \
    \                                                                            \
    \                                                    [(equal? (first s) #\\K)\
    \ (cond\n                                                                    \
    \                                                                       [(equal?\
    \ (first s) #\\l) (cond\n                                                    \
    \                                                                            \
    \             [(equal? (first s) #\\L) (cond\n                               \
    \                                                                            \
    \                                    [(equal? (first s) #\\n) (cond\n        \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) #\\N) (cond\n                                                           \
    \                                                                            \
    \            [(equal? (first s) #\\o) (cond\n                                \
    \                                                                            \
    \                                         [(equal? (first s) #\\O) (cond\n   \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) #\\p) (cond\n                                                    \
    \                                                                            \
    \                         [(equal? (first s) #\\P) (cond\n                   \
    \                                                                            \
    \                                                            [(equal? (first s)\
    \ #\\q) (cond\n                                                              \
    \                                                                            \
    \                   [(equal? (first s) #\\Q) (cond\n                         \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ #\\r) (cond\n                                                              \
    \                                                                            \
    \                       [(equal? (first s) #\\R) (cond\n                     \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) #\\s) (cond\n                                                           \
    \                                                                            \
    \                              [(equal? (first s) #\\S) (cond", "  (cond\n   \
    \ [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
