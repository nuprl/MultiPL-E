name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\\
    Y #\\Z)) (cons (char->string (char->integer (char->integer s))) \n           \
    \                     (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n               \
    \             [(char->integer? (car s)) (cond \n                             \
    \                       [(char->integer? (char->integer? (car s))) (cond \n  \
    \                                                                            \
    \            [(char->integer? (char->integer? (char->integer? (car s))))\n   \
    \                                                                            \
    \            (char->integer? (char->integer? (char->integer? (char->integer? (car\
    \ s)))))]\n                                                    [(char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s)))))\n              \
    \                                                   (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))]\n            \
    \                                        [(char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))\n             \
    \                                                    (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))]\n\
    \                                                    [(char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (car s))))))\n                                                             \
    \    (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (car s))))))]\n                            \
    \                        [(char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))))\n\
    \                                                                 (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (car s))))))))])]\n                        \
    \    [(char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (car s))))))))\n           \
    \                  (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (car s))))))))])]\n\
    \                            [(char->integer? (char->integer? (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char->integer?\
    \ (char->integer? (car s))))))))\n                             (char->integer?\
    \ (char->integer? (char->integer? (char->integer? (char->integer? (char", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ (lambda (c) (if (char->string c) \n                                       (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                           (char->string (char->string\
    \ c) \n                                             (char->string (char->string\
    \ c) \n                                               (char->string (char->string\
    \ c) \n                                                 (char->string (char->string\
    \ c) \n                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (second\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n \
    \   [else (cons (first s) (solve (sub1 s)))]))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons\
    \ (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper\
    \ (car s)) (reverse (solve (cdr s))))]\n    [else (cons (car s) (solve (cdr s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let* ([letter (first s)]\
    \ [(upper-case letter) (lower-case letter)])\n                      (cond\n  \
    \                      [(empty? letter) (solve (rest s))]\n                  \
    \      [(not (empty? letter)) (cons (first letter) (solve (rest s)))]\n      \
    \                  [else (cons (first letter) (solve (rest s)))]))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nThanks for your answer. Can you please explain what does `(let* ([letter\
    \ (first s)] [(upper-case letter) (lower-case letter)])` do?\n<|/ c |>\n<| c |>\n\
    `(let* ([letter (first s)] [(upper-case letter) (lower-case letter)])` creates\
    \ a new variable `letter` that is bound to the first element of the list `s`.\
    \ Then `(upper-case letter)` returns the first element of the list `letter` but\
    \ in upper case. `(lower-case letter)` does the same but in lower case. `(cons\
    \ (first letter) (solve (rest s)))` adds the result of the recursive call to the\
    \ list `letter`.\n<|/ c |>\n<| c |>\nThanks a lot. Can you please explain what\
    \ does `(let* ([letter (first s)] [(upper-case letter) (lower-case letter)])`\
    \ do?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<|\
    \ a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n", "  (cond\n\
    \    [(empty? s) s]\n    [(char? (car s)) (cond\n                       [(char?\
    \ (car s)) (cond\n                                         [(char? (car s)) (cond\n\
    \                                                           [(char? (car s)) (cond\n\
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \              [(char? (car s)) (cond\n                                      \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \ [(char? (car s)) (cond\n                                                   \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          ", "  (cond\n    [(empty?\
    \ s) s]\n    [(letter? (first s)) (cond\n                            [(upper?\
    \ (first s)) (cond\n                                                [(lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (first\
    \ s)) (first s)\n                                                  (upper? (first\
    \ s)) (first s)\n                                                  (lower? (",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\\
    Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond [(empty?\
    \ s) s]\n        [(equal? (first s) (first s)) (second s)]\n        [else (cons\
    \ (first s)\n                    (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \              #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A\
    \ #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n      \
    \                              #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                              [(equal? (first s) #\\a) (cond\n              \
    \                                                                 [(equal? (first\
    \ s) #\\A) (cond\n                                                           \
    \                                     [(equal? (first s) #\\b) (cond\n       \
    \                                                                            \
    \                [(equal? (first s) #\\B) (cond\n                            \
    \                                                                        [(equal?\
    \ (first s) #\\c) (cond\n                                                    \
    \                                                   [(equal? (first s) #\\C) (cond\n\
    \                                                                            \
    \                            [(equal? (first s) #\\d) (cond\n                \
    \                                                                            \
    \               [(equal? (first s) #\\D) (cond\n                             \
    \                                                                            \
    \     [(equal? (first s) #\\e) (cond\n                                       \
    \                                                                          [(equal?\
    \ (first s) #\\E) (cond\n                                                    \
    \                                                               [(equal? (first\
    \ s) #\\f) (cond\n                                                           \
    \                                                          [(equal? (first s)\
    \ #\\F) (cond\n                                                              \
    \                                                         [(equal? (first s) #\\\
    g) (cond\n                                                                   \
    \                                                      [(equal? (first s) #\\\
    G) (cond\n                                                                   \
    \                                                        [(equal? (first s) #\\\
    h) (cond\n                                                                   \
    \                                                          [(equal? (first s)\
    \ #\\H) (cond\n                                                              \
    \                                                                 [(equal? (first\
    \ s) #\\i) (cond\n                                                           \
    \                                                                        [(equal?\
    \ (first s) #\\I) (cond\n                                                    \
    \                                                                            \
    \     [(equal? (first s) #\\j) (cond\n                                       \
    \                                                                            \
    \                    [(equal? (first s) #\\J) (cond\n                        \
    \                                                                            \
    \                                   [(equal? (first s) #\\k) (cond\n         \
    \                                                                            \
    \                                                    [(equal? (first s) #\\K)\
    \ (cond\n                                                                    \
    \                                                                       [(equal?\
    \ (first s) #\\l) (cond\n                                                    \
    \                                                                            \
    \             [(equal? (first s) #\\L) (cond\n                               \
    \                                                                            \
    \                                    [(equal? (first s) #\\n) (cond\n        \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) #\\N) (cond\n                                                           \
    \                                                                            \
    \            [(equal? (first s) #\\o) (cond\n                                \
    \                                                                            \
    \                                         [(equal? (first s) #\\O) (cond\n   \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) #\\p) (cond\n                                                    \
    \                                                                            \
    \                         [(equal? (first s) #\\P) (cond\n                   \
    \                                                                            \
    \                                                            [(equal? (first s)\
    \ #\\q) (cond\n                                                              \
    \                                                                            \
    \                   [(equal? (first s) #\\Q) (cond\n                         \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ #\\r) (cond\n                                                              \
    \                                                                            \
    \                       [(equal? (first s) #\\R) (cond\n                     \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) #\\s) (cond\n                                                           \
    \                                                                            \
    \                              [(equal? (first s) #\\S) (cond", "  (cond\n   \
    \ [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n\
    \        [(member (char->string (car s)) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G\
    \ #\\H #\\I #\\J \n                                  #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                  #\\W\
    \ #\\X #\\Y #\\Z)) (cons (char->string (car s)) \n                           \
    \                       (solve (char->string (cdr s))))]\n        [else (cons\
    \ (char->string (car s)) (solve (char->string (cdr s))))]))\n", "  (cond\n   \
    \ [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                           #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                           #\\\
    R #\\S #\\T #\\U #\\V \n                                           #\\W #\\X #\\\
    Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                    #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q \n                                    #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    Thanks for your answer. I'm new to Racket and I didn't know about `char->string`.\
    \ However, I still don't understand why my code doesn't work. Can you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. I'm still confused\
    \ about why my code doesn't work. Can you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe problem is that the function char->string expects a character as argument,\
    \ but you are passing a string. \nThe function char->string expects a character\
    \ as argument, but you are passing a string. \nThe function char->string expects\
    \ a character as argument, but you are passing a string. \nThe function char->string\
    \ expects a character as argument, but you are passing a string. \nThe function\
    \ char->string expects a character as argument, but you are passing a string.\
    \ \nThe function char->string expects a character as argument, but you are passing\
    \ a string. \nThe function char->string expects a character as argument, but you\
    \ are passing a string. \nThe function char->string expects a character as argument,\
    \ but you are passing a string. \nThe function char->string expects a character ",
  "  (cond [(empty? s) s]\n        [(character? (first s)) (cons (first s) (solve\
    \ (rest s)))]\n        [else (cons (first s)\n                    (solve (rest\
    \ s))\n                    (solve (first s) (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                           [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \      [(equal? (first s) (second s)) (cond\n                                \
    \                                                                            \
    \                                              [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \             [(equal? (first s) (second s)) (cond\n                         \
    \                                                                            \
    \                                                           [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                                            \
    \                              [(equal? (first s) (second s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                                                                            \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                            [(equal? (first s) (second s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                             [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (second s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (second s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                       [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (second s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (second s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                       [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (second s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (second s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(char->integer? (car s)) (cond\n\
    \                                                   [(char->integer? (car s))\
    \ (cond\n                                                                    \
    \    [(char->integer? (car s)) (cond\n                                       \
    \                                                            [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                             [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                    [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                        [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \ [(char->integer? (car s)) (cond\n                                          \
    \                                                                            \
    \                                        [(char->integer? (car s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                 [(char->integer? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                        [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                         [(char->integer? (car s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                        [(char->integer? (car s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \         [(char->integer? (car s)) (cond\n                                  \
    \                                                                            \
    \                                                                        [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char->integer? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                              [(char->integer? (car s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                 [(char->integer? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \    [(char->integer? (car s)) (cond\n                                       \
    \                                                                            \
    \                                                                   [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char->integer? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                              [(char->integer? (car s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                 [(char->integer? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \    [(char->integer? (car s)) (cond\n                                       \
    \                                                                            \
    \                                                                   [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char->integer? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                              [(char->integer? (car s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                 [(char->integer? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \    [(char->integer? (car s)) (cond\n                                       \
    \                                                                            \
    \                                                                   [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char->integer? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                              [(char->integer? (car s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                 [(char->integer? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \    [(char->integer? (car s)) (cond\n                                       \
    \                                                                            \
    \                                                                   [(char->integer?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char->integer? (car ", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member? (char->integer c) '(97 65 98 97)) (cons (char->integer\
    \ c) (solve (substring s 0 (char-index c s))))]\n    [else (cons (char->integer\
    \ c) (solve (substring s 0 (char-index c s))))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cons (reverse (first s)) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (first s)) (cons (second s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n        [else\
    \ (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char?\
    \ (car s)) (cond\n                       [(char? (car s)) (cond\n            \
    \                              [(char? (car s)) (cond\n                      \
    \                                 [(char? (car s)) (cond\n                   \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                     [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                            [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                         [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cond\n        \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                [else (append\
    \ (first s) (first s)) (solve (rest s))])])])])])]\n                         \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                               [else (append (first s) (first\
    \ s)) (solve (rest s))])])])])])]\n                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                             [else (append (first s) (first s)) (solve (rest\
    \ s))])])])])])]\n                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            [else\
    \ (append (first s) (first s)) (solve (rest s))])])])])])]\n                 \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond", "  (cond [(empty? s) s]\n   \
    \     [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n\
    \        [else (cons (car s) (reverse (solve (cdr s))))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThe question was about Scheme, not Racket.\n<|/ c |>\n<| c |>\n\
    I added a solution for Scheme. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (cons (first s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (cons (char->lower (car s)) (reverse (cdr s)))\
    \ \n                            [(equal? (char->lower (car s)) (car s)) (cons\
    \ (char->upper (car s)) (reverse (cdr s))) \n                            [(equal?\
    \ (char->upper (car s)) (car s)", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond \n                            [(equal? (char-code (car s)) 97)\
    \ (cons \n                                                            (char-code\
    \ (toUpper (car s))) \n                                                      \
    \      (solve (rest s)))]\n                            [(equal? (char-code (car\
    \ s)) 65) (cons \n                                                           \
    \ (char-code (toLower (car s))) \n                                           \
    \                 (solve (rest s)))]\n                            [else (cons\
    \ (car s) (solve (rest s)))])]\n    [else (cons (solve (rest s)) (cons (char-code\
    \ (car s)) \n                                          (solve (rest s))))]\n \
    \ )\n)\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second\
    \ s)]\n    [else (cons (first s) (solve (sub1 (rest s))))]\n  )\n)\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \     [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n         \
    \                   [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a |>\n<| a tags=scheme,racket\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n    \
    \                  [(char? (car s)) (cond\n                                  \
    \      [(char? (car s)) (cond\n                                              \
    \            [(char? (car s)) (cond\n                                        \
    \                        [(char? (car s)) (cond\n                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \ [(char? (car s)) (cond\n                                                   \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \                           [(char? (car s)) (cond\n                         \
    \                                                                            \
    \                                     [(char? (car s)) (cond\n               \
    \                                                                            \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \                                                          [char? (car s) (cond\n\
    \                                                                            \
    \                                                               [char? (car s)\
    \ (cond\n                                                                    \
    \                                                                        [char?\
    \ (car s) (cond\n                                                            \
    \                                                                            \
    \    [char? (car s) (cond\n                                                  \
    \                                                                            \
    \               [char? (car s) (cond\n                                       \
    \                                                                            \
    \                          [char? (car s) (cond\n                            \
    \                                                                            \
    \                                      [char? (car s) (cond\n                \
    \                                                                            \
    \                                                  [char? (car s) (cond\n    \
    \                                                                            \
    \                                                               [char? (car s) ",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(character?\
    \ (car s)) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (char-code (car\
    \ s)) 97) (cond [(equal? (char-code (car s)) 65) (cond [(equal? (", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \        [(equal? (first s) (first s)) (solve (rest s))]\n                   \
    \          [(equal? (first s) (first s)) (solve (rest s))]\n                 \
    \            [(equal? (first s) (first s)) (solve (rest s))]\n               \
    \              [(equal? (first s) (first s)) (solve (rest s))]\n             \
    \                [(equal? (first s) (first s)) (solve (rest s))]\n           \
    \                  [(equal? (first s) (first s)) (solve (rest s))]\n         \
    \                    [(equal? (first s) (first s)) (solve (rest s))]\n       \
    \                      [(equal? (first s) (first s)) (solve (rest s))]\n     \
    \                        [(equal? (first s) (first s)) (solve (rest s))]\n   \
    \                          [(equal? (first s) (first s)) (solve (rest s))]\n \
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest ", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z))\
    \ (cons (char->upper (first s)) \n                                      (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(character? (first s)) (cond\n                      \
    \       [(equal? (first s) #\\a) (cond\n                                     \
    \               [(equal? (first s) #\\b) (cond\n                             \
    \                                                  [(equal? (first s) #\\c) (cond\n\
    \                                                                            \
    \                [(equal? (first s) #\\d) (cond\n                            \
    \                                                                         [(equal?\
    \ (first s) #\\e) (cond\n                                                    \
    \                                                          [(equal? (first s)\
    \ #\\f) (cond\n                                                              \
    \                                                       [(equal? (first s) #\\\
    g) (cond\n                                                                   \
    \                                                         [(equal? (first s) #\\\
    h) (cond\n                                                                   \
    \                                                                [(equal? (first\
    \ s) #\\i) (cond\n                                                           \
    \                                                                            \
    \                   [(equal? (first s) #\\j) (cond\n                         \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ #\\k) (cond\n                                                              \
    \                                                                            \
    \                            [(equal? (first s) #\\l) (cond\n                \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) #\\m) (cond\n                                       \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) #\\n) (cond\n                                                           \
    \                                                                            \
    \                                                [(equal? (first s) #\\o) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (first s) #\\p) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                       [(equal? (first s) #\\\
    q) (cond\n                                                                   \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) #\\r) (cond\n                                          \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) #\\s) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) #\\t) (cond\n                                                           \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) #\\v) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) #\\w) (cond\n                                                           \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) #\\x) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (first s) #\\y) (cond\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) #\\z) (cond\n                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) #\\A) (cond\n                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) #\\B) (cond\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) #\\C) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) #\\D) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                       [(equal? (first s) #\\\
    E) (cond\n                                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (first s) #\\F) (cond\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) #\\G) (cond\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) #\\H) (cond\n                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (first s) #\\I) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      ", "  (cond\n    [(empty? s) s]\n    [(member?\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                            #\\K #\\L #\\M #\\N #\\O #\\P\
    \ #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \ #\\W #\\X #\\Y #\\Z)))\n     (cond\n       [(member? (first s) (map char->string\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                     \
    \                       #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    u #\\v \n                                            #\\w #\\x #\\y #\\z))\n \
    \       (cond\n          [(member? (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                                    #\\W #\\X #\\Y #\\Z))\n           (cond\n\
    \             [(member? (first s) (map char->string '(#\\a #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j \n                                                #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                  \
    \                              #\\w #\\x #\\y #\\z))\n              (cond\n  \
    \              [(char->string? (first s)) (cond\n                  [(char->string?\
    \ (first s)) (cond\n                    [(char->string? (first s)) (cond\n   \
    \                   [(char->string? (first s)) (cond\n                       \
    \ [(char->string? (first s)) (cond\n                          [(char->string?\
    \ (first s)) (cond\n                            [(char->string? (first s)) (cond\n\
    \                              [(char->string? (first s)) (cond\n            \
    \                    [(char->string? (first s)) (cond\n                      \
    \            [(char->string? (first s)) (cond\n                              \
    \      [(", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (char->upper\
    \ (first s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons\
    \ (upper-case (car s)) \n                                      (solve (substring\
    \ (substring s 0 1) \n                                                      (substring\
    \ s 1 \n                                                      (substring s 2 \n\
    \                                                      (substring s 3 \n     \
    \                                                 (substring s 4 \n          \
    \                                            (substring s 5 \n               \
    \                                       (substring s 6 \n                    \
    \                                  (substring s 7 \n                         \
    \                             (substring s 8 \n                              \
    \                        (substring s 9 \n                                   \
    \                   (substring s 10 \n                                       \
    \               (substring s 11 \n                                           \
    \           (substring s 12 \n                                               \
    \       (substring s 13 \n                                                   \
    \   (substring s 14 \n                                                      (substring\
    \ s 15 \n                                                      (substring s 16\
    \ \n                                                      (substring s 17 \n \
    \                                                     (substring s 18 \n     \
    \                                                 (substring s 19 \n         \
    \                                             (substring s 20 \n             \
    \                                         (substring s 21 \n                 \
    \                                     (substring s 22 \n                     \
    \                                 (substring s 23 \n                         \
    \                             (substring s 24 \n                             \
    \                         (substring s 25 \n                                 \
    \                     (substring s 26 \n                                     \
    \                 (substring s 27 \n                                         \
    \             (substring s 28 \n                                             \
    \         (substring s 29 \n                                                 \
    \     (substring s 30 \n                                                     \
    \ (substring s 31 \n                                                      (substring\
    \ s 32 \n                                                      (substring s 33\
    \ \n                                                      (substring s 34 \n \
    \                                                     (substring s 35 \n     \
    \                                                 (substring s 36 \n         \
    \                                             (substring s 37 \n             \
    \                                         (substring s 38 \n                 \
    \                                     (substring s 39 \n                     \
    \                                 (substring s 40 \n                         \
    \                             (substring s 41 \n                             \
    \                         (substring s 42 \n                                 \
    \                     (substring s 43 \n                                     \
    \                 (substring s 44 \n                                         \
    \             (substring s 45 \n                                             \
    \         (substring s 46 \n                                                 \
    \     (substring s 47 \n                                                     \
    \ (substring s 48 \n                                                      (substring\
    \ s 49 \n                                                      (substring s 50\
    \ \n                                                      (substring s 51 \n \
    \                                                     (substring s 52 \n     \
    \                                                 (substring s 53 \n         \
    \                                             (sub", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n\
    \                (solve (substring (second s) 0 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 1 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 2 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 3 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 4 (- (length s) 1)))\n                (solve (substring (second s) 5 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 6 (- (length s) 1)))\n\
    \                (solve (substring (second s) 7 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 8 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 9 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 10 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 11 (- (length s) 1)))\n                (solve (substring (second s) 12 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 13 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 14 (- (length s) 1)))\n\
    \                (solve (substring (second s) 15 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 16 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 17 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 18 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 19 (- (length s) 1)))\n                (solve (substring (second s) 20 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 21 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 22 (- (length s) 1)))\n\
    \                (solve (substring (second s) 23 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 24 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 25 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 26 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 27 (- (length s) 1)))\n                (solve (substring (second s) 28 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 29 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 30 (- (length s) 1)))\n\
    \                (solve (substring (second s) 31 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 32 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 33 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\Z)))\n \
    \    (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                   #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                   #\\W #\\X #\\\
    Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n\
    \                                          [(char? (car s)) (cond\n          \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \                            [(char? (car s)) (cond\n                        \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \    [(char? (car s)) (cond\n                                                \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \ [(char? (car s)) (cond\n                                                   \
    \                                                                            \
    \           [(char? (car s)) (cond\n                                         \
    \                                                                            \
    \                       [(char? (car s)) (cond\n                             \
    \                                                                            \
    \                                     [(char? (car s)) (cond\n               \
    \                                                                            \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \             [(char? (car s)) (cond\n                                       \
    \                                                                            \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \                                                           [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                                                            [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                                                            \
    \            [(char? (car s)) (cond\n                                        \
    \                                                                            \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                            \
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                      [(char? (car ", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (cons (second s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\
    \ (solve (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n\
    \                                       #\\R #\\S #\\T #\\U #\\V \n          \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n        \
    \                               #\\R #\\S #\\T #\\U #\\V \n                  \
    \                     #\\W #\\X #\\Y #\\Z))\n                    (map char->string\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                     \
    \                  #\\k #\\l #\\m #\\n #\\o #\\p #\\q \n                     \
    \                  #\\r #\\s #\\t #\\u #\\v \n                               \
    \        #\\w #\\x #\\y #\\z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (substring (second s) 0 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 1 (- (length s) 1)))\n\
    \                (solve (substring (second s) 2 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 3 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 4 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 5 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 6 (- (length s) 1)))\n                (solve (substring (second s) 7 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 8 (- (length s) 1)))\n\
    \                (solve (substring (second s) 9 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 10 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 11 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 12 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 13 (- (length s) 1)))\n                (solve (substring (second s) 14 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 15 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 16 (- (length s) 1)))\n\
    \                (solve (substring (second s) 17 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 18 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 19 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 20 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 21 (- (length s) 1)))\n                (solve (substring (second s) 22 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 23 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 24 (- (length s) 1)))\n\
    \                (solve (substring (second s) 25 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 26 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 27 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 28 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 29 (- (length s) 1)))\n                (solve (substring (second s) 30 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 31 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 32 (- (length s) 1)))\n\
    \                (solve (substring (second s) 33 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n  \
    \  [(char? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n\
    \    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (second s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                 \
    \           #\\R #\\S #\\T #\\U #\\V \n                                      \
    \      #\\W #\\X #\\Y #\\Z))) \n     (reverse (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                 \
    \           #\\R #\\S #\\T #\\U #\\V \n                                      \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme |>\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n \
    \   [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cond\n                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                         [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                           [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V\
    \ \n                                      #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S\
    \ #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\
    \ (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond \n                            [(equal? (char-case (car s)) 'upper)\
    \ (cons \n                                (char-case (car s)) \n             \
    \                   (solve (reverse (cdr s))))]\n                            [(equal?\
    \ (char-case (car s)) 'lower) (cons \n                                (char-case\
    \ (car s)) \n                                (solve (reverse (cdr s))))]\n   \
    \                         [(equal? (char-case (car s)) 'other) (cons \n      \
    \                          (char-case (car s)) \n                            \
    \    (solve (reverse (cdr s))))]\n                            [else (cons (car\
    \ s) (solve (reverse (cdr s))))])]\n    [else (cons (car s) (solve (reverse (cdr\
    \ s))))]))\n</code>\n<|/ a tags=scheme,racket,string |>\n<| c |>\nThank you so\
    \ much! This was really helpful!\n<|/ c |>\n<| a tags=scheme,racket,string |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second\
    \ s)]\n    [else (cons (first s)\n                (solve (substring (second s)\
    \ 0 (- (length s) 1)))\n                (solve (substring (second s) 1 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 2 (- (length s) 1)))\n\
    \                (solve (substring (second s) 3 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 4 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 5 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 6 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 7 (- (length s) 1)))\n                (solve (substring (second s) 8 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 9 (- (length s) 1)))\n\
    \                (solve (substring (second s) 10 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 11 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 12 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 13 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 14 (- (length s) 1)))\n                (solve (substring (second s) 15 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 16 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 17 (- (length s) 1)))\n\
    \                (solve (substring (second s) 18 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 19 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 20 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 21 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 22 (- (length s) 1)))\n                (solve (substring (second s) 23 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 24 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 25 (- (length s) 1)))\n\
    \                (solve (substring (second s) 26 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 27 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 28 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 29 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 30 (- (length s) 1)))\n                (solve (substring (second s) 31 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 32 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 33 (- (length s) 1)))\n\
    \                (solve (substring (second s) 34 (", "  (cond [(empty? s) s]\n\
    \        [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr\
    \ s))))]\n        [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for \"#a@C\" for example.\
    \ Try it out yourself.\n<|/ c |>\n<| c |>\nIt works for me in Racket 6.1.1. What\
    \ version are you using?\n<|/ c |>\n<| c |>\nI'm on 6.1.1 too. Maybe it's because\
    \ I'm running it on Windows?\n<|/ c |>\n<| c |>\nI tested it on Windows and it\
    \ works. I suspect that your problem is that you didn't put a newline at the end\
    \ of the input string. Try it out with my code above. Also, make sure you put\
    \ a newline at the end of your input string. Otherwise it won't work.\n<|/ c |>\n\
    <| c |>\nI did put a newline at the end of my input string. I'm running it on\
    \ Windows. I suspect that my problem is that I'm running it on Windows. Maybe\
    \ it's because I'm running it on Windows?\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                     #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                     #\\W #\\X #\\Y #\\\
    Z)) (cons (upper-case (car s)) \n                                (solve (substring\
    \ (substring s 0 1) \n                                                  (substring\
    \ s 1 \n                                                  (substring s 2 \n  \
    \                                                (substring s 3 \n           \
    \                                       (substring s 4 \n                    \
    \                              (substring s 5 \n                             \
    \                     (substring s 6 \n                                      \
    \            (substring s 7 \n                                               \
    \   (substring s 8 \n                                                  (substring\
    \ s 9 \n                                                  (substring s 10 \n \
    \                                                 (substring s 11 \n         \
    \                                         (substring s 12 \n                 \
    \                                 (substring s 13 \n                         \
    \                         (substring s 14 \n                                 \
    \                 (substring s 15 \n                                         \
    \         (substring s 16 \n                                                 \
    \ (substring s 17 \n                                                  (substring\
    \ s 18 \n                                                  (substring s 19 \n\
    \                                                  (substring s 20 \n        \
    \                                          (substring s 21 \n                \
    \                                  (substring s 22 \n                        \
    \                          (substring s 23 \n                                \
    \                  (substring s 24 \n                                        \
    \          (substring s 25 \n                                                \
    \  (substring s 26 \n                                                  (substring\
    \ s 27 \n                                                  (substring s 28 \n\
    \                                                  (substring s 29 \n        \
    \                                          (substring s 30 \n                \
    \                                  (substring s 31 \n                        \
    \                          (substring s 32 \n                                \
    \                  (substring s 33 \n                                        \
    \          (substring s 34 \n                                                \
    \  (substring s 35 \n                                                  (substring\
    \ s 36 \n                                                  (substring s 37 \n\
    \                                                  (substring s 38 \n        \
    \                                          (substring s 39 \n                \
    \                                  (substring s 40 \n                        \
    \                          (substring s 41 \n                                \
    \                  (substring s 42 \n                                        \
    \          (substring s 43 \n                                                \
    \  (substring s 44 \n                                                  (substring\
    \ s 45 \n                                                  (substring s 46 \n\
    \                                                  (substring s 47 \n        \
    \                                          (substring s 48 \n                \
    \                                  (substring s 49 \n                        \
    \                          (substring s 50 \n                                \
    \                  (substring s 51 \n                                        \
    \          (substring s 52 \n                                                \
    \  (substring s 53 \n                                                  (sub",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper (car\
    \ s)) (reverse (solve (cdr s))))]\n    [else (cons (car s) (solve (cdr s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n\
    \    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (reverse (first\
    \ s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond [(empty? s) s]\n        [(member (char-ref s 0) #\\a) (char-upper (char-ref\
    \ s 0))]\n        [else (cons (char-upper (char-ref s 0)) (char-lower (char-ref\
    \ s 0)))]))\n", "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \       [(equal? (first s) (second s)) (cond\n                               \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                               [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                       [(equal? (first s) (third\
    \ s)) (cond\n                                                                \
    \                                                             [(equal? (first\
    \ s) (fourth s)) (cond\n                                                     \
    \                                                                            \
    \                              [(equal? (first s) (fifth s)) (cond\n         \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (sixth s)) (cond\n                                               \
    \                                                                            \
    \                                        [(equal? (first s) (seventh s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (eighth s)) (cond\n                         \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (ninth s)) (cond\n                                                      \
    \                                                                            \
    \                                       [(equal? (first s) (tenth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (eleventh s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (twelfth s)) (cond\n                                 \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (thirteenth s)) (cond\n                                                 \
    \                                                                            \
    \                                                    [(equal? (first s) (fourteenth\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                       [(equal? (first s) (fifteenth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) (sixteenth s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (seventeenth s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (eighteenth s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (nineteenth s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) (twentieth s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (first s) (thirtieth s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (first s) (fourtieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (fiftieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (sixtieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (seventieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (eightieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (ninetieth s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (twenty s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (thirty s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (forty s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (fifty s)) (cond",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (substring s (+ 1 i) (length\
    \ s)))])]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V\
    \ \n                                      #\\W #\\X #\\Y #\\Z)))\n     (cond\n\
    \       [(empty? (rest s)) s]\n       [(member (first s) (map char->string '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                            \
    \                 #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v\
    \ \n                                             #\\w #\\x #\\y #\\z))\n     \
    \   (cond\n         [(empty? (rest s)) s]\n         [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                             #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                                  #\\W #\\X #\\\
    Y #\\Z))\n          (cond\n           [(empty? (rest s)) s]\n           [(member\
    \ (first s) (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\\
    j \n                                                  #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                                      \
    \            #\\w #\\x #\\y #\\z))\n            (cond\n             [(empty? (rest\
    \ s)) s]\n             [(member (first s) (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (first\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                    #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                    #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \                 #\\W #\\X #\\Y #\\Z))\n                     (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                                 #\\W #\\X #\\Y\
    \ #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first\
    \ s)\n                (solve (substring (second s) 0 (- (length s) 1)))\n    \
    \            (solve (substring (second s) 1 (- (length s) 1)))\n             \
    \   (solve (substring (second s) 2 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 3 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 4 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 5 (- (length s) 1)))\n                (solve (substring (second s) 6 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 7 (- (length s) 1)))\n\
    \                (solve (substring (second s) 8 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 9 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 10 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 11 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 12 (- (length s) 1)))\n                (solve (substring (second s) 13 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 14 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 15 (- (length s) 1)))\n\
    \                (solve (substring (second s) 16 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 17 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 18 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 19 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 20 (- (length s) 1)))\n                (solve (substring (second s) 21 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 22 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 23 (- (length s) 1)))\n\
    \                (solve (substring (second s) 24 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 25 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 26 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 27 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 28 (- (length s) 1)))\n                (solve (substring (second s) 29 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 30 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 31 (- (length s) 1)))\n\
    \                (solve (substring (second s) 32 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 33 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                            #\\W #\\X #\\Y\
    \ #\\Z)))\n     (string-append (map (lambda (c) (if (char->string c) \n      \
    \                                 (char->string (char->string c) \n          \
    \                               (char->string (char->string c) \n            \
    \                               (char->string (char->string c) \n            \
    \                                 (char->string (char->string c) \n          \
    \                                     (char->string (char->string c) \n      \
    \                                           (char->string (char->string c) \n\
    \                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (char->upper\
    \ (first s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z))\
    \ (upper-case (first s))]\n    [else (lower-case (first s))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \     [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n         \
    \                   [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cdr s)]\n               \
    \             [(char-upper? (car s)) (cdr s)]\n                            [(char-lower?\
    \ (car s)) (cons (char-upper? (car s)) (cdr s))]\n                           \
    \ [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n             \
    \               [(char-lower? (car s)) (cdr s)]\n                            [(char-upper?\
    \ (car s)) (cdr s)]\n                            [(char-lower? (car s)) (cons\
    \ (char-upper? (car s)) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (char-lower? (car s)) (cdr s))]\n                            [(char-lower?\
    \ (car s)) (cdr s)]\n                            [(char-upper? (car s)) (cdr s)]\n\
    \                            [(char-lower? (car s)) (cons (char-upper? (car s))\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (char-lower?\
    \ (car s)) (cdr s))]\n                            [(char-lower? (car s)) (cdr\
    \ s)]\n                            [(char-upper? (car s)) (cdr s)]\n         \
    \                   [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (char-lower? (car s))\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cdr s)]\n   \
    \                         [(char-upper? (car s)) (cdr s)]\n                  \
    \          [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n    \
    \                        [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr\
    \ s))]\n                            [(char-lower? (car s)) (cdr s)]\n        \
    \                    [(char-upper? (car s)) (cdr s)]\n", "  (cond [(empty? s)\
    \ s]\n        [(character? (first s)) (cons (second s) (solve (rest s)))]\n  \
    \      [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cond \n                            [(equal? (char->lower\
    \ (car s)) (car s)) (concat \n                                               \
    \                 [(char->upper (car s)) \n                                  \
    \                               (char->lower (car s))])]\n                   \
    \         [(equal? (char->upper (car s)) (car s)) (concat \n                 \
    \                                               [(car s) \n                  \
    \                                               (char->lower (car s))])]\n   \
    \                         [(equal? (char->lower (car s)) (car s)) (concat \n \
    \                                                               [(car s) \n  \
    \                                                               (char->upper (car\
    \ s))])])]\n    [else (concat \n              [(reverse (solve (cdr s))) \n  \
    \             (char->lower (car s))])]))\n", "  (cond\n    [(empty? s) s]\n  \
    \  [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n   \
    \                                     [(char? (car s)) (cond\n               \
    \                                           [(char? (car s)) (cond\n         \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \    [(char? (car s)) (cond\n                                                \
    \                     [(char? (car s)) (cond\n                               \
    \                                       [(char? (car s)) (cond\n             \
    \                                                           [(char? (car s)) (cond\n\
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                 [(char? (car s)) (cond\n                                   \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                       [(char? (car s)) (cond\n                             \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \ [(char? (car s)) (cond\n                                                   \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                           [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \      [(char? (car s)) (cond\n                                              \
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                                                                        [(char?\
    \ (car s)) (", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n    \
    \                   [(char? (car s)) (cond\n                                 \
    \         [(char? (car s)) (cond\n                                           \
    \              [(char? (car s)) (cond\n                                      \
    \                                    [(char? (car s)) (cond\n                \
    \                                                           [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n", "  (cond [(empty? s) s]\n        [(letter?\
    \ (first s)) (cons (first s) (solve (reverse (second s))))]\n        [else (cons\
    \ (first s) (solve (reverse (second s))))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n  \
    \              (solve (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cond\n                            [(lower? (first s)) (cond\n  \
    \                                             [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                               [else\
    \ (cons (first s) (solve (rest s)))])]\n                            [else (cons\
    \ (first s) (solve (rest s)))])]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,recursion,string |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond \n                      \
    \      [(equal? (char->upper (car s)) (car s)) (concat \n                    \
    \            (solve (char->lower (car s))) \n                                (solve\
    \ (char->upper (car s))))]\n                            [(equal? (char->lower\
    \ (car s)) (car s)) (concat \n                                (solve (char->upper\
    \ (car s))) \n                                (solve (char->lower (car s))))]\n\
    \                            [(equal? (char->upper (car s)) (car s)) (concat \n\
    \                                (solve (char->lower (car s))) \n            \
    \                    (solve (char->upper (car s))))]\n                       \
    \     [(equal? (char->lower (car s)) (car s)) (concat \n                     \
    \           (solve (char->upper (car s))) \n                                (solve\
    \ (char->lower (car s))))]\n                            [(equal? (char->upper\
    \ (car s)) (car s)) (concat \n                                (solve (char->lower\
    \ (car s))) \n                                (solve (char->upper (car s))))]\n\
    \                            [(equal? (char->lower (car s)) (car s)) (concat \n\
    \                                (solve (char->upper (car s))) \n            \
    \                    (solve (char->lower (car s))))]\n                       \
    \     [(equal? (char->upper (car s)) (car s)) (concat \n                     \
    \           (solve (char->lower (car s))) \n                                (solve\
    \ (char->upper (car s))))]\n                            [(equal? (char->lower\
    \ (car s)) (car s)) (concat \n                                (solve (char->upper\
    \ (car s))) \n                                (solve (char->lower (car s))))]\n\
    \                            [(equal? (char->upper (car s)) (car s)) (concat \n\
    \                                (solve (char->lower (car s))) \n            \
    \                    (solve (char->upper (car s))))]\n                       \
    \     [(equal? (char->lower (car s)) (car s)) (concat \n                     \
    \           (solve (char->upper (car s))) \n                                (solve\
    \ (char->lower (car s))))]\n                            [(equal? (char->upper\
    \ (car s)) (car s)) (concat \n                                (solve (char->lower\
    \ (car s))) \n                                (solve (char->upper (car s))))]\n\
    \                            [(equal? (char->lower (car s)) (car s)) (concat ",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(letter? (first s)) (cond\n                            [(upper?\
    \ (first s)) (cond\n                                               [(lower? (first\
    \ s)) (first s)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)) (first #\\A)]\n                                               [(lower? (first\
    \ s)) (first #\\a)]\n                                               [(lower? (first\
    \ s)) (first #\\A)]\n                                               [(upper? (first\
    \ s)) (first #\\a)]\n                                               [(upper? (first\
    \ s)", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                   #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cond \n                            [(equal? (char-case\
    \ (car s)) 'upper) (cons (char-case (car s)) (reverse (substring (string (car\
    \ s) 0 1) (+ 0 (string-length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'lower) (cons (char-case (car s)) (substring (string (car s) 0 1) (+\
    \ 0 (string-length s))))]\n                            [(equal? (char-case (car\
    \ s)) 'other) (cons (char-case (car s)) (substring (string (car s) 0 1) (+ 0 (string-length\
    \ s))))]\n                            [(equal? (char-case (car s)) 'none) (cons\
    \ (char-case (car s)) (substring (string (car s) 0 1) (+ 0 (string-length s))))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (substring (string (car s) 0 1) (+ 0 (string-length s))))]\n      \
    \                      [(equal? (char-case (car s)) 'none) (cons (char-case (car\
    \ s)) (substring (string (car s) 0 1) (+ 0 (string-length s))))]\n           \
    \                 [(equal? (char-case (car s)) 'none) (cons (char-case (car s))\
    \ (substring (string (car s) 0 1) (+ 0 (string-length s))))]\n               \
    \             [(equal? (char-case (car s)) 'none) (cons (char-case (car s)) (substring\
    \ (string (car s) 0 1) (+ 0 (string-length s))))]\n                          \
    \  [(equal? (char-case (car s)) 'none) (cons (char-case (car s)) (substring (string\
    \ (car s) 0 1) (+ 0 (string-length s))))]\n                            [(equal?\
    \ (char-case (car s)) 'none) (cons (char-case (car s)) (substring (string (car\
    \ s) 0 1) (+ 0 (string-length s))))]\n                            [(equal? (char-case\
    \ (car s)) 'none) (cons (char-case (car s)) (substring (string (car s) 0 1) (+\
    \ 0 (string-length s))))]\n                            [(equal? (char-case (car\
    \ s)) 'none) (cons (char-case (car s)) (substring (string (car s) 0 1) (+ 0 (string-length\
    \ s))))]\n                            [(equal? (char-case (car s)) 'none) (cons\
    \ (char-case ", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\\
    X #\\Y #\\Z)) (cons (char->upper (first s)) \n                               \
    \       (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (substring (second s) 0 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 1 (- (length s) 1)))\n\
    \                (solve (substring (second s) 2 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 3 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 4 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 5 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 6 (- (length s) 1)))\n                (solve (substring (second s) 7 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 8 (- (length s) 1)))\n\
    \                (solve (substring (second s) 9 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 10 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 11 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 12 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 13 (- (length s) 1)))\n                (solve (substring (second s) 14 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 15 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 16 (- (length s) 1)))\n\
    \                (solve (substring (second s) 17 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 18 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 19 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 20 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 21 (- (length s) 1)))\n                (solve (substring (second s) 22 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 23 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 24 (- (length s) 1)))\n\
    \                (solve (substring (second s) 25 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 26 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 27 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 28 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 29 (- (length s) 1)))\n                (solve (substring (second s) 30 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 31 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 32 (- (length s) 1)))\n\
    \                (solve (substring (second s) 33 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n  \
    \  [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                          #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q \n                                          #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n      \
    \                              #\\R #\\S #\\T #\\U #\\V \n                   \
    \                 #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))\n\
    \     (string-append (upper-case (first s)) (lower-case (second s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                   #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \  #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond [(empty? s) s]\n        [(character? (first s)) (cons (second (first s))\
    \ (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q \n                                      #\\R #\\S #\\T #\\U #\\\
    V \n                                      #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n       \
    \                            #\\R #\\S #\\T #\\U #\\V \n                     \
    \              #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (second\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n \
    \   [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(letter? (first s)) (let* ([s (first s)]\n                            [t\
    \ (second s)]\n                            [s (string->list (reverse s))])\n \
    \                     (cond\n                        [(empty? s) s]\n        \
    \                [(char->integer (first s)) (let* ([s (first s)]\n           \
    \                                             [t (second s)]\n               \
    \                                         [s (string->list (reverse s))])\n  \
    \                                        (cond\n                             \
    \               [(empty? s) s]\n                                            [(char->integer\
    \ (first s)) (let* ([s (first s)]\n                                          \
    \                              [t (second s)]\n                              \
    \                                          [s (string->list (reverse s))])\n \
    \                                             (cond\n                        \
    \                        [(empty? s) s]\n                                    \
    \            [(char->integer (first s)) (let* ([s (first s)]\n               \
    \                                                                     [t (second\
    \ s)]\n                                                                      \
    \              [s (string->list (reverse s))])\n                             \
    \                     (cond\n                                                \
    \    [(empty? s) s]\n                                                    [(char->integer\
    \ (first s)) (let* ([s (first s)]\n                                          \
    \                                                          [t (second s)]\n  \
    \                                                                            \
    \                      [s (string->list (reverse s))])\n                     \
    \                                 (cond\n                                    \
    \                    [(empty? s) s]\n                                        \
    \                [(char->integer (first s)) (let* ([s (first s)]\n           \
    \                                                                            \
    \             [t (second s)]\n                                               \
    \                                                     [s (string->list (reverse\
    \ s))])\n                                                          (cond\n   \
    \                                                         [(empty? s) s]\n   \
    \                                                         [(char->integer (first\
    \ s)) (let* ([s (first s)]\n                                                 \
    \                                                   [t (second s)]\n         \
    \                                                                            \
    \               [s (string->list (reverse s))])\n                            \
    \                                  (cond\n                                   \
    \                             [(empty? s) s]\n                               \
    \                                 [(char->integer (first s)) (let* ([s (first\
    \ s)]\n                                                                      \
    \                                  [t (second s)]\n                          \
    \                                                                            \
    \  [s (string->list (reverse s))])\n                                         \
    \                         (cond\n                                            \
    \                        [(empty? s) s]\n                                    \
    \                                [(char->integer (first s)) (let* ([s (first s)]\n\
    \                                                                            \
    \                                [t (second s)]\n                            \
    \                                                                            \
    \    [s (string->list (reverse s))])\n                                       \
    \                               (cond\n                                      \
    \                                  [(empty? s) s]\n                          \
    \                                              [(char->integer (first s)) (let*\
    \ ([s (first s)]\n                                                           \
    \                                                         [t (second s)]\n   \
    \                                                                            \
    \                                     [s (string->list (reverse s))])\n      \
    \                                                                            \
    \    (cond\n                                                                 \
    \       [(empty? s) s]\n                                                     \
    \                   [(char->integer (first s)) (let* ([s (first s)]\n        \
    \                                                                            \
    \                                [t (second s)]\n                            \
    \                                                                            \
    \            [s (string->list (reverse s))])\n                               \
    \                                                       (cond\n              \
    \                                                          [(empty? s) s]\n  \
    \                                                                      [(char->integer\
    \ (", "  (cond [(empty? s) s]\n        [(character? (car s)) (cond [(equal? (char-code\
    \ (car s)) 97) (cons \n                                 (char-code (car s)) (cons\
    \ (char-code (car s)) \n                                 (cons (char-code (car\
    \ s)) empty)))]\n                             [(equal? (char-code (car s)) 65)\
    \ (cons \n                                 (char-code (car s)) (cons (char-code\
    \ (car s)) \n                                 (cons (char-code (car s)) empty)))]\n\
    \                             [(equal? (char-code (car s)) 97) (cons \n      \
    \                           (char-code (car s)) (cons (char-code (car s)) \n \
    \                                (cons (char-code (car s)) empty)))]\n       \
    \                      [(equal? (char-code (car s)) 65) (cons \n             \
    \                    (char-code (car s)) (cons (char-code (car s)) \n        \
    \                         (cons (char-code (car s)) empty)))]\n              \
    \               [(equal? (char-code (car s)) 97) (cons \n                    \
    \             (char-code (car s)) (cons (char-code (car s)) \n               \
    \                  (cons (char-code (car s)) empty)))]\n                     \
    \        [(equal? (char-code (car s)) 65) (cons \n                           \
    \      (char-code (car s)) (cons (char-code (car s)) \n                      \
    \           (cons (char-code (car s)) empty)))]\n                            \
    \ [(equal? (char-code (car s)) 97) (cons \n                                 (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                 (cons\
    \ (char-code (car s)) empty)))]\n                             [(equal? (char-code\
    \ (car s)) 65) (cons \n                                 (char-code (car s)) (cons\
    \ (char-code (car s)) \n                                 (cons (char-code (car\
    \ s)) empty)))]\n                             [(equal? (char-code (car s)) 97)\
    \ (cons \n                                 (char-code (car s)) (cons (char-code\
    \ (car s)) \n                                 (cons (char-code (car s)) empty)))]\n\
    \                             [(equal? (char-code (car s)) 65) (cons \n      \
    \                           (char-code (car s)) (cons (char-code (car s)) \n \
    \                                (cons (char-code (car ", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                             [(lower?\
    \ (car s)) (cons (upper? (car s)) (cdr s))]\n                             [(upper?\
    \ (car s)) (cons (lower? (car s)) (cdr s))])]\n    [else (cons (car s) (solve\
    \ (cdr s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you for your\
    \ answer. I think I understand it now. I am new to racket and I didn't know that\
    \ you can define functions inside other functions. I thought that functions were\
    \ just like any other variables. I guess I should read more about racket before\
    \ asking questions like this. Thank you for your help.\n<|/ c |>\n<| c |>\nYes,\
    \ functions are just like any other variables. But you can define a function inside\
    \ another function, and that inner function can call other functions. This is\
    \ called \"nested functions\". Read more about it here: http://docs.racket-lang.org/guide/define.html?q=define#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._define%29%29\n\
    <|/ c |>\n<| c |>\nThank you for the link. I will read more about nested functions.\
    \ I appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n   \
    \ [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons\
    \ (first s) (solve (substring s 0 (- (length s) 1)))) ]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (cond\n      [(char? (first s)) (cond\n\
    \        [(equal? (first s) (first s)) (cond\n          [(char? (first s)) (cond\n\
    \            [(equal? (first s) (first s)) (cond\n              [(char? (first\
    \ s)) (cond\n                [(char? (first s)) (cond\n                  [(equal?\
    \ (first s) (first s)) (cond\n                    [(char? (first s)) (cond\n \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \      [(char? (first s)) (cond\n                          [(equal? (first s)\
    \ (first s)) (cond\n                            [(char? (first s)) (cond\n   \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                    [(char? (first s)) (cond\n                              \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \ [(char? (first s)) (cond\n                                      [(equal? (first\
    \ s) (first s)) (cond\n                                        [(char? (first\
    \ s)) (cond\n                                          [(equal? (first s) (first\
    \ s)) (cond\n                                            [(char? (first s)) (cond\n\
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                [(char? (first s)) (cond\n  \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                    [(char? (first s))\
    \ (cond\n                                                      [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \  [(char? (first s)) (cond\n                                                \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                               [(char? (first s)) (cond\n                   \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                [(char? (first\
    \ s)) (cond\n                                                                \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                               [(char? (first s)) (cond\n                   \
    \                                                   [(char? (first s)) (cond\n\
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                           [(char? (first s)) (cond\n                       \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \              [(char? (first s)) (cond\n                                    \
    \                                            [(char? (first s)) (cond\n      \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                     [(char? (first s)) (cond\n             \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                         [(char? (first s)) (cond\n         \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                          [(char? (first s))\
    \ (cond\n                                                                    \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \       [(char? (first s)) (cond\n                                           \
    \                                                       [(", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) (solve (cdr s)))]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (rest s))))]\n\
    \    [else (cons (car s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n \
    \                                        [(char? (car s)) (cond\n            \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                            \
    \                                       [(char? (car s)) (cond\n             \
    \                                                                            \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           [(char? (car s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     [(char? (car s)) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           [(char? (car s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(char?\
    \ (car s)) (", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\\
    X #\\Y #\\Z)) (cons (char->upper (first s)) \n                               \
    \       (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let* ([letter (first s)]\
    \ [(upper-case? letter) (lower-case? letter)]) \n                          (cond\n\
    \                            [(upper-case? letter) (cons (upper-case-letter (first\
    \ s)) (reverse (subseq s 1 (length s))))]\n                            [(lower-case?\
    \ letter) (cons (lower-case-letter (first s)) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (upper-case? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (lower-case? letter))\
    \ (cons (first s) (reverse (subseq s 1 (length s))))]\n                      \
    \      [(not (letter? letter)) (cons (first s) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (letter? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (letter? letter))\
    \ (cons (first s) (reverse (subseq s 1 (length s))))]\n                      \
    \      [(not (letter? letter)) (cons (first s) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (letter? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (letter? letter))\
    \ (cons (first s) (reverse (subseq s 1 (length s))))]\n                      \
    \      [(not (letter? letter)) (cons (first s) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (letter? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (letter? letter))\
    \ (cons (first s) (reverse (subseq s 1 (length s))))]\n                      \
    \      [(not (letter? letter)) (cons (first s) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (letter? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (letter? letter))\
    \ (cons (first s) (reverse (subseq s 1 (length s))))]\n                      \
    \      [(not (letter? letter)) (cons (first s) (reverse (subseq s 1 (length s))))]\n\
    \                            [(not (letter? letter)) (cons (first s) (reverse\
    \ (subseq s 1 (length s))))]\n                            [(not (letter? letter))\
    \ (cons (first s) (reverse (subseq s 1 (", "  (cond\n    [(empty? s) s]\n    [(member?\
    \ (char->integer c) '(97 65)) (cond \n      [(char->integer c) \n       (char->integer\
    \ c)]\n      [else (cond \n        [(char->integer c) (char->integer c)] \n  \
    \      [else (cond \n          [(char->integer c) (char->integer c)] \n      \
    \    [else (cond \n            [(char->integer c) (char->integer c)] \n      \
    \      [else (cond \n              [(char->integer c) (char->integer c)] \n  \
    \            [else (cond \n                [(char->integer c) (char->integer c)]\
    \ \n                [else (cond \n                  [(char->integer c) (char->integer\
    \ c)] \n                  [else (cond \n                    [(char->integer c)\
    \ (char->integer c)] \n                    [else (cond \n                    \
    \  [(char->integer c) (char->integer c)] \n                      [else (cond \n\
    \                        [(char->integer c) (char->integer c)] \n            \
    \            [else (cond \n                          [(char->integer c) (char->integer\
    \ c)] \n                          [else (cond \n                            [(char->integer\
    \ c) (char->integer c)] \n                            [else (cond \n         \
    \                     [(char->integer c) (char->integer c)] \n               \
    \               [else (cond \n                                [(char->integer\
    \ c) (char->integer c)] \n                                [else (cond \n     \
    \                             [(char->integer c) (char->integer c)] \n       \
    \                           [else (cond \n                                   \
    \ [(char->integer c) (char->integer c)] \n                                   \
    \ [else (cond \n                                      [(char->integer c) (char->integer\
    \ c)] \n                                      [else (cond \n                 \
    \                       [(char->integer c) (char->integer c)] \n             \
    \                           [else (cond \n                                   \
    \       [(char->integer c) (char->integer c)] \n                             \
    \             [else (cond \n                                            [(char->integer\
    \ c) (char->integer c)] \n                                            [else (cond\
    \ \n                                              [(char->integer c) (char->integer\
    \ c)] \n                                              [else (cond \n         \
    \                                       [(char->integer c) (char->integer c)]\
    \ \n                                                [else (cond \n           \
    \                                       [(char->integer c) (char->integer c)]\
    \ \n                                                  [else (cond \n         \
    \                                           [(char->integer c) (char->integer\
    \ c)] \n                                                    [else (cond \n   \
    \                                                   [(char->integer c) (char->integer\
    \ c)] ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                       #\\W #\\X #\\Y #\\Z))\
    \ (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                                #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \          #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                                #\\W #\\\
    X #\\Y #\\Z)))\n     (string-append (map string->char (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \                    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                                #\\W #\\X #\\Y #\\Z)))\n \
    \    (string-append (map string->char (map char->string '(#\\A #\\B #\\C #\\D\
    \ #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                                       #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map string->char (", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                            [(equal? (first s) (second s)) (cond\n\
    \                                                            [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                              [(equal? (first s) (second s)) (cond\n        \
    \                                                                            \
    \                            [(equal? (first s) (second s)) (cond\n          \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                      [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         [(equal? (first s) (second s)) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (second s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (second s)) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (second s)) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (second s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        ", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first ", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                  \
    \         #\\R #\\S #\\T #\\U #\\V \n                                        \
    \   #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n     \
    \                                                  #\\R #\\S #\\T #\\U #\\V \n\
    \                                                       #\\W #\\X #\\Y #\\Z))\n\
    \                    (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                                   #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                                   #\\\
    R #\\S #\\T #\\U #\\V \n                                                   #\\\
    W #\\X #\\Y #\\Z)))]\n    [else (cons (first s)\n               (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                     #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (cons\
    \ (upper (car s)) \n                                (solve (substring (substring\
    \ s 0 1) (length s) (substring s 1)))]\n    [else (cons (car s) (solve (substring\
    \ s 0 1)))]))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\
    \ [(empty? s) s]\n        [(character? (car s)) (cons (char->upper (car s)) (reverse\
    \ (solve (cdr s))))]\n        [else (cons (char->lower (car s)) (reverse (solve\
    \ (cdr s))))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,recursion\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                     \
    \                  #\\R #\\S #\\T #\\U #\\V \n                               \
    \        #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                   #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                   #\\R #\\\
    S #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (first s)) (cons (reverse (first s)) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \              #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A\
    \ #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n      \
    \                              #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                  \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \            #\\W #\\X #\\Y #\\Z)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter? (first\
    \ s)) (cond\n                            [(equal? (first s) (first s)) (cond\n\
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (first s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (first s) (first s)", "  (cond\n \
    \   [(empty? s) s]\n    [(char? (car s)) (cond\n                       [(char?\
    \ (car s)) (cond\n                                        [(char? (car s)) (cond\n\
    \                                                         [(char? (car s)) (cond\n\
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n                \
    \            [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n  \
    \                          [(char-upper? (car s)) (cons (char-lower? (car s))\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-upper? (car s)) (cons (car s)\
    \ (cdr s))]\n                            [(char-lower? (car s)) (cons (car s)\
    \ (cdr s))]", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (second s)]\n    [else (cons (first s)\n                (solve (second s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                 #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \         #\\W #\\X #\\Y #\\Z))))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond [(empty? s) s]\n        [(character? s) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-code (first s)) 65) (cond [(equal? (char-code (first\
    \ s)) 97) (cond [(equal? (char-", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n \
    \                                     #\\R #\\S #\\T #\\U #\\V \n            \
    \                          #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                         \
    \          #\\R #\\S #\\T #\\U #\\V \n                                   #\\W\
    \ #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (substring (second s) 0 (- (length s)\
    \ 1)))\n                (solve (substring (second s) 1 (- (length s) 1)))\n  \
    \              (solve (substring (second s) 2 (- (length s) 1)))\n           \
    \     (solve (substring (second s) 3 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 4 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 5 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 6 (- (length s) 1)))\n                (solve (substring (second s) 7 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 8 (- (length s) 1)))\n\
    \                (solve (substring (second s) 9 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 10 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 11 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 12 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 13 (- (length s) 1)))\n                (solve (substring (second s) 14 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 15 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 16 (- (length s) 1)))\n\
    \                (solve (substring (second s) 17 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 18 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 19 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 20 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 21 (- (length s) 1)))\n                (solve (substring (second s) 22 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 23 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 24 (- (length s) 1)))\n\
    \                (solve (substring (second s) 25 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 26 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 27 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 28 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 29 (- (length s) 1)))\n                (solve (substring (second s) 30 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 31 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 32 (- (length s) 1)))\n\
    \                (solve (substring (second s) 33 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n  \
    \  [(equal? (first s) (first s)) (cond\n      [(char? (first s)) (cond\n     \
    \   [(equal? (first s) (first s)) (cond\n          [(char? (first s)) (cond\n\
    \            [(equal? (first s) (first s)) (cond\n              [(char? (first\
    \ s)) (cond\n                [(char? (first s)) (cond\n                  [(equal?\
    \ (first s) (first s)) (cond\n                    [(char? (first s)) (cond\n \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \      [(char? (first s)) (cond\n                          [(equal? (first s)\
    \ (first s)) (cond\n                            [(char? (first s)) (cond\n   \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                    [(char? (first s)) (cond\n                              \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \ [(char? (first s)) (cond\n                                      [(equal? (first\
    \ s) (first s)) (cond\n                                        [(char? (first\
    \ s)) (cond\n                                          [(equal? (first s) (first\
    \ s)) (cond\n                                            [(char? (first s)) (cond\n\
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                [(char? (first s)) (cond\n  \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                    [(char? (first s))\
    \ (cond\n                                                      [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \  [(char? (first s)) (cond\n                                                \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                               [(char? (first s)) (cond\n                   \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                [(char? (first\
    \ s)) (cond\n                                                                \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                               [(char? (first s)) (cond\n                   \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \        [(char? (first s)) (cond\n                                          \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                     [(char?\
    \ (first s)) (cond\n                                                         \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                              [(char? (first\
    \ s)) (cond\n                                                                \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                               [(char? (first\
    \ s)) (cond\n                                                                \
    \                      [(equal? (first s) (first s)) (cond\n                 \
    \                                                                       [(char?\
    \ (first s)) (cond\n                                                         \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \          [(char? (first s)) (cond\n                                        \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                [(char? (first s)) (cond\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q \n                                       #\\R #\\S #\\T\
    \ #\\U #\\V \n                                       #\\W #\\X #\\Y #\\Z))) \n\
    \     (string-append (map string->char (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                           \
    \                            #\\R #\\S #\\T #\\U #\\V \n                     \
    \                                  #\\W #\\X #\\Y #\\Z))\n                   \
    \ (map string->char (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\\
    h #\\i #\\j \n                                                       #\\k #\\\
    l #\\m #\\n #\\o #\\p #\\q \n                                                \
    \       #\\r #\\s #\\t #\\u #\\v \n                                          \
    \             #\\w #\\x #\\y #\\z)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your solution,\
    \ but I wonder if it can be done without using recursion. My solution uses recursion,\
    \ but I wonder if it can be done without it.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char->lower (car s)) (car s)) (concat \n                                  \
    \                                     (char->upper (car s)) \n               \
    \                                                        (solve (rest s)))]\n\
    \                            [(equal? (char->upper (car s)) (car s)) (concat \n\
    \                                                                       (char->lower\
    \ (car s)) \n                                                                \
    \       (solve (rest s)))]\n                            [(equal? (char->lower\
    \ (car s)) (car s)) (concat \n                                               \
    \                        (char->upper (car s)) \n                            \
    \                                           (solve (rest s)))]\n             \
    \               [(equal? (char->upper (car s)) (car s)) (concat \n           \
    \                                                            (char->lower (car\
    \ s)) \n                                                                     \
    \  (solve (rest s)))]\n                            [(equal? (char->lower (car\
    \ s)) (car s)) (concat \n                                                    \
    \                   (char->upper (car s)) \n                                 \
    \                                      (solve (rest s)))]\n                  \
    \          [(equal? (char->upper (car s)) (car s)) (concat \n                \
    \                                                       (char->lower (car s))\
    \ \n                                                                       (solve\
    \ (rest s)))]\n                            [(equal? (char->lower (car s)) (car\
    \ s)) (concat \n                                                             \
    \          (char->upper (car s)) \n                                          \
    \                             (solve (rest s)))]\n                           \
    \ [(equal? (char->upper (car s)) (car s)) (concat \n                         \
    \                                              (char->lower (car s)) \n      \
    \                                                                 (solve (rest\
    \ s)))]\n                            [(equal? (char->lower (car s)) (car s)) (concat\
    \ \n                                                                       (char->upper\
    \ (car s)) \n                                                                \
    \       (solve (rest s)))]\n                            [(equal? (char->upper\
    \ (car s)) (car s)) (concat \n                                               \
    \                        (char->lower (car s)) \n                            \
    \                                           (solve (rest s)))]\n             \
    \               [(equal? (char->lower (car s)) (car s)) (concat \n           \
    \                                                            (char->upper (car\
    \ s)) \n                                                                     \
    \  (solve (rest s)))]\n                            [(equal? (char->upper (car\
    \ s)) (car s)) (concat \n                                                    \
    \                   (char->lower (car s)) \n                                 \
    \                                      (solve (rest s)))]\n                  \
    \          [(equal? (char->lower (car s)) (car s)) (concat \n                \
    \                                                       (char->upper (car s))\
    \ \n                                                                       (solve\
    \ (rest ", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (char->upper-case\
    \ (first s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(upper? (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                   [(lower? (first s)) (cons (first s) (solve (rest s)))]\n \
    \                           [else (cons (first s) (solve (rest s)))])]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,string\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                            [(lower? (first s)) (cond\n                     \
    \                          [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                               [else (cons (first s) (solve (rest\
    \ s)))])]\n                            [else (cons (first s) (solve (rest s)))])]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=scheme,racket,recursion\
    \ |>\n<| a tags=scheme,racket,recursion |>\n<code>", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                           #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                           #\\R #\\S #\\\
    T #\\U #\\V \n                                           #\\W #\\X #\\Y #\\Z)))\n\
    \     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                   #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q \n                                   #\\R #\\S #\\T #\\U #\\V \n           \
    \                        #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n        \
    \                               #\\R #\\S #\\T #\\U #\\V \n                  \
    \                     #\\W #\\X #\\Y #\\Z))) \n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                         \
    \          #\\R #\\S #\\T #\\U #\\V \n                                   #\\W\
    \ #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I tried your solution and\
    \ it works perfectly for \"1234\", but when I try \"ab\" it returns \"aB\" instead\
    \ of \"AB\". Do you know why this happens?\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to fix the problem you mentioned.\n<|/ c |>\n<| c |>\nThank you very much! I\
    \ really appreciate your help.\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad I\
    \ could help.\n<|/ c |>\n<| a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z))) \n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                   #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \  #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (second s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(character? (car s)) (cond\n                        \
    \    [(equal? (char-code (car s)) 97) (cond\n                                \
    \                      [(equal? (char-code (car s)) 65) (cond\n              \
    \                                                                    [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                           [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                 [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                           [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                            [(equal? (char-code (car s)) 65)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (char-code (car s)) 65) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (cond\n       [(empty? (rest\
    \ s)) s]\n       [(member (first s) (map char->string '(#\\a #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j \n                                             #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                  \
    \                           #\\w #\\x #\\y #\\z))\n        (cond\n          [(empty?\
    \ (rest s)) s]\n          [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \             #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n \
    \                                                  #\\W #\\X #\\Y #\\Z))\n   \
    \        (cond\n             [(empty? (rest s)) s]\n             [(member (first\
    \ s) (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n\
    \                                                      #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                                      \
    \                #\\w #\\x #\\y #\\z))\n              (cond\n                [(empty?\
    \ (rest s)) s]\n                [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \                          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T ",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                          [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                            [(equal? (char-code (car s)) 65)\
    \ (cond\n                                                                    \
    \                                                              [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                 [(equal? (char-code (car s)) 65) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (char-code (car s)) 97) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (char-code (car s)) 65) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (char-code (car s)) 97) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (char-code (car s)) 65) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (char-code (car s)) 65) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   [(equal? (char-code (car s)) 97) (cond\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (char-code (car s)) 65) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (char-code (car s)) 65) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (char-code (car s)) 97) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      [(", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                                   #\\W #\\X #\\\
    Y #\\Z))))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n   \
    \ [(empty? s) s]\n    [(char? (car s)) (cond\n                       [(char? (car\
    \ s)) (cond\n                                        [(char? (car s)) (cond\n\
    \                                                         [(char? (car s)) (cond\n\
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \              [(char? (car s)) (cond\n                                      \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \                             [(char? (car s)) (cond\n                       \
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                            \
    \                       [(char? (car s)) (cond\n                             \
    \                                                                            \
    \                       [(char? (car s)) (cond\n                             \
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                            \
    \                             [(char? (car s)) (cond\n                       \
    \                                                                            \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                 [(char? (car s)) (cond\n                                   \
    \                                                                            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                       [(char? (car s)) (cond\n                             \
    \                                                                            \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                            \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                               [(char? (car s)) (cond", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                            [(lower?\
    \ (car s)) (cond\n                                                [(upper? (car\
    \ s)) (cons (upper (car s)) (cdr s))]\n                                      \
    \          [(upper? (cdr s)) (cons (lower (car s)) (cdr s))])]\n             \
    \               [(upper? (car s)) (cons (lower (car s)) (cdr s))]\n          \
    \                  [(lower? (car s)) (cons (upper (car s)) (cdr s))])]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=recursion,racket,scheme\
    \ |>\n<| c |>\nThanks for your answer! But I still don't understand why my code\
    \ doesn't work. Could you please explain to me why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nThe code doesn't work because you didn't understand how recursion\
    \ works. You don't need to use cond at all. Just use `(if (character? (car s))\
    \ (cons (upper (car s)) (cdr s)) (cons (lower (car s)) (cdr s)))` instead.\n<|/\
    \ c |>\n<| c |>\nI understand how recursion works. But I don't understand why\
    \ my code doesn't work. Could you please explain to me why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\n\
    Thank you very much! I understand it now!\n<|/ c |>\n<| a tags=recursion,racket,scheme\
    \ |>\nThe problem is that the base case is wrong. Try this:\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cond\n                        \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                      [(equal? (first s) (second (first s))) (cond\n        \
    \                                                                            \
    \      [(equal? (first s) (second (second s))) (cond\n                       \
    \                                                                            \
    \                 [(equal? (first s) (second (third s))) (cond\n             \
    \                                                                            \
    \                                                         [(equal? (first s) (second\
    \ (fourth s))) (cond\n                                                       \
    \                                                                            \
    \                                                 [(equal? (first s) (second (fifth\
    \ s))) (cond\n                                                               \
    \                                                                            \
    \                                                                       [(equal?\
    \ (first s) (second (sixth s))) (cond\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                      [(equal? (first s) (second\
    \ (seventh s))) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (second (eighth s))) (cond\n                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (first s) (second (ninth\
    \ s))) (cond\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (first s) (second (tenth\
    \ s))) (cond\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) (second (eleventh s))) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second (twelfth s))) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (second (thirteenth s))) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) (second (fourteenth s))) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (second (fifteenth s))) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (second (sixteenth s))) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (second (seventeenth s))) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) (second (eighteenth s))) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (second (nineteenth s))) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (second (twentieth s))) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        ", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n       \
    \                [(char? (car s)) (cond\n                                    \
    \    [(char? (car s)) (cond\n                                                \
    \         [(char? (car s)) (cond\n                                           \
    \                               [(char? (car s)) (cond\n                     \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n", "  (cond\n    [(empty? s) s]\n    [(char? (car\
    \ s)) (cond\n                       [(char? (car s)) (cond\n                 \
    \                         [(char? (car s)) (cond\n                           \
    \                             [(char? (car s)) (cond\n                       \
    \                                                   [(char? (car s)) (cond\n \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \   [(char? (car s)) (cond\n                                                 \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                     [(char? (car s)) (cond\n                               \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                                             [(char? (car s)) (cond\n       \
    \                                                                            \
    \                       [(char? (car s)) (cond\n                             \
    \                                                                            \
    \   [(char? (car s)) (cond\n                                                 \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                            [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \     [(char? (car s)) (cond\n                                               \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \                                       [(char? (car s)) (cond\n             \
    \                                                                            \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                            \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                            \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                            \
    \                                   [(char? (car ", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (first s)) (cond\n                             [(lower?\
    \ (first s)) (cond\n                                                [(upper? (first\
    \ s)) (cons (first s) (solve (rest s)))]\n                                   \
    \             [(not (lower? (first s))) (cons (first s) (solve (rest s)))])]\n\
    \                             [(not (character? (first s))) (cons (first s) (solve\
    \ (rest s)))])]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n\
    \                            [(upper? (first s)) (cond\n                     \
    \                           [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                    [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))", "  (cond\n    [(empty? s) s]\n\
    \    [(char? (car s)) (cond\n                      [(char? (car s)) (cond\n  \
    \                                     [(char? (car s)) (cond\n               \
    \                                         [(char? (car s)) (cond\n           \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \      [(char? (car s)) (cond\n                                              \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \     [(char? (car s)) (cond\n                                               \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                           [(char? (car s)) (cond\n                         \
    \                                                                            \
    \   [(char? (car s)) (cond\n                                                 \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                                 [(char? (car\
    \ s)) (cond\n                                                                \
    \                                             [(char? (car s)) (cond\n       \
    \                                                                            \
    \                           [(char? (car s)) (cond\n                         \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                            \
    \             [(char? (car s)) (cond\n                                       \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \       [(char? (car s)) (cond\n                                             \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                            [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                   [(char? (car s)) (cond\n \
    \                                                                            \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                            \
    \                                 [(char? (car s)) (cond\n                   \
    \                                                                            \
    \                        [(char? (car s)) (cond\n                            \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                            \
    \      [(char? (car s)) (cond\n                                              \
    \                  ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\\
    Z)))\n     (cond\n       [(char->boolean (first s)) (cons (char->string (char->boolean\
    \ \n                                                  (first s))) \n         \
    \                            (solve (rest s)))]\n       [else (cons (char->string\
    \ (first s)) (solve (rest s)))]\n       )])\n  )\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (first s)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond \n                            [(equal? (char-code (car s)) 97)\
    \ (cond \n                                [(equal? (char-code (car s)) 65) (cond\
    \ \n                                    [(equal? (char-code (car s)) 97) (cond\
    \ \n                                        [(equal? (char-code (car s)) 65) (cons\
    \ \n                                            (char-code (car s)) (cons (char-code\
    \ (car s)) \n                                            (solve (char-code (cdr\
    \ s)))))]\n                                    [(equal? (char-code (car s)) 97)\
    \ (cons \n                                            (char-code (car s)) (cons\
    \ (char-code (cdr s)) \n                                            (solve (char-code\
    \ (cdr s)))))]\n                                    [(equal? (char-code (car s))\
    \ 65) (cons \n                                            (char-code (car s))\
    \ (cons (char-code (cdr s)) \n                                            (solve\
    \ (char-code (cdr s)))))]\n                                    [(equal? (char-code\
    \ (car s)) 97) (cons \n                                            (char-code\
    \ (car s)) (cons (char-code (cdr s)) \n                                      \
    \      (solve (char-code (cdr s)))))]\n                                    [(equal?\
    \ (char-code (car s)) 65) (cons \n                                           \
    \ (char-code (car s)) (cons (char-code (cdr s)) \n                           \
    \                 (solve (char-code (cdr s)))))]\n                           \
    \         [(equal? (char-code (car s)) 97) (cons \n                          \
    \                  (char-code (car s)) (cons (char-code (cdr s)) \n          \
    \                                  (solve (char-code (cdr s)))))]\n          \
    \                          [(equal? (char-code (car s)) 65) (cons \n         \
    \                                   (char-code (car s)) (cons (char-code (cdr\
    \ s)) \n                                            (solve (char-code (cdr s)))))]\n\
    \                                    [(equal? (char-code (car s)) 97) (cons \n\
    \                                            (char-code (car s)) (cons (char-code\
    \ (cdr s)) \n                                            (solve (char-code (cdr\
    \ s)))))]\n                                    [(equal? (char-code (car s)) 65)\
    \ (cons \n                                            (char-code (car s)) (cons\
    \ (char-code (cdr s)) \n                                            (solve (char-code\
    \ (cdr s)))))]\n                                    [(equal", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (second s)]\n    [else (cons (first s)\n              \
    \  (solve (substring (second s) 0 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 1 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 2 (- (length s) 1)))\n                (solve (substring (second s) 3 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 4 (- (length s) 1)))\n\
    \                (solve (substring (second s) 5 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 6 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 7 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 8 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 9 (- (length s) 1)))\n                (solve (substring (second s) 10 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 11 (- (length s) 1)))\n\
    \                (solve (substring (second s) 12 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 13 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 14 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 15 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 16 (- (length s) 1)))\n                (solve (substring (second s) 17 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 18 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 19 (- (length s) 1)))\n\
    \                (solve (substring (second s) 20 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 21 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 22 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 23 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 24 (- (length s) 1)))\n                (solve (substring (second s) 25 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 26 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 27 (- (length s) 1)))\n\
    \                (solve (substring (second s) 28 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 29 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 30 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 31 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 32 (- (length s) 1)))\n                (solve (substring (second s) 33 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 34 (", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cons (char->upper (first s)) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                                  #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                          #\\W #\\X #\\\
    Y #\\Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \       [(char-lower? (first s)) (cons (char-upper? (first s)) (reverse s))]\n\
    \                            [(char-upper? (first s)) (cons (char-lower? (first\
    \ s)) (reverse s))]\n                            [(char-alpha? (first s)) (cons\
    \ (char-alpha? (first s)) (reverse s))]\n                            [(char-digit?\
    \ (first s)) (cons (char-digit? (first s)) (reverse s))]\n                   \
    \         [(char-symbol? (first s)) (cons (char-symbol? (first s)) (reverse s))]\n\
    \                            [(char-whitespace? (first s)) (cons (char-whitespace?\
    \ (first s)) (reverse s))]\n                            [(char-other? (first s))\
    \ (cons (char-other? (first s)) (reverse s))]\n                            [(char-other?\
    \ (first s)) (cons (char-other? (first s)) (reverse s))]\n                   \
    \         [(char-other? (first s)) (cons (char-other? (first s)) (reverse s))]\n\
    \                            [(char-other? (first s)) (cons (char-other? (first\
    \ s)) (reverse s))]\n                            [(char-other? (first s)) (cons\
    \ (char-other? (first s)) (reverse s))]\n                            [(char-other?\
    \ (first s)) (cons (char-other? (first s)) (reverse s))]\n                   \
    \         [(char-other? (first s)) (cons (char-other? (first s)) (reverse s))]\n\
    \                            [(char-other? (first s)) (cons (char-other? (first\
    \ s)) (reverse s))]\n                            [(char-other? (first s)) (cons\
    \ (char-other? (first s)) (reverse s))]\n                            [(char-other?\
    \ (first s)) (cons (char-other? (first s)) (reverse s))]\n                   \
    \         [(char-other? (first s)) (cons (char-other? (first s)) (reverse s))]\n\
    \                            [(char-other? (first s)) (cons (char-other? (first\
    \ s)) (reverse s))]\n                            [(char-other? (first s)) (cons\
    \ (char-other? (first s)) (reverse s))]\n                            [(char-other?\
    \ (first s)) (cons (char-other? (first s)) (reverse s))]\n                   \
    \         [(char-other? (first s)) (cons (char-other? (first s)) (reverse s))]\n\
    \                            [(char-other? (first s)) (con", "  (cond [(empty?\
    \ s) s]\n        [(letter? (first s)) (cons (first s) (solve (rest s)))]\n   \
    \     [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (car s) (list 'a 'b 'c)) (cond \n      [((char->integer (car\
    \ s)) >= 65) ((char->integer (car s)) - 65)\n       ((char->integer (car s)) <=\
    \ 90) ((char->integer (car s)) + 65)]\n      [else (car s)])]\n    [else (cond\
    \ \n      [else (cond \n        [(member (car s) (list 'A 'B 'C)) (cond \n   \
    \       [((char->integer (car s)) >= 65) ((char->integer (car s)) - 65)\n    \
    \       ((char->integer (car s)) <= 90) ((char->integer (car s)) + 65)]\n    \
    \      [else (car s)])]\n      [else (cond \n        [else (cond \n          [(member\
    \ (car s) (list '0 '1 '2)) (cond \n            [((char->integer (car s)) >= 48)\
    \ ((char->integer (car s)) - 48)\n             ((char->integer (car s)) <= 57)\
    \ ((char->integer (car s)) + 48)]\n            [else (car s)])]\n        [else\
    \ (cond \n          [(member (car s) (list '! '@ '#)) (cond \n            [((char->integer\
    \ (car s)) >= 33) ((char->integer (car s)) - 33)\n             ((char->integer\
    \ (car s)) <= 47) ((char->integer (car s)) + 33)]\n            [else (car s)])]\n\
    \        [else (cond \n          [(member (car s) (list '$ '%)) (cond \n     \
    \       [((char->integer (car s)) >= 36) ((char->integer (car s)) - 36)\n    \
    \         ((char->integer (car s)) <= 63) ((char->integer (car s)) + 36)]\n  \
    \          [else (car s)])]\n        [else (cond \n          [(member (car s)\
    \ (list '^ '_ '~)) (cond \n            [((char->integer (car s)) >= 95) ((char->integer\
    \ (car s)) - 95)\n             ((char->integer (car s)) <= 122) ((char->integer\
    \ (car s)) + 95)]\n            [else (car s)])]\n        [else (cond \n      \
    \    [(member (car s) (list '! '@ '#)) (cond \n            [((char", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \     [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n         \
    \                   [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-upper? (car s)) (cons (car s) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))]",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cond\n        \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                         [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (first s)) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            [(equal", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \     [(lower? (car s)) (cond\n                                              \
    \ [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n                        \
    \                       [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \                            [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n\
    \                            [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=scheme,racket,string\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built-in functions.\
    \ I must use only cond, car, cdr, empty?, lower, upper, char?, equal?, and, or,\
    \ not, andalso, oralso, equalv. Can you please help me with that?\n<|/ c |>\n\
    <| c |>\nI added the solution with only cond, car, cdr, empty?, lower, upper,\
    \ char?, equal?, and, or, not, andalso, oralso, equalv\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any built-in functions. I must use\
    \ only cond, car, cdr, empty?, lower, upper, char?, equal?, and, or, not, andalso,\
    \ oralso, equalv. Can you please help me with that?\n<|/ c |>\n<| c |>\nI added\
    \ the solution with only cond, car, cdr, empty?, lower, upper, char?, equal?,\
    \ and, or, not, andalso, oralso, equalv\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (reverse (first\
    \ s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n \
    \   [else (cons (first s)\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (solve (substring s 1 (- (length s)\
    \ 1)))\n                (solve (substring s 0 (- (length s) 1)))\n           \
    \     (solve (substring s 1 (- (length s) 1)))\n                (solve (substring\
    \ s 0 (- (length s) 1)))\n                (", "  (cond\n    [(empty? s) s]\n \
    \   [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G\
    \ #\\H #\\I #\\J \n                                          #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \         #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B\
    \ #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \   #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n           \
    \                         #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a tags=scheme,racket,string |>\n<| c |>\nI appreciate\
    \ your efforts, but I already solved it myself and posted my answer. Thanks anyway!\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I already solved it myself and\
    \ posted my answer. Thanks anyway!\n<|/ c |>\n<| a tags=scheme,racket,string |>\n\
    I already solved it myself and posted my answer. Thanks anyway!\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cond\n                        \
    \    [(upper? (first s)) (cond\n                                             \
    \  [(lower? (first s)) (first s)\n                                           \
    \      (reverse (first s))]\n                                               [(upper?\
    \ (first s)) (first s)\n                                                 (reverse\
    \ (first s))]\n                                               [(lower? (first\
    \ s)) (first s)\n                                                 (reverse (first\
    \ s))]\n                                               [(lower? (first s)) (first\
    \ s)\n                                                 (reverse (first s))]\n\
    \                                               [(upper? (first s)) (first s)\n\
    \                                                 (reverse (first s))]\n     \
    \                                          [(upper? (first s)) (first s)\n   \
    \                                              (reverse (first s))]\n        \
    \                                       [(lower? (first s)) (first s)\n      \
    \                                           (reverse (first s))]\n           \
    \                                    [(lower? (first s)) (first s)\n         \
    \                                        (reverse (first s))]\n              \
    \                                 [(upper? (first s)) (first s)\n            \
    \                                     (reverse (first s))]\n                 \
    \                              [(upper? (first s)) (first s)\n               \
    \                                  (reverse (first s))]\n                    \
    \                           [(lower? (first s)) (first s)\n                  \
    \                               (reverse (first s))]\n                       \
    \                        [(lower? (first s)) (first s)\n                     \
    \                            (reverse (first s))]\n                          \
    \                     [(upper? (first s)) (first s)\n                        \
    \                         (reverse (first s))]\n                             \
    \                  [(upper? (first s)) (first s)\n                           \
    \                      (reverse (first s))]\n                                \
    \               [(lower? (first s)) (first s)\n                              \
    \                   (reverse (first s))]\n                                   \
    \            [(lower? (first s)) (first s)\n                                 \
    \                (reverse (first s))]\n                                      \
    \         [(upper? (first s)) (first s)\n                                    \
    \             (reverse (first s))]\n                                         \
    \      [(upper? (first s)) (first s)\n                                       \
    \          (reverse (first s))]\n                                            \
    \   [(lower? (first s)) (first s)\n                                          \
    \       (reverse (first s))]\n                                               [(lower?\
    \ (first s)) (first s)\n                                                 (reverse\
    \ (first s))]\n                                               [(upper? (first\
    \ s)) (first s)\n                                                 (reverse (first\
    \ s))]\n                                               [(upper? (first s)) (first\
    \ s)\n                                                 (reverse (first s))]\n\
    \                                               [(lower? (first s)) (first s)\n\
    \                                                 (reverse (first s))]\n     \
    \                                          [(lower? (first s)) (first s)\n   \
    \                                              (reverse (first s))]\n        \
    \                                       [(upper? (first s)) (first s)\n      \
    \                                           (reverse (first s))]\n           \
    \                                    [(upper? (first s)) (first s)\n         \
    \                                        (reverse (first s))]\n              \
    \                                 [(lower? (first s)) (first s)\n            \
    \                                     (reverse (first s))", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char-code (car s)) 97) (cond \n                                           \
    \                 [(equal? (char-code (car s)) 65) (cons \n                  \
    \                                                                        (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 65) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 97) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 65) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 97) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 65) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 97) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 65) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 97) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr s)))))]\n                                       \
    \                     [(equal? (char-code (car s)) 65) (cons \n              \
    \                                                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \                                                                            \
    \       (solve (reverse (cdr", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                  #\\W #\\X #\\Y #\\Z)))\n\
    \     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                  #\\W #\\X #\\Y\
    \ #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                          #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q \n                                          #\\R #\\S #\\T #\\U #\\V \n    \
    \                                      #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n            \
    \                       #\\R #\\S #\\T #\\U #\\V \n                          \
    \         #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s) (solve\
    \ (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n\
    \                       [(char? (car s)) (cond\n                             \
    \           [(char? (car s)) (cond\n                                         \
    \                [(char? (car s)) (cond\n                                    \
    \                                      [(char? (car s)) (cond\n              \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n", "  (cond\n    [(empty? s) s]\n   \
    \ [(character? (first s)) (cons (second s) (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cond\n                            [(equal? (first s) (first s))\
    \ (cond\n                                                        [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (first s) (first s)) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (first s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                     [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (first s)) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                       ", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (upper-case (solve (cdr s)))]\n\
    \    [else (lower-case (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n\
    \    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s) (solve (substring (second s) 0 1)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n\
    \        [(character? (car s)) (cond [(equal? (char-code (car s)) 65) (cond [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (cons (char-code (make-char\
    \ (char-code (car s)) 97)) (solve (reverse (cdr s))))])\n                    \
    \                    [(equal? (char-code (car s)) 97) (cons (char-code (car s))\
    \ (cons (char-code (make-char (char-code (car s)) 65)) (solve (reverse (cdr s))))])\n\
    \                                        [(equal? (char-code (car s)) 65) (cons\
    \ (char-code (car s)) (cons (char-code (make-char (char-code (car s)) 97)) (solve\
    \ (reverse (cdr s))))])\n                                        [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (cons (char-code (make-char (char-code\
    \ (car s)) 65)) (solve (reverse (cdr s))))])\n                               \
    \         [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (cons (char-code\
    \ (make-char (char-code (car s)) 97)) (solve (reverse (cdr s))))])\n         \
    \                               [(equal? (char-code (car s)) 97) (cons (char-code\
    \ (car s)) (cons (char-code (make-char (char-code (car s)) 65)) (solve (reverse\
    \ (cdr s))))])\n                                        [(equal? (char-code (car\
    \ s)) 65) (cons (char-code (car s)) (cons (char-code (make-char (char-code (car\
    \ s)) 97)) (solve (reverse (cdr s))))])\n                                    \
    \    [(equal? (char-code (car s)) 97) (cons (char-code (car s)) (cons (char-code\
    \ (make-char (char-code (car s)) 65)) (solve (reverse (cdr s))))])\n         \
    \                               [(equal? (char-code (car s)) 65) (cons (char-code\
    \ (car s)) (cons (char-code (make-char (char-code (car s)) 97)) (solve (reverse\
    \ (cdr s))))])\n                                        [(equal? (char-code (car\
    \ s)) 97) (cons (char-code (car s)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
