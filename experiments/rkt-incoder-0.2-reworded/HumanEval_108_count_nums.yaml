name: HumanEval_108_count_nums
language: rkt
prompt: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
  \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a\
  \ number is negative, then its first signed digit will be negative:\n;; e.g. -123\
  \ has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums\
  \ (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums\
  \ arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1\
  \ -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
  \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
  \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
  \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
  \ 1)) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+\
    \ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (+ 1 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n\
    \    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first\
    \ arr (+ 1 0))) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr))\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(number? (car arr))\
    \ (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr))\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
