name: HumanEval_22_filter_integers
language: rkt
prompt: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
  ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
  \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
  \ values)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
  \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n", "  (cond\n    [(empty? values) '()]\n    [(number? values)\
    \ values]))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x y)\n            (and (number? x) (number? y))\n          \
    \  (not (and (symbol? x) (symbol? y))))\n          values))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x)))\n         values))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (first values) (filter_integers (rest values)))]))\n", "  (cond [(null?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (cond [(null? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter\
    \ (lambda (x y)\n            (and (number? x)\n                 (number? y)))\n\
    \          values))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [(symbol?\
    \ values) (list values)]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (let ([integers (filter (lambda (x) (number? x))\n                          \
    \ (values '()))])\n    (if (null? integers)\n        (values '())\n        (append\
    \ integers (filter (lambda (x) (not (number? x))) integers)))))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (let ([integers (filter (lambda\
    \ (x) (number? x))\n                           (values rkt/values))])\n    (if\
    \ (null? integers)\n        values\n        (cons (first integers) (filter_integers\
    \ (rest integers))))))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n   \
    \     [(number? values) values]\n        [else (cons (first values) (filter_integers\
    \ (rest values)))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (cond\n    [(empty?\
    \ values) '()]\n    [(number? (first values)) (cons (first values) (filter_integers\
    \ (rest values)))]\n    [else (filter_integers (rest values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (filter (lambda (v)\
    \ (and (number? v) (integer? v)))\n         values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (cond [(null? values) '()]\n\
    \        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n        [else\
    \ (filter_integers (cdr values))]))\n", "  (let ([integers (filter (lambda (x)\
    \ (number? x))\n                           (map number? values))])\n    (if (null?\
    \ integers)\n        values\n        (cons (first integers)\n               (filter_integers\
    \ (rest integers))))))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond [(null? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (let ([integers (filter\
    \ (lambda (x) (number? x))\n                           (values '()))])\n    (if\
    \ (null? integers)\n        (values '())\n        (cons (first integers) (filter_integers\
    \ (rest integers))))))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (append (filter_integers (first values))\n                      (filter_integers\
    \ (rest values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n        [else\
    \ (filter_integers (cdr values))]))\n", "  (cond [(empty? values) '()]\n     \
    \   [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \        [else (filter_integers (cdr values))]))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? values) values]\n        [else (append (filter_integers\
    \ (first values))\n                      (filter_integers (rest values)))]))\n",
  "  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons (first\
    \ values) (filter_integers (rest values)))]\n    [else (filter_integers (rest\
    \ values))]))\n", "  (filter (lambda (v) (and (number? v) (integer? v)))\n   \
    \      values))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\n \
    \        values))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (append (filter_integers (first values))\n                      (filter_integers\
    \ (rest values)))]))\n", "  (cond\n    ((null? values) values)\n    ((number?\
    \ values) values)\n    ((not (pair? values)) (filter_integers values))\n    ((not\
    \ (list? values)) (filter_integers values))\n    ((not (symbol? values)) (filter_integers\
    \ values))\n    ((not (boolean? values)) (filter_integers values))\n    ((not\
    \ (vector? values)) (filter_integers values))\n    ((not (hash? values)) (filter_integers\
    \ values))\n    ((not (set? values)) (filter_integers values))\n    ((not (procedure?\
    \ values)) (filter_integers values))\n    ((not (function? values)) (filter_integers\
    \ values))\n    ((not (symbol? values)) (filter_integers values))\n    ((not (number?\
    \ values)) (filter_integers values))\n    ((not (boolean? values)) (filter_integers\
    \ values))\n    ((not (vector? values)) (filter_integers values))\n    ((not (hash?\
    \ values)) (filter_integers values))\n    ((not (set? values)) (filter_integers\
    \ values))\n    ((not (procedure? values)) (filter_integers values))\n    ((not\
    \ (function? values)) (filter_integers values))\n    ((not (symbol? values)) (filter_integers\
    \ values))\n    ((not (number? values)) (filter_integers values))\n    ((not (boolean?\
    \ values)) (filter_integers values))\n    ((not (vector? values)) (filter_integers\
    \ values))\n    ((not (hash? values)) (filter_integers values))\n    ((not (set?\
    \ values)) (filter_integers values))\n    ((not (procedure? values)) (filter_integers\
    \ values))\n    ((not (function? values)) (filter_integers values))\n    ((not\
    \ (symbol? values)) (filter_integers values))\n    ((not (number? values)) (filter_integers\
    \ values))\n    ((not (boolean? values)) (filter_integers values))\n    ((not\
    \ (vector? values)) (filter_integers values))\n    ((not (hash? values)) (filter_integers\
    \ values))\n    ((not (set? values)) (filter_integers values))\n    ((not (procedure?\
    \ values)) (filter_integers values))\n    ((not (function? values)) (filter_integers\
    \ values))\n    ((not (symbol? values)) (filter_integers values))\n    ((not (number?\
    \ values)) (filter_integers values))\n    ((not (boolean? values)) (filter_integers\
    \ values))\n    ((not (vector? values)) (filter_integers values))\n    ((not (hash?\
    \ values)) (filter_integers ", "  (cond [(null? values) '()]\n        [(number?\
    \ values) values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (filter (lambda (item)\n\
    \            (and (number? item)\n                 (not (list? item))))\n    \
    \      values))\n", "  (let ([integers (filter (lambda (x) (number? x))\n    \
    \                       (values '()))])\n    (if (null? integers)\n        (values\
    \ '())\n        (cons (car integers) (filter_integers (cdr integers))))))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (first values) (filter_integers (rest values)))]))\n", "  (cond\n    [(empty?\
    \ values) '()]\n    [(number? values) values]))\n", "  (cond [(null? values) '()]\n\
    \        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n        [else\
    \ (filter_integers (cdr values))]))\n", "  (cond [(null? values) '()]\n      \
    \  [(number? values) values]\n        [(list? values) (filter_integers (cdr values))]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (let\
    \ ([integers (map integer? values)]\n        [integers (filter integers? values)])\n\
    \    (cond [(empty? integers) '()]\n          [else (cons (first integers) (filter_integers\
    \ integers))])))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (cond [(null? values) '()]\n\
    \        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [(symbol?\
    \ values) (list values)]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(null? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(null?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n        [(number?\
    \ values) values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (append (filter_integers\
    \ (first values))\n                      (filter_integers (rest values)))]))\n",
  "  (filter (lambda (val) (and (number? val) (integer? val))) values))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? (car values)) (cons (car values) (filter_integers (cdr\
    \ values)))]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (cond [(null? values) '()]\n\
    \        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (filter (lambda (x y)\n            (and (number? x)\
    \ (number? y))\n            (not (and (list? x) (list? y)))\n            (not\
    \ (and (symbol? x) (symbol? y)))\n            (not (and (boolean? x) (boolean?\
    \ y)))\n            (not (and (symbol? (car x)) (symbol? (car y))))\n        \
    \    (not (and (boolean? (car x)) (boolean? (car y))))\n            (not (and\
    \ (list? (car x)) (list? (car y))))\n            (not (and (symbol? (cadr x))\
    \ (symbol? (cadr y))))\n            (not (and (boolean? (cadr x)) (boolean? (cadr\
    \ y))))\n            (not (and (list? (cadr x)) (list? (cadr y))))\n         \
    \   (not (and (symbol? (caddr x)) (symbol? (caddr y))))\n            (not (and\
    \ (boolean? (caddr x)) (boolean? (caddr y))))\n            (not (and (list? (caddr\
    \ x)) (list? (caddr y))))\n            (not (and (symbol? (cadddr x)) (symbol?\
    \ (cadddr y))))\n            (not (and (boolean? (cadddr x)) (boolean? (cadddr\
    \ y))))\n            (not (and (list? (cadddr x)) (list? (cadddr y))))\n     \
    \       (not (and (symbol? (caddrr x)) (symbol? (caddrr y))))\n            (not\
    \ (and (boolean? (caddrr x)) (boolean? (caddrr y))))\n            (not (and (list?\
    \ (caddrr x)) (list? (caddrr y))))\n            (not (and (symbol? (caddrdr x))\
    \ (symbol? (caddrdr y))))\n            (not (and (boolean? (caddrdr x)) (boolean?\
    \ (caddrdr y))))\n            (not (and (list? (caddrdr x)) (list? (caddrdr y))))\n\
    \            (not (and (symbol? (caddr x)) (symbol? (caddr y))))\n           \
    \ (not (and (boolean? (caddr x)) (boolean? (caddr y))))\n            (not (and\
    \ (list? (caddr x)) (list? (caddr y))))\n            (not (and (symbol? (cadddr\
    \ x)) (symbol? (cadddr y))))\n            (not (and (boolean? (cadddr x)) (",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? (first values)) (cons (first values) (filter_integers\
    \ (rest values)))]\n        [else (filter_integers (rest values))]))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? (car values)) (cons (car values) (filter_integers (cdr\
    \ values)))]\n        [else (filter_integers (cdr values))]))\n", "  (let ([integers\
    \ (filter (lambda (x) (number? x))\n                           (map number? values))])\n\
    \    (if (null? integers)\n        values\n        (cons (first integers) (filter_integers\
    \ (rest integers))))))\n", "  (cond [(empty? values) '()]\n        [(number? (first\
    \ values)) (cons (first values) (filter_integers (rest values)))]\n        [else\
    \ (filter_integers (rest values))]))\n", "  (cond [(null? values) '()]\n     \
    \   [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) x)) values))\n", "  (cond [(empty? values) '()]\n     \
    \   [(number? values) values]\n        [else (cons (first values) (filter_integers\
    \ (rest values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons (first\
    \ values) (filter_integers (rest values)))]\n    [else (filter_integers (rest\
    \ values))]))\n", "  (filter (lambda (v) (and (number? v) (integer? v)))\n   \
    \      values))\n", "  (filter (lambda (x) (and (number? x) x)) values))\n", " \
    \ (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (cond [(empty? values) '()]\n    \
    \    [(number? values) values]\n        [else (cons (first values) (filter_integers\
    \ (rest values)))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond [(empty? values) '()]\n        [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond [(empty? values) '()]\n        [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n", "  (filter (lambda (v) (and (number? v) (integer? v)))\n\
    \         values))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [(symbol? values) '()]\n        [(list? values) (filter_integers\
    \ (cdr values))]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (filter (lambda (v) (and\
    \ (number? v) (integer? v))) values))\n", "  (filter (lambda (v) (and (number?\
    \ v) (integer? v))) values))\n", "  (cond [(empty? values) '()]\n        [(number?\
    \ values) values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n    [else (filter_integers (cdr values))]))\n",
  "  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons (first\
    \ values) (filter_integers (rest values)))]\n    [else (filter_integers (rest\
    \ values))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n", "  (let ([integers (filter (lambda (x) (number? x))\n \
    \                          (values '()))])\n    (if (null? integers)\n       \
    \ values\n        (cons (first integers) (filter_integers (rest integers))))))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) (list values)]\n     \
    \   [else (append (filter_integers (first values))\n                      (filter_integers\
    \ (rest values)))]))\n", "  (cond\n    [(empty? values) '()]\n    [(number? values)\
    \ values]\n    [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(null?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (cond [(empty? values) '()]\n    \
    \    [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \        [else (filter_integers (cdr values))]))\n", "  (cond\n    [(empty? values)\
    \ '()]\n    [(number? values) values]))\n", "  (cond [(null? values) '()]\n  \
    \      [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (filter (lambda (val) (and (number? val) (integer?\
    \ val)))\n         values))\n", "  (cond [(empty? values) '()]\n        [(number?\
    \ values) values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (first values) (filter_integers (rest values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (first values) (filter_integers (rest values)))]))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (cond\n    [(empty? values)\
    \ '()]\n    [(number? (first values)) (cons (first values) (filter_integers (rest\
    \ values)))]\n    [else (filter_integers (rest values))]))\n", "  (cond [(null?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (cond [(null? values) '()]\n     \
    \   [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (append (filter_integers\
    \ (first values))\n                      (filter_integers (rest values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (first values) (filter_integers (rest values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (cond [(null? values) '()]\n\
    \        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (let ([integers (map integer? values)])\n    (if (null? integers)\n        values\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n", "  (let\
    \ ([integers (map integer? values)])\n    (cond [(empty? integers) values]\n \
    \         [else (cons (first integers) (filter_integers (rest integers)))])))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (let ([integers (filter (lambda (x)\
    \ (number? x))\n                           (values '()))])\n    (if (null? integers)\n\
    \        (values '())\n        (cons (first integers) (filter_integers (rest integers))))))\n",
  "  (cond [(empty? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(null? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond\n    [(empty? values) '()]\n    [(number? values)\
    \ values]))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (cond [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (let ([integers (filter (lambda (x) (and (number? x) (integer? x)))\n       \
    \                     values))])\n    (if (null? integers)\n        '()\n    \
    \    (cons (first integers) (filter_integers (rest integers))))))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (first values) (filter_integers (rest values)))]))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond\n \
    \   [(empty? values) '()]\n    [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n    [else (filter_integers (cdr values))]))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? values) (list values)]\n        [else (append (filter_integers\
    \ (first values))\n                    (filter_integers (rest values)))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (car values) (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (cond [(null? values) '()]\n    \
    \    [(number? values) values]\n        [(list? values) (filter_integers (map\
    \ filter_integers values))]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(null? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond\n    [(empty? values) '()]\n    [(number? values)\
    \ values]))\n", "  (cond\n    [(empty? values) '()]\n    [(number? (first values))\
    \ (cons (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n", "  (cond [(empty? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (first values) (filter_integers (rest values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(null? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [(list? values) (filter_integers values)]\n        [else (cons\
    \ (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty? values)\
    \ '()]\n        [(number? (car values)) (cons (car values) (filter_integers (cdr\
    \ values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n\
    \        [(number? values) values]\n        [else (append (filter_integers (first\
    \ values))\n                      (filter_integers (rest values)))]))\n", "  (cond\
    \ [(null? values) '()]\n        [(number? values) values]\n        [else (cons\
    \ (car values) (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n   \
    \     [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \        [else (filter_integers (cdr values))]))\n", "  (cond [(null? values)\
    \ '()]\n        [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (cond [(empty?\
    \ values) '()]\n        [(number? values) values]\n        [else (cons (first\
    \ values) (filter_integers (rest values)))]))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n   \
    \     [(number? values) values]\n        [else (cons (first values) (filter_integers\
    \ (rest values)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
