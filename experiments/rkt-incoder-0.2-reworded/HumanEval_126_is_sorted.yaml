name: HumanEval_126_is_sorted
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return whether or not they are\
  \ sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n\
  ;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n\
  ;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n\
  ;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n\
  ;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1\
  \ 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted\
  \ (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: ["  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n\
    \        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n      \
    \  ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (first lst) (first lst)) #t)\n     \
    \   (else (is_sorted (rest lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n            (tail (cdr\
    \ lst)))\n        (if (= head (car tail))\n            (is_sorted tail)\n    \
    \        (is_sorted (cons head tail))))))\n", "  (cond ((null? lst) #f)\n    \
    \    ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else #f]))\n", "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n\
    \            (tail (cdr lst)))\n        (if (= head (car tail))\n            (is_sorted\
    \ tail)\n            (is_sorted (cons head tail)))))) ;; #lang racket\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (last lst)) #t)\n        (else (or (is_sorted (subseq lst 0 -1))\n    \
    \               (is_sorted (subseq lst 1 ))))))\n", "  (cond ((null? lst) #f)\n\
    \        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else (< (first lst) (first lst))]))\n", "  (cond\n    [(empty? lst) #t]\n \
    \   [(equal? (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst))\
    \ #t]\n    [else #f]\n  )\n)\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (last lst)) #t)\n        (else (is_sorted (append (list first) (list (first\
    \ lst))) (append (list (last lst)) (list (last lst)))))))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst)\
    \ (rest lst)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", " \
    \ (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest\
    \ lst)) #t]\n    [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (<\
    \ (first lst) (first lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else #f]))\n", "  (cond ((null? lst) #f)\n\
    \        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond [(null? lst) #t]\n        [(equal? (car lst) (cadr lst))\
    \ #t]\n        [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (first lst) (car lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n\
    \            (tail (cdr lst)))\n        (if (= head (car tail))\n            (is_sorted\
    \ tail)\n            (is_sorted (cons head tail))))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (first lst) (first lst))\n         (is_sorted\
    \ (rest lst)))\n        (else (is_sorted (rest lst)))))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst))\
    \ #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n\
    \        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond [(null? lst) #t]\n        [(equal? (first\
    \ lst) (first lst)) #t]\n        [(equal? (first lst) (second lst)) #f]\n    \
    \    [else (is_sorted (cons (first lst) (second lst)))]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (first lst) (last lst)) #t)\n        (else (< (first\
    \ lst) (first lst))\n               (is_sorted (cons (first lst) (tail lst))))))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\
    \ [(null? lst) #f]\n        [(equal? (car lst) (cadr lst)) #t]\n        [else\
    \ (is_sorted (cdr lst))]))\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (car lst)) #t)\n        (else (is_sorted (rest lst)))))\n", "  (cond [(null?\
    \ lst) #f]\n        [(equal? (car lst) (cadr lst)) #t]\n        [else (is_sorted\
    \ (cdr lst))]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n  \
    \          (tail (cdr lst)))\n        (if (= head (car tail))\n            (is_sorted\
    \ tail)\n            (is_sorted (cons head tail))))))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", " \
    \ (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n       \
    \ (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", " \
    \ (cond [(null? lst) #t]\n        [(equal? (car lst) (cadr lst)) #t]\n       \
    \ [else #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (first lst) (second\
    \ lst)) #t)\n        (else (is_sorted (cons (first lst) (second lst)))))\n  )\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (first lst)) #t]\n    [else #f]))\n", "  (cond [(null? lst) #t]\n     \
    \   [(equal? (car lst) (cadr lst)) #t]\n        [else #f]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst)\
    \ (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [(equal? (first lst) (second lst)) #f]\n    [else (is_sorted (sub1 lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (<\
    \ (first lst) (first lst))]))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (first lst) (car lst)) (is_sorted (rest lst)))\n        (else (is_sorted (rest\
    \ lst)))))\n", "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n  \
    \          (tail (cdr lst)))\n        (if (= head tail)\n            #t\n    \
    \        (if (= head (sort tail))\n                #t\n                #f))))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (car lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond [(null?\
    \ lst) #t]\n        [(equal? (first lst) (first lst)) #t]\n        [(equal? (first\
    \ lst) (second lst)) #f]\n        [else (is_sorted (cons (first lst) (second lst)))]))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond [(null? lst) #f]\n        [(equal? (car\
    \ lst) (cadr lst)) #t]\n        [else (is_sorted (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [(equal?\
    \ (first lst) (rest lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (last lst)) #t)\n        (else (< (first lst) (last lst)) (is_sorted (tail\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [(equal? (first lst) (rest lst)) #f]\n    [else (is_sorted (rest\
    \ lst))]\n  ))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest\
    \ lst)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", " \
    \ (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n       \
    \ (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (<\
    \ (first lst) (first lst))]))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond ((null? lst) #f)\n      \
    \  ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond [(null?\
    \ lst) #t]\n        [(equal? (car lst) (cadr lst)) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst))\
    \ #t]\n    [(equal? (first lst) (rest lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond [(null? lst) #t]\n        [(equal? (car lst) (cadr lst))\
    \ #t]\n        [else #f]))\n", "  (cond [(null? lst) #f]\n        [(equal? (car\
    \ lst) (cadr lst)) #t]\n        [else (is_sorted (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (<\
    \ (first lst) (first lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [(equal? (first lst) (second lst)) #f]\n \
    \   [else (is_sorted (subseq lst 1))]))\n", "  (cond [(null? lst) #t]\n      \
    \  [(equal? (car lst) (cadr lst)) #t]\n        [else #f]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (first lst) (first lst))\n         (is_sorted (rest lst)))\n\
    \        (else (and (< (first lst) (first lst))\n                  (is_sorted\
    \ (rest lst))))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond [(null? lst)\
    \ #f]\n        [(equal? (first lst) (first lst)) #t]\n        [else (is_sorted\
    \ (rest lst))]\n        ))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      #f\n      (let ((head (car lst))\n            (tail (cdr lst)))\n\
    \        (if (= head (car tail))\n            (is_sorted tail)\n            (is_sorted\
    \ (cons head tail))))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst)\
    \ (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr\
    \ lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n", " \
    \ (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n       \
    \ (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [(equal? (first lst) (rest lst)) #f]\n   \
    \ [else (is_sorted (rest lst))]))\n", "  (if (null? lst)\n      #f\n      (let\
    \ ((head (car lst))\n            (tail (cdr lst)))\n        (if (null? tail)\n\
    \            #t\n            (if (= head (car tail))\n                #t\n   \
    \             (is_sorted tail))))))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (first\
    \ lst) (car lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n \
    \   [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond [(null? lst) #f]\n      \
    \  [(equal? (car lst) (cadr lst)) #t]\n        [else (is_sorted (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else (< (first lst) (first lst))]))\n", "  (cond [(null? lst) #f]\n       \
    \ [(equal? (car lst) (cadr lst)) #t]\n        [else (is_sorted (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond [(null? lst) #f]\n        [(equal? (first lst) (first lst))\
    \ #t]\n        [else (is_sorted (rest lst))]\n        ))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (< (first lst)\
    \ (first lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst)\
    \ (first lst)) #t]\n    [else (< (first lst) (first lst)) #f]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (first lst) (second lst)) #t)\n        (else (is_sorted\
    \ (cons (first lst) (second lst)))\n              (is_sorted (cons (second lst)\
    \ (first lst))))))\n", "  (cond [(null? lst) #f]\n        [(equal? (car lst) (cadr\
    \ lst)) #t]\n        [else (is_sorted (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (< (first lst)\
    \ (first lst)) #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond ((null? lst) #f)\n      \
    \  ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond [(null? lst) #t]\n        [(equal? (first lst) (second lst)) #t]\n    \
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst)\
    \ (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      #f\n      (let ((head (car lst))\n\
    \            (tail (cdr lst)))\n        (if (= head (car tail))\n            (is_sorted\
    \ tail)\n            (is_sorted (cons head tail))))))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n", " \
    \ (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n       \
    \ (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n        ((equal? (car\
    \ lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [(equal?\
    \ (first lst) (rest lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (cond [(null? lst) #t]\n        [(equal? (car lst) (cadr lst)) #t]\n        [else\
    \ #f]))\n", "  (cond [(null? lst) #t]\n        [(equal? (car lst) (cadr lst))\
    \ #t]\n        [else #f]))\n", "  (cond [(null? lst) #f]\n        [(equal? (first\
    \ lst) (first lst)) #t]\n        [else (is_sorted (rest lst))]\n        ))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (if (null? lst)\n\
    \      #f\n      (let ((head (car lst))\n            (tail (cdr lst)))\n     \
    \   (if (= head (car tail))\n            (is_sorted tail)\n            (not (=\
    \ head (car tail)))))\n      ))\n", "  (cond ((null? lst) #f)\n        ((equal?\
    \ (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n", "  (cond [(null?\
    \ lst) #f]\n        [(equal? (first lst) (car (rest lst))) #t]\n        [else\
    \ (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst)) #t]\n  ))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst))\
    \ #t)\n        (else (is_sorted (cdr lst)))))\n", "  (if (null? lst)\n      #f\n\
    \      (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (= head\
    \ (car tail))\n            (is_sorted tail)\n            (is_sorted (cons head\
    \ tail)))))) ;; #lang racket\n", "  (cond\n    [(empty? lst) #t]\n    [(equal?\
    \ (first lst) (first lst)) #t]\n    [else (< (first lst) (first lst)) #t]\n  ))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [(equal? (first lst) (rest lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else\
    \ #f]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst))\
    \ #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else (< (first lst) (first\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (if (null? lst)\n\
    \      #t\n      (let ((head (car lst))\n            (tail (cdr lst)))\n     \
    \   (if (= head (car tail))\n            (is_sorted tail)\n            (not (=\
    \ head (car tail)))))\n      ))\n", "  (cond [(null? lst) #f]\n        [(equal?\
    \ (first lst) (first lst)) #t]\n        [else (is_sorted (rest lst))]\n      \
    \  ))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst))\
    \ #t]\n    [(equal? (first lst) (rest lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond [(null? lst) #f]\n        [(equal? (car\
    \ lst) (cadr lst)) #t]\n        [else (is_sorted (cdr lst))]))\n", "  (cond ((null?\
    \ lst) #f)\n        ((equal? (first lst) (second lst)) #t)\n        (else (is_sorted\
    \ (cons (first lst) (second lst)))))) ; recurse\n", "  (cond [(empty? lst) #t]\n\
    \        [(equal? (first lst) (first lst)) #t]\n        [else (< (first lst) (first\
    \ lst))]))\n", "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst))\
    \ #t)\n        (else (is_sorted (cdr lst)))))\n", "  (cond ((null? lst) #f)\n\
    \        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr lst)))))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (if (null? lst)\n      #f\n      (let ((head\
    \ (car lst))\n            (tail (cdr lst)))\n        (if (= head (car tail))\n\
    \            (is_sorted tail)\n            (is_sorted (cons head tail)))))) ;;\
    \ #lang racket\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond ((null? lst)\
    \ #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else (is_sorted (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [(equal? (first lst) (rest lst)) #f]\n    [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else (< (first lst) (first lst)) #t]\n    [else #f]\n  ))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (first lst)) #t]\n    [else (< (first lst) (first lst)) #t]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n",
  "  (cond ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (first lst)) #t]\n    [else (< (first lst) (first lst))]))\n", "  (cond\
    \ [(null? lst) #f]\n        [(equal? (first lst) (second lst)) #t]\n        [else\
    \ (is_sorted (rest lst))]\n        ))\n", "  (cond [(empty? lst) #f]\n       \
    \ [(equal? (first lst) (first lst)) #t]\n        [else (is_sorted (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
