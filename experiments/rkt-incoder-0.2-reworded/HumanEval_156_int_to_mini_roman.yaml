name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10)]\n    [else (cons (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    1\"]\n    [(< number 10) (string-append \"x\" (int_to_mini_roman number))]\n \
    \   [else (int_to_mini_roman number) (int_to_mini_roman number - 10)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100) (int_to_mini_roman number % 10)]))\n", "  (cond\n    [(= number\
    \ 0) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_mini_roman number\n                       (quotient number 1000))\n\
    \               (int_to_mini_roman 1000))]\n    [else (cons (int_to_mini_roman\
    \ 1000\n                       (quotient number 1000))\n               (int_to_mini_roman\
    \ 1000))]))\n", "  (cond\n    [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n\
    \    [(= number 2) \"ix\"]\n    [(= number 3) \"xix\"]\n    [(= number 4) \"v\"\
    ]\n    [(= number 5) \"vi\"]\n    [(= number 6) \"vix\"]\n    [(= number 7) \"\
    ixv\"]\n    [(= number 8) \"xixv\"]\n    [(= number 9) \"xvi\"]\n    [(= number\
    \ 10) \"xvix\"]\n    [(= number 11) \"xixvi\"]\n    [(= number 12) \"xixvix\"\
    ]\n    [(= number 13) \"xviix\"]\n    [(= number 14) \"xviixx\"]\n    [(= number\
    \ 15) \"xixvix\"]\n    [(= number 16) \"xixvixx\"]\n    [(= number 17) \"xviixx\"\
    ]\n    [(= number 18) \"xviixxx\"]\n    [(= number 19) \"xixvixx\"]\n    [(= number\
    \ 20) \"xixvixxx\"]\n    [(= number 21) \"xviixxxx\"]\n    [(= number 22) \"xviixxxxx\"\
    ]\n    [(= number 23) \"xixvixxxxx\"]\n    [(= number 24) \"xixvixxxxxx\"]\n \
    \   [(= number 25) \"xviixxxxxxxx\"]\n    [(= number 26) \"xviixxxxxxxxx\"]\n\
    \    [(= number 27) \"xixvixxxxxxxxx\"]\n    [(= number 28) \"xixvixxxxxxxxxx\"\
    ]\n    [(= number 29) \"xviixxxxxxxxxxxx\"]\n    [(= number 30) \"xviixxxxxxxxxxxxx\"\
    ]\n    [(= number 31) \"xixvixxxxxxxxxxxxx\"]\n    [(= number 32) \"xixvixxxxxxxxxxxxxx\"\
    ]\n    [(= number 33) \"xviixxxxxxxxxxxxxxxx\"]\n    [(= number 34) \"xviixxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 35) \"xixvixxxxxxxxxxxxxxxxx\"]\n    [(= number 36) \"xixvixxxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 37) \"xviixxxxxxxxxxxxxxxxxxxx\"]\n    [(= number 38) \"xviixxxxxxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 39) \"xixvixxxxxxxxxxxxxxxxxxxxx\"]\n    [(= number 40) \"xixvixxxxxxxx",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) \"\"]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (char->string (char->integer 'M')) (int_to_mini_roman number))]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n\
    \    [(< number 4) \"c\"]\n    [(< number 10) \"xc\"]\n    [(< number 100) \"\
    cc\"]\n    [(< number 400) \"ccc\"]\n    [else (int_to_mini_roman number) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number mod 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number mod 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be positive.\")]\n\
    \    [(< number 1000) (error \"Invalid input: number must be less than 1000.\"\
    )]\n    [else (cond\n             [(= (modulo number 100) 0)\n               (append\
    \ (int_to_mini_roman number / 100) (mini_roman_numeral number 0))]\n         \
    \    [(= (modulo number 100) 10)\n               (append (int_to_mini_roman number\
    \ / 100) (mini_roman_numeral number 1))]\n             [(= (modulo number 100)\
    \ 100)\n               (append (int_to_mini_roman number / 100) (mini_roman_numeral\
    \ number 2))]\n             [else (error \"Invalid input: number must be less\
    \ than 1000.\")]\n             ])\n    ])\n", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
