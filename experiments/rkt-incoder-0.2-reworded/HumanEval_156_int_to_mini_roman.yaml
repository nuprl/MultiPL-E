name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10)]\n    [else (cons (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    1\"]\n    [(< number 10) (string-append \"x\" (int_to_mini_roman number))]\n \
    \   [else (int_to_mini_roman number) (int_to_mini_roman number - 10)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100) (int_to_mini_roman number % 10)]))\n", "  (cond\n    [(= number\
    \ 0) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_mini_roman number\n                       (quotient number 1000))\n\
    \               (int_to_mini_roman 1000))]\n    [else (cons (int_to_mini_roman\
    \ 1000\n                       (quotient number 1000))\n               (int_to_mini_roman\
    \ 1000))]))\n", "  (cond\n    [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n\
    \    [(= number 2) \"ix\"]\n    [(= number 3) \"xix\"]\n    [(= number 4) \"v\"\
    ]\n    [(= number 5) \"vi\"]\n    [(= number 6) \"vix\"]\n    [(= number 7) \"\
    ixv\"]\n    [(= number 8) \"xixv\"]\n    [(= number 9) \"xvi\"]\n    [(= number\
    \ 10) \"xvix\"]\n    [(= number 11) \"xixvi\"]\n    [(= number 12) \"xixvix\"\
    ]\n    [(= number 13) \"xviix\"]\n    [(= number 14) \"xviixx\"]\n    [(= number\
    \ 15) \"xixvix\"]\n    [(= number 16) \"xixvixx\"]\n    [(= number 17) \"xviixx\"\
    ]\n    [(= number 18) \"xviixxx\"]\n    [(= number 19) \"xixvixx\"]\n    [(= number\
    \ 20) \"xixvixxx\"]\n    [(= number 21) \"xviixxxx\"]\n    [(= number 22) \"xviixxxxx\"\
    ]\n    [(= number 23) \"xixvixxxxx\"]\n    [(= number 24) \"xixvixxxxxx\"]\n \
    \   [(= number 25) \"xviixxxxxxxx\"]\n    [(= number 26) \"xviixxxxxxxxx\"]\n\
    \    [(= number 27) \"xixvixxxxxxxxx\"]\n    [(= number 28) \"xixvixxxxxxxxxx\"\
    ]\n    [(= number 29) \"xviixxxxxxxxxxxx\"]\n    [(= number 30) \"xviixxxxxxxxxxxxx\"\
    ]\n    [(= number 31) \"xixvixxxxxxxxxxxxx\"]\n    [(= number 32) \"xixvixxxxxxxxxxxxxx\"\
    ]\n    [(= number 33) \"xviixxxxxxxxxxxxxxxx\"]\n    [(= number 34) \"xviixxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 35) \"xixvixxxxxxxxxxxxxxxxx\"]\n    [(= number 36) \"xixvixxxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 37) \"xviixxxxxxxxxxxxxxxxxxxx\"]\n    [(= number 38) \"xviixxxxxxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 39) \"xixvixxxxxxxxxxxxxxxxxxxxx\"]\n    [(= number 40) \"xixvixxxxxxxx",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) \"\"]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (char->string (char->integer 'M')) (int_to_mini_roman number))]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n\
    \    [(< number 4) \"c\"]\n    [(< number 10) \"xc\"]\n    [(< number 100) \"\
    cc\"]\n    [(< number 400) \"ccc\"]\n    [else (int_to_mini_roman number) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number mod 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number mod 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be positive.\")]\n\
    \    [(< number 1000) (error \"Invalid input: number must be less than 1000.\"\
    )]\n    [else (cond\n             [(= (modulo number 100) 0)\n               (append\
    \ (int_to_mini_roman number / 100) (mini_roman_numeral number 0))]\n         \
    \    [(= (modulo number 100) 10)\n               (append (int_to_mini_roman number\
    \ / 100) (mini_roman_numeral number 1))]\n             [(= (modulo number 100)\
    \ 100)\n               (append (int_to_mini_roman number / 100) (mini_roman_numeral\
    \ number 2))]\n             [else (error \"Invalid input: number must be less\
    \ than 1000.\")]\n             ])\n    ])\n", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n\
    \    [(< number 10) \"d\"]\n    [(< number 100) \"e\"]\n    [(< number 500) \"\
    f\"]\n    [(< number 1000) \"g\"]\n    [(< number 5000) \"h\"]\n    [(< number\
    \ 10000) \"i\"]\n    [(< number 50000) \"j\"]\n    [(< number 100000) \"k\"]\n\
    \    [(< number 500000) \"l\"]\n    [(< number 1000000) \"m\"]\n    [(< number\
    \ 5000000) \"n\"]\n    [(< number 10000000) \"o\"]\n    [(< number 50000000) \"\
    p\"]\n    [(< number 100000000) \"q\"]\n    [(< number 500000000) \"r\"]\n   \
    \ [(< number 1000000000) \"s\"]\n    [(< number 5000000000) \"t\"]\n    [(< number\
    \ 10000000000) \"u\"]\n    [(< number 50000000000) \"v\"]\n    [(< number 100000000000)\
    \ \"w\"]\n    [(< number 500000000000) \"x\"]\n    [(< number 1000000000000) \"\
    y\"]\n    [(< number 5000000000000) \"z\"]\n    [(< number 10000000000000) \"\
    a\"]\n    [(< number 50000000000000) \"b\"]\n    [(< number 100000000000000) \"\
    c\"]\n    [(< number 500000000000000) \"d\"]\n    [(< number 1000000000000000)\
    \ \"e\"]\n    [(< number 5000000000000000) \"f\"]\n    [(< number 10000000000000000)\
    \ \"g\"]\n    [(< number 5000000000000000) \"h\"]\n    [(< number 100000000000000000)\
    \ \"i\"]\n    [(< number 50000000000000000) \"j\"]\n    [(< number 1000000000000000000)\
    \ \"k\"]\n    [(< number 500000000000000000) \"l\"]\n    [(< number 10000000000000000000)\
    \ \"m\"]\n    [(< number 5000000000000000000) \"n\"]\n    [(< number 100000000000000000000)\
    \ \"o\"]\n    [(< number 50000000000000000000) \"p\"]\n    [(< number 1000000000000000000000)\
    \ \"q\"]\n    [(< number 500000000000000000000) \"r\"]\n    [(< number 10000000000000000000000)\
    \ \"s\"]\n    [(< number 5000000000000000000000) \"t\"]\n    [(< number 100000000000000000000000)\
    \ \"u\"]\n    [(< number 50000000000000000000000) \"v\"]\n    [(< number 1000000000000000000000000)\
    \ \"w\"]\n    [(< number 500000000000000000000000", "  (cond\n    [(< number 1)\
    \ \"1\"]\n    [(< number 10) (string-append \"x\" (int_to_mini_roman number))]\n\
    \    [else (string-append (int_to_mini_roman number / 10) (int_to_mini_roman (-\
    \ number 10)))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number mod 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman\
    \ number mod 10)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 1000)]\n    [else (cons\
    \ (int_to_mini_roman number / 100) (cons (- number 100) (int_to_mini_roman number\
    \ % 100)))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number mod 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number mod 100) (int_to_mini_roman number mod 10)]))\n", "  (cond\n    [(< number\
    \ 1) (error \"Invalid input: must be > 0\")\n     (string-append \"x\" (int_to_mini_roman\
    \ 0 (- number 1)))]\n    [(< number 1000) (string-append (int_to_mini_roman 0\
    \ (- number 1000)) \"i\")]\n    [else (string-append (int_to_mini_roman 0 (- number\
    \ 1000)) (int_to_mini_roman number (- number 1000)))]))\n", "  (cond\n    [(<\
    \ number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (char->string (char->integer 'M')) (int_to_mini_roman number))]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (cons (int_to_mini_roman number / 10)\n               (int_to_mini_roman\
    \ number % 10))]))\n", "  (cond\n    [(< number 1) (error \"Number must be positive.\"\
    )]\n    [(< number 1000) (error \"Number must be less than 1000.\")]\n    [else\
    \ (let ([remainder (modulo number 1000)])\n            (cond\n              [(<\
    \ remainder 100) (cons (char->string 'M) (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 500) (cons (char->string 'D) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (cons (char->string 'C) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 5000) (cons (char->string 'L) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000) (cons (char->string 'X) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 50000) (cons (char->string 'V) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 100000) (cons (char->string 'I) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500000) (cons (char->string 'I) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000000) (cons (char->string 'X) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 5000000) (cons (char->string 'L) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000000) (cons (char->string 'C)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 50000000) (cons\
    \ (char->string 'D) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000) (cons (char->string 'M) (int_to_mini_roman remainder))]\n       \
    \       [(< remainder 500000000) (cons (char->string 'V) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000) (cons (char->string 'I) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 5000000000) (cons (char->string 'I)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 10000000000) (cons\
    \ (char->string 'X) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 50000000000) (cons (char->string 'L) (int_to_mini_roman remainder", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 5) \"d\"]\n\
    \    [(< number 9) \"m\"]\n    [else (int_to_mini_roman number-1)]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 number))))]))\n",
  "  (let loop ((num number)\n             (roman (make-hash-table)))\n    (cond [(<\
    \ num 1000)\n           (loop (sub1 num) (add1 roman))]\n          [(< num 1000)\n\
    \           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1\
    \ roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num)\
    \ (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1\
    \ num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop\
    \ (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n      \
    \     (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n\
    \           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1\
    \ roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num)\
    \ (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1\
    \ num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop\
    \ (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n      \
    \     (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n\
    \           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1\
    \ roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num)\
    \ (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop (sub1\
    \ num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n           (loop\
    \ (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n      \
    \     (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1 roman))\n\
    \           (loop (sub1 num) (add1 roman))\n           (loop (sub1 num) (add1\
    \ roman))\n           (loop (sub1 num) (add1 roman))", "  (cond\n    [(< number\
    \ 1) (error \"Invalid input: number must be positive.\")]\n    [(< number 1000)\
    \ (error \"Invalid input: number must be less than 1000.\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 0) (error\
    \ \"Invalid input: number must be less than 1000.\")]\n              [(< remainder\
    \ 100) (concat \"x\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 500) (concat \"l\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000) (concat \"c\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 5000) (concat \"d\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 10000) (concat \"m\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 50000) (concat \"i\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000) (concat \"v\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 500000) (concat \"x\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000000) (concat \"l\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 50000000) (concat \"c\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000) (concat \"d\" (int_to_mini_roman remainder))]\n              [(<\
    \ remainder 500000000) (concat \"m\" (int_to_mini_roman remainder))]\n       \
    \       [(< remainder 1000000000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(", "  (cond\n    [(< number 1) (error \"Number must be positive.\"\
    )]\n    [(< number 1000) (error \"Number must be less than or equal to 1000.\"\
    )]\n    [else (let ([remainder (modulo number 1000)])\n            (cond\n   \
    \           [(= remainder 0) (cons \"x\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 1) (cons \"i\" (int_to_mini_roman number 1))]\n     \
    \         [(= remainder 2) (cons \"ii\" (int_to_mini_roman number 1))]\n     \
    \         [(= remainder 3) (cons \"iii\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 4) (cons \"iv\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 5) (cons \"v\" (int_to_mini_roman number 1))]\n     \
    \         [(= remainder 6) (cons \"vi\" (int_to_mini_roman number 1))]\n     \
    \         [(= remainder 7) (cons \"vii\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 8) (cons \"ix\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 9) (cons \"x\" (int_to_mini_roman number 1))]\n     \
    \         [(= remainder 10) (cons \"xi\" (int_to_mini_roman number 1))]\n    \
    \          [(= remainder 11) (cons \"xii\" (int_to_mini_roman number 1))]\n  \
    \            [(= remainder 12) (cons \"xiv\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 13) (cons \"xv\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 14) (cons \"xv\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 15) (cons \"xvi\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 16) (cons \"xvii\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 17) (cons \"xiv\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 18) (cons \"xix\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 19) (cons \"xix\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 20) (cons \"xix\" (int_to_mini_roman number 1))]\n\
    \              [(= remainder 21) (cons \"", "  (cond\n    [(< number 1) \"\"]\n\
    \    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 10)\n               (int_to_mini_roman number % 10))]))\n", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"\
    ]\n    [(< number 50) \"xvi\"]\n    [(< number 100) \"xix\"]\n    [(< number 500)\
    \ \"xvii\"]\n    [(< number 1000) \"cli\"]\n    [(< number 5000) \"clii\"]\n \
    \   [(< number 10000) \"cliii\"]\n    [(< number 50000) \"cliv\"]\n    [(< number\
    \ 100000) \"clivi\"]\n    [(< number 500000) \"clivii\"]\n    [(< number 1000000)\
    \ \"cliviii\"]\n    [(< number 5000000) \"clivvi\"]\n    [(< number 100000000)\
    \ \"clivvii\"]\n    [(< number 500000000) \"clivviii\"]\n    [(< number 1000000000)\
    \ \"clivviiii\"]\n    [(< number 5000000000) \"clivviiiii\"]\n    [(< number 10000000000)\
    \ \"clivviiiiiv\"]\n    [(< number 50000000000) \"clivviiiiiv\"]\n    [(< number\
    \ 100000000000) \"clivviiiiiv\"]\n    [(< number 500000000000) \"clivviiiiiv\"\
    ]\n    [(< number 1000000000000) \"clivviiiiiv\"]\n    [(< number 5000000000000)\
    \ \"clivviiiiiv\"]\n    [(< number 10000000000000) \"clivviiiiiv\"]\n    [(< number\
    \ 50000000000000) \"clivviiiiiv\"]\n    [(< number 100000000000000) \"clivviiiiiv\"\
    ]\n    [(< number 500000000000000) \"clivviiiiiv\"]\n    [(< number 1000000000000000)\
    \ \"clivviiiiiv\"]\n    [(< number 5000000000000000) \"clivviiiiiv\"]\n    [(<\
    \ number 10000000000000000) \"clivviiiiiv\"]\n    [(< number 50000000000000000)\
    \ \"clivviiiiiv\"]\n    [(< number 100000000000000000) \"clivviiiiiv\"]\n    [(<\
    \ number 500000000000000000) \"clivviiiiiv\"]\n    [(< number 1000000000000000000)\
    \ \"clivviiiiiv\"]\n    [(< number 5000000000000000000) \"clivviiiiiv\"]\n   \
    \ [(< number 10000000000000000000) \"clivviiiiiv\"]\n    [", "  (let ((roman (make-array\
    \ (+ 3 (* number 1000))\n                           :element-type 'string\n  \
    \                         :initial-element '\"\")))\n    (loop for i from 0 to\
    \ (- number 1000)\n          for j from 0 to (- i 10)\n          for k from 0\
    \ to (- j 10)\n          for l from 0 to (- k 10)\n          for m from 0 to (-\
    \ l 10)\n          for n from 0 to (- m 10)\n          for o from 0 to (- n 10)\n\
    \          for p from 0 to (- o 10)\n          for q from 0 to (- p 10)\n    \
    \      for r from 0 to (- q 10)\n          for s from 0 to (- r 10)\n        \
    \  for t from 0 to (- s 10)\n          for u from 0 to (- t 10)\n          for\
    \ v from 0 to (- u 10)\n          for w from 0 to (- v 10)\n          for x from\
    \ 0 to (- w 10)\n          for y from 0 to (- x 10)\n          for z from 0 to\
    \ (- y 10)\n          for a from 0 to (- z 10)\n          for b from 0 to (- a\
    \ 10)\n          for c from 0 to (- b 10)\n          for d from 0 to (- c 10)\n\
    \          for e from 0 to (- d 10)\n          for f from 0 to (- e 10)\n    \
    \      for g from 0 to (- f 10)\n          for h from 0 to (- g 10)\n        \
    \  for i from 0 to (- h 10)\n          for j from 0 to (- i 10)\n          for\
    \ k from 0 to (- j 10)\n          for l from 0 to (- k 10)\n          for m from\
    \ 0 to (- l 10)\n          for n from 0 to (- m 10)\n          for o from 0 to\
    \ (- n 10)\n          for p from 0 to (- o 10)\n          for q from 0 to (- p\
    \ 10)\n          for r from 0 to (- q 10)\n          for s from 0 to (- r 10)\n\
    \          for t from 0 to (- s 10)\n          for u from 0 to (- t 10)\n    \
    \      for v from 0 to (- u 10)\n          for w from 0 to (- v 10)\n        \
    \  for x from 0 to (- w 10)\n          for y from 0 to (- x 10)\n          for\
    \ z from 0 to (- y 10)\n          for a from 0 to (- z 10)\n          for b from\
    \ 0 to (- a 10)\n          for c from 0 to (- b 10)\n          for d from 0 to\
    \ (- c 10)\n          for e ", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor\
    \ (/ number 10)) (int_to_mini_roman floor (- number (* 10 number))))]))\n", " \
    \ (cond\n    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 10)\
    \ \"xc\"]\n    [(< number 100) \"cc\"]\n    [(< number 400) \"ccc\"]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (cons (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100) (int_to_mini_roman number % 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) (error\
    \ \"Invalid input: must be positive.\")]\n    [(< number 1000) (error \"Invalid\
    \ input: must be less than 1000.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(< remainder 100) (cons (substring\
    \ \"MCMXCIV\" 0 remainder) '())]\n              [(< remainder 500) (cons (substring\
    \ \"DCLXVI\" 0 remainder) '())]\n              [(< remainder 1000) (cons (substring\
    \ \"MCDXV\" 0 remainder) '())]\n              [(< remainder 5000) (cons (substring\
    \ \"CMLXXV\" 0 remainder) '())]\n              [(< remainder 10000) (cons (substring\
    \ \"DCMXVI\" 0 remainder) '())]\n              [(< remainder 50000) (cons (substring\
    \ \"CMXCIV\" 0 remainder) '())]\n              [(< remainder 100000) (cons (substring\
    \ \"CMXV\" 0 remainder) '())]\n              [(< remainder 500000) (cons (substring\
    \ \"CMCIX\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"CMX\" 0 remainder) '())]\n              [(< remainder 5000000) (cons (substring\
    \ \"CMC\" 0 remainder) '())]\n              [(< remainder 10000000) (cons (substring\
    \ \"CM\" 0 remainder) '())]\n              [(< remainder 50000000) (cons (substring\
    \ \"C\" 0 remainder) '())]\n              [(< remainder 100000000) (cons (substring\
    \ \"M\" 0 remainder) '())]\n              [(< remainder 500000000) (cons (substring\
    \ \"D\" 0 remainder) '())]\n              [(< remainder 1000000000) (cons (substring\
    \ \"C\" 0 remainder) '())]\n              [(< remainder 5000000000) (cons (substring\
    \ \"L\" 0 remainder) '())]\n              [(< remainder 10000000000) (cons (substring\
    \ \"X\" 0 remainder) '())]\n              [(< remainder 50000000000) (cons (substring\
    \ \"V\" 0 remainder) '())]\n              [(< remainder 100000000000) (cons (substring\
    \ \"I\" 0 remainder) '", "  (cond\n    [(< number 1) (error \"Number must be positive.\"\
    )]\n    [(< number 1000) (error \"Number must be less than 1000.\")]\n    [else\
    \ (let ([roman '()])\n            (cond\n              [(< number 10) ([cons roman\
    \ '()])]\n              [(< number 100) (cons (int_to_mini_roman number) (cons\
    \ \"x\" (int_to_mini_roman number - 10))))]\n              [(< number 1000) (cons\
    \ (int_to_mini_roman number) (cons \"i\" (int_to_mini_roman number - 100))))]\n\
    \              [else (error \"Number must be less than 1000.\")]))]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number mod 100) \"\"]))\n", "  (let loop ((num number) (str\
    \ \"\"))\n    (cond ((< num 1000)\n           (loop (sub1 num) (append str (mini_roman-char\
    \ num))))\n          ((< num 900)\n           (loop (sub1 num) (append str (mini_roman-char\
    \ (- num 100))))\n          ((< num 500))\n          ((< num 400))\n         \
    \ ((< num 100))\n          ((< num 10))\n          ((< num 1))\n          ((<\
    \ num 0))\n          (else\n           (loop (sub1 num) (append str (mini_roman-char\
    \ (- num 10))))))))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cond\n             [(< number 500) (int_to_mini_roman\
    \ number)]\n             [(< number 100) (int_to_mini_roman number)]\n       \
    \      [(< number 50) (int_to_mini_roman number)]\n             [(< number 10)\
    \ (int_to_mini_roman number)]\n             [(< number 1) (int_to_mini_roman number)]\n\
    \             [else (cond\n                      [(< number 5) (int_to_mini_roman\
    \ number)]\n                      [(< number 1) (int_to_mini_roman number)]\n\
    \                      [else (cond\n                              [(< number 1)\
    \ (int_to_mini_roman number)]\n                              [else (cond\n   \
    \                                   [(< number 9) (int_to_mini_roman number)]\n\
    \                                      [(< number 8) \"x\"]\n                \
    \                      [(< number 7) \"c\"]\n                                \
    \      [(< number 6) \"l\"]\n                                      [(< number\
    \ 5) \"m\"]\n                                      [(< number 4) \"i\"]\n    \
    \                                  [(< number 3) \"v\"]\n                    \
    \                  [(< number 2) \"x\"]\n                                    \
    \  [(< number 1) \"i\"]\n                                      [else (cond\n \
    \                                             [(< number 9) (int_to_mini_roman\
    \ number)]\n                                              [(< number 8) \"x\"\
    ]\n                                              [(< number 7) \"c\"]\n      \
    \                                        [(< number 6) \"l\"]\n              \
    \                                [(< number 5) \"m\"]\n                      \
    \                        [(< number 4) \"i\"]\n                              \
    \                [(< number 3) \"v\"]\n                                      \
    \        [(< number 2) \"x\"]\n                                              [(<\
    \ number 1) \"i\"]\n                                              [else \"?\"\
    ])])])])]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100) (int_to_mini_roman number % 10)]))\n", "  (cond\n    [(< number\
    \ 1) (error \"Number must be positive.\")]\n    [(< number 1000) (error \"Number\
    \ must be less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(< remainder 100) (int_to_mini_roman remainder)]\n\
    \              [(< remainder 500) (int_to_mini_roman remainder)]\n           \
    \   [(< remainder 1000) (int_to_mini_roman remainder)]\n              [else (int_to_mini_roman\
    \ remainder)]))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number\
    \ must be greater than 1\")]\n    [(< number 1000) (error \"Invalid input: number\
    \ must be less than 1000\")]\n    [else (let ([roman (make-roman (- number 1)))]\n\
    \              (cond\n                [(< roman 0) (error \"Invalid input: roman\
    \ numeral must be greater than 0\")]\n                [else (let ([remainder (modulo\
    \ number roman)])\n                        (cond\n                         [(<\
    \ remainder 0) (error \"Invalid input: number must be greater than roman numeral\"\
    )]\n                         [else (let ([result (make-string 1 #\\0))]\n    \
    \                              (cond\n                                    [(<\
    \ remainder 100) (set! result (append result (make-string 1 #\\x))\n         \
    \                                                   (set! result (append result\
    \ (make-string 1 #\\l))\n                                                    \
    \        (set! result (append result (make-string 1 #\\c))\n                 \
    \                                           (set! result (append result (make-string\
    \ 1 #\\d))\n                                                            (set!\
    \ result (append result (make-string 1 #\\m)))]\n                            \
    \        [(< remainder 500) (set! result (append result (make-string 1 #\\v))\n\
    \                                                            (set! result (append\
    \ result (make-string 1 #\\l))\n                                             \
    \               (set! result (append result (make-string 1 #\\c))\n          \
    \                                                  (set! result (append result\
    \ (make-string 1 #\\d))\n                                                    \
    \        (set! result (append result (make-string 1 #\\m)))]\n               \
    \                     [(< remainder 1000) (set! result (append result (make-string\
    \ 1 #\\x))\n                                                            (set!\
    \ result (append result (make-string 1 #\\l))\n                              \
    \                              (set! result (append result (make-string 1 #\\\
    c))\n                                                            (set! result\
    \ (append result (make-string 1 #\\d))\n                                     \
    \                       (set! result (append result (make-string 1 #\\m)))]\n\
    \                                    [(< remainder 5000) (set! result (append\
    \ result (make-string 1 #\\v))\n                                             \
    \               (set! result (append result (make-string 1 #\\l))\n          \
    \                                                  (set! result (append result\
    \ (make-string 1 #\\c))\n                                                    \
    \        (set! result (append result (make-string 1 #\\d))\n                 \
    \                                           (set! result (append result (make-string\
    \ 1 #\\m)))]\n                                    [(< remainder 10000) (set! result\
    \ (append result (make-string ", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number mod 10)]\n \
    \   [else (int_to_mini_roman number / 100) (int_to_mini_roman number mod 100)\
    \ (int_to_mini_roman number mod 10)]))\n", "  (cond\n    [(< number 1) \"x\"]\n\
    \    [(< number 4) \"c\"]\n    [(< number 10) \"l\"]\n    [(< number 100) \"m\"\
    ]\n    [(< number 500) \"n\"]\n    [(< number 1000) \"x\"]\n    [else (int_to_mini_roman\
    \ number) (append \"i\" (int_to_mini_roman number))]\n  )\n)\n", "  (cond\n  \
    \  [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n    [(= number 2) \"ix\"]\n\
    \    [(= number 3) \"xix\"]\n    [(= number 4) \"v\"]\n    [(= number 5) \"vi\"\
    ]\n    [(= number 6) \"vix\"]\n    [(= number 7) \"ixv\"]\n    [(= number 8) \"\
    xixv\"]\n    [(= number 9) \"xvi\"]\n    [(= number 10) \"xvix\"]\n    [(= number\
    \ 11) \"xixvi\"]\n    [(= number 12) \"xixvix\"]\n    [(= number 13) \"xviix\"\
    ]\n    [(= number 14) \"xviixx\"]\n    [(= number 15) \"xixvixx\"]\n    [(= number\
    \ 16) \"xixvixxx\"]\n    [(= number 17) \"xviixxx\"]\n    [(= number 18) \"xviixxxx\"\
    ]\n    [(= number 19) \"xixvixxvi\"]\n    [(= number 20) \"xixvixxvix\"]\n   \
    \ [(= number 21) \"xixvixxvixx\"]\n    [(= number 22) \"xixvixxvixxx\"]\n    [(=\
    \ number 23) \"xviixxxvi\"]\n    [(= number 24) \"xviixxxvix\"]\n    [(= number\
    \ 25) \"xviixxxvixx\"]\n    [(= number 26) \"xviixxxvixxx\"]\n    [(= number 27)\
    \ \"xixvixxvixvi\"]\n    [(= number 28) \"xixvixxvixvix\"]\n    [(= number 29)\
    \ \"xixvixxvixvixx\"]\n    [(= number 30) \"xixvixxvixvixxx\"]\n    [(= number\
    \ 31) \"xviixxxvixvi\"]\n    [(= number 32) \"xviixxxvixvix\"]\n    [(= number\
    \ 33) \"xviixxxvixvixx\"]\n    [(= number 34) \"xviixxxvixvixxx\"]\n    [(= number\
    \ 35) \"xixvixxvixvixvi\"]\n    [(= number 36) \"xixvixxvixvixvix\"]\n    [(=\
    \ number 37) \"xixvixxvixvixvixx\"]\n    [(= number 38) \"xixvixxvixvixvixxx\"\
    ]\n    [", "  (cond\n    [(< number 1) (error \"Invalid input: number must be\
    \ positive.\")]\n    [(< number 1000) (error \"Invalid input: number must be less\
    \ than 1000.\")]\n    [else (cond\n             [(= number 0) \"\"]\n        \
    \     [(= number 1) \"i\"]\n             [(= number 2) \"ii\"]\n             [(=\
    \ number 3) \"iii\"]\n             [(= number 4) \"iv\"]\n             [(= number\
    \ 5) \"v\"]\n             [(= number 6) \"vi\"]\n             [(= number 7) \"\
    vii\"]\n             [(= number 8) \"viii\"]\n             [(= number 9) \"ix\"\
    ]\n             [(= number 10) \"x\"]\n             [(= number 11) \"xi\"]\n \
    \            [(= number 12) \"xii\"]\n             [(= number 13) \"xiii\"]\n\
    \             [(= number 14) \"xiv\"]\n             [(= number 15) \"xvi\"]\n\
    \             [(= number 16) \"xvii\"]\n             [(= number 17) \"xviii\"\
    ]\n             [(= number 18) \"xix\"]\n             [(= number 19) \"xx\"]\n\
    \             [(= number 20) \"xxi\"]\n             [(= number 21) \"xxii\"]\n\
    \             [(= number 22) \"xxiii\"]\n             [(= number 23) \"xxiv\"\
    ]\n             [(= number 24) \"xxv\"]\n             [(= number 25) \"xxvi\"\
    ]\n             [(= number 26) \"xxvii\"]\n             [(= number 27) \"xxviii\"\
    ]\n             [(= number 28) \"xxix\"]\n             [(= number 29) \"xxx\"\
    ]\n             [(= number 30) \"xxxi\"]\n             [(= number 31) \"xxxii\"\
    ]\n             [(= number 32) \"xxxiii\"]\n             [(= number 33) \"xxxiv\"\
    ]\n             [(= number 34) \"xxxv\"]\n             [(= number 35) \"xxxvi\"\
    ]\n             [(= number 36) \"xxxvii\"]\n             [(= number 37) \"xxxviii\"\
    ]\n             [(= number 38) \"xxxix\"]\n             [(= number 39) \"xxxx\"\
    ]\n             [(= number 40) \"xxxxi\"]\n             [(= number 41) \"xxxxii\"\
    ]\n             [(= number 42) \"xxxxiii\"]\n             [(= number 43) \"xxxxiv\"\
    ]\n             [(= number 44) \"xxxxv\"]\n             [(= number 45) \"xxxxvi\"\
    ]\n             [(= number 46) \"xxxxvii\"]\n", "  (cond\n    [(< number 1) (error\
    \ \"Number must be positive.\")]\n    [(< number 1000) (error \"Number must be\
    \ less than 1,000.\")]\n    [else (let ([roman '()])\n            (cond\n    \
    \          [(< number 10) ([cons roman '()])]\n              [(< number 100) (cons\
    \ (int_to_mini_roman number / 10) (cons \"x\" (int_to_mini_roman number % 10)))]\n\
    \              [(< number 1000) (cons (int_to_mini_roman number / 100) (cons \"\
    c\" (int_to_mini_roman number % 100)))]\n              [else (cons (int_to_mini_roman\
    \ number / 1000) (cons \"d\" (int_to_mini_roman number % 1000))\n            \
    \            (cons (int_to_mini_roman number / 100) (cons \"i\" (int_to_mini_roman\
    \ number % 100)))]))]))])\n", "  (cond\n    [(< number 1) \"1\"]\n    [(< number\
    \ 10) (string-append \"x\" (int_to_mini_roman number))]\n    [(< number 100) (string-append\
    \ \"c\" (int_to_mini_roman number))]\n    [(< number 1000) (string-append \"d\"\
    \ (int_to_mini_roman number))]\n    [(< number 10000) (string-append \"e\" (int_to_mini_roman\
    \ number))]\n    [(< number 100000) (string-append \"f\" (int_to_mini_roman number))]\n\
    \    [(< number 1000000) (string-append \"g\" (int_to_mini_roman number))]\n \
    \   [(< number 10000000) (string-append \"h\" (int_to_mini_roman number))]\n \
    \   [(< number 100000000) (string-append \"i\" (int_to_mini_roman number))]\n\
    \    [(< number 1000000000) (string-append \"j\" (int_to_mini_roman number))]\n\
    \    [(< number 10000000000) (string-append \"k\" (int_to_mini_roman number))]\n\
    \    [(< number 100000000000) (string-append \"l\" (int_to_mini_roman number))]\n\
    \    [(< number 1000000000000) (string-append \"m\" (int_to_mini_roman number))]\n\
    \    [(< number 10000000000000) (string-append \"n\" (int_to_mini_roman number))]\n\
    \    [(< number 100000000000000) (string-append \"o\" (int_to_mini_roman number))]\n\
    \    [(< number 1000000000000000) (string-append \"p\" (int_to_mini_roman number))]\n\
    \    [(< number 10000000000000000) (string-append \"q\" (int_to_mini_roman number))]\n\
    \    [(< number 100000000000000000) (string-append \"r\" (int_to_mini_roman number))]\n\
    \    [(< number 1000000000000000000) (string-append \"s\" (int_to_mini_roman number))]\n\
    \    [else (string-append \"u\" (int_to_mini_roman number))]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n\
    \    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (char->string\
    \ (char->integer 'M')) (int_to_mini_roman number / 10))]))\n", "  (cond\n    [(<\
    \ number 1) (error \"Invalid input: number must be greater than 1\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000\")]\n   \
    \ [else (cond\n            [(< number 100) (cons \"x\" (int_to_mini_roman 100))]\n\
    \            [(< number 500) (cons \"c\" (int_to_mini_roman 50))]\n          \
    \  [(< number 1000) (cons \"l\" (int_to_mini_roman 10))]\n            [else (cons\
    \ \"d\" (int_to_mini_roman 1))]))]))\n", "  (cond\n    [(< number 1) \"\"]\n \
    \   [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n\
    \    [(< number 10) \"x\"]\n    [(< number 100) \"l\"]\n    [(< number 500) \"\
    c\"]\n    [(< number 1000) \"l\"]\n    [(< number 5000) \"x\"]\n    [(< number\
    \ 10000) \"c\"]\n    [(< number 100000) \"l\"]\n    [(< number 1000000) \"x\"\
    ]\n    [(< number 10000000) \"c\"]\n    [(< number 100000000) \"l\"]\n    [(<\
    \ number 1000000000) \"x\"]\n    [(< number 10000000000) \"c\"]\n    [(< number\
    \ 100000000000) \"l\"]\n    [(< number 1000000000000) \"x\"]\n    [(< number 10000000000000)\
    \ \"c\"]\n    [(< number 100000000000000) \"l\"]\n    [(< number 1000000000000000)\
    \ \"x\"]\n    [(< number 10000000000000000) \"c\"]\n    [(< number 100000000000000000)\
    \ \"l\"]\n    [(< number 1000000000000000000) \"x\"]\n    [else \"x\"]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be positive.\")]\n\
    \    [(< number 1000) (error \"Invalid input: number must be less than 1000.\"\
    )]\n    [else (let ([roman \"x\"])\n              (cond\n                [(< number\
    \ 10) ([roman \"x\"])]\n                [else (let ([roman \"i\"])\n         \
    \               (cond\n                          [(< number 100) (cons (cons roman\
    \ \"x\") (int_to_mini_roman number / 10))]\n                          [(< number\
    \ 1000) (cons (cons roman \"i\") (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10))]\n                          [else (error \"Invalid input: number\
    \ too large.\")]))]))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input:\
    \ must be positive.\")]\n    [(< number 1000) (error \"Invalid input: must be\
    \ less than 1000.\")]\n    [else (let ([roman '()])\n            (cond\n     \
    \         [(< number 10) ([cons roman '()])]\n              [(< number 100) (cons\
    \ (sub1 number) roman)]\n              [(< number 1000) (cons (sub1 number) roman)\n\
    \                (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)\n   \
    \             (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)\n   \
    \             (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)\n   \
    \             (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)\n   \
    \             (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)\n   \
    \             (cons (sub1 number) roman)\n                (cons (sub1 number)\
    \ roman)\n                (cons (sub1 number) roman)\n                (cons (sub1\
    \ number) roman)\n                (cons (sub1 number) roman)\n               \
    \ (cons (sub1 number) roman)\n                (cons (sub1 number) roman)", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 1000)]\n    [else (cons (char->string (char->integer 'M))\n              \
    \ (int_to_mini_roman number / 10))]))\n", "  (cond\n    [(< number 1) (error \"\
    Invalid input: must be positive.\")]\n    [(< number 1000) (error \"Invalid input:\
    \ must be <= 1000.\")]\n    [else (let ([roman \"x\"])\n            (cond\n  \
    \            [(< number 10) ([roman \"x\"])]\n              [(< number 100) (cons\
    \ (cons \"i\" (int_to_mini_roman 10)) (int_to_mini_roman 100))]\n            \
    \  [(< number 1000) (cons (cons \"i\" (int_to_mini_roman 100)) (cons \"x\" (int_to_mini_roman\
    \ 1000))])]\n            )\n          )\n    )]\n  )\n)\n", "  (cond\n    [(<\
    \ number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n   \
    \ [else (cons (char->string (char->integer 'M')) (int_to_mini_roman number * 10\
    \ + 1))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10)]\n    [else (int_to_mini_roman number / 10)\n          (append\
    \ (int_to_mini_roman number % 10)\n                  (mini_roman_numeral_to_string\
    \ number))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman number) (int_to_mini_roman number\
    \ - 1))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons\
    \ (char->string (char->integer 'm')) (int_to_mini_roman number * 10 + 1))]))\n",
  "  (cond\n    [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n    [(= number 2) \"\
    ix\"]\n    [(= number 3) \"xix\"]\n    [(= number 4) \"v\"]\n    [(= number 5)\
    \ \"vi\"]\n    [(= number 6) \"vix\"]\n    [(= number 7) \"ixv\"]\n    [(= number\
    \ 8) \"xixv\"]\n    [(= number 9) \"xixvi\"]\n    [(= number 10) \"xixvix\"]\n\
    \    [(= number 11) \"xixvixix\"]\n    [(= number 12) \"xixvixixi\"]\n    [(=\
    \ number 13) \"xixvixixix\"]\n    [(= number 14) \"xixvixixixi\"]\n    [(= number\
    \ 15) \"xixvixixixi\"]\n    [(= number 16) \"xixvixixixi\"]\n    [(= number 17)\
    \ \"xixvixixixi\"]\n    [(= number 18) \"xixvixixixi\"]\n    [(= number 19) \"\
    xixvixixixi\"]\n    [(= number 20) \"xixvixixixi\"]\n    [(= number 21) \"xixvixixixi\"\
    ]\n    [(= number 22) \"xixvixixixi\"]\n    [(= number 23) \"xixvixixixi\"]\n\
    \    [(= number 24) \"xixvixixixi\"]\n    [(= number 25) \"xixvixixixi\"]\n  \
    \  [(= number 26) \"xixvixixixi\"]\n    [(= number 27) \"xixvixixixi\"]\n    [(=\
    \ number 28) \"xixvixixixi\"]\n    [(= number 29) \"xixvixixixi\"]\n    [(= number\
    \ 30) \"xixvixixixi\"]\n    [(= number 31) \"xixvixixixi\"]\n    [(= number 32)\
    \ \"xixvixixixi\"]\n    [(= number 33) \"xixvixixixi\"]\n    [(= number 34) \"\
    xixvixixixi\"]\n    [(= number 35) \"xixvixixixi\"]\n    [(= number 36) \"xixvixixixi\"\
    ]\n    [(= number 37) \"xixvixixixi\"]", "  (cond\n    [(< number 1) \"x\"]\n\
    \    [(< number 4) \"c\"]\n    [(< number 10) \"xc\"]\n    [(< number 100) \"\
    cc\"]\n    [(< number 500) \"ccc\"]\n    [(< number 1000) \"cd\"]\n    [(< number\
    \ 5000) \"dcc\"]\n    [(< number 10000) \"dccc\"]\n    [(< number 100000) \"cm\"\
    ]\n    [(< number 1000000) \"mm\"]\n    [(< number 10000000) \"MMM\"]\n    [(<\
    \ number 100000000) \"MMMM\"]\n    [(< number 1000000000) \"MMMMM\"]\n    [(<\
    \ number 10000000000) \"MMMMMMM\"]\n    [(< number 100000000000) \"MMMMMMMM\"\
    ]\n    [(< number 1000000000000) \"MMMMMMMMM\"]\n    [(< number 10000000000000)\
    \ \"MMMMMMMMMMM\"]\n    [(< number 100000000000000) \"MMMMMMMMMMMM\"]\n    [(<\
    \ number 1000000000000000) \"MMMMMMMMMMMMM\"]\n    [(< number 10000000000000000)\
    \ \"MMMMMMMMMMMMMMM\"]\n    [(< number 100000000000000000) \"MMMMMMMMMMMMMMMM\"\
    ]\n    [(< number 1000000000000000000) \"MMMMMMMMMMMMMMMMM\"]\n    [(< number\
    \ 10000000000000000000) \"MMMMMMMMMMMMMMMMMMM\"]\n    [(< number 100000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 1000000000000000000000) \"MMMMMMMMMMMMMMMMMMMMM\"\
    ]\n    [(< number 10000000000000000000000) \"MMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(<\
    \ number 100000000000000000000000) \"MMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number\
    \ 1000000000000000000000000) \"MMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 10000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 100000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 1000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 10000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 100000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 1000000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 10000000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 100000000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"]\n    [(< number 1000000000000000000000000000000000)\
    \ \"MMMMMMMMMMMMMMMMMMMMMMMM", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman number\
    \ / 10)\n                (int_to_mini_roman number % 10))]))\n", "  (cond\n  \
    \  [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000.\")]\n  \
    \  [else (let ([remainder (modulo number 1000)])\n             (cond\n       \
    \       [(< remainder 100) (mini_roman number remainder)]\n              [(< remainder\
    \ 500) (mini_roman remainder 100)]\n              [(< remainder 1000) (mini_roman\
    \ remainder 500)]\n              [else (mini_roman remainder 1000)]))]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100) (int_to_mini_roman number % 10)]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be greater than\
    \ 1\")]\n    [(< number 1000) (error \"Invalid input: number must be less than\
    \ 1000\")]\n    [else (let ([remainder (modulo number 1000)])\n            (cond\n\
    \              [(< remainder 100) (error \"Invalid input: number must be less\
    \ than 1000\")]\n              [(< remainder 400) (concat \"x\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (concat \"l\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (concat \"c\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (concat \"d\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 400) (concat \"v\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (concat \"i\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (concat \"x\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (concat \"l\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 400) (concat \"c\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (concat \"d\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (concat \"v\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (concat \"i\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 400) (concat \"x\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (concat \"l\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (concat \"c\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (concat \"d\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 400) (concat \"v\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (concat \"i\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (concat \"x\" (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (concat \"l\" (int_to_mini_",
  "  (let loop ((num number) (romans '(i v x l c d))\n             (result '()))\n\
    \    (cond [(< num 1000) (append result (list num))]\n          [(< num 1000)\n\
    \           (loop (sub1 num) (cons (sub1 num) romans) result)]\n          [else\
    \ (loop (sub1 num) (cons (sub1 num) romans)\n                       (cons (sub1\
    \ num) result))]))\n</code>\n<|/ a tags=scheme,racket,functional-programming |>\n\
    <| c |>\nThanks for your answer. I am not familiar with Racket and I do not know\
    \ how to use your code. Can you please explain how to use your code?\n<|/ c |>\n\
    <| c |>\nI added an explanation of how to use your code. Hope it helps.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman number\
    \ / 10)\n              (int_to_mini_roman number % 10))]))\n", "  (cond\n    [(<\
    \ number 1) (error \"Invalid input: number must be positive.\")]\n    [(< number\
    \ 1000) (error \"Invalid input: number must be less than 1000.\")]\n    [else\
    \ (let ([roman '()])\n            (cond\n              [(< number 10) (append\
    \ roman 'x)]\n              [(< number 100) (append roman 'vi)]\n            \
    \  [(< number 1000) (append roman 'xix)]\n              [(< number 10000) (append\
    \ roman 'xixvi)]\n              [(< number 100000) (append roman 'xixixvi)]\n\
    \              [(< number 1000000) (append roman 'xixixixvi)]\n              [(<\
    \ number 10000000) (append roman 'xixixixixvi)]\n              [(< number 100000000)\
    \ (append roman 'xixixixixixvi)]\n              [(< number 1000000000) (append\
    \ roman 'xixixixixixixvi)]\n              [(< number 10000000000) (append roman\
    \ 'xixixixixixixixvi)]\n              [(< number 100000000000) (append roman 'xixixixixixixixvi)]\n\
    \              [(< number 1000000000000) (append roman 'xixixixixixixixixixvi)]\n\
    \              [(< number 10000000000000) (append roman 'xixixixixixixixixixvi)]\n\
    \              [(< number 100000000000000) (append roman 'xixixixixixixixixixvi)]\n\
    \              [(< number 1000000000000000) (append roman 'xixixixixixixixixixvi)]\n\
    \              [(< number 10000000000000000) (append roman 'xixixixixixixixixixixvi)]\n\
    \              [(< number 100000000000000000) (append roman 'xixixixixixixixixixixixvi)]\n\
    \              [(< number 1000000000000000000) (append roman 'xixixixixixixixixixixixvi)]\n\
    \              [(< number 10000000000000000000) (append roman 'xixixixixixixixixixixixixvi)]\n\
    \              [(< number 100000000000000000000) (append roman 'xixixixixixixixixixixixixixvi)]\n\
    \              [(< number 1000000000000000000000) (append roman 'xixixixixixixixixixixixixixixvi)]\n\
    \              ", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number mod 100) (string-append (int_to_mini_roman\
    \ number / 10) \"x\" (int_to_mini_roman number mod 10))]))\n", "  (let loop ((num\
    \ number) (roman-string \"\"))\n    (cond [(< num 1000) (cons roman-string (int_to_mini_roman\
    \ num))]\n          [(< num 1000)\n           (loop (sub1 num) (append roman-string\
    \ \"x\"))]\n          [(< num 900)\n           (loop (sub1 num) (append roman-string\
    \ \"c\"))]\n          [(< num 500) \n           (loop (sub1 num) (append roman-string\
    \ \"l\"))]\n          [(< num 400)\n           (loop (sub1 num) (append roman-string\
    \ \"i\"))]\n          [(< num 100)\n           (loop (sub1 num) (append roman-string\
    \ \"m\"))]\n          [(< num 90)\n           (loop (sub1 num) (append roman-string\
    \ \"v\"))]\n          [(< num 50)\n           (loop (sub1 num) (append roman-string\
    \ \"d\"))]\n          [(< num 40)\n           (loop (sub1 num) (append roman-string\
    \ \"h\"))]\n          [(< num 10)\n           (loop (sub1 num) (append roman-string\
    \ \"n\"))]\n          [(< num 9)\n           (loop (sub1 num) (append roman-string\
    \ \"a\"))]\n          [(< num 5)\n           (loop (sub1 num) (append roman-string\
    \ \"o\"))]\n          [(< num 4)\n           (loop (sub1 num) (append roman-string\
    \ \"s\"))]\n          [(< num 1)\n           (loop (sub1 num) (append roman-string\
    \ \"x\"))]\n          [(< num 0)\n           (loop (sub1 num) (append roman-string\
    \ \"0\"))]\n          [else\n           (loop (sub1 num) (append roman-string\
    \ \"i\"))])))\n", "  (let loop ((num number) (roman (make-string 26 empty)))\n\
    \    (cond [(< num 1000)\n           (string-append roman \"M\")\n           (loop\
    \ (sub1 num) (append roman \"M\"))]\n          [(< num 900)\n           (string-append\
    \ roman \"CM\")\n           (loop (sub1 num) (append roman \"CM\"))]\n       \
    \   [(< num 500)\n           (string-append roman \"D\")\n           (loop (sub1\
    \ num) (append roman \"D\"))]\n          [(< num 400)\n           (string-append\
    \ roman \"CD\")\n           (loop (sub1 num) (append roman \"CD\"))]\n       \
    \   [(< num 100)\n           (string-append roman \"C\")\n           (loop (sub1\
    \ num) (append roman \"C\"))]\n          [(< num 90)\n           (string-append\
    \ roman \"XC\")\n           (loop (sub1 num) (append roman \"XC\"))]\n       \
    \   [(< num 50)\n           (string-append roman \"L\")\n           (loop (sub1\
    \ num) (append roman \"L\"))]\n          [(< num 40)\n           (string-append\
    \ roman \"XL\")\n           (loop (sub1 num) (append roman \"XL\"))]\n       \
    \   [(< num 10)\n           (string-append roman \"X\")\n           (loop (sub1\
    \ num) (append roman \"X\"))]\n          [(< num 9)\n           (string-append\
    \ roman \"IX\")\n           (loop (sub1 num) (append roman \"IX\"))]\n       \
    \   [(< num 5)\n           (string-append roman \"V\")\n           (loop (sub1\
    \ num) (append roman \"V\"))]\n          [(< num 4)\n           (string-append\
    \ roman \"IV\")\n           (loop (sub1 num) (append roman \"IV\"))]\n       \
    \   [(< num 1)\n           (string-append roman \"I\")\n           (loop (sub1\
    \ num) (append roman \"I\"))]\n          [else\n           (string-append roman\
    \ \"I\")\n           (loop (sub1 num) (append roman \"I\"))]\n          )))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number must\
    \ be positive.\")]\n    [(< number 1000) (error \"Invalid input: number must be\
    \ less than or equal to 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(= remainder 0) \"x\"]\n              [(= remainder\
    \ 1) \"i\"]\n              [(= remainder 2) \"ii\"]\n              [(= remainder\
    \ 3) \"iii\"]\n              [(= remainder 4) \"iv\"]\n              [(= remainder\
    \ 5) \"v\"]\n              [(= remainder 6) \"vi\"]\n              [(= remainder\
    \ 7) \"vii\"]\n              [(= remainder 8) \"viii\"]\n              [(= remainder\
    \ 9) \"ix\"]\n              [(= remainder 10) \"x\"]\n              [(= remainder\
    \ 11) \"xi\"]\n              [(= remainder 12) \"xii\"]\n              [(= remainder\
    \ 13) \"xiii\"]\n              [(= remainder 14) \"xiv\"]\n              [(= remainder\
    \ 15) \"xvi\"]\n              [(= remainder 16) \"xvii\"]\n              [(= remainder\
    \ 17) \"xviii\"]\n              [(= remainder 18) \"xix\"]\n              [(=\
    \ remainder 19) \"xix\"]\n              [(= remainder 20) \"xix\"]\n         \
    \     [(= remainder 21) \"xix\"]\n              [(= remainder 22) \"xix\"]\n \
    \             [(= remainder 23) \"xix\"]\n              [(= remainder 24) \"xix\"\
    ]\n              [(= remainder 25) \"xix\"]\n              [(= remainder 26) \"\
    xix\"]\n              [(= remainder 27) \"xix\"]\n              [(= remainder\
    \ 28) \"xix\"]\n              [(= remainder 29) \"xix\"]\n              [(= remainder\
    \ 30) \"xix\"]\n              [(= remainder 31) \"xix\"]\n              [(= remainder\
    \ 32) \"xix\"]\n              [(= remainder 33) \"xix\"]\n              [(= remainder\
    \ 34) \"xix\"]\n              [(= remainder 35) \"xix\"]\n              [(= remainder\
    \ 36) \"xix\"]\n              [(= remainder 37) \"xix\"]\n              [(= remainder\
    \ 38) \"xix\"]\n              [(= remainder 39) \"xix\"]\n              [(= remainder\
    \ 40) \"xix\"]\n              [(= remainder 41) \"xix", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) (error \"Number must be positive.\"\
    )]\n    [(< number 1000) (error \"Number must be less than 1000.\")]\n    [else\
    \ (let ([remainder (modulo number 1000)])\n            (cond\n              [(<\
    \ remainder 100) (cons (int_to_mini_roman remainder) (list \"M\"))]\n        \
    \      [(< remainder 500) (cons (int_to_mini_roman remainder) (list \"CM\"))]\n\
    \              [(< remainder 1000) (cons (int_to_mini_roman remainder) (list \"\
    D\"))]\n              [(< remainder 500) (cons (int_to_mini_roman remainder) (list\
    \ \"CD\"))]\n              [(< remainder 100) (cons (int_to_mini_roman remainder)\
    \ (list \"C\"))]\n              [(< remainder 50) (cons (int_to_mini_roman remainder)\
    \ (list \"XC\"))]\n              [(< remainder 10) (cons (int_to_mini_roman remainder)\
    \ (list \"L\"))]\n              [(< remainder 5) (cons (int_to_mini_roman remainder)\
    \ (list \"XL\"))]\n              [(< remainder 1) (cons (int_to_mini_roman remainder)\
    \ (list \"X\"))]\n              [(< remainder 0) (cons (int_to_mini_roman remainder)\
    \ (list \"I\"))])))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) (error\
    \ \"Invalid input: number must be greater than 1\")]\n    [(< number 1000) (error\
    \ \"Invalid input: number must be less than 1000\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 0) (error\
    \ \"Invalid input: number must be greater than 1000\")]\n              [(< remainder\
    \ 100) (concat \"x\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 500) (concat \"l\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000) (concat \"c\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 5000) (concat \"d\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 10000) (concat \"m\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 50000) (concat \"v\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000) (concat \"i\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 500000) (concat \"x\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000000) (concat \"l\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 50000000) (concat \"c\" (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000) (concat \"d\" (int_to_mini_roman remainder))]\n              [(<\
    \ remainder 500000000) (concat \"m\" (int_to_mini_roman remainder))]\n       \
    \       [(< remainder 1000000000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(", "  (cond\n    [(= number 0) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number 0)]\n    [else (cons (char->string (char->integer 'm'))\n           \
    \    (int_to_mini_roman number (+ 1 )))]))\n", "  (let loop ((num number) (acc\
    \ '()))\n    (cond [(< num 1000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 900)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 5000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 4000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 3000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 2000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 1000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 900)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 5000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 4000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 3000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 2000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 1000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 900)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 5000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 4000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 3000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 2000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 1000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 900)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 5000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 4000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 3000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 2000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< num 1000)\n           (append acc (mini_roman_to_string\
    \ num))]\n          [(< ", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    x\"]\n    [(< number 4) \"c\"]\n    [(< number 10) \"d\"]\n    [(< number 100)\
    \ \"e\"]\n    [(< number 500) \"f\"]\n    [(< number 1000) \"g\"]\n    [(< number\
    \ 5000) \"h\"]\n    [(< number 10000) \"i\"]\n    [(< number 50000) \"j\"]\n \
    \   [(< number 100000) \"k\"]\n    [(< number 500000) \"l\"]\n    [(< number 1000000)\
    \ \"m\"]\n    [(< number 50000000) \"n\"]\n    [(< number 100000000) \"o\"]\n\
    \    [(< number 500000000) \"p\"]\n    [(< number 1000000000) \"q\"]\n    [(<\
    \ number 5000000000) \"r\"]\n    [(< number 10000000000) \"s\"]\n    [(< number\
    \ 50000000000) \"t\"]\n    [(< number 100000000000) \"u\"]\n    [(< number 500000000000)\
    \ \"v\"]\n    [(< number 1000000000000) \"w\"]\n    [(< number 5000000000000)\
    \ \"x\"]\n    [(< number 10000000000000) \"y\"]\n    [(< number 50000000000000)\
    \ \"z\"]\n    [else (int_to_mini_roman number) (+ number 1)]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n\
    \    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 10)\n               (int_to_mini_roman number % 10))]))\n", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 10) \"d\"\
    ]\n    [(< number 20) \"e\"]\n    [(< number 100) \"f\"]\n    [(< number 400)\
    \ \"g\"]\n    [(< number 1000) \"h\"]\n    [(< number 4000) \"k\"]\n    [else\
    \ (int_to_mini_roman number) (+ number 1)]))\n", "  (let ((roman (make-array '(1000)\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n    (cond\n      [(< number\
    \ 1) (error \"Invalid input: number must be greater than 1\")]\n      [(< number\
    \ 1000) (error \"Invalid input: number must be less than 1000\")]\n      [(< number\
    \ 100) (setf roman (make-array '(100) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\\
    h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z))\n        (setf roman (make-array '(10) '(#\\a #\\b #\\c #\\d #\\e #\\\
    f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))]\n      [(< number 10) (setf roman (make-array '(10) '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (setf roman (make-array '(100)\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))]\n      [(< number 100)\
    \ (setf roman (make-array '(100) '(#\\a #\\b #\\c #\\d #\\", "  (cond\n    [(<\
    \ number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n   \
    \ [else (cons (int_to_mini_roman number / 10)\n                (int_to_mini_roman\
    \ number % 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman number\
    \ / 10)\n               (int_to_mini_roman number % 10))]))\n", "  (cond\n   \
    \ [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10)]\n    [else (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number % 10)]))\n", "  (cond\n    [(< number 1) \"\"]\n \
    \   [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 5) \"i\"]\n\
    \    [(< number 10) \"v\"]\n    [(< number 50) \"xvi\"]\n    [(< number 100) \"\
    xix\"]\n    [else (int_to_mini_roman number) (cons number \"i\")]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)\
    \ (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number / 100)\
    \ (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (cons (int_to_mini_roman number / 10)\n               (int_to_mini_roman\
    \ number % 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman number mod 10)]))\n",
  "  (cond\n    [(< number 1) \"1\"]\n    [(< number 10) (string-append \"x\" (int_to_mini_roman\
    \ number))]\n    [(< number 100) (string-append \"c\" (int_to_mini_roman number))]\n\
    \    [(< number 500) (string-append \"d\" (int_to_mini_roman number))]\n    [(<\
    \ number 1000) (string-append \"m\" (int_to_mini_roman number))]\n    [(< number\
    \ 5000) (string-append \"l\" (int_to_mini_roman number))]\n    [(< number 10000)\
    \ (string-append \"v\" (int_to_mini_roman number))]\n    [(< number 50000) (string-append\
    \ \"i\" (int_to_mini_roman number))]\n    [(< number 100000) (string-append \"\
    x\" (int_to_mini_roman number))]\n    [(< number 500000) (string-append \"l\"\
    \ (int_to_mini_roman number))]\n    [else (string-append \"l\" (int_to_mini_roman\
    \ number))]\n  )\n)\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 1000)]\n    [else (cons (int_to_mini_roman number\
    \ / 100) (list (char (mod number 100)))]))\n)\n", "  (cond\n    [(< number 1)\
    \ \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 9) \"xc\"]\n    [(< number\
    \ 27) \"cc\"]\n    [(< number 100) \"xcc\"]\n    [(< number 400) \"ccc\"]\n  \
    \  [(< number 900) \"xccc\"]\n    [else (int_to_mini_roman number)])\n)\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman number) (int_to_mini_roman number - 1))]))\n",
  "  (let loop ((num number) (r \"\"))\n    (cond\n      [(< num 1000) (loop (quotient\
    \ num 1000) (append r (mini_roman_to_int (quotient num 1000))))]\n      [(< num\
    \ 1000)\n       (loop (quotient num 100) (append r (mini_roman_to_int (quotient\
    \ num 100))))]\n      [(< num 100)\n       (loop (quotient num 10) (append r (mini_roman_to_int\
    \ (quotient num 10))))]\n      [(< num 10)\n       (loop (quotient num 1) (append\
    \ r (mini_roman_to_int (quotient num 1))))]\n      [else (append r (mini_roman_to_int\
    \ num))])))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100) (int_to_mini_roman number % 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (cons (char->string (char->integer 'M')) (int_to_mini_roman\
    \ number / 10))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (substring (string->list \"MCMXCIV\"\
    ) (- number 1)) (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1)\
    \ \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 5) \"\
    i\"]\n    [(< number 10) \"v\"]\n    [(< number 50) \"xvi\"]\n    [(< number 100)\
    \ \"xix\"]\n    [else (int_to_mini_roman number-10)\n          (append \"c\" (int_to_mini_roman\
    \ number-5)\n                  (int_to_mini_roman number-2)\n                \
    \  (int_to_mini_roman number-1))]))\n", "  (cond\n    [(< number 1) (error \"\
    Number must be positive.\")]\n    [(< number 1000) (error \"Number must be less\
    \ than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n        \
    \    (cond\n              [(< remainder 0) (error \"Number must be less than 1000.\"\
    )]\n              [(< remainder 100) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000000) (concat \"v", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (int_to_mini_roman\
    \ number / 10)\n          (append (int_to_mini_roman number % 10)\n          \
    \        (mini_roman_numeral_letters number))]))\n", "  (cond\n    [(< number\
    \ 1) \"1\"]\n    [(< number 4) \"i\"]\n    [(< number 5) \"ii\"]\n    [(< number\
    \ 9) \"iii\"]\n    [else (int_to_mini_roman number) (+ number 1)]))\n", "  (cond\n\
    \    [(< number 1) (error \"Number must be positive.\")]\n    [(< number 1000)\
    \ (error \"Number must be less than or equal to 1000.\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 0) (error\
    \ \"Number must be less than or equal to 1000.\")]\n              [(< remainder\
    \ 100) (cons (- remainder 100) (int_to_mini_roman remainder))]\n             \
    \ [else (cons (- remainder 100) (int_to_mini_roman remainder)\n              \
    \             (append \"M\" (int_to_mini_roman (remainder 100))))]))]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number 100)))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10)]\n    [else (cons (char->string (char->integer\
    \ 'M'))\n                (int_to_mini_roman number / 10))]))\n", "  (cond\n  \
    \  [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (cons (int_to_mini_roman number / 10)\n                (int_to_mini_roman\
    \ number % 10\n                                (+ number 1)))]))\n", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"\
    ]\n    [(< number 50) \"l\"]\n    [(< number 100) \"c\"]\n    [else (int_to_mini_roman\
    \ number) (+ number 1)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman (/ number\
    \ 10)) (mini_roman_numeral (mod number 10)))]))\n", "  (cond\n    [(< number 1)\
    \ \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 4) \"\
    c\"]\n    [(< number 5) \"d\"]\n    [(< number 9) \"m\"]\n    [else (int_to_mini_roman\
    \ number) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman\
    \ number - 10) (int_to_mini_roman number - 10) (int_to_mini_roman number - 10)\
    \ (int_to_mini_roman number - 10) (int_to_", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 100) (list (char (- number 100) (char (- number 10) 'm'))))]))\n",
  "  (let loop ((num number) (romans #{}))\n    (cond ((< num 1000)\n           (loop\
    \ (sub1 num) (cons (sub1 (modulo (+ num 1000) 1000) romans))))\n          ((<\
    \ num 900)\n           (loop (sub1 num) (cons (sub1 (modulo (+ num 900) 100) romans))))\n\
    \          ((< num 500)\n           (loop (sub1 num) (cons (sub1 (modulo (+ num\
    \ 500) 10) romans))))\n          ((< num 400)\n           (loop (sub1 num) (cons\
    \ (sub1 (modulo (+ num 400) 10) romans))))\n          ((< num 100)\n         \
    \  (loop (sub1 num) (cons (sub1 (modulo (+ num 100) 10) romans))))\n         \
    \ ((< num 10)\n           (loop (sub1 num) (cons (sub1 (modulo num 10) romans))))\n\
    \          ((< num 1)\n           (loop (sub1 num) (cons (sub1 romans) romans))\n\
    \          (else\n           (loop (sub1 num) (cons (sub1 romans) romans))))))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10)]\n    [else (int_to_mini_roman number / 10) (int_to_mini_roman (- number\
    \ 10) (* 10 10))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: must\
    \ be greater than 1\")]\n    [(< number 1000) (error \"Invalid input: must be\
    \ less than 1000\")]\n    [else (let ([roman (make-roman (- number 1)))]\n   \
    \            (cond\n                 [(< roman 0) (error \"Invalid input: must\
    \ be greater than 0\")]\n                 [(< roman 100) (error \"Invalid input:\
    \ must be less than 100\")]\n                 [(< roman 400) (error \"Invalid\
    \ input: must be less than 400\")]\n                 [(< roman 900) (error \"\
    Invalid input: must be less than 900\")]\n                 [(< roman 1600) (error\
    \ \"Invalid input: must be less than 1600\")]\n                 [(< roman 2100)\
    \ (error \"Invalid input: must be less than 2100\")]\n                 [(< roman\
    \ 2400) (error \"Invalid input: must be less than 2400\")]\n                 [(<\
    \ roman 2700) (error \"Invalid input: must be less than 2700\")]\n           \
    \      [(< roman 3000) (error \"Invalid input: must be less than 3000\")]\n  \
    \               [(< roman 3300) (error \"Invalid input: must be less than 3300\"\
    )]\n                 [(< roman 3500) (error \"Invalid input: must be less than\
    \ 3500\")]\n                 [(< roman 3700) (error \"Invalid input: must be less\
    \ than 3700\")]\n                 [(< roman 4000) (error \"Invalid input: must\
    \ be less than 4000\")]\n                 [(< roman 4100) (error \"Invalid input:\
    \ must be less than 4100\")]\n                 [(< roman 4200) (error \"Invalid\
    \ input: must be less than 4200\")]\n                 [(< roman 4300) (error \"\
    Invalid input: must be less than 4300\")]\n                 [(< roman 4400) (error\
    \ \"Invalid input: must be less than 4400\")]\n                 [(< roman 4500)\
    \ (error \"Invalid input: must be less than 4500\")]\n                 [(< roman\
    \ 4600) (error \"Invalid input: must be less than 4600\")]\n                 [(<\
    \ roman 4700) (error \"Invalid input: must be less than 4700\")]\n           \
    \      [(< roman 4800) (error \"Invalid input: must be less than 4800\")]\n  \
    \               [(< roman 4900) (error \"Invalid input: must be less than 4900\"\
    )]\n                 [(< roman 5000) (error \"Invalid input: must be less than\
    \ 5000\")]\n                 [(< roman 5100) (error \"Invalid input: must be less\
    \ than 5100\")]\n                 [(< roman 5200) (error \"Invalid input: must\
    \ be less than 5200\")]\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n   \
    \ [else (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n",
  "  (let loop ((num number) (result '()))\n    (cond ((< num 1000) (append result\
    \ (mini_roman_to_int num)))\n          ((< num 1000)\n           (loop (sub1 num)\
    \ (append result (mini_roman_to_int num))))\n          (else\n           (loop\
    \ (sub1 num) (append result (mini_roman_to_int num))))))\n", "  (cond\n    [(<\
    \ number 1) \"x\"]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"]\n    [(<\
    \ number 50) \"xvi\"]\n    [(< number 100) \"xix\"]\n    [else (int_to_mini_roman\
    \ number-10)\n          (int_to_mini_roman number-5)\n          (int_to_mini_roman\
    \ number-2)\n          (int_to_mini_roman number-1)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons\
    \ (int_to_mini_roman number / 10)\n                (int_to_mini_roman number %\
    \ 10))]))\n", "  (cond\n    [(= number 0) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number 0)]\n    [else (cons (char->string (char->integer 'M))\n            \
    \    (int_to_mini_roman number 1))]))\n", "  (cond\n    [(< number 1) (error \"\
    Invalid input: must be greater than 1\")]\n    [(< number 1000) (error \"Invalid\
    \ input: must be less than 1000\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(= remainder 0) \"M\"]\n        \
    \      [(= remainder 1) \"D\"]\n              [(= remainder 2) \"C\"]\n      \
    \        [(= remainder 3) \"L\"]\n              [(= remainder 4) \"X\"]\n    \
    \          [(= remainder 5) \"V\"]\n              [(= remainder 6) \"I\"]\n  \
    \            [(= remainder 7) \"I\"]\n              [(= remainder 8) \"I\"]\n\
    \              [(= remainder 9) \"I\"]\n              [(= remainder 10) \"X\"\
    ]\n              [(= remainder 11) \"C\"]\n              [(= remainder 12) \"\
    L\"]\n              [(= remainder 13) \"V\"]\n              [(= remainder 14)\
    \ \"I\"]\n              [(= remainder 15) \"I\"]\n              [(= remainder\
    \ 16) \"I\"]\n              [(= remainder 17) \"I\"]\n              [(= remainder\
    \ 18) \"I\"]\n              [(= remainder 19) \"I\"]\n              [(= remainder\
    \ 20) \"I\"]\n              [(= remainder 21) \"I\"]\n              [(= remainder\
    \ 22) \"I\"]\n              [(= remainder 23) \"I\"]\n              [(= remainder\
    \ 24) \"I\"]\n              [(= remainder 25) \"I\"]\n              [(= remainder\
    \ 26) \"I\"]\n              [(= remainder 27) \"I\"]\n              [(= remainder\
    \ 28) \"I\"]\n              [(= remainder 29) \"I\"]\n              [(= remainder\
    \ 30) \"I\"]\n              [(= remainder 31) \"I\"]\n              [(= remainder\
    \ 32) \"I\"]\n              [(= remainder 33) \"I\"]\n              [(= remainder\
    \ 34) \"I\"]\n              [(= remainder 35) \"I\"]\n              [(= remainder\
    \ 36) \"I\"]\n              [(= remainder 37) \"I\"]\n              [(= remainder\
    \ 38) \"I\"]\n              [(= remainder 39) \"I\"]\n              [(= remainder\
    \ 40) \"I\"]\n              [(= remainder 41) \"I\"]\n              [(= remainder\
    \ 42) \"I\"]\n              [(= remainder 43) \"I\"]\n              [(= remainder\
    \ 44) \"I\"]\n              [(= remainder 45) \"", "  (let loop ((num number)\
    \ (roman_str \"\"))\n    (cond ((< num 1000)\n           (loop (sub1 num) (append\
    \ roman_str (mini_roman_to_int num))))\n          ((< num 900)\n           (loop\
    \ (sub1 num) (append roman_str (mini_roman_to_int num) (mini_roman_to_int (sub1\
    \ num))))\n          ((< num 5000)\n           (loop (sub1 num) (append roman_str\
    \ (mini_roman_to_int num) (mini_roman_to_int (sub1 num)) (mini_roman_to_int (sub1\
    \ num))))\n          ((< num 4000)\n           (loop (sub1 num) (append roman_str\
    \ (mini_roman_to_int num) (mini_roman_to_int (sub1 num)) (mini_roman_to_int (sub1\
    \ num)) (mini_roman_to_int (sub1 num))))\n          ((< num 3000)\n          \
    \ (loop (sub1 num) (append roman_str (mini_roman_to_int num) (mini_roman_to_int\
    \ (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int\
    \ (sub1 num))))\n          ((< num 2000)\n           (loop (sub1 num) (append\
    \ roman_str (mini_roman_to_int num) (mini_roman_to_int (sub1 num)) (mini_roman_to_int\
    \ (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int\
    \ (sub1 num))))\n          ((< num 1000)\n           (loop (sub1 num) (append\
    \ roman_str (mini_roman_to_int num) (mini_roman_to_int (sub1 num)) (mini_roman_to_int\
    \ (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int\
    \ (sub1 num)) (mini_roman_to_int (sub1 num))))\n          ((< num 900)\n     \
    \      (loop (sub1 num) (append roman_str (mini_roman_to_int num) (mini_roman_to_int\
    \ (sub1 num)) (mini_roman_to_int (sub1 num)) (mini_roman_to_int ", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"\
    ]\n    [(< number 100) \"xvi\"]\n    [(< number 500) \"xixvi\"]\n    [else (int_to_mini_roman\
    \ number) (int_to_mini_roman number 10)]))\n", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number mod 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) (error \"Number must be positive.\"\
    )]\n    [(< number 1000) (error \"Number must be less than or equal to 1000.\"\
    )]\n    [else (let ([remainder (modulo number 1000)])\n            (cond\n   \
    \           [(< remainder 0) (error \"Number must be less than or equal to 1000.\"\
    )]\n              [(< remainder 100) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 5000000000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10000000000) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50000000000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000000) (concat \"m\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500000000000) (", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ mod 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ mod 100) (int_to_mini_roman number mod 10)]))\n", "  (cond\n    [(< number 1)\
    \ (error \"Number must be positive.\")]\n    [(< number 1000) (error \"Number\
    \ must be less than or equal to 1000.\")]\n    [else (let ([roman '()])\n    \
    \         (cond\n               [(< number 10) ([cons roman '()])]\n         \
    \      [(< number 100) (cons (int_to_mini_roman number / 10) (cons roman '()))]\n\
    \               [(< number 500) (cons (int_to_mini_roman number / 100) (cons (int_to_mini_roman\
    \ number / 10) (cons roman '())))]\n               [(< number 1000) (cons (int_to_mini_roman\
    \ number / 100) (cons (int_to_mini_roman number / 100) (cons (int_to_mini_roman\
    \ number / 10) (cons roman '())))]\n               [(< number 4000) (cons (int_to_mini_roman\
    \ number / 1000) (cons (int_to_mini_roman number / 100) (cons (int_to_mini_roman\
    \ number / 100) (cons (int_to_mini_roman number / 10) (cons roman '())))])]\n\
    \               [(< number 10000) (cons (int_to_mini_roman number / 100) (cons\
    \ (int_to_mini_roman number / 1000) (cons (int_to_mini_roman number / 100) (cons\
    \ (int_to_mini_roman number / 100) (cons (int_to_mini_roman number / 10) (cons\
    \ roman '())))]))]\n               [(< number 20000) (cons (int_to_mini_roman\
    \ number / 100) (cons (int_to_mini_roman number / 1000) (cons (int_to_mini_roman\
    \ number / 100) (cons (int_to_mini_roman number / 100) (cons (int_to_mini_roman\
    \ number / 100) (cons (int_to_mini_roman number / 10) (cons roman '())))]))]\n\
    \               [(< number 30000) (cons (int_to_mini_roman number / 100) (cons\
    \ (int_to_mini_roman number / 1000) (cons (int_to_mini_roman number / 100) (cons\
    \ (int_to_mini_roman number / 100) (cons (int_to_mini_roman number / 100) (cons\
    \ (int_to_mini_roman number / 100) (cons (int_to_mini_roman number / 10) (cons\
    \ roman '())))]))])]\n               ", "  (cond\n    [(< number 1) \"\"]\n  \
    \  [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number mod 100) \"\"]))\n", "  (cond\n    [(<\
    \ number 1) \"x\"]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"]\n    [(<\
    \ number 50) \"xvi\"]\n    [(< number 100) \"xix\"]\n    [else (int_to_mini_roman\
    \ number-10)\n          (cons (char->string #\\i)\n                (int_to_mini_roman\
    \ number-10))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number\
    \ must be positive.\")]\n    [(< number 1000) (error \"Invalid input: number must\
    \ be less than or equal to 1000.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(< remainder 100) (cons (char->string\
    \ 'M) (int_to_mini_roman remainder))]\n              [(< remainder 500) (cons\
    \ (char->string 'D) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000) (cons (char->string 'C) (int_to_mini_roman remainder))]\n            \
    \  [(< remainder 500) (cons (char->string 'L) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100) (cons (char->string 'X) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 50) (cons (char->string 'V) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 10) (cons (char->string 'I) (int_to_mini_roman remainder))]\n\
    \              [else (error \"Invalid input: number too large.\")]))]))\n", " \
    \ (cond\n    [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n    [(= number 2)\
    \ \"ix\"]\n    [(= number 3) \"xix\"]\n    [(= number 4) \"v\"]\n    [(= number\
    \ 5) \"vi\"]\n    [(= number 6) \"vix\"]\n    [(= number 7) \"ixv\"]\n    [(=\
    \ number 8) \"xixv\"]\n    [(= number 9) \"xvi\"]\n    [(= number 10) \"xvix\"\
    ]\n    [(= number 11) \"xixvi\"]\n    [(= number 12) \"xixvix\"]\n    [(= number\
    \ 13) \"xviix\"]\n    [(= number 14) \"xviixx\"]\n    [(= number 15) \"xixvix\"\
    ]\n    [(= number 16) \"xixvixx\"]\n    [(= number 17) \"xviixx\"]\n    [(= number\
    \ 18) \"xviixxx\"]\n    [(= number 19) \"xixvixx\"]\n    [(= number 20) \"xixvixxx\"\
    ]\n    [(= number 21) \"xviixxxx\"]\n    [(= number 22) \"xviixxxxx\"]\n    [(=\
    \ number 23) \"xixvixxxxx\"]\n    [(= number 24) \"xixvixxxxxx\"]\n    [(= number\
    \ 25) \"xviixxxxxxx\"]\n    [(= number 26) \"xviixxxxxxxx\"]\n    [(= number 27)\
    \ \"xixvixxxxxxxx\"]\n    [(= number 28) \"xixvixxxxxxxxx\"]\n    [(= number 29)\
    \ \"xviixxxxxxxxxxx\"]\n    [(= number 30) \"xviixxxxxxxxxxxx\"]\n    [(= number\
    \ 31) \"xixvixxxxxxxxxxxx\"]\n    [(= number 32) \"xixvixxxxxxxxxxxxx\"]\n   \
    \ [(= number 33) \"xviixxxxxxxxxxxxxxx\"]\n    [(= number 34) \"xviixxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 35) \"xixvixxxxxxxxxxxxxxxx\"]\n    [(= number 36) \"xixvixxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 37) \"xviixxxxxxxxxxxxxxxxxxx\"]\n    [(= number 38) \"xviixxxxxxxxxxxxxxxxxxxx\"\
    ]\n    [(= number 39) \"xixvixxxxxxxxxxxxxxxxxxxx\"]\n    [(= number 40) \"xixvixxxxxxxxxxxxxxxxxxxxx",
  "  (cond\n    [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 9)\
    \ \"d\"]\n    [(< number 27) \"l\"]\n    [(< number 52) \"xl\"]\n    [(< number\
    \ 103) \"xc\"]\n    [(< number 203) \"xd\"]\n    [(< number 403) \"xlc\"]\n  \
    \  [(< number 703) \"xix\"]\n    [(< number 1003) \"xc\"]\n    [(< number 2003)\
    \ \"xd\"]\n    [(< number 4013) \"xlc\"]\n    [(< number 7013) \"xix\"]\n    [(<\
    \ number 10013) \"xc\"]\n    [(< number 20013) \"xd\"]\n    [(< number 4026) \"\
    xlc\"]\n    [(< number 7026) \"xix\"]\n    [(< number 10026) \"xc\"]\n    [(<\
    \ number 20026) \"xd\"]\n    [(< number 4052) \"xlc\"]\n    [(< number 7052) \"\
    xix\"]\n    [(< number 10052) \"xc\"]\n    [(< number 20052) \"xd\"]\n    [(<\
    \ number 4072) \"xlc\"]\n    [(< number 7072) \"xix\"]\n    [(< number 10072)\
    \ \"xc\"]\n    [(< number 20072) \"xd\"]\n    [(< number 4100) \"xlc\"]\n    [(<\
    \ number 7100) \"xix\"]\n    [(< number 100100) \"xc\"]\n    [(< number 200100)\
    \ \"xd\"]\n    [(< number 40200) \"xlc\"]\n    [(< number 70200) \"xix\"]\n  \
    \  [(< number 100200) \"xc\"]\n    [(< number 200200) \"xd\"]\n    [(< number\
    \ 40400) \"xlc\"]\n    [(< number 70400) \"xix\"]\n    [(< number 100400) \"xc\"\
    ]\n    [(< number 200400) \"xd\"]\n    [(< number 40600) \"xlc\"]\n    [(< number\
    \ 70600) \"xix\"]\n    [(< number 100600) \"xc\"]\n    [(< number 200600) \"xd\"\
    ]\n    [(< number 40800) \"xlc\"]\n    [(< number 70800) \"xix\"]\n    [(< number\
    \ 100800) \"xc\"]\n    [(< number 200800) \"xd\"]\n    [(", "  (cond\n    [(<\
    \ number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number mod 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number mod 100) (int_to_mini_roman number mod 10)]))\n", "  (let loop ((num\
    \ number) (romans '(i v x l c d))\n             (result '()))\n    (cond ((< num\
    \ 1000)\n           (append result (mini_roman_to_string num)))\n          ((<\
    \ num 900)\n           (append result (mini_roman_to_string num)))\n         \
    \ ((< num 500)\n           (append result (mini_roman_to_string num)))\n     \
    \     ((< num 400)\n           (append result (mini_roman_to_string num)))\n \
    \         ((< num 100)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 50)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 25)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 10)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 5)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 1)\n           (append result (mini_roman_to_string num)))\n\
    \          ((< num 0)\n           (append result (mini_roman_to_string num)))\n\
    \          (else\n           (loop (sub1 num) (append romans (mini_roman_to_string\
    \ num))\n                (append result (mini_roman_to_string num)))))))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 10)\n               (int_to_mini_roman number % 10))]))\n", "  (cond\n\
    \    [(= number 0) \"\"]\n    [(= number 1) \"x\"]\n    [(= number 2) \"ix\"]\n\
    \    [(= number 3) \"xix\"]\n    [(= number 4) \"lx\"]\n    [(= number 5) \"ixl\"\
    ]\n    [(= number 6) \"xixl\"]\n    [(= number 7) \"llx\"]\n    [(= number 8)\
    \ \"ilx\"]\n    [(= number 9) \"xil\"]\n    [(= number 10) \"ixl\"]\n    [(= number\
    \ 11) \"xixl\"]\n    [(= number 12) \"llx\"]\n    [(= number 13) \"ilx\"]\n  \
    \  [(= number 14) \"xil\"]\n    [(= number 15) \"ixl\"]\n    [(= number 16) \"\
    xixl\"]\n    [(= number 17) \"llx\"]\n    [(= number 18) \"ilx\"]\n    [(= number\
    \ 19) \"xil\"]\n    [(= number 20) \"ixl\"]\n    [(= number 21) \"xixl\"]\n  \
    \  [(= number 22) \"llx\"]\n    [(= number 23) \"ilx\"]\n    [(= number 24) \"\
    xil\"]\n    [(= number 25) \"ixl\"]\n    [(= number 26) \"xixl\"]\n    [(= number\
    \ 27) \"llx\"]\n    [(= number 28) \"ilx\"]\n    [(= number 29) \"xil\"]\n   \
    \ [(= number 30) \"ixl\"]\n    [(= number 31) \"xixl\"]\n    [(= number 32) \"\
    llx\"]\n    [(= number 33) \"ilx\"]\n    [(= number 34) \"xil\"]\n    [(= number\
    \ 35) \"ixl\"]\n    [(= number 36) \"xixl\"]\n    [(= number 37) \"llx\"]\n  \
    \  [(= number 38) \"ilx\"]\n    [(= number 39) \"xil\"]\n    [(= number 40) \"\
    ixl\"]\n    [(= number 41) \"xixl\"]\n    [(= number 42) \"llx\"]\n    [(= number\
    \ 43) \"ilx\"]\n    [(= number 44) \"xil\"]\n    [(= number 45) \"ixl\"]\n   \
    \ [(= number 46) \"xixl\"]\n    [(= number 47) \"llx\"]\n    [(= number 48) \"\
    ilx\"]\n    [(= number 49) \"xil\"]\n    [(", "  (cond\n    [(< number 1) \"\"\
    ]\n    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 10)\n                (int_to_mini_roman number % 10))]))\n", "  (cond\n\
    \    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 1000)]\n\
    \    [else (cons (char->string (char->integer 'M')) (int_to_mini_roman number\
    \ / 1000))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman\
    \ number / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number\
    \ 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number mod 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number mod 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100) (int_to_mini_roman\
    \ number % 10)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100) (int_to_mini_roman number % 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number mod 100)]))\n", "  (cond\n    [(< number 1)\
    \ \"\"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman\
    \ number % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number mod 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number mod 100) (int_to_mini_roman\
    \ number mod 10)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman number\
    \ / 10)\n                (int_to_mini_roman number % 10))]))\n", "  (cond\n  \
    \  [(< number 1) \"x\"]\n    [(< number 4) \"c\"]\n    [(< number 10) \"xc\"]\n\
    \    [(< number 100) \"cc\"]\n    [(< number 400) \"ccc\"]\n    [else (int_to_mini_roman\
    \ number) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_to_mini_roman\
    \ number 100) (int_to_mini_roman number 100) (int_to_mini_roman number 100) (int_",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (let loop ((num number) (r \"\"))\n    (cond ((= num 0) r)\n\
    \          ((< num 1000) (loop (- num 1) (append r (mini_roman_to_int (- num 100))))\n\
    \          (else (loop (- num 100) (append r (mini_roman_to_int (- num 100)))))\n\
    \          )))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 1000)]\n    [else (cons (char->string (char->integer 'M')) (int_to_mini_roman\
    \ number / 1000))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman number\
    \ / 10) (list (char (- number 10))))]))\n", "  (cond\n    [(< number 1) \"\"]\n\
    \    [(< number 1000) (int_to_mini_roman number / 10)]\n    [else (cons (int_to_mini_roman\
    \ number / 10)\n              (int_to_mini_roman number % 10))]))\n", "  (let\
    \ loop ((num number) (result '()))\n    (if (< num 1000)\n        (cond ((< num\
    \ 100) (loop (- num 100) (append result (list 'm)))\n               ((< num 500)\
    \ (loop (- num 500) (append result (list 'd)))\n               ((< num 1000) (loop\
    \ (- num 1000) (append result (list 'c))))\n               ((< num 5000) (loop\
    \ (- num 5000) (append result (list 'l))))\n               ((< num 10000) (loop\
    \ (- num 10000) (append result (list 'x))))\n               ((< num 100000) (loop\
    \ (- num 100000) (append result (list 'v))))\n               ((< num 1000000)\
    \ (loop (- num 1000000) (append result (list 'i))))\n               ((< num 100000000)\
    \ (loop (- num 100000000) (append result (list 'n))))\n               ((< num\
    \ 1000000000) (loop (- num 1000000000) (append result (list 'm))))\n         \
    \      ((< num 10000000000) (loop (- num 10000000000) (append result (list 'd))))\n\
    \               ((< num 100000000000) (loop (- num 100000000000) (append result\
    \ (list 'c))))\n               ((< num 1000000000000) (loop (- num 1000000000000)\
    \ (append result (list 'l))))\n               ((< num 10000000000000) (loop (-\
    \ num 10000000000000) (append result (list 'x))))\n               ((< num 100000000000000)\
    \ (loop (- num 100000000000000) (append result (list 'v))))\n               ((<\
    \ num 1000000000000000) (loop (- num 1000000000000000) (append result (list 'i))))\n\
    \               ((< num 10000000000000000) (loop (- num 10000000000000000) (append\
    \ result (list 'n))))\n               ((< num 100000000000000000) (loop (- num\
    \ 100000000000000000) (append result (list 'm))))\n               ((< num 1000000000000000000)\
    \ (loop (- num 1000000000000000000) (append result (list 'd))))\n            \
    \   ((< num 10000000000000000000) (loop (- num 10000000000000000000) (append result\
    \ (list 'c))))\n               ((< num 100000000000000000000) (loop (- num 100000000000000000000)\
    \ (append result (list 'l))))\n               ((< num 1000000000000000000000)\
    \ (loop (- num 1000000000000000000000) (append result (list 'x))))\n         \
    \      (", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number mod 10)]\n    [else (int_to_mini_roman\
    \ number / 10) (int_to_mini_roman number mod 10) (int_to_mini_roman number mod\
    \ 10)]))\n", "  (let loop ((num number) (roman-string \"\"))\n    (cond [(< num\
    \ 1000) (cons roman-string (int_to_mini_roman num))]\n          [(< num 1000)\n\
    \           (loop (sub1 num) (append roman-string (int_to_mini_roman num)))]\n\
    \          [else (loop (sub1 num) (append roman-string \"M\")))])))\n", "  (cond\n\
    \    [(< number 1) \"x\"]\n    [(< number 5) \"c\"]\n    [(< number 10) \"l\"\
    ]\n    [(< number 50) \"d\"]\n    [(< number 100) \"m\"]\n    [else (int_to_mini_roman\
    \ number / 10)]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000)\
    \ (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n    [else\
    \ (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n", " \
    \ (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100) (int_to_mini_roman number % 10)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 100))))]))\n", "  (cond\n    [(< number 1) \"\"]\n    [(< number\
    \ 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number % 10)]\n   \
    \ [else (int_to_mini_roman number / 100) (int_to_mini_roman number % 100)]))\n",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (char->string (char->integer 'M))\n                (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(= number 0) \"\"]\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (char->string (char->integer 'M'))\n             \
    \   (int_to_mini_roman number-1000))]))\n", "  (cond\n    [(< number 1) \"x\"\
    ]\n    [(< number 5) \"i\"]\n    [(< number 10) \"v\"]\n    [(< number 50) \"\
    xvi\"]\n    [(< number 100) \"xix\"]\n    [else (int_to_mini_roman number) (append\
    \ \"i\" (int_to_mini_roman number))]\n  )\n)\n", "  (let loop ((num number) (roman\
    \ (make-string 26 empty)))\n    (cond [(< num 1000)\n           (reverse roman)]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"M\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"D\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"C\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"L\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"X\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"V\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))]\n\
    \          [(< num 1000)\n           (loop (sub1 num) (append roman \"I\"))",
  "  (cond\n    [(< number 1) \"\"]\n    [(< number 1000) (int_to_mini_roman number\
    \ / 10) (int_to_mini_roman number % 10)]\n    [else (int_to_mini_roman number\
    \ / 100) (int_to_mini_roman number % 100)]))\n", "  (cond\n    [(< number 1) \"\
    \"]\n    [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n", "  (cond\n    [(< number 1) \"x\"]\n    [(< number 5) \"i\"]\n\
    \    [(< number 10) \"v\"]\n    [(< number 50) \"xvi\"]\n    [(< number 100) \"\
    xix\"]\n    [(< number 500) \"xvii\"]\n    [(< number 1000) \"cli\"]\n    [(<\
    \ number 5000) \"clii\"]\n    [(< number 10000) \"cliii\"]\n    [(< number 50000)\
    \ \"cliiix\"]\n    [(< number 100000) \"cliix\"]\n    [(< number 500000) \"cliixvi\"\
    ]\n    [(< number 1000000) \"clixvi\"]\n    [(< number 5000000) \"clixvii\"]\n\
    \    [(< number 10000000) \"clixviii\"]\n    [(< number 50000000) \"clixviiii\"\
    ]\n    [(< number 100000000) \"clixviiiii\"]\n    [(< number 500000000) \"clixviiiiii\"\
    ]\n    [(< number 1000000000) \"clixviiiiiii\"]\n    [(< number 5000000000) \"\
    clixviiiiiiii\"]\n    [(< number 10000000000) \"clixviiiiiiiii\"]\n    [(< number\
    \ 50000000000) \"clixviiiiiiiiii\"]\n    [(< number 100000000000) \"clixviiiiiiiiiii\"\
    ]\n    [(< number 500000000000) \"clixviiiiiiiiiiii\"]\n    [(< number 1000000000000)\
    \ \"clixviiiiiiiiiiiii\"]\n    [(< number 5000000000000) \"clixviiiiiiiiiiiiii\"\
    ]\n    [(< number 10000000000000) \"clixviiiiiiiiiiiiiii\"]\n    [(< number 50000000000000)\
    \ \"clixviiiiiiiiiiiiiiii\"]\n    [(< number 100000000000000) \"clixviiiiiiiiiiiiiiiii\"\
    ]\n    [(< number 500000000000000) \"clixviiiiiiiiiiiiiiiiii\"]\n    [(< number\
    \ 1000000000000000) \"clixviiiiiiiiiiiiiiiiiii\"]\n    [(< number 5000000000000000)\
    \ \"clixviiiiiiiiiiiiiiiiiiii\"]\n    [(< number 1000000000000000000) \"clixviiiiiiiiiiiiiiiiiiiii\"\
    ]\n    [else (int_to_mini_roman number", "  (cond\n    [(< number 1) \"\"]\n \
    \   [(< number 1000) (int_to_mini_roman number / 10) (int_to_mini_roman number\
    \ % 10)]\n    [else (int_to_mini_roman number / 100) (int_to_mini_roman number\
    \ % 100)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
