name: HumanEval_154_cycpattern_check
language: rkt
prompt: "#lang racket\n\n;; You are given 2 words. You need to return #t if the second\
  \ word or any of its rotations is a substring in the first word\n;; >>> (cycpattern_check\
  \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
  ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
  \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
  ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n(define (cycpattern_check\
  \ a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n\
  \    (check-equal? (candidate \"xyzw\" \"xyw\") #f)\n    (check-equal? (candidate\
  \ \"yello\" \"ell\") #t)\n    (check-equal? (candidate \"whattup\" \"ptut\") #f)\n\
  \    (check-equal? (candidate \"efef\" \"fee\") #t)\n    (check-equal? (candidate\
  \ \"abab\" \"aabb\") #f)\n    (check-equal? (candidate \"winemtt\" \"tinem\") #t)\n\
  ))\n\n(test-humaneval)"
completions: ["  (or (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) 0)\n      (equal? (string-length b) 0)\n\
    \      (equal? (string-length a) (string-length b))\n      (equal? (string-length\
    \ a) 0)\n      (equal? (string-length b) 0)\n      (equal? (string-length a) (string-length\
    \ b))\n      (equal? (string-length a) ", "  (or (string=? (substring b 0 a) (substring\
    \ a 0 b)) (string=? (substring b 0 a) (substring a (b length) b))))\n", "  (cond\n\
    \    [(empty? a) #f]\n    [(empty? b) #f]\n    [(equal? (first a) (first b)) #t]\n\
    \    [(equal? (first b) (first a)) #t]\n    [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n    [else (cycpattern_check (rest a) (rest b))]\n  ))\n",
  "  (or (string=? a b)\n      (or (string=? (string-rotate b 1) a)\n          (string=?\
    \ (string-rotate b 2) a)\n          (string=? (string-rotate b 3) a)\n       \
    \   (string=? (string-rotate b 4) a)\n          (string=? (string-rotate b 5)\
    \ a)\n          (string=? (string-rotate b 6) a)\n          (string=? (string-rotate\
    \ b 7) a)\n          (string=? (string-rotate b 8) a)\n          (string=? (string-rotate\
    \ b 9) a)\n          (string=? (string-rotate b 10) a)\n          (string=? (string-rotate\
    \ b 11) a)\n          (string=? (string-rotate b 12) a)\n          (string=? (string-rotate\
    \ b 13) a)\n          (string=? (string-rotate b 14) a)\n          (string=? (string-rotate\
    \ b 15) a)\n          (string=? (string-rotate b 16) a)\n          (string=? (string-rotate\
    \ b 17) a)\n          (string=? (string-rotate b 18) a)\n          (string=? (string-rotate\
    \ b 19) a)\n          (string=? (string-rotate b 20) a)\n          (string=? (string-rotate\
    \ b 21) a)\n          (string=? (string-rotate b 22) a)\n          (string=? (string-rotate\
    \ b 23) a)\n          (string=? (string-rotate b 24) a)\n          (string=? (string-rotate\
    \ b 25) a)\n          (string=? (string-rotate b 26) a)\n          (string=? (string-rotate\
    \ b 27) a)\n          (string=? (string-rotate b 28) a)\n          (string=? (string-rotate\
    \ b 29) a)\n          (string=? (string-rotate b 30) a)\n          (string=? (string-rotate\
    \ b 31) a)\n          (string=? (string-rotate b 32) a)\n          (string=? (string-rotate\
    \ b 33) a)\n          (string=? (string-rotate b 34) a)\n          (string=? (string-rotate\
    \ b 35) a)\n          (string=? (string-rotate b 36) a)\n          (string=? (string-rotate\
    \ b 37) a)\n          (string=? (string-rotate b 38) a)\n          (string=? (string-rotate\
    \ b 39) a)\n          (string=? (string-rotate b 40) a)\n          (string=? (string-rotate\
    \ b 41) a)\n          (string=? (string-rotate b 42) a)\n          (string=? (string-rotate\
    \ b 43) a)\n          (string=? (string-rotate b 44) a)\n          (string=? (string-rotate\
    \ b 45) a)\n          (string=? (string-rotate b 46) a)\n          (string=? (string-rotate ",
  "  (or (string=? a b)\n      (or (string=? (string-ref a 0) (string-ref b 0))\n\
    \          (string-contains-rotations b a))))\n", "  (or (string=? a b)\n    \
    \  (or (string=? (string-reverse a) b)\n          (string-rotations? a b))))\n",
  "  (or (string=? a b)\n      (or (string=? (string-ref a 0) (string-ref b 0))\n\
    \          (string-contains-rotations a b))))\n", "  (cond ((or (string-match\
    \ a b) #t)\n         (string-match a b))\n        ((or (string-match a b) #f)\n\
    \         (string-match a b (string-length a)))\n        (else #f)))\n", "  (or\
    \ (string=? a b)\n      (or (string=? (substring a 0 1) b)\n          (string=?\
    \ (substring b 0 1) a))))\n", "  (or (string=? (substring b 0 (string-length a))\
    \ a)\n      (map (lambda (x) (substring a 0 (string-length x))) (string-split\
    \ b))))\n", "  (or (string=? a b)\n      (or (string=? (string-ref a 0) (string-ref\
    \ b 0))\n          (string-contains-rotations b a))))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-rotate b 1) a)\n          (string-contains-substring\
    \ b a))))\n", "  (or (string=? a b)\n      (or (string=? (string-append a b) a)\n\
    \          (string=? (string-append b a) b)\n          (string-contains-substring\
    \ a b)\n          (string-contains-substring b a))))\n", "  (cond ((or (string=?\
    \ a \"\") (string=? b \"\")) #f)\n        ((or (string=? a b) (string=? (string-ref\
    \ a 0) (string-ref b 0))) #f)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (string-ref a 0) (string-ref\
    \ b 0)) (cycpattern_check (string-ref a 1) (string-ref b 1))) #t)\n        ((or\
    \ (string=? (string-ref a 0) (string-ref b 0)) (cycpattern_check (string-ref a\
    \ 1) (string-ref b 1))) #t)\n        ((or (string=? (", "  (or (string=? b a)\n\
    \      (or (string=? (string-rotate b 1) a)\n          (string-contains-rotations\
    \ b a))))\n", "  (cond ((or (string-match a b) (string-match b a)) #t)\n     \
    \   ((string-match a b) #t)\n        ((string-match b a) #t)\n        (else #f)))\n",
  "  (or (string=? a b)\n      (or (string=? (string-reverse a) b)\n          (string-contains-rotations\
    \ b a))))\n", "  (cond ((or (string-match a b) (string-match b a)) #t)\n     \
    \   ((string-match a b) #t)\n        ((string-match b a) #t)\n        ((string-match\
    \ a b) (string-match a b) #t)\n        ((string-match b a) (string-match b a)\
    \ #t)\n        ((string-match a b) (string-match b a) (string-match a b) #t)\n\
    \        ((string-match b a) (string-match b a) (string-match a b) #t)\n     \
    \   ((string-match a b) (string-match b a) (string-match a b) (string-match a\
    \ b) #t)\n        ((string-match b a) (string-match b a) (string-match a b) (string-match\
    \ a b) #t)\n        ((string-match a b) (string-match b a) (string-match a b)\
    \ (string-match a b) (string-match a b) #t)\n        ((string-match b a) (string-match\
    \ b a) (string-match a b) (string-match a b) (string-match a b) (string-match\
    \ a b) #t)\n        ((string-match a b) (string-match b a) (string-match a b)\
    \ (string-match a b) (string-match a b) (string-match a b) (string-match a b)\
    \ #t)\n        ((string-match b a) (string-match b a) (string-match a b) (string-match\
    \ a b) (string-match a b) (string-match a b) (string-match a b) (string-match\
    \ a b) #t)\n        ((string-match a b) (string-match b a) (string-match a b)\
    \ (string-match a b) (string-match a b) (string-match a b) (string-match a b)\
    \ (string-match a b) (string-match a b) #t)\n        ((string-match b a) (string-match\
    \ b a) (string-match a b) (string-match a b) (string-match a b) (string-match\
    \ a b) (string-match a b) (string-match a b) (string-match a b) (string-match\
    \ a b) #t)\n        ((string-match a b) (string-match b a) (string-match a b)\
    \ (string-match a b) (string-match a b) (string-match a b) (string-match a b)\
    \ (string-match a b) (string-match a b) (string-match a b) (string-match a b)\
    \ #t)\n        ((string-match b a) (string-match b a) (string-match a b) (string-match\
    \ a b) (string-match a b) (string-match a b) (string-match a b) (string-match\
    \ a b) (string-match a b) (string-match a b) (string-match ", "  (or (string=?\
    \ a b)\n      (or (string=? (string-append a b) a)\n          (string=? (string-append\
    \ a b) (string-append b a))))) ;; #lang racket\n", "  (or (string=? a b)\n   \
    \   (or (string=? (substring a 0 1) b)\n          (string=? (substring a 1 0)\
    \ b))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
