name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given a list arr of integers and a positive integer k,\
  \ return a sorted list \n;; of length k with the maximum k numbers in arr.\n;; Example\
  \ 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>>\
  \ (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum (list\
  \ -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;; 1. The length of the list will\
  \ be in the range of [1, 1000].\n;; 2. The elements in the list will be in the range\
  \ of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) (list 0)]\n    [(= k 0) (first arr)]\n \
    \   [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      (list arr)\n \
    \     (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr)) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far\
    \ 0])\n        (let ([cur-max 0])\n          (for ([i arr])\n            (if (>\
    \ i cur-max)\n                (set! cur-max i)\n                (set! max-so-far\
    \ cur-max)\n              )\n            )\n          (cons max-so-far max-so-far)\n\
    \        )\n      )\n    )\n  )\n", "  (if (= k 0)\n      (list arr)\n      (let\
    \ ([max (first arr)])\n        (if (null? (rest arr))\n            (list max)\n\
    \            (let ([next (maximum (rest arr) (sub1 k))]\n                  [max\
    \ (max max next)])\n              (cons max max))))))\n", "  (if (= k 0)\n   \
    \   (list 0)\n      (let ([max-so-far 0])\n        (let loop ((arr arr) (k k)\
    \ (max-so-far max-so-far))\n          (cond [(empty? arr) (list max-so-far)]\n\
    \                [else (let ([curr (first arr)])\n                       (if (<\
    \ k 0)\n                           (loop (rest arr) (sub1 k) max-so-far)\n   \
    \                        (loop (rest arr) (sub1 k) (cond [(> curr max-so-far)\
    \ (list curr max-so-far)]\n                                                  \
    \          [else (cons curr max-so-far)]))]))]))))\n", "  (if (= k 0)\n      (list\
    \ 0)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n          \
    \  (cons max arr)\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([head\
    \ (first arr)])\n        (if (> head 0)\n            (append (maximum (rest arr)\
    \ (- k 1))\n                    (list head))\n            (maximum (rest arr)\
    \ (- k 1))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n\
    \        (if (> (car arr) max)\n            (cons max \n                   (maximum\
    \ (cdr arr) (sub1 k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ([arr\
    \ arr]\n                   [max-so-far max-so-far]\n                   [k k])\n\
    \          (cond [(empty? arr) max-so-far]\n                [(< k 0) max-so-far]\n\
    \                [else (loop (rest arr)\n                          (cond [(< max-so-far\
    \ arr) (cons max-so-far arr)]\n                                [(> max-so-far\
    \ arr) (cons arr max-so-far)]\n                                [else (cons max-so-far\
    \ arr))])]\n                [else (loop (rest arr)\n                         \
    \ (cond [(< max-so-far arr) (cons max-so-far arr)]\n                         \
    \       [(> max-so-far arr) (cons arr max-so-far)]\n                         \
    \       [else (cons max-so-far arr))])]\n                [else (loop (rest arr)\n\
    \                          (cond [(< max-so-far arr) (cons max-so-far arr)]\n\
    \                                [(> max-so-far arr) (cons arr max-so-far)]\n\
    \                                [else (cons max-so-far arr))])]\n           \
    \     [else (loop (rest arr)\n                          (cond [(< max-so-far arr)\
    \ (cons max-so-far arr)]\n                                [(> max-so-far arr)\
    \ (cons arr max-so-far)]\n                                [else (cons max-so-far\
    \ arr))])]\n                [else (loop (rest arr)\n                         \
    \ (cond [(< max-so-far arr) (cons max-so-far arr)]\n                         \
    \       [(> max-so-far arr) (cons arr max-so-far)]\n                         \
    \       [else (cons max-so-far arr))])]\n                [else (loop (rest arr)\n\
    \                          (cond [(< max-so-far arr) (cons max-so-far arr)]\n\
    \                                [(> max-so-far arr) (cons arr max-so-far)]\n\
    \                                [else (cons max-so-far arr))])]\n           \
    \     [else (loop (rest arr)\n                          (cond [(< max-so-far arr)\
    \ (cons max-so-far arr)]\n                                [(> max-so-far arr)\
    \ (cons arr max-so-far)]\n                                [else (cons max-so-far\
    \ arr))])", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n   \
    \     (if (> (car arr) max)\n            (let ([max (car arr)])\n            \
    \  (if (> (car arr) max)\n                  (let ([max (car arr)])\n         \
    \           (if (> (car arr) max)\n                        (let ([max (car arr)])\n\
    \                          (if (> (car arr) max)\n                           \
    \   (let ([max (car arr)])\n                                (if (> (car arr) max)\n\
    \                                    (let ([max (car arr)])\n                \
    \                      (if (> (car arr) max)\n                               \
    \           (let ([max (car arr)])\n                                         \
    \   (if (> (car arr) max)\n                                                (let\
    \ ([max (car arr)])\n                                                  (if (>\
    \ (car arr) max)\n                                                      (let ([max\
    \ (car arr)])\n                                                        (if (>\
    \ (car arr) max)\n                                                           \
    \ (let ([max (car arr)])\n                                                   \
    \           (if (> (car arr) max)\n                                          \
    \                        (let ([max (car arr)])\n                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                           (let ([max (car arr)])\n\
    \                                                                          (if\
    \ (> (car arr) max)\n                                                        \
    \                      (let ([max (car arr)])\n                              \
    \                                                  (if (> (car arr) max)\n   \
    \                                                                            \
    \     (let ([max (car arr)])\n                                               \
    \                                       (if (> (car arr) max)\n              \
    \                                                                            (let\
    \ ([max (car arr)])\n                                                        \
    \                                    (if (> (car arr) max)\n                 \
    \                                                                            \
    \   (let ([max (car arr)])\n                                                 \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                      (let ([max (car arr)])\n                              \
    \                                                                          (if\
    \ (> (car arr) max)\n                                                        \
    \                                                    (let ([max (car arr)])\n\
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                   (let ([max (car arr)])\n                                 \
    \                                                                            \
    \       (if (> (car arr) max)\n                                              \
    \                                                                          (let\
    \ ([max (car arr)])\n                                                        \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                                              (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                             (if (> (car arr)\
    \ max)\n                                                                     \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                                 (if (> (car\
    \ arr) max)\n                                                                \
    \                                                                        (let\
    \ ([max (car arr)])\n                                                        \
    \                                                                            \
    \      (if (> (car arr) ", "  (cond\n    [(empty? arr) (list -1)]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n   \
    \   (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr)\
    \ (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n\
    \        (if (< (car arr) max)\n            (let ([max (car arr)])\n         \
    \     (if (< (car arr) max)\n                  (let ([max (car arr)])\n      \
    \              (if (< (car arr) max)\n                        (let ([max (car\
    \ arr)])\n                          (if (< (car arr) max)\n                  \
    \            (let ([max (car arr)])\n                                (if (< (car\
    \ arr) max)\n                                    (let ([max (car arr)])\n    \
    \                                  (if (< (car arr) max)\n                   \
    \                       (let ([max (car arr)])\n                             \
    \               (if (< (car arr) max)\n                                      \
    \          (let ([max (car arr)])\n                                          \
    \        (if (< (car arr) max)\n                                             \
    \         (let ([max (car arr)])\n                                           \
    \             (if (< (car arr) max)\n                                        \
    \                    (let ([max (car arr)])\n                                \
    \                              (if (< (car arr) max)\n                       \
    \                                           (let ([max (car arr)])\n         \
    \                                                           (if (< (car arr) max)\n\
    \                                                                        (let\
    \ ([max (car arr)])\n                                                        \
    \                  (if (< (car arr) max)\n                                   \
    \                                           (let ([max (car arr)])\n         \
    \                                                                       (if (<\
    \ (car arr) max)\n                                                           \
    \                         (let ([max (car arr)])\n                           \
    \                                                           (if (< (car arr) max)\n\
    \                                                                            \
    \              (let ([max (car arr)])\n                                      \
    \                                                      (if (< (car arr) max)\n\
    \                                                                            \
    \                    (let ([max (car arr)])\n                                \
    \                                                                  (if (< (car\
    \ arr) max)\n                                                                \
    \                                      (let ([max (car arr)])\n              \
    \                                                                            \
    \              (if (< (car arr) max)\n                                       \
    \                                                                     (let ([max\
    \ (car arr)])\n                                                              \
    \                                                (if (< (car arr) max)\n     \
    \                                                                            \
    \                                 (let ([max (car arr)])\n                   \
    \                                                                            \
    \                     (if (< (car arr) max)\n                                \
    \                                                                            \
    \            (let ([max (car arr)])\n                                        \
    \                                                                            \
    \      (if (< (car arr) max)\n                                               \
    \                                                                            \
    \   (let ([max (car arr)])\n                                                 \
    \                                                                            \
    \   (if (< (car arr) max)\n                                                  \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                            \
    \            (if (< (car arr) max)\n                                         \
    \                                                                            \
    \                   (let ([max (car arr)])\n                                 \
    \                                                                            \
    \                             (if (< (car arr) max)", "  (if (= k 0)\n      (list\
    \ 0)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n          \
    \  (cons max (maximum (cdr arr) (sub1 k)))\n            (maximum (cdr arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n \
    \       (if (> (car arr) max)\n            (cons max (maximum (cdr arr) (sub1\
    \ k)))\n            (maximum (cdr arr) (sub1 k)))))) \n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr)) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max\
    \ (car arr)])\n        (if (< (length arr) k)\n            (append (maximum (cdr\
    \ arr) (sub1 k)) (list max))\n            (append (maximum (cdr arr) (sub1 k))\
    \ (list max))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
