name: HumanEval_0_has_close_elements
language: rkt
prompt: "#lang racket\n\n;; Check if in given list of numbers, are any two numbers\
  \ closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list\
  \ 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0\
  \ 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t)\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t)\n    (check-equal? (candidate (list 1.0 2.0\
  \ 5.9 4.0 5.0) 0.8) #f)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0\
  \ 2.0) 0.1) #t)\n    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t)\n\
  \    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((numbers (reverse numbers))\n             (threshold threshold))\n\
    \    (cond ((null? numbers) #f)\n          ((< (first numbers) threshold) #f)\n\
    \          ((< (first numbers) (rest numbers)) #t)\n          (else (loop (rest\
    \ numbers) threshold))))))\n", "  (let loop ((numbers numbers)\n             (threshold\
    \ threshold))\n    (cond ((null? numbers) #f)\n          ((< (car numbers) threshold)\
    \ #f)\n          ((< (cdr numbers) threshold) #t)\n          (else (loop (cdr\
    \ numbers) threshold))))))\n", "  (let loop ((numbers (reverse numbers))\n   \
    \          (threshold (- threshold 1)))\n    (if (null? numbers)\n        #f\n\
    \        (let ((smallest (car numbers))\n              (largest (car numbers)))\n\
    \          (if (< (abs (- smallest largest)) threshold)\n              (loop (cdr\
    \ numbers) threshold)\n              (loop (cdr numbers) (- threshold 1))))))))\n",
  "  (let loop ((numbers (reverse numbers)) (threshold threshold))\n    (cond ((null?\
    \ numbers) #f)\n          ((< (car numbers) threshold) #f)\n          ((< (cdr\
    \ numbers) threshold) #t)\n          (else (loop (cdr numbers) threshold))))))\n",
  "  (let loop ((numbers (reverse numbers)) (threshold threshold))\n    (cond ((null?\
    \ numbers) #f)\n          ((< (car numbers) threshold) #f)\n          ((< (cdr\
    \ numbers) threshold) #t)\n          (else (loop (cdr numbers) threshold))))))\n",
  "  (let loop ((numbers numbers)\n             (threshold threshold))\n    (cond\
    \ ((null? numbers) #f)\n          ((< (car numbers) threshold) #t)\n         \
    \ (else (loop (cdr numbers) threshold)))))\n", "  (let loop ((numbers numbers)\n\
    \             (threshold threshold))\n    (if (null? numbers)\n        #f\n  \
    \      (let ((n1 (car numbers))\n              (n2 (car numbers)))\n         \
    \ (if (< (abs (- n1 n2)) threshold)\n              (loop (cdr numbers) threshold)\n\
    \              (loop (cdr numbers) threshold)))))))\n", "  (let loop ((numbers\
    \ (reverse numbers)) (threshold threshold))\n    (cond ((null? numbers) #f)\n\
    \          ((< (car numbers) threshold) #t)\n          (else (loop (cdr numbers)\
    \ threshold)))))\n", "  (let loop ((numbers (reverse numbers)) (threshold threshold))\n\
    \    (cond ((null? numbers) #f)\n          ((< (car numbers) threshold) #t)\n\
    \          (else (loop (cdr numbers) threshold)))))\n", "  (let loop ((numbers\
    \ (reverse numbers))\n             (threshold threshold))\n    (if (null? numbers)\n\
    \        #f\n        (let ((closest (car numbers))\n              (next (cadr\
    \ numbers)))\n          (if (< (abs (- threshold (abs closest)))\n           \
    \      (abs (- threshold (abs next)))) ; closer than threshold\n             \
    \ #t\n              (if (< (abs (- threshold (abs closest)))\n               \
    \      (abs (- threshold (abs next))))) ; closer than threshold\n            \
    \  (loop (cdr numbers)\n                    (- threshold (abs closest)))))) ;\
    \ closer than threshold\n    ))\n", "  (let loop ((numbers (reverse numbers))\
    \ (threshold threshold))\n    (cond ((null? numbers) #f)\n          ((< (car numbers)\
    \ threshold) #t)\n          (else (loop (cdr numbers) threshold))))))\n", "  (let\
    \ loop ((numbers (reverse numbers)) (threshold threshold))\n    (cond ((null?\
    \ numbers) #f)\n          ((< (car numbers) threshold) #t)\n          (else (loop\
    \ (cdr numbers) threshold)))))\n", "  (let loop ((numbers (reverse numbers)) (threshold\
    \ threshold))\n    (cond ((null? numbers) #f)\n          ((< (car numbers) threshold)\
    \ #t)\n          (else (loop (cdr numbers) threshold)))))\n", "  (let loop ((numbers\
    \ (reverse numbers))\n             (threshold threshold))\n    (if (null? numbers)\n\
    \        #f\n        (let ((smallest (car numbers))\n              (largest (car\
    \ numbers)))\n          (if (< (abs (- smallest largest)) threshold)\n       \
    \       (loop (cdr numbers) threshold)\n              (loop (cdr numbers) (- threshold\
    \ threshold))))))))\n", "  (let loop ((numbers numbers)\n             (threshold\
    \ threshold))\n    (cond ((null? numbers) #f)\n          ((< (car numbers) threshold)\
    \ #t)\n          (else (loop (cdr numbers) threshold))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (threshold threshold))\n    (cond ((null? numbers) #t)\n\
    \          ((< (car numbers) threshold) #f)\n          ((< (cdr numbers) threshold)\
    \ #t)\n          (else (loop (cdr numbers) threshold)))))\n", "  (let loop ((numbers\
    \ (reverse numbers))\n             (threshold (- threshold 1)))\n    (if (null?\
    \ numbers)\n        #f\n        (let ((smallest (car numbers))\n             \
    \ (largest (car numbers)))\n          (if (< (abs (- smallest largest)) threshold)\n\
    \              #t\n              (loop (cdr numbers)\n                    (- threshold\
    \ 1))))))\n", "  (let loop ((numbers numbers)\n             (found #f))\n    (if\
    \ (null? numbers)\n        found\n        (let ((n1 (car numbers))\n         \
    \     (n2 (car numbers)))\n          (if (< (abs (- n1 n2)) threshold)\n     \
    \         (loop (cdr numbers) #t)\n              (loop (cdr numbers) #f)))))))\n",
  "  (let loop ((numbers numbers)\n             (found #f))\n    (if (null? numbers)\n\
    \        found\n        (let ((n1 (car numbers))\n              (n2 (car numbers)))\n\
    \          (if (< (abs (- n1 n2)) threshold)\n              (loop (cdr numbers)\
    \ #t)\n              (loop (cdr numbers) #f)))))))\n", "  (let loop ((numbers\
    \ (reverse numbers))\n             (threshold (- threshold 1)))\n    (cond ((null?\
    \ numbers) #t)\n          ((< (car numbers) threshold) #f)\n          (else (loop\
    \ (cdr numbers) threshold))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
