name: HumanEval_2_truncate_number
language: rkt
prompt: "#lang racket\n\n;; Given a positive floating point number, it can be decomposed\
  \ into\n;; and integer part (largest integer smaller than given number) and decimals\n\
  ;; (leftover part always smaller than 1).\n;; Return the decimal part of the number.\n\
  ;; >>> (truncate_number 3.5)\n;; 0.5\n(define (truncate_number number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n\
  \    (check-equal? (candidate 3.5) 0.5)\n    (check-equal? (candidate 1.25) 0.25)\n\
  \    (check-equal? (candidate 123.0) 0.0)\n))\n\n(test-humaneval)"
completions: ["  (truncate number 1.0))\n", "  (let ([integer (floor (/ number 1.0))]\n\
    \        [decimals (remainder (- number integer) 1.0)])\n    (if (< decimals 1.0)\n\
    \        decimals\n        integer)))\n", "  (let ([integer (floor (/ number 1))])\n\
    \    (if (< integer 0)\n        0\n        (/ integer 1))))\n", "  (let ([integer\
    \ (floor (/ number 1))])\n    (if (< integer 0)\n        0\n        (/ integer\
    \ 1))))\n", "  (truncate number 1.0))\n", "  (let ([integer (floor (/ number 1))])\n\
    \    (if (< integer 0)\n        0\n        (/ number integer))))\n", "  (let ([integer\
    \ (floor number)])\n    (if (< integer number)\n        number\n        (truncate_number\
    \ (- number integer)))))\n", "  (let ([integer (floor (/ number 1.0))]\n     \
    \   [decimal (- number integer)]\n        [remainder (- number integer decimal)])\n\
    \    (if (< decimal 0)\n        (truncate_number remainder)\n        (truncate_number\
    \ decimal))))\n", "  (let ([integer (floor (/ number 1))])\n    (if (< integer\
    \ 0)\n        0\n        (/ integer 1))))\n", "  (let ([integer (floor (/ number\
    \ 1.0))]\n        [decimals (remainder (- number integer) 1.0)])\n    (if (< decimals\
    \ 1.0)\n        decimals\n        integer)))\n", "  (let ([integer (floor (/ number\
    \ 1))])\n    (if (< integer 0)\n        0\n        (/ number integer))))\n", " \
    \ (let ([integer (floor (/ number 1))])\n    (if (< integer 0)\n        0\n  \
    \      (/ integer 1))))\n", "  (let ([integer (floor (/ number 1))])\n    (if\
    \ (< integer 0)\n        0\n        (/ integer 1))))\n", "  (let ([integer (floor\
    \ (/ number 1))])\n    (if (< integer 0)\n        0\n        (/ integer 1))))\n",
  "  (let ([integer (floor (/ number 1))])\n    (if (< integer 0)\n        0\n   \
    \     (/ number integer))))\n", "  (let ([integer (floor (/ number 1.0))])\n \
    \   (if (< integer 0)\n        0\n        (/ integer 1.0))))\n", "  (let ([integer\
    \ (floor (/ number 1.0))]\n        [decimals (remainder (- number integer) 1.0)])\n\
    \    (if (< decimals 1.0)\n        decimals\n        integer)))\n", "  (let ([integer\
    \ (floor (/ number 1))])\n    (if (< integer 0)\n        0\n        (/ integer\
    \ 1))))\n", "  (/ (- number 1) (floor number)))\n", "  (let ([integer (floor (/\
    \ number 1))])\n    (if (< integer 0)\n        0\n        (/ integer 1))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
