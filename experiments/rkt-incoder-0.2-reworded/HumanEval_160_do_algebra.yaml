name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; list = [2, 3, 4, 5]\n;; result\
  \ = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator list is\
  \ equal to the length of operand list minus one.\n;; Operand is a list of of non-negative\
  \ integers.\n;; Operator list has at least one operator, and operand list has at\
  \ least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand))\n            (do_algebra (first operator) (third\
    \ operand))\n            (do_algebra (first operator) (fourth operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (first operand) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) (error '(empty-operand))]\n    [(empty? (rest operand))\
    \ (error '(empty-operand))]\n    [(null? (rest operand)) (error '(empty-operand))]\n\
    \    [else (cons (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (do_algebra (rest operand) (first\
    \ operand))]\n  ))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operator)\
    \ (error \"Operator list is empty.\")]\n    [(empty? operand) (error \"Operand\
    \ list is empty.\")]\n    [else (cons (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))\n              (do_algebra (rest operator) (first operand)))]))\n",
  "  (cond\n    [(empty? operand) (error \"Invalid operand\")\n     (cons (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(empty? operator) (error\
    \ \"Invalid operator\")\n     (cons (first operand) (do_algebra (rest operator)\
    \ (first operand)))]\n    [else (cons (first operand) (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty?\
    \ operand) operand]\n    [else (+ (do_algebra (first operator) (first operand))\n\
    \             (do_algebra (first operator) (second operand)))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (cons (+ (car operand) (do_algebra (cdr operator) (cdr operand)))\n        \
    \      (do_algebra (cdr operator) operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\
    \ [(null? operand) 0]\n        [(null? (cdr operand)) (+ 0 (do_algebra (car operator)\
    \ operand))]\n        [else (+ (do_algebra (car operator) (car operand)) (do_algebra\
    \ (cdr operator) (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n \
    \   [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) (error \"Invalid operand\")]\n    [(empty? operator)\
    \ (error \"Invalid operator\")]\n    [(equal? (first operator) '+) (+ \n     \
    \                           (do_algebra (rest operator) (rest operand))\n    \
    \                            (first operand))]\n    [(equal? (first operator)\
    \ '-) (- \n                                (do_algebra (rest operator) (rest operand))\n\
    \                                (first operand))]\n    [(equal? (first operator)\
    \ '*') (* \n                                (do_algebra (rest operator) (rest\
    \ operand))\n                                (first operand))]\n    [(equal? (first\
    \ operator) '//') (/ \n                                (do_algebra (rest operator)\
    \ (rest operand))\n                                (first operand))]\n    [(equal?\
    \ (first operator) '**') (* \n                                (do_algebra (rest\
    \ operator) (rest operand))\n                                (first operand))]\n\
    \    [else (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand) (rest\
    \ operand))]\n    [else (+ (do_algebra (first operand) (first operand)) (do_algebra\
    \ (first operand) (rest operand)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
