name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
  \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
  (define (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (/ (apply + l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (<\
    \ x y) x y)) l) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda\
    \ (x y) (if (< x y) x y)) l)\n     (length l)))\n", "  (/ (reduce + l) 2))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (reduce + l) 2))\n", "  (/ (apply min l) (length l)))\n", " \
    \ (/ (reduce + l) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda\
    \ (x y) (if (< y x) x y)) l)\n     (length l)))\n", "  (/ (reduce (lambda (x y)\
    \ (if (< x y) x y)) l) 2))\n", "  (/ (apply min l) (length l)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
