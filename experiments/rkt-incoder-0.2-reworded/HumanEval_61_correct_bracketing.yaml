name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return #t\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ \"(\") (correct_bracketing (substring brackets 1 )))]\n    [else (correct_bracketing\
    \ (substring brackets 1 ))]\n  )\n)\n", "  (cond\n    [(empty? brackets) #f]\n\
    \    [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets\
    \ 1 -1)))]\n    [(equal? (first brackets) \")\") (correct_bracketing (substring\
    \ brackets 1 -1)))]\n    [else (correct_bracketing (substring brackets 1 -1)))]))\n",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 1)))]\n    [else (correct_bracketing (substring brackets\
    \ 1 1))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ \"(\") (correct_bracketing (substring brackets 1 1)))]\n    [else (correct_bracketing\
    \ (substring brackets 1 1))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal?\
    \ (first brackets) (first brackets)) #f]\n    [else (equal? (first brackets) (second\
    \ brackets)) (correct_bracketing (substring (second brackets) 1 length))]\n  ))\n",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 )))]\n    [else (correct_bracketing (substring brackets\
    \ 0 )))]))\n", "  (let ((opening-brackets '())\n        (closing-brackets '()))\n\
    \    (loop for i from 0 to (length brackets)\n          with index := 0\n    \
    \      while (or (char=? (char-code (car brackets) i) '(#\\))\n              \
    \       (char=? (char-code (car brackets) i) '(#\\)))\n          collect (cond\
    \ ((char=? (char-code (car brackets) i) '(#\\))\n                         (push\
    \ (cons i opening-brackets) opening-brackets)\n                         (push\
    \ (cons i closing-brackets) closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char=?\
    \ (char-code (car brackets) i) '(#\\))\n                         (push i opening-brackets)\n\
    \                         (push i closing-brackets))\n                       ((char",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) (first brackets))\
    \ (correct_bracketing (substring brackets 1 length))]\n    [else (correct_bracketing\
    \ (substring brackets 1 length))]\n  ))\n", "  (cond\n    [(empty? brackets) #f]\n\
    \    [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets\
    \ 1 1)))]\n    [else (equal? (first brackets) \")\") (correct_bracketing (substring\
    \ brackets 2 1)))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first\
    \ brackets) \"(\") (correct_bracketing (substring brackets 1 1)))]\n    [else\
    \ (correct_bracketing (substring brackets 1 1))]))\n", "  (cond\n    [(empty?\
    \ brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing (substring\
    \ brackets 1 -1))]\n    [else (correct_bracketing (substring brackets 1 -1))]))\n",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 )))]\n    [else (correct_bracketing (substring brackets\
    \ 0 )))]))\n", "  (let ((brackets-count 0))\n    (cond\n      [(empty? brackets)\
    \ #f]\n      [(equal? (first brackets) '(') (add1 brackets-count)]\n      [(equal?\
    \ (first brackets) ')') (sub1 brackets-count)]\n      [else (correct_bracketing\
    \ (substring brackets 0 (- (length brackets) 1)))])))\n", "  (let ((open (string->list\
    \ brackets))\n        (closed (string->list brackets)))\n    (let loop ((i 0))\n\
    \      (if (< i open)\n          (return #f)\n          (let ((opening (list-ref\
    \ open i)))\n            (if (string=? opening closing)\n                (return\
    \ #t)\n                (loop (add1 i))))))))\n", "  (cond\n    [(empty? brackets)\
    \ #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets\
    \ 1 1)))]\n    [else (correct_bracketing (substring brackets 1 1))]))\n", "  (cond\n\
    \    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 -1))]\n    [else #f]))\n", "  (cond [(empty? brackets)\
    \ #f]\n        [(equal? (first brackets) (first brackets)) (correct_bracketing\
    \ (substring brackets 1 -1))]\n        [else (correct_bracketing (substring brackets\
    \ 1 -1))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ (first brackets)) (correct_bracketing (substring brackets 1 -1))]\n    [else\
    \ (correct_bracketing (substring brackets 1 -1))]))\n", "  (cond\n    [(empty?\
    \ brackets) #f]\n    [(equal? (first brackets) '(') (correct_bracketing (substring\
    \ brackets 1 1)))]\n    [else (correct_bracketing (substring brackets 1 1))]))\n",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 )))]\n    [(equal? (first brackets) \")\") (correct_bracketing\
    \ (substring brackets 0 )))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
