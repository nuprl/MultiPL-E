name: HumanEval_52_below_threshold
language: rkt
prompt: "#lang racket\n\n;; Return #t if all numbers in the list l are below threshold\
  \ t.\n;; >>> (below_threshold (list 1 2 4 10) 100)\n;; #t\n;; >>> (below_threshold\
  \ (list 1 20 4 10) 5)\n;; #f\n(define (below_threshold l t)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n\
  \    (check-equal? (candidate (list 1 2 4 10) 100) #t)\n    (check-equal? (candidate\
  \ (list 1 20 4 10) 5) #f)\n    (check-equal? (candidate (list 1 20 4 10) 21) #t)\n\
  \    (check-equal? (candidate (list 1 20 4 10) 22) #t)\n    (check-equal? (candidate\
  \ (list 1 8 4 10) 11) #t)\n    (check-equal? (candidate (list 1 8 4 10) 10) #f)\n\
  ))\n\n(test-humaneval)"
completions: ["  (and (< (car l) t) (below_threshold (cdr l) t)))\n", "  (cond [(empty?\
    \ l) #f]\n        [(< (first l) t) #f]\n        [else (below_threshold (rest l)\
    \ t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first\
    \ l) t) #t]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))',
  '  (< (length l) t))', '  (< (length l) 1))', '  (< (length l) 1))', "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  "  (< (length l) t))\n", '  (< (length l) 2))', '  (< (length l) t))', "  (cond\
    \ ((null? l) #f)\n        ((< (car l) t) #t)\n        (else (below_threshold (cdr\
    \ l) t))))\n", '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first\
    \ l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', "  (and\
    \ (<= t (first l)) (< (rest l) t)))\n", '  (< (length l) 1))', '  (< (length l)
    2))', '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l)\
    \ t) #f]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length l) 2))',
  "  (< (length l) 2))\n", '  (< (length l) t))', "  (< (length l) (length t)))\n",
  '  (< (length l) 1))', "  (cond\n    ((null? l) #f)\n    ((< (car l) t) #t)\n  \
    \  (else (below_threshold (cdr l) t))))\n", '  (< (length l) t))', '  (< (length
    l) 1))', "  (< (car l) t))\n", '  (< (length l) 1))', '  (< (length l) t))', '  (<
    (length l) t))', '  (< (length l) 2))', "  (cond [(empty? l) #f]\n        [(<\
    \ (first l) t) #f]\n        [else (below_threshold (rest l) t)]))\n", '  (< (length
    l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #t]\n    [else (below_threshold\
    \ (rest l) t)]))\n", '  (< (length l) 2))', "  (cond [(empty? l) #f]\n       \
    \ [(< (first l) t) #f]\n        [else (below_threshold (rest l) t)]))\n", '  (<
    (length l) 2))', "  (cond [(empty? l) #f]\n        [(< (first l) t) #f]\n    \
    \    [else (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(< (first l) t) #t]\n    [else (below_threshold (rest l) t)]))\n", '  (<
    (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n   \
    \ [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", '  (< (length l) 2))', '  (< (length l) 2))', "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold\
    \ (rest l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', "  (and\
    \ (<= (length l) t)\n       (for/fold ((acc #t) (n (in-list l)))\n           \
    \        ((acc #f) (+ n 1)))\n       acc))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (cond [(null? l) #f]\n        [(< (car l) t) #f]\n        [else\
    \ (below_threshold (cdr l) t)]))\n", '  (< (length l) 2))', "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  '  (< (length l) t))', '  (< (length l) 2))', "  (cond [(null? l) #f]\n        [(<\
    \ (car l) t) #f]\n        [else (below_threshold (cdr l) t)]))\n", '  (< (length
    l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold\
    \ (rest l) t)]))\n", '  (< (length l) 2))', '  (< (length l) 2))', "  (cond [(null?\
    \ l) #f]\n        [(< (car l) t) #f]\n        [else (below_threshold (cdr l) t)]))\n",
  '  (< (length l) 2))', '  (< (length l) 2))', '  (< (length l) t))', '  (< (length
    l) t))', "  (cond\n    ((null? l) #f)\n    ((< (car l) t) #t)\n    (else (below_threshold\
    \ (cdr l) t))))\n", '  (< (length l) t))', '  (< (length l) 2))', '  (< (length
    l) t))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #t]\n    [else (below_threshold\
    \ (rest l) t)]))\n", '  (< (length l) t))', '  (< (length l) 2))', '  (< (length
    l) 2))', '  (< (length l) t))', '  (< (length l) 2))', "  (cond [(empty? l) #f]\n\
    \        [(< (first l) t) #f]\n        [else (below_threshold (rest l) t)]))\n",
  "  (< (length l) 2))\n", '  (< (length l) 2))', '  (< (length l) t))', "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', '  (< (length l)
    2))', '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l)\
    \ t) #f]\n    [else (below_threshold (rest l) t)]))\n", "  (< (length l) (- t\
    \ 0)))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  '  (< (length l) t))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', "  (< (length\
    \ l) 2))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", "  (< (length l) 2))\n", '  (< (length l)
    2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold\
    \ (rest l) t)]))\n", "  (cond [(null? l) #f]\n        [(< (car l) t) #f]\n   \
    \     [else (below_threshold (cdr l) t)]))\n", '  (< (length l) t))', '  (< (length
    l) t))', "  (< (length l) 2))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first\
    \ l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))',
  '  (< (length l) t))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", "  (and (<= t (first l))\n    \
    \   (rest (rest l))))\n", '  (< (length l) t))', '  (< (length l) 2))', "  (<\
    \ (length l) 2))\n", "  (cond [(empty? l) #f]\n        [(< (first l) t) #f]\n\
    \        [else (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', '  (<
    (car l) t))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", "  (< (length l) (- t 0)))\n", "  (cond\
    \ [(empty? l) #f]\n        [(< (first l) t) #f]\n        [else (below_threshold\
    \ (rest l) t)]))\n", "  (< (length l) 2))\n", '  (< (length l) 1))', "  (cond\
    \ [(empty? l) #f]\n        [(< (first l) t) #f]\n        [else (below_threshold\
    \ (rest l) t)]))\n", "  (cond [(empty? l) #f]\n        [(< (first l) t) #f]\n\
    \        [else (below_threshold (rest l) t)]))\n", '  (< (car l) t))', "  (cond\
    \ [(empty? l) #f]\n        [(< (first l) t) #f]\n        [else (below_threshold\
    \ (rest l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', '  (< (length
    l) 2))', "  (< (length l) (length t)))\n", "  (cond\n    [(empty? l) #f]\n   \
    \ [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (< (length l) 2))\n", "  (cond\n    [(empty? l) #f]\n    [(<\
    \ (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length
    l) 2))', "  (and (<= t (car l))\n       (below_threshold (cdr l) t)))\n", '  (<
    (length l) t))', "  (and (<= (length l) 1)\n       (<= (first l) t)))\n", "  (<\
    \ (car l) t))\n", '  (< (length l) 2))', "  (< (length l) 2))\n", "  (and (number?\
    \ (car l))\n       (< (car l) t)))\n", '  (< (length l) t))', "  (< (length l)\
    \ 2))\n", "  (cond [(null? l) #f]\n        [(< (first l) t) #f]\n        [else\
    \ (below_threshold (rest l) t)]))\n", '  (< (length l) t))', '  (< (length l)
    2))', "  (< (length l) 2))\n", '  (< (length l) 2))', "  (cond\n    [(empty? l)\
    \ #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', '  (< (length
    l) 2))', "  (cond\n    ((null? l) #f)\n    ((< (car l) t) #t)\n    (else (below_threshold\
    \ (cdr l) t))))\n", '  (< (car l) t))', "  (cond\n    [(empty? l) #f]\n    [(<\
    \ (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length
    l) t))', '  (< (length l) 1))', '  (< (length l) 2))', '  (< (length l) t))',
  '  (< (length l) 2))', '  (< (length l) 2))', '  (< (length l) t))', "  (cond\n\
    \    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (and (<= t (first l))\n       (rest (rest l))))\n", '  (< (length
    l) 2))', '  (< (length l) 2))', "  (cond\n    ((null? l) #f)\n    ((< (car l)\
    \ t) #f)\n    (else (below_threshold (cdr l) t))))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  "  (cond [(empty? l) #f]\n        [(< (first l) t) #t]\n        [else (below_threshold\
    \ (rest l) t)]))\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) 2))', "  (and (<= t (car l))\n       (below_threshold (cdr l) t)))\n", '  (<
    (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n   \
    \ [else (below_threshold (rest l) t)]))\n", "  (cond [(null? l) #f]\n        [(<\
    \ (car l) t) #f]\n        [else (below_threshold (cdr l) t)]))\n", "  (cond\n\
    \    ((null? l) #f)\n    ((< (car l) t) #f)\n    (else (below_threshold (cdr l)\
    \ t))))\n", "  (cond\n    ((null? l) false)\n    ((< (car l) t) false)\n    (else\
    \ (below_threshold (cdr l) t))))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first\
    \ l) t) #f]\n    [else (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  "  (< (car l) t))\n", '  (< (length l) 1))', '  (< (length l) 2))', "  (cond\n \
    \   [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest\
    \ l) t)]))\n", "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n    [else\
    \ (below_threshold (rest l) t)]))\n", '  (< (length l) 2))', "  (cond\n    [(empty?\
    \ l) #f]\n    [(< (first l) t) #f]\n    [else (below_threshold (rest l) t)]))\n",
  '  (< (length l) 2))', "  (cond\n    [(empty? l) #f]\n    [(< (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', '  (< (length
    l) 2))', '  (< (length l) 1))']
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
