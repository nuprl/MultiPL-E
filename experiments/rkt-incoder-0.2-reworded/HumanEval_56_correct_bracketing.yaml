name: HumanEval_56_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return #t\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"<\")\n;; #f\n;; >>> (correct_bracketing \"<>\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"<<><>>\")\n;; #t\n;; >>> (correct_bracketing \"><<>\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0))\n    (cond\n      [(empty? brackets) (= i 0)]\n\
    \      [(equal? (char-ref brackets i) (char-ref brackets 0))\n       (return #t)]\n\
    \      [else\n       (loop (add1 i))]))))\n", "  (let loop ((i 0))\n    (if (<\
    \ i #(length brackets))\n        (if (equal? (char-code (car brackets)) (car (cdr\
    \ brackets))) \n            (loop (+ i 1))\n            (loop (+ i 1)))\n    \
    \    #f)))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ (first brackets)) (correct_bracketing (substring brackets 1 2))]\n    [else\
    \ (correct_bracketing (substring brackets 0 2))]))\n", "  (let ((open (string->list\
    \ brackets))\n        (close (list->string open)))\n    (let loop ((i 0))\n  \
    \    (if (< i close)\n          (return #t)\n          (let ((opening (subseq\
    \ open i 1)))\n            (let ((closing (subseq close (+ i 1) 1)))\n       \
    \       (if (equal? (first opening) closing)\n                  (return #t)\n\
    \                  (loop (+ i 1)))))))))\n", "  (let ((open (string->list brackets))\n\
    \        (closed (string->list '())))\n    (cond\n      [(empty? open) #t]\n \
    \     [(empty? closed) #f]\n      [(equal? (first open) (first close)) (correct_bracketing\
    \ (substring closed 1 -1))]\n      [else (correct_bracketing (substring open 1\
    \ -1))]\n      )))\n", "  (cond [(empty? brackets) #f]\n        [(equal? (first\
    \ brackets) (first brackets)) (correct_bracketing (substring brackets 1 2))]\n\
    \        [else (correct_bracketing (substring brackets 1 2))]))\n", "  (cond [(empty?\
    \ brackets) #f]\n        [(equal? (first brackets) (first brackets)) (correct_bracketing\
    \ (subseq brackets 1 2))]\n        [else (correct_bracketing (subseq brackets\
    \ 1 2))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ (first brackets)) (correct_bracketing (subseq brackets 1 2))]\n    [else (correct_bracketing\
    \ (subseq brackets 1 2))]))\n", "  (let loop ((i 0))\n    (if (string=? brackets\
    \ \"\")\n        #f\n        (if (= i 0)\n            (if (string=? (substring\
    \ brackets i) \"<\")\n                #t\n                (if (string=? (substring\
    \ brackets i) \">\")\n                    #t\n                    (if (string=?\
    \ (substring brackets i) \"<>\")\n                        #t\n               \
    \         (if (string=? (substring brackets i) \"><<>\")\n                   \
    \         #f\n                            (loop (+ i 1)))))))))\n", "  (cond [(empty?\
    \ brackets) #f]\n        [(equal? (first brackets) (first brackets)) (correct_bracketing\
    \ (substring brackets 1 2))]\n        [else (correct_bracketing (substring brackets\
    \ 1 2))]))\n", "  (let ((brackets-count (length brackets)))\n    (cond ((= brackets-count\
    \ 0)\n           #t)\n          ((equal? (char-after (substring brackets 0 brackets-count)\
    \ \"<\")\n                  (char-after (substring brackets 0 brackets-count)\
    \ \">\"))\n           #t)\n          (else\n           (equal? (char-after (substring\
    \ brackets 0 brackets-count) \"<>\")\n                  (char-after (substring\
    \ brackets 0 brackets-count) \">>\"))\n           #t)\n          (else\n     \
    \      (equal? (char-after (substring brackets 0 brackets-count) \"<>\")\n   \
    \               (char-after (substring brackets 0 brackets-count) \">\"))\n  \
    \         #t)\n          (else\n           (equal? (char-after (substring brackets\
    \ 0 brackets-count) \"<\")\n                  (char-after (substring brackets\
    \ 0 brackets-count) \">\"))\n           #t)\n          (else\n           (equal?\
    \ (char-after (substring brackets 0 brackets-count) \"<>\")\n                \
    \  (char-after (substring brackets 0 brackets-count) \">\"))\n           #t)\n\
    \          (else\n           (equal? (char-after (substring brackets 0 brackets-count)\
    \ \"<>\")\n                  (char-after (substring brackets 0 brackets-count)\
    \ \">\"))\n           #t)\n          (else\n           (equal? (char-after (substring\
    \ brackets 0 brackets-count) \"<>\")\n                  (char-after (substring\
    \ brackets 0 brackets-count) \">\"))\n           #t)\n          (else\n      \
    \     (equal? (char-after (substring brackets 0 brackets-count) \"<>\")\n    \
    \              (char-after (substring brackets 0 brackets-count) \">\"))\n   \
    \        #t)\n          (else\n           (equal? (char-after (substring brackets\
    \ 0 brackets-count) \"<>\")\n                  (char-after (substring brackets\
    \ 0 brackets-count) \">\"))\n           #t)\n          (else\n           (equal?\
    \ (char-after (substring brackets 0 brackets-count) \"<>\")\n                \
    \  (char-after (substring brackets 0 brackets-count) \">\"))\n           #t)\n\
    \          (else\n           (equal? (char-after (substring brackets 0 brackets-count)\
    \ \"<>\")\n                  (char-after (substring brackets 0 brackets-count)\
    \ \">\"))\n           #t)\n          (else\n           (", "  (let ((stack '())\n\
    \        (opens '())\n        (closes '()))\n    (cond\n      [(empty? brackets)\
    \ #f]\n      [(equal? (first brackets) (first stack)) (equal? (rest brackets)\
    \ (rest (rest stack)))]\n      [else (push (first brackets) stack)]\n      (else\
    \ (push (first stack) stack))]))\n", "  (cond\n    [(empty? brackets) #f]\n  \
    \  [(equal? (first brackets) (first brackets)) (correct_bracketing (subseq brackets\
    \ 1 ))]\n    [else (correct_bracketing (subseq brackets 0 ))]\n  ))\n", "  (cond\
    \ [(empty? brackets) #f]\n        [(equal? (first brackets) (first brackets))\
    \ (correct_bracketing (subseq brackets 1 2))]\n        [else (correct_bracketing\
    \ (subseq brackets 0 1))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal?\
    \ (first brackets) (first brackets)) (correct_bracketing (subseq brackets 1 2))]\n\
    \    [else (correct_bracketing (subseq brackets 0 -1))]))\n", "  (let ((open (string->list\
    \ brackets))\n        (closed (string->list brackets)))\n    (if (null? open)\n\
    \        #f\n        (let ((open (first open))\n              (close (first close)))\n\
    \          (if (equal? close open)\n              #t\n              (if (equal?\
    \ (first open) (first close))\n                  (correct_bracketing (rest open))\n\
    \                  (correct_bracketing (rest close)))))\n          (if (equal?\
    \ (first open) (first close))\n              (correct_bracketing (rest open))\n\
    \              (correct_bracketing (rest close)))))\n    (if (equal? (first open)\
    \ (first close))\n        #t\n        (if (equal? (first open) (first close))\n\
    \            (correct_bracketing (rest open))\n            (correct_bracketing\
    \ (rest close)))))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first\
    \ brackets) (first brackets)) #f]\n    [else (equal? (first brackets) (second\
    \ brackets)) (correct_bracketing (substring brackets 1 length))]\n  ))\n", " \
    \ (let ((brackets-stack '())\n        (brackets-stack-len 0\n                \
    \ (brackets-stack-len-stack '()))\n    (cond\n      [(empty? brackets)\n     \
    \  (equal? (length brackets-stack) 0)\n       #t]\n      [(equal? (first brackets)\
    \ (first brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n\
    \       #t]\n      [(equal? (first brackets) (first brackets-stack))\n       (equal?\
    \ (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets) (first\
    \ brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n  \
    \     (equal? (rest brackets) (first brackets-stack))\n       (equal? (rest brackets)\
    \ (rest brackets-stack))\n       (equal? (rest brackets) (first brackets-stack))\n\
    \       (equal? (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets)\
    \ (first brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n\
    \       (equal? (rest brackets) (first brackets-stack))\n       (equal? (rest\
    \ brackets) (rest brackets-stack))\n       (equal? (rest brackets) (first brackets-stack))\n\
    \       (equal? (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets)\
    \ (first brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n\
    \       (equal? (rest brackets) (first brackets-stack))\n       (equal? (rest\
    \ brackets) (rest brackets-stack))\n       (equal? (rest brackets) (first brackets-stack))\n\
    \       (equal? (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets)\
    \ (first brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n\
    \       (equal? (rest brackets) (first brackets-stack))\n       (equal? (rest\
    \ brackets) (rest brackets-stack))\n       (equal? (rest brackets) (first brackets-stack))\n\
    \       (equal? (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets)\
    \ (first brackets-stack))\n       (equal? (rest brackets) (rest brackets-stack))\n\
    \       (equal? (rest brackets) (first brackets-stack))\n       (equal? (rest\
    \ brackets) (rest brackets-stack))\n       (equal? (rest brackets) (first brackets-stack))\n\
    \       (equal? (rest brackets) (rest brackets-stack))\n       (equal? (rest brackets)\
    \ (first ", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ (first brackets)) (correct_bracketing (substring brackets 1 2))]\n    [else\
    \ (correct_bracketing (substring brackets 1 2))]))\n", "  (cond\n    [(empty?\
    \ brackets) #f]\n    [(equal? (first brackets) (first brackets)) (correct_bracketing\
    \ (subseq brackets 1 ))]\n    [else (correct_bracketing (subseq brackets 1 ))]\n\
    \  ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
