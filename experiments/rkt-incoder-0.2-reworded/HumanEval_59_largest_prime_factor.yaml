name: HumanEval_59_largest_prime_factor
language: rkt
prompt: "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor\
  \ 2048)\n;; 2\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n        \
    \  ((even? n) (loop (/ n 2) prime))\n          ((odd? n) (loop (* n 3) prime))\n\
    \          (else (loop (* n prime) (+ prime (quotient n prime)))))))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [(= n 4) 4]\n\
    \        [(= n 5) 5]\n        [(= n 6) 6]\n        [(= n 7) 7]\n        [(= n\
    \ 8) 8]\n        [(= n 9) 9]\n        [(= n 10) 10]\n        [(= n 11) 11]\n \
    \       [(= n 12) 12]\n        [(= n 13) 13]\n        [(= n 14) 14]\n        [(=\
    \ n 15) 15]\n        [(= n 16) 16]\n        [(= n 17) 17]\n        [(= n 18) 18]\n\
    \        [(= n 19) 19]\n        [(= n 20) 20]\n        [(= n 21) 21]\n       \
    \ [(= n 22) 22]\n        [(= n 23) 23]\n        [(= n 24) 24]\n        [(= n 25)\
    \ 25]\n        [(= n 26) 26]\n        [(= n 27) 27]\n        [(= n 28) 28]\n \
    \       [(= n 29) 29]\n        [(= n 30) 30]\n        [(= n 31) 31]\n        [(=\
    \ n 32) 32]\n        [(= n 33) 33]\n        [(= n 34) 34]\n        [(= n 35) 35]\n\
    \        [(= n 36) 36]\n        [(= n 37) 37]\n        [(= n 38) 38]\n       \
    \ [(= n 39) 39]\n        [(= n 40) 40]\n        [(= n 41) 41]\n        [(= n 42)\
    \ 42]\n        [(= n 43) 43]\n        [(= n 44) 44]\n        [(= n 45) 45]\n \
    \       [(= n 46) 46]\n        [(= n 47) 47]\n        [(= n 48) 48]\n        [(=\
    \ n 49) 49]\n        [(= n 50) 50]\n        [(= n 51) 51]\n        [(= n 52) 52]\n\
    \        [(= n 53) 53]\n        [(= n 54) 54]\n        [(= n 55) 55]\n       \
    \ [(= n 56) 56]\n        [(= n 57) 57]\n        [(= n 58) 58]\n        [(= n 59)\
    \ 59", "  (let loop ((n n) (max 1) (prime (primes n)))\n    (cond ((= n 1) prime)\n\
    \          ((= n max) max)\n          ((= (modulo n prime) 0) (loop (quotient\
    \ n prime) (+ max 1) prime))\n          :else (loop (quotient n prime) (+ max\
    \ 1) (+ prime (primes n))))))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n\
    \        [(= n 3) 3]\n        [(= n 4) 4]\n        [(= n 5) 5]\n        [(= n\
    \ 6) 6]\n        [(= n 7) 7]\n        [(= n 8) 8]\n        [(= n 9) 9]\n     \
    \   [(= n 10) 10]\n        [(= n 11) 11]\n        [(= n 12) 12]\n        [(= n\
    \ 13) 13]\n        [(= n 14) 14]\n        [(= n 15) 15]\n        [(= n 16) 16]\n\
    \        [(= n 17) 17]\n        [(= n 18) 18]\n        [(= n 19) 19]\n       \
    \ [(= n 20) 20]\n        [(= n 21) 21]\n        [(= n 22) 22]\n        [(= n 23)\
    \ 23]\n        [(= n 24) 24]\n        [(= n 25) 25]\n        [(= n 26) 26]\n \
    \       [(= n 27) 27]\n        [(= n 28) 28]\n        [(= n 29) 29]\n        [(=\
    \ n 30) 30]\n        [(= n 31) 31]\n        [(= n 32) 32]\n        [(= n 33) 33]\n\
    \        [(= n 34) 34]\n        [(= n 35) 35]\n        [(= n 36) 36]\n       \
    \ [(= n 37) 37]\n        [(= n 38) 38]\n        [(= n 39) 39]\n        [(= n 40)\
    \ 40]\n        [(= n 41) 41]\n        [(= n 42) 42]\n        [(= n 43) 43]\n \
    \       [(= n 44) 44]\n        [(= n 45) 45]\n        [(= n 46) 46]\n        [(=\
    \ n 47) 47]\n        [(= n 48) 48]\n        [(= n 49) 49]\n        [(= n 50) 50]\n\
    \        [(= n 51) 51]\n        [(= n 52) 52]\n        [(= n 53) 53]\n       \
    \ [(= n 54) 54]\n        [(= n 55) 55]\n        [(= n 56) 56]\n        [(= n 57)\
    \ 57]\n        [(= n 58) 58]\n        [(= n 59) 59", "  (let loop ((n n) (p 2))\n\
    \    (cond ((= n 1) p)\n          ((even? n) (loop (/ n p) (+ p 1)))\n       \
    \   ((odd? n) (loop (/ n p) (+ p 2))))\n    (loop (/ n p) p)))\n", "  (if (= n\
    \ 1)\n      n\n      (let loop ((n n) (p 2))\n        (if (= (modulo n p) 0)\n\
    \            (loop (quotient n p) (+ p 1))\n            (loop (quotient n p) (+\
    \ p 2))))))\n", "  (if (= n 1)\n      1\n      (let ((factor (prime-factors n)))\n\
    \        (if (null? factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          ((odd? n) (loop (* n 3)\
    \ prime))\n          (else (loop (* n prime) (+ prime (quotient n prime)))))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factors (prime-factors\
    \ n)))\n        (if (null? factors)\n            n\n            (let ((largest\
    \ (car factors)))\n              (if (> n largest)\n                  largest\n\
    \                  (largest_prime_factor (/ n largest))))))))\n", "  (cond [(=\
    \ n 1) 1]\n        [(= (mod n 2) 0) (largest_prime_factor (/ n 2))]\n        [else\
    \ (* n (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(=\
    \ (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (* n (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (primes #{}))\n    (cond ((= n 1) (length primes))\n          ((prime? (car\
    \ primes)) (loop (cdr n) (cons (car primes) primes)))\n          (else (loop (cdr\
    \ n) (cons (car primes) primes))))))\n", "  (let loop ((n n) (prime (primes n)))\n\
    \    (cond ((= n 1) prime)\n          ((= (modulo n prime) 0) (loop (quotient\
    \ n prime) (+ prime 1)))\n          (else (loop (quotient n prime) (+ prime 1))))))\n",
  "  (let loop ((n n) (p 2))\n    (if (= n 1)\n        p\n        (loop (quotient\
    \ n p)\n              (if (= (modulo n p) 0)\n                  (+ 1 (loop (quotient\
    \ n p) (+ p 1)))\n                  (loop (quotient n p) (+ p 1))))))))\n", " \
    \ (let loop ((n n) (max 1) (prime (prime? n)))\n    (cond ((= n 1) prime)\n  \
    \        ((= n max) n)\n          ((prime? n) (loop (quotient n max) (+ max 1)\
    \ (quotient n 2)))\n          (else (loop (quotient n max) (+ max 1) prime))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 2)\n            \
    \    (let ((largest (car factor)))\n                  (if (= largest)\n      \
    \                n\n                      (largest_prime_factor (/ n largest))))))))\n",
  "  (let loop ((n n) (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/\
    \ n p) (+ p 1)))\n          (else (loop (/ n p) (+ p 1))))))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 2)\n                (if (=\
    \ (first factor) 2)\n                    (* n 2)\n                    (* n (first\
    \ factor))\n                )\n                (let ((factor (cdr factor)))\n\
    \                  (if (null? factor)\n                      n\n             \
    \         (if (> (length factor) 2)\n                          (if (= (first factor)\
    \ 2)\n                              (* n 2)\n                              (*\
    \ n (first factor))\n                          )\n                          (let\
    \ ((factor (cdr factor)))\n                            (if (null? factor)\n  \
    \                              n\n                                (if (> (length\
    \ factor) 2)\n                                    (if (= (first factor) 2)\n \
    \                                       (* n 2)\n                            \
    \            (* n (first factor))\n                                    )\n   \
    \                                 (let ((factor (cdr factor)))\n             \
    \                         (if (null? factor)\n                               \
    \           n\n                                          (if (> (length factor)\
    \ 2)\n                                              (if (= (first factor) 2)\n\
    \                                                  (* n 2)\n                 \
    \                                 (* n (first factor))\n                     \
    \                         )\n                                              (let\
    \ ((factor (cdr factor)))\n                                                (if\
    \ (null? factor)\n                                                    n\n    \
    \                                                (if (> (length factor) 2)\n \
    \                                                       (if (= (first factor)\
    \ 2)\n                                                            (* n 2)\n  \
    \                                                          (* n (first factor))\n\
    \                                                        )\n                 \
    \                                       (let ((factor (cdr factor)))\n       \
    \                                                   (if (null? factor)\n     \
    \                                                         n\n                \
    \                                              (if (> (length factor) 2)\n   \
    \                                                               (if (= (first\
    \ factor) 2)\n                                                               \
    \       (* n 2)\n                                                            \
    \          (* n (first factor))\n                                            \
    \                      )\n                                                   \
    \               (let ((factor (cdr factor)))\n                               \
    \                                     (if (null? factor)\n                   \
    \                                                     n\n                    \
    \                                                    (if (> (length factor) 2)\n\
    \                                                                            (if\
    \ (= (first factor) 2)\n                                                     \
    \                           (* n 2)\n                                        \
    \                                        (* n (first factor))\n              \
    \                                                              )\n           \
    \                                                                 (let ((factor\
    \ (cdr factor)))\n                                                           \
    \                   (if (null? factor)\n                                     \
    \                                             n\n                            \
    \                                                      (if (> (length factor)\
    \ 2)\n                                                                       \
    \               (if (= (first factor) 2)\n                                   \
    \                                                       (* n 2)\n            \
    \                                                                            \
    \  (* n (first factor))\n                                                    \
    \                                  )\n                                       \
    \                                               (let ((factor (cdr factor)))\n\
    \                                                                        (if (null?\
    \ factor)\n                                                                  \
    \          n\n                                                               \
    \             (if (> (length factor) 2)\n                                    \
    \                                            (if (= ", "  (cond [(= n 1) 2]\n\
    \        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+\
    \ 1 (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo\
    \ n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (quotient n 2))]))\n",
  "  (let loop ((n n) (max 1) (prime #t) (i 2))\n    (cond ((= i n) max)\n       \
    \   ((= (modulo n prime) 0) prime)\n          ((= (modulo n prime) 1) (loop (quotient\
    \ n prime) (+ max 1) prime (+ i 1)))\n          (else (loop (quotient n prime)\
    \ (+ max 1) prime (+ i 1))))))\n", "  (let loop ((n n) (p 2))\n    (cond ((= n\
    \ 1) p)\n          ((= (modulo n p) 0) (loop (quotient n p) (+ p 1)))\n      \
    \    (else (loop (quotient n p) (+ p 1))))))\n", "  (if (= n 1)\n      n\n   \
    \   (let ((factors (prime-factors n)))\n        (if (null? factors)\n        \
    \    n\n            (let ((largest (car factors)))\n              (if (> largest\
    \ n)\n                  largest\n                  (largest_prime_factor (* n\
    \ largest))))))))\n", "  (if (= n 1)\n      n\n      (let loop ((n n) (i 2))\n\
    \        (if (= i 2)\n            (if (= (modulo n i) 0)\n                (if\
    \ (= (modulo n i) 1)\n                    (if (= (modulo n i) 2)\n           \
    \             n\n                        (loop (quotient n i) (+ i 1))))))\n \
    \       (loop (quotient n i) (+ i 1)))))\n", "  (cond [(= n 1) 1]\n        [(=\
    \ (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 2]\n  \
    \      [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1\
    \ (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (* n (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (p 2))\n\
    \    (cond ((= n 1) p)\n          ((even? n) (loop (/ n 2) p))\n          ((odd?\
    \ n) (loop (* n 3) p))\n          (else (loop (* n p) (+ p 1))))))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [else (let ([factor\
    \ (prime-factors n)]\n                    [largest (car factor)]\n           \
    \         [largest-factor (largest_prime_factor largest)])\n              (if\
    \ (null? factor)\n                  largest-factor\n                  (if (> largest-factor\
    \ largest)\n                      (cons largest largest-factor)\n            \
    \          (cons largest (cons largest-factor factor))))]))\n", "  (cond [(= n\
    \ 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (prime\
    \ (primes n)))\n    (cond ((null? prime) (error \"No prime factors found\"))\n\
    \          ((= (length prime) 1) (first prime))\n          (else (loop (first\
    \ prime) (drop 1 (rest prime)))))))\n", "  (if (= n 1)\n      n\n      (let ((factor\
    \ (prime-factors n)))\n        (if (null? factor)\n            n\n           \
    \ (max (car factor) (largest_prime_factor (cdr factor)))))))\n", "  (cond [(=\
    \ n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 3]\n        [(= n 4) 4]\n        [(= n 5) 5]\n        [(= n 6) 6]\n        [(=\
    \ n 7) 7]\n        [(= n 8) 8]\n        [(= n 9) 9]\n        [(= n 10) 10]\n \
    \       [(= n 11) 11]\n        [(= n 12) 12]\n        [(= n 13) 13]\n        [(=\
    \ n 14) 14]\n        [(= n 15) 15]\n        [(= n 16) 16]\n        [(= n 17) 17]\n\
    \        [(= n 18) 18]\n        [(= n 19) 19]\n        [(= n 20) 20]\n       \
    \ [(= n 21) 21]\n        [(= n 22) 22]\n        [(= n 23) 23]\n        [(= n 24)\
    \ 24]\n        [(= n 25) 25]\n        [(= n 26) 26]\n        [(= n 27) 27]\n \
    \       [(= n 28) 28]\n        [(= n 29) 29]\n        [(= n 30) 30]\n        [(=\
    \ n 31) 31]\n        [(= n 32) 32]\n        [(= n 33) 33]\n        [(= n 34) 34]\n\
    \        [(= n 35) 35]\n        [(= n 36) 36]\n        [(= n 37) 37]\n       \
    \ [(= n 38) 38]\n        [(= n 39) 39]\n        [(= n 40) 40]\n        [(= n 41)\
    \ 41]\n        [(= n 42) 42]\n        [(= n 43) 43]\n        [(= n 44) 44]\n \
    \       [(= n 45) 45]\n        [(= n 46) 46]\n        [(= n 47) 47]\n        [(=\
    \ n 48) 48]\n        [(= n 49) 49]\n        [(= n 50) 50]\n        [(= n 51) 51]\n\
    \        [(= n 52) 52]\n        [(= n 53) 53]\n        [(= n 54) 54]\n       \
    \ [(= n 55) 55]\n        [(= n 56) 56]\n        [(= n 57) 57]\n        [(= n 58)\
    \ 58]\n        [(= n 59) 59", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0)\
    \ (largest_prime_factor (/ n 2))]\n        [else (* 2 (largest_prime_factor (/\
    \ n 2)))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n \
    \       [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (max 1)\
    \ (prime #t))\n    (if (= n 1)\n        prime\n        (loop (quotient n max)\
    \ (quotient max 2) (= (modulo n max) 0)))))\n", "  (if (= n 1)\n      n\n    \
    \  (let ((factors (prime-factors n)))\n        (if (null? factors)\n         \
    \   n\n            (let ((largest (car factors)))\n              (if (> largest\
    \ (car factors))\n                  largest\n                  (largest_prime_factor\
    \ (* n largest))))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ 1]\n        [(= (modulo n 2) 0) (largest_prime_factor n)]\n        [else (*\
    \ 2 (largest_prime_factor (quotient n 2)))]))\n", "  (let loop ((n n) (prime (primes\
    \ n)))\n    (cond ((= n 1) prime)\n          ((= (modulo n prime) 0) (loop (quotient\
    \ n prime) (quotient prime 2)))\n          (else (loop (quotient n prime) (quotient\
    \ prime (+ 1 prime)))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (let ((largest\
    \ (car factor)))\n              (if (> largest n)\n                  largest\n\
    \                  (largest_prime_factor (* n largest))))))))\n", "  (if (= n\
    \ 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (max (car factor) (largest_prime_factor (cdr factor)))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [(=\
    \ n 3) (* 3 2)]\n        [else (largest_prime_factor (quotient n 2))]))\n", " \
    \ (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [(= n 3) (* 3 2)]\n        [else\
    \ (largest_prime_factor (quotient n 2))]))\n", "  (cond [(= n 1) n]\n        [(=\
    \ (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (prime 1))\n    (if (= n 1)\n        prime\n        (loop (quotient n prime)\
    \ (if (= (modulo n prime) 0) (+ prime 1) (+ prime (modulo n prime)))\n       \
    \      ))))\n", "  (if (= n 1)\n      n\n      (let ((factors (prime-factors n)))\n\
    \        (if (null? factors)\n            n\n            (let ((largest (car factors)))\n\
    \              (if (> largest n)\n                  largest\n                \
    \  (largest_prime_factor (/ n largest))))))))\n", "  (cond [(= n 1) 2]\n     \
    \   [(= n 2) 3]\n        [(= n 3) (* 3 n)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (factors ()))\n    (cond ((= n 1) (if (=\
    \ (modulo n 2) 0) (list n) factors))\n          ((= n 2) (if (= (modulo n 3) 0)\
    \ (list n) factors))\n          ((= n 3) (if (= (modulo n 5) 0) (list n) factors))\n\
    \          ((= n 5) (if (= (modulo n 7) 0) (list n) factors))\n          ((= n\
    \ 7) (if (= (modulo n 11) 0) (list n) factors))\n          ((= n 11) (if (= (modulo\
    \ n 13) 0) (list n) factors))\n          ((= n 13) (if (= (modulo n 17) 0) (list\
    \ n) factors))\n          ((= n 17) (if (= (modulo n 19) 0) (list n) factors))\n\
    \          ((= n 19) (if (= (modulo n 23) 0) (list n) factors))\n          ((=\
    \ n 23) (if (= (modulo n 29) 0) (list n) factors))\n          ((= n 29) (if (=\
    \ (modulo n 31) 0) (list n) factors))\n          ((= n 31) (if (= (modulo n 37)\
    \ 0) (list n) factors))\n          ((= n 37) (if (= (modulo n 41) 0) (list n)\
    \ factors))\n          ((= n 41) (if (= (modulo n 43) 0) (list n) factors))\n\
    \          ((= n 43) (if (= (modulo n 47) 0) (list n) factors))\n          ((=\
    \ n 47) (if (= (modulo n 53) 0) (list n) factors))\n          ((= n 53) (if (=\
    \ (modulo n 59) 0) (list n) factors))\n          ((= n 59) (if (= (modulo n 61)\
    \ 0) (list n) factors))\n          ((= n 61) (if (= (modulo n 67) 0) (list n)\
    \ factors))\n          ((= n 67) (if (= (modulo n 71) 0) (list n) factors))\n\
    \          ((= n 71) (if (= (modulo n 73) 0) (list n) factors))\n          ((=\
    \ n 73) (if (= (modulo n 79) 0) (list n) factors))\n          ((= n 79) (if (=\
    \ (modulo n 83) 0) ", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (let ((factor (subseq factor 0 (length factor))))\n\
    \                  (if (null? factor)\n                      n\n             \
    \         (let ((factor (subseq factor 1 (length factor))))\n                \
    \        (if (null? factor)\n                            n\n                 \
    \           (let ((factor (subseq factor 1 (length factor))))\n              \
    \                (if (null? factor)\n                                  n\n   \
    \                               (let ((factor (subseq factor 1 (length factor))))\n\
    \                                    (if (null? factor)\n                    \
    \                    n\n                                        (let ((factor\
    \ (subseq factor 1 (length factor))))\n                                      \
    \    (if (null? factor)\n                                              n\n   \
    \                                           (let ((factor (subseq factor 1 (length\
    \ factor))))\n                                                (if (null? factor)\n\
    \                                                    n\n                     \
    \                               (let ((factor (subseq factor 1 (length factor))))\n\
    \                                                      (if (null? factor)\n  \
    \                                                        n\n                 \
    \                                         (let ((factor (subseq factor 1 (length\
    \ factor))))\n                                                            (if\
    \ (null? factor)\n                                                           \
    \     n\n                                                                (let\
    \ ((factor (subseq factor 1 (length factor))))\n                             \
    \                                     (if (null? factor)\n                   \
    \                                                   n\n                      \
    \                                                (let ((factor (subseq factor\
    \ 1 (length factor))))\n                                                     \
    \                   (if (null? factor)\n                                     \
    \                                       n\n                                  \
    \                                          (let ((factor (subseq factor 1 (length\
    \ factor))))\n                                                               \
    \               (if (null? factor)\n                                         \
    \                                         n\n                                \
    \                                                  (let ((factor (subseq factor\
    \ 1 (length factor))))\n                                                     \
    \                               (if (null? factor)\n                         \
    \                                                               n\n          \
    \                                                                            \
    \  (let ((factor (subseq factor 1 (length factor))))\n                       \
    \                                                                   (if (null?\
    \ factor)\n                                                                  \
    \                            n\n                                             \
    \                                                 (let ((factor (subseq factor\
    \ 1 (length factor))))\n                                                     \
    \                                           (if (null? factor)\n             \
    \                                                                            \
    \           n\n                                                              \
    \                                      (let ((factor (subseq factor 1 (length\
    \ factor))))\n                                                               \
    \                                       (if (null? factor)\n                 \
    \                                                                            \
    \             n\n                                                            \
    \                                              (let ((factor (subseq factor 1\
    \ (length factor))))\n                                                       \
    \                                                     (if (null? factor)\n   \
    \                                                                            \
    \                                 n\n                                        \
    \                                                                        (let\
    \ ((factor (subseq factor 1 (length factor))))\n                             \
    \                                                                            \
    \         (if (null? factor)\n                                               \
    \                                                                       n\n  \
    \                                                                            \
    \                                        (let ((factor (subseq factor 1 (length\
    \ factor))))\n                                                               \
    \                                                         (if (null? factor)\n\
    \                                                                            \
    \                                                n\n                         \
    \                                                                            \
    \                       (let ((factor (subseq factor 1 (length factor))))\n  \
    \                                                                            \
    \                                                (if (null? factor)", "  (cond\
    \ [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 n)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (let\
    \ loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n          ((even? n) (loop\
    \ (/ n 2) prime))\n          ((odd? n) (loop (* 3 n) (+ prime (quotient n 3)))))\n\
    \    (loop (quotient n prime) prime)))\n", "  (if (= n 1)\n      n\n      (let\
    \ ((factors (prime-factors n)))\n        (if (null? factors)\n            n\n\
    \            (let ((largest (car factors)))\n              (if (> largest (largest_prime_factor\
    \ largest))\n                  largest\n                  (largest_prime_factor\
    \ largest))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (primes\
    \ #{}) (max 0))\n    (cond ((= n 1) max)\n          ((prime? (car primes)) (car\
    \ primes))\n          ((> n max) (loop (quotient n max) (cdr primes) max))\n \
    \         (else (loop (quotient n max) (cdr primes) (+ max 1))))))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 2]\n  \
    \      [(= n 2) 3]\n        [(= n 3) (* 3 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (prime (prime? n)))\n    (cond ((= n 1)\
    \ prime)\n          ((prime? n) (loop (/ n prime) (/ n prime)))\n          (else\
    \ (loop (* n prime) (/ n prime))))))\n", "  (let loop ((n n) (p 2))\n    (if (=\
    \ n 1)\n        p\n        (loop (/ n p)\n              (if (= (modulo n p) 0)\n\
    \                  (+ 1 (* p p))\n                  (+ 1 (* p p)))))))\n", " \
    \ (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (max 1) (prime (prime? n)))\n    (if (=\
    \ n 1)\n        prime\n        (loop (quotient n prime) (if (> max prime) (max\
    \ prime) max) (quotient n prime))))))\n", "  (if (= n 1)\n      n\n      (let\
    \ ((factor (prime-factors n)))\n        (if (null? factor)\n            n\n  \
    \          (max (car factor) (largest_prime_factor (cdr factor)))))))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 2]\n  \
    \      [(= n 2) 3]\n        [(= n 3) (* 3 n)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 3]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n)\
    \ (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/ n p) (+ p 1)))\n\
    \          ((odd? n) (loop (/ n p) (+ p 2))))\n    p))\n", "  (let loop ((n n)\
    \ (prime 1) (max 0))\n    (cond ((= n 1) prime)\n          ((even? n) (loop (/\
    \ n 2) prime max))\n          ((odd? n) (loop (* n 3) (* prime (/ n 2)) max))\n\
    \          (else (loop (* n prime) (* prime (/ n 2)) (max max)))))\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI believe that `(largest_prime_factor n)` should return\
    \ `max` instead of `prime`. Otherwise the function will always return `1`.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I edited my answer to fix that.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe first thing that comes to mind is \"prime factorization\"\
    . Wikipedia has a good article on that. \nThe algorithm is pretty straightforward:\n\
    \nStart with a list of all prime numbers up to sqrt(n).\nFor each number in the\
    \ list, divide n by that number and add it to the list.\nRepeat steps 2 and 3\
    \ until there are no more numbers to divide by in the list.\n\nThe first step\
    \ can be done by generating a list of all prime numbers up to sqrt(n) by using\
    \ a sieve of Eratosthenes (Wikipedia has a good article on that).\nThe second\
    \ step can be done by generating a list of all prime numbers up to sqrt(n) by\
    \ using a sieve of Eratosthenes (Wikipedia has a good article on that).\nThe third\
    \ step can be done by generating a list of all prime numbers up to sqrt(n) by\
    \ using a sieve of Eratosthenes (Wikipedia has a good article on that).\n<|/ a\
    \ tags=racket,scheme |>\n<| a dscore=1 |>\n<code>", "  (let loop ((n n) (max 1)\
    \ (primes #{}))\n    (cond ((= n 1) max)\n          ((prime? (first primes)) (loop\
    \ (first primes) (first primes) (cons (first primes) primes)))\n          ((>\
    \ n 1) (loop (rest n) (first primes) primes))\n          (else (loop (rest n)\
    \ (first primes) (cons (first primes) primes))))))\n", "  (cond [(= n 1) 2]\n\
    \        [(even? n) (* 2 (largest_prime_factor (/ n 2)))]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      1\n      (let ((factors (prime-factors\
    \ n)))\n        (if (null? factors)\n            n\n            (max (car factors)\
    \ (largest_prime_factor (cdr factors)))))))\n", "  (let loop ((n n) (prime 1))\n\
    \    (cond ((= n 1) prime)\n          ((= n 2) prime)\n          ((= (modulo n\
    \ prime) 0) (loop (quotient n prime) (+ prime 1)))\n          :else (loop (quotient\
    \ n prime) prime))))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((= n 2) prime)\n          ((even? n) (loop (/ n 2) prime))\n     \
    \     ((odd? n) (loop (* n 3) prime))\n          (else (loop (* n prime) (+ prime\
    \ (floor (/ n prime)))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks\
    \ for the answer! I didn't know about `floor`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't use any `floor` calls.\n<|/ c |>\n<| c |>\nThanks for the answer!\
    \ I didn't know about `floor`.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (let loop ((n n) (prime (prime-factor-of n)))\n    (if (= n 1)\n        prime\n\
    \        (loop (quotient n prime) (quotient prime prime)))))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (let ((largest (car factor)))\n              (if (>\
    \ n largest)\n                  largest\n                  (largest_prime_factor\
    \ (/ n largest))))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n\
    \ n) (p 2))\n    (if (= n 1)\n        p\n        (loop (quotient n p)\n      \
    \        (if (= (modulo n p) 0)\n                  p\n                  (+ 1 (loop\
    \ (quotient n p) (modulo n p))))))))\n", "  (cond [(= n 1) 2]\n        [(= (modulo\
    \ n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (let\
    \ loop ((n n) (max 1) (prime #t))\n    (cond ((= n 1) prime)\n          ((even?\
    \ n) (loop (/ n 2) (* max 2) prime))\n          ((odd? n) (loop (/ n 2) (+ max\
    \ 2) (not prime)))\n          (else (loop (/ n 2) (+ max 2) prime)))))\n", " \
    \ (let loop ((n n) (max 1) (primes #{}))\n    (cond ((= n 1) max)\n          ((=\
    \ (modulo n max) 0) (loop (quotient n max) (quotient max 2) primes))\n       \
    \   ((not (member n primes)) (loop (quotient n max) (quotient max 2) (cons n primes)))\n\
    \          (else (loop (quotient n max) (quotient max 2) primes)))))\n", "  (cond\
    \ [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (p 2) (primes #{}))\n    (cond ((= n 1)\
    \ p)\n          ((not (prime? (modulo n p)))\n           (loop (modulo n p) (+\
    \ p 1) (cons n primes)))\n          (else\n           (loop (modulo n p) (+ p\
    \ 1) primes)))))\n", "  (let loop ((n n) (prime 1) (max 0))\n    (if (= n 1)\n\
    \        prime\n        (loop (quotient n prime) (if (= (modulo n prime) 0)\n\
    \                                     (+ prime prime)\n                      \
    \               (+ prime (modulo n prime)))\n              (if (> max prime)\n\
    \                  (set! max prime)\n                  (set! n prime))))))\n",
  "  (let loop ((n n) (p 2))\n    (if (= p n)\n        p\n        (loop (quotient\
    \ n p)\n              (if (= (modulo n p) 0)\n                  (+ 1 (loop (quotient\
    \ n p) (+ p 1)))\n                  p))))))\n", "  (cond [(= n 1) 1]\n       \
    \ [(= (modulo n 2) 0) (* 2 n)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (if (= n 1)\n      n\n      (let ((factors (prime-factors n)))\n        (if (null?\
    \ factors)\n            n\n            (max (first factors) (largest_prime_factor\
    \ (first factors)))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0)\
    \ (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n\
    \ 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (let\
    \ loop ((n n) (prime (make-prime (- n 1))))\n    (cond ((= n 1) prime)\n     \
    \     ((prime-is-prime prime) (loop (/ n prime) (make-prime prime)))\n       \
    \   (else (loop (/ n prime) (make-prime prime))))))\n", "  (let loop ((n n) (p\
    \ 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/ n p) (+ p 1)))\n \
    \         (else (loop (* n p) (+ p 1))))))\n", "  (cond [(= n 1) n]\n        [(=\
    \ (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (let loop ((n n) (prime 1))\n    (cond [(= n 1) prime]\n          [(= n 2) prime]\n\
    \          [(prime? (modulo n prime)) (loop (modulo n prime) (+ prime 1))]\n \
    \         [else (loop (modulo n prime) prime)])))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factors (prime-factors n)))\n        (if (null? factors)\n     \
    \       n\n            (let ((largest (car factors)))\n              (if (> largest\
    \ n)\n                  largest\n                  (largest_prime_factor (* n\
    \ largest))))))))\n", "  (let loop ((n n) (max 1) (i 2))\n    (if (= i max)\n\
    \        n\n        (loop (* n n) (+ i 1) (+ i 2)))))\n", "  (let loop ((n n)\
    \ (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/ n 2) p))\n    \
    \      (else (loop (* n p) (+ p 1))))))\n", "  (cond [(= n 1) n]\n        [(=\
    \ (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (prime\
    \ 1))\n    (cond ((= n 1) prime)\n          ((even? n) (loop (/ n 2) prime))\n\
    \          (else (loop (* n prime) (+ prime (quotient n prime)))))))\n", "  (let\
    \ loop ((n n) (prime (primes n)))\n    (cond ((= n 1) prime)\n          ((= (modulo\
    \ n prime) 0) (loop (quotient n prime) (quotient prime 2)))\n          (else (loop\
    \ (quotient n prime) (quotient prime (+ 1 prime)))))))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n  \
    \      [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (prime\
    \ 1) (max 0))\n    (if (= n 1)\n        prime\n        (loop (quotient n prime)\
    \ (quotient n prime) (if (> max prime) max prime))))))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (if\
    \ (= n 1)\n      1\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (max (car factor) (largest_prime_factor (cdr factor)))))))\n",
  "  (let loop ((n n) (prime (primes n)))\n    (cond ((= n 1) prime)\n          ((=\
    \ (modulo n prime) 0) (loop (quotient n prime) (quotient prime 2)))\n        \
    \  (else (loop (quotient n prime) (quotient prime (+ 1 prime)))))))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (let loop ((n n) (max 1) (prime (primes n)))\n   \
    \ (cond ((= n 1) prime)\n          ((= (modulo n prime) 0)\n           (loop (quotient\
    \ n prime) (quotient n prime) prime))\n          (else\n           (loop (quotient\
    \ n prime) (max max (modulo n prime)) prime)))))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factor (prime-factors n)))\n        (if (null? factor)\n       \
    \     n\n            (if (> (length factor) 2)\n                (if (> (length\
    \ factor) 3)\n                    (if (> (length factor) 5)\n                \
    \        (if (> (length factor) 7)\n                            (if (> (length\
    \ factor) 11)\n                                (if (> (length factor) 13)\n  \
    \                                  (if (> (length factor) 17)\n              \
    \                          (if (> (length factor) 19)\n                      \
    \                      (if (> (length factor) 23)\n                          \
    \                      (if (> (length factor) 29)\n                          \
    \                          (if (> (length factor) 31)\n                      \
    \                                  (if (> (length factor) 37)\n              \
    \                                              (if (> (length factor) 41)\n  \
    \                                                              (if (> (length\
    \ factor) 47)\n                                                              \
    \      (if (> (length factor) 53)\n                                          \
    \                              (if (> (length factor) 59)\n                  \
    \                                                          (if (> (length factor)\
    \ 61)\n                                                                      \
    \          (if (> (length factor) 67)\n                                      \
    \                                              (if (> (length factor) 71)\n  \
    \                                                                            \
    \          (if (> (length factor) 73)\n                                      \
    \                                                      (if (> (length factor)\
    \ 79)\n                                                                      \
    \                          (if (> (length factor) 83)\n                      \
    \                                                                            \
    \  (if (> (length factor) 89)\n                                              \
    \                                                          (if (> (length factor)\
    \ 97)\n                                                                      \
    \                                      (if (> (length factor) 101)\n         \
    \                                                                            \
    \                           (if (> (length factor) 103)\n                    \
    \                                                                            \
    \                    (if (> (length factor) 107)\n                           \
    \                                                                            \
    \                 (if (> (length factor) 109)\n                              \
    \                                                                            \
    \                  (if (> (length factor) 111)\n                             \
    \                                                                            \
    \                       (if (> (length factor) 113)\n                        \
    \                                                                            \
    \                                (if (> (length factor) 117)\n               \
    \                                                                            \
    \                                             (if (> (length factor) 121)\n  \
    \                                                                            \
    \                                                              (if (> (length\
    \ factor) 123)\n                                                             \
    \                                                                            \
    \       (if (> (length factor) 127)\n                                        \
    \                                                                            \
    \                                (if (> (length factor) 131)\n               \
    \                                                                            \
    \                                                             (if (> (length factor)\
    \ 133)\n                                                                     \
    \                                                                            \
    \           (if (> (length factor) 137)\n                                    \
    \                                                                            \
    \                                                (if (> (length factor) 139)\n\
    \                                                                            \
    \                                                                            \
    \            (if (> (length factor) 141)\n                                   \
    \                                                                            \
    \                                                         (if (> (length factor)\
    \ 143)\n                                                                     \
    \                                                                            \
    \                           (if (> (length factor) 147)\n                    \
    \                                                                            \
    \                                                                            \
    \    (if (> (length factor) 151)\n                                           \
    \                                                                            \
    \                                                             (if (> (length factor)\
    \ 153)\n                                                                     \
    \                                                                            \
    \                                       (if (> (length factor) 157)\n        \
    \                                                                            \
    \                                                                            \
    \                            (if (> (length factor) 161)\n                   \
    \                                                                            \
    \                                                                            \
    \                     (if (> (length factor", "  (let loop ((n n) (p 2))\n   \
    \ (if (= n 1)\n        p\n        (loop (quotient n p)\n              (if (even?\
    \ p)\n                  (+ 1 (loop (quotient n p) (quotient p 2)))\n         \
    \         (loop (quotient n p) (+ p 2))))))))\n", "  (cond [(= n 1) 1]\n     \
    \   [(= n 2) 2]\n        [(= n 3) 3]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n    \
    \    [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (max 1) (prime\
    \ (primes n)))\n    (cond ((= n 1) prime)\n          ((= (modulo n prime) 0) (loop\
    \ (quotient n prime) (quotient n prime) prime))\n          (else (loop (quotient\
    \ n prime) (quotient n prime) (+ prime (modulo n prime)))))))\n", "  (if (= n\
    \ 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 2)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 1)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 0)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 0)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 0)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 0)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n            (if (> (length factor) 0)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) n)\n \
    \                         largest\n                          (largest_prime_factor\
    \ largest)))))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          (else (loop (* n prime)\
    \ (+ prime (floor (/ n prime))))))))\n", "  (if (= n 1)\n      n\n      (let ((factor\
    \ (prime-factors n)))\n        (if (null? factor)\n            n\n           \
    \ (max (car factor) (largest_prime_factor (cdr factor)))))))\n", "  (cond [(=\
    \ n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (max 1) (prime #t) (i 2))\n    (if (= i\
    \ max)\n        prime\n        (loop (* n n) (+ i 1) (= (modulo n i) prime) i))))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (let loop ((n n) (factors ()))\n    (cond [(= n 1) factors]\n\
    \          [(prime? n) (loop (/ n 2) factors)]\n          [else (loop (* n n)\
    \ (cons n factors))])))\n", "  (let loop ((n n) (primes '(2 3 5 7 11 13 17 19)))\n\
    \    (cond ((= n 1) (first primes))\n          ((= (modulo n primes) 0) (loop\
    \ (quotient n primes) primes))\n          (else (loop (quotient n primes) (cons\
    \ (first primes) primes))))))\n", "  (let loop ((n n) (prime 1) (max 0))\n   \
    \ (if (= n 1)\n        prime\n        (loop (quotient n prime) (quotient n prime)\
    \ (if (> max prime) max prime))))))\n", "  (if (= n 1)\n      n\n      (let ((factor\
    \ (prime-factors n)))\n        (if (null? factor)\n            n\n           \
    \ (if (> (length factor) 2)\n                (let ((factor (subseq factor 0 (length\
    \ factor))))\n                  (if (null? factor)\n                      n\n\
    \                      (let ((factor (subseq factor 0 (length factor))))\n   \
    \                     (if (null? factor)\n                            n\n    \
    \                        (let ((factor (subseq factor 0 (length factor))))\n \
    \                             (if (null? factor)\n                           \
    \       n\n                                  (let ((factor (subseq factor 0 (length\
    \ factor))))\n                                    (if (null? factor)\n       \
    \                                 n\n                                        (let\
    \ ((factor (subseq factor 0 (length factor))))\n                             \
    \             (if (null? factor)\n                                           \
    \   n\n                                              (let ((factor (subseq factor\
    \ 0 (length factor))))\n                                                (if (null?\
    \ factor)\n                                                    n\n           \
    \                                         (let ((factor (subseq factor 0 (length\
    \ factor))))\n                                                      (if (null?\
    \ factor)\n                                                          n\n     \
    \                                                     (let ((factor (subseq factor\
    \ 0 (length factor))))\n                                                     \
    \       (if (null? factor)\n                                                 \
    \               n\n                                                          \
    \      (let ((factor (subseq factor 0 (length factor))))\n                   \
    \                                               (if (null? factor)\n         \
    \                                                             n\n            \
    \                                                          (let ((factor (subseq\
    \ factor 0 (length factor))))\n                                              \
    \                          (if (null? factor)\n                              \
    \                                              n\n                           \
    \                                                 (let ((factor (subseq factor\
    \ 0 (length factor))))\n                                                     \
    \                         (if (null? factor)\n                               \
    \                                                   n\n                      \
    \                                                            (let ((factor (subseq\
    \ factor 0 (length factor))))\n                                              \
    \                                      (if (null? factor)\n                  \
    \                                                                      n\n   \
    \                                                                            \
    \         (let ((factor (subseq factor 0 (length factor))))\n                \
    \                                                                          (if\
    \ (null? factor)\n                                                           \
    \                                   n\n                                      \
    \                                                        (let ((factor (subseq\
    \ factor 0 (length factor))))\n                                              \
    \                                                  (if (null? factor)\n      \
    \                                                                            \
    \                  n\n                                                       \
    \                                             (let ((factor (subseq factor 0 (length\
    \ factor))))\n                                                               \
    \                                       (if (null? factor)\n                 \
    \                                                                            \
    \             n\n                                                            \
    \                                              (let ((factor (subseq factor 0\
    \ (length factor))))\n                                                       \
    \                                                     (if (null? factor)\n   \
    \                                                                            \
    \                                 n\n                                        \
    \                                                                        (let\
    \ ((factor (subseq factor 0 (length factor))))\n                             \
    \                                                                            \
    \         (if (null? factor)\n                                               \
    \                                                                       n\n  \
    \                                                                            \
    \                                        (let ((factor (subseq factor 0 (length\
    \ factor))))\n                                                               \
    \                                                         (if (null? factor)\n\
    \                                                                            \
    \                                                n\n                         \
    \                                                                            \
    \                       (let ((factor (subseq factor 0 (length factor))))\n  \
    \                                                                            \
    \                                                (if (null? factor)", "  (cond\
    \ [(= n 1) 2]\n        [(= (modulo n 2) 0) (+ 2 (largest_prime_factor (/ n 2)))]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) n]\n  \
    \      [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (let loop ((n n) (prime (prime? n)))\n    (cond ((= n 1) prime)\n\
    \          ((prime? n) (loop (/ n prime) (/ n prime)))\n          (else (loop\
    \ (* n prime) (/ n prime))))))\n", "  (let loop ((n n) (prime (primes n)))\n \
    \   (cond ((null? prime) (error \"No prime factors found\"))\n          ((= (modulo\
    \ n prime) 0) (loop (quotient n prime) (cons n prime)))\n          (else (loop\
    \ (quotient n prime) (cons n prime))))))\n", "  (cond [(= n 1) n]\n        [(=\
    \ (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [(= n 3)\
    \ (* 3 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 2)\n                (first\
    \ factor)\n                (first factor)))))\n", "  (let loop ((n n) (primes\
    \ #{}))\n    (cond ((= n 1) (first primes))\n          ((= (modulo n primes) 0)\n\
    \           (loop (quotient n primes) (cons n primes)))\n          (else\n   \
    \        (loop (quotient n primes)\n                 (cons (modulo n primes) primes)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it out with n = 13195\
    \ and n = 2048.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. I\
    \ just added a test case for n = 2048.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it before posting it. I just added a test case for n = 2048.\n<|/ c |>\n<| c\
    \ |>\nIt works. I tested it before posting it. I just added a test case for n\
    \ = 2048.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. I just\
    \ added a test case for n = 2048.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n          ((= n 2) prime)\n\
    \          ((= (modulo n prime) 0) (loop (quotient n prime) (+ prime 1)))\n  \
    \        (else (loop (quotient n prime) (+ prime 1))))))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (max (car factor) (largest_prime_factor (cdr factor)))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((= n 2) prime)\n          ((= (modulo n prime) 0) (loop (quotient\
    \ n prime) (+ prime 1)))\n          (else (loop (quotient n prime) (+ prime 1))))))\n",
  "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n          ((= n 2) prime)\n\
    \          ((= (modulo n prime) 0) (loop (quotient n prime) (+ prime 1)))\n  \
    \        (else (loop (quotient n prime) (+ prime 1))))))\n", "  (let loop ((n\
    \ n) (p 2))\n    (cond ((= n 1) p)\n          ((= (modulo n p) 0) (loop (quotient\
    \ n p) (+ p 1)))\n          (else (loop (quotient n p) (+ p 1))))))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n \
    \       [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (prime 1))\n    (cond ((= n 1) prime)\n          ((even? n) (loop (/ n 2) prime))\n\
    \          (else (loop (* n prime) (+ prime (floor (/ n prime)))))))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThanks, I didn't know about `floor`. That\
    \ makes the code much more concise.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\
    \ [(= n 1) n]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n \
    \       [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n   \
    \     [(= (mod n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (* n (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (if (= n 1)\n      n\n      (let ((factors (prime-factors\
    \ n)))\n        (if (null? factors)\n            n\n            (let ((largest\
    \ (car factors)))\n              (if (> n largest)\n                  largest\n\
    \                  (largest_prime_factor (/ n largest))))))))\n", "  (let loop\
    \ ((n n) (p 2) (primes #{}))\n    (cond [(= n 1) p]\n          [(prime? (car primes))\
    \ p]\n          [else (loop (quotient n p) (+ p 1) (cons (car primes) primes))])))\n",
  "  (let loop ((n n) (prime 1) (max 0))\n    (if (= n 1)\n        prime\n       \
    \ (loop (/ n prime) (+ prime prime) (max max)))))\n", "  (cond [(= n 1) 1]\n \
    \       [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (*\
    \ 2 (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo\
    \ n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n \
    \       [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (max 1) (i 2))\n    (if (= i max)\n        n\n        (loop (* n n) (+ i 1)\
    \ (+ i 1)))))\n", "  (let loop ((n n) (max 1) (prime #t) (i 2))\n    (cond ((=\
    \ i n) max)\n          ((= (modulo n prime) 0) (loop (+ n 1) (+ max 1) prime (+\
    \ i 1)))\n          (else (loop (+ n 1) (+ max 1) (modulo n prime) (i + 1))))))\n",
  "  (let loop ((n n) (p 2))\n    (if (= n 1)\n        p\n        (loop (quotient\
    \ n p)\n              (if (= (modulo n p) 0)\n                  (+ 1 (loop (quotient\
    \ n p) (+ p 1)))\n                  p))))))\n", "  (if (= n 1)\n      n\n    \
    \  (let ((factor (prime-factors n)))\n        (if (null? factor)\n           \
    \ n\n            (if (> (length factor) 2)\n                (first factor)\n \
    \               (if (> (length factor) 1)\n                    (first factor)\n\
    \                    (first factor)))))) ; <<< #lang racket\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 2)\n                (first\
    \ factor)\n                (first factor)))))\n", "  (if (= n 1)\n      n\n  \
    \    (let ((factor (prime-factors n)))\n        (if (null? factor)\n         \
    \   n\n            (if (> (length factor) 2)\n                (let ((largest (car\
    \ factor)))\n                  (if (= largest)\n                      (largest_prime_factor\
    \ largest)\n                      (if (= (largest_prime_factor largest) largest)\n\
    \                          (largest_prime_factor largest)\n                  \
    \        (if (= (largest_prime_factor largest) largest)\n                    \
    \          (largest_prime_factor largest)\n                              (if (=\
    \ (largest_prime_factor largest) largest)\n                                  (largest_prime_factor\
    \ largest)\n                                  (if (= (largest_prime_factor largest)\
    \ largest)\n                                      (largest_prime_factor largest)\n\
    \                                      (if (= (largest_prime_factor largest) largest)\n\
    \                                          (largest_prime_factor largest)\n  \
    \                                        (if (= (largest_prime_factor largest)\
    \ largest)\n                                              (largest_prime_factor\
    \ largest)\n                                              (if (= (largest_prime_factor\
    \ largest) largest)\n                                                  (largest_prime_factor\
    \ largest)\n                                                  (if (= (largest_prime_factor\
    \ largest) largest)\n                                                      (largest_prime_factor\
    \ largest)\n                                                      (if (= (largest_prime_factor\
    \ largest) largest)\n                                                        \
    \  (largest_prime_factor largest)\n                                          \
    \                (if (= (largest_prime_factor largest) largest)\n            \
    \                                                  (largest_prime_factor largest)\n\
    \                                                              (if (= (largest_prime_factor\
    \ largest) largest)\n                                                        \
    \          (largest_prime_factor largest)\n                                  \
    \                                (if (= (largest_prime_factor largest) largest)\n\
    \                                                                      (largest_prime_factor\
    \ largest)\n                                                                 \
    \     (if (= (largest_prime_factor largest) largest)\n                       \
    \                                                   (largest_prime_factor largest)\n\
    \                                                                          (if\
    \ (= (largest_prime_factor largest) largest)\n                               \
    \                                               (largest_prime_factor largest)\n\
    \                                                                            \
    \  (if (= (largest_prime_factor largest) largest)\n                          \
    \                                                        (largest_prime_factor\
    \ largest)\n                                                                 \
    \                 (if (= (largest_prime_factor largest) largest)\n           \
    \                                                                           ",
  "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) 2]\n\
    \        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+\
    \ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if (= n 1)\n      n\n      (let\
    \ ((factors (prime-factors n)))\n        (if (null? factors)\n            n\n\
    \            (max (car factors) (largest_prime_factor (cdr factors)))))))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (prime 1))\n    (cond ((= n 1) prime)\n          ((even? n) (loop (/ n 2) prime))\n\
    \          ((odd? n) (loop (* n 3) (* prime (quotient n 3))))\n          (else\
    \ (loop (quotient n 3) (* prime (quotient n 3))))))\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder why you didn't use `(define (largest_prime_factor\
    \ n) (let loop ((n n) (prime 1))\n  (cond ((= n 1) prime)\n        ((even? n)\
    \ (loop (/ n 2) prime))\n        ((odd? n) (loop (* n 3) (* prime (quotient n\
    \ 3))))\n        (else (loop (quotient n 3) (* prime (quotient n 3))))))` instead?\n\
    <|/ c |>\n<| c |>\nI thought that `(define (largest_prime_factor n) (let loop\
    \ ((n n) (prime 1))\n  (cond ((= n 1) prime)\n        ((even? n) (loop (/ n 2)\
    \ prime))\n        ((odd? n) (loop (* n 3) (* prime (quotient n 3))))\n      \
    \  (else (loop (quotient n 3) (* prime (quotient n 3))))))` would be more efficient\
    \ than `(define (largest_prime_factor n) (let loop ((n n) (prime 1))\n  (cond\
    \ ((= n 1) prime)\n        ((even? n) (loop (/ n 2) prime))\n        ((odd? n)\
    \ (loop (* n 3) (* prime (quotient n 3))))\n        (else (loop (quotient n 3)\
    \ (* prime (quotient n 3))))))` because `(define (largest_prime_factor n) (let\
    \ loop ((n n) (prime 1))\n  (cond ((= n 1) prime)\n        ((even? n) (loop (/\
    \ n 2) prime))\n        ((odd? n) (loop (* n 3) (* prime (quotient n 3))))\n \
    \       (else (loop (quotient n 3) (* prime (quotient n 3))))))` uses `let` instead\
    \ of `let*`.\n<|/ c |>\n<| c |>\nI guess it's because `(define (largest_prime_factor\
    \ n) (let loop ((n n) (prime 1))\n  (cond ((= n 1) prime", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (let loop ((n n) (p 2))\n    (cond ((= n 1) p)\n          ((=\
    \ (modulo n p) 0) (loop (quotient n p) (+ p 1)))\n          (else (loop (quotient\
    \ n p) (+ p 1))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (let loop ((n n) (prime (primes\
    \ n)))\n    (cond ((= n 1) prime)\n          ((= (modulo n prime) 0)\n       \
    \    (loop (quotient n prime) (quotient prime 2)))\n          (else\n        \
    \   (loop (quotient n prime) (quotient prime (+ prime 1))))))))\n", "  (cond [(=\
    \ n 1) 1]\n        [(= (modulo n 2) 0) (* n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (primes #{}))\n    (cond ((= n 1) (length\
    \ primes))\n          ((not (prime? (first primes))) (loop (first primes) primes))\n\
    \          ((prime? (first primes)) (loop (first primes) (cons (first primes)\
    \ primes)))\n          (else (loop (rest n) (cons (first primes) primes))))))\n",
  "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [(= n 4)\
    \ 4]\n        [(= n 5) 5]\n        [(= n 6) 6]\n        [(= n 7) 7]\n        [(=\
    \ n 8) 8]\n        [(= n 9) 9]\n        [(= n 10) 10]\n        [(= n 11) 11]\n\
    \        [(= n 12) 12]\n        [(= n 13) 13]\n        [(= n 14) 14]\n       \
    \ [(= n 15) 15]\n        [(= n 16) 16]\n        [(= n 17) 17]\n        [(= n 18)\
    \ 18]\n        [(= n 19) 19]\n        [(= n 20) 20]\n        [(= n 21) 21]\n \
    \       [(= n 22) 22]\n        [(= n 23) 23]\n        [(= n 24) 24]\n        [(=\
    \ n 25) 25]\n        [(= n 26) 26]\n        [(= n 27) 27]\n        [(= n 28) 28]\n\
    \        [(= n 29) 29]\n        [(= n 30) 30]\n        [(= n 31) 31]\n       \
    \ [(= n 32) 32]\n        [(= n 33) 33]\n        [(= n 34) 34]\n        [(= n 35)\
    \ 35]\n        [(= n 36) 36]\n        [(= n 37) 37]\n        [(= n 38) 38]\n \
    \       [(= n 39) 39]\n        [(= n 40) 40]\n        [(= n 41) 41]\n        [(=\
    \ n 42) 42]\n        [(= n 43) 43]\n        [(= n 44) 44]\n        [(= n 45) 45]\n\
    \        [(= n 46) 46]\n        [(= n 47) 47]\n        [(= n 48) 48]\n       \
    \ [(= n 49) 49]\n        [(= n 50) 50]\n        [(= n 51) 51]\n        [(= n 52)\
    \ 52]\n        [(= n 53) 53]\n        [(= n 54) 54]\n        [(= n 55) 55]\n \
    \       [(= n 56) 56]\n        [(= n 57) 57]\n        [(= n 58) 58]\n        [(=\
    \ n 59) 59", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (+ 2 (largest_prime_factor\
    \ (/ n 2)))]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop\
    \ ((n n) (prime (prime-factors n)))\n    (cond ((= n 1) prime)\n          ((=\
    \ (modulo n prime) 0) (loop (quotient n prime) (cons prime prime)))\n        \
    \  (else (loop (quotient n prime) (cons prime prime))))))\n", "  (let loop ((n\
    \ n) (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/ n p) (+ p 1)))\n\
    \          ((odd? n) (loop (* n p) (+ p 1))))))\n", "  (let loop ((n n) (prime\
    \ 1))\n    (cond ((= n 1) prime)\n          ((even? n) (loop (/ n 2) prime))\n\
    \          ((odd? n) (loop (* n 3) (* prime (/ n 2))))\n          (else (loop\
    \ (* n 3) (* prime (/ n 2))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| a |>\n\
    Here's a solution using Racket's built-in procedures for prime numbers and factorization:\n\
    <code>", "  (let loop ((n n) (max 1) (prime #t) (i 2))\n    (cond ((= i n) max)\n\
    \          ((= (modulo n prime) 0) prime)\n          ((= (modulo n prime) 1) (loop\
    \ (quotient n prime) (+ max 1) prime (+ i 1)))\n          (else (loop (quotient\
    \ n prime) max (not prime) (+ i 1))))))\n", "  (let loop ((n n) (p 2))\n    (cond\
    \ ((= n 1) p)\n          ((even? n) (loop (/ n p) (+ p 1)))\n          (else (loop\
    \ (* n p) (+ p 1))))))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (let\
    \ loop ((n n) (p 2))\n    (cond ((= n 1) p)\n          ((= (modulo n p) 0) (loop\
    \ (quotient n p) (+ p 1)))\n          (else (loop (quotient n p) p)))))\n", " \
    \ (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n          ((even? n)\
    \ (loop (/ n 2) prime))\n          (else (loop (* n prime) (+ prime (quotient\
    \ n prime)))))))\n", "  (let loop ((n n) (prime 1) (max 0))\n    (if (= n 1)\n\
    \        prime\n        (loop (quotient n prime) (quotient n prime) (max max)))))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (* n (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n)\
    \ (prime (make-prime (- n 1)))\n             (factors (list prime)))\n    (cond\
    \ [(= n 1) (if (= (prime-factor prime) 1) prime prime)]\n          [(prime-factor\
    \ prime)\n           (loop (- n 1) (make-prime (- n 1))\n                   (cons\
    \ (prime-factor prime) factors))]\n          [else\n           (loop (- n 1) (make-prime\
    \ (- n 1))\n                   (cons (prime-factor prime) factors))]\n       \
    \   )))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n      \
    \    ((even? n) (loop (/ n 2) prime))\n          ((odd? n) (loop (* n 3) prime))\n\
    \          (else (loop (* n prime) (+ prime (quotient n prime)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
