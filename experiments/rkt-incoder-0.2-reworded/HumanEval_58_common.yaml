name: HumanEval_58_common
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5 653)\n\
  ;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond [(null? l1) l2]\n        [(member (car l1) l2) (common (cdr\
    \ l1) l2)]\n        [else (common (cdr l1) l2)]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? x l1)) l2)) \n        (lambda\
    \ (x) (equal? x l1))))\n", "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<)))\n\
    \    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          (else (and (equal?\
    \ (first l1) (first l2))\n                    (common (rest l1) (rest l2))))))))\n",
  "  (let ([l1 (sort l1 '<)\n         l2 (sort l2 '<)])\n    (if (null? l1)\n    \
    \    (reverse l2)\n        (if (null? l2)\n            (reverse l1)\n        \
    \    (if (equal? (first l1) (first l2))\n                (common (rest l1) (rest\
    \ l2))\n                (common (first l1) (rest l2))))))))\n", "  (cond\n   \
    \ [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n  \
    \  [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons\
    \ (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)\n        >\n        >\n        >\n        >\n        >\n        >\n   \
    \     >\n        >\n        >\n        >\n        >\n        >\n        >\n  \
    \      >\n        >\n        >\n        >\n        >\n        >\n        >\n \
    \       >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) l2))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1)))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)\n        >\n        (lambda (x) (equal? (first l1) x))))\n", "  (cond\n\
    \    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (let ((l1 (sort l1 <))\n        (l2 (sort l2 <)))\n  \
    \  (cond ((null? l1) l2)\n          ((null? l2) l1)\n          (else (and (equal?\
    \ (first l1) (first l2))\n                    (common (rest l1) (rest l2))))))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2)\
    \ l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n   \
    \ [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) \n           \
    \            (remove-if-not (lambda (x) (equal? (first l2) x)) \n            \
    \                          l1))\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) \n                       l2))))\n", "  (let ((l1 (sort l1 '<))\n\
    \        (l2 (sort l2 '<))\n        (result '()))\n    (if (null? l1)\n      \
    \  result\n        (if (null? l2)\n            result\n            (if (equal?\
    \ (first l1) (first l2))\n                (common (rest l1) (rest l2))\n     \
    \           (common (first l1) (rest l2))))))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          l1)\n        (lambda (x y) (equal?\
    \ (first l1) y))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1)\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >", "  (sort (remove-duplicates \n \
    \         (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          l1)\
    \ '<))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first\
    \ l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n   \
    \     [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          l1))\n  )\n", "  (cond [(null? l1) l2]\n\
    \        [(member (car l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr\
    \ l1) l2)]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n        [(member\
    \ (car l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr l1) l2)]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n        [(member\
    \ (car l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr l1) l2)]))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty?\
    \ l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n  \
    \  [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1) '<))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n  \
    \  [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2)))\n    (else (cons (first l1) (common (rest\
    \ l1) (rest l2))))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty?\
    \ l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? x l1)) l2)) \n        (lambda\
    \ (x) (equal? x l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1))\n  )\n", "  (let loop\
    \ ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) (cons l2 acc)]\n\
    \      [(empty? l2) (cons l1 acc)]\n      [(equal? (first l1) (first l2)) (loop\
    \ (rest l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest\
    \ l2) (cons (first l1) acc))])))\n", "  (let ((l1 (sort l1 '<))\n        (l2 (sort\
    \ l2 '<)))\n    (if (null? l1)\n        (reverse l2)\n        (let ((head (car\
    \ l1))\n              (tail (cdr l1)))\n          (if (null? tail)\n         \
    \     (if (equal? (car l2) head)\n                  (list head)\n            \
    \      (list head (car l2))\n                  (list head (car l2) (car l1))\n\
    \                  (list head (car l2) (car l1) (cdr l2))\n                  (list\
    \ head (car l2) (car l1) (cdr l2) (cdr l1))\n                  (list head (car\
    \ l2) (car l1) (cdr l2) (cdr l1) (cdr l2))\n                  (list head (car\
    \ l2) (car l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1))\n                  (list head\
    \ (car l2) (car l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2))\n          \
    \        (list head (car l2) (car l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr\
    \ l2) (cdr l1))\n                  (list head (car l2) (car l1) (cdr l2) (cdr\
    \ l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2))\n                  (list head\
    \ (car l2) (car l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr\
    \ l2) (cdr l1))\n                  (list head (car l2) (car l1) (cdr l2) (cdr\
    \ l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2))\n      \
    \            (list head (car l2) (car l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1)\
    \ (cdr l2) (cdr l1) (cdr l2) (cdr l1) (cdr l2) (cdr l1))\n                  (list\
    \ head (car l2) (car ", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1) '<))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? x l1)) l2)\n          (remove-if-not (lambda (x) (equal? x l2))\
    \ l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n    \
    \      (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          l1))\n\
    \  )\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1)\
    \ acc]\n      [(empty? l2) acc]\n      [(equal? (first l1) (first l2)) (loop (rest\
    \ l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest l2)\
    \ (cons (first l1) acc))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l1)) l2)\n          <))\n  )\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) \n           \
    \            (remove-if-not (lambda (x) (equal? (first l2) x)) \n            \
    \                          l1))\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) \n                       (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) \n                                      l2))))\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution, but I wonder how it compares to my solution. My\
    \ solution uses `sort`, which has `O(n log n)` complexity, while yours uses `remove-duplicates`,\
    \ which has `O(n)` complexity. Do you know which one is better?\n<|/ c |>\n<|\
    \ c |>\nI haven't done any benchmarking, but I suspect that `remove-duplicates`\
    \ is faster, since it only needs to do one pass over the list. `sort` has to go\
    \ through each element and compare it to the other elements. `remove-duplicates`\
    \ only needs to go through the list once.\n<|/ c |>\n<| c |>\nI tested it on some\
    \ lists and `remove-duplicates` is faster. I'll post the results when I'm done\
    \ with my tests.\n<|/ c |>\n<| c |>\nI added my test results to the answer. `remove-duplicates`\
    \ is faster for some lists.\n<|/ c |>\n<| c |>\nI added my test results to the\
    \ answer. `remove-duplicates` is faster for some lists.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) l2))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? x l1)) l2))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ((l1 (sort\
    \ l1 '<))\n        (l2 (sort l2 '<))\n        (l1 (reverse l1))\n        (l2 (reverse\
    \ l2)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          (else\
    \ (let ((c (first l1))\n                       (d (first l2)))\n             \
    \     (if (equal? c d)\n                      (common (rest l1) (rest l2))\n \
    \                     (cons (c) (car l1))\n                      (cons (c) (car\
    \ l2))))))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n    \
    \      (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (car l1) x)) l2)\n          #:key\
    \ (lambda (x) (equal? (car l2) x)))))\n", "  (let ([l1 (sort l1)\n         l2\
    \ (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n      \
    \    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n         \
    \ [else (cons (first l1) (common (rest l1) l2))])))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond [(empty?\
    \ l1) l2]\n          [(empty? l2) l1]\n          [else (let ([c (first l1)\n \
    \                      c1 (first l2)])\n                   (if (equal? c c1)\n\
    \                       (common (rest l1) (rest l2))\n                       (cons\
    \ c (common (rest l1) l2))))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n\
    \    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n  \
    \  [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons\
    \ (first l1) (common (rest l1) l2))]))\n", "  (cond [(empty? l1) l2]\n       \
    \ [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (let ((l1 (sort l1 '<))\n      \
    \  (l2 (sort l2 '<))\n        (l3 (sort (append l1 l2) '<)))\n    (if (null? l1)\n\
    \        (reverse l3)\n        (if (null? l2)\n            (reverse l3)\n    \
    \        (if (equal? (first l1) (first l2))\n                (common (rest l1)\
    \ (rest l3))\n                (common (rest l3) (rest l1))))))))\n", "  (let ([l1\
    \ (sort l1)\n         l2 (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty?\
    \ l2) l1]\n          [else (if (equal? (first l1) (first l2))\n              \
    \    (common (rest l1) (rest l2))\n                  (cons (first l1) (common\
    \ (rest l1) (rest l2))))]))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty?\
    \ l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let loop\
    \ ((l1 l1) (l2 l2) (acc '()))\n    (cond ((null? l1) (cons l2 acc))\n        \
    \  ((null? l2) (cons l1 acc))\n          (else (loop (cdr l1) (cdr l2) (cons (car\
    \ l1) acc))))))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond\
    \ [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else (let ([c (first\
    \ l1)\n                        d (first l2)])\n                  (if (equal? c\
    \ d)\n                      (common (rest l1) (rest l2))\n                   \
    \   (cons c d))]))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (car l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (car l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n    \
    \    [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (cond [(null? l1) l2]\n        [(member (car l1) l2) (common (cdr l1) l2)]\n\
    \        [else (common (cdr l1) l2)]))\n", "  (cond\n    [(empty? l1) l2]\n  \
    \  [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n    ((null? l1) l2)\n   \
    \ ((null? l2) l1)\n    ((equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2)))\n    (else (cons (first l1) (common (rest l1) l2)))\n  )\n)\n", "  (let\
    \ loop ((l1 l1) (l2 l2) (acc '()))\n    (if (null? l1)\n        (reverse acc)\n\
    \        (loop (cdr l1) (car l2) (cons (car l1) acc)))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond [(null?\
    \ l1) l2]\n        [(member (car l1) l2)\n         (common (cdr l1) l2)]\n   \
    \     [else (common (cdr l1) l2)]))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ((l1 (sort l1 '<))\n \
    \       (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n\
    \          (else (and (equal? (first l1) (first l2))\n                    (common\
    \ (rest l1) (rest l2))))))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? x l1)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ x l2)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          l1)\n        >))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) l2))]))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n\
    \    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? x l1)) l2)\n          (remove-if-not (lambda (x) (equal? x l2))\
    \ l1))))\n", "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal?\
    \ (car l1) (car l2)) (common (cdr l1) (cdr l2)))\n    (else (cons (car l1) (common\
    \ (cdr l1) l2)))\n  )\n)\n", "  (cond [(null? l1) l2]\n        [(member (car l1)\
    \ l2) (common (cdr l1) l2)]\n        [else (common (cdr l1) l2)]))\n", "  (let\
    \ ((l1 (sort l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n  \
    \        ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n\
    \                    (common (rest l1) (rest l2))))))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) l2))]))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n\
    \    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else (if (equal?\
    \ (first l1) (first l2))\n                  (common (rest l1) (rest l2))\n   \
    \               (cons (first l1) (common (rest l1) (rest l2)))\n             \
    \     )])))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first\
    \ l1) (common (rest l1) l2))]))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) l2))]))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first\
    \ l1) (common (rest l1) l2))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty?\
    \ l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n   \
    \ [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          l1) '<))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)\n        >\n        >\n        >\n        >\n        >\n        >\n   \
    \     >\n        >\n        >\n        >\n        >\n        >\n        >\n  \
    \      >\n        >\n        >\n        >\n        >\n        >\n        >\n \
    \       >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          ((equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2)))\n          (else (cons (first l1) (common (rest l1) (rest\
    \ l2))))))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let ([l1 (sort\
    \ l1)\n         l2 (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty?\
    \ l2) l1]\n          [else (let ([head (first l1)\n                        tail\
    \ (rest l1)])\n                    (cond [(empty? tail) l2]\n                \
    \          [else (let ([tail1 (first l2)\n                                   \
    \    tail2 (rest l2)])\n                                  (cond [(empty? tail2)\
    \ l1]\n                                        [else (cond [(equal? head tail1)\
    \ (cons head tail2)]\n                                                  [else\
    \ (cons head (common tail1 tail2))]))]))]))]))\n", "  (cond [(empty? l1) l2]\n\
    \        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) l2))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<))\n        (l1 (remove-duplicates\
    \ l1))\n        (l2 (remove-duplicates l2)))\n    (cond ((null? l1) l2)\n    \
    \      ((null? l2) l1)\n          (else (cons (car l1) (common (cdr l1) (cdr l2)))))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1)))\n", "  (let ([l1 (sort\
    \ l1)\n         l2 (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty?\
    \ l2) l1]\n          [else (if (equal? (first l1) (first l2))\n              \
    \    (common (rest l1) (rest l2))\n                  (cons (first l1) (common\
    \ (rest l1) (rest l2)))\n                  )\n          )]))\n", "  (let ((l1\
    \ (sort l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n     \
    \     ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n \
    \                   (common (rest l1) (rest l2))))))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1) '<))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n       \
    \ [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? x l1)) l2)) \n        (lambda (x) (< (length x) 1))))\n",
  "  (let ((l1 (sort l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n\
    \                    (common (rest l1) (rest l2))))))))\n", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n    ((null? l1) l2)\n   \
    \ ((null? l2) l1)\n    ((equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2)))\n    (else (cons (first l1) (common (rest l1) l2)))\n  )\n)\n", "  (let\
    \ loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) acc]\n     \
    \ [(empty? l2) acc]\n      [(equal? (first l1) (first l2)) (loop (rest l1) (rest\
    \ l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest l2) (cons (first\
    \ l1) acc))])))\n", "  (let ((l1 (sort l1 <))\n        (l2 (sort l2 <))\n    \
    \    (l1 (reverse l1))\n        (l2 (reverse l2))\n        (l1 (remove l1 l2))\n\
    \        (l2 (remove l2 l1)))\n    (cond ((null? l1) l2)\n          ((null? l2)\
    \ l1)\n          (else (append (remove l1 l2) (remove l2 l1))))))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n\
    \    (cond [(null? l1) l2]\n          [(null? l2) l1]\n          [(equal? (first\
    \ l1) (first l2)) (common (rest l1) (rest l2))]\n          [else (cons (first\
    \ l1) (common (rest l1) l2))])))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n\
    \    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n\
    \    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n       \
    \ [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (if (null? l1)\n        (reverse\
    \ l2)\n        (if (null? l2)\n            (reverse l1)\n            (let ([i\
    \ (first l1)\n                   j (first l2)])\n              (if (equal? i j)\n\
    \                  (common (rest l1) (rest l2))\n                  (cons (first\
    \ l1) (common (rest l1) (rest l2)))))))\n    (if (equal? l1 l2)\n        (reverse\
    \ l1)\n        (reverse l2))))\n", "  (let ((l1 (sort l1 <))\n        (l2 (sort\
    \ l2 <)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          ((equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2)))\n          (else (cons\
    \ (first l1) (common (rest l1) l2))))))\n", "  (cond\n    [(empty? l1) l2]\n \
    \   [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l1 '<)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          ((equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2)))\n          (else (cons (first l1) (common (rest l1) (rest\
    \ l2))))))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n  \
    \  [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\
    \ [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<))\n\
    \        (l1 (reverse l1))\n        (l2 (reverse l2)))\n    (cond ((null? l1)\
    \ l2)\n          ((null? l2) l1)\n          (else (let ((c (car l1))\n       \
    \                (c2 (car l2))\n                       (l1 (cdr l1))\n       \
    \                (l2 (cdr l2)))\n                  (cond ((= c c2) (common (cdr\
    \ l1) (cdr l2)))\n                        (else (cons (car l1) (common (cdr l1)\
    \ (cdr l2)))))))))\n", "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n  \
    \  ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n    (else (cons\
    \ (first l1) (common (rest l1) (rest l2))))))\n", "  (let ([l1 (sort l1 '<)]\n\
    \        [l2 (sort l2 '<)])\n    (cond [(empty? l1) l2]\n          [(empty? l2)\
    \ l1]\n          [else (if (equal? (first l1) (first l2))\n                  (common\
    \ (rest l1) (rest l2))\n                  (cons (first l1) (common (rest l1) (rest\
    \ l2))))]))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n      \
    \  [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n   \
    \ [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ l2))]))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond ((null? l1)\
    \ (cons l2 acc))\n          ((null? l2) (cons l1 acc))\n          (else (loop\
    \ (car l1) (car l2) (cons (car l1) acc))))))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (acc '()))\n    (cond ((null? l1) acc)\n          ((null? l2) acc)\n       \
    \   ((equal? (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first l1)\
    \ acc)))\n          (else (loop (rest l1) (rest l2) (cons (first l2) acc))))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n\
    \    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) l2))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n        [(member (first\
    \ l1) l2) (common (rest l1) l2)]\n        [else (common (rest l1) l2)]))\n", " \
    \ (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n\
    \      [(empty? l1) acc]\n      [(empty? l2) acc]\n      [(equal? (first l1) (first\
    \ l2)) (loop (rest l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest\
    \ l1) (rest l2) (cons (first l1) acc))])))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n\
    \    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n\
    \      [(empty? l1) (append acc (reverse l2))]\n      [(empty? l2) (append acc\
    \ (reverse l1))]\n      [(equal? (first l1) (first l2)) (loop (rest l1) (rest\
    \ l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest l2) (cons (first\
    \ l1) acc))])))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n   \
    \ [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons\
    \ (first l1) (common (rest l1) (rest l2)))]))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (acc '()))\n    (cond\n      [(empty? l1) (cons l2 acc)]\n      [(empty? l2)\
    \ (cons l1 acc)]\n      [(equal? (first l1) (first l2)) (loop (rest l1) (rest\
    \ l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest l2) (cons (first\
    \ l1) acc))])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
