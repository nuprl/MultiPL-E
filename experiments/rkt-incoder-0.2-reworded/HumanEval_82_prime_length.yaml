name: HumanEval_82_prime_length
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a string and returns #t if\
  \ the string\n;; length is a prime number or #f otherwise\n;; Examples\n;; >>> (prime_length\
  \ \"Hello\")\n;; #t\n;; >>> (prime_length \"abcdcba\")\n;; #t\n;; >>> (prime_length\
  \ \"kittens\")\n;; #t\n;; >>> (prime_length \"orange\")\n;; #f\n(define (prime_length\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n\
  \    (check-equal? (candidate \"Hello\") #t)\n    (check-equal? (candidate \"abcdcba\"\
  ) #t)\n    (check-equal? (candidate \"kittens\") #t)\n    (check-equal? (candidate\
  \ \"orange\") #f)\n    (check-equal? (candidate \"wow\") #t)\n    (check-equal?\
  \ (candidate \"world\") #t)\n    (check-equal? (candidate \"MadaM\") #t)\n    (check-equal?\
  \ (candidate \"Wow\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal?\
  \ (candidate \"HI\") #t)\n    (check-equal? (candidate \"go\") #t)\n    (check-equal?\
  \ (candidate \"gogo\") #f)\n    (check-equal? (candidate \"aaaaaaaaaaaaaaa\") #f)\n\
  \    (check-equal? (candidate \"Madam\") #t)\n    (check-equal? (candidate \"M\"\
  ) #f)\n    (check-equal? (candidate \"0\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(string? string) #t]\n        [(= (string-length string) 1)\
    \ #t]\n        [(= (modulo (string-length string) 2) 0) #f]\n        [else (prime_length\
    \ (substring string 0 (string-length string))) #t]))\n", "  (let loop ((i 0) (primes\
    \ #{}))\n    (if (= i string.length)\n        #t\n        (let ((j (modulo (length\
    \ string) i)))\n          (if (member j primes)\n              (loop (+ i 1) (conj\
    \ primes j))\n              (loop (+ i 1) primes))))))\n", "  (let loop ((i 0)\
    \ (primes #{}))\n    (if (< i string.length)\n        (let ((char (char-code string\
    \ i)))\n          (if (prime? (char-code char))\n              (loop (+ i 1) (cons\
    \ char primes))\n              (loop (+ i 1) primes)))))\n  (length (sort primes\
    \ string)))\n", "  (cond [(= (string-length string) 1) #t]\n        [else (prime_length\
    \ (substring string 0 (string/remainder string 2)))]))\n", "  (cond [(string?\
    \ string) #t]\n        [(= (string-length string) 1) #t]\n        [(= (modulo\
    \ (string-length string) 2) 1) #f]\n        [else (prime_length (substring string\
    \ 0 (string-length string)))]))\n", "  (define (prime? n)\n    (= (modulo n 2)\
    \ 0))\n  (define (prime-length n)\n    (if (prime? n)\n        (+ 1 (prime-length\
    \ (+ n 1)))))\n  (prime-length string))\n", "  (cond [(string? string) (= (string-length\
    \ string) 0)]\n        [else (= (length string) 1)\n              (prime? (string-to-list\
    \ string))]))\n", "  (cond\n    [(empty? string) #f]\n    [(= (length string)\
    \ 1) #t]\n    [(= (length string) 2) #t]\n    [(= (length string) 3) #t]\n   \
    \ [else (let ([i (first string)])\n            (cond\n              [(= (modulo\
    \ i 2) 0) #t]\n              [(= (modulo i 3) 0) #t]\n              [(= (modulo\
    \ i 5) 0) #t]\n              [(= (modulo i 7) 0) #t]\n              [(= (modulo\
    \ i 11) 0) #t]\n              [(= (modulo i 13) 0) #t]\n              [(= (modulo\
    \ i 17) 0) #t]\n              [(= (modulo i 19) 0) #t]\n              [(= (modulo\
    \ i 23) 0) #t]\n              [(= (modulo i 29) 0) #t]\n              [(= (modulo\
    \ i 31) 0) #t]\n              [(= (modulo i 37) 0) #t]\n              [(= (modulo\
    \ i 41) 0) #t]\n              [(= (modulo i 43) 0) #t]\n              [(= (modulo\
    \ i 47) 0) #t]\n              [(= (modulo i 53) 0) #t]\n              [(= (modulo\
    \ i 59) 0) #t]\n              [(= (modulo i 61) 0) #t]\n              [(= (modulo\
    \ i 67) 0) #t]\n              [(= (modulo i 71) 0) #t]\n              [(= (modulo\
    \ i 73) 0) #t]\n              [(= (modulo i 79) 0) #t]\n              [(= (modulo\
    \ i 83) 0) #t]\n              [(= (modulo i 89) 0) #t]\n              [(= (modulo\
    \ i 97) 0) #t]\n              [(= (modulo i 101) 0) #t]\n              [(= (modulo\
    \ i 107) 0) #t]\n              [(= (modulo i 109) 0) #t]\n              [(= (modulo\
    \ i 113) 0) #t]\n              [(= (modulo i 127) 0) #t]\n              [(= (modulo\
    \ i 131) 0) #t]\n              [(= (modulo i 137) 0) #t]\n              [(= (modulo\
    \ i ", "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string->number\
    \ string) 2) #t) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ (string->string (string-length string))))))))\n", "  (cond [(= (string-length\
    \ string) 1) #t]\n        [(= (modulo (string->number string) 2) 0) #f]\n    \
    \    [else (prime_length (substring string 0 (string->number string)))]))\n",
  "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string-length string)\
    \ 2) 0) #f]\n        [else (prime_length (substring string 0 (string-length string)))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(= (length string) 1) #t]\n    [(= (length\
    \ string) 2) #t]\n    [else (let ([i (first string)])\n            (cond\n   \
    \           [(= (mod i 2) 0) #t]\n              [(= (mod i 3) 0) #t]\n       \
    \       [(= (mod i 5) 0) #t]\n              [(= (mod i 7) 0) #t]\n           \
    \   [(= (mod i 11) 0) #t]\n              [(= (mod i 13) 0) #t]\n             \
    \ [(= (mod i 17) 0) #t]\n              [(= (mod i 19) 0) #t]\n              [(=\
    \ (mod i 23) 0) #t]\n              [(= (mod i 29) 0) #t]\n              [(= (mod\
    \ i 31) 0) #t]\n              [(= (mod i 37) 0) #t]\n              [(= (mod i\
    \ 41) 0) #t]\n              [(= (mod i 43) 0) #t]\n              [(= (mod i 47)\
    \ 0) #t]\n              [(= (mod i 53) 0) #t]\n              [(= (mod i 59) 0)\
    \ #t]\n              [(= (mod i 61) 0) #t]\n              [(= (mod i 67) 0) #t]\n\
    \              [(= (mod i 71) 0) #t]\n              [(= (mod i 73) 0) #t]\n  \
    \            [(= (mod i 79) 0) #t]\n              [(= (mod i 83) 0) #t]\n    \
    \          [(= (mod i 89) 0) #t]\n              [(= (mod i 97) 0) #t]\n      \
    \        [(= (mod i 101) 0) #t]\n              [(= (mod i 103) 0) #t]\n      \
    \        [(= (mod i 107) 0) #t]\n              [(= (mod i 109) 0) #t]\n      \
    \        [(= (mod i 113) 0) #t]\n              [(= (mod i 117) 0) #t]\n      \
    \        [(= (mod i 121) 0) #t]\n              [(= (mod i 123) 0) #t]\n      \
    \        [(= (mod i 127) 0) #t]\n              [(= (mod i 129) 0) #t]\n      \
    \        [(= (mod i 131) 0) #t]", "  (cond [(string? string) #t]\n        [(=\
    \ (string-length string) 1) #t]\n        [(= (modulo (string-length string) 2)\
    \ 0) #f]\n        [else (prime_length (substring string 0 (string-length string)))\
    \ #t]))\n", "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string->number\
    \ string) 2) 0) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ string)))]))\n", "  (cond [(string? string) (prime-length (string-length string))]\n\
    \        [else #f]))\n", "  (cond [(string? string) #t]\n        [(= (string-length\
    \ string) 1) #t]\n        [(= (modulo (string-length string) 2) 1) #t]\n     \
    \   [else #f]))\n", "  (cond [(= (string-length string) 1)\n         #t]\n   \
    \     [(= (modulo (string-length string) 2)\n             (string-length string))\n\
    \         #t]\n        [else\n         (prime_length (substring string 0 (string-length\
    \ string)))]))\n", "  (define (prime? n)\n    (= (modulo n 2) 1))\n  (define (prime-length\
    \ n)\n    (if (prime? n)\n        (+ 1 (prime-length (+ n 1)))))\n  (prime-length\
    \ (string-length string)))\n", "  (cond [(string? string) (prime_length (string->list\
    \ string))]\n        [else (= (string-length string) 1)\n              (= (string-ref\
    \ string 0) 0)\n              (prime_length (string->list string))]))\n", "  (define\
    \ (prime? n)\n    (= (modulo n 2) 1))\n  (define (primes?)\n    (map prime? string))\n\
    \  (or (null? string) (null? (primes?))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
