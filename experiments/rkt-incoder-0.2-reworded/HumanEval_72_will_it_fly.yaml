name: HumanEval_72_will_it_fly
language: rkt
prompt: "#lang racket\n\n;; Write a function that returns #t if the object q will\
  \ fly, and #f otherwise.\n;; The object q will fly if it's balanced (it is a palindromic\
  \ list) and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n;; Example:\n;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3\
  \ 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum possible\
  \ weight.\n;; >>> (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the\
  \ maximum possible weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n\
  ;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define\
  \ (will_it_fly q w)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n\
  \    (check-equal? (candidate (list 3 2 3) 9) #t)\n    (check-equal? (candidate\
  \ (list 1 2) 5) #f)\n    (check-equal? (candidate (list 3) 5) #t)\n    (check-equal?\
  \ (candidate (list 3 2 3) 1) #f)\n    (check-equal? (candidate (list 1 2 3) 6) #f)\n\
  \    (check-equal? (candidate (list 5) 5) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond [(null? q) #f]\n        [(> (length q) w) #f]\n        [(equal?\
    \ (car q) (cadr q)) #t]\n        [else (will_it_fly (cdr q) (+ w 1))]))\n", " \
    \ (cond [(empty? q) #f]\n        [(equal? (first q) (reverse (first q))) #t]\n\
    \        [(< (+ (first q) (first q)) w) #f]\n        [else (will_it_fly (rest\
    \ q) w)]\n        ))\n", "  (cond\n    [(empty? q) #f]\n    [(equal? (first q)\
    \ (reverse (first q))) #t]\n    [(< (sum (rest q)) w) #f]\n    [else #t]))\n",
  "  (cond ((null? q) #f)\n        ((palindrome q) (< (length q) w))\n        (else\
    \ #f)))\n", "  (cond\n    [(empty? q) #f]\n    [(equal? (first q) (reverse (first\
    \ q))) #t]\n    [(< (+ (first q) (second q)) w) #f]\n    [else (will_it_fly (rest\
    \ q) w)]))\n", "  (cond [(empty? q) #f]\n        [(equal? (first q) (reverse (first\
    \ q))) #f]\n        [(< (+ (first q) (first q)) w) #f]\n        [else #t]))\n",
  "  (cond [(null? q) #f]\n        [(< (car q) w) #f]\n        [(> (car q) w) #t]\n\
    \        [(= (car q) (cadr q)) (and (will_it_fly (cddr q) w))]\n        [else\
    \ (will_it_fly (cddr q) w)]))\n", "  (cond\n    [(empty? q) #f]\n    [(equal?\
    \ (first q) (reverse (first q))) #f]\n    [(< (sum (rest q)) w) #f]\n    [else\
    \ #t]))\n", "  (cond ((null? q) #f)\n        ((palindrome q) (<= (sum (reverse\
    \ q)) w))\n        (else #f)))\n", "  (cond\n    [(empty? q) #f]\n    [(equal?\
    \ (first q) (reverse (first q))) #t]\n    [(< (sum (rest q)) w) #f]\n    [else\
    \ #f]))\n", "  (cond ((null? q) #f)\n        ((palindrome q) (<= (sum (reverse\
    \ q)) w))\n        (else #f)))\n", "  (cond [(null? q) #f]\n        [(> (length\
    \ q) w) #f]\n        [(equal? (car q) (cadr q)) #t]\n        [else (will_it_fly\
    \ (cdr q) (+ w car q))]))\n", "  (cond\n    [(empty? q) #f]\n    [(equal? (car\
    \ q) (cadr q)) #t]\n    [(< (car q) w) #f]\n    [(< (+ (car q) (cadr q)) w) #t]\n\
    \    [else (will_it_fly (cdr q) w)]))\n", "  (cond [(empty? q) #f]\n        [(equal?\
    \ (first q) (reverse (first q))) #f]\n        [(< (sum (rest q)) w) #f]\n    \
    \    [else #t]))\n", "  (cond\n    [(empty? q) #f]\n    [(equal? (first q) (reverse\
    \ (first q))) #t]\n    [(< (sum (rest q)) w) #f]\n    [else #t]))\n", "  (cond\n\
    \    [(empty? q) #f]\n    [(equal? (first q) (reverse (first q)))\n     (< (sum\
    \ (rest q)) w)]\n    [else #f]))\n", "  (cond\n    [(empty? q) #f]\n    [(equal?\
    \ (first q) (reverse (first q)))\n     (< (+ (first q) (second q)) w)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? q) #f]\n    [(equal? (first q) (reverse (first\
    \ q))) #t]\n    [else (< (+ (first q) (first q)) w) will_it_fly (rest q) w]\n\
    \  )\n)\n", "  (cond ((null? q) #f)\n        ((palindrome q) (<= (sum (reverse\
    \ q)) w))\n        (else #f)))\n", "  (cond\n    [(empty? q) #f]\n    [(equal?\
    \ (first q) (reverse (first q))) #f]\n    [(< (sum (rest q)) w) #f]\n    [else\
    \ #t]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
