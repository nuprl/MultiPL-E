name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (null? (cdr numbers))\n            (list max)\n            (let ((next-max\
    \ (car numbers)))\n              (if (> max next-max)\n                  (list\
    \ max)\n                  (list max next-max)))))\n        (rolling_max (cdr numbers))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (cdr numbers)))\n        (if (null? max-so-far-index)\n\
    \            (cons max-so-far max-so-far)\n            (let ((next-max-so-far\
    \ (car max-so-far-index))\n                  (next-max-so-far-index (cdr max-so-far-index)))\n\
    \              (if (null? next-max-so-far-index)\n                  (cons max-so-far\
    \ max-so-far)\n                  (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                        (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                    (if (null? next-max-so-far-index)\n                     \
    \   (cons max-so-far max-so-far)\n                        (let ((next-max-so-far\
    \ (car next-max-so-far-index))\n                              (next-max-so-far-index\
    \ (cdr next-max-so-far-index)))\n                          (if (null? next-max-so-far-index)\n\
    \                              (cons max-so-far max-so-far)\n                \
    \              (let ((next-max-so-far (car next-max-so-far-index))\n         \
    \                           (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                (if (null? next-max-so-far-index)\n         \
    \                           (cons max-so-far max-so-far)\n                   \
    \                 (let ((next-max-so-far (car next-max-so-far-index))\n      \
    \                                    (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                      (if (null? next-max-so-far-index)\n   \
    \                                       (cons max-so-far max-so-far)\n       \
    \                                   (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                                                (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                            (if (null? next-max-so-far-index)\n\
    \                                                (cons max-so-far max-so-far)\n\
    \                                                (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                                                      ", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (if (> (car\
    \ roll) max)\n                  (cons max roll)\n                  (rolling_max\
    \ (cdr roll))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers)\n            (max-so-far-prev numbers))\n        (if (null? (cdr numbers))\n\
    \            (cons (car numbers) max-so-far)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car max-so-far) (car next))\n      \
    \            (cons (car max-so-far) max-so-far)\n                  (cons (car\
    \ next) max-so-far)))))\n        (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ numbers))))\n              (if (> (car next) max)\n                  (list max)\n\
    \                  (cons next max)))))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let loop ((numbers numbers)\n             (result '()))\n \
    \   (if (null? numbers)\n        result\n        (loop (rest numbers)\n      \
    \        (cons (max result (first numbers))\n                    (loop (rest numbers)\n\
    \                          result))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond\n      [(empty? numbers) (list max)]\n   \
    \   [(> (first numbers) max) (loop (rest numbers) (first numbers))]\n      [else\
    \ (loop (rest numbers) (max max (first numbers)))]\n      )))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (cdr numbers)))\n        (if (> max-so-far max-so-far-index)\n            (cons\
    \ max-so-far numbers)\n            (rolling_max (cdr numbers))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr max-list))))\n              (cons (max\
    \ next)\n                    (cons (car max-list)\n                          max-list))))))\
    \ ; #lang racket\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max)))\n        (if (null? rolling_max_list)\n           \
    \ max\n            (rolling_max_list (cdr rolling_max_list)))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n     \
    \   max\n        (loop (rest numbers)\n              (cond ((> max number) (cons\
    \ max numbers))\n                    ((< max number) (loop (rest numbers) number))\n\
    \                    (else (loop (rest numbers) max))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far\
    \ (rest max-so-far)))\n        (if (null? max-so-far)\n            (cons (car\
    \ max-so-far) (rolling_max (cdr max-so-far)))\n            (let ((current (car\
    \ max-so-far))\n                  (next-max (car max-so-far)))\n             \
    \ (if (> (car max-so-far) next-max)\n                  (cons current (rolling_max\
    \ (cdr max-so-far)))\n                  (cons next-max (rolling_max (cdr max-so-far))))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max-element (car numbers))\n     \
    \         (max-list (cons max-element max-list)))\n          (loop (cdr numbers)\n\
    \                (cons max-element max-list))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond\n      [(null? numbers) (list max)]\n    \
    \  [(> (car numbers) max) (loop (cdr numbers) (car numbers))]\n      [else (loop\
    \ (cdr numbers) max)])))\n", "  (let loop ((numbers numbers)\n             (max\
    \ #f)\n             (max-list '()))\n    (cond ((null? numbers) max-list)\n  \
    \        ((< max numbers) (loop (rest numbers) (max numbers) (cons max max-list)))\n\
    \          (else (loop (rest numbers) (max numbers) max-list))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers) max)\n\
    \          ((> (car numbers) max) max)\n          (else (loop (cdr numbers)\n\
    \                       (cons (car numbers) max)))))\n  max)\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((max (max max roll)))\n                    (if\
    \ (null? roll)\n                        (list max)\n                        (let\
    \ ((max (max max roll)))\n                          (if (null? roll)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max roll)))\n                                (if (null? roll)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max roll)))\n                                      (if (null? roll)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max roll)))\n                           \
    \                 (if (null? roll)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max roll)))\n                                                  (if (null?\
    \ roll)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max roll)))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max roll)))\n                                                         \
    \           (if (null? roll)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max roll)))\n              \
    \                                                            (if (null? roll)\n\
    \                                                                            \
    \  (list max)\n                                                              \
    \                (let ((max (max max roll)))\n                               \
    \                                                 (if (null? roll)\n         \
    \                                                                           (list\
    \ max)\n                                                                     \
    \               (let ((max (max max roll)))\n                                \
    \                                                      (if (null? roll)\n    \
    \                                                                            \
    \          (list max)\n                                                      \
    \                                    (let ((max (max max roll)))\n           \
    \                                                                            \
    \     (if (null? roll)\n                                                     \
    \                                           (list max)\n                     \
    \                                                                           (let\
    \ ((max (max max roll)))\n                                                   \
    \                                               (if (null? roll)\n           \
    \                                                                            \
    \               (list max)\n                                                 \
    \                                                     (let ((max (max max roll)))\n\
    \                                                                            \
    \                            (if (null? roll)\n                              \
    \                                                                            \
    \  (list max)\n                                                              \
    \                                              (let ((max (max max roll)))\n \
    \                                                                            \
    \                                 (if (null? roll)\n                         \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                                               (let ((max (max\
    \ max roll)))\n                                                              \
    \                                                      (if (null? roll)\n    \
    \                                                                            \
    \                                        (list max)\n                        \
    \                                                                            \
    \                    (let ((max (max max roll)))\n                           \
    \                                                                            \
    \                   (if (null? roll)\n                                       \
    \                         ", "  (cond [(empty? numbers) empty]\n        [(> (first\
    \ numbers) (first max-roll)) (cons (first numbers) max-roll)]\n        [else (rolling_max\
    \ (rest numbers))]))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
