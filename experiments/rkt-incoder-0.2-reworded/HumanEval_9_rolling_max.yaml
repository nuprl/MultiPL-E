name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (null? (cdr numbers))\n            (list max)\n            (let ((next-max\
    \ (car numbers)))\n              (if (> max next-max)\n                  (list\
    \ max)\n                  (list max next-max)))))\n        (rolling_max (cdr numbers))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (cdr numbers)))\n        (if (null? max-so-far-index)\n\
    \            (cons max-so-far max-so-far)\n            (let ((next-max-so-far\
    \ (car max-so-far-index))\n                  (next-max-so-far-index (cdr max-so-far-index)))\n\
    \              (if (null? next-max-so-far-index)\n                  (cons max-so-far\
    \ max-so-far)\n                  (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                        (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                    (if (null? next-max-so-far-index)\n                     \
    \   (cons max-so-far max-so-far)\n                        (let ((next-max-so-far\
    \ (car next-max-so-far-index))\n                              (next-max-so-far-index\
    \ (cdr next-max-so-far-index)))\n                          (if (null? next-max-so-far-index)\n\
    \                              (cons max-so-far max-so-far)\n                \
    \              (let ((next-max-so-far (car next-max-so-far-index))\n         \
    \                           (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                (if (null? next-max-so-far-index)\n         \
    \                           (cons max-so-far max-so-far)\n                   \
    \                 (let ((next-max-so-far (car next-max-so-far-index))\n      \
    \                                    (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                      (if (null? next-max-so-far-index)\n   \
    \                                       (cons max-so-far max-so-far)\n       \
    \                                   (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                                                (next-max-so-far-index (cdr next-max-so-far-index)))\n\
    \                                            (if (null? next-max-so-far-index)\n\
    \                                                (cons max-so-far max-so-far)\n\
    \                                                (let ((next-max-so-far (car next-max-so-far-index))\n\
    \                                                      ", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (if (> (car\
    \ roll) max)\n                  (cons max roll)\n                  (rolling_max\
    \ (cdr roll))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers)\n            (max-so-far-prev numbers))\n        (if (null? (cdr numbers))\n\
    \            (cons (car numbers) max-so-far)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car max-so-far) (car next))\n      \
    \            (cons (car max-so-far) max-so-far)\n                  (cons (car\
    \ next) max-so-far)))))\n        (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ numbers))))\n              (if (> (car next) max)\n                  (list max)\n\
    \                  (cons next max)))))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let loop ((numbers numbers)\n             (result '()))\n \
    \   (if (null? numbers)\n        result\n        (loop (rest numbers)\n      \
    \        (cons (max result (first numbers))\n                    (loop (rest numbers)\n\
    \                          result))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond\n      [(empty? numbers) (list max)]\n   \
    \   [(> (first numbers) max) (loop (rest numbers) (first numbers))]\n      [else\
    \ (loop (rest numbers) (max max (first numbers)))]\n      )))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (cdr numbers)))\n        (if (> max-so-far max-so-far-index)\n            (cons\
    \ max-so-far numbers)\n            (rolling_max (cdr numbers))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr max-list))))\n              (cons (max\
    \ next)\n                    (cons (car max-list)\n                          max-list))))))\
    \ ; #lang racket\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max)))\n        (if (null? rolling_max_list)\n           \
    \ max\n            (rolling_max_list (cdr rolling_max_list)))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n     \
    \   max\n        (loop (rest numbers)\n              (cond ((> max number) (cons\
    \ max numbers))\n                    ((< max number) (loop (rest numbers) number))\n\
    \                    (else (loop (rest numbers) max))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far\
    \ (rest max-so-far)))\n        (if (null? max-so-far)\n            (cons (car\
    \ max-so-far) (rolling_max (cdr max-so-far)))\n            (let ((current (car\
    \ max-so-far))\n                  (next-max (car max-so-far)))\n             \
    \ (if (> (car max-so-far) next-max)\n                  (cons current (rolling_max\
    \ (cdr max-so-far)))\n                  (cons next-max (rolling_max (cdr max-so-far))))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max-element (car numbers))\n     \
    \         (max-list (cons max-element max-list)))\n          (loop (cdr numbers)\n\
    \                (cons max-element max-list))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond\n      [(null? numbers) (list max)]\n    \
    \  [(> (car numbers) max) (loop (cdr numbers) (car numbers))]\n      [else (loop\
    \ (cdr numbers) max)])))\n", "  (let loop ((numbers numbers)\n             (max\
    \ #f)\n             (max-list '()))\n    (cond ((null? numbers) max-list)\n  \
    \        ((< max numbers) (loop (rest numbers) (max numbers) (cons max max-list)))\n\
    \          (else (loop (rest numbers) (max numbers) max-list))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers) max)\n\
    \          ((> (car numbers) max) max)\n          (else (loop (cdr numbers)\n\
    \                       (cons (car numbers) max)))))\n  max)\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((max (max max roll)))\n                    (if\
    \ (null? roll)\n                        (list max)\n                        (let\
    \ ((max (max max roll)))\n                          (if (null? roll)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max roll)))\n                                (if (null? roll)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max roll)))\n                                      (if (null? roll)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max roll)))\n                           \
    \                 (if (null? roll)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max roll)))\n                                                  (if (null?\
    \ roll)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max roll)))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max roll)))\n                                                         \
    \           (if (null? roll)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max roll)))\n              \
    \                                                            (if (null? roll)\n\
    \                                                                            \
    \  (list max)\n                                                              \
    \                (let ((max (max max roll)))\n                               \
    \                                                 (if (null? roll)\n         \
    \                                                                           (list\
    \ max)\n                                                                     \
    \               (let ((max (max max roll)))\n                                \
    \                                                      (if (null? roll)\n    \
    \                                                                            \
    \          (list max)\n                                                      \
    \                                    (let ((max (max max roll)))\n           \
    \                                                                            \
    \     (if (null? roll)\n                                                     \
    \                                           (list max)\n                     \
    \                                                                           (let\
    \ ((max (max max roll)))\n                                                   \
    \                                               (if (null? roll)\n           \
    \                                                                            \
    \               (list max)\n                                                 \
    \                                                     (let ((max (max max roll)))\n\
    \                                                                            \
    \                            (if (null? roll)\n                              \
    \                                                                            \
    \  (list max)\n                                                              \
    \                                              (let ((max (max max roll)))\n \
    \                                                                            \
    \                                 (if (null? roll)\n                         \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                                               (let ((max (max\
    \ max roll)))\n                                                              \
    \                                                      (if (null? roll)\n    \
    \                                                                            \
    \                                        (list max)\n                        \
    \                                                                            \
    \                    (let ((max (max max roll)))\n                           \
    \                                                                            \
    \                   (if (null? roll)\n                                       \
    \                         ", "  (cond [(empty? numbers) empty]\n        [(> (first\
    \ numbers) (first max-roll)) (cons (first numbers) max-roll)]\n        [else (rolling_max\
    \ (rest numbers))]))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n     \
    \        (max 0))\n    (if (null? numbers)\n        (list max)\n        (let ((n\
    \ (car numbers))\n              (max (if (> max n) max n)))\n          (loop (cdr\
    \ numbers) max)))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0))\n    (if (null? numbers)\n        (reverse\
    \ max-list)\n        (let ((number (car numbers))\n              (max-so-far (+\
    \ max-so-far number)))\n          (loop (cdr numbers)\n                (cons (max\
    \ max-so-far number) max-list)\n                max-so-far))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((max (max max roll)))\n                    (if\
    \ (null? roll)\n                        (list max)\n                        (let\
    \ ((max (max max roll)))\n                          (if (null? roll)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max roll)))\n                                (if (null? roll)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max roll)))\n                                      (if (null? roll)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max roll)))\n                           \
    \                 (if (null? roll)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max roll)))\n                                                  (if (null?\
    \ roll)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max roll)))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max roll)))\n                                                         \
    \           (if (null? roll)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max roll)))\n              \
    \                                            (if (null? roll)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max roll)))\n \
    \                                                               (if (null? roll)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max roll)))\n                                                         \
    \             (if (null? roll)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max roll)))\n        \
    \                                                                    (if (null?\
    \ roll)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max roll)))\n                   \
    \                                                               (if (null? roll)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max roll)))\n               \
    \                                                                         (if\
    \ (null? roll)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ roll)))\n                                                                  \
    \                            (if (null? roll)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max roll)))\n                         \
    \                                                                           (if\
    \ (null? roll)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max roll)))\n                                        \
    \                                                                  (if (null?\
    \ roll)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (rolling_max_list (cons max rolling_max_list))))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (cond\n      [(null? numbers)\
    \ (list max)]\n      [(> max numbers) (list max)]\n      [else (loop (rest numbers)\
    \ (max numbers))]\n    )))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n     \
    \       (rolling_max_list (cons max rolling_max_list)))\n        (if (null? rolling_max_list)\n\
    \            (cons max rolling_max_list)\n            (cons (car rolling_max_list)\
    \ (rolling_max (cdr rolling_max_list)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (if (> (car\
    \ roll) max)\n                  (cons max roll)\n                  (rolling_max\
    \ (cons max (cdr roll))))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (tail (cdr numbers)))\n        (if (null?\
    \ tail)\n            (list max)\n            (let ((max (max max tail)))\n   \
    \           (if (null? tail)\n                  (list max)\n                 \
    \ (let ((max (max max tail)))\n                    (if (null? tail)\n        \
    \                (list max)\n                        (let ((max (max max tail)))\n\
    \                          (if (null? tail)\n                              (list\
    \ max)\n                              (let ((max (max max tail)))\n          \
    \                      (if (null? tail)\n                                    (list\
    \ max)\n                                    (let ((max (max max tail)))\n    \
    \                                  (if (null? tail)\n                        \
    \                  (list max)\n                                          (let\
    \ ((max (max max tail)))\n                                            (if (null?\
    \ tail)\n                                                (list max)\n        \
    \                                        (let ((max (max max tail)))\n       \
    \                                           (if (null? tail)\n               \
    \                                       (list max)\n                         \
    \                             (let ((max (max max tail)))\n                  \
    \                                      (if (null? tail)\n                    \
    \                                        (list max)\n                        \
    \                                    (let ((max (max max tail)))\n           \
    \                                                   (if (null? tail)\n       \
    \                                                           (list max)\n     \
    \                                                             (let ((max (max\
    \ max tail)))\n                                                              \
    \      (if (null? tail)\n                                                    \
    \                    (list max)\n                                            \
    \                            (let ((max (max max tail)))\n                   \
    \                                                       (if (null? tail)\n   \
    \                                                                           (list\
    \ max)\n                                                                     \
    \         (let ((max (max max tail)))\n                                      \
    \                                          (if (null? tail)\n                \
    \                                                                    (list max)\n\
    \                                                                            \
    \        (let ((max (max max tail)))\n                                       \
    \                                               (if (null? tail)\n           \
    \                                                                            \
    \   (list max)\n                                                             \
    \                             (let ((max (max max tail)))\n                  \
    \                                                                          (if\
    \ (null? tail)\n                                                             \
    \                                   (list max)\n                             \
    \                                                                   (let ((max\
    \ (max max tail)))\n                                                         \
    \                                         (if (null? tail)\n                 \
    \                                                                            \
    \         (list max)\n                                                       \
    \                                               (let ((max (max max tail)))\n\
    \                                                                            \
    \                            (if (null? tail)\n                              \
    \                                                                            \
    \  (list max)\n                                                              \
    \                                              (let ((max (max max tail)))\n \
    \                                                                            \
    \                                 (if (null? tail)\n                         \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                                               (let ((max (max\
    \ max tail)))\n                                                              \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \                                        (list max)\n                        \
    \                                                                            \
    \                    (let ((max (max max tail)))\n                           \
    \                                                                            \
    \                   (if (null? tail)\n                                       \
    \                         ", "  (let loop ((numbers numbers)\n             (max\
    \ '()))\n    (if (null? numbers)\n        max\n        (loop (rest numbers)\n\
    \              (cond ((> max number) (cons max numbers))\n                   \
    \ (else (loop (rest numbers)\n                               (max number)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if\
    \ (null? (cdr numbers))\n            (cons max-so-far numbers)\n            (let\
    \ ((max-so-far (car numbers)))\n              (if (> (car numbers) max-so-far)\n\
    \                  (cons max-so-far numbers)\n                  (rolling_max (cdr\
    \ numbers)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max roll)\n            (let ((max (car roll))\n              \
    \    (roll (cdr roll)))\n              (cons max (rolling_max (cons roll roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            (cons max rolling_max_list)\n\
    \            (cons (car rolling_max_list) rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((roll (cdr roll)))\n                    (if (null?\
    \ roll)\n                        (list max)\n                        (let ((max\
    \ (max max roll)))))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n\
    \            (cons max roll)\n            (if (> max roll)\n                (cons\
    \ max roll)\n                (rolling_max (cdr roll)))))\n      )\n    )\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((max (car numbers)))\n\
    \              (if (> (car numbers) max)\n                  (list max)\n     \
    \             (list max (car numbers))\n              )\n            )\n     \
    \   )\n      )\n    )\n)\n", "  (let loop ((numbers numbers)\n             (max\
    \ #f)\n             (max-list #f)\n             (max-index #f)\n             (max-index\
    \ #f))\n    (cond\n      [(empty? numbers) (list max)]\n      [(> (first numbers)\
    \ max) (loop (rest numbers) max max-list max-index max-index)]\n      [(< max-index\
    \ #f)\n       (loop (rest numbers) (first numbers) max-list (+ max-index 1) max-index)]\n\
    \      [else (loop (rest numbers) (first numbers) max-list (+ max-index 1) max-index)])))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (car numbers))\n            (max-so-far-so-far-so-far (cdr numbers)))\n    \
    \    (if (> max-so-far max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n \
    \       (if (null? roll)\n            (list max)\n            (let ((max (max\
    \ max roll)))\n              (if (null? roll)\n                  (list max)\n\
    \                  (let ((roll (cdr roll)))\n                    (if (null? roll)\n\
    \                        (list max)\n                        (let ((max (max max\
    \ roll)))))))))\n        (rolling_max (cdr numbers))))\n", "  (let loop ((numbers\
    \ numbers)\n             (result '()))\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (cons (max result (first numbers))\n\
    \                    result)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (let ((max (car roll))\n   \
    \               (roll (cdr roll)))\n              (if (null? roll)\n         \
    \         (cons max roll)\n                  (let ((max (car roll))\n        \
    \                (roll (cdr roll)))\n                    (if (null? roll)\n  \
    \                      (cons max roll)\n                        (let ((max (car\
    \ roll))\n                              (roll (cdr roll)))\n                 \
    \         (if (null? roll)\n                              (cons max roll)\n  \
    \                            (let ((max (car roll))\n                        \
    \            (roll (cdr roll)))\n                                (if (null? roll)\n\
    \                                    (cons max roll)\n                       \
    \             (let ((max (car roll))\n                                       \
    \   (roll (cdr roll)))\n                                      (if (null? roll)\n\
    \                                          (cons max roll)\n                 \
    \                         (let ((max (car roll))\n                           \
    \                     (roll (cdr roll)))\n                                   \
    \         (if (null? roll)\n                                                (cons\
    \ max roll)\n                                                (let ((max (car roll))\n\
    \                                                      (roll (cdr roll)))\n  \
    \                                                (if (null? roll)\n          \
    \                                            (cons max roll)\n               \
    \                                       (let ((max (car roll))\n             \
    \                                               (roll (cdr roll)))\n         \
    \                                           (if (null? roll)\n               \
    \                                         (cons max roll)\n                  \
    \                                      (let ((max (car roll))\n              \
    \                                                (roll (cdr roll)))\n        \
    \                                              (if (null? roll)\n            \
    \                                              (cons max roll)\n             \
    \                                             (let ((max (car roll))\n       \
    \                                                         (roll (cdr roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (cons max roll)\n \
    \                                                           (let ((max (car roll))\n\
    \                                                  (roll (cdr roll)))\n      \
    \                                                      (if (null? roll)\n    \
    \                                                            (cons max roll)\n\
    \                                                                (let ((max (car\
    \ roll))\n                                                        (roll (cdr roll)))\n\
    \                                                                (if (null? roll)\n\
    \                                                                    (cons max\
    \ roll)\n                                                                    (let\
    \ ((max (car roll))\n                                                        \
    \  (roll (cdr roll)))\n                                                      \
    \          (if (null? roll)\n                                                \
    \                    (cons max roll)\n                                       \
    \                             (let ", "  (if (null? numbers)\n      '()\n    \
    \  (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n      \
    \      (max_found (null? (cdr rolling_max))))\n        (if (max_found)\n     \
    \       (cons max rolling_max)\n            (cons max rolling_max))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons next max)))))\n  )\n)\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (list max)\n            (let ((max (max\
    \ max tail)))\n              (if (null? tail)\n                  (list max)\n\
    \                  (let ((max (max max tail)))\n                    (if (null?\
    \ tail)\n                        (list max)\n                        (let ((max\
    \ (max max tail)))\n                          (if (null? tail)\n             \
    \                 (list max)\n                              (let ((max (max max\
    \ tail)))\n                                (if (null? tail)\n                \
    \                    (list max)\n                                    (let ((max\
    \ (max max tail)))\n                                      (if (null? tail)\n \
    \                                         (list max)\n                       \
    \                   (let ((max (max max tail)))\n                            \
    \                (if (null? tail)\n                                          \
    \      (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                            (if (null? tail)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max tail)))\n \
    \                                                               (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max tail)))\n                   \
    \                                                               (if (null? tail)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max tail)))\n               \
    \                                                                         (if\
    \ (null? tail)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ tail)))\n                                                                  \
    \                            (if (null? tail)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                           (if\
    \ (null? tail)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max tail)))\n                                        \
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (rolling_max_list (cons max rolling_max_list)))\n        (if (null?\
    \ rolling_max_list)\n            (cons max rolling_max_list)\n            (cons\
    \ (car rolling_max_list) (rolling_max (cdr rolling_max_list)))))\n      )\n  \
    \  )\n", "  (define (rolling_max-helper numbers current-max current-index)\n \
    \   (cond\n      [(null? numbers) (list current-max)]\n      [(= (modulo current-index\
    \ 2) 0)\n       (rolling_max-helper\n        (rest numbers)\n        (cond [(>\
    \ current-max current-index)\n               (list current-max)]\n           \
    \   [else (cons current-max (rolling_max-helper numbers (cons current-max numbers)\
    \ (+ 1 current-index)))])\n       ]\n      [else (rolling_max-helper\n       \
    \        (rest numbers)\n               (cond [(> current-max current-index)\n\
    \                     (list current-max)]\n                       [else (cons\
    \ current-max (rolling_max-helper numbers (cons current-max numbers) (+ 1 current-index)))])\n\
    \       )])\n    (rolling_max-helper numbers 0 0))\n  (rolling_max-helper numbers\
    \ 0 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (let ((max (car roll))\n                  (roll (cdr\
    \ roll)))\n              (cons max (rolling_max (cons roll roll))))))))\n", " \
    \ (let loop ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers)\
    \ max)\n          ((null? (cdr numbers)) (cons max numbers))\n          (else\
    \ (loop (cdr numbers)\n                      (cond ((> max numbers) max)\n   \
    \                          ((= max numbers) numbers)\n                       \
    \      (else (max numbers))))))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (let ((max-so-far (car numbers)))\n        (if (> (car numbers) max-so-far)\n\
    \            (cons max-so-far (rolling_max (cdr numbers))))\n        (cons (car\
    \ numbers) (rolling_max (cdr numbers))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        (list max)\n        (let\
    \ ((n (car numbers))\n              (m (cadr numbers)))\n          (if (> n m)\n\
    \              (loop (cdr numbers) max)\n              (loop (cdr numbers) (max\
    \ n)))\n          (loop (cdr numbers) max)))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (cons max roll\
    \ (rolling_max (cons max roll))))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (cons max rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max)))\n        (if (null? rolling_max_list)\n\
    \            max\n            (cons (car rolling_max_list) rolling_max_list))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (list max (car next))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (list max)\n            (let ((max (max\
    \ max tail)))\n              (if (null? tail)\n                  (list max)\n\
    \                  (let ((max (max max tail)))\n                    (if (null?\
    \ tail)\n                        (list max)\n                        (let ((max\
    \ (max max tail)))\n                          (if (null? tail)\n             \
    \                 (list max)\n                              (let ((max (max max\
    \ tail)))\n                                (if (null? tail)\n                \
    \                    (list max)\n                                    (let ((max\
    \ (max max tail)))\n                                      (if (null? tail)\n \
    \                                         (list max)\n                       \
    \                   (let ((max (max max tail)))\n                            \
    \                (if (null? tail)\n                                          \
    \      (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                            (if (null? tail)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max tail)))\n \
    \                                                               (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max tail)))\n                   \
    \                                                               (if (null? tail)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max tail)))\n               \
    \                                                                         (if\
    \ (null? tail)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ tail)))\n                                                                  \
    \                            (if (null? tail)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                           (if\
    \ (null? tail)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max tail)))\n                                        \
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers)\n            (max-so-far-so-far (length numbers)))\n\
    \        (if (= max-so-far-so-far 0)\n            (cons max-so-far max-so-far)\n\
    \            (let ((max-so-far max-so-far-so-far)\n                  (max-so-far-so-far\
    \ (- max-so-far-so-far 1)))\n              (if (= max-so-far-so-far 0)\n     \
    \             (cons max-so-far max-so-far)\n                  (let ((max-so-far\
    \ max-so-far-so-far)\n                        (max-so-far-so-far (- max-so-far-so-far\
    \ 1)))\n                    (if (= max-so-far-so-far 0)\n                    \
    \    (cons max-so-far max-so-far)\n                        (let ((max-so-far max-so-far-so-far)\n\
    \                              (max-so-far-so-far (- max-so-far-so-far 1)))\n\
    \                          (if (= max-so-far-so-far 0)\n                     \
    \         (cons max-so-far max-so-far)\n                              (let ((max-so-far\
    \ max-so-far-so-far)\n                                    (max-so-far-so-far (-\
    \ max-so-far-so-far 1)))\n                                (if (= max-so-far-so-far\
    \ 0)\n                                    (cons max-so-far max-so-far)\n     \
    \                               (let ((max-so-far max-so-far-so-far)\n       \
    \                                   (max-so-far-so-far (- max-so-far-so-far 1)))\n\
    \                                      (if (= max-so-far-so-far 0)\n         \
    \                                 (cons max-so-far max-so-far)\n             \
    \                             (let ((max-so-far max-so-far-so-far)\n         \
    \                                       (max-so-far-so-far (- max-so-far-so-far\
    \ 1)))\n                                            (if (= max-so-far-so-far 0)\n\
    \                                                (cons max-so-far max-so-far)\n\
    \                                                (let ((max-so-far max-so-far-so-far)\n\
    \                                                      (max-so-far-so-far (- max-so-far-so-far\
    \ 1)))\n                                                  (if (= max-so-far-",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (> (car roll) max)\n                  (cons max roll)\n     \
    \             (rolling_max (cons max roll))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (car numbers)))\n        (if (null? (cdr numbers))\n            (cons max-so-far\
    \ max-so-far-index)\n            (let ((next-number (cdr numbers)))\n        \
    \      (if (> (car numbers) max-so-far)\n                  (cons max-so-far max-so-far-index)\n\
    \                  (let ((next-max-so-far (car numbers))\n                   \
    \     (next-max-so-far-index (car numbers)))\n                    (if (> (car\
    \ numbers) max-so-far)\n                        (cons max-so-far max-so-far-index)\n\
    \                        (let ((next-max-so-far (car numbers))\n             \
    \                 (next-max-so-far-index (car numbers)))\n                   \
    \       (if (> (car numbers) max-so-far)\n                              (cons\
    \ max-so-far max-so-far-index)\n                              (let ((next-max-so-far\
    \ (car numbers))\n                                    (next-max-so-far-index (car\
    \ numbers)))\n                                (if (> (car numbers) max-so-far)\n\
    \                                    (cons max-so-far max-so-far-index)\n    \
    \                                (let ((next-max-so-far (car numbers))\n     \
    \                                     (next-max-so-far-index (car numbers)))\n\
    \                                      (if (> (car numbers) max-so-far)\n    \
    \                                      (cons max-so-far max-so-far-index)\n  \
    \                                        (let ((next-max-so-far (car numbers))\n\
    \                                                (next-max-so-far-index (car numbers)))\n\
    \                                            (if (> (car numbers) max-so-far)\n\
    \                                                (cons max-so-far max-so-far-index)\n\
    \                                                (let ((next-max-so-far (car numbers))\n\
    \                                                      (next-max-so-far-index\
    \ (car numbers)))\n                                                  (if (> (car\
    \ numbers) max-so-far)\n                                                     \
    \ (cons max-so-far max-so-far-index)\n                                       \
    \               (let ((next-max-so-far (car numbers))\n                      \
    \                                      (next-max-so-far-index (car numbers)))\n\
    \                                                    (if (> (car numbers) max-so-far)\n\
    \                                                        (cons max-", "  (let\
    \ loop ((numbers numbers)\n             (max #f)\n             (max-list '()))\n\
    \    (if (null? numbers)\n        (reverse max-list)\n        (let ((n (car numbers))\n\
    \              (m (cadr numbers)))\n          (if (> m max)\n              (loop\
    \ (cdr numbers) m (cons n max-list))\n              (loop (cdr numbers) m max-list)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (cdr numbers)))\n        (if (= max-so-far max-so-far-index)\n\
    \            (cons max-so-far numbers)\n            (cons (car numbers) (rolling_max\
    \ (cdr numbers)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ (car numbers))\n            (max-so-far-index (length numbers)))\n        (if\
    \ (= max-so-far max-so-far-index)\n            (cons max-so-far numbers)\n   \
    \         (let ((next-max-so-far (car numbers))\n                  (next-max-so-far-index\
    \ (length numbers)))\n              (if (= next-max-so-far max-so-far-index)\n\
    \                  (cons next-max-so-far numbers)\n                  (let ((next-max-so-far\
    \ (car numbers))\n                        (next-max-so-far-index (length numbers)))\n\
    \                    (if (= next-max-so-far max-so-far-index)\n              \
    \          (cons next-max-so-far numbers)\n                        (let ((next-max-so-far\
    \ (car numbers))\n                              (next-max-so-far-index (length\
    \ numbers)))\n                          (if (= next-max-so-far max-so-far-index)\n\
    \                              (cons next-max-so-far numbers)\n              \
    \                (let ((next-max-so-far (car numbers))\n                     \
    \               (next-max-so-far-index (length numbers)))\n                  \
    \              (if (= next-max-so-far max-so-far-index)\n                    \
    \                (cons next-max-so-far numbers)\n                            \
    \        (let ((next-max-so-far (car numbers))\n                             \
    \             (next-max-so-far-index (length numbers)))\n                    \
    \                  (if (= next-max-so-far max-so-far-index)\n                \
    \                          (cons next-max-so-far numbers)\n                  \
    \                        (let ((next-max-so-far (car numbers))\n             \
    \                                   (next-max-so-far-index (length numbers)))\n\
    \                                            (if (= next-max-so-far max-so-far-index)\n\
    \                                                (cons next-max-so-far numbers)\n\
    \                                                (let ((next-max-so-far (car numbers))\n\
    \                                                      (next-max-so-far-index\
    \ (length numbers)))\n                                                  (if (=\
    \ next-max-so-far max-so-far-index)\n                                        \
    \              (cons next-max-so-far numbers)\n                              \
    \                        (let ((next-max-so-far (car numbers))\n             \
    \                                               (next-max-so-far-index (length\
    \ numbers)))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car\
    \ numbers))\n            (max-so-far-index (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (cons max-so-far max-so-far-index)\n           \
    \ (let ((next-max (car numbers))\n                  (next-max-index (car numbers)))\n\
    \              (if (> (car numbers) max-so-far)\n                  (cons max-so-far\
    \ max-so-far-index)\n                  (cons next-max next-max-index))\n     \
    \         (rolling_max (cdr numbers))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((number (car numbers))\n          \
    \    (max-so-far (+ max-so-far number)))\n          (if (> number max-so-far)\n\
    \              (loop (cdr numbers)\n                    (cons max-so-far max-list)\n\
    \                    max-so-far)\n              (loop (cdr numbers)\n        \
    \            (cons number max-list)\n                    max-so-far))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (cond ((null?\
    \ numbers) max-list)\n          ((null? (cdr numbers)) (cons (car numbers) max-list))\n\
    \          (else (loop (cdr numbers)\n                       (cons (max (car numbers)\
    \ (car max-list))\n                             max-list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (length numbers)))\n        (if (= max-so-far max-so-far-index)\n          \
    \  (cons max-so-far numbers)\n            (let ((next-max-so-far (car numbers))\n\
    \                  (next-max-so-far-index (length numbers)))\n              (if\
    \ (= next-max-so-far max-so-far-index)\n                  (cons next-max-so-far\
    \ numbers)\n                  (let ((next-max-so-far (car numbers))\n        \
    \                (next-max-so-far-index (length numbers)))\n                 \
    \   (if (= next-max-so-far max-so-far-index)\n                        (cons next-max-so-far\
    \ numbers)\n                        (let ((next-max-so-far (car numbers))\n  \
    \                            (next-max-so-far-index (length numbers)))\n     \
    \                     (if (= next-max-so-far max-so-far-index)\n             \
    \                 (cons next-max-so-far numbers)\n                           \
    \   (let ((next-max-so-far (car numbers))\n                                  \
    \  (next-max-so-far-index (length numbers)))\n                               \
    \ (if (= next-max-so-far max-so-far-index)\n                                 \
    \   (cons next-max-so-far numbers)\n                                    (let ((next-max-so-far\
    \ (car numbers))\n                                          (next-max-so-far-index\
    \ (length numbers)))\n                                      (if (= next-max-so-far\
    \ max-so-far-index)\n                                          (cons next-max-so-far\
    \ numbers)\n                                          (let ((next-max-so-far (car\
    \ numbers))\n                                                (next-max-so-far-index\
    \ (length numbers)))\n                                            (if (= next-max-so-far\
    \ max-so-far-index)\n                                                (cons next-max-so-far\
    \ numbers)\n                                                (let ((next-max-so-far\
    \ (car numbers))\n                                                      (next-max-so-far-index\
    \ (length numbers)))\n                                                  (if (=\
    \ next-max-so-far max-so-far-index)\n                                        \
    \              (cons next-max-so-far numbers)\n                              \
    \                        (let ((next-max-so-far (car numbers))\n             \
    \                                               (next-max-so-far-index (length\
    \ numbers)))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (list\
    \ max)\n            (let ((max (max max roll)))\n              (if (null? roll)\n\
    \                  (list max)\n                  (let ((max (max max roll)))\n\
    \                    (if (null? roll)\n                        (list max)\n  \
    \                      (let ((max (max max roll)))\n                         \
    \ (if (null? roll)\n                              (list max)\n               \
    \               (let ((max (max max roll)))\n                                (if\
    \ (null? roll)\n                                    (list max)\n             \
    \                       (let ((max (max max roll)))\n                        \
    \              (if (null? roll)\n                                          (list\
    \ max)\n                                          (let ((max (max max roll)))\n\
    \                                            (if (null? roll)\n              \
    \                                  (list max)\n                              \
    \                  (let ((max (max max roll)))\n                             \
    \                     (if (null? roll)\n                                     \
    \                 (list max)\n                                               \
    \       (let ((max (max max roll)))\n                                        \
    \                (if (null? roll)\n                                          \
    \                  (list max)\n                                              \
    \              (let ((max (max max roll)))\n                                 \
    \                             (if (null? roll)\n                             \
    \                                     (list max)\n                           \
    \                                       (let ((max (max max roll)))\n        \
    \                                                            (if (null? roll)\n\
    \                                                                        (list\
    \ max)\n                                                                     \
    \   (let ((max (max max roll)))\n                                            \
    \                              (if (null? roll)\n                            \
    \                                                  (list max)\n              \
    \                                                                (let ((max (max\
    \ max roll)))\n                                                              \
    \                  (if (null? roll)\n                                        \
    \                                            (list max)\n                    \
    \                                                                (let ((max (max\
    \ max roll)))\n                                                              \
    \                        (if (null? roll)\n                                  \
    \                                                        (list max)\n        \
    \                                                                            \
    \      (let ((max (max max roll)))\n                                         \
    \                                                   (if (null? roll)\n       \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                             (let ((max (max max roll)))\n  \
    \                                                                            \
    \                    (if (null? roll)\n                                      \
    \                                                                (list max)\n\
    \                                                                            \
    \                          (let ((max (max max roll)))\n                     \
    \                                                                            \
    \       (if (null? roll)\n                                                   \
    \                                                         (list max)\n       \
    \                                                                            \
    \                         (let ((max (max max roll)))\n                      \
    \                                                                            \
    \            (if (null? roll)\n                                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max roll)))\n         \
    \                                                                            \
    \                               (if (null? roll)\n                           \
    \                                                                            \
    \                 (list max)\n                                               \
    \                                                                         (let\
    \ ((max (max max roll)))\n                                                   \
    \                                                                       (if (null?\
    \ roll)\n                                                                ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            (cons numbers (reverse max-so-far-so-far))\n            (let ((number\
    \ (car max-so-far))\n                  (max-so-far max-so-far-so-far)\n      \
    \            (max-so-far-so-far (cdr max-so-far-so-far)))\n              (if (>\
    \ (car max-so-far) number)\n                  (cons number max-so-far-so-far)\n\
    \                  (cons max-so-far max-so-far-so-far)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (let ((next-max (car max-list)))\n              (if (> max next-max)\n\
    \                  (list max)\n                  (list max next-max)))))\n  )\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling (list (car numbers))))\n        (if (null? rolling)\n            (list\
    \ max)\n            (let ((next (rolling_max (cdr rolling))))\n              (if\
    \ (> (car next) max)\n                  (list max)\n                  (cons (car\
    \ next) rolling)))))\n  )\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (max-list (cdr numbers)))\n        (if (null? max-list)\n\
    \            (list max)\n            (let ((next (rolling_max (cdr max-list))))\n\
    \              (if (> max next)\n                  (list max)\n              \
    \    (list max next)))))) ; #lang racket\n", "  (cond [(empty? numbers) empty]\n\
    \        [(> (first numbers) (first max)) (cons (first numbers) (rolling_max (rest\
    \ numbers)))]\n        [else (rolling_max (rest numbers))]))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (tail (cdr\
    \ numbers)))\n        (if (null? tail)\n            (list max)\n            (let\
    \ ((max (max max tail)))\n              (if (null? tail)\n                  (list\
    \ max)\n                  (let ((max (max max tail)))\n                    (if\
    \ (null? tail)\n                        (list max)\n                        (let\
    \ ((max (max max tail)))\n                          (if (null? tail)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max tail)))\n                                (if (null? tail)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max tail)))\n                                      (if (null? tail)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max tail)))\n                           \
    \                 (if (null? tail)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                                            (if (null? tail)\n\
    \                                                                            \
    \  (list max)\n                                                              \
    \                (let ((max (max max tail)))\n                               \
    \                                                 (if (null? tail)\n         \
    \                                                                           (list\
    \ max)\n                                                                     \
    \               (let ((max (max max tail)))\n                                \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \          (list max)\n                                                      \
    \                                    (let ((max (max max tail)))\n           \
    \                                                                            \
    \     (if (null? tail)\n                                                     \
    \                                           (list max)\n                     \
    \                                                                           (let\
    \ ((max (max max tail)))\n                                                   \
    \                                               (if (null? tail)\n           \
    \                                                                            \
    \               (list max)\n                                                 \
    \                                                     (let ((max (max max tail)))\n\
    \                                                                            \
    \                            (if (null? tail)\n                              \
    \                                                                            \
    \  (list max)\n                                                              \
    \                                              (let ((max (max max tail)))\n \
    \                                                                            \
    \                                 (if (null? tail)\n                         \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                                               (let ((max (max\
    \ max tail)))\n                                                              \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \                                        (list max)\n                        \
    \                                                                            \
    \                    (let ((max (max max tail)))\n                           \
    \                                                                            \
    \                   (if (null? tail)\n                                       \
    \                         ", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ (car numbers)))\n        (if (> (car numbers) max-so-far)\n            (cons\
    \ max-so-far (rolling_max (cdr numbers))))\n        (cons (car numbers) (rolling_max\
    \ (cdr numbers))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (cond (> (first numbers) max)\n                     (first numbers)\n \
    \                    (loop (rest numbers)\n                           (cond (>\
    \ (first numbers) max)\n                                   (first numbers)\n \
    \                                  (loop (rest numbers)\n                    \
    \                    (cond (> (first numbers) max)\n                         \
    \                     (first numbers)\n                                      \
    \        (loop (rest numbers)\n                                              \
    \      (cond (> (first numbers) max)\n                                       \
    \                   (first numbers)\n                                        \
    \                  (loop (rest numbers)\n                                    \
    \                              (cond (> (first numbers) max)\n               \
    \                                                         (first numbers)\n  \
    \                                                                      (loop (rest\
    \ numbers)\n                                                                 \
    \             (cond (> (first numbers) max)\n                                \
    \                                                      (first numbers)\n     \
    \                                                                            \
    \     (loop (rest numbers)\n                                                 \
    \                                           (cond (> (first numbers) max)\n  \
    \                                                                            \
    \                    (first numbers)\n                                       \
    \                                                           (loop (rest numbers)\n\
    \                                                                            \
    \                            (cond (> (first numbers) max)\n                 \
    \                                                                            \
    \                 (first numbers)\n                                          \
    \                                                                    (loop (rest\
    \ numbers)\n                                                                 \
    \                                                   (cond (> (first numbers) max)\n\
    \                                                                            \
    \                                              (first numbers)\n             \
    \                                                                            \
    \                                 (loop (rest numbers)\n                     \
    \                                                                            \
    \                                   (cond (> (first numbers) max)\n          \
    \                                                                            \
    \                                    (first numbers)\n                       \
    \                                                                            \
    \                       (loop (rest numbers)\n                               \
    \                                                                            \
    \                       (cond (> (first numbers) max)\n                      \
    \                                                                            \
    \                                      (first numbers)\n                     \
    \                                                                            \
    \                                       (loop (rest numbers)\n               \
    \                                                                            \
    \                                                 (cond (> (first numbers) max)\n\
    \                                                                            \
    \                                                        (first numbers)\n   \
    \                                                                            \
    \                                                     (loop (rest numbers)\n \
    \                                                                            \
    \                                                             (cond (> (first\
    \ numbers) max)\n                                                            \
    \                                                                            \
    \                                    (first numbers)\n                       \
    \                                                                            \
    \                                                                         (loop\
    \ (rest numbers)\n                                                           \
    \                                                                            \
    \                                           (cond (> (first numbers) max)\n  \
    \                                                                            \
    \                                                                            \
    \                              (first numbers)\n                             \
    \                                                                            \
    \                                                                            \
    \   (loop (rest numbers)\n                                                   \
    \                                                                            \
    \                                                               (cond (> (first\
    \ numbers) max)\n                                                            \
    \                                                                            \
    \                                                                    (first numbers)\n\
    \                                                                            \
    \                                                                            \
    \                                                    (loop (rest numbers)\n  \
    \                                                                            \
    \                                                                            \
    \                                                        (cond (> (first numbers)\
    \ max)\n                                                                     \
    \                                                                            \
    \                                                                       (first\
    \ numbers)\n                                                                 \
    \                                                                            \
    \                                                                           (loop\
    \ (rest numbers)\n                                                           \
    \                                                                            \
    \                                                                            \
    \           (cond (> (first numbers) max)\n                                  \
    \                                                                            \
    \                                                                            \
    \                                          (first numbers)\n                 \
    \                                                                            \
    \                                                                            \
    \                                                           (loop (rest numbers)\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    (cond (> (first numbers) max)\n                                         \
    \                       ", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n     \
    \        (max-so-far #f)\n             (max-so-far-so-far (car numbers))\n   \
    \          (max-so-far-so-far-so-far #f)\n             (max-so-far-so-far-so-far-so-far\
    \ #f)\n             (max-so-far-so-far-so-far-so-far-so-far #f)\n            \
    \ (max-so-far-so-far-so-far-so-far-so-far-so-far #f))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (loop (cdr numbers)\n              (if (>\
    \ max-so-far max-so-far-so-far)\n                  max-so-far\n              \
    \    max-so-far-so-far)\n              (if (> max-so-far-so-far-so-far max-so-far-so-far-so-far)\n\
    \                  max-so-far-so-far\n                  max-so-far-so-far-so-far)\n\
    \              (if (> max-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far)\n\
    \                  max-so-far-so-far-so-far\n                  max-so-far-so-far-so-far-so-far)\n\
    \              (if (> max-so-far-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                  max-so-far-so-far-so-far-so-far-so-far\n                  max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \              (if (> max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far-so-far-so-far-so-far-so-far-so-far)\n                  max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\n\
    \                  max-so-far-so-far", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max-so-far (car numbers))\n            (max-so-far-index (cdr numbers)))\n\
    \        (if (> max-so-far max-so-far-index)\n            (cons max-so-far max-so-far-index)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (let loop\
    \ ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n  \
    \      result\n        (loop (rest numbers)\n              (cons (max result (first\
    \ numbers))\n                    (loop (rest numbers)\n                      \
    \    result))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers)))\n        (if (null? (cdr numbers))\n            (list max)\n    \
    \        (let ((max (car numbers)))\n              (if (> (car numbers) max)\n\
    \                  (list max)\n                  (list max (car numbers))\n  \
    \            )\n            )\n        )\n      )\n    )\n  )\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ numbers))))\n              (if (> (car next) max)\n                  (list max)\n\
    \                  (list max (car next))))))))\n", "  (cond [(empty? numbers)\
    \ empty]\n        [(> (first numbers) (first max)) (cons (first numbers) (rolling_max\
    \ (rest numbers)))]\n        [else (rolling_max (rest numbers))]))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons next max)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but it is too slow.\
    \ My list has about 10000 elements and it takes about 20 seconds to finish it.\
    \ I think it can be done in about 5 seconds.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that is faster than yours. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I tried your solution and it works fine. But the problem is that it\
    \ takes about 20 seconds to finish it. I think it can be done in about 5 seconds.\
    \ Do you have any idea how to do it?\n<|/ c |>\n<| c |>\nI added a solution that\
    \ is faster than yours. I hope it helps.\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    I wrote a solution that is faster than yours. I hope it helps.\n<code>", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (cons max max-list)\n\
    \            (let ((max-tail (rolling_max (cdr max-list))))\n              (cons\
    \ max (cons max-tail max-list)))))\n  )\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n    \
    \    (if (null? max-list)\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr max-list))))\n              (if (> max next)\n                  (list max)\n\
    \                  (list max next)))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (if (null? roll)\n                  (list max)\n              \
    \    (let ((max (max max roll)))\n                    (if (null? roll)\n     \
    \                   (list max)\n                        (let ((max (max max roll)))\n\
    \                          (if (null? roll)\n                              (list\
    \ max)\n                              (let ((max (max max roll)))\n          \
    \                      (if (null? roll)\n                                    (list\
    \ max)\n                                    (let ((max (max max roll)))\n    \
    \                                  (if (null? roll)\n                        \
    \                  (list max)\n                                          (let\
    \ ((max (max max roll)))\n                                            (if (null?\
    \ roll)\n                                                (list max)\n        \
    \                                        (let ((max (max max roll)))\n       \
    \                                           (if (null? roll)\n               \
    \                                       (list max)\n                         \
    \                             (let ((max (max max roll)))\n                  \
    \                                      (if (null? roll)\n                    \
    \                                        (list max)\n                        \
    \                                    (let ((max (max max roll)))\n           \
    \                                                   (if (null? roll)\n       \
    \                                                           (list max)\n     \
    \                                                             (let ((max (max\
    \ max roll)))\n                                                              \
    \      (if (null? roll)\n                                                    \
    \                    (list max)\n                                            \
    \                            (let ((max (max max roll)))\n                   \
    \                                                       (if (null? roll)\n   \
    \                                                                         (list\
    \ max)\n                                                                     \
    \       (let ((max (max max roll)))\n                                        \
    \                                      (if (null? roll)\n                    \
    \                                                              (list max)\n  \
    \                                                                            \
    \    (let ((max (max max roll)))\n                                           \
    \                                         (if (null? roll)\n                 \
    \                                                                       (list\
    \ max)\n                                                                     \
    \                   (let ((max (max max roll)))\n                            \
    \                                                              (if (null? roll)\n\
    \                                                                            \
    \                  (list max)\n                                              \
    \                                                (let ((max (max max roll)))\n\
    \                                                                            \
    \                    (if (null? roll)\n                                      \
    \                                                              (list max)\n  \
    \                                                                            \
    \                      (let ((max (max max roll)))\n                         \
    \                                                                            \
    \ (if (null? roll)\n                                                         \
    \                                                 (list max)\n               \
    \                                                                            \
    \               (let ((max (max max roll)))\n                                \
    \                                                                            (if\
    \ (null? roll)\n                                                             \
    \                                                   (list max)\n             \
    \                                                                            \
    \                       (let ((max (max max roll)))\n                        \
    \                                                                            \
    \              (if (null? roll)\n                                            \
    \                                                                          (list\
    \ max)\n                                                                     \
    \                                                 (let ((max (max max roll)))\n\
    \                                                                            \
    \                                            (if (null? roll)\n              \
    \                                                                            \
    \                                  (", "  (let loop ((numbers numbers)\n     \
    \        (max #f)\n             (acc '()))\n    (if (null? numbers)\n        acc\n\
    \        (loop (rest numbers)\n              (if (> max numbers)\n           \
    \       max\n                  (loop (rest numbers)\n                        (max\
    \ numbers)\n                        (cons max acc))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (list max)\n            (if (> max roll)\n\
    \                (list max)\n                (rolling_max (cdr roll)))))))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (cons (max result\
    \ (first numbers))\n                    (loop (rest numbers)\n               \
    \           result))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (max-list (cdr numbers)))\n        (if (null? max-list)\n\
    \            (cons max max-list)\n            (let ((next-max (car max-list))\n\
    \                  (next-max-list (cdr max-list)))\n              (if (null? next-max-list)\n\
    \                  (cons max max-list)\n                  (let ((next-max-list\
    \ (rolling_max (cdr next-max-list))))\n                    (cons max max-list)\n\
    \                    (cons next-max next-max-list)))))\n        (rolling_max (cdr\
    \ numbers)))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (cond ((> max number) (cons max numbers))\n                    (else (loop\
    \ (rest numbers)\n                              (max number)))))))\n", "  (let\
    \ loop ((numbers numbers)\n             (max 0))\n    (cond\n      [(empty? numbers)\
    \ (list max)]\n      [(> (first numbers) max) (loop (rest numbers) max)]\n   \
    \   [else (loop (rest numbers) (max max (first numbers)))]\n    )))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (tail\
    \ (cdr numbers)))\n        (if (> (car tail) max)\n            (cons max tail)\n\
    \            (rolling_max (cons (car tail) tail)))))", "  (let loop ((numbers\
    \ numbers)\n             (max-so-far #f)\n             (max-so-far-so-far (list\
    \ #f)))\n    (cond ((null? numbers) max-so-far)\n          ((> (car numbers) max-so-far-so-far)\
    \ max-so-far)\n          (else (loop (cdr numbers)\n                       (car\
    \ numbers)\n                       (cons (car numbers)\n                     \
    \        max-so-far-so-far)))))\n  max-so-far)\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far-index 0))\n    (cond\n\
    \      [(empty? numbers) (list max-so-far)]\n      [(> (first numbers) max-so-far)\
    \ (first numbers)]\n      [else (loop (rest numbers)\n                  (max max-so-far\
    \ first-so-far)\n                  (add1 max-so-far-index))]))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr max-list))))\n              (if (> (car\
    \ max-list) max)\n                  (list max)\n                  (cons (car max-list)\n\
    \                        (cons next max-list))))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (max '()))\n    (cond ((null? numbers) max)\n       \
    \   ((< max numbers) (loop (rest numbers) max))\n          (else (loop (rest numbers)\
    \ (max numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ (car numbers))\n            (max-so-far-index (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (list max-so-far max-so-far-index)\n           \
    \ (let ((next-max-so-far (car numbers))\n                  (next-max-so-far-index\
    \ (car numbers)))\n              (if (> next-max-so-far max-so-far)\n        \
    \          (list max-so-far max-so-far-index)\n                  (list next-max-so-far\
    \ next-max-so-far-index)))))))\n", "  (let loop ((numbers numbers)\n         \
    \    (max-so-far #f)\n             (max-so-far-so-far (list #f)))\n    (cond\n\
    \      [(empty? numbers) (list max-so-far)]\n      [(< (first numbers) max-so-far)\
    \ (loop (rest numbers) (first numbers) max-so-far)]\n      [else (loop (rest numbers)\
    \ (first numbers)\n                 (cond [(< (first numbers) max-so-far) (loop\
    \ (rest numbers) (first numbers) (first numbers))]\n                       [else\
    \ (loop (rest numbers) (first numbers)\n                                   (cond\
    \ [(< (first numbers) max-so-far-so-far) (loop (rest numbers) (first numbers)\
    \ (first numbers))]\n                                         [else (loop (rest\
    \ numbers) (first numbers)\n                                                 \
    \ (cond [(< (first numbers) max-so-far-so-far) (loop (rest numbers) (first numbers)\
    \ (first numbers))]\n                                                        [else\
    \ (loop (rest numbers) (first numbers)\n                                     \
    \                           (cond [(< (first numbers) max-so-far-so-far) (loop\
    \ (rest numbers) (first numbers) (first numbers))]\n                         \
    \                                              [else (loop (rest numbers) (first\
    \ numbers)\n                                                                 \
    \                (cond [(< (first numbers) max-so-far-so-far) (loop (rest numbers)\
    \ (first numbers) (first numbers))]\n                                        \
    \                                               [else (loop (rest numbers) (first\
    \ numbers)\n                                                                 \
    \                             (cond [(< (first numbers) max-so-far-so-far) (loop\
    \ (rest numbers) (first numbers) (first numbers))]\n                         \
    \                                                                            [else\
    \ (loop (rest numbers) (first numbers)\n                                     \
    \                                                                        (cond\
    \ [(< (first numbers) max-so-far-so-far) (loop (rest numbers) (first numbers)\
    \ (first numbers))]\n                                                        \
    \                                                           [else (loop (rest\
    \ numbers) (first numbers)\n                                                 \
    \                                                                         (cond\
    \ [(< (first numbers) max-so-far-so-far) (loop (rest numbers) (first numbers)\
    \ (first numbers))]\n                                                        \
    \                                                                       [else\
    \ (loop (rest numbers) (first numbers)\n                                     \
    \                                                                            \
    \                   (cond [(< (first numbers) max-so-far-so-far) (loop (rest numbers)\
    \ (first numbers) (first numbers))]\n                                        \
    \                                                                            \
    \                     [else (loop (rest number", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        (list max)\n        (let\
    \ ((n (car numbers))\n              (m (max n (car numbers))))\n          (loop\
    \ (cdr numbers) m)))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers)))\n        (if (null? (cdr numbers))\n            (list\
    \ max)\n            (let ((next (rolling_max (cdr numbers))))\n              (if\
    \ (> (car next) max)\n                  (list max)\n                  (list max\
    \ (car next))))))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '()))\n    (cond ((null? numbers) max-list)\n          ((> (car numbers) (first\
    \ max-list))\n           (loop (cdr numbers)\n                 (cons (car numbers)\
    \ max-list)))\n          (else (loop (cdr numbers)\n                       (cons\
    \ (car numbers) max-list))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max-so-far numbers)\n            (max-so-far-so-far (reverse max-so-far)))\n\
    \        (if (null? (rest numbers))\n            (cons (car max-so-far-so-far)\n\
    \                  max-so-far-so-far)\n            (let ((next-number (car numbers))\n\
    \                  (next-max-so-far max-so-far-so-far))\n              (if (>\
    \ (car max-so-far-so-far) next-number)\n                  (let ((next-max-so-far\
    \ max-so-far-so-far)\n                        (next-max-so-far-so-far (cons next-number\
    \ next-max-so-far)))\n                    (if (null? next-max-so-far)\n      \
    \                  (cons (car max-so-far-so-far)\n                           \
    \   max-so-far-so-far)\n                        (let ((next-max-so-far next-max-so-far-so-far)\n\
    \                              (next-max-so-far-so-far (cons (car max-so-far-so-far)\n\
    \                                                            next-max-so-far)))\n\
    \                          (if (null? next-max-so-far)\n                     \
    \         (cons (car max-so-far-so-far)\n                                    max-so-far-so-far)\n\
    \                              (let ((next-max-so-far next-max-so-far-so-far)\n\
    \                                    (next-max-so-far-so-far (cons (car max-so-far-so-far)\n\
    \                                                                  next-max-so-far)))\n\
    \                                (if (null? next-max-so-far)\n               \
    \                     (cons (car max-so-far-so-far)\n                        \
    \                  max-so-far-so-far)\n                                (let ((next-max-so-far\
    \ next-max-so-far-so-far)\n                                      (next-max-so-far-so-far\
    \ (cons (car max-so-far-so-far)\n                                            \
    \                          next-max-so-far)))\n                              \
    \    (if (null? next-max-so-far)\n                                      (cons\
    \ (car max-so-far-so-far)\n                                            max-so-far-so-far)\n\
    \                                  (let ((next-max-so-far next-max-so-far", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n \
    \           (let ((max (max max roll)))\n              (if (null? roll)\n    \
    \              (list max)\n                  (let ((max (max max roll)))\n   \
    \                 (if (null? roll)\n                        (list max)\n     \
    \                   (let ((max (max max roll)))\n                          (if\
    \ (null? roll)\n                              (list max)\n                   \
    \           (let ((max (max max roll)))\n                                (if (null?\
    \ roll)\n                                    (list max)\n                    \
    \                (let ((max (max max roll)))\n                               \
    \       (if (null? roll)\n                                          (list max)\n\
    \                                          (let ((max (max max roll))))))))))))))))\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-index\
    \ #f)\n             (max-so-far-index #f)\n             (max-so-far-index #f)\n\
    \             (max-so-far-index #f)\n             (max-so-far-index #f)\n    \
    \         (max-so-far-index #f)\n             (max-so-far-index #f)\n        \
    \     (max-so-far-index #f)\n             (max-so-far-index #f)\n            \
    \ (max-so-far-index #f)\n             (max-so-far-index #f)\n             (max-so-far-index\
    \ #f)\n             (max-so-far-index #f)\n             (max-so-far-index #f)\n\
    \             (max-so-far-index #f)\n             (max-so-far-index #f)\n    \
    \         (max-so-far-index #f)\n             (max-so-far-index #f)\n        \
    \     (max-so-far-index #f)\n             (max-so-far-index #f)\n            \
    \ (max-so-far-index #f)\n             (max-so-far-index #f)\n             (max-so-far-index\
    \ #f)\n             (max-so-far-index #f)\n             (max-so-far-index #f)\n\
    \             (max-so-far-index #f)\n             (max-so-far-index #f)\n    \
    \         (max-so-far-index #f)\n             (max-so-far-index #f)\n        \
    \     (max-so-far-index #f)\n             (max-so-far-index #f)\n            \
    \ (max-so-far-index #f)\n             (max-so-far-index #f)\n             (max-so-far-index\
    \ #f)\n             (max-so-far-index #f)\n             (max-so-far-index #f)\n\
    \             (max-so-far-index #f)\n             (max-so-far-index #f)\n    \
    \         (max-so-far-index #f)\n             (max-so-far-index #f)\n        \
    \     (max-so-far-index #f)\n             (max-so-far-index #f)\n            \
    \ (max-so-far-index #f)\n             (max-so-far-index #f)\n             (max-so-far-index\
    \ #f)\n             (max-so-far-index #f)\n             (max-so-far-index #f)\n\
    \             (max-so-far-index #f)\n             (max-so-far-index #f)\n    \
    \         (max-so-far", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max roll)\n            (let ((max (car roll))\n              \
    \    (roll (cdr roll)))\n              (cons max (rolling_max (cons roll roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (let ((max (max max roll)))\n              (if (null? roll)\n     \
    \             (list max)\n                  (let ((roll (cdr roll)))\n       \
    \             (if (null? roll)\n                        (list max)\n         \
    \               (let ((max (max max roll)))))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (max_found (null? (cdr rolling_max))))\n        (if (max_found)\n\
    \            (cons max rolling_max)\n            (cons max rolling_max))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (> (car numbers) max)\n            (cons max numbers)\n            (rolling_max\
    \ (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (max-list (cdr numbers)))\n        (if (null? max-list)\n\
    \            (cons max max-list)\n            (let ((next-max (car max-list)))\n\
    \              (if (> max next-max)\n                  (cons max max-list)\n \
    \                 (rolling_max (cdr max-list))))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (result '()))\n    (if (null? numbers)\n        result\n\
    \        (loop (cdr numbers)\n              (cons (max (car numbers)\n       \
    \                  (car result))\n                    result)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((max (max max roll)))\n                    (if\
    \ (null? roll)\n                        (list max)\n                        (let\
    \ ((max (max max roll)))))))))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (list max)\n            (if (> max roll)\n              \
    \  (list max)\n                (list roll)))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max (car numbers)))\n        (if (> (car numbers) max)\n\
    \            (cons max numbers)\n            (rolling_max (cdr numbers))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '())\n             (max-so-far\
    \ 0))\n    (if (null? numbers)\n        (reverse max-list)\n        (let ((number\
    \ (car numbers))\n              (max-so-far (+ max-so-far number)))\n        \
    \  (loop (cdr numbers)\n                (cons number max-list)\n             \
    \   max-so-far))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n   \
    \         (list max)\n            (if (> (car tail) max)\n                (list\
    \ max)\n                (if (> (car tail) (rolling_max tail))\n              \
    \      (list max)\n                    (rolling_max (cdr tail))))))))\n", "  (let\
    \ loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (cons (max numbers)\n\
    \                    (loop (rest numbers)\n                          result))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (cond ((> max number)\
    \ (list max))\n                    ((< max number) (list max))\n             \
    \       (else (loop (rest numbers)\n                              (max number)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (let ((max (max max roll)))\n              (if (null? roll)\n     \
    \             (list max)\n                  (let ((max (max max roll)))\n    \
    \                (if (null? roll)\n                        (list max)\n      \
    \                  (let ((max (max max roll)))\n                          (if\
    \ (null? roll)\n                              (list max)\n                   \
    \           (let ((max (max max roll)))\n                                (if (null?\
    \ roll)\n                                    (list max)\n                    \
    \                (let ((max (max max roll)))\n                               \
    \       (if (null? roll)\n                                          (list max)\n\
    \                                          (let ((max (max max roll)))\n     \
    \                                       (if (null? roll)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max roll)))\n                                  \
    \                (if (null? roll)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max roll)))\n                                             \
    \           (if (null? roll)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max roll)))\n                                      \
    \                        (if (null? roll)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max roll)))\n             \
    \                                                       (if (null? roll)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max roll)))\n          (list max
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-prev numbers))\n        (if (null? max-so-far)\n            (if\
    \ (null? max-so-far-prev)\n                numbers\n                (rolling_max\
    \ (cdr max-so-far)))\n            (let ((max-so-far max-so-far-prev))\n      \
    \        (if (> (car max-so-far) (car max-so-far-prev))\n                  (cons\
    \ (car max-so-far)\n                        (rolling_max (cdr max-so-far)))\n\
    \                  (rolling_max (cdr max-so-far))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (tail (cdr\
    \ numbers)))\n        (if (null? tail)\n            (list max)\n            (let\
    \ ((max (max max tail)))\n              (if (null? tail)\n                  (list\
    \ max)\n                  (let ((max (max max tail)))\n                    (if\
    \ (null? tail)\n                        (list max)\n                        (let\
    \ ((max (max max tail)))\n                          (if (null? tail)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max tail)))\n                                (if (null? tail)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max tail)))\n                                      (if (null? tail)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max tail)))\n                           \
    \                 (if (null? tail)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                            (if (null? tail)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max tail)))\n \
    \                                                               (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max tail)))\n                   \
    \                                                               (if (null? tail)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max tail)))\n               \
    \                                                                         (if\
    \ (null? tail)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ tail)))\n                                                                  \
    \                            (if (null? tail)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                           (if\
    \ (null? tail)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max tail)))\n                                        \
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (rolling_max_list (cons max rolling_max)))\n        (if (null? rolling_max_list)\n\
    \            (cons max rolling_max)\n            (cons (car rolling_max_list)\
    \ rolling_max_list))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (tail (cdr numbers)))\n        (if (> (car tail)\
    \ max)\n            (cons max tail)\n            (rolling_max (cdr tail)))))\n\
    )\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n   \
    \         (rolling_max (cdr numbers))\n            (rolling_max_list (cons max\
    \ rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far-so-far (list #f)))\n    (if (null? numbers)\n\
    \        (reverse max-so-far-so-far)\n        (loop (rest numbers)\n         \
    \     (cond (< (car numbers) max-so-far)\n                    (set! max-so-far\
    \ car numbers)\n                    (loop (rest numbers)\n                   \
    \       (cond (< (car numbers) max-so-far)\n                                (set!\
    \ max-so-far car numbers)\n                                (loop (rest numbers)\n\
    \                                      (cond (< (car numbers) max-so-far)\n  \
    \                                           (set! max-so-far car numbers)\n  \
    \                                           (loop (rest numbers)\n           \
    \                                       (cond (< (car numbers) max-so-far)\n \
    \                                                       (set! max-so-far car numbers)\n\
    \                                                        (loop (rest numbers)\n\
    \                                                              (cond (< (car numbers)\
    \ max-so-far)\n                                                              \
    \      (set! max-so-far car numbers)\n                                       \
    \                             (loop (rest numbers)\n                         \
    \                                                 (cond (< (car numbers) max-so-far)\n\
    \                                                                            \
    \   (set! max-so-far car numbers)\n                                          \
    \                                     (loop (rest numbers)\n                 \
    \                                                                    (cond (<\
    \ (car numbers) max-so-far)\n                                                \
    \                                            (set! max-so-far car numbers)\n \
    \                                                                            \
    \               (loop (rest numbers)\n                                       \
    \                                                           (cond (< (car numbers)\
    \ max-so-far)\n                                                              \
    \                                          (set! max-so-far car numbers)\n   \
    \                                                                            \
    \                         (loop (rest numbers)\n                             \
    \                                                                            \
    \     (cond (< (car numbers) max-so-far)\n                                   \
    \                                                                            \
    \     (set! max-so-far car numbers)\n                                        \
    \                                                                            (loop\
    \ (rest numbers)\n                                                           \
    \                                                               (cond (< (car\
    \ numbers) max-so-far)\n                                                     \
    \                                                                            \
    \   (set! max-so-far car numbers)\n                                          \
    \                                                                            \
    \              (loop (rest numbers)\n                                        \
    \                                                                            \
    \      (cond (< (car numbers) max-so-far)\n                                  \
    \                                                                            \
    \                  (set! max-so-far car numbers)\n                           \
    \                                                                            \
    \                         (loop (rest numbers)\n                             \
    \                                                                            \
    \                           (cond (< (car numbers) max-so-far)\n             \
    \                                                                            \
    \                                               (set! max-so-far car numbers)\n\
    \                                                                            \
    \                                                            (loop (rest ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (max-list (cdr numbers)))\n        (if (null? max-list)\n            (cons\
    \ max max-list)\n            (let ((next (rolling_max (cdr max-list))))\n    \
    \          (if (> max next)\n                  (cons max max-list)\n         \
    \         (cons next max-list)))))) ; tail recursion\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (list max)\n            (let ((max (max\
    \ max roll)))\n              (if (null? roll)\n                  (list max)\n\
    \                  (let ((max (max max roll)))\n                    (if (null?\
    \ roll)\n                        (list max)\n                        (let ((max\
    \ (max max roll)))\n                          (if (null? roll)\n             \
    \                 (list max)\n                              (let ((max (max max\
    \ roll)))\n                                (if (null? roll)\n                \
    \                    (list max)\n                                    (let ((max\
    \ (max max roll)))\n                                      (if (null? roll)\n \
    \                                         (list max)\n                       \
    \                   (let ((max (max max roll)))\n                            \
    \                (if (null? roll)\n                                          \
    \      (list max)\n                                                (let ((max\
    \ (max max roll)))\n                                                  (if (null?\
    \ roll)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max roll)))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max roll)))\n                                                         \
    \           (if (null? roll)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max roll)))\n              \
    \                                            (if (null? roll)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max roll)))\n \
    \                                                               (if (null? roll)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max roll)))\n                                                         \
    \             (if (null? roll)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max roll)))\n        \
    \                                                    (if (null? roll)\n      \
    \                                                          (list max)\n      \
    \                                                          (let ((max (max max\
    \ roll)))\n                                                                  (if\
    \ (null? roll)\n                                                             \
    \       (list max)\n                                                         \
    \           (let ((max (max max roll)))\n                                    \
    \                                  (if (null? roll)\n                        \
    \                                                  (list max)\n              \
    \                                                            (let ((max (max max\
    \ roll)))\n                                                            (if (null?\
    \ roll)\n                                                                (list\
    \ max)\n                                                                (let ((max\
    \ (max max roll)))\n                                                         \
    \         (if (null? roll)\n                                                 \
    \                   (list max)\n                                             \
    \                       (let ((max (max max roll)))\n                        \
    \                                              (if (null? roll)\n            \
    \                                                              (list max)\n  \
    \                                                                        (let\
    \ ((max (", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (tail (cdr numbers)))\n        (if (null? tail)\n            (list\
    \ max)\n            (let ((max (max max tail)))\n              (if (null? tail)\n\
    \                  (list max)\n                  (let ((max (max max tail)))\n\
    \                    (if (null? tail)\n                        (list max)\n  \
    \                      (let ((max (max max tail)))\n                         \
    \ (if (null? tail)\n                              (list max)\n               \
    \               (let ((max (max max tail)))\n                                (if\
    \ (null? tail)\n                                    (list max)\n             \
    \                       (let ((max (max max tail)))\n                        \
    \              (if (null? tail)\n                                          (list\
    \ max)\n                                          (let ((max (max max tail)))\n\
    \                                            (if (null? tail)\n              \
    \                                  (list max)\n                              \
    \                  (let ((max (max max tail)))\n                             \
    \                     (if (null? tail)\n                                     \
    \                 (list max)\n                                               \
    \       (let ((max (max max tail)))\n                                        \
    \                (if (null? tail)\n                                          \
    \                  (list max)\n                                              \
    \              (let ((max (max max tail)))\n                                 \
    \                             (if (null? tail)\n                             \
    \                                     (list max)\n                           \
    \                                       (let ((max (max max tail)))\n        \
    \                                                            (if (null? tail)\n\
    \                                                                        (list\
    \ max)\n                                                                     \
    \   (let ((max (max max tail)))\n                                            \
    \                              (if (null? tail)\n                            \
    \                                                  (list max)\n              \
    \                                                                (let ((max (max\
    \ max tail)))\n                                                              \
    \                  (if (null? tail)\n                                        \
    \                                            (list max)\n                    \
    \                                                                (let ((max (max\
    \ max tail)))\n                                                              \
    \                        (if (null? tail)\n                                  \
    \                                                        (list max)\n        \
    \                                                                            \
    \      (let ((max (max max tail)))\n                                         \
    \                                                   (if (null? tail)\n       \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                             (let ((max (max max tail)))\n  \
    \                                                                            \
    \                    (if (null? tail)\n                                      \
    \                                                                (list max)\n\
    \                                                                            \
    \                          (let ((max (max max tail)))\n                     \
    \                                                                            \
    \       (if (null? tail)\n                                                   \
    \                                                         (list max)\n       \
    \                                                                            \
    \                         (let ((max (max max tail)))\n                      \
    \                                                                            \
    \            (if (null? tail)\n                                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max tail)))\n         \
    \                                                                            \
    \                               (if (null? tail)\n                           \
    \                                                                            \
    \                 (list max)\n                                               \
    \                                                                         (let\
    \ ((max (max max tail)))\n                                                   \
    \                                                                       (if (null?\
    \ tail)\n                                                                ", " \
    \ (let loop ((numbers numbers)\n             (max-list '()))\n    (cond ((null?\
    \ numbers) max-list)\n          ((> (car numbers) (car max-list))\n          \
    \ (loop (cdr numbers) (cdr max-list)))\n          (else (loop (cdr numbers) (cons\
    \ (car numbers) max-list))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (if (> (car roll) max)\n   \
    \             (cons max roll)\n                (rolling_max (cdr roll)))))\n \
    \ )\n)\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (rolling_max (cdr numbers))\n            (rolling_max_list (cons\
    \ max rolling_max_list))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (max-list (cdr numbers)))\n        (if (null?\
    \ max-list)\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ max-list))))\n              (if (> max next)\n                  (list max)\n\
    \                  (list next (cons max max-list))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max rolling_max)\n            (if\
    \ (> max roll)\n                (cons max rolling_max)\n                (cons\
    \ roll rolling_max)))))\n", "  (let loop ((numbers numbers)\n             (result\
    \ '()))\n    (if (null? numbers)\n        result\n        (loop (cdr numbers)\n\
    \              (cons (max (car numbers)\n                         (car result))\n\
    \                     result)))))\n", "  (let loop ((numbers numbers)\n      \
    \       (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n\
    \        (if (null? max-list)\n            (list max)\n            (if (> max\
    \ max-list)\n                (list max)\n                (if (null? (cdr max-list))\n\
    \                    (list max)\n                    (rolling_max (cdr max-list))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (cons max-so-far max-so-far-index)\n            (let ((next-max-so-far\
    \ (car numbers))\n                  (next-max-so-far-index (car numbers)))\n \
    \             (if (> (car numbers) max-so-far)\n                  (cons max-so-far\
    \ max-so-far-index)\n                  (let ((next-max-so-far (car numbers))\n\
    \                        (next-max-so-far-index (car numbers)))\n            \
    \        (if (> (car numbers) max-so-far)\n                        (cons max-so-far\
    \ max-so-far-index)\n                        (let ((next-max-so-far (car numbers))\n\
    \                              (next-max-so-far-index (car numbers)))\n      \
    \                    (if (> (car numbers) max-so-far)\n                      \
    \        (cons max-so-far max-so-far-index)\n                              (let\
    \ ((next-max-so-far (car numbers))\n                                    (next-max-so-far-index\
    \ (car numbers)))\n                                (if (> (car numbers) max-so-far)\n\
    \                                    (cons max-so-far max-so-far-index)\n    \
    \                                (let ((next-max-so-far (car numbers))\n     \
    \                                     (next-max-so-far-index (car numbers)))\n\
    \                                      (if (> (car numbers) max-so-far)\n    \
    \                                      (cons max-so-far max-so-far-index)\n  \
    \                                        (let ((next-max-so-far (car numbers))\n\
    \                                                (next-max-so-far-index (car numbers)))\n\
    \                                            (if (> (car numbers) max-so-far)\n\
    \                                                (cons max-so-far max-so-far-index)\n\
    \                                                (let ((next-max-so-far (car numbers))\n\
    \                                                      (next-max-so-far-index\
    \ (car numbers)))\n                                                  (if (> (car\
    \ numbers) max-so-far)\n                                                     \
    \ (cons max-so-far max-so-far-index)\n                                       \
    \               (let ((next-max-so-far (car numbers))\n                      \
    \                                      (next-max-so-far-index (car numbers)))",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (cons max\
    \ max-list)\n            (let ((max-tail (rolling_max (cdr max-list))))\n    \
    \          (cons max (cons max-tail max-list)))))\n  )\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (cons max '())\n            (let ((max\
    \ (max tail)))\n              (if (> max max)\n                  (cons max '())\n\
    \                  (cons max '(tail)))))\n        (rolling_max (cdr numbers)))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (cond ((> max number)\
    \ (cons max numbers))\n                    ((< max number) (loop (rest numbers)\
    \ number))\n                    (else (loop (rest numbers) max))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            max\n            (if (> (car\
    \ rolling_max_list) max)\n                (cons (car rolling_max_list) max)\n\
    \                rolling_max_list))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (max_found (null? (cdr rolling_max))))\n        (if (max_found)\n \
    \           (cons max rolling_max)\n            (cons max rolling_max))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (cons max (rolling_max (cons roll roll))))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (reverse max-so-far)))\n        (if (null? (rest numbers))\n            (cons\
    \ max-so-far-so-far max-so-far)\n            (let ((next-number (rest numbers)))\n\
    \              (if (> (first max-so-far) next-number)\n                  (cons\
    \ max-so-far-so-far max-so-far)\n                  (let ((max-so-far-so-far (cons\
    \ next-number (first max-so-far-so-far))))\n                    (if (null? max-so-far-so-far)\n\
    \                        (cons max-so-far-so-far max-so-far)\n               \
    \         (rolling_max (rest numbers)))))))\n        (rolling_max (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (let ((max (max max roll)))\n              (if (null? roll)\n     \
    \             (list max)\n                  (let ((max (max max roll)))\n    \
    \                (if (null? roll)\n                        (list max)\n      \
    \                  (let ((max (max max roll)))\n                          (if\
    \ (null? roll)\n                              (list max)\n                   \
    \           (let ((max (max max roll)))\n                                (if (null?\
    \ roll)\n                                    (list max)\n                    \
    \                (let ((max (max max roll)))\n                               \
    \       (if (null? roll)\n                                          (list max)\n\
    \                                          (let ((max (max max roll)))\n     \
    \                                       (if (null? roll)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max roll)))\n                                  \
    \                (if (null? roll)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max roll)))\n                                             \
    \           (if (null? roll)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max roll)))\n                                      \
    \                        (if (null? roll)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max roll)))\n             \
    \                                                       (if (null? roll)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max roll)))\n                                                   \
    \       (if (null? roll)\n                                                   \
    \           (list max)\n                                                     \
    \         (let ((max (max max roll)))\n                                      \
    \                          (if (null? roll)\n                                \
    \                                    (list max)\n                            \
    \                                        (let ((max (max max roll)))\n       \
    \                                                               (if (null? roll)\n\
    \                                                                          (list\
    \ max)\n                                                                     \
    \     (let ((max (max max roll)))\n                                          \
    \                  (if (null? roll)\n                                        \
    \                        (list max)\n                                        \
    \                        (let ((max (max max roll)))\n                       \
    \                                           (if (null? roll)\n               \
    \                                                     (list max)\n           \
    \                                                         (let ((max (max max\
    \ roll)))\n                                                                  \
    \    (if (null? roll)\n                                                      \
    \                    (list max)\n                                            \
    \                              (let ((max (max max roll)))\n                 \
    \                                           (if (null? roll)\n               \
    \                                                 (list max)\n               \
    \                                                 (let ((max (max max roll)))\n\
    \                                                                  (if (null?\
    \ roll)\n                                                                    (list\
    \ max)\n                                                                    (let\
    \ ((max (max max roll)))\n                                                   \
    \                   (if (null? roll)\n                                       \
    \                                   (list max)\n                             \
    \                                             (let ((max (", "  (let loop ((numbers\
    \ numbers)\n             (max-list '())\n             (max-so-far 0))\n    (cond\
    \ ((null? numbers) max-list)\n          ((< max-so-far numbers) max-list)\n  \
    \        (else (loop (rest numbers)\n                      (cons (max max-so-far\
    \ numbers)\n                            max-list)\n                      (+ max-so-far\
    \ numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (list\
    \ max)\n            (if (> max roll)\n                (list max)\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n         \
    \   (list max)\n            (let ((next (rolling_max (cdr numbers))))\n      \
    \        (if (> (car next) max)\n                  (list max)\n              \
    \    (list max (car next))))))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n       \
    \     (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers))\n        (if (null? (cdr numbers))\n\
    \            (cons max-so-far max-so-far)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car max-so-far) (car next))\n      \
    \            (cons max-so-far next)\n                  (cons next max-so-far)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers)))\n        (if (> (car numbers) max)\n       \
    \     (cons max numbers)\n            (rolling_max (cdr numbers))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (rolling_max numbers)))\n        (if (null? max-so-far)\n            numbers\n\
    \            (if (> (car max-so-far) (car max-so-far-so-far))\n              \
    \  max-so-far\n                (cons (car max-so-far) max-so-far-so-far)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            (cons max rolling_max_list)\n\
    \            (cons (car rolling_max_list) (rolling_max (cdr rolling_max_list)))))))\n",
  "  (cond [(empty? numbers) empty]\n        [(> (first numbers) (first rolling_max))\
    \ (cons (first numbers) rolling_max)]\n        [else (rolling_max (rest numbers))]))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (list max next)))))\n      )\n    )\n  )\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling\
    \ (rolling_max (cdr numbers))))\n        (if (null? rolling)\n            max\n\
    \            (if (> max rolling)\n                max\n                rolling))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-prev numbers))\n        (if (null? (rest numbers))\n          \
    \  (cons max-so-far max-so-far-prev)\n            (let ((next (first numbers))\n\
    \                  (prev (rest numbers)))\n              (if (> (first max-so-far)\
    \ next)\n                  (cons max-so-far max-so-far-prev)\n               \
    \   (let ((next-prev (rolling_max (rest numbers))))\n                    (if (null?\
    \ next-prev)\n                        (cons max-so-far max-so-far-prev)\n    \
    \                    (let ((next-prev (cons next next-prev)))\n              \
    \            (if (null? next-prev)\n                              (cons max-so-far\
    \ max-so-far-prev)\n                              (let ((next-prev (cons next\
    \ next-prev))))\n                                (if (null? next-prev)\n     \
    \                               (cons max-so-far max-so-far-prev)\n          \
    \                          (let ((next-prev (cons next next-prev))))\n       \
    \                               (if (null? next-prev)\n                      \
    \                    (cons max-so-far max-so-far-prev)\n                     \
    \                     (let ((next-prev (cons next next-prev))))\n            \
    \                                (if (null? next-prev)\n                     \
    \                           (cons max-so-far max-so-far-prev)\n              \
    \                                  (let ((next-prev (cons next next-prev))))\n\
    \                                                  (if (null? next-prev)\n   \
    \                                                   (cons max-so-far max-so-far-prev)\n\
    \                                                      (let ((next-prev (cons\
    \ next next-prev))))\n                                                       \
    \ (if (null? next-prev)\n                                                    \
    \        (cons max-so-far max-so-far-prev)\n                                 \
    \                           (let ((next-prev (cons next next-prev))))\n      \
    \                                                        (if (null? next-prev)\n\
    \                                                                  (cons max-so-far\
    \ max-so-far-prev)\n                                                         \
    \         (let ((next-prev (cons next next-prev))))\n                        \
    \                                            (if (null? next-prev)\n         \
    \                                                               (cons max-so-far\
    \ max-so-far-prev)\n                                                         \
    \               (let ((next-prev (cons next next-prev))))\n                  \
    \                                            (if (null? next-prev)\n         \
    \                                                         (cons max-so-f", " \
    \ (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (cons (max result\
    \ (first numbers))\n                    result))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (result '()))\n    (cond ((null? numbers) result)\n \
    \         ((null? (cdr numbers)) result)\n          ((< (car numbers) (max result))\
    \ (loop (cdr numbers) (cons (car numbers) result)))\n          (else (loop (cdr\
    \ numbers) result)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n\
    \            (cons max roll)\n            (let ((max (car roll))\n           \
    \       (roll (cdr roll)))\n              (if (> (car roll) max)\n           \
    \       (cons max roll)\n                  (rolling_max (cons max roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (list max (car next))))))))\n", "  (cond [(empty? numbers)\
    \ empty]\n        [(> (first numbers) (first max-list)) max-list]\n        [else\
    \ (cons (first numbers) (rolling_max (rest numbers)))]))\n", "  (let loop ((numbers\
    \ numbers)\n             (max-so-far #f)\n             (max-so-far-so-far (first\
    \ numbers))\n             (max-so-far-so-far-so-far #f)\n             (max-so-far-so-far-so-far-so-far\
    \ #f)\n             (max-so-far-so-far-so-far-so-far-so-far #f)\n            \
    \ (max-so-far-so-far-so-far-so-far-so-far-so-far #f))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (loop (rest numbers)\n              (if (>\
    \ max-so-far max-so-far-so-far)\n                  max-so-far\n              \
    \    (if (> max-so-far-so-far-so-far max-so-far-so-far-so-far)\n             \
    \         max-so-far-so-far\n                      (if (> max-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far-so-far-so-far)\n                          max-so-far-so-far-so-far\n\
    \                          (if (> max-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                              max-so-far-so-far-so-far-so-far\n             \
    \                 (if (> max-so-far-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                                  max-so-far-so-far-so-far-so-far-so-far\n  \
    \                                (if (> max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far-so-far-so-far-so-far-so-far-so-far)\n                    \
    \                  max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\n    \
    \                                  (if (> max-so-far-so-far-so-far-so-far-so-far-so-",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (> (car roll) max)\n                  (cons max roll)\n     \
    \             (cons max roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers))\n            (tail (cdr numbers)))\n        (if\
    \ (> (car tail) max)\n            (cons max tail)\n            (rolling_max (cons\
    \ (car tail) tail)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (tail (cdr numbers)))\n        (if (> (car numbers)\
    \ max)\n            (cons max tail)\n            (rolling_max (cons (car numbers)\
    \ tail)))))) ;; #lang racket\n", "  (cond [(empty? numbers) empty]\n        [(>\
    \ (first numbers) (first rolling_max)) (cons (first numbers) rolling_max)]\n \
    \       [else (cons (first numbers) (rolling_max (rest numbers))))]))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr max-list))))\n              (if (> max\
    \ next)\n                  (list max)\n                  (list max next)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next-max (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next-max) max)\n               \
    \   (list max)\n                  (cons max next-max)))))\n    )\n  )\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-index\
    \ 0))\n        (if (< (car max-so-far) (car numbers))\n            (cons (car\
    \ max-so-far)\n                  (rolling_max (cdr max-so-far)))\n           \
    \ (rolling_max (cdr max-so-far)))))\n", "  (let loop ((numbers numbers)\n    \
    \         (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (if (> (first numbers) max)\n                  (first\
    \ numbers)\n                  max))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling (list max)))\n        (if\
    \ (null? (cdr numbers))\n            (cons max rolling)\n            (let ((next\
    \ (car numbers))\n                  (rolling (cons next rolling)))\n         \
    \     (if (> max next)\n                  (cons max rolling)\n               \
    \   (rolling_max (cdr numbers)))))))\n", "  (if (null? numbers)\n      '()\n \
    \     (let ((max-so-far #f)\n            (max-so-far-so-far (car numbers))\n \
    \           (max-so-far-so-far-so-far (cdr numbers)))\n        (if (< max-so-far\
    \ max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n      \
    \      (cons max-so-far-so-far (rolling_max (cdr numbers)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next (rolling_max (cdr\
    \ numbers))))\n              (if (> (car next) max)\n                  (list max)\n\
    \                  (cons next max)))))\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do it without recursion. Recursion\
    \ is so much more elegant.\n<|/ c |>\n<| c |>\nI added a tail-recursive solution\
    \ that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added a tail-recursive solution\
    \ that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added a tail-recursive solution\
    \ that doesn't use recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            max\n            (rolling_max_list\
    \ (cdr rolling_max_list)))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest numbers)\n\
    \              (cond ((> max head) max)\n                    ((< max head) (cons\
    \ head max))\n                    (else (loop (rest numbers) max))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (> max roll)\n                  (cons max roll)\n           \
    \       (rolling_max roll)))))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (max-list (cdr numbers)))\n        (if\
    \ (null? max-list)\n            (cons max max-list)\n            (let ((next-max\
    \ (car max-list))\n                  (next-max-list (cdr max-list)))\n       \
    \       (if (null? next-max-list)\n                  (cons max max-list)\n   \
    \               (let ((next-max-max (car next-max-list))\n                   \
    \     (next-max-max-list (cdr next-max-list)))\n                    (if (null?\
    \ next-max-max-list)\n                        (cons max max-list)\n          \
    \              (let ((next-max-max-max (car next-max-max-list))\n            \
    \                  (next-max-max-max-list (cdr next-max-max-list)))\n        \
    \                  (if (null? next-max-max-max-list)\n                       \
    \       (cons max max-list)\n                              (let ((next-max-max-max-max\
    \ (car next-max-max-max-list))\n                                    (next-max-max-max-max-list\
    \ (cdr next-max-max-max-list)))\n                                (if (null? next-max-max-max-max-list)\n\
    \                                    (cons max max-list)\n                   \
    \                 (let ((next-max-max-max-max-max (car next-max-max-max-max-max-list))\n\
    \                                          (next-max-max-max-max-max-list (cdr\
    \ next-max-max-max-max-max-list)))\n                                      (if\
    \ (null? next-max-max-max-max-max-list)\n                                    \
    \      (cons max max-list)\n                                          (let ((next-max-max-max-max-max-max-max\
    \ (car next-max-max-max-max-max-max-max-list))\n                             \
    \                   (next-max-max-max-max-max-max-max-list (cdr next-max-max-max-max-max-max-max-list)))\n\
    \                                            (if (null? next-max-max-max-max-max-max-max-list)\n\
    \                                                (cons max max-list)\n       \
    \                                         (let ((next-max-max-max-max-max-max-max-max-max\
    \ (car next-max-max-max-max-max-max-max-max-max-max-list))\n                 \
    \                                     (next-max-max-max-max-max-max-max-max-max-max-list\
    \ (cdr next-max-max-max-max-max-max-max-max-max-max-list)))\n                \
    \                                  (if (null? next-max-max-max-max-max-max-max-max-max-max-list)\n\
    \                                                      (cons max max-list)\n \
    \                                                     (let ((next-max-max-max-max-max-max-max-max-max-max-max-max\
    \ (car next-max-max-max-max-max-max-max-max-max-", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse\
    \ max-so-far))\n            (max-so-far-so-far-so-far (reverse max-so-far-so-far)))\n\
    \        (if (null? max-so-far)\n            (cons (car max-so-far-so-far-so-far)\n\
    \                  max-so-far-so-far-so-far)\n            (let ((number (car max-so-far-so-far-so-far))\n\
    \                  (max-so-far-so-far-so-far (cdr max-so-far-so-far-so-far)))\n\
    \              (if (> (car max-so-far-so-far-so-far) number)\n               \
    \   (cons number max-so-far-so-far-so-far)\n                  (cons (car max-so-far-so-far-so-far)\n\
    \                        max-so-far-so-far-so-far)))))\n        (let ((number\
    \ (car max-so-far-so-far-so-far))\n              (max-so-far-so-far-so-far (cdr\
    \ max-so-far-so-far-so-far)))\n          (if (> (car max-so-far-so-far-so-far)\
    \ number)\n              (cons number max-so-far-so-far-so-far)\n            \
    \  (cons (car max-so-far-so-far-so-far)\n                    max-so-far-so-far-so-far)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (null? (rest numbers))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far-so-far)\n\
    \            (let ((next (first numbers))\n                  (max-so-far-so-far\
    \ (cons (car max-so-far-so-far)\n                                            max-so-far-so-far)))\n\
    \              (if (> (car max-so-far-so-far) next)\n                  (let ((max-so-far\
    \ max-so-far-so-far)\n                        (max-so-far-so-far (cons next max-so-far-so-far)))\n\
    \                    (if (null? max-so-far)\n                        (cons (car\
    \ max-so-far-so-far)\n                              max-so-far-so-far)\n     \
    \                   (rolling_max (cdr max-so-far-so-far))))))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr max-list))))\n              (if (> (car\
    \ max-list) max)\n                  (list max next)\n                  (list next\
    \ max)))))) ; #lang racket\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far-index 0))\n    (cond\n      [(empty? numbers)\
    \ (list max-so-far)]\n      [(> (first numbers) max-so-far) (loop (rest numbers)\
    \ (first numbers) max-so-far-index)]\n      [else (loop (rest numbers) (first\
    \ numbers) (+ max-so-far-index 1))])))\n", "  (let loop ((numbers numbers)\n \
    \            (result '()))\n    (cond ((null? numbers) result)\n          ((null?\
    \ (cdr numbers)) result)\n          ((< (car numbers) (max result))\n        \
    \   (loop (cdr numbers)\n                 (cons (car numbers) result)))\n    \
    \      (else (loop (cdr numbers)\n                       (cons (car numbers) result))))))\n",
  "  (cond [(empty? numbers) numbers]\n        [(> (first numbers) (first rest)) (rolling_max\
    \ (rest numbers))]\n        [else (cons (first numbers) (rolling_max (rest numbers))))]))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (let ((next (rolling_max (cdr max-list))))\n              (if (>\
    \ (car max-list) max)\n                  (list max next)\n                  (list\
    \ next max)))))) ; #lang racket\n", "  (let loop ((numbers numbers)\n        \
    \     (max 0))\n    (if (null? numbers)\n        (list max)\n        (let ((n\
    \ (car numbers))\n              (max (if (> max n) max n)))\n          (loop (cdr\
    \ numbers) max)))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0))\n    (if (null? numbers)\n        (reverse\
    \ max-list)\n        (let ((n (car numbers))\n              (max-so-far (+ max-so-far\
    \ n)))\n          (loop (cdr numbers)\n                (cons (max max-so-far n)\
    \ max-list)\n                max-so-far))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (> (car tail) max)\n            (cons max tail)\n            (rolling_max\
    \ (cons (car tail) tail)))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max '()))\n    (cond ((null? numbers) max)\n          ((> (car numbers) max)\
    \ (loop (cdr numbers) (car numbers)))\n          (else (loop (cdr numbers) max)))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers)\
    \ max)\n          ((null? (cdr numbers)) (cons max numbers))\n          (else\
    \ (loop (cdr numbers)\n                      (cond (< (car numbers) max)\n   \
    \                         (cons (car numbers) max)\n                         \
    \   (else max)))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (if (> (first numbers) max)\n                  (first numbers)\n      \
    \            max)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
