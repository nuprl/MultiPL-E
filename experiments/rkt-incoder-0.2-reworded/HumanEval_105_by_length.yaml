name: HumanEval_105_by_length
language: rkt
prompt: "#lang racket\n\n;; Given a list of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n;; reverse the resulting list, and then replace each digit\
  \ by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> (by_length (list\
  \ 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\"\
  \ \"One\" \"One\")\n;; If the list is empty, return an empty list:\n;; >>> (by_length\
  \ (list ))\n;; (list )\n;; If the list has any strange number ignore it:\n;; >>>\
  \ (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n  \
    \      (if (< head 10)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Two\" (number->string head))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append \"Three\" (number->string head))\n         \
    \         (by_length (rest arr)))\n            (cons (string-append \"Four\" (number->string\
    \ head))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Five\" (number->string head))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append \"Six\" (number->string head))\n           \
    \       (by_length (rest arr)))\n            (cons (string-append \"Seven\" (number->string\
    \ head))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Eight\" (number->string head))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append \"Nine\" (number->string head))\n          \
    \        (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n     \
    \ (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (number->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (number->string head)) (by_length (cdr arr)))))\n      )\n    )\n  )\n", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (by_length (cdr arr)))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Two\"\
    \ (by_length (cdr arr)))\n                  (by_length (cdr arr)))\n         \
    \   (cons (string-append \"Three\" (by_length (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Four\" (by_length (cdr arr)))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Five\" (by_length (cdr arr)))\n                  (by_length (cdr arr)))\n    \
    \        (cons (string-append \"Six\" (by_length (cdr arr)))\n               \
    \   (by_length (cdr arr)))\n            (cons (string-append \"Seven\" (by_length\
    \ (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eight\" (by_length (cdr arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nine\" (by_length (cdr arr)))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append head (by_length\
    \ (cdr arr)))\n                  (by_length (cdr arr))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\"\
    \ \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"\
    ))\n                  (by_length (rest arr)))))))\n", "  (if (null? arr)\n   \
    \   '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (symbol->string head) \"-\" (reverse (sub1 arr)))\n         \
    \         (by_length (sub1 arr)))\n            (cons (symbol->string head) (by_length\
    \ (sub1 arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (reverse (cdr\
    \ arr)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (reverse (cdr arr)))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (cons (string->symbol (symbol->string head)) (symbol->string\
    \ head)) (rest_of_list (rest arr)))\n            (cons (cons (symbol->string head)\
    \ (symbol->string head)) (rest_of_list (rest arr)))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (string->string head))\
    \ (by_length (rest arr)))\n            (cons (string->symbol (string->string head))\
    \ (by_length (rest arr)))))\n      )\n    )\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= (length arr) 1) (list \"One\")]\n    [(= (length arr) 2) (list \"Two\"\
    )]\n    [(= (length arr) 3) (list \"Three\")]\n    [(= (length arr) 4) (list \"\
    Four\")]\n    [(= (length arr) 5) (list \"Five\")]\n    [(= (length arr) 6) (list\
    \ \"Six\")]\n    [(= (length arr) 7) (list \"Seven\")]\n    [(= (length arr) 8)\
    \ (list \"Eight\")]\n    [(= (length arr) 9) (list \"Nine\")]\n    [else (cons\
    \ (cons (nth (first arr) arr) (by_length (rest arr)))\n               (by_length\
    \ (rest arr)))]))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"-\" (by_length (cdr arr)))\n                  (by_length (cdr arr)))\n   \
    \         (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([head (first arr)])\n        (if (< head 9)\n\
    \            (cons (cons head (cons \"One\" (by_length (rest arr)))) (cons head\
    \ (cons \"Two\" (by_length (rest arr))))) (cons head (cons \"Three\" (by_length\
    \ (rest arr))))) (cons head (cons \"Four\" (by_length (rest arr))))) (cons head\
    \ (cons \"Five\" (by_length (rest arr))))) (cons head (cons \"Six\" (by_length\
    \ (rest arr))))) (cons head (cons \"Seven\" (by_length (rest arr))))) (cons head\
    \ (cons \"Eight\" (by_length (rest arr))))) (cons head (cons \"Nine\" (by_length\
    \ (rest arr))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first\
    \ arr)) (cons (first arr) (by_length (rest arr)))]\n    [else (cons (first arr)\
    \ (by_length (rest arr)))]))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) (string-append \"One\"))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) (string-append \"Two\"\
    ))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Three\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Four\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Five\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Six\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Seven\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Eight\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Nine\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Ten\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Eleven\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Twelve\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Thirteen\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Fourteen\"))\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) (string-append \"Fifteen\"))\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) (string-append \"Sixteen\"))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) (string-append \"Seventeen\"\
    ))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append \"One\"\
    \ (list (number->string head)))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Nine\" (list (number->string head)))\n     \
    \             (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (number? head)\n            (cons\
    \ (string->symbol (number->string head)) (rest_of_list (rest arr)))\n        \
    \    (cons (string->symbol (number->string head)) (by_length (rest_of_list (rest\
    \ arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Tw", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"\
    Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n            \
    \      (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (substring head 1 1))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Two\" (substring head 1 1))\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append \"Three\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (substring head 1 1))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Five\" (substring head 1 1))\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append \"Six\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (substring head 1 1))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (substring head 1 1))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Ten\" (substring head 1 1))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Eleven\" (substring head 1 1))\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append \"Twelve\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Thirteen\" (substring head 1 1))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Fourteen\" (substring head 1 1))\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append \"Fifteen\"\
    \ (substring head 1 1))\n                  (by_length (cdr arr)))\n          \
    \  (cons (string-append \"Sixteen\" (substring head 1 1))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Seventeen\" (substring head\
    \ 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eighteen\" (substring head 1 1))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nineteen\" (substring head 1 1))\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append \"Twenty\"\
    \ (substring ", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (cons head (cons \"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length (rest\
    \ arr)))\n            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length (rest arr)))))\n\
    \  )\n)\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons\
    \ (second arr) (by_length (rest arr)))]\n    [else (cons (first arr) (by_length\
    \ (rest arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string->symbol (symbol->string\
    \ head)) (rest_by_length (rest arr)))\n            (cons (string->symbol (symbol->string\
    \ head)) (by_length (rest_by_length (rest arr))))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (number? head)\n            (cons (cons head (second arr)) (by_length\
    \ (rest arr)))\n            (cons (cons (string->symbol (string->string head))\
    \ (symbol->string head)) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons head (cons \"One\" (by_length (rest arr))))\n               \
    \   (by_length (rest arr)))\n            (cons (cons head (cons \"Two\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Three\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Four\" (by_length (rest arr))))\n\
    \                  (by_length (rest arr)))\n            (cons (cons head (cons\
    \ \"Five\" (by_length (rest arr))))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Six\" (by_length (rest arr))))\n       \
    \           (by_length (rest arr)))\n            (cons (cons head (cons \"Seven\"\
    \ (by_length (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (cons head (cons \"Eight\" (by_length (rest arr))))\n           \
    \       (by_length (rest arr)))\n            (cons (cons head (cons \"Nine\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))))))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([head (first arr)])\n        (if (< head 9)\n\
    \            (cons (string-append (symbol->string head) \"One\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (symbol->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Two\" (number->string head))\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append \"Three\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Five\" (number->string head))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append \"Six\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (number->string head))\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (number->string\
    \ head))\n                  (by_length (cdr arr))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\" (reverse (symbol->string head)))\n\
    \                  (by_length (cdr arr)))\n            (cons (symbol->string head)\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \" \") (by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string\
    \ head) (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (cons head (cons\
    \ \"One\" (by_length (rest arr))))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Two\" (by_length (rest arr))))\n       \
    \           (by_length (rest arr)))\n            (cons (cons head (cons \"Three\"\
    \ (by_length (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (cons head (cons \"Four\" (by_length (rest arr))))\n            \
    \      (by_length (rest arr)))\n            (cons (cons head (cons \"Five\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Six\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Seven\" (by_length (rest\
    \ arr))))\n                  (by_length (rest arr)))\n            (cons (cons\
    \ head (cons \"Eight\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Nine\" (by_length (rest arr))))\n\
    \                  (by_length (rest arr)))))))\n", "  (if (empty? arr)\n     \
    \ '()\n      (let ([head (first arr)])\n        (if (< head 10)\n            (cons\
    \ (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Ten\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eleven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Twelve\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Thirteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fourteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fifteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Sixteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Seventeen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eighteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nineteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twenty\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string->symbol (string->string\
    \ head)) (by_length (rest arr)))\n            (cons (string->symbol (string->string\
    \ head)) (by_length (rest arr)))))\n      )\n    )\n  )\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n     \
    \       (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string-append \"One\"\
    \ (list (string->symbol (- head 1))))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append \"Two\" (list (string->symbol (- head 2))))\n\
    \                  (by_length (rest arr)))\n            (cons (string-append \"\
    Three\" (list (string->symbol (- head 3))))\n                  (by_length (rest\
    \ arr)))\n            (cons (string-append \"Four\" (list (string->symbol (- head\
    \ 4))))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Five\" (list (string->symbol (- head 5))))\n                  (by_length (rest\
    \ arr)))\n            (cons (string-append \"Six\" (list (string->symbol (- head\
    \ 6)))) (by_length (rest arr)))\n            (cons (string-append \"Seven\" (list\
    \ (string->symbol (- head 7)))) (by_length (rest arr)))\n            (cons (string-append\
    \ \"Eight\" (list (string->symbol (- head 8)))) (by_length (rest arr)))\n    \
    \        (cons (string-append \"Nine\" (list (string->symbol (- head 9))))\n \
    \                 (by_length (rest arr))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 1)\n            (cons (cons\
    \ (car arr) (car arr)) (by_length (cdr arr)))\n            (let ([head (car arr)])\n\
    \              (if (< head 10)\n                  (cons (cons (car arr) (car arr))\
    \ (by_length (cdr arr)))\n                  (cons (cons (car arr) (car arr)) (by_length\
    \ (cdr arr))))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Two\" (number->string head))\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append \"Three\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Five\" (number->string head))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append \"Six\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (number->string head))\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (number->string\
    \ head))\n                  (by_length (cdr arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (con", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (number->string head))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (number->string head))\n                  (by_length (cdr arr)))))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(< 1 (first arr)) (cons (first arr) (by_length\
    \ (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]\n    [else\
    \ (by_length (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \" \") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 10)\n            (cons (string-append (symbol->string\
    \ head) \"-\" (reverse (subseq arr (+ head 1))))\n                  (by_length\
    \ (rest arr)))\n            (cons (symbol->string head) (by_length (rest arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Tw", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Two\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Three\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Five\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Six\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Seven\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eight\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Nine\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Ten\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Eleven\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Twelve\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Thirteen\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Fourteen\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Fifteen\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Sixteen\" (string-to-int (number->string head)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Seventeen\" (string-to-int (number->string\
    \ head)))\n                  (by_length (cd", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Two\" (number->string head))\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append \"Three\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Five\" (number->string head))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append \"Six\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (number->string head))\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (number->string\
    \ head))\n                  (by_length (cdr arr))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\" (reverse (sub1 arr)))\n  \
    \                (by_length (sub1 arr)))\n            (cons (symbol->string head)\
    \ (by_length (sub1 arr)))))\n      )\n    )\n  )\n", "  (if (null? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (symbol->string head) \"-\" (by_length (cdr arr)))\n        \
    \          (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr\
    \ arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Tw", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Tw", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (symbol->string head) \"-\" (symbol->string\
    \ head))\n                  (by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n     \
    \ (let ([head (car arr)])\n        (if (< head 9)\n            (cons (cons head\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")) (by_length (cdr arr)))\n            (cons (cons head (cons \"Ten\"\
    \ \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\"\
    \ \"Eighteen\" \"Nineteen\")) (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\"\
    \ \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"\
    ))\n                  (by_length (rest arr)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let ([head (first arr)])\n        (if (< head 9)\n          \
    \  (cons (cons head (cons \"One\" (by_length (rest arr))))\n                 \
    \ (by_length (rest arr)))\n            (cons (cons head (cons \"Two\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Three\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Four\" (by_length (rest arr))))\n\
    \                  (by_length (rest arr)))\n            (cons (cons head (cons\
    \ \"Five\" (by_length (rest arr))))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Six\" (by_length (rest arr))))\n       \
    \           (by_length (rest arr)))\n            (cons (cons head (cons \"Seven\"\
    \ (by_length (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (cons head (cons \"Eight\" (by_length (rest arr))))\n           \
    \       (by_length (rest arr)))\n            (cons (cons head (cons \"Nine\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))))))\n", "  (if (null?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (number->string head) \"One\")\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Zero\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (number->string head))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Two\"\
    \ (number->string head))\n                  (by_length (cdr arr)))\n         \
    \   (cons (string-append \"Three\" (number->string head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Four\" (number->string head))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Five\" (number->string head))\n                  (by_length (cdr arr)))\n    \
    \        (cons (string-append \"Six\" (number->string head))\n               \
    \   (by_length (cdr arr)))\n            (cons (string-append \"Seven\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eight\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nine\" (number->string head))\n          \
    \        (by_length (cdr arr))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (if (null? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string\
    \ head) (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      (list)\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\" (reverse (symbol->string head)))\n             \
    \     (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"-\") (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (string->string head)) (by_length (cdr\
    \ arr)))\n            (cons (string->string head) (by_length (cdr arr)))))\n \
    \     )\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (string->string head))\
    \ (rest_by_length (rest arr)))\n            (cons (string->symbol (string->string\
    \ head)) (by_length (rest_by_length (rest arr))))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Zero\")\n                  (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (string-append (number->string head) \"One\")\n            \
    \      (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (number->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (if (empty? arr)\n\
    \      (list)\n      (let ([head (first arr)])\n        (if (< head 9)\n     \
    \       (cons (string-append (name head) (reverse (subseq arr (+ head 1))))\n\
    \                  (by_length (subseq arr (+ head 1))))\n            (cons (string-append\
    \ (name head) (reverse (subseq arr (+ head 1))))\n                  (by_length\
    \ (subseq arr (+ head 1)))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr)\
    \ (cons (second arr) (by_length (rest arr))))]\n    [else (by_length (rest arr))]))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (list (number->string head)))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Nine\" (list (number->string head)))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head \"One\") (by_length (cdr arr)))\n         \
    \   (cons (cons head \"Nine\") (by_length (cdr arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (con", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (number->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n            (cons (string->string head) (by_length\
    \ (cdr arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr))\
    \ (cons (by_length (cdr arr)) (cons (car arr) empty))]\n    [else (cons (by_length\
    \ (cdr arr)) (cons (car arr) empty))]\n  ))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 10)\n            (cons (string-append (symbol->string\
    \ head) \" \") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append \"One\"\
    \ (number->string head))\n                  (by_length (cdr arr)))\n         \
    \   (cons (string-append \"Nine\" (number->string head))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (symbol->string head) \"-\" (symbol->string head))\n        \
    \          (by_length (cdr arr)))\n            (cons (symbol->string head)\n \
    \                 (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\" (symbol->string head)) (by_length (cdr arr)))\n\
    \            (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string-append (number->string head) \"One\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head (cons \"One\" (by_length (cdr arr))))\n   \
    \               (by_length (cdr arr)))\n            (cons (cons head (cons \"\
    Two\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n    \
    \        (cons (cons head (cons \"Three\" (by_length (cdr arr))))\n          \
    \        (by_length (cdr arr)))\n            (cons (cons head (cons \"Four\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Five\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Six\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Seven\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Eight\" (by_length (cdr arr))))\n      \
    \            (by_length (cdr arr)))\n            (cons (cons head (cons \"Nine\"\
    \ (by_length (cdr arr))))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (number->string head))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (number->string head))\n                  (by_length (cdr arr)))))\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))\n      (let ([head (car arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append \"One\" (number->string head))\n \
    \                 (by_length (cdr arr)))\n            (cons (string-append \"\
    Nine\" (number->string head))\n                  (by_length (cdr arr)))))\n  \
    \    (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))\n      (let ([head (car arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append \"One\" (number->string head))\n \
    \                 (by_length (cdr arr)))\n            (cons (string-append \"\
    Nine\" (number->string head))\n                  (by_length (cdr arr)))))\n  \
    \    (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))\n      (let ([head (car arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append \"One\" (number->string head))\n \
    \                 (by_length (cdr arr)))\n            (cons (string-append \"\
    Nine\" (number->string head))\n                  (by_length (cdr arr)))))\n  \
    \    (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Tw", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append \"One\" (number->string head))\n \
    \                 (by_length (rest arr)))\n            (cons (string-append \"\
    Nine\" (number->string head))\n                  (by_length (rest arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (number->string head))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (number->string head))\n                  (by_length (cdr arr)))\n         \
    \   (cons (string-append \"Two\" (number->string head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Three\" (number->string head))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Four\" (number->string head))\n                  (by_length (cdr arr)))\n    \
    \        (cons (string-append \"Five\" (number->string head))\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append \"Six\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (number->string head))\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (number->string\
    \ head))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([head (car arr)])\n        (if (< head 9)\n       \
    \     (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (string-to-int head))\n                  (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (number->string head))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (number->string head))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 10)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (cons (car arr) empty)]\n\
    \    [else (cons (car arr) (cons (by_length (cdr arr)) empty))]\n  ))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string-append \"One\" (string-to-int head))\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Two\" (string-to-int head))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Three\" (string-to-int head))\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append \"Four\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Five\" (string-to-int head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Six\" (string-to-int head))\n             \
    \     (by_length (cdr arr)))\n            (cons (string-append \"Seven\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eight\" (string-to-int head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nine\" (string-to-int head))\n           \
    \       (by_length (cdr arr))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Tw", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string->symbol (symbol->string head)) (by_length\
    \ (rest arr)))\n            (cons (string->symbol (symbol->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (reverse (sub1 head)))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (reverse (sub1 head)))\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))))\n      )\n    )\n  )\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (symbol->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (symbol->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\") (by_length (cdr arr)))\n\
    \            (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string->symbol (number->string head)) (by_length (cdr arr)))\n\
    \            (cons (string->symbol (number->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (number->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Nine\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Zero\")\n          \
    \        (by_length (cdr arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n \
    \   [(= (length arr) 1) (cons (car arr) empty)]\n    [else (cons (car arr) (cons\
    \ (by_length (cdr arr)) empty))]\n  ))\n", "  (if (null? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Tw", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (number->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (number->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\" (reverse (symbol->string (cadr\
    \ arr)))))\n            (cons (symbol->string head) (by_length (cdr arr)))))\n\
    \      )\n    )\n  )\n", "  (if (null? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (number->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Nine\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (string->string head)) (by_length (cdr\
    \ arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n    \
    \  (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string\
    \ head) (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([len (length\
    \ arr)])\n        (if (= len 0)\n            '()\n            (let ([head (car\
    \ arr)])\n              (if (< head 9)\n                  (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n                  (cons\
    \ (symbol->string head) (by_length (cdr arr))))))))\n", "  (if (null? arr)\n \
    \     '()\n      (let ([head (car arr)])\n        (if (< head 9)\n           \
    \ (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n      \
    \      (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (name head) (by_length (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (name head) (by_length (cdr arr)))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 10)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Ten\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Eleven\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Twelve\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Thirteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (number->string head) \"Fourteen\")\n                 \
    \ (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Fifteen\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Sixteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Seventeen\")\n     \
    \             (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Eighteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (number->string head) \"Nineteen\")\n                 \
    \ (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Twenty\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n   \
    \     (if (< head 9)\n            (cons (string-append (symbol->string head) \"\
    -\") (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr))\
    \ (cons (by_length_helper (car arr)) (by_length (cdr arr)))]\n    [else (by_length_helper\
    \ (car arr) (by_length (cdr arr)))]))\n", "  (if (null? arr)\n      '()\n    \
    \  (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n            (cons (symbol->string\
    \ head) (by_length (cdr arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n  \
    \  [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr))\
    \ empty))]\n    [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (number->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (cons head (cons \"\
    One\" (by_length (rest arr))))\n                  (by_length (rest arr)))\n  \
    \          (cons (cons head (cons \"Two\" (by_length (rest arr))))\n         \
    \         (by_length (rest arr)))\n            (cons (cons head (cons \"Three\"\
    \ (by_length (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (cons head (cons \"Four\" (by_length (rest arr))))\n            \
    \      (by_length (rest arr)))\n            (cons (cons head (cons \"Five\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Six\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Seven\" (by_length (rest\
    \ arr))))\n                  (by_length (rest arr)))\n            (cons (cons\
    \ head (cons \"Eight\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Nine\" (by_length (rest arr))))\n\
    \                  (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n   \
    \         (let ([head (first arr)])\n              (if (< head 10)\n         \
    \         (cons (string-append (symbol->string head) \" \") (by_length (rest arr)))\n\
    \                  (cons (symbol->string head) (by_length (rest arr))))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append \"One\"\
    \ (number->string head))\n                  (by_length (cdr arr)))\n         \
    \   (cons (string-append \"Nine\" (number->string head))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\" (symbol->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (symbol->string\
    \ head)\n                  (by_length (cdr arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n            (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append \"One\" (number->string head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Nine\" (number->string head))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Zero\"\
    )\n                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (first arr)])\n        (if (< head 10)\n           \
    \ (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (rest arr)))))))\n</cell>\n<cell>\n#lang racket\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string-append (symbol->string head) \"One\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Ten\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eleven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twelve\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Thirteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fourteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fifteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Sixteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seventeen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eighteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nineteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twenty\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (number?\
    \ head)\n            (cons (cons (by_length (rest arr)) (cons (by_length (rest\
    \ arr)) \"One\"))\n                  (by_length (rest arr)))\n            (cons\
    \ (by_length (rest arr)) (by_length (rest arr)))))\n      ))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (number->string head) \"One\")\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (cons head (cons \"One\"\
    \ \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\"\
    \ \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n                  (by_length (cdr\
    \ arr))))))\n", "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n\
    \        (if (= len 0)\n            '()\n            (let ([head (car arr)])\n\
    \              (if (< head 9)\n                  (cons (string-append (number->string\
    \ head) \" \") (by_length (cdr arr)))\n                  (cons (string-append\
    \ (number->string head) \" \") (by_length (cdr arr)))))\n            (let ([head\
    \ (car arr)])\n              (if (< head 9)\n                  (cons (string-append\
    \ (number->string head) \" \") (by_length (cdr arr)))\n                  (cons\
    \ (string-append (number->string head) \" \") (by_length (cdr arr)))))\n     \
    \       (let ([head (car arr)])\n              (if (< head 9)\n              \
    \    (cons (string-append (number->string head) \" \") (by_length (cdr arr)))\n\
    \                  (cons (string-append (number->string head) \" \") (by_length\
    \ (cdr arr)))))\n            (let ([head (car arr)])\n              (if (< head\
    \ 9)\n                  (cons (string-append (number->string head) \" \") (by_length\
    \ (cdr arr)))\n                  (cons (string-append (number->string head) \"\
    \ \") (by_length (cdr arr)))))\n            (let ([head (car arr)])\n        \
    \      (if (< head 9)\n                  (cons (string-append (number->string\
    \ head) \" \") (by_length (cdr arr)))\n                  (cons (string-append\
    \ (number->string head) \" \") (by_length (cdr arr)))))\n            (let ([head\
    \ (car arr)])\n              (if (< head 9)\n                  (cons (string-append\
    \ (number->string head) \" \") (by_length (cdr arr)))\n                  (cons\
    \ (string-append (number->string head) \" \") (by_length (cdr arr)))))\n     \
    \       (let ([head (car arr)])\n              (if (< head 9)\n              \
    \    (cons (string-append (number->string head) \" \") (by_length (cdr arr)))\n\
    \                  (cons (string-append (number->string head) \" \") (by_length\
    \ (cdr arr)))))\n            (let ([head (car arr)])\n              (if (< head\
    \ 9)\n                  (cons (string-append (number->string head) \" \") (by_length\
    \ (cdr arr)))\n                  (cons (string-", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 10)\n            (cons (string-append\
    \ (symbol->string head) \" \") (by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Ten\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eleven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twelve\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Thirteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fourteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fifteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Sixteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seventeen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eighteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nineteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twenty\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (symbol->string head) \"-\" (symbol->string\
    \ head))\n                  (by_length (rest arr)))\n            (cons (symbol->string\
    \ head)\n                  (by_length (rest arr)))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([head (first arr)])\n        (if (< head 9)\n     \
    \       (let ([tail (by_length (rest arr))])\n              (cons (cons head (cons\
    \ \"One\" tail)) tail))\n            (let ([tail (by_length (rest arr))])\n  \
    \            (cons (cons head (cons \"Two\" tail)) tail)))))\n", "  (if (null?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string->symbol (+ head 1)) (by_length (cdr arr)))\n         \
    \   (cons (string->symbol (+ head 9)) (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (string-append (symbol->string head) \"One\")\n            \
    \      (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (symbol->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (cons head (cons \"One\" (by_length (cdr arr))))\n                  (by_length\
    \ (cdr arr)))\n            (cons (cons head (cons \"Two\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Three\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Four\" (by_length (cdr arr))))\n       \
    \           (by_length (cdr arr)))\n            (cons (cons head (cons \"Five\"\
    \ (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n        \
    \    (cons (cons head (cons \"Six\" (by_length (cdr arr))))\n                \
    \  (by_length (cdr arr)))\n            (cons (cons head (cons \"Seven\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Eight\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Nine\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" (by_length (rest arr)))))\n            (cons (cons head (cons\
    \ \"Two\" (by_length (rest arr)))))\n            (cons (cons head (cons \"Three\"\
    \ (by_length (rest arr)))))\n            (cons (cons head (cons \"Four\" (by_length\
    \ (rest arr)))))\n            (cons (cons head (cons \"Five\" (by_length (rest\
    \ arr)))))\n            (cons (cons head (cons \"Six\" (by_length (rest arr)))))\n\
    \            (cons (cons head (cons \"Seven\" (by_length (rest arr)))))\n    \
    \        (cons (cons head (cons \"Eight\" (by_length (rest arr)))))\n        \
    \    (cons (cons head (cons \"Nine\" (by_length (rest arr)))))\n            (cons\
    \ (cons head (cons \"Ten\" (by_length (rest arr)))))\n            (cons (cons\
    \ head (cons \"Eleven\" (by_length (rest arr)))))\n            (cons (cons head\
    \ (cons \"Twelve\" (by_length (rest arr)))))\n            (cons (cons head (cons\
    \ \"Thirteen\" (by_length (rest arr)))))\n            (cons (cons head (cons \"\
    Fourteen\" (by_length (rest arr)))))\n            (cons (cons head (cons \"Fifteen\"\
    \ (by_length (rest arr)))))\n            (cons (cons head (cons \"Sixteen\" (by_length\
    \ (rest arr)))))\n            (cons (cons head (cons \"Seventeen\" (by_length\
    \ (rest arr)))))\n            (cons (cons head (cons \"Eighteen\" (by_length (rest\
    \ arr)))))\n            (cons (cons head (cons \"Nineteen\" (by_length (rest arr)))))\n\
    \            (cons (cons head (cons \"Twenty\" (by_length (rest arr)))))\n   \
    \         (cons (cons head (cons \"Twenty-one\" (by_length (rest arr)))))\n  \
    \          (cons (cons head (cons \"Twenty-two\" (by_length (rest arr)))))\n \
    \           (cons (cons head (cons \"Twenty-three\" (by_length (rest arr", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append \"One\" (string-to-int head))\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (string-to-int head))\n                  (by_length (cdr arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n\
    \            (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Ten\")\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Two\" (number->string head))\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append \"Three\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Four\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Five\" (number->string head))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append \"Six\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Seven\" (number->string head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eight\" (number->string head))\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append \"Nine\" (number->string\
    \ head))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (cons head (cons \"One\" (by_length (rest arr))))\n\
    \                  (by_length (rest arr)))\n            (cons (cons head (cons\
    \ \"Two\" (by_length (rest arr))))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Three\" (by_length (rest arr))))\n     \
    \             (by_length (rest arr)))\n            (cons (cons head (cons \"Four\"\
    \ (by_length (rest arr))))\n                  (by_length (rest arr)))\n      \
    \      (cons (cons head (cons \"Five\" (by_length (rest arr))))\n            \
    \      (by_length (rest arr)))\n            (cons (cons head (cons \"Six\" (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Seven\" (by_length (rest arr))))\n                  (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Eight\" (by_length (rest\
    \ arr))))\n                  (by_length (rest arr)))\n            (cons (cons\
    \ head (cons \"Nine\" (by_length (rest arr))))\n                  (by_length (rest\
    \ arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr))\
    \ (cons (by_length (cdr arr)) (cons (car arr) empty))]\n    [else (cons (by_length\
    \ (cdr arr)) (cons (car arr) empty))]\n  ))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \" \") (rest_by_length (rest arr)))\n            (cons\
    \ (symbol->string head) (rest_by_length (rest arr)))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \" \") (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \" \") (by_length (cdr\
    \ arr)))))\n        (if (= head 1)\n            (cons \"One\" (by_length (cdr\
    \ arr)))\n            (cons \"Two\" (by_length (cdr arr)))))\n  )\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length\
    \ (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\" (symbol->string\
    \ head)) (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (number->string\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (number->string head))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (cons head (cons \"One\" (by_length (rest arr))))\
    \ (cons \"Two\" (by_length (rest arr))))\n            (cons (cons head (cons \"\
    Two\" (by_length (rest arr)))) (cons \"Three\" (by_length (rest arr))))\n    \
    \        (cons (cons head (cons \"Three\" (by_length (rest arr)))) (cons \"Four\"\
    \ (by_length (rest arr))))\n            (cons (cons head (cons \"Four\" (by_length\
    \ (rest arr)))) (cons \"Five\" (by_length (rest arr))))\n            (cons (cons\
    \ head (cons \"Five\" (by_length (rest arr)))) (cons \"Six\" (by_length (rest\
    \ arr))))\n            (cons (cons head (cons \"Six\" (by_length (rest arr))))\
    \ (cons \"Seven\" (by_length (rest arr))))\n            (cons (cons head (cons\
    \ \"Seven\" (by_length (rest arr)))) (cons \"Eight\" (by_length (rest arr))))\n\
    \            (cons (cons head (cons \"Eight\" (by_length (rest arr)))) (cons \"\
    Nine\" (by_length (rest arr))))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (rev (cdr arr)))\n                  (by_length (cdr arr)))\n       \
    \     (cons (string-append \"Nine\" (rev (cdr arr)))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ (string-append \"One\"))\n                  (by_length (cdr arr)))\n       \
    \     (cons (string-append (symbol->string head) (string-append \"Two\"))\n  \
    \                (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) (string-append \"Three\"))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) (string-append \"Four\"\
    ))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Five\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Six\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Seven\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Eight\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Nine\"))\n                  (by_length\
    \ (cdr arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 10)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Ten\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eleven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twelve\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Thirteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fourteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fifteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Sixteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seventeen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eighteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nineteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twenty\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (+ head 1)) (by_length (cdr arr)))\n \
    \           (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string-append (number->string head) \"One\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([len\
    \ (length arr)])\n        (if (= len 0)\n            '()\n            (let ([head\
    \ (first arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 10)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< ", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\" (symbol->string head)) (by_length (rest arr)))\n            (cons\
    \ (symbol->string head) (by_length (rest arr)))))))\n", "  (if (null? arr)\n \
    \     '()\n      (let ([head (car arr)])\n        (if (< head 9)\n           \
    \ (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Three\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Ten\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Eleven\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Twelve\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Thirteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Fourteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (number->string head) \"Fifteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Sixteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Seventeen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eighteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Nineteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (first arr)) (cons (first arr) (map #(cons \"One\"\
    \ . %) (sort (rest arr))))]\n    [else (cons (first arr) (map #(cons \"One\" .\
    \ %) (sort (rest arr))))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(number?\
    \ (first arr)) (cons (first arr) (by_length (rest arr)))]\n    [else (cons (first\
    \ arr) (by_length (rest arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(= (length arr) 1) (list \"One\")]\n    [(< 1 (length arr)) (list \"One\")]\n\
    \    [else (let ([arr1 (by_length (sub1 arr))])\n            (append (map (lambda\
    \ (x) (cond [(< x 9) (list \"One\")\n                                        \
    \      [(= x 9) (list \"Nine\")]\n                                           \
    \   [(> x 9) (list \"Ten\")\n                                              [(=\
    \ x 8) \"Eight\"]\n                                              [(= x 7) \"Seven\"\
    ]\n                                              [(= x 6) \"Six\"]\n         \
    \                                     [(= x 5) \"Five\"]\n                   \
    \                           [(= x 4) \"Four\"]\n                             \
    \                 [(= x 3) \"Three\"]\n                                      \
    \        [(= x 2) \"Two\"]\n                                              [(=\
    \ x 1) \"One\"]\n                                              [else (list \"\
    ???\")])) arr1)]))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Ten\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eleven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Twelve\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Thirteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fourteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fifteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Sixteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seventeen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eighteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nineteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Tw", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) (string-append \"One\"))\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) (string-append \"Two\"))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) (string-append \"Three\"\
    ))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Four\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Five\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Six\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Seven\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Eight\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Nine\"))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\")) (rest_by_length (rest arr)))\n            (cons\
    \ (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"\
    Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\")) (rest_by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (cons head (cons \"One\" (by_length\
    \ (cdr arr)))))\n            (cons (cons head (cons \"Two\" (by_length (cdr arr)))))\n\
    \            (cons (cons head (cons \"Three\" (by_length (cdr arr)))))\n     \
    \       (cons (cons head (cons \"Four\" (by_length (cdr arr)))))\n           \
    \ (cons (cons head (cons \"Five\" (by_length (cdr arr)))))\n            (cons\
    \ (cons head (cons \"Six\" (by_length (cdr arr)))))\n            (cons (cons head\
    \ (cons \"Seven\" (by_length (cdr arr)))))\n            (cons (cons head (cons\
    \ \"Eight\" (by_length (cdr arr)))))\n            (cons (cons head (cons \"Nine\"\
    \ (by_length (cdr arr)))))\n            (cons (cons head (cons \"Ten\" (by_length\
    \ (cdr arr)))))\n            (cons (cons head (cons \"Eleven\" (by_length (cdr\
    \ arr)))))\n            (cons (cons head (cons \"Twelve\" (by_length (cdr arr)))))\n\
    \            (cons (cons head (cons \"Thirteen\" (by_length (cdr arr)))))\n  \
    \          (cons (cons head (cons \"Fourteen\" (by_length (cdr arr)))))\n    \
    \        (cons (cons head (cons \"Fifteen\" (by_length (cdr arr)))))\n       \
    \     (cons (cons head (cons \"Sixteen\" (by_length (cdr arr)))))\n          \
    \  (cons (cons head (cons \"Seventeen\" (by_length (cdr arr)))))\n           \
    \ (cons (cons head (cons \"Eighteen\" (by_length (cdr arr)))))\n            (cons\
    \ (cons head (cons \"Nineteen\" (by_length (cdr arr)))))\n            (cons (cons\
    \ head (cons \"Twenty\" (by_length (cdr arr)))))\n            (cons (cons head\
    \ (cons \"Thirty\" (by_length (cdr arr)))))\n            (cons (cons head (cons\
    \ \"Forty\" (by_length (cdr arr)))))\n            (con", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 10)\n       \
    \     (cons (cons head (cons \"One\" (by_length (rest arr)))) (cons head (cons\
    \ \"Two\" (by_length (rest arr))))) (cons head (cons \"Three\" (by_length (rest\
    \ arr))))) (cons head (cons \"Four\" (by_length (rest arr))))) (cons head (cons\
    \ \"Five\" (by_length (rest arr))))) (cons head (cons \"Six\" (by_length (rest\
    \ arr))))) (cons head (cons \"Seven\" (by_length (rest arr))))) (cons head (cons\
    \ \"Eight\" (by_length (rest arr))))) (cons head (cons \"Nine\" (by_length (rest\
    \ arr))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"-\") (by_length (cdr arr)))\n            (cons (symbol->string head) (by_length\
    \ (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Tw", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (string-to-int head))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Nine\" (string-to-int head))\n             \
    \     (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([nums (map number->string (reverse (range 1 9)))])\n        (map (lambda (x)\n\
    \               (if (<= (length x) 9)\n                   (cond [(= (substring\
    \ x 0 1) \"One\")\n                           (cond [(= (substring x 0 2) \"Two\"\
    )\n                                   (cond [(= (substring x 0 3) \"Three\")\n\
    \                                           (cond [(= (substring x 0 4) \"Four\"\
    )\n                                                  (cond [(= (substring x 0\
    \ 5) \"Five\")\n                                                          (cond\
    \ [(= (substring x 0 6) \"Six\")\n                                           \
    \                       (cond [(= (substring x 0 7) \"Seven\")\n             \
    \                                             (cond [(= (substring x 0 8) \"Eight\"\
    )\n                                                                  (cond [(=\
    \ (substring x 0 9) \"Nine\")\n                                              \
    \            (cond [(= (substring x 0 10) \"Ten\")\n                         \
    \                                         (cond [(= (substring x 0 11) \"Eleven\"\
    )\n                                                          (cond [(= (substring\
    \ x 0 12) \"Twelve\")\n                                                      \
    \            (cond [(= (substring x 0 13) \"Thirteen\")\n                    \
    \                                      (cond [(= (substring x 0 14) \"Fourteen\"\
    )\n                                                                  (cond [(=\
    \ (substring x 0 15) \"Fifteen\")\n                                          \
    \                (cond [(= (substring x 0 16) \"Sixteen\")\n                 \
    \                                                 (cond [(= (substring x 0 17)\
    \ \"Seventeen\")\n                                                          (cond\
    \ [(= (substring x 0 18) \"Eighteen\")\n                                     \
    \                             (cond [(= (substring x 0 19) \"Nineteen\")\n   \
    \                                                       (cond [(= (substring x\
    \ 0 20) \"Twenty\")\n                                                        \
    \          (cond [(= (substring x 0 21) \"Twenty-one\")\n                    \
    \                                      (cond [(= (substring x 0 22) \"Twenty-two\"\
    )\n                                                                  (cond [(=\
    \ (substring x 0 23) \"Twenty-three\")\n                                     \
    \                     (cond [(= (substring x 0 24) \"Twenty-four\")\n        \
    \                                                          (cond [(= (substring\
    \ x 0 25) \"Twenty-five\")\n                                                 \
    \         (cond [(= (substring x 0 26) \"Twenty-six\")\n                     \
    \                                             (cond [(= (substring x 0 27) \"",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (+ head 1)) (by_length (cdr arr)))\n \
    \           (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr))\
    \ (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr\
    \ arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (con", "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n\
    \        (if (= len 0)\n            '()\n            (let ([head (car arr)])\n\
    \              (if (< head 9)\n                  (cons (cons head (cons \"One\"\
    \ (cdr arr)))\n                        (by_length (cdr arr)))\n              \
    \    (cons (cons head (cons \"Two\" (cdr arr)))\n                        (by_length\
    \ (cdr arr)))\n                  (cons (cons head (cons \"Three\" (cdr arr)))\n\
    \                        (by_length (cdr arr)))\n                  (cons (cons\
    \ head (cons \"Four\" (cdr arr)))\n                        (by_length (cdr arr)))\n\
    \                  (cons (cons head (cons \"Five\" (cdr arr)))\n             \
    \           (by_length (cdr arr)))\n                  (cons (cons head (cons \"\
    Six\" (cdr arr)))\n                        (by_length (cdr arr)))\n          \
    \        (cons (cons head (cons \"Seven\" (cdr arr)))\n                      \
    \  (by_length (cdr arr)))\n                  (cons (cons head (cons \"Eight\"\
    \ (cdr arr)))\n                        (by_length (cdr arr)))\n              \
    \    (cons (cons head (cons \"Nine\" (cdr arr)))\n                        (by_length\
    \ (cdr arr))))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Tw", "  (if (null? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (list (number->string head)))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nine\" (list (number->string head)))\n   \
    \               (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")) (by_length (rest arr)))\n            (cons (cons head (cons\
    \ \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\"\
    \ \"Seventeen\" \"Eighteen\" \"Nineteen\")) (by_length (rest arr)))))))\n", " \
    \ (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\") (rest_by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (rest_by_length (rest arr)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
