name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt\
  \ \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt\
  \ \"et\")\n;; \"ix\"\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty?\
    \ s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n   \
    \       for j from 0 to (length s) by 2\n          collect (substring alpha (+\
    \ i j) (+ i j))\n          into alpha\n          finally (return (substring alpha\
    \ (+ i j) (+ i j)))))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          collect\
    \ (substring s i j) (set! alpha (+ alpha (substring alpha (+ i j) 1))))\n    (apply\
    \ join (map char->string alpha))))\n", "  (let ((alpha (make-array 26)))\n   \
    \ (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z)))\n    (map (lambda (c) (char alpha (char-code c))) s)))\n", "  (let\
    \ ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (map (lambda (x)\
    \ (char (char-code x) alpha (+ x 2))) s)\n    (map (lambda (x) (char (char-code\
    \ x) alpha (+ x 2))) alphabet)))\n", "  (let ((alpha (make-array 26 \n       \
    \                   :initial-contents '(a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z))))\n    (let loop ((i 0) (acc '()))\n      (cond\n        ((=\
    \ i 26) (append acc (reverse alpha)))\n        ((char-alphabetic? s (char-alphabetic?\
    \ alpha (+ i 1))) (loop (+ i 1) (append acc (list (char-rotated alpha (+ i 1))))))\n\
    \        (else (loop (+ i 1) (append acc (list (char-rotated alpha (+ i 1)))))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"\
    ]\n          [(char-alphabetic? s) (cons (char-alphabetic? s) alpha)]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else\
    \ (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else\
    \ (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [", "  (let ((alpha (make-array (length s) (lambda (x) (+ x\
    \ 2)))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (assoc alpha\
    \ (substring s i (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i\
    \ 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n\
    \      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          ", "  (let loop ((s s)\n             (alphabet (list 'a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))\n             (result '()))\n\
    \    (cond ((null? s) result)\n          ((char-alphabet (car alphabet)) (loop\
    \ (cdr s) alphabet result))\n          (else (loop (cdr s) (cons (car alphabet)\
    \ alphabet) \n                       (cons (car s) result))))))\n", "  (let ((alpha\
    \ (make-array 26)))\n    (define (rotate x y)\n      (cond ((< x 26) (rotate-left\
    \ x y))\n            ((< y 26) (rotate-left y x))\n            (else (rotate-left\
    \ x y))))\n    (define (rotate-left x y)\n      (set! alpha (rotate-right alpha\
    \ (- x y)))\n      (set! alpha (rotate-right alpha (- y x)))\n      (set! alpha\
    \ (rotate-right alpha (- x y)))\n      (set! alpha (rotate-right alpha (- y x))))\n\
    \    (define (rotate-right a b)\n      (let ((x (car a)))\n        (set! a (rotate-left\
    \ a b))\n        (set! b (rotate-left b x))))\n    (let ((x (car s))\n       \
    \   (y (length s)))\n      (set! alpha (rotate-right alpha (- x y)))\n      (set!\
    \ alpha (rotate-right alpha (- y x)))\n      (set! alpha (rotate-right alpha (-\
    \ x y)))\n      (set! alpha (rotate-right alpha (- y x))))\n    (let ((x (car\
    \ s))\n          (y (length s)))\n      (set! alpha (rotate-right alpha (- x y)))\n\
    \      (set! alpha (rotate-right alpha (- y x)))\n      (set! alpha (rotate-right\
    \ alpha (- x y)))\n      (set! alpha (rotate-right alpha (- y x))))\n    (let\
    \ ((x (car s))\n          (y (length s)))\n      (set! alpha (rotate-right alpha\
    \ (- x y)))\n      (set! alpha (rotate-right alpha (- y x)))\n      (set! alpha\
    \ (rotate-right alpha (- x y)))\n      (set! alpha (rotate-right alpha (- y x))))\n\
    \    (let ((x (car s))\n          (y (length s)))\n      (set! alpha (rotate-right\
    \ alpha (- x y)))\n      (set! alpha (rotate-right alpha (- y x)))\n      (set!\
    \ alpha (rotate-right alpha (- x y)))\n      (set! alpha (rotate-right alpha (-\
    \ y x))))\n    (let ((x (car s))\n          (y (length s)))\n      (set! alpha\
    \ (rotate-right alpha (- x y)))\n      (set! alpha (rotate-right alpha (- y x)))\n\
    \      (set! alph", "  (cond [(empty? s) \"\"]\n        [(equal? (first s) (first\
    \ '())) s]\n        [else (cons (first s)\n                    (encrypt (substring\
    \ s (+ 1 2))))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n      \
    \    (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))", "  (let loop ((s s)\n           \
    \  (result '()))\n    (if (null? s)\n        result\n        (loop (cdr s)\n \
    \             (cons (char->integer (char->string (car s))\n                  \
    \          (- char->integer (char->string (car s))\n                         \
    \               (char->integer (char->string (cdr s)))))\n                   \
    \ result)))))\n", "  (let loop ((s s)\n             (result '()))\n    (cond ((null?\
    \ s) result)\n          ((char=? (car s) 'a) (loop (cdr s) (cons (char=? (car\
    \ s) 'b) (loop (cdr s) result))))\n          ((char=? (car s) 'b) (loop (cdr s)\
    \ (cons (char=? (car s) 'a) (loop (cdr s) result))))\n          ((char=? (car\
    \ s) 'c) (loop (cdr s) (cons (char=? (car s) 'd) (loop (cdr s) result))))\n  \
    \        ((char=? (car s) 'd) (loop (cdr s) (cons (char=? (car s) 'e) (loop (cdr\
    \ s) result))))\n          ((char=? (car s) 'e) (loop (cdr s) (cons (char=? (car\
    \ s) 'f) (loop (cdr s) result))))\n          ((char=? (car s) 'f) (loop (cdr s)\
    \ (cons (char=? (car s) 'g) (loop (cdr s) result))))\n          ((char=? (car\
    \ s) 'g) (loop (cdr s) (cons (char=? (car s) 'h) (loop (cdr s) result))))\n  \
    \        ((char=? (car s) 'h) (loop (cdr s) (cons (char=? (car s) 'i) (loop (cdr\
    \ s) result))))\n          ((char=? (car s) 'i) (loop (cdr s) (cons (char=? (car\
    \ s) 'j) (loop (cdr s) result))))\n          ((char=? (car s) 'j) (loop (cdr s)\
    \ (cons (char=? (car s) 'k) (loop (cdr s) result))))\n          ((char=? (car\
    \ s) 'k) (loop (cdr s) (cons (char=? (car s) 'l) (loop (cdr s) result))))\n  \
    \        ((char=? (car s) 'l) (loop (cdr s) (cons (char=? (car s) 'm) (loop (cdr\
    \ s) result))))\n          ((char=? (car s) 'm) (loop (cdr s) (cons (char=? (car\
    \ s) 'n) (loop (cdr s) result))))\n          ((char=? (car s) 'n) (loop (cdr s)\
    \ (cons (char=? (", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C #\\D #\\E #\\F\
    \ #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\\
    W #\\X #\\Y #\\Z))\n             (c #(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7\
    \ #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\\
    9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\\
    - #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\\
    / #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\\
    1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\\
    3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\\
    5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n   \
    \       for j from 0 to (length s) by 2\n          collect (substring alpha (+\
    \ i j) 1))))\n", "  (let ((alpha (make-array 26)))\n    (let loop ((s s)\n   \
    \            (alpha alpha))\n      (if (null? s)\n          s\n          (let\
    \ ((char (car s))\n                (index (char-code char)))\n            (set!\
    \ alpha (rotate! alpha index (+ index 2))))\n          (loop (cdr s) alpha)))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          collect (alpha\
    \ (+ i j) c))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha (make-array 26 :initial-element #\\\
    a)))\n      (cond\n        ((null? s) (list s))\n        ((char=? (car s) #\\\
    a) (list s))\n        (else (loop (cdr s) (rotate-right alpha (char-code (car\
    \ s)))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \ (loop for i from 0 to (length s) do\n      (let ((c (char-code (char s (+ i\
    \ 1)))))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate!\
    \ alpha c))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha\
    \ (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n \
    \         (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ", "  (cond [(empty?\
    \ s) \"\"]\n        [(equal? (first s) (first '())) (cons (first s) (encrypt (rest\
    \ s)))]\n        [else (cons (first s) (encrypt (rotated (rest s) (first s))))]))\n",
  "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array alpha '(a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z)))\n    (string-append (substring\
    \ s 0 (string-length s))\n                   (substring alpha (string-length s)\
    \ (string-length s)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for c from 0 to (length s) by 2\n          for j from 0 to (length\
    \ s) by 2\n          when (char=? (char-ref s i c) alpha)\n          collect (cons\
    \ (char-ref s i c) \n                      (substring alpha (+ i 2) \n       \
    \                       (+ c 2) \n                              (+ j 2))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabetic? s) (append alpha (rotate (char s) alpha))]\n\
    \          [else (append alpha (rotate (char s) alpha))])))\n", "  (let ((alpha\
    \ (make-array 26)))\n    (set! alpha (rotate! alpha '(a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z)))\n    (string-append (map (lambda (c) (substring\
    \ alpha (char-code c) (char-code c))) s)\n                   (map (lambda (c)\
    \ (substring alpha (char-code c) (char-code c))) s))))\n", "  (let ((alpha (make-array\
    \ 26 (lambda (x) (+ x 2)))))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((alpha (make-array 26 (lambda (x) (+ x 2)))))\n        (loop for j from 0 to\
    \ 26 do\n          (set! alpha (assoc j alpha (- j i)))\n          (set! alpha\
    \ (assoc i alpha (- i j)))\n          (set! alpha (assoc j alpha (- j i)))\n \
    \         (set! alpha (assoc i alpha (- i j)))\n          (set! alpha (assoc j\
    \ alpha (- j i)))\n          (set! alpha (assoc i alpha (- i j)))\n          (set!\
    \ alpha (assoc j alpha (- j i)))\n          (set! alpha (assoc i alpha (- i j)))\n\
    \          (set! alpha (assoc j alpha (- j i)))\n          (set! alpha (assoc\
    \ i alpha (- i j)))\n          (set! alpha (assoc j alpha (- j i)))\n        \
    \  (set! alpha (assoc i alpha (- i j)))\n          (set! alpha (assoc j alpha\
    \ (- j i)))\n          (set! alpha (assoc i alpha (- i j)))\n          (set! alpha\
    \ (assoc j alpha (- j i)))\n          (set! alpha (assoc i alpha (- i j)))\n \
    \         (set! alpha (assoc j alpha (- j i)))\n          (set! alpha (assoc i\
    \ alpha (- i j)))\n          (set! alpha (assoc j alpha (- j i)))\n          (set!\
    \ alpha (assoc i alpha (- i j)))\n          (set! alpha (assoc j alpha (- j i)))\n\
    \          (set! alpha (assoc i alpha (- i j)))\n          (set! alpha (assoc\
    \ j alpha (- j i)))\n          (set! alpha (assoc i alpha (- i j)))\n        \
    \  (set! alpha (assoc j alpha (- j i)))\n          (set! alpha (assoc i alpha\
    \ (- i j)))\n          (set! alpha (assoc j alpha (- j i)))\n          (set! alpha\
    \ (assoc i alpha (- i j)))\n          (set! alpha (assoc j alph", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 3))\n      (set! alpha (rotate! alpha 4))\n\
    \      (set! alpha (rotate! alpha 5))\n      (set! alpha (rotate! alpha 6))\n\
    \      (set! alpha (rotate! alpha 7))\n      (set! alpha (rotate! alpha 8))\n\
    \      (set! alpha (rotate! alpha 9))\n      (set! alpha (rotate! alpha 10))\n\
    \      (set! alpha (rotate! alpha 11))\n      (set! alpha (rotate! alpha 12))\n\
    \      (set! alpha (rotate! alpha 13))\n      (set! alpha (rotate! alpha 14))\n\
    \      (set! alpha (rotate! alpha 15))\n      (set! alpha (rotate! alpha 16))\n\
    \      (set! alpha (rotate! alpha 17))\n      (set! alpha (rotate! alpha 18))\n\
    \      (set! alpha (rotate! alpha 19))\n      (set! alpha (rotate! alpha 20))\n\
    \      (set! alpha (rotate! alpha 21))\n      (set! alpha (rotate! alpha 22))\n\
    \      (set! alpha (rotate! alpha 23))\n      (set! alpha (rotate! alpha 24))\n\
    \      (set! alpha (rotate! alpha 25))\n      (set! alpha (rotate! alpha 26))\n\
    \      (set! alpha (rotate! alpha 27))\n      (set! alpha (rotate! alpha 28))\n\
    \      (set! alpha (rotate! alpha 29))\n      (set! alpha (rotate! alpha 30))\n\
    \      (set! alpha (rotate! alpha 31))\n      (set! alpha (rotate! alpha 32))\n\
    \      (set! alpha (rotate! alpha 33))\n      (set! alpha (rotate! alpha 34))\n\
    \      (set! alpha (rotate! alpha 35))\n      (set! alpha (rotate! alpha 36))\n\
    \      (set! alpha (rotate! alpha 37))\n      (set! alpha (rotate! ", "  (let\
    \ ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for i from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          collect (substring alpha (+ (char-code (char s (+ i j)) (- i j)) (-\
    \ i j)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it! I haven't learned about `map` yet, but I will definitely look\
    \ into it! I did try your code, but I got this error: `(encrypt \"gf\")\n\"kj\"",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (rotate-array alpha i)))\n        (set!\
    \ alpha (rotate-array alpha (i + 1))))\n    (string-append (map char->string alpha)\
    \ s))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let\
    \ loop ((s s)\n              (alpha alpha))\n      (cond\n        ((null? s) (list\
    \ s))\n        ((char=? (car s) #\\a) (cons #\\a (loop (cdr s) alpha)))\n    \
    \    ((char=? (car s) #\\z) (cons #\\z (loop (cdr s) alpha)))\n        (else (loop\
    \ (cdr s) (rotate-right alpha (car s))))))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (let loop ((s s)\n               (alpha (make-array\
    \ 26 :initial-element #\\a)))\n      (cond ((null? s) (list \"\"))\n         \
    \   ((char=? (car s) #\\a) (append alpha (list (car s))))\n            (else (loop\
    \ (cdr s) alpha)))))\n", "  (let loop ((s s)\n             (acc '()))\n    (cond\n\
    \      [(empty? s) (append acc (list '()))]\n      [(char=? (first s) 'a) (loop\
    \ (rest s) (cons (first s) acc))]\n      [(char=? (first s) 'b) (loop (rest s)\
    \ (cons (first s) (cons (first s) acc)))]\n      [(char=? (first s) 'c) (loop\
    \ (rest s) (cons (first s) (cons (first s) (cons (first s) acc))))]\n      [(char=?\
    \ (first s) 'd) (loop (rest s) (cons (first s) (cons (first s) (cons (first s)\
    \ (cons (first s) acc))))])\n      [(char=? (first s) 'e) (loop (rest s) (cons\
    \ (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) acc))))])\n\
    \      [(char=? (first s) 'f) (loop (rest s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) acc))))])\n      [(char=? (first s)\
    \ 'g) (loop (rest s) (cons (first s) (cons (first s) (cons (first s) (cons (first\
    \ s) (cons (first s) acc))))])\n      [(char=? (first s) 'h) (loop (rest s) (cons\
    \ (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) (cons\
    \ (first s) acc))))])\n      [(char=? (first s) 'i) (loop (rest s) (cons (first\
    \ s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first\
    \ s) acc))))])\n      [(char=? (first s) 'j) (loop (rest s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) acc))))])\n\
    \      [(char=? (first s) 'k) (loop (rest s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) acc))))])\n\
    \      [(char=? (first s) 'l) (loop (rest s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) (", "  (let ((alpha (make-array 26 (lambda (x) (+\
    \ x 2)))))\n    (let loop ((s s)\n               (alpha alpha))\n      (if (null?\
    \ s)\n          s\n          (let ((char (car s))\n                (index (char-code\
    \ char)))\n            (set! alpha (subarray alpha index (+ index (char-code (char-code\
    \ char))))\n                (set! alpha (subarray alpha 0 (+ index (char-code\
    \ (char-code char))))\n                (set! alpha (subarray alpha 0 (+ index\
    \ (char-code (char-code char))))\n                (set! alpha (subarray alpha\
    \ 0 (+ index (char-code (char-code char))))\n                (set! alpha (subarray\
    \ alpha 0 (+ index (char-code (char-code char))))\n                (set! alpha\
    \ (subarray alpha 0 (+ index (char-code (char-code char))))\n                (set!\
    \ alpha (subarray alpha 0 (+ index (char-code (char-code char))))\n          \
    \      (set! alpha (subarray alpha 0 (+ index (char-code (char-code char))))\n\
    \                (set! alpha (subarray alpha 0 (+ index (char-code (char-code\
    \ char))))\n                (set! alpha (subarray alpha 0 (+ index (char-code\
    \ (char-code char))))\n                (set! alpha (subarray alpha 0 (+ index\
    \ (char-code (char-code char))))\n                (set! alpha (subarray alpha\
    \ 0 (+ index (char-code (char-code char))))\n                (set! alpha (subarray\
    \ alpha 0 (+ index (char-code (char-code char))))\n                (set! alpha\
    \ (subarray alpha 0 (+ index (char-code (char-code char))))\n                (set!\
    \ alpha (subarray alpha 0 (+ index (char-code (char-code char))))\n          \
    \      (set! alpha (subarray alpha 0 (+ index (char-code (char-code char))))\n\
    \                (set! alpha (subarray alpha 0 (+ index (char-code (char-code\
    \ char))))\n                (set! alpha (subarray alpha 0 (+ index (char-code\
    \ (char-code char))))\n                (set! alpha (subarray alpha 0 (+ index\
    \ (char-code (char-code char))))\n                (set! alpha (subarray alpha\
    \ 0 (+ index (char-code (char-code char))))\n                (set! alpha (subarray\
    \ alpha 0 (+ index (char-code (char-code char))))\n                (set! alpha\
    \ (subarray alpha 0 (+ index", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (set!\
    \ alpha (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n     \
    \       (set! alpha (rotate! alpha 0))\n            (set! alpha (rotate! alpha\
    \ -1))\n            (set! alpha (rotate! alpha -2))\n            (set! alpha (rotate!\
    \ alpha -3))\n            (set! alpha (rotate! alpha -4))\n            (set! alpha\
    \ (rotate! alpha -5))\n            (set! alpha (rotate! alpha -6))\n         \
    \   (set! alpha (rotate! alpha -7))\n            (set! alpha (rotate! alpha -8))\n\
    \            (set! alpha (rotate! alpha -9))\n            (set! alpha (rotate!\
    \ alpha -10))\n            (set! alpha (rotate! alpha -11))\n            (set!\
    \ alpha (rotate! alpha -12))\n            (set! alpha (rotate! alpha -13))\n \
    \           (set! alpha (rotate! alpha -14))\n            (set! alpha (rotate!\
    \ alpha -15))\n            (set! alpha (rotate! alpha -16))\n            (set!\
    \ alpha (rotate! alpha -17))\n            (set! alpha (rotate! alpha -18))\n \
    \           (set! alpha (rotate! alpha -19))\n            (set! alpha (rotate!\
    \ alpha -20))\n            (set! alpha (rotate! alpha -21))\n            (set!\
    \ alpha (rotate! alpha -22))\n            (set! alpha (rotate! alpha -23))\n \
    \           (set! alpha (rotate! alpha -24))\n            (set! alpha (rotate!\
    \ alpha -25))\n            (set! alpha (rotate! alpha -26))\n            (set!\
    \ alpha (rotate! alpha -27))\n            (set! alpha (rotate! alpha -28))\n \
    \           (set! alpha (rotate! alpha -29))\n            (set! alpha (rotate!\
    \ alpha -30))\n            (set! alpha (rotate! alpha -31))\n            (set!\
    \ alpha (rotate! alpha -32))\n            (set! alpha (rotate! alpha -33))\n \
    \           (set! alpha (rotate! alpha -34))\n            (set! alpha (rotate!\
    \ alpha -35))\n            (set! alpha (rotate! alpha -36))\n            (set",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i length)\n          (let ((char (char-ref s i)))\n\
    \            (set! alpha (rotate-alpha (char-ref alpha char) (char-ref alpha char)))\n\
    \            (loop (+ i 1) alpha))\n          (set! alpha (rotate-alpha (char-ref\
    \ alpha char) (char-ref alpha char))\n            (loop (+ i 1) alpha))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabetic? s) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else\
    \ (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for c from 0 to 26\n          when (char=? (char-code (substring\
    \ s i c)) alpha)\n          collect (substring s i c))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) 0)\n          when\
    \ (= (mod j 26) 0)\n          when (= (mod k 26) 0)\n          do (set! alpha\
    \ (rotate! alpha #\\a)))\n    (loop for i from 0 to (length s) by 2\n        \
    \  for j from 0 to (length s) by 2\n          for k from 0 to (length s) by 2\n\
    \          when (= (mod i 26) 0)\n          when (= (mod j 26) 0)\n          when\
    \ (= (mod k 26) 0)\n          do (set! alpha (rotate! alpha #\\b)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          for k from 0 to (length s) by 2\n          when (= (mod i 26) 0)\n\
    \          when (= (mod j 26) 0)\n          when (= (mod k 26) 0)\n          do\
    \ (set! alpha (rotate! alpha #\\c)))\n    (loop for i from 0 to (length s) by\
    \ 2\n          for j from 0 to (length s) by 2\n          for k from 0 to (length\
    \ s) by 2\n          when (= (mod i 26) 0)\n          when (= (mod j 26) 0)\n\
    \          when (= (mod k 26) 0)\n          do (set! alpha (rotate! alpha #\\\
    d)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to (length\
    \ s) by 2\n          for k from 0 to (length s) by 2\n          when (= (mod i\
    \ 26) 0)\n          when (= (mod j 26) 0)\n          when (= (mod k 26) 0)\n \
    \         do (set! alpha (rotate! alpha #\\e)))\n    (loop for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          for k from 0 to\
    \ (length s) by 2\n          when (= (mod i 26) 0)\n          when (= (mod j 26)\
    \ 0)\n          when (= (mod k 26) 0)\n          do (set! alpha (rotate! alpha\
    \ #\\f)))\n    (loop for i from 0 to (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let loop ((s s)\n        \
    \     (result '()))\n    (if (empty? s)\n        result\n        (loop (rest s)\n\
    \              (cons (first s)\n                    (loop (rest s)\n         \
    \                 (cons (second s)\n                                result)))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let loop ((s s)\n  \
    \           (alphabet (list 'a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z))\n             (result '()))\n    (cond\n      [(empty? s) result]\n    \
    \  [(char-alphabet (first s)) (loop (rest s) alphabet (cons (first s) result))]\n\
    \      [else (loop (rest s) alphabet (cons (first s) result))])))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n    \
    \           (alpha alpha))\n      (cond\n        ((null? s) (append alpha '()))\n\
    \        ((char=? (car s) #\\a) (loop (cdr s) alpha))\n        (else (loop (cdr\
    \ s) (append alpha (list (car s)))))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha (make-array 26 :initial-element\
    \ #\\a)))\n      (cond\n        ((null? s) (append alpha (list #\\a)))\n     \
    \   ((char=? (car s) #\\a) (append alpha (list #\\b)))\n        ((char=? (car\
    \ s) #\\b) (append alpha (list #\\c)))\n        ((char=? (car s) #\\c) (append\
    \ alpha (list #\\d)))\n        ((char=? (car s) #\\d) (append alpha (list #\\\
    e)))\n        ((char=? (car s) #\\e) (append alpha (list #\\f)))\n        ((char=?\
    \ (car s) #\\f) (append alpha (list #\\g)))\n        ((char=? (car s) #\\g) (append\
    \ alpha (list #\\h)))\n        ((char=? (car s) #\\h) (append alpha (list #\\\
    i)))\n        ((char=? (car s) #\\i) (append alpha (list #\\j)))\n        ((char=?\
    \ (car s) #\\j) (append alpha (list #\\k)))\n        ((char=? (car s) #\\k) (append\
    \ alpha (list #\\l)))\n        ((char=? (car s) #\\l) (append alpha (list #\\\
    m)))\n        ((char=? (car s) #\\m) (append alpha (list #\\n)))\n        ((char=?\
    \ (car s) #\\n) (append alpha (list #\\o)))\n        ((char=? (car s) #\\o) (append\
    \ alpha (list #\\p)))\n        ((char=? (car s) #\\p) (append alpha (list #\\\
    q)))\n        ((char=? (car s) #\\q) (append alpha (list #\\r)))\n        ((char=?\
    \ (car s) #\\r) (append alpha (list #\\s)))\n        ((char=? (car s) #\\s) (append\
    \ alpha (list #\\t)))\n        ((char=? (car s) #\\t) (append alpha (list #\\\
    v)))\n        ((char=? (car s) #\\v) (append alpha (list #\\w)))\n        ((char=?\
    \ (car s) #\\w) (append alpha (list #\\x)))\n        ((char=? (car s) #", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n\
    \          for i from 0\n          for j from (- i 2)\n          for k from (-\
    \ j 2)\n          when (char=? (char-code c) alpha)\n          collect (rotate-char\
    \ (char-code c) i j k))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          collect (alpha (+ i j) (char->integer (char->string c))))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (if (empty? s)\n        acc\n\
    \        (loop (rest s)\n              (cons (first s) acc)))))\n", "  (let ((alpha\
    \ (make-array 26)))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j\
    \ k l m n o p q r s t u v w x y z)))\n    (string-append (map (lambda (c) (substring\
    \ alpha (char-code c) (char-code c)))\n                        (map char->string\
    \ s)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0 to 26\n          for j from 0 to 26\n\
    \          when (char=? c alpha)\n          collect (rotate-char (char-code c)\
    \ i j))))\n", "  (let loop ((s s)\n             (alphabet (list 'a 'b 'c 'd 'e\
    \ 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (if (null?\
    \ s)\n        '()\n        (cond ((char=? (first s) (first alphabet))\n      \
    \         (loop (rest s) (cons (first alphabet) (cons (second alphabet) (cons\
    \ (third alphabet) (cons (fourth alphabet) (cons (fifth alphabet) (cons (sixth\
    \ alphabet) (cons (seventh alphabet) (cons (eighth alphabet) (cons (ninth alphabet)\
    \ (cons (tenth alphabet) (cons (eleventh alphabet) (cons (twelfth alphabet) (cons\
    \ (thirteenth alphabet) (cons (fourteenth alphabet) (cons (fifteenth alphabet)\
    \ (cons (sixteenth alphabet) (cons (seventeenth alphabet) (cons (eighteenth alphabet)\
    \ (cons (nineteenth alphabet) (cons (twentieth alphabet) (cons (thirtieth alphabet)\
    \ (cons (fourtieth alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet)\
    \ (cons (seventieth alphabet) (cons (eightieth alphabet) (cons (ninetieth alphabet)\
    \ (cons (twentyeth alphabet) (cons (thirtieth alphabet) (cons (fourtieth alphabet)\
    \ (cons (fiftieth alphabet) (cons (sixtieth alphabet) (cons (seventieth alphabet)\
    \ (cons (eightieth alphabet) (cons (ninetieth alphabet) (cons (twentyeth alphabet)\
    \ (cons (thirtieth alphabet) (cons (fourtieth alphabet) (cons (fiftieth alphabet)\
    \ (cons (sixtieth alphabet) (cons (seventieth alphabet) (cons (eightieth alphabet)\
    \ (cons (ninetieth alphabet) (cons (twentyeth alphabet) (cons (thirtieth alphabet)\
    \ (cons (fourtieth alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet)\
    \ (cons (seventieth alphabet) (cons (eightieth alphabet) (cons (ninetieth alphabet)\
    \ (cons (twentyeth alphabet) (cons (thirtieth alphabet) (cons (fourtieth alphabet)\
    \ (cons (fiftieth alphabet) (cons (sixtieth alphabet) (cons (seventieth alphabet)\
    \ (con", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop\
    \ ((s s)\n               (alpha alpha))\n      (cond ((null? s) (list \"\"))\n\
    \            ((char= (first s) #\\a) (cons (first s) alpha))\n            (else\
    \ (loop (rest s) (rotate-left alpha (first s)))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n   \
    \       for j from 0 to (length s) by 2\n          collect (substring alpha (+\
    \ i j) (+ i j))\n          into alpha\n          finally (return (substring alpha\
    \ (+ i j) (+ i j)))))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          for l from 0 to (length s) by 2\n   \
    \       for m from 0 to (length s) by 2\n          for n from 0 to (length s)\
    \ by 2\n          for o from 0 to (length s) by 2\n          for p from 0 to (length\
    \ s) by 2\n          for q from 0 to (length s) by 2\n          for r from 0 to\
    \ (length s) by 2\n          for s from 0 to (length s) by 2\n          for t\
    \ from 0 to (length s) by 2\n          for u from 0 to (length s) by 2\n     \
    \     for v from 0 to (length s) by 2\n          for w from 0 to (length s) by\
    \ 2\n          for x from 0 to (length s) by 2\n          for y from 0 to (length\
    \ s) by 2\n          for z from 0 to (length s) by 2\n          for w from 0 to\
    \ (length s) by 2\n          for x from 0 to (length s) by 2\n          for y\
    \ from 0 to (length s) by 2\n          for z from 0 to (length s) by 2\n     \
    \     for w from 0 to (length s) by 2\n          for x from 0 to (length s) by\
    \ 2\n          for y from 0 to (length s) by 2\n          for z from 0 to (length\
    \ s) by 2\n          for w from 0 to (length s) by 2\n          for x from 0 to\
    \ (length s) by 2\n          for y from 0 to (length s) by 2\n          for z\
    \ from 0 to (length s) by 2\n          for w from 0 to (length s) by 2\n     \
    \     for x from 0 to (length s) by 2\n          for y from 0 to (length s) by\
    \ 2\n          for z from 0 to (length s) by 2\n          for w from 0 to (length\
    \ s) by 2\n          for x from 0 to (length s) by 2\n          for y from 0 to\
    \ (length s) by 2\n          for z from 0 to (length s) by 2\n          for w\
    \ from 0 to (length s) by 2\n          for x from 0 to (length s) by 2\n     \
    \     for y from 0 to (length s) by 2\n          for z from 0 to (length s) by\
    \ 2\n          for w from 0 to (length s) by 2\n          for x from 0 to (length\
    \ s) by 2\n          for y from 0 to (length s) by 2\n          for z from 0 to\
    \ (length ", "  (let ((alpha (make-array 26 (lambda (x) (+ x 2)))))\n    (do ((i\
    \ 0 (+ i 1))\n         (j (+ i 1))\n         (char (char-code (substring s i 1)))\n\
    \         (alpha (substring alpha (+ i 1))))\n        ((< i 26)\n         (set!\
    \ alpha (substring alpha (+ i 1))))\n      (set! alpha (substring alpha (+ j 1))\n\
    \            (substring alpha (+ i 1))\n            (substring alpha (+ j 1)))\n\
    \      (set! alpha (substring alpha (+ i 1))\n            (substring alpha (+\
    \ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (substring alpha (+ j 1))\n            (substring\
    \ alpha (+ i 1)))\n      (set! alpha (substring alpha (+ i 1))\n            (substring\
    \ alpha (+ j 1)))\n      (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (cons\
    \ (char-alphabet (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabet\
    \ (first s)) (encrypt (rest s))\n                       (alpha-shift alpha (char-alphabet\
    \ (first s))))]))\n", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C #\\D #\\E #\\F\
    \ #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\\
    W #\\X #\\Y #\\Z))\n             (c #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h\
    \ #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z))\n             (d #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J\
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n\
    \             (e #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\\
    l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \      (f #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (g #(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0))\n      (cond ((= i 0) (make-string s (length\
    \ s) alpha))\n            ((char-alphabet (char s (+ i 1))) (make-string s (length\
    \ s) alpha))\n            (else (loop (+ i 1))))))))\n", "  (let loop ((s s)\n\
    \             (alphabet (list 'a b c d e f g h i j k l m n o p q r s t u v w x\
    \ y z))\n             (result '()))\n    (cond\n      [(empty? s) result]\n  \
    \    [(equal? (first s) (first alphabet)) (loop (rest s) alphabet result)]\n \
    \     [(equal? (first s) (first alphabet)) (loop (rest s) (cons (first alphabet)\
    \ (cons (second alphabet) (cons (third alphabet) (cons (fourth alphabet) (cons\
    \ (fifth alphabet) (cons (sixth alphabet) (cons (seventh alphabet) (cons (eighth\
    \ alphabet) (cons (ninth alphabet) (cons (tenth alphabet) (cons (eleventh alphabet)\
    \ (cons (twelfth alphabet) (cons (thirteenth alphabet) (cons (fourteenth alphabet)\
    \ (cons (fifteenth alphabet) (cons (sixteenth alphabet) (cons (seventeenth alphabet)\
    \ (cons (eighteenth alphabet) (cons (nineteenth alphabet) (cons (twentieth alphabet)\
    \ (cons (thirtieth alphabet) (cons (fourtieth alphabet) (cons (fiftieth alphabet)\
    \ (cons (sixtieth alphabet) (cons (seventieth alphabet) (cons (eightieth alphabet)\
    \ (cons (ninetieth alphabet) (cons (twentyeth alphabet) (cons (thirtieth alphabet)\
    \ (cons (fourtieth alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet)\
    \ (cons (seventieth alphabet) (cons (eightieth alphabet) (cons (ninetieth alphabet)\
    \ (cons (twentyeth alphabet) (cons (thirtieth alphabet) (cons (fourtieth alphabet)\
    \ (cons (fiftieth alphabet) (cons (sixtieth alphabet) (cons (seventieth alphabet)\
    \ (cons (eightieth alphabet) (cons (ninetieth alphabet) (cons (twentyeth alphabet)\
    \ (cons (thirtieth alphabet) (cons (fourtieth alphabet) (cons (fiftieth alphabet)\
    \ (cons (sixtieth alphabet) (cons (seventieth alphabet) (cons (eightieth alphabet)\
    \ (cons (ninetieth alphabet) (cons (twentyeth alphabet) (cons (thirtieth alphabet)\
    \ (cons (fourtieth alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet)\
    \ (cons (seventieth alphabet) (cons (e", "  (let loop ((s s)\n             (alphabet\
    \ (list 'a b c d e f g h i j k l m n o p q r s t u v w x y z))\n             (result\
    \ '()))\n    (cond\n      [(empty? s) result]\n      [(equal? (first s) (first\
    \ alphabet)) (loop (rest s) alphabet (cons (first s) result))]\n      [else (loop\
    \ (rest s) alphabet (cons (first s) result))])))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((s s)\n               (alpha (make-array\
    \ 26 :initial-element #\\a)))\n      (cond ((null? s) (list \"\"))\n         \
    \   ((char= (first s) #\\a) (list \"\"))\n            (else (let ((alpha (rotate-array\
    \ alpha (char-code (first s)))))\n                    (loop (rest s) alpha)))))))\n",
  "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! ", "  (let loop ((s s)\n\
    \             (alphabet (list 'a b c d e f g h i j k l m n o p q r s t u v w x\
    \ y z))\n             (result '()))\n    (if (null? s)\n        result\n     \
    \   (loop (cdr s) (cons (car s) alphabet) (cons (car s) result)))))\n", "  (let\
    \ ((alpha (make-array 26)))\n    (set! alpha (rotate-array alpha '(a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z)))\n    (string-append (map alpha-char-at\
    \ s alpha) \"\")))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          collect (alpha (+ i j) (char->integer (char->string c))))))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ j))\n          (set! alpha (rotate! alpha (+ j 2)))\n          (set! alpha (rotate!\
    \ alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ j 0)))\n          (set!\
    \ alpha (rotate! alpha (+ j -1)))\n          (set! alpha (rotate! alpha (+ j -2)))\n\
    \          (set! alpha (rotate! alpha (+ j -1)))\n          (set! alpha (rotate!\
    \ alpha (+ j 0)))\n          (set! alpha (rotate! alpha (+ j 1)))\n          (set!\
    \ alpha (rotate! alpha (+ j 2)))\n          (set! alpha (rotate! alpha (+ j 3)))\n\
    \          (set! alpha (rotate! alpha (+ j 4)))\n          (set! alpha (rotate!\
    \ alpha (+ j 5)))\n          (set! alpha (rotate! alpha (+ j 6)))\n          (set!\
    \ alpha (rotate! alpha (+ j 7)))\n          (set! alpha (rotate! alpha (+ j 8)))\n\
    \          (set! alpha (rotate! alpha (+ j 9)))\n          (set! alpha (rotate!\
    \ alpha (+ j 10)))\n          (set! alpha (rotate! alpha (+ j 11)))\n        \
    \  (set! alpha (rotate! alpha (+ j 12)))\n          (set! alpha (rotate! alpha\
    \ (+ j 13)))\n          (set! alpha (rotate! alpha (+ j 14)))\n          (set!\
    \ alpha (rotate! alpha (+ j 15)))\n          (set! alpha (rotate! alpha (+ j 16)))\n\
    \          (set! alpha (rotate! alpha (+ j 17)))\n          (set! alpha (rotate!\
    \ alpha (+ j 18)))\n          (set! alpha (rotate! alpha (+ j 19)))\n        \
    \  (set! alpha (rotate! alpha (+ j 20)))\n          (set! alpha (rotate! alpha\
    \ (+ j 21)))\n          (set! alpha (rotate! alpha (+ j 22)))\n          (set!\
    \ alpha (rotate! alpha (+ j 23)))\n          ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i\
    \ 0))\n      (cond\n        ((null? s) (list \"\"))\n        ((char=? (char-code\
    \ s) (char alpha (+ i 2))) (list alpha (+ i 2)))\n        (else (loop (+ i 1)))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n            (loop for k from 0 to (length s) do\n\
    \              (let ((alpha (make-array 26 :initial-element #\\a)))\n        \
    \        (loop for l from 0 to (length s) do\n                  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                    (loop for m from 0 to (length\
    \ s) do\n                      (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                        (loop for n from 0 to (length s) do\n          \
    \                (let ((alpha (make-array 26 :initial-element #\\a)))\n      \
    \                      (loop for o from 0 to (length s) do\n                 \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                       (loop for p from 0 to (length s) do\n                \
    \                  (let ((alpha (make-array 26 :initial-element #\\a)))\n    \
    \                                (loop for q from 0 to (length s) do\n       \
    \                               (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                        (loop for r from 0 to (length s)\
    \ do\n                                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                            (loop for s from\n    \
    \                                                  0 to (length s) do\n      \
    \                                        (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                (loop for t from 0\
    \ to (length s) do\n                                                  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                  (loop for u from 0 to (length s) do\n                     \
    \                                 (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                        (loop for v\
    \ from 0 to (length s) do\n                                                  \
    \        (let ((alpha (make-array 26 :initial-element #\\a)))\n              \
    \                                              (loop for w from 0 to (length s)\
    \ do\n                                                              (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                              (loop for x from 0 to (length s) do\n         \
    \                                                         (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                      (loop for y from 0 to (length s) do\n                 \
    \                                                     (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                          (loop for z from ", "  (let ((alpha (make-array 26)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (substring (alpha\
    \ (+ i 26) 1) (+ i 26))))\n        (set! alpha (substring alpha (- i 1) (- i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 26) (+ i 26))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 26) (+ i 26))))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 26) (+ i 26))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 26) (+ i 26))))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 26) (+ i 26))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 26) (+ i 26))))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 26) (+ i 26))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 26) (+ i 26))))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (substring ", "  (let loop ((s s)\n  \
    \           (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n            \
    \ (b #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\0\
    \ #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z))\n             (d #(#\\! #\\\" #\\# #\\$ #\\% #\\& #\\( #\\) #\\\
    * #\\+ #\\, #\\- #\\. ; \\' #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8\
    \ #\\9 #\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (e #(#\\!\
    \ #\\\" #\\# #\\$ #\\% #\\& #\\( #\\) #\\* #\\+ #\\, #\\- #\\. ; \\' #\\/ #\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents \n                        \
    \  (lambda (x) (char->integer (char->string x)))))\n        (shift (make-array\
    \ 26 \n                       :initial-contents \n                       (lambda\
    \ (x) (char->integer (char->string x)))))\n    (loop for i from 0 to (length s)\
    \ do\n          (let ((char (char->string s (+ i 1)))\n                (index\
    \ (char->integer (char->string char))))\n            (set! alpha (subarray alpha\
    \ (+ index (* 2 shift))\n                              (+ index (* 2 shift))))\n\
    \            (set! shift (+ shift 2))))\n    (apply string-append (map string->char\
    \ (reverse alpha))))\n", "  (let ((alpha (make-array 26 \n                   \
    \       :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z))))\n    (loop for i from 0 to (length s) do\n          (let ((char (char-code\
    \ (substring s i 1)))\n                (alpha (substring alpha (+ i 1))))\n  \
    \          (set! alpha (substring alpha (- i 1))\n                   (substring\
    \ alpha (+ i 1))\n                   (substring alpha (+ i 1)))\n            (set!\
    \ alpha (substring alpha (+ i 1))\n                   (substring alpha (+ i 1))\n\
    \                   (substring alpha (+ i 1)))\n            (set! alpha (substring\
    \ alpha (+ i 1))\n                   (substring alpha (+ i 1))\n             \
    \      (substring alpha (+ i 1)))\n            (set! alpha (substring alpha (+\
    \ i 1))\n                   (substring alpha (+ i 1))\n                   (substring\
    \ alpha (+ i 1)))\n            (set! alpha (substring alpha (+ i 1))\n       \
    \            (substring alpha (+ i 1))\n                   (substring alpha (+\
    \ i 1)))\n            (set! alpha (substring alpha (+ i 1))\n                \
    \   (substring alpha (+ i 1))\n                   (substring alpha (+ i 1)))\n\
    \            (set! alpha (substring alpha (+ i 1))\n                   (substring\
    \ alpha (+ i 1))\n                   (substring alpha (+ i 1)))\n            (set!\
    \ alpha (substring alpha (+ i 1))\n                   (substring alpha (+ i 1))\n\
    \                   (substring alpha (+ i 1)))\n            (set! alpha (substring\
    \ alpha (+ i 1))\n                   (substring alpha (+ i 1))\n             \
    \      (substring alpha (+ i 1)))\n            (set! alpha (substring alpha (+\
    \ i 1))\n                   (substring alpha (+ i 1))\n                   (substring\
    \ alpha (+ i 1)))\n            (set! alpha (substring alpha (+ i 1))\n       \
    \            (substring alpha (+ i 1))\n                   (substring alpha (+\
    \ i 1)))\n            (set! alpha (substring alpha (+ i 1))\n                \
    \   (substring alpha (+ i 1))\n                   (substring alpha (+ i 1)))\n\
    \            (set! alpha (substring alpha (+ i 1))\n                   (substring\
    \ alpha (+ i 1))\n                   (substring alpha (+ i 1)))\n            (",
  "  (let ((alpha (make-array 26 \n                          :initial-contents \n\
    \                          (lambda (x) (char->integer (char->string x)))))\n \
    \       (shift (make-array 26 \n                       :initial-contents \n  \
    \                     (lambda (x) (char->integer (char->string x)))))\n    (let\
    \ loop ((i 0) (result '()))\n      (if (< i 26)\n          (loop (+ i 1) (cons\
    \ (char->integer (char->string (car alpha))) result))\n          (loop (+ i 1)\
    \ result))))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to\
    \ (length s) do\n      (let ((alpha (make-array 26)))\n        (loop for j from\
    \ 0 to 26 do\n          (set! alpha (subarray alpha 0 j) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (subarray alpha j (+\
    \ j 2)))\n          (set! alpha (subarray alpha j (+ j 2)) (subarray alpha 0 (+\
    \ j 2)))\n          (set! alpha (subarray alpha 0 (+ j 2)) (", "  (let loop ((s\
    \ s)\n             (acc '()))\n    (cond ((null? s) (append acc (list 'z)))\n\
    \          ((char=? (car s) 'z) (loop (cdr s) (cons (car s) acc)))\n         \
    \ (else (loop (cdr s) (cons (char-rot13 (car s)) acc))))))\n", "  (let loop ((s\
    \ s)\n             (result '()))\n    (if (null? s)\n        result\n        (loop\
    \ (cdr s)\n              (cons (char->integer (char->string (car s))\n       \
    \                     (char->integer (char->string (cadr s))))\n             \
    \       result)))))\n", "  (let ((alpha (make-array (length s) #:initial-element\
    \ #\\a)))\n    (do ((i 0 (+ i 1)))\n        ((< i length) (set! alpha (rotate-array\
    \ alpha i)))\n      (set! alpha (rotate-array alpha (- i 1))))\n    (map char->string\
    \ alpha)))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          when (= (modulo i 26) (modulo j 26))\n          do (set! alpha (rotate!\
    \ alpha #\\a)))\n    (loop for i from 0 to (length s) by 2\n          for j from\
    \ 0 to (length s) by 2\n          when (= (modulo i 26) (modulo j 26))\n     \
    \     do (set! alpha (rotate! alpha #\\b)))\n    (loop for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          when (= (modulo\
    \ i 26) (modulo j 26))\n          do (set! alpha (rotate! alpha #\\c)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          when (= (modulo i 26) (modulo j 26))\n          do (set! alpha (rotate!\
    \ alpha #\\d)))\n    (loop for i from 0 to (length s) by 2\n          for j from\
    \ 0 to (length s) by 2\n          when (= (modulo i 26) (modulo j 26))\n     \
    \     do (set! alpha (rotate! alpha #\\e)))\n    (loop for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          when (= (modulo\
    \ i 26) (modulo j 26))\n          do (set! alpha (rotate! alpha #\\f)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          when (= (modulo i 26) (modulo j 26))\n          do (set! alpha (rotate!\
    \ alpha #\\g)))\n    (loop for i from 0 to (length s) by 2\n          for j from\
    \ 0 to (length s) by 2\n          when (= (modulo i 26) (modulo j 26))\n     \
    \     do (set! alpha (rotate! alpha #\\h)))\n    (loop for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          when (= (modulo\
    \ i 26) (modulo j 26))\n          do (set! alpha (rotate! alpha #\\i)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          ", "  (let loop ((s s)\n        \
    \     (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\0 #\\1 #\\2\
    \ #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\\
    Z))\n             (d #(#\\! #\\\" #\\# #\\$ #\\% #\\& #\\* #\\( #\\) #\\= #\\\
    + #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (e #(#\\! #\\\" #\\# #\\$ #\\\
    % #\\& #\\* #\\( #\\) #\\= #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\\
    6 #\\7 #\\8 #\\9 #\\A #\\B #\\", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (loop for i from\
    \ 0 to (length s) do\n          (set! alpha (subarray alpha (+ i (* 2 2))))\n\
    \          (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set!\
    \ alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray\
    \ alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2)\
    \ (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n  \
    \        (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha\
    \ (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha\
    \ (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2\
    \ 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n       \
    \   (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray\
    \ alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2)\
    \ (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n  \
    \        (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha\
    \ (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha\
    \ (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2\
    \ 2))))\n          (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n       \
    \   (set! alpha (subarray alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray\
    \ alpha (+ (* 2 2) (* 2 2))))\n          (set! alpha (subarray alpha (+ (* 2 2)\
    \ (* 2 2))))\n          ", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (loop\
    \ for k from 0 to (length s) do\n              (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                (loop for l from 0 to (length s) do\n             \
    \     (let ((alpha (make-array 26 :initial-element #\\a)))\n                 \
    \   (loop for m from 0 to (length s) do\n                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                        (loop for n from 0 to (length\
    \ s) do\n                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                            (loop for o from 0 to (length s) do\n \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                (loop for p from 0 to (length s) do\n  \
    \                                (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                    (loop for q from 0 to (length s)\
    \ do\n                                      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                        (loop for r from 0 to (length\
    \ s) do\n                                          (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                            (loop\
    \ for s from\n                                                      0 to (length\
    \ s) do\n                                              (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \  (loop for t from 0 to (length s) do\n                                     \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                                           (loop for u from 0 to (length s) do\n\
    \                                                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \          (loop for v from 0 to (length s) do\n                             \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                                            (loop for w\
    \ from 0 to (length s) do\n                                                  \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                      (loop for x from 0 to (length\
    \ s) do\n                                                                  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                                          (loop for y from 0 to (length s) do\n\
    \                                                                      (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                      (loop for z from ", "  (let loop ((s s)\n\
    \             (result '()))\n    (cond ((null? s) result)\n          ((char-alphabet\
    \ (first s)) (loop (rest s) (cons (first s) result)))\n          (else (loop (rest\
    \ s) (cons (first s) result))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha alpha))\n      (cond\n\
    \        ((null? s) s)\n        ((char=? (car s) #\\a) (loop (cdr s) alpha))\n\
    \        (else (let ((char (char-code (car s))))\n                 (set! alpha\
    \ (rotate! alpha char (char-code (car s))))\n                 (loop (cdr s) alpha)))))))\n",
  "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (do ((i 0\
    \ (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha (- i\
    \ 1))))\n    (string-append (map alpha (map char->integer (string->list s))))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (cond ((null? s) acc)\n      \
    \    ((char-alphabet (first s)) (loop (rest s) (cons (first s) acc)))\n      \
    \    (else (loop (rest s) (cons (first s) (cons (first s) acc)))))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n    \
    \           (alpha (make-array 26 :initial-element #\\a)))\n      (cond ((null?\
    \ s) (list \"\"))\n            ((char= (first s) #\\a) (cons alpha (loop (rest\
    \ s) alpha)))\n            (else (cons (char->integer (first s)) (loop (rest s)\
    \ (sub1 alpha))))))))\n", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\\
    c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7\
    \ #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 ", "  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first ", " \
    \ (let ((alpha (make-array 26 \n                          :initial-contents \n\
    \                          (lambda (x) (char->integer (char->string x)))))\n \
    \       (shift (make-array 26 \n                       :initial-contents \n  \
    \                     (lambda (x) (char->integer (char->string x)))))\n    (loop\
    \ for i from 0 to (length s) do\n          (let ((c (char->integer (char->string\
    \ s (+ i 1)))))\n            (set! alpha (assoc c alpha))\n            (set! shift\
    \ (assoc c shift))\n            (set! alpha (rotate! alpha 2))\n            (set!\
    \ alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 1))\n     \
    \       (set! alpha (assoc c alpha))\n            (set! shift (rotate! shift 1))\n\
    \            (set! shift (rotate! shift 1))\n            (set! shift (rotate!\
    \ shift 1))\n            (set! shift (assoc c shift))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 1))\n\
    \            (set! alpha (assoc c alpha))\n            (set! shift (rotate! shift\
    \ 1))\n            (set! shift (rotate! shift 1))\n            (set! shift (rotate!\
    \ shift 1))\n            (set! shift (assoc c shift))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 1))\n\
    \            (set! alpha (assoc c alpha))\n            (set! shift (rotate! shift\
    \ 1))\n            (set! shift (rotate! shift 1))\n            (set! shift (rotate!\
    \ shift 1))\n            (set! shift (assoc c shift))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 1))\n\
    \            (set! alpha (assoc c alpha))\n            (set! shift (rotate! shift\
    \ 1))\n            (set! shift (rotate! shift 1))\n            (set! shift (rotate!\
    \ shift 1))\n            (set! shift (assoc c shift))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 1))\n\
    \            (set! alph", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) by 2\n          for c from 0 to (length\
    \ s)\n          when (char=? (char-ref s i) (car alpha))\n          collect (rotate-char\
    \ (char-ref s i) (car alpha) (cdr alpha))\n          finally (set! alpha (rotate-array\
    \ alpha #\\a))))\n  ", "  (let ((alpha (make-array 26)))\n    (let loop ((i 0))\n\
    \      (set! alpha (rotate! alpha i))\n      (set! i (+ i 2))\n      (cons (char\
    \ (char-code (substring s i i)) alpha) \n            (loop (+ i 1))))))\n", " \
    \ (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (loop for i from 0 to (length s) do\n    \
    \      (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 2))))\n       \
    \   (set! alpha (substring alpha (+ i 1) (+ i 2))))\n    (string-append (substring\
    \ alpha (length s) (length s))\n                  (substring alpha (length s)\
    \ (length s)))))\n", "  (let loop ((s s)\n             (acc '()))\n    (if (null?\
    \ s)\n        acc\n        (loop (cdr s)\n              (cons (char->integer (char->string\
    \ (car s))) acc)))))\n", "  (let loop ((s s)\n             (acc '()))\n    (if\
    \ (null? s)\n        acc\n        (loop (cdr s)\n              (cons (char->int\
    \ (first s)) (cons (char->int (first acc)) acc)))))\n  ", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))\n    (loop for i from 0 to (length s) do\n   \
    \       (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha)\n   \
    \       collect (cond ((char=? c #\\a) (char=? (char-after c (+ i 2)) #\\a))\n\
    \                       ((char=? c #\\b) (char=? (char-after c (+ i 2)) #\\b))\n\
    \                       ((char=? c #\\c) (char=? (char-after c (+ i 2)) #\\c))\n\
    \                       ((char=? c #\\d) (char=? (char-after c (+ i 2)) #\\d))\n\
    \                       ((char=? c #\\e) (char=? (char-after c (+ i 2)) #\\e))\n\
    \                       ((char=? c #\\f) (char=? (char-after c (+ i 2)) #\\f))\n\
    \                       ((char=? c #\\g) (char=? (char-after c (+ i 2)) #\\g))\n\
    \                       ((char=? c #\\h) (char=? (char-after c (+ i 2)) #\\h))\n\
    \                       ((char=? c #\\i) (char=? (char-after c (+ i 2)) #\\i))\n\
    \                       ((char=? c #\\j) (char=? (char-after c (+ i 2)) #\\j))\n\
    \                       ((char=? c #\\k) (char=? (char-after c (+ i 2)) #\\k))\n\
    \                       ((char=? c #\\l) (char=? (char-after c (+ i 2)) #\\l))\n\
    \                       ((char=? c #\\m) (char=? (char-after c (+ i 2)) #\\m))\n\
    \                       ((char=? c #\\n) (char=? (char-after c (+ i 2)) #\\n))\n\
    \                       ((char=? c #\\o) (char=? (char-after c (+ i 2)) #\\o))\n\
    \                       ((char=? c #\\p) (char=? (char-after c (+ i 2)) #\\p))\n\
    \                       ((char=? c #\\q) (char=? (char-after c (+ i 2)) #\\q))\n\
    \                       ((char=? c #\\r) (char=? (char-after c (+ i 2)) #\\r))\n\
    \                       ((char=? c #\\s) (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((c (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((s s)\n               (alpha (make-array\
    \ 26 :initial-element #\\a)))\n      (cond\n        ((null? s) (list \"\"))\n\
    \        ((char=? (car s) #\\a) (list \"\"))\n        (else (let ((char (char-code\
    \ (car s))))\n                 (cond\n                  ((char=? (car s) #\\a)\
    \ (loop (cdr s) (rotate-left alpha char)))\n                  ((char=? (car s)\
    \ #\\z) (loop (cdr s) (rotate-left alpha char)))\n                  ((char=? (car\
    \ s) #\\z) (loop (cdr s) (rotate-right alpha char)))\n                  ((char=?\
    \ (car s) #\\a) (loop (cdr s) (rotate-right alpha char))))))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha (make-array 26 :initial-element #\\a)))\n      (cond\n        ((null?\
    \ s) (make-string 0 \"\"))\n        ((char=? (car s) #\\a) (make-string 0 \"\"\
    ))\n        (else (loop (cdr s) alpha))\n      )\n      (let ((alpha (rotate-array\
    \ alpha #\\a)))\n        (loop (car s) alpha)\n      )\n    )\n  )\n)\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n    \
    \          (alpha (make-array 26 :initial-element #\\a)))\n      (cond ((null?\
    \ s) (list \"\"))\n            ((char=? (car s) #\\a) (append alpha (list #\\\
    a)))\n            (else (loop (cdr s) (append alpha (list (char-code (car s)))))))))\n",
  "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\\
    i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (b #(#\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \      (c #(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (d #(#\\d #\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n             (e #(#\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n  \
    \           (f #(#\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (g #(#\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (h #(#\\h #\\i #\\j #\\k #\\l #\\m ", "  (let loop ((s s)\n    \
    \         (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n            \
    \ (b #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\1\
    \ #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 ", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i\
    \ 0) (acc '()))\n      (if (< i (length s))\n          (loop (+ i 1) (cons alpha\
    \ (substring s i (+ i 1))))\n          (loop (+ i 1) acc)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for j from 0 to (length s) by 2\n          collect (substring\
    \ alpha (+ (* i 26) (* j 26))\n                           (+ (* i 26) (* j 26)))))\n\
    </code>\n<|/ a |>\n<| c |>\nThank you so much! This was very helpful.\n<|/ c |>\n\
    <| a |>\nHere's a solution using only standard library functions:\n<code>", " \
    \ (let ((alpha (make-alphabet (length s))))\n    (let loop ((s s)\n          \
    \     (alpha (alpha-to-rotated alpha)))\n      (if (null? s)\n          s\n  \
    \        (let ((c (char-ref s 0)))\n            (set! alpha (alpha-to-rotated\
    \ alpha))\n            (set! alpha (rotate-letter c alpha))\n            (loop\
    \ (substring s 1)\n                   (alpha-to-rotated alpha)))))\n    (alpha-to-rotated\
    \ alpha)))\n", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (shift (make-array\
    \ 26 \n                        :initial-contents '(#\\1 #\\2 #\\3 #\\4 #\\5 #\\\
    6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\* #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0))\n        (result\
    \ (make-array 26 \n                         :initial-contents '(#\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 ", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z))\n             (b #(#\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (c #(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (d #(#\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\v #\\w #\\x #\\y #\\z))\n             (e #(#\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (f #(#\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (g #(#\\g #\\h #\\i\
    \ #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (h #(#\\h #\\i #\\j #\\k #\\l #\\m ", "  (let loop ((s s)\n\
    \             (acc '()))\n    (if (null? s)\n        acc\n        (loop (cdr s)\n\
    \              (cons (char->int (first s)) (cons (char->int (first acc)) acc))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabetic? s) (cons (char-rot13 (char-alphabetic? s)) alpha)]\n\
    \          [else (cons (char-rot13 (char-alphabetic? s)) alpha)]))) \n", "  (let\
    \ ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha\
    \ (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha\
    \ (rotate! alpha -2))\n", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\\
    c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\b #\\c #\\d #\\e #\\f\
    \ #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z))\n             (c #(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (d #(#\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (e #(#\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n             (f #(#\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \      (g #(#\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\v #\\w #\\x #\\y #\\z))\n             (h #(#\\h #\\i #\\j #\\k #\\l #\\m ",
  "  (let loop ((s s)\n             (a
  "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array alpha '(a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z)))\n    (map (lambda (c) (substring\
    \ alpha (char-code c) (char-code c)))\n         (string-append s (map char->string\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))))\n", "  (let ((alpha\
    \ (make-array 26)))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (subarray alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (car\
    \ s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (char->integer\
    \ (char->string (cdr s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (char->integer (char->string (car s))))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (cdr s))))\n\
    \      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (char->integer\
    \ (char->string (car s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (char->integer (char->string (cdr s))))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (car s))))\n\
    \      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (char->integer\
    \ (char->string (cdr s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (char->integer (char->string (car s))))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (cdr s))))\n\
    \      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (char->integer\
    \ (char->string (car s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (char->integer (char->string (cdr s))))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (car s))))\n\
    \      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (char->integer\
    \ (char->string (cdr s))))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (char->integer (char->string (car s))))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (char->integer (char->string (cdr s))))\n\
    \      (set! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 3))\n      (set! alpha (rotate! alpha 6))\n      (set!\
    \ alpha (rotate! alpha 9))\n      (set! alpha (rotate! alpha 12))\n      (set!\
    \ alpha (rotate! alpha 15))\n      (set! alpha (rotate! alpha 18))\n      (set!\
    \ alpha (rotate! alpha 21)))\n    (string-append (substring s 0 i) alpha)))\n",
  "  (let ((alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i 0)\
    \ (result '()))\n      (if (< i (length s))\n          (let ((char (char-code\
    \ (substring s i 1)))\n                (alpha (subseq alpha (+ i 1) (+ i 1))))\n\
    \            (if (char-alphabetic? char)\n                (loop (+ i 1) (cons\
    \ (char-code char) (cons char (subseq result (+ i 1) (+ i 1)))))\n           \
    \     (loop (+ i 1) (cons (char-code char) (cons (char-code char) (subseq result\
    \ (+ i 1) (+ i 1))))))\n          result))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n      \
    \    for j from 0 to (length s) by 2\n          for k from 0 to (length s) by\
    \ 2\n          when (= (modulo i 26) (modulo j 26) (modulo k 26))\n          do\
    \ (set! alpha (rotate! alpha #\\a)))\n    (string-append (map (lambda (c) (char\
    \ c alpha)) s))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (alpha-char (alpha (char-alphabet\
    \ (first s))))]\n          [else (alpha-char (alpha (char-alphabet (first s))))]))\n",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i alpha-length) \n          (loop (+ i 1) (rotate-alphabet\
    \ alpha (- i 1))) \n          (let ((char (char-ref s i)))\n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphabet alpha (+ i 1))) \n            (set!\
    \ alpha (rotate-alphabet alpha (+ i 1))) \n            (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))) \n            (set! alpha (rotate-alphabet alpha (+ i 1))) \n\
    \            (set! alpha (rotate-alphab", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) by 2\n          for c from 0 to\
    \ 26\n          when (char=? (char-code (char s i c)) #\\a)\n          collect\
    \ (char alpha (+ c 1))\n          else collect (char alpha (+ i 1)))))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n\
    \               (alpha (make-array 26 :initial-element #\\a)))\n      (if (empty?\
    \ s)\n          s\n          (let ((char (car s))\n                (alpha (sub1\
    \ alpha)))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub1 alpha))\n            (set! alpha (sub1\
    \ alpha))\n            (set! alpha (sub", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array (length\
    \ s) #:initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n    \
    \      (set! alpha (rotate! alpha i #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha i #\\b)))\n    (loop for i from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha i #\\c)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha i #\\d)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ i #\\e)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha i #\\f)))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha i #\\g)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha i #\\h)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha i #\\i)))\n    (loop for i from 0 to\
    \ (length s) do\n          (set! alpha (rotate! alpha i #\\j)))\n    (loop for\
    \ i from 0 to (length s) do\n          (set! alpha (rotate! alpha i #\\k)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ i #\\l)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha i #\\m)))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha i #\\n)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha i #\\o)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha i #\\p)))\n    (loop for i from 0 to\
    \ (length s) do\n          (set! alpha (rotate! alpha i #\\q)))\n    (loop for\
    \ i from 0 to (length s) do\n          (set! alpha (rotate! alpha i #\\r)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ i #\\s)))\n    (loop for i ", "  (let ((alpha (make-array 26 \n            \
    \              :initial-contents (list #\\a))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! ", "  (cond\
    \ [(empty? s) \"\"]\n        [(equal? (first s) \"z\") (encrypt (substring s \"\
    z\" 1))]\n        [(equal? (first s) \"a\") (encrypt (substring s \"a\" 1))]\n\
    \        [else (cons (first s)\n                    (encrypt (substring s (+ 1\
    \ 1) (length s))))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"]\n     \
    \     [(char-alphabetic? s) (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else\
    \ (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n              (alpha (make-array 26 :initial-element\
    \ #\\a)))\n      (cond ((null? s) (list \"\"))\n            ((char= (first s)\
    \ #\\a) (append alpha (make-array 26 :initial-element #\\b)))\n            (else\
    \ (loop (rest s) (append alpha (make-array 26 :initial-element #\\b))))))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (if (empty? s)\n        acc\n\
    \        (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           acc)))))))\n", "  (cond [(empty? s) \"\"]\n        [(equal? (first\
    \ s) 'a) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'b) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'c) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'd) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'e) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'f) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'g) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'h) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'i) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'j) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'k) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'l) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'm) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'n) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'o) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'p) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'q) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'r) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 's) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 't) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'u) (cons (first s) (encrypt (substring s 2)))]\n        [(equal? (first\
    \ s) 'v) (cons (first s) (encrypt (substring s ", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))\n    (let loop ((i 0))\n      (cond\n        ((=\
    \ i 26) (encrypt s))\n        ((char=? (char-code s) (substring alpha (+ i 1)))\
    \ (substring alpha (+ i 1)))\n        (else (loop (+ i 1)))))))\n", "  (let loop\
    \ ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (b #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n       \
    \      (c #(#\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\\
    / #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\\
    1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\\
    2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\\
    3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\\
    4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\\
    5 #\\6 #\\7 #\\8 #\\9 ", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\\
    c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g\
    \ #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z))\n             (d #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\\
    Z))\n             (e #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n  \
    \           (f #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n            \
    \ (g #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (rotate-array alpha (- (length s) i))))\n      (set!\
    \ alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-array alpha (- (length s) i))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-array alpha (- (length\
    \ s) i))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-array\
    \ alpha (- (length s) i))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (rotate-array alpha (- (length s) i))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-array alpha (- (length s) i))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-array alpha (- (length\
    \ s) i))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-array\
    \ alpha (- (length s) i))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (rotate-array alpha (- (length s) i))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-array alpha (- (length s) i))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-array alpha (- (length\
    \ s) i))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-array\
    \ alpha (- (length s) i))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (rotate-array alpha (- (length s) i))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-array alpha (- (length s) i))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-array alpha (- (length\
    \ s) i))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-array\
    \ alpha (- (length s) i))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (rotate-array alpha (- (length s) i))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-array alpha (-", "  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right))\n    (set! alpha (rotate! alpha 'down))\n    (set! alpha (rotate! alpha\
    \ 'up))\n    (set! alpha (rotate! alpha 'left))\n    (set! alpha (rotate! alpha\
    \ 'right", "  (let ((alpha (make-array 26)))\n    (set! alpha (make-array (length\
    \ s) #\\0))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set!\
    \ alpha (rotate! alpha i #\\A))\n      (set! alpha (rotate! alpha i #\\B))\n \
    \     (set! alpha (rotate! alpha i #\\C))\n      (set! alpha (rotate! alpha i\
    \ #\\D))\n      (set! alpha (rotate! alpha i #\\E))\n      (set! alpha (rotate!\
    \ alpha i #\\F))\n      (set! alpha (rotate! alpha i #\\G))\n      (set! alpha\
    \ (rotate! alpha i #\\H))\n      (set! alpha (rotate! alpha i #\\I))\n      (set!\
    \ alpha (rotate! alpha i #\\J))\n      (set! alpha (rotate! alpha i #\\K))\n \
    \     (set! alpha (rotate! alpha i #\\L))\n      (set! alpha (rotate! alpha i\
    \ #\\M))\n      (set! alpha (rotate! alpha i #\\N))\n      (set! alpha (rotate!\
    \ alpha i #\\O))\n      (set! alpha (rotate! alpha i #\\P))\n      (set! alpha\
    \ (rotate! alpha i #\\Q))\n      (set! alpha (rotate! alpha i #\\R))\n      (set!\
    \ alpha (rotate! alpha i #\\S))\n      (set! alpha (rotate! alpha i #\\T))\n \
    \     (set! alpha (rotate! alpha i #\\U))\n      (set! alpha (rotate! alpha i\
    \ #\\V))\n      (set! alpha (rotate! alpha i #\\W))\n      (set! alpha (rotate!\
    \ alpha i #\\X))\n      (set! alpha (rotate! alpha i #\\Y))\n      (set! alpha\
    \ (rotate! alpha i #\\Z))\n      (set! alpha (rotate! alpha i #\\0))\n      (set!\
    \ alpha (rotate! alpha i #\\1))\n      (set! alpha (rotate! alpha i #\\2))\n \
    \     (set! alpha (rotate! alpha i #\\3))\n      (set! alpha (rotate! alpha i\
    \ #\\4))\n      (set! alpha (rotate! alpha i #\\5))\n      (set! alpha (rotate!\
    \ alpha i #\\6))\n      (set! alpha (rotate! alpha i #\\7))\n      (set! alpha\
    \ (", "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z))\n             (r #\\a))\n    (cond\n      [(empty? s) \"\"]\n  \
    \    [(equal? (first s) #\\z) (loop (rest s) a r)]\n      [(equal? (first s) #\\\
    a) (loop (rest s) (cons r a) r)]\n      [(equal? (first s) #\\b) (loop (rest s)\
    \ (cons r (cons r a)) r)]\n      [(equal? (first s) #\\c) (loop (rest s) (cons\
    \ r (cons r (cons r a)))\n                                    (cons r r))]\n \
    \     [(equal? (first s) #\\d) (loop (rest s) (cons r (cons r (cons r (cons r\
    \ a))))\n                                    (cons r (cons r (cons r r))))]\n\
    \      [(equal? (first s) #\\e) (loop (rest s) (cons r (cons r (cons r (cons r\
    \ (cons r a))))\n                                    (cons r (cons r (cons r (cons\
    \ r (cons r r))))))\n                                    (cons r r))]\n      [(equal?\
    \ (first s) #\\f) (loop (rest s) (cons r (cons r (cons r (cons r (cons r (cons\
    \ r a))))\n                                    (cons r (cons r (cons r (cons r\
    \ (cons r (cons r r))))))\n                                    (cons r (cons r\
    \ (cons r (cons r (cons r (cons r r))))))\n                                  \
    \  (cons r r))]\n      [(equal? (first s) #\\g) (loop (rest s) (cons r (cons r\
    \ (cons r (cons r (cons r (cons r (cons r a))))\n                            \
    \        (cons r (cons r (cons r (cons r (cons r (cons r (cons r r))))))\n   \
    \                                 (", "  (let ((alpha (make-array 26 \n      \
    \                    :initial-contents '(a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z))))\n    (let loop ((i 0))\n      (cond\n        ((= i 26) (make-array\
    \ 26 :initial-contents '()))\n        ((char=? (char-code s) (char alpha (+ i\
    \ 2))) \n         (make-string 26 :initial-contents (char alpha (+ i 2))))\n \
    \       (else (loop (+ i 1)))))))\n", "  (let loop ((s s)\n             (acc '()))\n\
    \    (if (empty? s)\n        acc\n        (loop (rest s)\n              (cons\
    \ (first s) acc)))))\n", "  (let loop ((s s)\n             (result '()))\n   \
    \ (cond\n      [(empty? s) result]\n      [(char-alphabet (first s)) (loop (rest\
    \ s) (cons (first s) result))]\n      [else (loop (rest s) (cons (first s) (loop\
    \ (rest s) (cons (second s) result))))])))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((char (char-code (substring s i i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 3))\n      (set! alpha (rotate! alpha 4))\n\
    \      (set! alpha (rotate! alpha 5))\n      (set! alpha (rotate! alpha 6))\n\
    \      (set! alpha (rotate! alpha 7))\n      (set! alpha (rotate! alpha 8))\n\
    \      (set! alpha (rotate! alpha 9))\n      (set! alpha (rotate! alpha 10))\n\
    \      (set! alpha (rotate! alpha 11))\n      (set! alpha (rotate! alpha 12))\n\
    \      (set! alpha (rotate! alpha 13))\n      (set! alpha (rotate! alpha 14))\n\
    \      (set! alpha (rotate! alpha 15))\n      (set! alpha (rotate! alpha 16))\n\
    \      (set! alpha (rotate! alpha 17))\n      (set! alpha (rotate! alpha 18))\n\
    \      (set! alpha (rotate! alpha 19))\n      (set! alpha (rotate! alpha 20))\n\
    \      (set! alpha (rotate! alpha 21))\n      (set! alpha (rotate! alpha 22))\n\
    \      (set! alpha (rotate! alpha 23))\n      (set! alpha (rotate! alpha 24))\n\
    \      (set! alpha (rotate! alpha 25))\n      (set! alpha (rotate! alpha 26))\n\
    \      (set! alpha (rotate! alpha 27))\n      (set! alpha (rotate! alpha 28))\n\
    \      (set! alpha (rotate! alpha 29))\n      (set! alpha (rotate! alpha 30))\n\
    \      (set! alpha (rotate! alpha 31))\n      (set! alpha (rotate! alpha 32))\n\
    \      (set! alpha (rotate! alpha 33))\n      (set! alpha (rotate! alpha 34))\n\
    \      (set! alpha (rotate! alpha 35))\n      (set! alpha (rotate! alpha 36))\n\
    \      (set! alpha (rotate! alpha 37))\n      (set! alpha (rotate! ", "  (let\
    \ ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i alpha)\n          (loop (+ i 2) (rotate-alphabet\
    \ alpha (- i 2)))\n          (loop (+ i 2) alpha))))) \n", "  (let ((alpha (make-array\
    \ 26)))\n    (define (rotate-alpha alpha n)\n      (let ((alpha (make-array 26)))\n\
    \        (set! alpha (subseq alpha (- n 1) (+ n 1))))\n      (set! alpha (subseq\
    \ alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n\
    \  (let ((alpha (make-array 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s\
    \ 1))))\n  (let ((alpha (make-array 26)))\n    (set! alpha (subseq alpha (- s\
    \ 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n    (set! alpha (subseq alpha\
    \ (- s 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n    (set! alpha (subseq\
    \ alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n    (set! alpha\
    \ (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n    (set!\
    \ alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n \
    \   (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array 26)))\n\
    \    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (subseq alpha (- s 1) (+ s 1))))\n  (let ((alpha (make-array\
    \ 26)))", "  (let loop ((s s)\n             (result '()))\n    (cond ((null? s)\
    \ result)\n          ((char= (first s) 'z) (loop (rest s) (append result 'a)))\n\
    \          ((char= (first s) 'a) (loop (rest s) (append result 'z)))\n       \
    \   ((char= (first s) 'z) (loop (rest s) (append result 'a)))\n          ((char=\
    \ (first s) 'a) (loop (rest s) (append result 'z)))\n          (else (loop (rest\
    \ s) (append result (first s)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n\
    \               (alpha alpha))\n      (cond\n        ((null? s) (list s))\n  \
    \      ((char=? (car s) #\\a) (list s))\n        (else (loop (cdr s) (rotate!\
    \ alpha (car s))))))))\n", "  (let ((alpha (make-alphabet (length s))))\n    (let\
    \ loop ((i 0) (alpha (make-alphabet (length s))))\n      (if (< i length)\n  \
    \        (let ((char (char-ref s i)))\n            (set! alpha (rotate-alpha (char-ref\
    \ alpha char) alpha))\n            (loop (+ i 1) alpha))\n          (set! alpha\
    \ (rotate-alpha (char-ref alpha char) alpha))\n          (loop (+ i 1) alpha))))\n\
    \    (make-string (reverse (map char-ref alpha (range (length s)))))))\n", " \
    \ (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+\
    \ i 1))\n         (char (car s))\n         (alpha (+ i 1)))\n        ((< i length)\
    \ (set! alpha (make-array (length s) (lambda (x) (+ x 2)))))\n      (set! alpha\
    \ (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring\
    \ alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1)\
    \ (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n\
    \      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha\
    \ (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring\
    \ alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1)\
    \ (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n\
    \      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha\
    \ (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring\
    \ alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1)\
    \ (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n\
    \      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha\
    \ (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring\
    \ alpha (- i 1) (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1)\
    \ (- i 1))))\n      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n\
    \      (set! alpha (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alpha\
    \ (+ alpha (substring alpha (- i 1) (- i 1))))\n      (set! alph", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"]\n     \
    \     [(char-alphabet (first s)) (char-alphabet (first s))]\n          [else (loop\
    \ for c across s\n                      for i from 0\n                      for\
    \ j from (- i 2)\n                      collect (alpha (+ (char-alphabet c) j))]))))\n",
  "  (cond [(empty? s) \"\"]\n        [(empty? (rest s)) \"\"]\n        [(= (length\
    \ s) 1) (substring s 0 (- (length s) 1))]\n        [else (cons (substring s 0\
    \ (- (length s) 1)) \n                    (encrypt (substring s (- (length s)\
    \ 1))))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let\
    \ loop ((s s)\n               (alpha (make-array 26 :initial-element #\\a)))\n\
    \      (if (null? s)\n          s\n          (let ((char (car s))\n          \
    \      (index (char-code char)))\n            (set! alpha (rotate! alpha index))\n\
    \            (loop (cdr s) alpha)))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) by 2\n          for c from 0 to\
    \ (length s) by 2\n          for j from 0 to (length s) by 2\n          when (=\
    \ (modulo i 26) (modulo c 26))\n          do (set! alpha (rotate! alpha (cdr alpha)\
    \ (cdr alpha) (cdr alpha)))\n          do (set! alpha (rotate! alpha (cdr alpha)\
    \ (cdr alpha) (cdr alpha)))\n          do (set! alpha (rotate! alpha (cdr alpha)\
    \ (cdr alpha) (cdr alpha))))\n    (string-append (map (lambda (c) (char alpha\
    \ (char-code c))) s)\n                  (map (lambda (c) (char alpha (char-code\
    \ c))) s))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \ (loop for i from 0 to (length s) by 2\n          for c from 0 to 26\n      \
    \    for j from 0 to 26\n          when (char=? (char-code (char s i c)) #\\a)\n\
    \          do (set! alpha (rotate! alpha j c))\n          do (set! alpha (rotate!\
    \ alpha j (+ c 1)))\n          collect (char alpha (+ i 1)))))\n", "  (cond [(empty?\
    \ s) \"\"]\n        [(empty? (rest s)) \"\"]\n        [(equal? (first s) (first\
    \ s)) (encrypt (rest s))]\n        [else (cons (first s)\n                   \
    \ (encrypt (rest s))))]))\n", "  (let ((alpha (make-array 26 \n              \
    \            :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z))))\n    (let loop ((i 0) (acc '()))\n      (cond\n        ((null? s)\
    \ (append acc (reverse acc)))\n        ((char=? (char-code s) (char alpha (+ i\
    \ 2))) (loop (+ i 1) (append acc (char alpha (+ i 2)))))\n        (else (loop\
    \ (+ i 1) (append acc (char alpha (+ i 1)))))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n          (set!\
    \ alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n\
    \          (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n          (set!\
    \ alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let loop ((s s)\n  \
    \           (result '()))\n    (cond [(empty? s) result]\n          [(char-alphabet\
    \ (first s)) (loop (rest s) (cons (first s) result))]\n          [else (loop (rest\
    \ s) (cons (first s) (cons (second s) result)))])))\n", "  (let loop ((s s)\n\
    \             (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p\
    \ 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (cond\n      [(empty? s) \"\"]\n     \
    \ [(equal? (first s) 'a) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (first alphabet) (loop (rest s)\
    \ (cons (first alphabet) (loop (rest s) (cons (", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (loop for i from 0 to (length s) do\n    \
    \      (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 2))))\n       \
    \   (set! alpha (substring alpha (+ i 1) (+ i 2)))\n          (set! alpha (substring\
    \ alpha (+ i 2) (+ i 1))))\n    (concat alpha (substring alpha (+ 0 (length s))))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (if (null? s)\n        acc\n \
    \       (loop (cdr s)\n              (cons (char->integer (char->string (car s))\n\
    \                            (char->integer (char->string (cadr s))))\n      \
    \              (cons (char->integer (char->string (car acc))\n               \
    \                     (char->integer (char->string (cadr acc))))\n           \
    \               acc))))))\n", "  (let loop ((s s)\n             (acc '()))\n \
    \   (if (null? s)\n        acc\n        (loop (cdr s)\n              (cons (char->integer\
    \ (char->string (car s))) acc)))))\n", "  (let loop ((s s)\n             (a #(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\a #\\b #\\c #\\d #\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n             (d #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G\
    \ #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z))\n             (e #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i\
    \ #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (f #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n  \
    \           (g #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((i 0) (acc '()))\n      (if (< i (length s))\n     \
    \     (let ((char (char-code (substring s i 1))))\n            (set! alpha (rotate!\
    \ alpha char))\n            (loop (+ i 1) (cons char acc)))\n          acc))))\n",
  "  (let ((alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i 0)\
    \ (acc '()))\n      (cond\n        ((null? s) (append acc (reverse acc)))\n  \
    \      ((char=? (car s) 'a) (loop (+ i 1) (append acc (substring alpha (* i 2)\
    \ (* i 2)))))\n        ((char=? (car s) 'b) (loop (+ i 1) (append acc (substring\
    \ alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'c) (loop (+ i 1) (append\
    \ acc (substring alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'd) (loop\
    \ (+ i 1) (append acc (substring alpha (* i 2) (* i 2)))))\n        ((char=? (car\
    \ s) 'e) (loop (+ i 1) (append acc (substring alpha (* i 2) (* i 2)))))\n    \
    \    ((char=? (car s) 'f) (loop (+ i 1) (append acc (substring alpha (* i 2) (*\
    \ i 2)))))\n        ((char=? (car s) 'g) (loop (+ i 1) (append acc (substring\
    \ alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'h) (loop (+ i 1) (append\
    \ acc (substring alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'i) (loop\
    \ (+ i 1) (append acc (substring alpha (* i 2) (* i 2)))))\n        ((char=? (car\
    \ s) 'j) (loop (+ i 1) (append acc (substring alpha (* i 2) (* i 2)))))\n    \
    \    ((char=? (car s) 'k) (loop (+ i 1) (append acc (substring alpha (* i 2) (*\
    \ i 2)))))\n        ((char=? (car s) 'l) (loop (+ i 1) (append acc (substring\
    \ alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'm) (loop (+ i 1) (append\
    \ acc (substring alpha (* i 2) (* i 2)))))\n        ((char=? (car s) 'n) (loop",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate", "  (let loop ((s s)\n           \
    \  (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't\
    \ 'u 'v 'w 'x 'y 'z)))\n    (cond\n      [(empty? s) \"\"]\n      [(equal? (first\
    \ s) 'a) (cons (first alphabet) (loop (rest s) (cons (first alphabet) (cons (second\
    \ alphabet) (loop (rest s) alphabet))))]\n      [(equal? (first s) 'b) (cons (first\
    \ alphabet) (loop (rest s) (cons (second alphabet) (cons (first alphabet) (loop\
    \ (rest s) alphabet))))]\n      [(equal? (first s) 'c) (cons (first alphabet)\
    \ (loop (rest s) (cons (second alphabet) (cons (third alphabet) (loop (rest s)\
    \ alphabet))))]\n      [(equal? (first s) 'd) (cons (first alphabet) (loop (rest\
    \ s) (cons (second alphabet) (cons (third alphabet) (loop (rest s) alphabet))))]\n\
    \      [(equal? (first s) 'e) (cons (first alphabet) (loop (rest s) (cons (second\
    \ alphabet) (cons (third alphabet) (loop (rest s) alphabet))))]\n      [(equal?\
    \ (first s) 'f) (cons (first alphabet) (loop (rest s) (cons (second alphabet)\
    \ (cons (third alphabet) (loop (rest s) alphabet))))]\n      [(equal? (first s)\
    \ 'g) (cons (first alphabet) (loop (rest s) (cons (second alphabet) (cons (third\
    \ alphabet) (loop (rest s) alphabet))))]\n      [(equal? (first s) 'h) (cons (first\
    \ alphabet) (loop (rest s) (cons (second alphabet) (cons (third alphabet) (loop\
    \ (rest s) alphabet))))]\n      [(equal? (first s) 'i) (cons (first alphabet)\
    \ (loop (rest s) (cons (second alphabet) (cons (third alphabet) (loop (rest s)\
    \ alphabet))))]\n      [(equal? (first s) 'j) (cons (first alphabet) (loop (rest\
    \ s) (cons (second alphabet) (cons (third alphabet) (loop (rest s) alphabet))))]\n\
    \      [(equal? (first s) 'k) (cons (first alphabet) (loop (rest s) (cons (second\
    \ alphabet) (cons (third alphabet) (loop (rest s) alphabet))))]\n      [(equal?\
    \ (first s) 'l) (cons (first alphabet) (loop (rest s) (cons (second alphabet)\
    \ (cons (third alphabet) (", "  (let loop ((s s)\n             (a #(#\\a #\\b\
    \ #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\A #\\B #\\C #\\D\
    \ #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\a #\\b #\\c #\\d #\\e #\\f\
    \ #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z))\n             (d #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H\
    \ #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\\
    Y #\\Z))\n             (e #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (f #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\\
    l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \      (g #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\", "  (let\
    \ ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (result '()))\n \
    \     (if (< i length)\n          (let ((char (char-ref s i)))\n            (set!\
    \ alpha (rotate-alphabet alpha (char-code char)))\n            (loop (+ i 1) (cons\
    \ char result)))\n          result))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (loop\
    \ for k from 0 to (length s) do\n              (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                (loop for l from 0 to (length s) do\n             \
    \     (let ((alpha (make-array 26 :initial-element #\\a)))\n                 \
    \   (loop for m from 0 to (length s) do\n                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                        (loop for n from 0 to (length\
    \ s) do\n                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                            (loop for o from 0 to (length s) do\n \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                (loop for p from 0 to (length s) do\n  \
    \                                (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                    (loop for q from 0 to (length s)\
    \ do\n                                      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                        (loop for r from 0 to (length\
    \ s) do\n                                          (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                            (loop\
    \ for s from\n                                                      0 to (length\
    \ s) do\n                                              (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \  (loop for t from 0 to (length s) do\n                                     \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                                           (loop for u from 0 to (length s) do\n\
    \                                                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \          (loop for v from 0 to (length s) do\n                             \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                                            (loop for w\
    \ from 0 to (length s) do\n                                                  \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                      (loop for x from 0 to (length\
    \ s) do\n                                                                  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                                          (loop for y from 0 to (length s) do\n\
    \                                                                      (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                      (loop for z from ", "  (let loop ((s s)\n\
    \             (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p\
    \ 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (cond\n      [(empty? s) \"\"]\n     \
    \ [(equal? (first s) (first alphabet)) (loop (rest s) (cons (first alphabet) (loop\
    \ (rest s) (cons (second alphabet) (loop (rest s) (cons (third alphabet) (loop\
    \ (rest s) (cons (fourth alphabet) (loop (rest s) (cons (fifth alphabet) (loop\
    \ (rest s) (cons (sixth alphabet) (loop (rest s) (cons (seventh alphabet) (loop\
    \ (rest s) (cons (eighth alphabet) (loop (rest s) (cons (ninth alphabet) (loop\
    \ (rest s) (cons (tenth alphabet) (loop (rest s) (cons (eleventh alphabet) (loop\
    \ (rest s) (cons (twelfth alphabet) (loop (rest s) (cons (thirteenth alphabet)\
    \ (loop (rest s) (cons (fourteenth alphabet) (loop (rest s) (cons (fifteenth alphabet)\
    \ (loop (rest s) (cons (sixteenth alphabet) (loop (rest s) (cons (seventeenth\
    \ alphabet) (loop (rest s) (cons (eighteenth alphabet) (loop (rest s) (cons (nineteenth\
    \ alphabet) (loop (rest s) (cons (twentyfirst
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          collect (alpha\
    \ (+ i j) c))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha alpha))\n      (cond ((null? s) (list\
    \ \"\"))\n            ((char= (first s) #\\a) (list \"\"))\n            (else\
    \ (let ((char (char-code (first s))))\n                       (set! alpha (rotate!\
    \ alpha char))\n                       (loop (rest s) alpha)))))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n\
    \          for i from 0\n          for j from (- i 2)\n          for k from (-\
    \ j 2)\n          when (char=? (char-code c) alpha)\n          collect (rotate-char\
    \ (char-code c) i j k))))\n", "  (let loop ((s s)\n             (a #(#\\a #\\\
    b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (r #(#\\1 #\\2 #\\3 #\\4\
    \ #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\", "  (let loop ((s s)\n        \
    \     (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\0 #\\1 #\\2\
    \ #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\\
    4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\\
    6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\\
    8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\\
    + #\\- #\\. #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\\
    . #\\/ #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\+ #\\- #\\. #\\/ #\\0 #\\",
  "  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+\
    \ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (assoc\
    \ alpha (+ i j) (+ alpha (+ i j))))\n      (set! alpha (assoc alpha (+ j i) (-\
    \ (+ alpha (+ j i)) (+ alpha (+ j j)))))\n    (let ((alpha (make-array (length\
    \ s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i 1))\n           (j 0 (+ j 1)))\n\
    \          ((< i s))\n        (set! alpha (assoc alpha (+ i j) (+ alpha (+ i j))))\n\
    \      (set! alpha (assoc alpha (+ j i) (- (+ alpha (+ j i)) (+ alpha (+ j j)))))\n\
    \    (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n      (do ((i\
    \ 0 (+ i 1))\n           (j 0 (+ j 1)))\n          ((< i s))\n        (set! alpha\
    \ (assoc alpha (+ i j) (+ alpha (+ i j))))\n      (set! alpha (assoc alpha (+\
    \ j i) (- (+ alpha (+ j i)) (+ alpha (+ j j)))))\n    (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i 1))\n           (j\
    \ 0 (+ j 1)))\n          ((< i s))\n        (set! alpha (assoc alpha (+ i j) (+\
    \ alpha (+ i j))))\n      (set! alpha (assoc alpha (+ j i) (- (+ alpha (+ j i))\
    \ (+ alpha (+ j j)))))\n    (let ((alpha (make-array (length s) (lambda (x) (+\
    \ x 2)))))\n      (do ((i 0 (+ i 1))\n           (j 0 (+ j 1)))\n          ((<\
    \ i s))\n        (set! alpha (assoc alpha (+ i j) (+ alpha (+ i j))))\n      (set!\
    \ alpha (assoc alpha (+ j i) (- (+ alpha (+ j i)) (+ alpha (+ j j)))))\n    (let\
    \ ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i\
    \ 1))\n           (j 0 (+ j 1)))\n          ((< i s))\n", "  (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (assoc alpha (substring s i (+ i 1))))\n      (set! alpha (assoc\
    \ alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring\
    \ s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+\
    \ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n  \
    \    (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (let ((char (char-code (substring s i i))))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! ", "  (let ((alpha (make-array 26)))\n    (define (rotate\
    \ x y)\n      (cond ((= y 0) (list x))\n            (else (cons (car x) \n   \
    \                     (rotate (cdr x) y)))))\n    (define (shift x y)\n      (cond\
    \ ((= y 0) (list x))\n            (else (cons (car x) \n                     \
    \   (shift (cdr x) y)))))\n    (define (shift x y)\n      (cond ((= y 0) (list\
    \ x))\n            (else (cons (car x) \n                        (shift (cdr x)\
    \ y)))))\n    (define (shift x y)\n      (cond ((= y 0) (list x))\n          \
    \  (else (cons (car x) \n                        (shift (cdr x) y)))))\n    (define\
    \ (shift x y)\n      (cond ((= y 0) (list x))\n            (else (cons (car x)\
    \ \n                        (shift (cdr x) y)))))\n    (define (shift x y)\n \
    \     (cond ((= y 0) (list x))\n            (else (cons (car x) \n           \
    \             (shift (cdr x) y)))))\n    (define (shift x y)\n      (cond ((=\
    \ y 0) (list x))\n            (else (cons (car x) \n                        (shift\
    \ (cdr x) y)))))\n    (define (shift x y)\n      (cond ((= y 0) (list x))\n  \
    \          (else (cons (car x) \n                        (shift (cdr x) y)))))\n\
    \    (define (shift x y)\n      (cond ((= y 0) (list x))\n            (else (cons\
    \ (car x) \n                        (shift (cdr x) y)))))\n    (define (shift\
    \ x y)\n      (cond ((= y 0) (list x))\n            (else (cons (car x) \n   \
    \                     (shift (cdr x) y)))))\n    (define (shift x y)\n      (cond\
    \ ((= y 0) (list x))\n            (else (cons (car x) \n                     \
    \   (shift (cdr x) y)))))\n    (define (shift x y)\n      (cond ((= y 0) (list\
    \ x))\n            (else (cons (car x) \n                        (shift (cdr x)\
    \ y)))))\n    (define (shift x y)\n      (cond ((= y 0) (list x))\n          \
    \  (else (cons (car x) \n                        (shift (cdr x) y)))))\n    (define\
    \ (shift x y)\n      (cond ((= y 0) (list x))\n            (else (cons (car x)\
    \ \n                        (shift (cdr x) y))", "  (let loop ((s s)\n       \
    \      (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n             (c #(#\\1 #\\2 #\\3\
    \ #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\. #\\/ #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 ",
  "  (let ((alpha (make-array 26)))\n    (define (rotate x y)\n      (cond ((= y 0)\
    \ (substring alpha (- x 26) 1))\n            ((= y 1) (substring alpha (- x 26)\
    \ 2))\n            (else (substring alpha (- x 26) 3))))\n    (define (enc-char\
    \ c)\n      (let ((alpha (make-array 26)))\n        (define (rotate x y)\n   \
    \       (cond ((= y 0) (substring alpha (- x 26) 1))\n                (else (substring\
    \ alpha (- x 26) 2)))\n        (cond ((char=? c 'a) (rotate c 1))\n          \
    \    ((char=? c 'b) (rotate c 2))\n              ((char=? c 'c) (rotate c 3))\n\
    \              ((char=? c 'd) (rotate c 4))\n              ((char=? c 'e) (rotate\
    \ c 5))\n              ((char=? c 'f) (rotate c 6))\n              ((char=? c\
    \ 'g) (rotate c 7))\n              ((char=? c 'h) (rotate c 8))\n            \
    \  ((char=? c 'i) (rotate c 9))\n              ((char=? c 'j) (rotate c 10))\n\
    \              ((char=? c 'k) (rotate c 11))\n              ((char=? c 'l) (rotate\
    \ c 12))\n              ((char=? c 'm) (rotate c 13))\n              ((char=?\
    \ c 'n) (rotate c 14))\n              ((char=? c 'o) (rotate c 15))\n        \
    \      ((char=? c 'p) (rotate c 16))\n              ((char=? c 'q) (rotate c 17))\n\
    \              ((char=? c 'r) (rotate c 18))\n              ((char=? c 's) (rotate\
    \ c 19))\n              ((char=? c 't) (rotate c 20))\n              ((char=?\
    \ c 'u) (rotate c 21))\n              ((char=? c 'v) (rotate c 22))\n        \
    \      ((char=? c 'w) (rotate c 23))\n              ((char=? c 'x) (rotate c 24))\n\
    \              ((char=? c 'y) (rotate c 25))\n              ((char=? c 'z) (rotate\
    \ c 26)))))\n    (let ((alpha (make-array 26)))\n      (define (rotate x y)\n\
    \        (cond ((= y 0) (substring alpha (- x 26) 1))\n", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents '(#\\a #\\b #\\c #\\d #\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n        (index (make-array 26 \n                    \
    \     :initial-contents '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))))\n\
    \    (loop for i from 0 to (length s) do\n          (let ((char (char-code (char\
    \ s i))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n              \
    \    index (subarray index 0 (+ i 2))))\n            (set! alpha (subarray alpha\
    \ 0 (+ i 2))\n                  index (subarray index 0 (+ i 2))))\n         \
    \   (set! alpha (subarray alpha 0 (+ i 2))\n                  index (subarray\
    \ index 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               index (subarray index 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  index (subarray index 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  index (subarray\
    \ index 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               index (subarray index 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  index (subarray index 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  index (subarray\
    \ index 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               index (subarray index 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  index (subarray index 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  index (subarray\
    \ index 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
