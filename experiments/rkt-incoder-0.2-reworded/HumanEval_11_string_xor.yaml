name: HumanEval_11_string_xor
language: rkt
prompt: "#lang racket\n\n;; Input are two strings a and b consisting only of 1s and\
  \ 0s.\n;; Perform binary XOR on these inputs and return result also as a string.\n\
  ;; >>> (string_xor \"010\" \"110\")\n;; \"100\"\n(define (string_xor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n\
  \    (check-equal? (candidate \"111000\" \"101010\") \"010010\")\n    (check-equal?\
  \ (candidate \"1\" \"1\") \"0\")\n    (check-equal? (candidate \"0101\" \"0000\"\
  ) \"0101\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper a b)\n    (if (= a 0) b\n        (helper (substring\
    \ b 0 a) (substring a 0 b))))\n  (helper a b))\n", "  (define (helper a b acc)\n\
    \    (if (null? a)\n        acc\n        (helper (cdr a) (b b) (cons (car a) acc))))\n\
    \  (helper a b ''))\n", "  (define (helper a b)\n    (if (= (length a) (length\
    \ b))\n        (string-append (substring a 0 (- (length a) (length b)))\n    \
    \                   (substring b (- (length a) (length b)) (length a)))\n    \
    \    (helper (substring a 0 (- (length a) (length b))) \n                (substring\
    \ b (- (length a) (length b)) (length a))))\n    (helper a b))\n  (helper a b))\n",
  "  (let ([x (string->list a)]\n        [y (string->list b)]\n        [result \"\"\
    ])\n    (if (null? x)\n        result\n        (string-append (string_xor (first\
    \ x) (rest x)) (string_xor (first y) (rest y)) result))))\n", "  (define (helper\
    \ a b)\n    (if (string=? a b)\n        (string-append \"1\" a)\n        (string-append\
    \ \"0\" a)))\n  (helper a b))\n", "  (define (helper a b)\n    (if (= a 0)\n \
    \       b\n        (helper (substring b 0 a) (substring a 0 b))))\n  (helper a\
    \ b))\n", "  (let loop ((a a) (i 0))\n    (cond\n      [(empty? a) b]\n      [(empty?\
    \ b) a]\n      [(char=? (car a) (car b)) (loop (cdr a) (+ i 1))]\n      [else\
    \ (loop (cdr a) (+ i 1))])))\n", "  (define (helper a b acc)\n    (if (string?\
    \ a)\n        (if (string? b)\n            (helper (string-append a b) (butlast\
    \ b) (string-append acc b))\n            (helper (butlast a) (butlast b) acc))\n\
    \        acc))\n  (helper a b \"\"))\n", "  (define (helper a b)\n    (if (empty?\
    \ b)\n        '()\n        (cons (string-ref b (string-length a)) (helper (string-ref\
    \ a 0) (b cdr)))))\n  (helper a b))\n", "  (let ((xor (string-append a b)))\n\
    \    (string-append (string-ref xor 0) (string-ref xor 1))))\n", "  (let loop\
    \ ((a a) (c '()))\n    (if (string-length a)\n        (loop (substring a 0 (string-length\
    \ a)) (concat c '(1)))\n        (loop (substring b (string-length b)) (concat\
    \ c '(0))))))\n", "  (let ([len (string-length a)])\n    (string->number\n   \
    \  (string->list a)\n     (string->list b)\n     (lambda (x y)\n       (string->list\
    \ x (+ x y))\n       (lambda (x y)\n         (string->list x (+ y x))\n      \
    \   (lambda (x y)\n           (string->list x (+ y y))\n           (lambda (x\
    \ y)\n             (string->list x (+ y y))\n             (lambda (x y)\n    \
    \           (string->list x (+ y y))\n               (lambda (x y)\n         \
    \        (string->list x (+ y y))\n                 (lambda (x y)\n          \
    \         (string->list x (+ y y))\n                   (lambda (x y)\n       \
    \              (string->list x (+ y y))\n                     (lambda (x y)\n\
    \                       (string->list x (+ y y))\n                       (lambda\
    \ (x y)\n                        (string->list x (+ y y))\n                  \
    \      (lambda (x y)\n                          (string->list x (+ y y))\n   \
    \                       (lambda (x y)\n                            (string->list\
    \ x (+ y y))\n                            (lambda (x y)\n                    \
    \          (string->list x (+ y y))\n                              (lambda (x\
    \ y)\n                                (string->list x (+ y y))\n             \
    \                   (lambda (x y)\n                                  (string->list\
    \ x (+ y y))\n                                  (lambda (x y)\n              \
    \                      (string->list x (+ y y))\n                            \
    \        (lambda (x y)\n                                      (string->list x\
    \ (+ y y))\n                                      (lambda (x y)\n            \
    \                            (string->list x (+ y y))\n                      \
    \                  (lambda (x y)\n                                          (string->list\
    \ x (+ y y))\n                                          (lambda (x y)\n      \
    \                                      (string->list x (+ y y))\n            \
    \                                (lambda (x y)\n                             \
    \                 (string->list x (+ y y))\n                                 \
    \             (lambda (x y)\n                                                (string->list\
    \ x (+ y y))\n                                                (lambda (x y)\n\
    \                                                  (string->list x (+ y y))\n\
    \                                                  (lambda (x y)\n           \
    \                                         (string->list x (+ y y))\n         \
    \                                           (lambda (x y)\n                  \
    \                                    (string->list x (+ y y))\n              \
    \                                        (lambda (x y)\n                     \
    \                                   (string->list x (+ y y))\n               \
    \                                         (lambda (x y)\n                    \
    \                                      (string->list x (+ y y))\n            \
    \                                              (lambda (x y)\n               \
    \                                             (string->list x (+ y y))\n     \
    \                                                       (lambda (x y)\n      \
    \                                                        (string->list x (+ ",
  "  (define (helper a b)\n    (if (zero? a)\n        (string-append \"0\" b)\n  \
    \      (helper (sub1 a) b)))\n  (helper a b))\n", "  (define (helper a b)\n  \
    \  (if (string-length a)\n        (string-append (substring a 0 (string-length\
    \ a)) (substring b 0 (string-length b)))\n        (substring b 0 (string-length\
    \ b))))\n  (helper a b))\n", "  (let loop ((a a) (n 0))\n    (cond\n      [(empty?\
    \ a) \"\"]\n      [(empty? b) \"\"]\n      [else (loop (rest a) (+ n 1))\n   \
    \        (cons (char->int (first a)) (loop (rest b) (+ n 1)))])))\n", "  (define\
    \ (helper a b)\n    (if (equal? a b)\n        a\n        (helper (string-append\
    \ a b) (string-append \"0\" (string->number b))))\n    (helper a b))\n  (helper\
    \ a b))\n", "  (define (helper a b)\n    (if (= (length a) (length b))\n     \
    \   (string-append (substring a 0 (- (length a) (length b)))\n               \
    \       (substring b 0 (- (length a) (length b)))\n                      (substring\
    \ a 0 (- (length a) (length b)))\n                      (substring b 0 (- (length\
    \ a) (length b))))\n        (helper (substring a 0 (- (length a) (length b)))\
    \ \n                (substring b 0 (- (length a) (length b))))))\n  (helper a\
    \ b))\n", "  (define (helper a b)\n    (if (string=? a b)\n        (string-append\
    \ a b)\n        (helper (string-append a b) b)))\n  (helper a b))\n", "  (define\
    \ (helper a b)\n    (if (string=? a b)\n        (string-append \"1\" a)\n    \
    \    (helper (string-append \"0\" a) b)))\n  (helper a b))\n", "  (let loop ((a\
    \ a) (result \"\"))\n    (if (empty? a)\n        result\n        (loop (cdr a)\
    \ (+ (char->integer a) (char->integer b))))))\n", '  (let loop ((a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (', "  (define\
    \ (helper a b)\n    (if (string-length a) (string-append (helper (string-ref a\
    \ 0) (string-ref b 0))\n                                       (string-ref a 1))\n\
    \        (string-append (helper (string-ref a 1) (string-ref b 0))\n         \
    \              (string-ref a 0))))\n  (helper a b))\n", "  (define (helper a b)\n\
    \    (if (= a 0) b\n        (helper (substring b 0 a) (substring a 0 b))))\n \
    \ (helper a b))\n", "  (if (string-length a) (string-append (string_xor (string-ref\
    \ a 0) (string-ref b 0))\n                                   (string-ref a (string-length\
    \ a)))\n      b))\n", "  (define (helper a b)\n    (if (= (length a) (length b))\n\
    \        (string-append (substring a 0 (- (length a) (length b)))\n          \
    \            (substring b 0 (- (length a) (length b))))\n        (helper (substring\
    \ a 0 (length a)) (substring b 0 (length b))))\n    (helper a b))\n  (helper a\
    \ b))\n", "  (if (string-length a) (string-append (string_xor a (substring b 0\
    \ (string-length a)))\n                                     (substring b (string-length\
    \ a)))\n      (substring b (string-length a))))\n", "  (if (string? a)\n     \
    \ (if (string? b)\n          (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (", "  (let ([x (string->list a)]\n        [y (string->list b)]\n        [result\
    \ '()])\n    (if (null? x)\n        result\n        (string-append (string_xor\
    \ (first x) (rest x)) (string_xor (first y) (rest y))\n                      \
    \ (string-append result (first y) (first x))\n                       result))))\n",
  "  (let ([a (string-ref a 0)\n        b (string-ref b 0)])\n    (string-append (string-ref\
    \ a 1) (string-ref b 1))))\n", "  (define (helper a b)\n    (if (zero? a)\n  \
    \      b\n        (helper (quotient a 2) (quotient b 2))\n      )\n  )\n  (helper\
    \ a b)\n)\n", "  (define (helper a b)\n    (if (string=? a b)\n        (string-append\
    \ \"1\" a)\n        (helper (string-append \"0\" a) b)))\n  (helper a b))\n",
  "  (define (helper a b)\n    (if (= a 0) b\n        (helper (substring b 0 (length\
    \ a)) (substring a 0 (length b))))\n    (if (= b 0) a\n        (helper (substring\
    \ a 0 (length b)) (substring b 0 (length a))))\n    (string-append (substring\
    \ a 0 (length a)) (substring b 0 (length b))))\n  (helper a b))\n", "  (define\
    \ (helper a b acc)\n    (cond\n      [(empty? a) acc]\n      [(empty? b) acc]\n\
    \      [(equal? (first a) (first b)) (helper (rest a) (rest b) (cons (first acc)\
    \ (helper (rest a) (rest b) acc)))]\n      [else (helper (rest a) (rest b) (cons\
    \ (first acc) (helper (rest a) (rest b) acc)))]))\n  (helper a b empty))\n", " \
    \ (let ((x (string-length a)) (y (string-length b)))\n    (if (= x y)\n      \
    \  (string-append \"0\" a)\n        (string-append \"0\" b)\n        (string-append\
    \ (substring a 0 x) (substring b 0 y) (substring a x y)))))\n", "  (define (helper\
    \ a b)\n    (if (null? a)\n        b\n        (helper (cdr a) (car b))))\n  (helper\
    \ a b))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n    \
    \    [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (car x) (car y)) (string_xor (cdr x) (cdr y))))))\n", "  (let ([len\
    \ (string-length a)\n        len2 (string-length b)])\n    (if (= len len2)\n\
    \        (string-append (substring a 0 len) (substring b 0 len))\n        (string-append\
    \ (substring a 0 len2) (substring b 0 len2)))))\n", "  (define (helper a b)\n\
    \    (cond\n      [(string=? a b) \"\"]\n      [(string=? a \"\") b]\n      [(string=?\
    \ b \"\") a]\n      [else (helper (string-append a b) \"\")]))\n  (helper a b))\n",
  "  (let ([x (string->list a)]\n        [y (string->list b)]\n        [result (list->string\
    \ '())]\n        [xor (lambda (x y)\n              (if (string=? x y)\n      \
    \            (cons x result)\n                  (cons y result)))])\n    (if (null?\
    \ x)\n        result\n        (let ([x (car x)\n              y (if (null? y)\n\
    \                  x\n                  (car y))])\n          (if (string=? x\
    \ y)\n              (string_xor x (cdr y))\n              (string_xor (cdr x)\
    \ y)))))\n", "  (let ([x (string->list a)])\n    (let ([y (string->list b)])\n\
    \      (if (null? x)\n          (if (null? y)\n              \"\"\n          \
    \    (string-append (substring y 0 (- (length x) 1))\n                       \
    \     (substring x 0 (- (length y) 1)))\n          (if (null? y)\n           \
    \   (if (null? x)\n                  \"\"\n                  (string-append (substring\
    \ x 0 (- (length y) 1))\n                                (substring a 0 (- (length\
    \ x) 1)))\n              (if (null? x)\n                  (if (null? y)\n    \
    \                  \"\"\n                      (string-append (substring a 0 (-\
    \ (length x) 1))\n                                    (substring b 0 (- (length\
    \ y) 1)))\n                  (if (null? y)\n                      (if (null? x)\n\
    \                          \"\"\n                          (string-append (substring\
    \ b 0 (- (length x) 1))\n                                        (substring a\
    \ 0 (- (length y) 1)))\n                      (if (null? x)\n                \
    \          (if (null? y)\n                              \"\"\n               \
    \               (string-append (substring a 0 (- (length x) 1))\n            \
    \                              (substring b 0 (- (length y) 1)))\n           \
    \               (if (null? y)\n                              (if (null? x)\n \
    \                                 \"\"\n                                  (string-append\
    \ (substring a 0 (- (length x) 1))\n                                         \
    \     (substring b 0 (- (length y) 1)))\n                              (if (null?\
    \ x)\n                                  \"\"\n                               \
    \   (string-append (substring a 0 (- (length x) 1))\n                        \
    \                      (substring b 0 (- (length y) 1))))))))))))))))\n", '  (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-append (string-append (string-append (string-append (string-append
    (string-append (string-', "  (let ([x (string->list a)]\n        [y (string->list\
    \ b)]\n        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y))\n          \
    \             (string-append (string_xor (first result) (rest result)) (string_xor\
    \ (first result) (rest result)))\n                       result))))\n", "  (let\
    \ ((x (string-length a)) (y (string-length b)))\n    (if (= x y)\n        (string-append\
    \ (substring a 0 x) (substring b 0 y))\n        (string-append (substring a 0\
    \ x) (substring b 0 y) (substring a x y)))))\n", "  (let ([x (string-length a)]\n\
    \        [y (string-length b)]\n        [result (make-string x y)])\n    (for\
    \ ([i x])\n      (for ([j y])\n        (set! result (substring result i j)\n \
    \             (if (char=? (char-code (substring a i j)) (char-code (char-code\
    \ b))) \n                  (substring result i j)\n                  (set! result\
    \ (substring result i j)\n                         (char-code (char-code (substring\
    \ a i j)))))\n        (set! result (substring result i j)\n              (char-code\
    \ (char-code (substring b i j))))))))\n", "  (let ([x (string->list a)]\n    \
    \    [y (string->list b)]\n        [result (list->string '())])\n    (if (null?\
    \ x)\n        result\n        (string-append (string_xor (first x) (rest x)) (string_xor\
    \ (first y) (rest y)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to do it without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\n\
    Thanks, I like your solution too. I think I will go with yours since it seems\
    \ more straightforward to me. Thanks again.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nHere's a solution that uses recursion:\n<code>", "  (let ((x (string-length\
    \ a)) (y))\n    (cond\n      [(= x 0) \"\"]\n      [(= y 0) \"\"]\n      [(= x\
    \ y) \"\"]\n      [(char= (first a) (first b)) (cons (first a) (string_xor (rest\
    \ a) (rest b)))]\n      [(char= (first a) '0)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '0)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '1)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '1)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '0)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '0)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '1)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '1)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '0)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '0)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '1)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '1)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '0)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '0)\n       (cons (first a) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first a) '1)\n       (cons (first b) (string_xor\
    \ (rest a) (rest b)))]\n      [(char= (first b) '", "  (let ([x (string->list\
    \ a)\n        y (string->list b)])\n    (string->list x (string->list x (string->list\
    \ x y))))\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I did some research and found that `string->list` was introduced in Racket\
    \ v6.5 ([source](http://docs.racket-lang.org/reference/strings.html)). I'm using\
    \ Racket v6.4 ([source](http://docs.racket-lang.org/reference/strings.html)).\
    \ Do you know if there's a way to get around this limitation?\n<|/ c |>\n<| c\
    \ |>\nI added a solution that works with Racket 6.4\n<|/ c |>\n<| c |>\nThanks\
    \ again! I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nThe other answers\
    \ here are great, but I wanted to add another option that doesn't require any\
    \ additional libraries. It's a little more verbose, but it's also more flexible.\
    \ \n<code>", "  (define (helper a b result)\n    (cond\n      [(empty? a) (append\
    \ result b)]\n      [(empty? b) (append result a)]\n      [else (helper (cdr a)\
    \ (cdr b) (cons (car a) result))]))\n  (helper a b \"\"))\n", "  (define (helper\
    \ a b)\n    (if (string-length a) (string-append (helper (string-ref a 0) (string-ref\
    \ b 0))\n                                       (string-ref a 1))\n        (string-append\
    \ (helper (string-ref a 1) (string-ref b 0))\n                       (string-ref\
    \ a 0)))\n    (if (string-length b) (string-append (helper (string-ref a 0) (string-ref\
    \ b 1))\n                                       (string-ref b 0))\n        (string-append\
    \ (helper (string-ref a 1) (string-ref b 1))\n                       (string-ref\
    \ b 0))))\n  (helper a b))\n", "  (define (helper a b)\n    (if (string-length\
    \ a) (string-append (helper (substring a 0 1) (substring b 0 1))\n           \
    \                          (helper (substring a 1 string-length (substring b 0\
    \ 1))\n                                             (substring b 1 string-length\
    \ (substring a 0 1))))\n    (string-append a b)))\n  (helper a b))\n", "  (if\
    \ (string-length a) (string-append (string_xor (string-ref a 0) (string-ref b\
    \ 0))\n                                     (string-ref a 1))\n      (string-append\
    \ (string_xor (string-ref b 0) (string-ref a 1))\n                     (string-ref\
    \ b 1))))\n", "  (define (helper a b)\n    (if (zero? b)\n        a\n        (helper\
    \ (string-append a b) (remainder b 2)))\n    (helper a b))\n  (helper a b))\n",
  "  (define (helper a b)\n    (if (= (length a) (length b))\n        (string-append\
    \ (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b (- (length a) (length b)) (length b)))\n        (helper a (substring b (-\
    \ (length a) (length b)) (length b))))\n    (helper a b))\n  (helper a b))\n",
  "  (let ((x (string-length a)) (y) (z) (result \"\") (i 0))\n    (cond ((or (= x\
    \ 0) (= y 0))\n           (string-append result a))\n          ((or (= x 0) (=\
    \ y 1))\n           (string-append result b))\n          ((or (= x 1) (= y 0))\n\
    \           (string-append result \"0\"))\n          ((or (= x 1) (= y 1))\n \
    \          (string-append result \"1\"))\n          ((or (= x 2) (= y 2))\n  \
    \         (string-append result \"10\"))\n          ((or (= x 2) (= y 3))\n  \
    \         (string-append result \"11\"))\n          ((or (= x 3) (= y 2))\n  \
    \         (string-append result \"100\"))\n          ((or (= x 3) (= y 3))\n \
    \          (string-append result \"101\"))\n          ((or (= x 4) (= y 4))\n\
    \           (string-append result \"110\"))\n          ((or (= x 4) (= y 5))\n\
    \           (string-append result \"111\"))\n          ((or (= x 5) (= y 4))\n\
    \           (string-append result \"1000\"))\n          ((or (= x 5) (= y 5))\n\
    \           (string-append result \"1001\"))\n          ((or (= x 6) (= y 6))\n\
    \           (string-append result \"1010\"))\n          ((or (= x 6) (= y 7))\n\
    \           (string-append result \"1011\"))\n          ((or (= x 7) (= y 6))\n\
    \           (string-append result \"1100\"))\n          ((or (= x 7) (= y 7))\n\
    \           (string-append result \"1101\"))\n          ((or (= x 8) (= y 8))\n\
    \           (string-append result \"1110\"))\n          ((or (= x 8) (= y 9))\n\
    \           (string-append result \"1111\"))\n          ((or (= x 9) (= y 8))\n\
    \           (string-append result \"10000\"))\n          ((or (= x 9) (= y 9))\n\
    \           (string-append result \"10001\"))\n          ((or (= x 10) (= y 10))\n\
    \           (string-append result \"10010\"))\n          ((or (= x 10) (= y 11))\n\
    \           (string-append result \"10011\"))\n          ((or (= x 11) (= y 10))\n\
    \           (string-append result \"10100\"))\n          ((or (= x 11) (= y 11))\n\
    \           (string-append result \"10101\"))\n          ((or (= x 12) (= y 12))\n\
    \           (string-append result \"10110\"))\n          ((or (= x 12) (", " \
    \ (define (helper a b)\n    (if (zero? b)\n        (string-append a \"\")\n  \
    \      (helper (string-append a (car b)) (cdr b))))\n  (helper a b))\n", "  (let\
    \ ([len (string-length a)\n        len2 (string-length b)])\n    (if (= len len2)\n\
    \        (string-append (substring a 0 len) (substring b 0 len))\n        (string-append\
    \ (substring a 0 len2) (substring b 0 len2)))))\n", "  (let ((x (string-length\
    \ a)) (y (string-length b)))\n    (if (= x y)\n        (string-append (substring\
    \ a 0 x) (substring b 0 y))\n        (string-append (substring a 0 x) (substring\
    \ b 0 y) (substring a x y)))))\n", "  (let ([x (string->list a)]\n        [y (string->list\
    \ b)]\n        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y)))))\n  result)\n",
  "  (define (helper a b)\n    (if (string-length a) (string-append (substring a 0\
    \ (string-length a)) (substring b 0 (string-length b)))\n      (substring a 0\
    \ (string-length a))))\n  (helper a b))\n", "  (let ([x (string-length a)]\n \
    \       [y (string-length b)]\n        [result (make-string x y)])\n    (loop\
    \ for i from 0 to (- x y) do\n          (set! result (substring result i i)\n\
    \                (substring a i i)\n                (substring b i i))\n     \
    \     (when (char= (first result) '0)\n            (set! result (substring result\
    \ (+ i 1) (+ i 1)))\n            (set! result (substring result (+ i 1) (+ i 1)))\n\
    \            (set! result (substring result (+ i 1) (+ i 1)))\n            (set!\
    \ result (substring result (+ i 1) (+ i 1)))\n            (set! result (substring\
    \ result (+ i 1) (+ i 1)))\n            (set! result (substring result (+ i 1)\
    \ (+ i 1)))\n            (set! result (substring result (+ i 1) (+ i 1)))\n  \
    \          (set! result (substring result (+ i 1) (+ i 1)))\n            (set!\
    \ result (substring result (+ i 1) (+ i 1)))\n            (set! result (substring\
    \ result (+ i 1) (+ i 1)))\n            (set! result (substring result (+ i 1)\
    \ (+ i 1)))\n            (set! result (substring result (+ i 1) (+ i 1)))\n  \
    \          (set! result (substring result (+ i 1) (+ i 1)))\n            (set!\
    \ result (substring result (+ i 1) (+ i 1)))\n            (set! result (substring\
    \ result (+ i 1) (+ i 1)))\n            (set! result (substring result (+ i 1)\
    \ (+ i 1)))\n            (set! result (substring result (+ i 1) (+ i 1)))\n  \
    \          (set! result (substring result (+ i 1) (+ i 1)))\n            (set!\
    \ result (substring result (+ i 1) (+ i 1)))\n            (set! result (substring\
    \ result (+ i 1) (+ i 1)))\n            (set! result (substring result (+ i 1)\
    \ (+ i 1)))\n            (set! result (substring result (+ i 1) (+ i 1)))\n  \
    \          (set! result (substring result (+ i 1) (+ i 1)))\n            (set!\
    \ result (substring result (+ i 1) (+ i 1)))\n            (set! result (substring\
    \ result (+ i 1) (+ i 1)))\n            (set! result (substring result (+ ", " \
    \ (let ((x (string-length a)) (y (string-length b)))\n    (cond\n      [(= x y)\
    \ \"\"]\n      [(= x 0) (append (substring b 0 y) \"\")]\n      [(= y 0) (append\
    \ (substring a 0 x) \"\")]\n      [(= x y) (string-append (substring a 0 x) (substring\
    \ b 0 y))]))\n", "  (define (helper a b)\n    (if (= (length a) (length b))\n\
    \        (string-append (substring a 0 (- (length a) (length b)))\n          \
    \            (substring b 0 (- (length a) (length b))))\n        (helper (substring\
    \ a 0 (- (length a) (length b))) (substring b 0 (- (length a) (length b))))))\n\
    \  (helper a b))\n", "  (define (helper a b acc)\n    (if (null? a)\n        acc\n\
    \        (helper (cdr a) b (cons (car a) acc))))\n  (helper a b '()))\n", "  (let\
    \ loop ((a a) (s \"\"))\n    (if (string-length a)\n        (loop (substring a\
    \ 0 1) (+ s a))\n        s)))\n", "  (if (string-length a) (string-append (string_xor\
    \ (string-ref a 0) (string-ref b 0))\n                                     (string-ref\
    \ a 1))\n      (string-append (string_xor (string-ref a 0) (string-ref b 1))\n\
    \                     (string-ref b 0))))\n", "  (let loop ((a a) (n 0))\n   \
    \ (if (zero? n)\n        (string-append \"0\" a)\n        (loop (string-append\
    \ a b) (add1 n)))))\n", "  (let ((x (string->list a)) (y))\n    (if (null? x)\n\
    \        '()\n        (let ((x (string->list b)) (y '()))\n          (if (null?\
    \ x)\n              (append y '())\n              (let ((x (string->list x)) (y\
    \ '()))\n                (if (null? x)\n                    (append y '())\n \
    \                   (let ((x (string->list y)) (y '()))\n                    \
    \  (if (null? x)\n                          (append y '())\n                 \
    \         (let ((x (string->list y)) (y '()))\n                            (if\
    \ (null? x)\n                                (append y '())\n                \
    \                (let ((x (string->list y)) (y '()))\n                       \
    \           (if (null? x)\n                                      (append y '())\n\
    \                                      (let ((x (string->list y)) (y '()))\n \
    \                                       (if (null? x)\n                      \
    \                      (append y '())\n                                      \
    \      (let ((x (string->list y)) (y '()))\n                                 \
    \             (if (null? x)\n                                                \
    \  (append y '())\n                                                  (let ((x\
    \ (string->list y)) (y '()))\n                                               \
    \     (if (null? x)\n                                                        (append\
    \ y '())\n                                                        (let ((x (string->list\
    \ y)) (y '()))\n                                                          (if\
    \ (null? x)\n                                                              (append\
    \ y '())\n                                                              (let ((x\
    \ (string->list y)) (y '()))\n                                               \
    \                 (if (null? x)\n                                            \
    \                        (append y '())\n                                    \
    \                                (let ((x (string->list y)) (y '()))\n       \
    \                                                               (if (null? x)\n\
    \                                                                          (append\
    \ y '())\n                                                                   \
    \       (let ((x (string->list y)) (y '()))\n                                \
    \                                            (if (null? x)\n                 \
    \                                                               (append y '())\n\
    \                                                                            \
    \    (let ((x (string->list y)) (y '()))\n                                   \
    \                                               (if (null? x)\n              \
    \                                                                        (append\
    \ y '())\n                                                                   \
    \                   (let ((x (string->list y)) (y '()))\n                    \
    \                                                                    (if (null?\
    \ x)\n                                                                       \
    \                     (append y '())\n                                       \
    \                                                     (let ((x (string->list y))\
    \ (y '()))\n                                                                 \
    \                             (if (null? x)\n                                \
    \                                                                  (append y '())\n\
    \                                                                            \
    \                      (let ((x (string->list y)) (y '()))\n                 \
    \                                                                            \
    \       (if (null? x)\n                                                      \
    \                                                  (append y '())\n", "  (define\
    \ (helper a b)\n    (if (null? a) b\n        (helper (cdr a) (bxor (car a) (car\
    \ b)))))\n  (helper a b))\n", "  (let ([x (string->list a)]\n        [y (string->list\
    \ b)]\n        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y))\n          \
    \             (string-append result (first x) (first y))))))\n", "  (let ([len\
    \ (string-length a)\n        len2 (string-length b)]\n        [a (string-ref a\
    \ 0 len)\n        b (string-ref b 0 len2)])\n    (if (= len len2)\n        (string-append\
    \ (string-ref a 0 len) (string-ref b 0 len2))\n        (string-append (string_xor\
    \ (string-ref a 0 len) (string-ref b 0 len2)) (string-ref a 0 len))))\n", "  (let\
    \ ([x (string->list a)]\n        [y (string->list b)]\n        [result '()])\n\
    \    (if (null? x)\n        result\n        (string-append (string_xor (first\
    \ x) (rest x)) (string_xor (first y) (rest y)) result))))\n", "  (define (helper\
    \ a b)\n    (if (null? a)\n        b\n        (helper (cdr a) (car b))))\n  (helper\
    \ a b))\n", "  (define (helper a b)\n    (if (string? a)\n        (string-append\
    \ (helper (string-ref a 0) (string-ref b 0))\n                       (string-ref\
    \ a 1))\n        (string-append (helper (string-ref a 0) (string-ref b 1))\n \
    \                      (string-ref a 2))))\n  (helper a b))\n", "  (define (helper\
    \ a b acc)\n    (if (null? b)\n        acc\n        (helper (substring a 0 1)\
    \ (substring b 0 1) (cons (car b) acc))))\n  (helper a b \"\"))\n", "  (define\
    \ (helper a b)\n    (if (empty? b)\n        a\n        (helper (string-append\
    \ a (car b)) (cdr b))))\n  (helper a b))\n", "  (define (helper a b)\n    (if\
    \ (string=? a b)\n        (string-append \"1\" a)\n        (helper (string-append\
    \ \"0\" a) b)))\n  (helper a b))\n", "  (let ([x (string-length a)\n        y\
    \ (string-length b)])\n    (if (= x y)\n        (string-append (substring a 0\
    \ x) \"1\")\n        (string-append (substring b 0 y) \"0\")\n      )\n    )\n\
    \  )\n", "  (define (helper a b)\n    (if (string-length a) (string-append (helper\
    \ (substring a 0 1) (substring b 0 1))\n                                     \
    \  (helper (substring a 1 string-length (substring a 0 1))\n                 \
    \                             (substring b 1 string-length (substring b 0 1))))\n\
    \      (substring b 0 1)))\n  (helper a b))\n", "  (define (helper a b)\n    (if\
    \ (zero? a)\n        b\n        (helper (quotient a 2) (quotient b 2))\n     \
    \ )\n  )\n  (helper a b))\n", "  (define (helper a b)\n    (if (string-length\
    \ a) (string-append (helper (substring a 0 1) (substring b 0 1))\n           \
    \                            (string-append (substring a 1 string-length (substring\
    \ b 0 1))\n                                                   (substring b 1 string-length\
    \ (substring a 0 1))))\n      (substring b 0 1)))\n  (helper a b))\n", "  (if\
    \ (string-length a) (string-append (string_xor (string-ref a 0) (string-ref b\
    \ 0))\n                                   (string-ref a (string-length a)))\n\
    \      b))\n", "  (define (helper a b)\n    (if (zero? a)\n        b\n       \
    \ (helper (sub1 a) (bxor (sub1 b) a))))\n  (helper a b))\n", "  (let ([x (string->list\
    \ a)]\n        [y (string->list b)]\n        [result '()])\n    (if (null? x)\n\
    \        result\n        (string-append (string_xor (first x) (rest x)) (string_xor\
    \ (first y) (rest y)) result))))\n", "  (let ((x (string-length a)) (y (string-length\
    \ b)))\n    (cond ((= x y) \"\")\n          ((= y 0) \"\")\n          ((= x 0)\
    \ \"\")\n          (else (substring a 0 (- x y))\n                (substring b\
    \ (- x y))))))\n", "  (let ([a (string-ref a 0 0)\n        b (string-ref b 0 0)])\n\
    \    (string-append (bitwise-xor a) b)))\n", "  (let ([x (string->list a)]\n \
    \       [y (string->list b)]\n        [result '()])\n    (if (null? x)\n     \
    \   result\n        (string-append (string_xor (first x) (rest x)) (string_xor\
    \ (first y) (rest y)) result))))\n", "  (define (helper a b result)\n    (if (string-length\
    \ a)\n        (helper (substring a 0 1) (substring b 0 1) (append result (substring\
    \ a 1 string-length a)))\n        result))\n  (helper a b \"\"))\n", "  (let ([x\
    \ (string-length a)\n        y (string-length b)])\n    (if (= x y)\n        (string-append\
    \ (substring a 0 x) (substring b 0 y))\n        (string-append (substring a 0\
    \ x) (substring b 0 y) (substring a x y)))))\n", "  (let ((xor (string-append\
    \ (string-append a b) a)))\n    (string-append xor xor)))\n", "  (let ([a (string-ref\
    \ a 0)\n        b (string-ref b 0)])\n    (if (= a b)\n        (string-append\
    \ \"0\" \"\")\n        (string-append (string_xor (string-ref a 1) (string-ref\
    \ b 1))\n                       (string-append \"0\" \"\"))))\n", "  (define (helper\
    \ a b)\n    (cond\n      [(empty? a) (empty? b)]\n      [(char=? (first a) '0)\
    \ (char=? (first b) '0)]\n      [(char=? (first a) '1) (char=? (first b) '1)]\n\
    \      [else (helper (rest a) (rest b))]))\n  (helper a b))\n", "  (define (helper\
    \ a b)\n    (if (= (length a) (length b))\n        (string-append (substring a\
    \ 0 (- (length a) (length b)))\n                       (substring b 0 (- (length\
    \ a) (length b))))\n        (helper (substring a 0 (length a)) (substring b 0\
    \ (length b))))\n    (helper a b))\n  (helper a b))\n", "  (define (helper a b)\n\
    \    (if (= a 0) b\n        (helper (substring b 0 (string-length a)) (substring\
    \ a 0 (string-length b))))))\n  (helper a b))\n", "  (define (helper a b)\n  \
    \  (if (string-length a) (string-append (helper (string-ref a 0) (string-ref b\
    \ 0))\n                                     (string-ref a 1))\n        (string-append\
    \ (helper (string-ref a 1) (string-ref b 0))\n                       (string-ref\
    \ a 0)))\n    (if (string-length b) (string-append (helper (string-ref a 0) (string-ref\
    \ b 1))\n                                     (string-ref b 0))\n        (string-append\
    \ (helper (string-ref a 1) (string-ref b 1))\n                       (string-ref\
    \ b 0))))\n  (helper a b))\n", "  (let ([len (string-length a)])\n    (if (= len\
    \ 0)\n        '()\n        (string-append (substring a 0 len) (substring b 0 len)))))\n",
  "  (let ([a (string-ref a 0 0)\n        b (string-ref b 0 0)])\n    (string-append\
    \ (if (char=? a #\\0)\n                       (if (char=? b #\\0)\n          \
    \                 (string-append \"0\" \"\")\n                           (string-append\
    \ \"1\" \"\"))\n                       (if (char=? b #\\0)\n                 \
    \          (string-append \"1\" \"\")\n                           (string-append\
    \ \"0\" \"\")))))\n", "  (define (helper a b)\n    (cond\n      [(string=? a b)\
    \ \"\"]\n      [(string=? (string-append a b) \"\") \"\"]\n      [(string=? (string-append\
    \ a b) (car b)) (string-append a (car b))]\n      [(string=? (string-append a\
    \ b) (car (cdr b)))\n       (helper (string-append a (car b)) (cdr b))]))\n  (helper\
    \ a b))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n    \
    \    [x (string->list x)]\n        [y (string->list y)])\n    (if (null? x)\n\
    \        (string->list y)\n        (string-append (list-ref x 0) (list-ref y 0)))))\n",
  '  (let loop ((a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (', "  (let ([x (string->list a)]\n        [y (string->list b)]\n\
    \        [xor (make-string (string-length a) '#)])\n    (do ([i 0 (+ i 1)])\n\
    \        ((< i x) (set! xor (append xor (list x)))\n                  (set! x\
    \ (substring x 0 i)))\n        ((< i y) (set! y (substring y 0 i)))\n        (set!\
    \ x (substring x i 1))\n        (set! y (substring y i 1))\n        (set! x (string->list\
    \ (string-append x y)))\n        (set! x (append x (list x))))\n    (string->list\
    \ xor)))\n", "  (string-append (string-append (string-append (string a) (string\
    \ b)) (string \"\")) (string \"\")))\n", "  (let ([x (string-length a)]\n    \
    \    [y (string-length b)]\n        [result (make-string x y)])\n    (loop for\
    \ i from 0 to (- x y)\n          for j from 0 to (- y x)\n          for k from\
    \ 0 to (- x y)\n          when (char= (substring a i j) (string-ref b k))\n  \
    \        collect (substring result i j) into result\n          finally (return\
    \ result))))\n", "  (let ([x (string->list a)\n        y (string->list b)])\n\
    \    (if (null? x)\n        (string->list b)\n        (string-append (string->list\
    \ (string-ref x 0) (string-ref y 0))))))\n", "  (define (helper a b result)\n\
    \    (cond\n      [(zero? a) (zero? b) (string-append result \"0\"])\n      [(zero?\
    \ b) (zero? a) (string-append result \"0\"])\n      [(equal? a b) (string-append\
    \ result \"1\")]\n      [else (helper (sub1 a) (sub1 b) (string-append result\
    \ \"0\"))]))\n  (helper a b \"\"))\n", '  (let loop ((a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (', "  (define (helper a b)\n\
    \    (if (= a 0) b\n        (helper (substring b 0 a) (substring b a 0))))\n \
    \ (helper a b))\n", "  (define (helper a b)\n    (if (= a 0)\n        b\n    \
    \    (helper (substring b 0 (string-length a)) (substring a 0 (string-length b))))))\n\
    \  (helper a b))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n\
    \        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y))\n          \
    \             (string-append (string_xor (first result) (rest result)) (string_xor\
    \ (first result) (rest result)))\n                       (string-append (string_xor\
    \ (first result) (rest result)) (string_xor (first result) (rest result)))\n \
    \                      (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result)))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))\n\
    \                       (string-append (string_xor (first result) (rest result))\
    \ (string_xor (first result) (rest result", "  (define (helper a b)\n    (cond\n\
    \      [(empty? a) (empty? b)]\n      [(char=? (car a) (car b)) (helper (cdr a)\
    \ (cdr b))]\n      [else (helper (cdr a) (cdr b))]\n      ))\n  (helper a b))\n",
  "  (define (helper a b)\n    (if (= (length a) (length b))\n        (string-append\
    \ (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b))))\n        (helper (substring a 0 (- (length a)\
    \ (length b))) (substring b 0 (- (length a) (length b))))))\n  (helper a b))\n",
  "  (define (helper a b acc)\n    (cond\n      [(zero? a) (cons acc b)]\n      [(zero?\
    \ b) (cons acc a)]\n      [else (helper (sub1 a) (sub1 b) (cons (char-code a)\
    \ acc))]))\n  (helper a b empty))\n", "  (let ((x (string-length a)) (y) (z) (result\
    \ \"\"))\n    (cond\n      [(= x 0) result]\n      [(= y 0) result]\n      [(=\
    \ z 0) result]\n      [else (set! z (string-length b))\n           (set! y (string-length\
    \ a))\n           (set! result (substring b 0 y))\n           (string-xor (substring\
    \ a 0 x) result)]))\n</code>\n<|/ a tags=string,racket,scheme |>\n<| c |>\nI like\
    \ your solution, but I wonder how it compares to my solution. My solution is O(n^2)\
    \ while yours is O(n). My solution uses `string-length` which I believe is O(n).\
    \ Your solution uses `string-length` twice, which I believe is O(1).\n<|/ c |>\n\
    <| c |>\nI believe that `string-length` is O(n) because `string-length` has to\
    \ scan the entire string and count the characters. But I could be wrong.\n<|/\
    \ c |>\n<| c |>\nYes, `string-length` is O(n). But `string-length` has to scan\
    \ the entire string and count the characters. So it's O(n^2). My solution uses\
    \ `string-length` twice and `string-length` once. Your solution uses `string-length`\
    \ three times and `string-length` once. Your solution uses `string-length` four\
    \ times and `string-length` once. Your solution uses `string-length` five times\
    \ and `string-length` once. Your solution uses `string-length` six times and `string-length`\
    \ once. Your solution uses `string-length` seven times and `string-length` once.\
    \ Your solution uses `string-length` eight times and `string-length` once. Your\
    \ solution uses `string-length` nine times and `string-length` once. Your solution\
    \ uses `string-length` ten times and `string-length` once. Your solution uses\
    \ `string-length` eleven times and `string-length` once. Your solution uses `string-length`\
    \ twenty times and `string-length` once. Your solution uses `string-length` thirty\
    \ times and `string-length` once. Your solution uses `string-length` forty times\
    \ and `string-length` once. Your solution uses `string-length` fifty-one times\
    \ and `string-length` once. Your solution uses `string-length` sixty-two times\
    \ and `string-length` once. Your solution uses `string-length` seventy-three time",
  "  (let ([x (string->list a)]\n        [y (string->list b)]\n        [result '()])\n\
    \    (if (null? x)\n        result\n        (string-append (string_xor (first\
    \ x) (rest x)) (string_xor (first y) (rest y))\n                       (string-append\
    \ (string_xor (first result) (rest result)) (string_xor (first result) (rest result)))))))\n",
  "  (define (helper a b)\n    (if (= a 0) b\n        (helper (substring b 0 a) (substring\
    \ a 0 b))))\n  (helper a b))\n", "  (define (helper a b)\n    (if (= a 0) b\n\
    \        (helper (substring b 0 a) (substring b a 0))))\n  (helper a b))\n", " \
    \ (define (helper a b)\n    (if (string=? a b)\n        a\n        (helper (string->list\
    \ a) (string->list b))))\n  (helper a b))\n", "  (define (helper a b)\n    (if\
    \ (string=? a b)\n        a\n        (helper (string-append a b) b)))\n  (helper\
    \ a b))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n    \
    \    [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y)) result))))\n",
  "  (let ((x (string-length a)) (y (string-length b)))\n    (cond\n      [(= x y)\
    \ \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n  \
    \    [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0)\
    \ \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n  \
    \    [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y)\
    \ \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n  \
    \    [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0)\
    \ \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n  \
    \    [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y)\
    \ \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n  \
    \    [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0)\
    \ \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n  \
    \    [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y)\
    \ \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n  \
    \    [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0)\
    \ \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n  \
    \    [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n      [(= x y)\
    \ \"\"]\n      [(= y 0) \"\"]\n      [(= x y) \"\"]\n      [(= y 0) \"\"]\n  \
    \    [(= x y) \"\"]\n      [(= y 0) ", "  (let loop ((a a) (c '()))\n    (cond\n\
    \      [(empty? a) (append c '())]\n      [(empty? b) (append c '())]\n      [(char=?\
    \ (first a) (first b)) (loop (rest a) (cons (first a) c))]\n      [else (loop\
    \ (rest a) (cons (first b) c))])))\n", "  (let ([x (string->list a)]\n       \
    \ [y (string->list b)]\n        [x (string-append x '())]\n        [y (string-append\
    \ y '())]\n        [x (string-append x (string->list \"0\"))]\n        [y (string-append\
    \ y (string->list \"0\"))]\n        [x (string-append x (string->list \"1\"))]\n\
    \        [y (string-append y (string->list \"1\"))]\n        [x (string-append\
    \ x (string->list \"1\"))]\n        [y (string-append y (string->list \"0\"))]\n\
    \        [x (string-append x (string->list \"0\"))]\n        [y (string-append\
    \ y (string->list \"1\"))]\n        [x (string-append x (string->list \"1\"))]\n\
    \        [y (string-append y (string->list \"1\"))]\n        [x (string-append\
    \ x (string->list \"0\"))]\n        [y (string-append y (string->list \"0\"))]\n\
    \        [x (string-append x (string->list \"1\"))]\n        [y (string-append\
    \ y (string->list \"1\"))]\n        [x (string-append x (string->list \"0\"))]\n\
    \        [y (string-append y (string->list \"0\"))]\n        [x (string-append\
    \ x (string->list \"1\"))]\n        [y (string-append y (string->list \"1\"))]\n\
    \        [x (string-append x (string->list \"0\"))]\n        [y (string-append\
    \ y (string->list \"0\"))]\n        [x (string-append x (string->list \"1\"))]\n\
    \        [y (string-append y (string->list \"1\"))]\n        [x (string-append\
    \ x (string->list \"0\"))]\n        [y (string-append y (string->list \"0\"))]\n\
    \        [x (string-append x (string->list \"1\"))]\n        [y (string-append\
    \ y (string->list \"1\"))]\n        [x (string-append x (string->list \"0\"))]\n\
    \        [y (string-append y (string->list \"0\"))]\n        [x (string-append\
    \ x (string->list \"1\"))]\n        [y (string-append y (string->list \"1\"))]\n\
    \        [x (string-append x (string->list \"0\"))]\n        [y (string-append\
    \ y (string->list \"0\"))]\n        [x (string-append x (string->list \"1\"))]\n\
    \        [y (string-append y (string->list \"1\"))", "  (define (helper a b acc)\n\
    \    (if (string-length a)\n        (helper (substring a 0 1) (substring b 0 1)\
    \ (concat acc \"1\"))\n        acc))\n  (helper a b \"\"))\n", "  (define (helper\
    \ a b)\n    (if (= a 0) b\n        (helper (substring b 0 (- a 1)) (substring\
    \ a 0 (- b 1)))))\n  (helper a b))\n", "  (let ([len (string-length a)])\n   \
    \ (if (= len 0)\n        '()\n        (cons (string-ref a 0) (string_xor (string-ref\
    \ b 0) (substring a 1 len)))))) ; #lang racket\n", "  (let ([x (string->list a)]\n\
    \        [y (string->list b)]\n        [result '()])\n    (if (null? x)\n    \
    \    result\n        (string-append (string_xor (car x) (car y)) (string_xor (cdr\
    \ x) (cdr y))))))\n", "  (let ([x (string-length a)]\n        [y (string-length\
    \ b)]\n        [result (make-string x y)])\n    (set! result (string-append result\
    \ (substring a 0 x))\n            (string-append result (substring b x y))\n \
    \           (string-append result (substring a x y))\n            (string-append\
    \ result (substring b x y)))\n    result))\n", "  (if (string-length a) (string-append\
    \ (string_xor a (substring b 0 (string-length a)))\n                         \
    \           (substring b (string-length a))))\n      (substring b (string-length\
    \ a))))\n", "  (let ((x (string-length a)) (y (string-length b)))\n    (cond ((=\
    \ x 0) \"\")\n          ((= y 0) \"\")\n          ((= x y) \"\")\n          ((=\
    \ x 1) (substring a 0 x))\n          ((= y 1) (substring b 0 y))\n          ((=\
    \ x y) (string-append (substring a 0 x) (substring b 0 y)))\n          (else (string-append\
    \ (substring a 0 x) (substring b 0 y) (string-xor a b))))))\n", "  (define (helper\
    \ a b acc)\n    (cond\n      [(empty? a) acc]\n      [(empty? b) acc]\n      [else\
    \ (helper (cdr a) (cdr b) (cons (car a) acc))]\n      ))\n  (helper a b empty))\n",
  '  (let loop ((a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (', "  (define (helper a b)\n    (if (string-length a) (string-append\
    \ (helper (string-ref a 0) (string-ref b 0))\n                               \
    \       (helper (string-ref a 1) (string-ref b 1)))\n      (string-append a b)))\n\
    \  (helper a b))\n", "  (let ([a (string-ref a 0)\n        b (string-ref b 0)])\n\
    \    (if (= a b)\n        (string-append \"0\" \"\")\n        (string-append (string_xor\
    \ (string-ref a 1) (string-ref b 1))\n                       (string-append \"\
    0\" \"\"))))\n", "  (define (helper a b)\n    (if (= (length a) (length b))\n\
    \        (string-append (substring a 0 (- (length a) (length b)))\n          \
    \            (substring b (- (length a) (length b)) (length b)))\n        (helper\
    \ (substring a 0 (- (length a) (length b))) \n                (substring b (-\
    \ (length a) (length b)) (length b))))\n    (helper (substring a 0 (- (length\
    \ a) (length b))) \n            (substring b (- (length a) (length b)) (length\
    \ b))))\n  (helper a b))\n", "  (define (helper a b)\n    (if (= a 0) b\n    \
    \    (helper (substring b 0 (- a 1)) (reverse (substring a 0 (- a 1))))))\n  (helper\
    \ a b))\n", "  (define (helper a b)\n    (if (string=? a b)\n        (string-append\
    \ \"1\" a)\n        (helper (string-append \"0\" a) b)))\n  (helper a b))\n",
  "  (let loop ((a a) (c '()))\n    (cond\n      [(empty? a) (append c '())]\n   \
    \   [(empty? b) (append c '())]\n      [(equal? (first a) (first b)) (loop (rest\
    \ a) (rest c))]\n      [else (loop (rest a) (cons (first a) (first b) (first c)))]\n\
    \      )))\n", "  (let ((x (string-length a)) (y (string-length b)))\n    (if\
    \ (= x y)\n        (string-append (substring a 0 x) (substring b 0 y))\n     \
    \   (string-append (substring a 0 x) (substring b 0 y) (substring a x y)))))\n",
  "  (let ([x (string-length a)]\n        [y (string-length b)]\n        [result (make-string\
    \ x y)])\n    (string->number\n     (string-ref a 0)\n     (string-ref b 0)\n\
    \     (string-ref result 0)\n     x\n     y\n     x\n     y\n     x\n     y\n\
    \     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n    \
    \ y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n\
    \     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n    \
    \ x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n\
    \     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n    \
    \ y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n\
    \     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n    \
    \ x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n\
    \     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n    \
    \ y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n\
    \     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n    \
    \ x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n\
    \     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n    \
    \ y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n\
    \     y\n     x\n     y\n     x\n     y\n     x\n     y\n     x\n     y\n    \
    \ x\n     y\n     x\n     y\n     x\n     y\n     ", "  (define (helper a b)\n\
    \    (if (string=? a b)\n        (string-append a b)\n        (helper (string-append\
    \ \"0\" a) (string-append \"1\" b))))\n  (helper a b))\n", "  (let ([x (string-length\
    \ a)\n        y (string-length b)])\n    (if (= x y)\n        (string-append (substring\
    \ a 0 x) (substring b 0 y))\n        (string-append (substring a 0 x) (substring\
    \ b 0 y) (substring a x y)))))\n", "  (let ((x (string-length a)) (y (string-length\
    \ b)))\n    (if (= x y)\n        (string-append (substring a 0 x) (substring b\
    \ 0 y))\n        (string-append (substring a 0 x) (substring b 0 y) (substring\
    \ a x y))))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n\
    \        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (car x) (car y)) (string_xor (cdr x) (cdr y))))))\n", "  (define\
    \ (helper a b)\n    (if (zero? a)\n        b\n        (helper (sub1 a) b)))\n\
    \  (helper a b))\n", "  (let ((x (string-ref a 0))\n        (y (string-ref b 0)))\n\
    \    (if (= x y)\n        (string-append \"0\" a)\n        (string-append \"1\"\
    \ a))))\n", "  (define (helper a b)\n    (if (null? a)\n        b\n        (helper\
    \ (cdr a) (cons (car a) b))))\n  (helper a b))\n", "  (define (helper a b)\n \
    \   (if (null? b)\n        a\n        (helper (string-append a (car b)) (cdr b))))\n\
    \  (helper a b))\n", "  (let ([x (string->list a)]\n        [y (string->list b)]\n\
    \        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (car x) (car y)) (string_xor (cdr x) (cdr y))))))\n", "  (let ([x\
    \ (string->list a)]\n        [y (string->list b)]\n        [result '()])\n   \
    \ (if (null? x)\n        result\n        (string-append (string_xor (first x)\
    \ (rest x)) (string_xor (first y) (rest y)) result))))\n", "  (define (helper\
    \ a b acc)\n    (if (string=? a b)\n        acc\n        (helper (string-append\
    \ a b) b (string-append acc b))))\n  (helper a b \"\"))\n", "  (string-append\
    \ (string-append (string-append (string-append a b) a) b) a))\n", "  (define (helper\
    \ a b)\n    (if (= a 0) b (helper (substring b 0 a) (substring a 0 b))))\n  (helper\
    \ a b))\n", "  (let ((x (string-length a)) (y (string-length b)))\n    (if (=\
    \ x y)\n        (string-append (substring a 0 x) (substring b 0 y))\n        (string-append\
    \ (substring a 0 x) (substring b 0 y) (substring a x y))))\n", "  (define (helper\
    \ a b)\n    (if (string=? a b)\n        (string-append \"1\" a)\n        (string-append\
    \ \"0\" a)))\n  (helper a b))\n", "  (define (helper a b)\n    (if (string=? a\
    \ b)\n        (string-append \"1\" a)\n        (helper (string-append \"0\" a)\
    \ b)))\n  (helper a b))\n", "  (define (helper a b)\n    (cond\n      [(empty?\
    \ a) (empty? b)]\n      [(char=? (car a) (car b)) (helper (cdr a) (cdr b))]\n\
    \      [else (cons (car a) (helper (cdr a) b))]\n      ))\n  (helper a b))\n",
  "  (let ([x (string->list a)]\n        [y (string->list b)]\n        [result (list->string\
    \ '())]\n        [xor (lambda (x y)\n              (if (null? x)\n           \
    \       (if (null? y)\n                      result\n                      (cons\
    \ (car y) result))\n                  (if (null? y)\n                      result\n\
    \                      (cons (car x) result)))\n              (if (null? y)\n\
    \                  result\n                  (cons (car x) result)))])\n    (for\
    \ ([i (length x)])\n      (set! result (apply xor result (substring x i i) (substring\
    \ y i i)))\n      result)))\n", "  (let ((x (string-length a)) (y (string-length\
    \ b)))\n    (if (= x y)\n        (string-append (substring a 0 x) (substring b\
    \ 0 y))\n        (string-append (substring a 0 x) (substring b 0 y) (substring\
    \ a x y)))))\n", "  (define (helper a b)\n    (if (zero? a)\n        b\n     \
    \   (helper (quotient a 2) (quotient b 2))))\n  (helper a b))\n", "  (let loop\
    \ ((a a) (x 0) (b b))\n    (if (zero? b)\n        x\n        (loop (string-append\
    \ a x) (string-char-code x) b))))\n", "  (let ([x (string-length a)\n        y\
    \ (string-length b)])\n    (if (= x y)\n        (string-append (substring a 0\
    \ x) (substring b 0 y))\n        (string-append (substring a 0 x) (substring b\
    \ 0 y) (substring a x y)))))\n", "  (define (helper a b)\n    (if (= a 0) b\n\
    \        (helper (substring b 0 (- (length a) 1)) (reverse (substring a 0 (- (length\
    \ b) 1))))))\n  (helper a b))\n", "  (define (helper a b acc)\n    (if (null?\
    \ b)\n        acc\n        (helper (substring a 0 1) (cdr b) (cons (char->int\
    \ (first b)) acc))))\n  (helper a b empty))\n", "  (define (helper a b)\n    (if\
    \ (string-length a) (string-append (helper (substring a 0 1) (substring b 0 1))\n\
    \                                       (helper (substring a 1 string-length (substring\
    \ b 0 1))\n                                            (substring b 1 string-length\
    \ (substring a 0 1))))\n      (substring b 0 1)))\n  (helper a b))\n", "  (let\
    \ ([x (string->list a)]\n        [y (string->list b)]\n        [result '()])\n\
    \    (if (null? x)\n        result\n        (string-append (string_xor (first\
    \ x) (rest x)) (string_xor (first y) (rest y)))))\n  result)\n", "  (define (helper\
    \ a b)\n    (if (equal? a b)\n        a\n        (helper (string-append a b) (string-append\
    \ \"0\" (string->number b))))\n    (helper (string-append a b) b))\n  (helper\
    \ a b))\n", "  (if (string-length a) (string-append (string_xor (string-ref a\
    \ 0) (string-ref b 0))\n                                     (string-ref a 1))\n\
    \      b))\n", "  (let loop ((a a) (result \"\"))\n    (cond ((string-length a)\
    \ result)\n          ((string-length b) result)\n          ((char= (char-ref a\
    \ 0) (char-ref b 0)) result)\n          ((char= (char-ref a 1) (char-ref b 1))\
    \ result)\n          (else (loop (string-ref a 1) (char-ref b 1))))))\n", "  (define\
    \ (helper a b)\n    (if (string-length a) (string-append (substring a 0 1) (substring\
    \ b 0 1))\n      (substring a 0 1)))\n  (helper a b))\n", "  (define (helper a\
    \ b)\n    (if (zero? a)\n        b\n        (helper (sub1 a) (bxor (car b) (cdr\
    \ b))))\n    (helper (sub1 a) b))\n  (helper a b))\n", "  (let ((x (string-length\
    \ a)) (y (string-length b)))\n    (if (= x y)\n        (string-append \"0\" a)\n\
    \        (string-append \"0\" b)\n    )\n    (string-append (substring a 0 x)\
    \ (substring b 0 y) (substring a x y) (substring b x y))))\n", '  (let loop ((a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a
    a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (',
  "  (define (helper a b result)\n    (if (string=? a b)\n        result\n       \
    \ (helper (string-append a b) b (string-append result \"1\"))))\n  (helper a b\
    \ \"\"))\n", "  (define (helper a b)\n    (if (null? b)\n        a\n        (helper\
    \ (string-append a (car b)) (cdr b))))\n  (helper a b))\n", "  (define (helper\
    \ a b)\n    (if (string=? a b)\n        (string-append a b)\n        (helper (string-append\
    \ a b) a)))\n  (helper a b))\n", "  (let ([x (string->list a)]\n        [y (string->list\
    \ b)]\n        [result '()])\n    (if (null? x)\n        result\n        (string-append\
    \ (string_xor (first x) (rest x)) (string_xor (first y) (rest y)) result))))\n",
  "  (define (helper a b)\n    (if (null? b)\n        a\n        (helper (string-append\
    \ (substring a 0 1) (substring b 0 1)) (rest b))\n      )\n  )\n  (helper a b))\n",
  "  (define (helper a b)\n    (if (null? a) b\n        (helper (cdr a) (car b))))\n\
    \  (helper a b))\n", "  (let loop ((a a) (result \"\"))\n    (if (string-length\
    \ a)\n        (loop (substring a 0 (string-length a)) (append result (substring\
    \ a 0 (string-length a))))\n        result)))\n", "  (let ((x (string-length a))\
    \ (y (string-length b)))\n    (if (= x y)\n        (string-append (substring a\
    \ 0 x) (substring b 0 y))\n        (string-append (substring a 0 x) (substring\
    \ b 0 y) (substring a x y)))))\n", "  (define (helper a b)\n    (if (string-length\
    \ a) (string-append (helper (substring a 0 1) (substring b 0 1))\n           \
    \                            (helper (substring a 1 string-length (substring a\
    \ 1 string-length (substring a 0 1))))\n                                     \
    \  (helper (substring a string-length (substring a 1 string-length (substring\
    \ a 0 1))) (substring b 1 string-length (substring b 1 string-length (substring\
    \ b 0 1)))))\n    (string-append (substring a 0 1) (substring b 0 1))))\n  (helper\
    \ a b))\n", "  (if (string-length a) (string-append (string_xor (string-ref a\
    \ 0) (string-ref b 0))\n                                     (string-ref a (string-length\
    \ a)))\n      b))\n", "  (define (helper a b)\n    (if (= (length a) (length b))\n\
    \        (string-append (substring a 0 (- (length a) (length b)))\n          \
    \            (substring b 0 (- (length a) (length b)))\n                     \
    \ (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (substring b 0 (- (length a) (length\
    \ b)))\n                      (substring a 0 (- (length a) (length b)))\n    \
    \                  (substring b 0 (- (length a) (length b)))\n               \
    \       (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (substring b 0 (- (length a) (length\
    \ b)))\n                      (substring a 0 (- (length a) (length b)))\n    \
    \                  (substring b 0 (- (length a) (length b)))\n               \
    \       (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (substring b 0 (- (length a) (length\
    \ b)))\n                      (substring a 0 (- (length a) (length b)))\n    \
    \                  (substring b 0 (- (length a) (length b)))\n               \
    \       (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (substring b 0 (- (length a) (length\
    \ b)))\n                      (substring a 0 (- (length a) (length b)))\n    \
    \                  (substring b 0 (- (length a) (length b)))\n               \
    \       (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (substring b 0 (- (length a) (length\
    \ b)))\n                      (substring a 0 (- (length a) (length b)))\n    \
    \                  (substring b 0 (- (length a) (length b)))\n               \
    \       (substring a 0 (- (length a) (length b)))\n                      (substring\
    \ b 0 (- (length a) (length b)))\n                      (substring a 0 (- (length\
    \ a) (length b)))\n                      (sub", "  (define (helper a b)\n    (if\
    \ (string=? a b)\n        (string-append \"1\" a)\n        (helper (string-append\
    \ \"0\" a) b)))\n  (helper a b))\n", "  (let ([x (string->list a)]\n        [y\
    \ (string->list b)]\n        [x (string->list x)]\n        [y (string->list y)])\n\
    \    (string->list x (string->list x) (string->list y))))\n", "  (let ([x (string->list\
    \ a)]\n        [y (string->list b)]\n        [x (string->list x)]\n        [y\
    \ (string->list y)])\n    (string->list x (string-length x) x (string-length y)\
    \ y)))\n", "  (define (helper a b)\n    (if (empty? a)\n        b\n        (helper\
    \ (cdr a) (car b))))\n  (helper a b))\n", "  (let ([x (string->list a)]\n    \
    \    [y (string->list b)]\n        [x (string->list x)]\n        [y (string->list\
    \ y)])\n    (if (null? x)\n        (string->list b)\n        (let ([x (string->list\
    \ x)]\n              [y (string->list y)])\n          (if (null? y)\n        \
    \      (string->list b)\n              (let ([x (string->list x)]\n          \
    \          [x (string->list x)]\n                    [y (string->list y)])\n \
    \               (if (null? x)\n                    (string->list b)\n        \
    \            (let ([x (string->list x)]\n                          [y (string->list\
    \ y)])\n                      (if (null? y)\n                          (string->list\
    \ b)\n                          (let ([x (string->list x)]\n                 \
    \               [x (string->list x)]\n                                [y (string->list\
    \ y)])\n                                (string->list b)))))))))))\n", "  (let\
    \ ((x (string-length a)) (y (string-length b)))\n    (if (= x y)\n        (string-append\
    \ (substring a 0 x) (substring b 0 y))\n        (string-append (substring a 0\
    \ x) (substring b 0 y) (substring a x y)))))\n", "  (define (helper a b)\n   \
    \ (if (null? b)\n        a\n        (helper (string-append a (car b)) (cdr b))))\n\
    \  (helper a b))\n", "  (define (helper a b)\n    (if (zero? a)\n        b\n \
    \       (helper (quotient a 2) (quotient b 2))\n      )\n  )\n  (helper a b))\n",
  "  (let loop ((a a) (n 0))\n    (cond\n      [(empty? a) \"\"]\n      [(empty? b)\
    \ \"\"]\n      [(char=? (first a) (first b)) (loop (rest a) (+ n 1))]\n      [else\
    \ (loop (rest a) (+ n 1))])))\n", "  (define (helper a b acc)\n    (cond\n   \
    \   [(zero? a) (cons acc b)]\n      [(zero? b) (cons acc a)]\n      [else (helper\
    \ (sub1 a) (sub1 b) (cons (char-code a) acc))]))\n  (helper a b empty))\n", " \
    \ (define (helper a b)\n    (if (string-length a) (string-append (helper (string-ref\
    \ a 0) (string-ref b 0))\n                                       (string-ref a\
    \ 1))\n        (string-append (helper (string-ref a 0) (string-ref b 1))\n   \
    \                    (string-ref a 2))))\n  (helper a b))\n", "  (define (helper\
    \ a b)\n    (if (string=? a b)\n        (string-append \"1\" a)\n        (helper\
    \ (string-append \"0\" a) b)))\n  (helper a b))\n", "  (define (helper a b)\n\
    \    (if (string-length a) (string-append (helper (string-ref a 0) (string-ref\
    \ b 0))\n                                       (string-ref a 1))\n        (string-append\
    \ (helper (string-ref a 1) (string-ref b 0))\n                       (string-ref\
    \ a 0))))\n  (helper a b))\n", "  (let ((xor (string-append (string-append a b)\
    \ \"\")))\n    (string-append xor \"\")))\n", '  (let loop ((a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a)
    (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (a a) (', "  (define (helper\
    \ a b)\n    (if (= a 0) b\n        (helper (substring b 0 a) (substring b a 0))))\n\
    \  (helper a b))\n", "  (define (helper a b)\n    (if (zero? a)\n        b\n \
    \       (helper (quotient a 2) (quotient b 2))\n      )\n  )\n  (helper a b))\n",
  "  (define (helper a b)\n    (if (zero? a)\n        b\n        (helper (quotient\
    \ a 2) (quotient b 2))\n      )\n  )\n  (helper a b))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
