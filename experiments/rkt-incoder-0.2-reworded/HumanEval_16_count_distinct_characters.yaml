name: HumanEval_16_count_distinct_characters
language: rkt
prompt: "#lang racket\n\n;; Given a string, find out how many distinct characters\
  \ (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"\
  xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abcde\")\
  \ 5)\n    (check-equal? (candidate \"abcdecadeCADE\") 5)\n    (check-equal? (candidate\
  \ \"aaaaAAAAaaaa\") 1)\n    (check-equal? (candidate \"Jerry jERRY JeRRRY\") 5)\n\
  ))\n\n(test-humaneval)"
completions: ["  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters-helper\
    \ string '()))\n", "  (define (helper string count)\n    (if (null? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string))))\n   \
    \ (helper (cdr string) 0))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string) 0 0))\n", "  (count_distinct_characters-helper string #{}))\n", " \
    \ (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters-iter\
    \ string '()))\n", "  (define (helper string count)\n    (if (null? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string)))\n    \
    \  )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters_aux (string)\
    \ 0))\n", "  (count_distinct_characters_aux (string-length string) string 0))\n",
  "  (count_distinct_characters_aux (make-string-input-stream string) 0))\n", "  (count_distinct_characters-helper\
    \ string '()))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (define\
    \ (helper string count)\n    (if (null? string)\n        count\n        (helper\
    \ (cdr string) (+ count (length string)))\n      )\n  )\n  (helper string 0)\n\
    )\n", "  (count_distinct_characters-iter string '()))\n", "  (count_distinct_characters-aux\
    \ (string-length string) string 0))\n", "  (count_distinct_characters_aux (string-length\
    \ string) string))\n", "  (let loop ((count 0))\n    (if (null? string)\n    \
    \    count\n        (loop (add1 (loop (add1 (loop (add1 count)))))))))\n", " \
    \ (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
