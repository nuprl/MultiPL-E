name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) count))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n",
  "  (let ((mean 0))\n    (map (lambda (x) (+ (abs (- x mean)) mean)) numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (let ((mean 0))\n\
    \    (for ((i numbers))\n      (let ((diff (- i mean)))\n        (set! mean (+\
    \ mean i))\n        (set! diff (+ diff diff))\n        (/ diff 2)))))\n", "  (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers)) count))\n", "  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n",
  "  (/ (apply + (map abs numbers)) (length numbers)))\n", "  (/ (apply + (map abs\
    \ numbers)) (length numbers)))\n", "  (/ (apply + (map (lambda (x) (abs (- x numbers)))\
    \ numbers)) \n     (length numbers)))\n", "  (/ (apply + (map (lambda (x) (abs\
    \ (- x mean))) numbers)) \n     (length numbers)))\n", "  (/ (apply + (map (lambda\
    \ (x) (abs (- x mean))) numbers)) count))\n", "  (/ (apply + (map abs (- numbers\
    \ mean))) count))\n", "  (/ (apply + (map abs (- numbers mean))) #(length numbers)))\n",
  "  (/ (apply + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
