name: HumanEval_125_split_words
language: rkt
prompt: "#lang racket\n\n;; Given a string of words, return a list of words split\
  \ on whitespace, if no whitespaces exists in the text you\n;; should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  ;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\"\
  )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
  \ (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n\
  \    (check-equal? (candidate \"Hello world!\") (list \"Hello\" \"world!\"))\n \
  \   (check-equal? (candidate \"Hello,world!\") (list \"Hello\" \"world!\"))\n  \
  \  (check-equal? (candidate \"Hello world,!\") (list \"Hello\" \"world,!\"))\n \
  \   (check-equal? (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\"\
  \ \"!\"))\n    (check-equal? (candidate \"abcdef\") 3)\n    (check-equal? (candidate\
  \ \"aaabb\") 2)\n    (check-equal? (candidate \"aaaBb\") 1)\n    (check-equal? (candidate\
  \ \"\") 0)\n))\n\n(test-humaneval)"
completions: ["  (let ([chars (string->list (string->string txt))])\n    (cond\n \
    \     [(empty? chars) '()]\n      [(not (whitespace? chars)) (list chars)]\n \
    \     [else (let ([chars (string->list (string->string txt))])\n             \
    \  (cond\n                 [(empty? chars) '()]\n                 [(not (comma?\
    \ chars)) (list chars)]\n                 [else (let ([chars (string->list (string->string\
    \ txt))])\n                           (cond\n                             [(empty?\
    \ chars) '()]\n                             [(not (comma? chars)) (list chars)]\n\
    \                             [else (let ([chars (string->list (string->string\
    \ txt))])\n                                       (cond\n                    \
    \                     [(empty? chars) '()]\n                                 \
    \        [(not (comma? chars)) (list chars)]\n                               \
    \          [else (let ([chars (string->list (string->string txt))])\n        \
    \                                           (cond\n                          \
    \                           [(empty? chars) '()]\n                           \
    \                          [(not (comma? chars)) (list chars)]\n             \
    \                                        [else (let ([chars (string->list (string->string\
    \ txt))])\n                                                            (cond\n\
    \                                                              [(empty? chars)\
    \ '()]\n                                                              [(not (comma?\
    \ chars)) (list chars)]\n                                                    \
    \          [else (let ([chars (string->list (string->string txt))])\n        \
    \                                                            (cond\n         \
    \                                                             [(empty? chars)\
    \ '()]\n                                                                     \
    \ [(not (comma? chars)) (list chars)]\n                                      \
    \                                [else (let ([chars (string->list (string->string\
    \ txt))])\n                                                                  \
    \        (cond\n                                                             \
    \               [(empty? chars) '()]\n                                       \
    \                                     [(not (comma? chars)) (list chars)]\n  \
    \                                                                          [else\
    \ (let ([chars (string->list (string->string txt))])\n                       \
    \                                                                (cond\n     \
    \                                                                            \
    \       [(empty? chars) '()]\n                                               \
    \                                         [(not (comma? chars)) (list chars)]\n\
    \                                                                            \
    \            [else (let ([chars (string->list (string->string txt))])\n      \
    \                                                                            \
    \              (cond\n                                                       \
    \                                           [(empty? chars) '()]\n           \
    \                                                                            \
    \           [(not (comma? chars)) (list chars)]\n                            \
    \                                                                      [else (let\
    \ ([chars (string->list (string->string txt))])\n                            \
    \                                                                            \
    \  (cond\n                                                                   \
    \                                         [(empty? chars) '()]\n             \
    \                                                                            \
    \                   [(not (comma? chars)) (list chars)]\n                    \
    \                                                                            \
    \            [else (let ([chars (string->list (string->string txt))", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (if (empty? txt)\n\
    \      '()\n      (let ([chars (string->list (string->string txt))])\n       \
    \ (if (empty? chars)\n            (length txt)\n            (let ([chars (string->list\
    \ (string->string txt))])\n              (if (empty? chars)\n                \
    \  (length txt)\n                  (let ([chars (string->list (string->string\
    \ txt))])\n                    (if (empty? chars)\n                        (length\
    \ txt)\n                        (let ([chars (string->list (string->string txt))])\n\
    \                          (if (empty? chars)\n                              (length\
    \ txt)\n                              (let ([chars (string->list (string->string\
    \ txt))])\n                                (if (empty? chars)\n              \
    \                      (length txt)\n                                    (let\
    \ ([chars (string->list (string->string txt))])\n                            \
    \          (if (empty? chars)\n                                          (length\
    \ txt)\n                                          (let ([chars (string->list (string->string\
    \ txt))])\n                                            (if (empty? chars)\n  \
    \                                              (length txt)\n                \
    \                                (let ([chars (string->list (string->string txt))])\n\
    \                                                  (if (empty? chars)\n      \
    \                                                (length txt)\n              \
    \                                        (let ([chars (string->list (string->string\
    \ txt))])\n                                                        (if (empty?\
    \ chars)\n                                                            (length\
    \ txt)\n                                                            (let ([chars\
    \ (string->list (string->string txt))])\n                                    \
    \                          (if (empty? chars)\n                              \
    \                                    (length txt)\n                          \
    \                                        (let ([chars (string->list (string->string\
    \ txt))])\n                                                                  \
    \  (if (empty? chars)\n                                                      \
    \                  (length txt)\n                                            \
    \                            (let ([chars (string->list (string->string txt))])\n\
    \                                                                          (if\
    \ (empty? chars)\n                                                           \
    \                   (length txt)\n                                           \
    \                                   (let ([chars (string->list (string->string\
    \ txt))])\n                                                                  \
    \              (if (empty? chars)\n                                          \
    \                                          (length txt)\n                    \
    \                                                                (let ([chars\
    \ (string->list (string->string txt))])\n                                    \
    \                                                  (if (empty? chars)\n      \
    \                                                                            \
    \        (length txt)\n                                                      \
    \                                    (let ([chars (string->list (string->string\
    \ txt))])\n                                                                  \
    \                          (if (empty? chars)\n                              \
    \                                                                  (length txt)\n\
    \                                                                            \
    \                    (let ([chars (string->list (string->string txt))])\n    \
    \                                                                            \
    \                  (if (empty? chars)\n                                      \
    \                                                                (length txt)\n\
    \                                                                            \
    \                          (let ([chars (string->list (string->string txt))",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list (string->string\
    \ txt))])\n    (cond\n      [(empty? chars) '()]\n      [(not (whitespace? chars))\
    \ (cons (string->string chars) '())]\n      [(not (comma? chars)) (length (string->list\
    \ (string->string chars)))]\n      [else (+ 1 (odd? chars))])))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '(') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) ')') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list txt)])\n\
    \    (cond\n      [(empty? chars) '()]\n      [(char=? (first chars) #\\Space)\
    \ '()]\n      [(char=? (first chars) #\\,) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\:) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\;) '()]\n      [(char=? (first chars) #\\;) '()]\n      [(char=? (first chars)\
    \ #\\", "  (let ([chars (string->list (string->symbol txt))])\n    (cond\n   \
    \   [(empty? chars) (list txt)]\n      [(string=? (first chars) #\\space) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\,) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\!) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\?) (split_words (rest chars))]\n      [(string=? (first chars) #\\;) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\:) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\;) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\;) (split_words (rest chars))]\n      [(string=? (first chars) #\\;) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\;) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\;) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\;) (split_words (rest chars))]\n      [(string=? (first chars) #\\;) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\;) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\;) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\;) (split_words (rest chars))]\n      [(string=? (first chars) #\\;) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\;) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\;) (split_words (rest chars))]\n      [(string=", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list txt)])\n    (cond\n      [(empty? chars) '()]\n      [(not (whitespace?\
    \ chars)) (list txt)]\n      [(not (comma? chars)) (length (string->list txt))]\n\
    \      [else (+ 1 (length (string->list txt)))])))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words ((rest txt)))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let ([chars (string->list (string->string txt))])\n\
    \    (cond\n      [(empty? chars) '()]\n      [(string=? (first chars) \",\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \" \")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"-\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n      [(string=? (first chars) \"!\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \"?\")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"!\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n      [(string=? (first chars) \"?\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n      [(string=? (first chars) \"!\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \"?\")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"!\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n      [(string=? (first chars) \"?\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n      [(string=? (first chars) \"!\")\n\
    \       (append (split_words (rest chars)) (list (first chars)))]\n      [(string=?\
    \ (first chars) \"?\")\n       (append (split_words (rest chars)) (list (first\
    \ chars)))]\n      [(string=? (first chars) \"!\")\n       (append (split_words\
    \ (rest chars)) (list (first chars)))]\n", "  (cond\n    [(empty? txt) empty]\n\
    \    [(equal? (first txt) whitespace) (rest txt)]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let loop ((text txt) (words ()))\n    (cond ((null?\
    \ text) words)\n          ((char=? (car text) ?whitespace) loop)\n          ((char=?\
    \ (car text) ?comma) loop)\n          ((char=? (car text) ?lower-case) loop)\n\
    \          (else (loop (cdr text) (cons (car text) words)))))\n</code>\n<|/ a\
    \ tags=racket,scheme |>\n<| c |>\nThis doesn't work. `split_words \"Hello world!\"\
    ` returns `(list \"Hello\" \"world!\")` instead of `(list \"Hello\" \"world!\"\
    \ '())`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n\
    <|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? txt) '()]\n\
    \    [(empty? (rest txt)) (list txt)]\n    [(or (char-whitespace? first (first\
    \ txt)) (char-whitespace? first (first txt))) (list txt)]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) whitespace) (rest txt)]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let ([words (string->list txt)])\n    (cond\n      [(empty?\
    \ words) '()]\n      [(not (whitespace? first (first words))) (split_words first\
    \ (first words))]\n      [else (cons (first words) (split_words (rest words)))])))\n",
  "  (let ([chars (string->list txt)])\n    (if (null? chars)\n        '()\n     \
    \   (let ([word (first chars)])\n          (if (string=? word \"\")\n        \
    \      (cons word '())\n              (cons (string->list (string->string word))\
    \ (split_words (rest chars)))))))\n  (length (filter (lambda (x) (not (equal?\
    \ x \"\")) (map (lambda (x) (string->string x)) (split_words (string->list txt)))))\n\
    \  (length (filter (lambda (x) (not (equal? x \"\")) (map (lambda (x) (string->string\
    \ x)) (split_words (string->list txt)))))\n  (length (filter (lambda (x) (not\
    \ (equal? x \"\")) (map (lambda (x) (string->string x)) (split_words (string->list\
    \ txt)))))\n  (length (filter (lambda (x) (not (equal? x \"\")) (map (lambda (x)\
    \ (string->string x)) (split_words (string->list txt)))))\n  (length (filter (lambda\
    \ (x) (not (equal? x \"\")) (map (lambda (x) (string->string x)) (split_words\
    \ (string->list txt)))))\n  (length (filter (lambda (x) (not (equal? x \"\"))\
    \ (map (lambda (x) (string->string x)) (split_words (string->list txt)))))\n \
    \ (length (filter (lambda (x) (not (equal? x \"\")) (map (lambda (x) (string->string\
    \ x)) (split_words (string->list txt)))))\n  (length (filter (lambda (x) (not\
    \ (equal? x \"\")) (map (lambda (x) (string->string x)) (split_words (string->list\
    \ txt)))))\n  (length (filter (lambda (x) (not (equal? x \"\")) (map (lambda (x)\
    \ (string->string x)) (split_words (string->list txt)))))\n  (length (filter (lambda\
    \ (x) (not (equal? x \"\")) (map (lambda (x) (string->string x)) (split_words\
    \ (string->list txt)))))\n  (length (filter (lambda (x) (not (equal? x \"\"))\
    \ (map (lambda (x) (string->string x)) (split_words (string->list txt)))))\n \
    \ (length (filter (lambda (x) (not (equal? x \"\")) (map (lambda (x) (string->string\
    \ x)) (split_words (string->list txt)))))", "  (let ([chars (string->list txt)])\n\
    \    (cond\n      [(empty? chars) '()]\n      [(not (whitespace? chars)) (list\
    \ txt)]\n      [else (cons (first chars) (split_words (rest chars)))])))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first txt)\
    \ '-) (split_words (rest txt))]\n    [(equal? (first txt) '!) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list txt)])\n\
    \    (cond\n      [(empty? chars) (list '())]\n      [(char=? (first chars) #\\\
    Space) (split_words (rest chars))]\n      [(char=? (first chars) #\\Comma) (split_words\
    \ (rest chars))]\n      [(char=? (first chars) #\\Newline) (split_words (rest\
    \ chars))]\n      [(char=? (first chars) #\\Tab) (split_words (rest chars))]\n\
    \      [(char=? (first chars) #\\Return) (split_words (rest chars))]\n      [(char=?\
    \ (first chars) #\\Newline) (split_words (rest chars))]\n      [(char=? (first\
    \ chars) #\\Space) (split_words (rest chars))]\n      [(char=? (first chars) #\\\
    Space) (split_words (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words\
    \ (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n\
    \      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n      [(char=?\
    \ (first chars) #\\Space) (split_words (rest chars))]\n      [(char=? (first chars)\
    \ #\\Space) (split_words (rest chars))]\n      [(char=? (first chars) #\\Space)\
    \ (split_words (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words\
    \ (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n\
    \      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n      [(char=?\
    \ (first chars) #\\Space) (split_words (rest chars))]\n      [(char=? (first chars)\
    \ #\\Space) (split_words (rest chars))]\n      [(char=? (first chars) #\\Space)\
    \ (split_words (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words\
    \ (rest chars))]\n      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n\
    \      [(char=? (first chars) #\\Space) (split_words (rest chars))]\n      [(char=?\
    \ (first chars) #\\Space) (split_words (rest chars))]\n      [(char", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words ((rest txt)))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list\
    \ (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=?\
    \ (first chars) #\\space) '()]\n      [(string=? (first chars) #\\,) '()]\n  \
    \    [(string=? (first chars) #\\;) '()]\n      [(string=? (first chars) #\\:)\
    \ '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=? (first chars)\
    \ #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=? (first\
    \ chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first ", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n    [else\
    \ (let ([chars (string->list (string->string txt))])\n            (cond\n    \
    \          [(empty? chars) '()]\n              [(char=? (first chars) ',') (list\
    \ txt)]\n              [(char=? (first chars) '-') (list txt)]\n             \
    \ [(char=? (first chars) '#') (list txt)]\n              [(char=? (first chars)\
    \ '$') (list txt)]\n              [(char=? (first chars) '%') (list txt)]\n  \
    \            [(char=? (first chars) '&') (list txt)]\n              [(char=? (first\
    \ chars) '(') (list txt)]\n              [(char=? (first chars) ')') (list txt)]\n\
    \              [(char=? (first chars) '[') (list txt)]\n              [(char=?\
    \ (first chars) ']') (list txt)]\n              [(char=? (first chars) '{') (list\
    \ txt)]\n              [(char=? (first chars) '}') (list txt)]\n             \
    \ [(char=? (first chars) '|') (list txt)]\n              [(char=? (first chars)\
    \ '~') (list txt)]\n              [(char=? (first chars) '`') (list txt)]\n  \
    \            [(char=? (first chars) '!') (list txt)]\n              [(char=? (first\
    \ chars) '@') (list txt)]\n              [(char=? (first chars) '#') (list txt)]\n\
    \              [(char=? (first chars) '$') (list txt)]\n              [(char=?\
    \ (first chars) '%') (list txt)]\n              [(char=? (first chars) '&') (list\
    \ txt)]\n              [(char=? (first chars) '(') (list txt)]\n             \
    \ [(char=? (first chars) ')') (list txt)]\n              [(char=? (first chars)\
    \ '[') (list txt)]\n              [(char=? (first chars) ']') (list txt)]\n  \
    \            [(char=? (first chars) '{') (list txt)]\n              [(char=? (first\
    \ chars) '}') (list txt)]\n              [(char=? (first chars) '|') (list txt)]\n\
    \              [(char=? (first chars) '~') (list txt)]\n              [(char=?\
    \ (first chars) '`') (list ", "  (let loop ((text txt) (words ()))\n    (if (empty?\
    \ text)\n        words\n        (loop (rest text) (cons (first text) words)))))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(empty? (rest txt)) (list txt)]\n    [(equal? (first txt) ',')\
    \ (list txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(empty? (rest txt)) (list (first txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(string=? (first chars) #\\space) '()]\n      [(string=? (first chars)\
    \ #\\,) ',']\n      [else (length (filter (lambda (c) (or (char=? c #\\space)\
    \ (char=? c #\\,)) chars))]\n      )))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (if (string-empty? txt)\n      '()\n\
    \      (let ([chars (string->list txt)])\n        (if (string-empty? chars)\n\
    \            (length txt)\n            (let ([char (first chars)])\n         \
    \     (if (string-empty? char)\n                  (length txt)\n             \
    \     (let ([char (first chars)])\n                    (if (string-empty? char)\n\
    \                        (length txt)\n                        (let ([char (first\
    \ chars)])\n                          (if (string-empty? char)\n             \
    \                 (length txt)\n                              (let ([char (first\
    \ chars)])\n                                (if (string-empty? char)\n       \
    \                             (length txt)\n                                 \
    \   (let ([char (first chars)])\n                                      (if (string-empty?\
    \ char)\n                                          (length txt)\n            \
    \                              (let ([char (first chars)])\n                 \
    \                           (if (string-empty? char)\n                       \
    \                         (length txt)\n                                     \
    \           (let ([char (first chars)])\n                                    \
    \              (if (string-empty? char)\n                                    \
    \                  (length txt)\n                                            \
    \          (let ([char (first chars)])\n                                     \
    \                   (if (string-empty? char)\n                               \
    \                             (length txt)\n                                 \
    \                           (let ([char (first chars)])\n                    \
    \                                          (if (string-empty? char)\n        \
    \                                                          (length txt)\n    \
    \                                                              (let ([char (first\
    \ chars)])\n                                                                 \
    \   (if (string-empty? char)\n                                               \
    \                         (length txt)\n                                     \
    \                                   (let ([char (first chars)])\n            \
    \                                                              (if (string-empty?\
    \ char)\n                                                                    \
    \          (length txt)\n                                                    \
    \                          (let ([char (first chars)])\n                     \
    \                                                           (if (string-empty?\
    \ char)\n                                                                    \
    \                (length txt)\n                                              \
    \                                      (let ([char (first chars)])\n         \
    \                                                                            \
    \ (if (string-empty? char)\n                                                 \
    \                                         (length txt)\n                     \
    \                                                                     (let ([char\
    \ (first chars)])\n                                                          \
    \                                  (if (string-empty? char)\n                \
    \                                                                            \
    \    (length txt)\n                                                          \
    \                                      (let ([char (first chars)])\n         \
    \                                                                            \
    \             (if (string-empty? char)\n                                     \
    \                                                                 (length txt)\n\
    \                                                                            \
    \                          (let ([char (first chars)])\n                     \
    \                                                                            \
    \       (if (string-empty? char)\n                                           \
    \                                                                 (length txt)\n\
    \                                                                            \
    \                                (let ([char (first chars)])\n               \
    \                                                                            \
    \                   (if (string-empty? char)\n                               \
    \                                                                            \
    \       (length txt)\n                                                       \
    \                                                           (let ([char (first\
    \ chars)])\n                                                                 \
    \                                                   (if (string-empty? char)\n\
    \                                                                            \
    \                                            (length txt)\n                  \
    \                                                                            \
    \                          (let ([char (first chars)])\n                     \
    \                                                                            \
    \                         (if (string-empty? char)\n                         \
    \                                                                            \
    \                         (length txt)", "  (let ([chars (string->list txt)])\n\
    \    (if (null? chars)\n        0\n        (let ([char (first chars)])\n     \
    \     (if (or (char-whitespace? char) (char-comma? char))\n              (+ 1\
    \ (split_words (rest chars)))\n              (if (char-lowercase? char)\n    \
    \              (+ 1 ((length chars) (- char (char-lowercase? char))))\n      \
    \            (+ 1 ((length chars) (- char (char-uppercase? char))))))))))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n    [(comma?\
    \ txt) (list txt)]\n    [else (length (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (string->list txt))))\n               (map char->int (map char->lower (map char->char\
    \ (", "  (let ([words (string->list txt)])\n    (cond\n      [(empty? words) (list\
    \ '())]\n      [(string=? (first words) \",\")\n       (append (split_words (rest\
    \ words))\n               (list (first words)))]\n      [(string=? (first words)\
    \ \" \")\n       (append (split_words (rest words))\n               (list (first\
    \ words)))]\n      [(string=? (first words) \"-\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \"!\")]\n      [(string=? (first words) \"?\")]\n      [(string=? (first\
    \ words) \"!\")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \"?\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \"-\")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \",\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \" \")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \"-\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \"!\")]\n      [(string=? (first words) \"?\")]\n      [(string=? (first\
    \ words) \"!\")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \"?\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \"-\")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \",\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first\
    \ words) \" \")\n       (append (split_words (rest words))\n               (list\
    \ (first words)))]\n      [(string=? (first words) \"-\")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [(string=? (first ",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(empty? (rest txt)) (list (first txt))]\n    [(empty? (rest\
    \ txt)) (list (first txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(not (whitespace? chars)) (list txt)]\n      [(not (comma?\
    \ chars)) (length (string->list txt))]\n      [else (let ([chars (string->list\
    \ (string->symbol txt))])\n               (cond\n                 [(empty? chars)\
    \ '()]\n                 [(not (whitespace? chars)) (list txt)]\n            \
    \     [(not (comma? chars)) (length (string->list txt))]\n                 [else\
    \ (let ([chars (string->list (string->symbol txt))])\n                       \
    \    (cond\n                             [(empty? chars) '()]\n              \
    \               [(not (whitespace? chars)) (list txt)]\n                     \
    \        [(not (comma? chars)) (length (string->list txt))]\n                \
    \             [else (let ([chars (string->list (string->symbol txt))])\n     \
    \                                  (cond\n                                   \
    \      [(empty? chars) '()]\n                                         [(not (whitespace?\
    \ chars)) (list txt)]\n                                         [(not (comma?\
    \ chars)) (length (string->list txt))]\n                                     \
    \    [else (let ([chars (string->list (string->symbol txt))])\n              \
    \                                     (cond\n                                \
    \                     [(empty? chars) '()]\n                                 \
    \                    [(not (whitespace? chars)) (list txt)]\n                \
    \                                     [(not (comma? chars)) (length (string->list\
    \ txt))]\n                                                     [else (let ([chars\
    \ (string->list (string->symbol txt))])\n                                    \
    \                        (cond\n                                             \
    \                 [(empty? chars) '()]\n                                     \
    \                         [(not (whitespace? chars)) (list txt)]\n           \
    \                                                   [(not (comma? chars)) (length\
    \ (string->list txt))]\n                                                     \
    \         [else (let ([chars (string->list (string->symbol txt))])\n         \
    \                                                                (cond\n     \
    \                                                                      [(empty?\
    \ chars) '()]\n                                                              \
    \             [(not (whitespace? chars)) (list txt)]\n                       \
    \                                                    [(not (comma? chars)) (length\
    \ (string->list txt))]\n                                                     \
    \                      [else (let ([chars (string->list (string->symbol txt))])\n\
    \                                                                            \
    \           (cond\n                                                          \
    \                             [(empty? chars) '()]\n                         \
    \                                                              [(not (whitespace?\
    \ chars)) (list txt)]\n                                                      \
    \                                 [(not (comma? chars)) (length (string->list\
    \ txt))]\n                                                                   \
    \                    [else (let ([chars (string->list (string->symbol txt))])\n\
    \                                                                ", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [(equal? (first txt) '-) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (let ([chars (string->list (string->string\
    \ txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=? (first chars)\
    \ \",\")\n       (append (split_words (rest chars))\n              (list (first\
    \ chars)))]\n      [(string=? (first chars) \" \")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              (list\
    \ (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append (split_words\
    \ (rest chars))\n              (list (first chars)))]\n      [(string=? (first\
    \ chars) \"!\")\n       (append (split_words (rest chars))\n              ", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let loop ((i 0)\n         \
    \    (result '()))\n    (if (< i 256)\n        (let ((letter (char->integer (char->string\
    \ (car txt))))\n              (letters (char->integer (char->string (cadr txt))))\n\
    \              (letters-count (- letters letter)))\n          (loop (+ i 1) (cons\
    \ (list letter) result))\n        (loop (+ i 1) result)))\n  result)\n", "  (if\
    \ (empty? txt)\n      '()\n      (let ([chars (string->list (string->string txt))])\n\
    \        (if (empty? chars)\n            '()\n            (let ([char (first chars)])\n\
    \              (if (char-whitespace? char)\n                  (split_words (rest\
    \ chars))\n                  (cons (string->string char) (split_words (rest chars)))))))\n\
    \      0))\n", "  (cond\n    [(empty? txt) '()]\n    [(empty? (rest txt)) (list\
    \ (first txt))]\n    [(empty? (rest txt)) (list (first txt))]\n    [(empty? (rest\
    \ txt)) (list (first txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n    [(comma?\
    \ txt) (list txt)]\n    [else (length txt)]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (if (string-empty? txt)\n      '()\n      (let ([chars\
    \ (string->list (string->symbol txt))])\n        (if (string-empty? chars)\n \
    \           (length txt)\n            (let ([chars (string->list (string->symbol\
    \ chars))])\n              (if (string-empty? chars)\n                  (length\
    \ txt)\n                  (let ([chars (string->list (string->symbol chars))])\n\
    \                    (if (string-empty? chars)\n                        (length\
    \ txt)\n                        (let ([chars (string->list (string->symbol chars))])\n\
    \                          (if (string-empty? chars)\n                       \
    \       (length txt)\n                              (let ([chars (string->list\
    \ (string->symbol chars))])\n                                (if (string-empty?\
    \ chars)\n                                    (length txt)\n                 \
    \                   (let ([chars (string->list (string->symbol chars))])\n   \
    \                                   (if (string-empty? chars)\n              \
    \                            (length txt)\n                                  \
    \        (let ([chars (string->list (string->symbol chars))])\n              \
    \                              (if (string-empty? chars)\n                   \
    \                             (length txt)\n                                 \
    \               (let ([chars (string->list (string->symbol chars))])\n       \
    \                                           (if (string-empty? chars)\n      \
    \                                                (length txt)\n              \
    \                                        (let ([chars (string->list (string->symbol\
    \ chars))])\n                                                        (if (string-empty?\
    \ chars)\n                                                            (length\
    \ txt)\n                                                            (let ([chars\
    \ (string->list (string->symbol chars))])\n                                  \
    \                            (if (string-empty? chars)\n                     \
    \                                             (length txt)\n                 \
    \                                                 (let ([chars (string->list (string->symbol\
    \ chars))])\n                                                                \
    \    (if (string-empty? chars)\n                                             \
    \                           (length txt)\n                                   \
    \                                     (let ([chars (string->list (string->symbol\
    \ chars))])\n                                                                \
    \          (if (string-empty? chars)\n                                       \
    \                                       (length txt)\n                       \
    \                                                       (let ([chars (string->list\
    \ (string->symbol chars))])\n                                                \
    \                                (if (string-empty? chars)\n                 \
    \                                                                   (length txt)\n\
    \                                                                            \
    \        (let ([chars (string->list (string->symbol chars))])\n              \
    \                                                                        (if (string-empty?\
    \ chars)\n                                                                   \
    \                       (length txt)\n                                       \
    \                                                   (let ([chars (string->list\
    \ (string->symbol chars))])\n                                                \
    \                                            (if (string-empty? chars)\n     \
    \                                                                            \
    \               (length txt)\n                                               \
    \                                                 (let ([chars (string->list (string->symbol\
    \ chars))])\n                                                                \
    \                                  (if (string-empty? chars)\n               \
    \                                                                            \
    \           (length txt", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(empty? (rest txt)) (list\
    \ (first txt))]\n    [(empty? (rest txt)) (list (first txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (if (string-empty? txt)\n      '()\n      (let ([chars\
    \ (string->list txt)])\n        (if (string-empty? chars)\n            '()\n \
    \           (let ([char (first chars)])\n              (if (string-empty? char)\n\
    \                  '()\n                  (let ([char (first chars)])\n      \
    \              (if (string-empty? char)\n                        0\n         \
    \               (let ([count (count_chars char chars)])\n                    \
    \      (if (even? count)\n                              (cons char count)\n  \
    \                            (cons char count)))))))))))\n", "  (let ([chars (string->list\
    \ (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=?\
    \ (first chars) #\\space) '()]\n      [(string=? (first chars) #\\,) ',']\n  \
    \    [else (length (filter (lambda (c) (and (char=? c #\\space) (char=? c #\\\
    ,)) chars))]\n      )))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first\
    \ txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let loop ((text txt) (words ()))\n    (cond ((null?\
    \ text) words)\n          ((char=? (car text) ?whitespace) \n           (loop\
    \ (cdr text) (cons (car text) words)))\n          ((char=? (car text) ?comma)\
    \ \n           (loop (cdr text) (cons (car text) words)))\n          ((char=?\
    \ (car text) ?lowercase) \n           (loop (cdr text) (cons (car text) words))))\n\
    \  (length (filter odd? (map char->int words)))))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '-) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let loop ((text txt) (words ()))\n    (if (empty? text)\n        words\n   \
    \     (loop (rest text) (cons (first text) (loop (rest text) words))))))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '!) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list txt)])\n    (if (null? chars)\n        (list \"\")\n        (let\
    \ ([word (first chars)])\n          (if (string=? word \"\")\n              (list\
    \ word)\n              (let ([chars (rest chars)])\n                (if (null?\
    \ chars)\n                    (list word)\n                    (let ([word (first\
    \ chars)])\n                      (if (string=? word \"\")\n                 \
    \         (list word)\n                          (let ([chars (rest chars)])\n\
    \                            (if (null? chars)\n                             \
    \   (list word)\n                                (let ([word (first chars)])\n\
    \                                  (if (string=? word \"\")\n                \
    \                      (list word)\n                                      (let\
    \ ([chars (rest chars)])\n                                        (if (null? chars)\n\
    \                                            (list word)\n                   \
    \                         (let ([word (first chars)])\n                      \
    \                        (if (string=? word \"\")\n                          \
    \                        (list word)\n                                       \
    \           (let ([chars (rest chars)])\n                                    \
    \                (if (null? chars)\n                                         \
    \               (list word)\n                                                \
    \        (let ([word (first chars)])\n                                       \
    \                   (if (string=? word \"\")\n                               \
    \                               (list word)\n                                \
    \                              (let ([chars (rest chars)])\n                 \
    \                                               (if (null? chars)\n          \
    \                                                          (list word)\n     \
    \                                                               (let ([word (first\
    \ chars)])\n                                                                 \
    \     (if (string=? word \"\")\n                                             \
    \                             (list word)\n                                  \
    \                                        (let ([chars (rest chars)])\n       \
    \                                                                     (if (null?\
    \ chars)\n                                                                   \
    \             (list word)\n                                                  \
    \                              (let ([word (first chars)])\n                 \
    \                                                                 (if (string=?\
    \ word \"\")\n                                                               \
    \                       (list word)\n                                        \
    \                                              (let ([chars (rest chars)])\n \
    \                                                                            \
    \           (if (null? chars)\n                                              \
    \                                              (list word)\n                 \
    \                                                                           (let\
    \ ([word (first chars)])\n                                                   \
    \                                           (if (string=? word \"\")\n       \
    \                                                                            \
    \               (list word)\n                                                \
    \                                                  (let ([chars (rest chars)])\n\
    \                                                                            \
    \                        (if (null? chars)\n                                 \
    \                                                                       (list\
    \ word)\n                                                                    \
    \                                    (let ([word (first chars)])\n           \
    \                                                                            \
    \                   (if (string=? word \"\")\n                               \
    \                                                                            \
    \   (list word)\n                                                            \
    \                                                  (let ([chars (rest chars)])\n\
    \                                                                            \
    \                                    (if (null? chars)\n                     \
    \                                                                            \
    \                   (list word)\n                                            \
    \                                                                        (let\
    \ ([word (first chars)])\n                                                   \
    \                                                                   (if (string=?\
    \ word \"\")\n                                                               \
    \                                                           (list word)\n    \
    \                                                                            \
    \                                          (let ([chars (rest chars)])\n     \
    \                                                                            \
    \                                           (if (null? chars)\n              \
    \                                                                            \
    \                                      (list ", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (let loop ((text txt) (words ()))\n\
    \    (cond ((string-empty? text)\n           (reverse words))\n          ((string-contains?\
    \ text #\\Space)\n           (loop (substring text 0 (string-length text)) (cons\
    \ text words)))\n          ((string-contains? text #\\Comma)\n           (loop\
    \ (substring text 0 (string-length text)) (cons text words)))\n          ((string-contains?\
    \ text #\\LowercaseLetter)\n           (loop (substring text 0 (string-length\
    \ text)) (cons text words))\n           (loop (substring text 1 (string-length\
    \ text)) (cons (substring text 0 (string-length text)) words)))\n          (else\n\
    \           (loop (substring text 0 (string-length text)) (cons text words)))))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much for your help. I really\
    \ appreciate it. I will try this out and let you know how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI ran the code and it works perfectly. Thank you so much for\
    \ your help. I really appreciate it. I will try this out and let you know how\
    \ it goes. Thanks again!\n<|/ c |>\n<| c |>\nYou're welcome, glad I could help.\
    \ If this answer solved your problem, please consider accepting it by clicking\
    \ the checkmark next to it.\n<|/ c |>\n<| c |>\nI did but since I am new to the\
    \ site it says I have to wait 2 minutes before I can accept it. Thanks again for\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<|\
    \ a tags=racket,scheme |>\nThis is not an answer, but a comment on one of the\
    \ other answers. I wanted to post this as an answer because I wanted to post a\
    \ picture, but I can't.\nI wanted to post a picture of the code I wrote, but I\
    \ can't. So, here it is:\n<code>", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (let loop ((text txt) (words ()))\n    (cond ((null? text)\
    \ words)\n          ((char=? (car text) ?whitespace) \n           (loop (cdr text)\
    \ (cons (car text) words)))\n          ((char=? (car text) ?comma) \n        \
    \   (loop (cdr text) (cons (car text) words)))\n          (else (loop (cdr text)\
    \ (cons (car text) words))))))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list\
    \ txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list\
    \ txt)])\n    (if (or (null? chars) (equal? chars \"\"))\n        (list \"\")\n\
    \        (let ([char (first chars)])\n          (if (or (null? char) (equal? char\
    \ \"\"))\n              (list \"\")\n              (let ([chars (rest chars)])\n\
    \                (if (or (null? chars) (equal? chars \"\"))\n                \
    \    (list \"\")\n                    (let ([char (first chars)])\n          \
    \            (if (or (null? char) (equal? char \"\"))\n                      \
    \    (list \"\")\n                          (let ([chars (rest chars)])\n    \
    \                        (if (or (null? chars) (equal? chars \"\"))\n        \
    \                        (list \"\")\n                                (let ([char\
    \ (first chars)])\n                                  (if (or (null? char) (equal?\
    \ char \"\"))\n                                      (list \"\")\n           \
    \                           (let ([chars (rest chars)])\n                    \
    \                    (if (or (null? chars) (equal? chars \"\"))\n            \
    \                                (list \"\")\n                               \
    \             (let ([char (first chars)])\n                                  \
    \            (if (or (null? char) (equal? char \"\"))\n                      \
    \                            (list \"\")\n                                   \
    \               (let ([chars (rest chars)])\n                                \
    \                    (if (or (null? chars) (equal? chars \"\"))\n            \
    \                                            (list \"\")\n                   \
    \                                     (let ([char (first chars)])\n          \
    \                                                (if (or (null? char) (equal?\
    \ char \"\"))\n                                                              (list\
    \ \"\")\n                                                              (let ([chars\
    \ (rest chars)])\n                                                           \
    \     (if (or (null? chars) (equal? chars \"\"))\n                           \
    \                                         (list \"\")\n                      \
    \                                              (let ([char (first chars)])\n \
    \                                                                     (if (or\
    \ (null? char) (equal? char \"\"))\n                                         \
    \                                 (list \"\")\n                              \
    \                                            (let ([chars (rest chars)])\n   \
    \                                                                         (if\
    \ (or (null? chars) (equal? chars \"\"))\n                                   \
    \                                             (list \"\")\n                  \
    \                                                              (let ([char (first\
    \ chars)])\n                                                                 \
    \                 (if (or (null? char) (equal? char \"\"))\n                 \
    \                                                                     (list \"\
    \")\n                                                                        \
    \              (let ([chars (rest chars)])\n                                 \
    \                                       (if (or (null? chars) (equal? chars \"\
    \"))\n                                                                       \
    \     (list \"\")\n                                                          \
    \                  (let ([char (first chars)])\n                             \
    \                                                 (if (or (null? char) (equal?\
    \ char \"\"))\n                                                              \
    \                    (list \"\")\n                                           \
    \                                       (let ([chars (rest chars)])\n        \
    \                                                                            (if\
    \ (or (null? chars) (equal? chars \"\"))\n                                   \
    \                                                     (list \"\")\n          \
    \                                                                            \
    \  (let ([char (first chars)])\n                                             \
    \                                             ", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words ((rest txt)))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) whitespace) (rest txt)]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list (string->string txt))])\n    (cond\n      [(empty? chars)\
    \ '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars)\
    \ #\\Comma) ',']\n      [(char=? (first chars) #\\Newline) '()]\n      [(char=?\
    \ (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return) '()]\n \
    \     [(char=? (first chars) #\\Newline) '()]\n      [(char=? (first chars) #\\\
    Space) '()]\n      [(char=? (first chars) #\\Tab) '()]\n      [(char=? (first\
    \ chars) #\\Return) '()]\n      [(char=? (first chars) #\\Newline) '()]\n    \
    \  [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars) #\\Tab)\
    \ '()]\n      [(char=? (first chars) #\\Return) '()]\n      [(char=? (first chars)\
    \ #\\Newline) '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=?\
    \ (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return) '()]\n \
    \     [(char=? (first chars) #\\Newline) '()]\n      [(char=? (first chars) #\\\
    Space) '()]\n      [(char=? (first chars) #\\Tab) '()]\n      [(char=? (first\
    \ chars) #\\Return) '()]\n      [(char=? (first chars) #\\Newline) '()]\n    \
    \  [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars) #\\Tab)\
    \ '()]\n      [(char=? (first chars) #\\Return) '()]\n      [(char=? (first chars)\
    \ #\\Newline) '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=?\
    \ (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return) '()]\n \
    \     [(char=? (first chars) #\\Newline) '()]\n      [(char=? (first chars) #\\\
    Space) '()]\n      [(char=? (first chars) #\\Tab", "  (let ([split-char (char->string\
    \ #\\Space)])\n    (if (string-empty? txt)\n        (list txt)\n        (let ([chars\
    \ (string->list (string->char txt))])\n          (if (string-empty? chars)\n \
    \             (list txt)\n              (let ([chars (string->list (string->char\
    \ chars))])\n                (if (string-empty? chars)\n                    (list\
    \ txt)\n                    (let ([chars (string->list (string->char chars))])\n\
    \                      (if (string-empty? chars)\n                          (list\
    \ txt)\n                          (let ([chars (string->list (string->char chars))])\n\
    \                            (if (string-empty? chars)\n                     \
    \           (list txt)\n                                (let ([chars (string->list\
    \ (string->char chars))])\n                                  (if (string-empty?\
    \ chars)\n                                      (list txt)\n                 \
    \                     (let ([chars (string->list (string->char chars))])\n   \
    \                                     (if (string-empty? chars)\n            \
    \                                (list txt)\n                                \
    \            (let ([chars (string->list (string->char chars))])\n            \
    \                                  (if (string-empty? chars)\n               \
    \                                   (list txt)\n                             \
    \                     (let ([chars (string->list (string->char chars))])\n   \
    \                                                 (if (string-empty? chars)\n\
    \                                                        (list txt)\n        \
    \                                                (let ([chars (string->list (string->char\
    \ chars))])\n                                                          (if (string-empty?\
    \ chars)\n                                                              (list\
    \ txt)\n                                                              (let ([chars\
    \ (string->list (string->char chars))])\n                                    \
    \                            (if (string-empty? chars)\n                     \
    \                                               (list txt)\n                 \
    \                                                   (let ([chars (string->list\
    \ (string->char chars))])\n                                                  \
    \                    (if (string-empty? chars)\n                             \
    \                                             (list txt)\n                   \
    \                                                       (let ([chars (string->list\
    \ (string->char chars))])\n                                                  \
    \                          (if (string-empty? chars)\n                       \
    \                                                         (list txt)\n       \
    \                                                                         (let\
    \ ([chars (string->list (string->char chars))])\n                            \
    \                                                      (if (string-empty? chars)\n\
    \                                                                            \
    \          (list txt)\n                                                      \
    \                                (let ([chars (string->list (string->char chars))])\n\
    \                                                                            \
    \            (if (string-empty? chars)\n                                     \
    \                                                       (list txt)\n         \
    \                                                                            \
    \       (let ([chars (string->list (string->char chars))])\n                 \
    \                                                                            \
    \ (if (string-empty? chars)\n                                                \
    \                                                  (list txt)\n              \
    \                                                                            \
    \        (let ([chars (string->list (string->", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words ((rest txt)))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(whitespace? txt) '()]\n    [else (let ([chars (string->list txt)])\n     \
    \       (cond\n              [(empty? chars) '()]\n              [(char=? (first\
    \ chars) #\\space) (split_words (rest chars))]\n              [(char=? (first\
    \ chars) #\\,) (split_words (rest chars))]\n              [(char=? (first chars)\
    \ #\\a) (split_words (rest chars))]\n              [(char=? (first chars) #\\\
    b) (split_words (rest chars))]\n              [(char=? (first chars) #\\c) (split_words\
    \ (rest chars))]\n              [(char=? (first chars) #\\d) (split_words (rest\
    \ chars))]\n              [(char=? (first chars) #\\e) (split_words (rest chars))]\n\
    \              [(char=? (first chars) #\\f) (split_words (rest chars))]\n    \
    \          [(char=? (first chars) #\\g) (split_words (rest chars))]\n        \
    \      [(char=? (first chars) #\\h) (split_words (rest chars))]\n            \
    \  [(char=? (first chars) #\\i) (split_words (rest chars))]\n              [(char=?\
    \ (first chars) #\\j) (split_words (rest chars))]\n              [(char=? (first\
    \ chars) #\\k) (split_words (rest chars))]\n              [(char=? (first chars)\
    \ #\\l) (split_words (rest chars))]\n              [(char=? (first chars) #\\\
    m) (split_words (rest chars))]\n              [(char=? (first chars) #\\n) (split_words\
    \ (rest chars))]\n              [(char=? (first chars) #\\o) (split_words (rest\
    \ chars))]\n              [(char=? (first chars) #\\p) (split_words (rest chars))]\n\
    \              [(char=? (first chars) #\\q) (split_words (rest chars))]\n    \
    \          [(char=? (first chars) #\\r) (split_words (rest chars))]\n        \
    \      [(char=? (first chars) #\\s) (split_words (rest chars))]\n            \
    \  [(char=? (first chars) #\\t) (split_words (rest chars))]\n              [(char=?\
    \ (first chars) #\\v) (split_words (rest chars))]\n              [(char=? (first\
    \ chars) #\\0) (split_", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first\
    \ txt) ',) (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(not (whitespace? chars)) (list txt)]\n      [else (append (split_words\
    \ (string->string chars))\n                    (list (string->string chars))])]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars)\
    \ '()]\n      [(string=? (first chars) #\\space) '()]\n      [(string=? (first\
    \ chars) #\\comma) ',']\n      [(string=? (first chars) #\\newline) '()]\n   \
    \   [else (append (split_words (rest chars)) (list (first chars)))])))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') '()]\n    [(equal?\
    \ (first txt) '-) '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first\
    \ txt) ')') '()]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (if (empty? txt)\n\
    \      '()\n      (let ((chars (string->list txt)))\n        (if (or (empty? chars)\
    \ (null? chars))\n            (length txt)\n            (let ((chars (string->list\
    \ txt)))\n              (if (or (empty? chars) (null? chars))\n              \
    \    (length txt)\n                  (let ((chars (string->list txt)))\n     \
    \               (if (or (empty? chars) (null? chars))\n                      \
    \  (length txt)\n                        (let ((chars (string->list txt)))\n \
    \                         (if (or (empty? chars) (null? chars))\n            \
    \                  (length txt)\n                              (let ((chars (string->list\
    \ txt)))\n                                (if (or (empty? chars) (null? chars))\n\
    \                                    (length txt)\n                          \
    \          (let ((chars (string->list txt)))\n                               \
    \       (if (or (empty? chars) (null? chars))\n                              \
    \            (length txt)\n                                          (let ((chars\
    \ (string->list txt)))\n                                            (if (or (empty?\
    \ chars) (null? chars))\n                                                (length\
    \ txt)\n                                                (let ((chars (string->list\
    \ txt)))\n                                                  (if (or (empty? chars)\
    \ (null? chars))\n                                                      (length\
    \ txt)\n                                                      (let ((chars (string->list\
    \ txt)))\n                                                        (if (or (empty?\
    \ chars) (null? chars))\n                                                    \
    \        (length txt)\n                                                      \
    \      (let ((chars (string->list txt)))\n                                   \
    \                           (if (or (empty? chars) (null? chars))\n          \
    \                                                        (length txt)\n      \
    \                                                            (let ((chars (string->list\
    \ txt)))\n                                                                   \
    \ (if (or (empty? chars) (null? chars))\n                                    \
    \                                    (length txt)\n                          \
    \                                              (let ((chars (string->list txt)))\n\
    \                                                          (if (or (empty? chars)\
    \ (null? chars))\n                                                           \
    \   (length txt)\n                                                           \
    \   (let ((chars (string->list txt)))\n                                      \
    \                          (if (or (empty? chars) (null? chars))\n           \
    \                                                         (length txt)\n     \
    \                                                               (let ((chars (string->list\
    \ txt)))\n                                                                   \
    \   (if (or (empty? chars) (null? chars))\n                                  \
    \                                        (length txt)\n                      \
    \                                                    (let ((chars (string->list\
    \ txt)))\n                                                            (if (or\
    \ (empty? chars) (null? chars))\n                                            \
    \                    (length txt)\n                                          \
    \                      (let ((chars (string->list txt)))\n                   \
    \                                               (if (or (empty? chars) (null",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (if (string-empty? txt)\n\
    \      '()\n      (let ((chars (string->list txt)))\n        (if (string-empty?\
    \ chars)\n            '()\n            (let ((char (car chars)))\n           \
    \   (if (string-empty? char)\n                  '()\n                  (let ((chars\
    \ (string->list char)))\n                    (if (string-empty? chars)\n     \
    \                   '()\n                        (let ((char (car chars)))\n \
    \                         (if (string-empty? char)\n                         \
    \     '()\n                              (let ((chars (string->list char)))\n\
    \                                (if (string-empty? chars)\n                 \
    \                   '()\n                                    (let ((char (car\
    \ chars)))\n                                      (if (string-empty? char)\n \
    \                                         0\n                                \
    \          (+ 1 (count_chars char)))))))))))))))\n", "  (let ([chars (string->list\
    \ (string->string txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=?\
    \ (first chars) \",\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \" \")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars))\n              (list (first chars)))]\n      [(string=?\
    \ (first chars) \"!\")\n       (append (split_words (rest chars))\n          \
    \    ", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) whitespace) (rest txt)]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(whitespace? txt) '()]\n    [(comma? txt) '()]\n    [else (append (split_words\
    \ (substring txt 0 (string-length txt)))\n                  (list (substring txt\
    \ 0 (string-length txt))))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) whitespace)\
    \ (rest txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (let ([chars (string->list (string->string txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(string=? (first chars) #\\Space) '()]\n      [(string=?\
    \ (first chars) #\\Comma) ',']\n      [else (let ([chars (string->list (string->string\
    \ txt))])\n               (cond\n                 [(empty? chars) '()]\n     \
    \            [(string=? (first chars) #\\Space) '()]\n                 [(string=?\
    \ (first chars) #\\Comma) ',']\n                 [else (let ([chars (string->list\
    \ (string->string txt))])\n                           (cond\n                \
    \             [(empty? chars) '()]\n                             [(string=? (first\
    \ chars) #\\Space) '()]\n                             [(string=? (first chars)\
    \ #\\Comma) ',']\n                             [else (let ([chars (string->list\
    \ (string->string txt))])\n                                       (cond\n    \
    \                                     [(empty? chars) '()]\n                 \
    \                        [(string=? (first chars) #\\Space) '()]\n           \
    \                              [(string=? (first chars) #\\Comma) ',']\n     \
    \                                    [else (let ([chars (string->list (string->string\
    \ txt))])\n                                                  (cond\n         \
    \                                           [(empty? chars) '()]\n           \
    \                                         [(string=? (first chars) #\\Space) '()]\n\
    \                                                    [(string=? (first chars)\
    \ #\\Comma) ',']\n                                                    [else (let\
    \ ([chars (string->list (string->string txt))])\n                            \
    \                                (cond\n                                     \
    \                         [(empty? chars) '()]\n                             \
    \                                 [(string=? (first chars) #\\Space) '()]\n  \
    \                                                            [(string=? (first\
    \ chars) #\\Comma) ',']\n                                                    \
    \          [else (let ([chars (string->list (string->string txt))])\n        \
    \                                                                (cond\n     \
    \     [(empty? chars) '()]\n          [(string=? (first chars) #\\Space) '()]\n\
    \          [(string=? (first chars) #\\Comma) ',']\n          [else (let ([chars\
    \ (string->list (string->string txt))])\n                    (cond\n         \
    \             [(empty? chars) '()]\n                      [(string=? (first chars)\
    \ #\\Space) '()]\n                      [(string=? (first chars) #\\Comma) ',']\n\
    \                      [else (let ([chars (string->list (string->string txt))])\n\
    \                                (cond", "  (cond\n    [(empty? txt) '()]\n  \
    \  [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (if (string-empty? txt)\n      '()\n\
    \      (let ([chars (string->list (string->string txt))])\n        (if (string-empty?\
    \ chars)\n            (length chars)\n            (let ([chars (string->list (string->string\
    \ txt))])\n              (if (string-empty? chars)\n                  (length\
    \ chars)\n                  (let ([chars (string->list (string->string txt))])\n\
    \                    (if (string-empty? chars)\n                        (length\
    \ chars)\n                        (let ([chars (string->list (string->string txt))])\n\
    \                          (if (string-empty? chars)\n                       \
    \       (length chars)\n                              (let ([chars (string->list\
    \ (string->string txt))])\n                                (if (string-empty?\
    \ chars)\n                                    (length chars)\n               \
    \                     (let ([chars (string->list (string->string txt))])\n   \
    \                                   (if (string-empty? chars)\n              \
    \                            (length chars)\n                                \
    \          (let ([chars (string->list (string->string txt))])\n              \
    \                              (if (string-empty? chars)\n                   \
    \                             (length chars)\n                               \
    \                 (let ([chars (string->list (string->string txt))])\n       \
    \                                           (if (string-empty? chars)\n      \
    \                                                (length chars)\n            \
    \                                          (let ([chars (string->list (string->string\
    \ txt))])\n                                                        (if (string-empty?\
    \ chars)\n                                                            (length\
    \ chars)\n                                                            (let ([chars\
    \ (string->list (string->string txt))])\n                                    \
    \                          (if (string-empty? chars)\n                       \
    \                                           (length chars)\n                 \
    \                                                 (let ([chars (string->list (string->string\
    \ txt))])\n                                                                  \
    \  (if (string-empty? chars)\n                                               \
    \                         (length chars)\n                                   \
    \                                     (let ([chars (string->list (string->string\
    \ txt))])\n                                                          (if (string-empty?\
    \ chars)\n                                                              (length\
    \ chars)\n                                                              (let ([chars\
    \ (string->list (string->string txt))])\n                                    \
    \                            (if (string-empty? chars)\n                     \
    \                                               (length chars)\n             \
    \                                                       (let ([chars (string->list\
    \ (string->string txt))])\n                                                  \
    \                    (if (string-empty? chars)\n                             \
    \                                             (length chars)\n               \
    \                                                           (let ([chars (string->list\
    \ (string->string txt))])\n                                                  \
    \                          (if (string-empty? chars)\n                       \
    \                                                         (length chars)\n   \
    \                                                                            \
    \ (let ([chars (string->list (string->string txt))])\n                       \
    \                                                           (if (string-empty?\
    \ chars)\n                                                                   \
    \                   (length chars)\n                                         \
    \                                             (", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(whitespace? txt) (list txt)]\n    [(comma? txt) (list txt)]\n  \
    \  [(even? count) (list txt)]\n    [else (count (count_letters txt))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list\
    \ txt)])\n    (cond\n      [(empty? chars) '()]\n      [(string=? (first chars)\
    \ \",\") '()]\n      [(string=? (first chars) \"-\") '()]\n      [(string=? (first\
    \ chars) \".\") '()]\n      [(string=? (first chars) \"!\") '()]\n      [(string=?\
    \ (first chars) \"?\") '()]\n      [(string=? (first chars) \"!\") '()]\n    \
    \  [(string=? (first chars) \"?\") '()]\n      [(string=? (first chars) \"-\"\
    ) '()]\n      [(string=? (first chars) \".\") '()]\n      [(string=? (first chars)\
    \ \"!\") '()]\n      [(string=? (first chars) \"?\") '()]\n      [(string=? (first\
    \ chars) \"-\") '()]\n      [(string=? (first chars) \",\") '()]\n      [(string=?\
    \ (first chars) \"-\") '()]\n      [(string=? (first chars) \".\") '()]\n    \
    \  [(string=? (first chars) \"!\") '()]\n      [(string=? (first chars) \"?\"\
    ) '()]\n      [(string=? (first chars) \"-\") '()]\n      [(string=? (first chars)\
    \ \",\") '()]\n      [(string=? (first chars) \"-\") '()]\n      [(string=? (first\
    \ chars) \".\") '()]\n      [(string=? (first chars) \"!\") '()]\n      [(string=?\
    \ (first chars) \"?\") '()]\n      [(string=? (first chars) \"-\") '()]\n    \
    \  [(string=? (first chars) \",\") '()]\n      [(string=? (first chars) \"-\"\
    ) '()]\n      [(string=? (first chars) \".\") '()]\n      [(string=? (first chars)\
    \ \"!\") '()]\n      [(string=? (first chars) \"?\") '()]\n      [(string=? (first\
    \ chars) \"-\") '()]\n      [(string=? (first chars) \",\") '()]\n      [(string=?\
    \ (first chars) \"-\") '()]\n      [(string=? (first chars) \".\") '()]\n    \
    \  [(string=? (first chars) \"!\") '()]\n      [(string=? (first chars) \"?\"\
    ) '()]\n      [(string=? (first chars) \"-", "  (cond\n    [(empty? txt) '()]\n\
    \    [(empty? (rest txt)) (list (first txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list txt)])\n    (if (empty? chars)\n        (list '())\n \
    \       (let ([char (first chars)])\n          (if (char=? char #\\Space)\n  \
    \            (split_words (rest chars))\n              (cons (string char) (split_words\
    \ (rest chars)))))))\n  (length txt))\n", "  (cond\n    [(empty? txt) '()]\n \
    \   [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list txt)]\n \
    \   [(empty? (rest txt)) (list txt)]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let ([chars (string->list txt)])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=? (first\
    \ chars) #\\Comma) ',']\n      [else (+ 1 (length (filter (lambda (c) (and (char=?\
    \ c #\\Space) (char=? c #\\Comma)))\n                                  (chars\
    \ ))))]\n      )))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([chars (string->list txt)])\n    (cond\n      [(empty? chars) '()]\n  \
    \    [(string=? (first chars) \",\") '()]\n      [(string=? (first chars) \"-\"\
    ) '()]\n      [(string=? (first chars) \"\\n\") '()]\n      [(string=? (first\
    \ chars) \"\\r\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n      [(string=?\
    \ (first chars) \"\\t\") '()]\n      [(string=? (first chars) \"\\r\") '()]\n\
    \      [(string=? (first chars) \"\\n\") '()]\n      [(string=? (first chars)\
    \ \"\\t\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n      [(string=?\
    \ (first chars) \"\\r\") '()]\n      [(string=? (first chars) \"\\n\") '()]\n\
    \      [(string=? (first chars) \"\\t\") '()]\n      [(string=? (first chars)\
    \ \"\\t\") '()]\n      [(string=? (first chars) \"\\r\") '()]\n      [(string=?\
    \ (first chars) \"\\n\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n\
    \      [(string=? (first chars) \"\\t\") '()]\n      [(string=? (first chars)\
    \ \"\\r\") '()]\n      [(string=? (first chars) \"\\n\") '()]\n      [(string=?\
    \ (first chars) \"\\t\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n\
    \      [(string=? (first chars) \"\\r\") '()]\n      [(string=? (first chars)\
    \ \"\\n\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n      [(string=?\
    \ (first chars) \"\\t\") '()]\n      [(string=? (first chars) \"\\r\") '()]\n\
    \      [(string=? (first chars) \"\\n\") '()]\n      [(string=? (first chars)\
    \ \"\\t\") '()]\n      [(string=? (first chars) \"\\t\") '()]\n      [(string=?\
    \ (first chars) \"\\r\") '()]\n      [(string=? (first chars) \"\\n\") '()]\n\
    \      [(string=? (first chars) \"\\t\") '()]\n      [(string=? (first chars)\
    \ \"\\t\") '()]\n      [(string=? (first chars) \"\\r\") '()]\n", "  (cond\n \
    \   [(empty? txt) empty]\n    [(equal? (first txt) whitespace) empty]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let ([words (string->list txt)])\n\
    \    (cond\n      [(empty? words) (list '())]\n      [(string=? (first words)\
    \ \",\")\n       (append (split_words (rest words))\n               (list (first\
    \ words)))]\n      [(string=? (first words) \" \")\n       (append (split_words\
    \ (rest words))\n               (list (first words)))]\n      [else\n       (append\
    \ (split_words (rest words))\n               (list (first words))\n          \
    \     (list (rest words))\n               (list (last words))\n              \
    \ (list (string->list txt)))]\n      )))\n", "  (let ([chars (string->list txt)])\n\
    \    (cond\n      [(empty? chars) '()]\n      [(not (whitespace? chars)) (list\
    \ txt)]\n      [else (cons (first chars) (split_words (rest chars)))])))\n", " \
    \ (if (empty? txt)\n      '()\n      (let ((chars (string->list txt)))\n     \
    \   (if (empty? chars)\n            (length txt)\n            (let ((chars (string->list\
    \ txt)))\n              (if (empty? chars)\n                  (length txt)\n \
    \                 (let ((chars (string->list txt)))\n                    (if (empty?\
    \ chars)\n                        (length txt)\n                        (let ((chars\
    \ (string->list txt)))\n                          (if (empty? chars)\n       \
    \                       (length txt)\n                              (let ((chars\
    \ (string->list txt)))\n                                (if (empty? chars)\n \
    \                                   (length txt)\n                           \
    \         (let ((chars (string->list txt)))\n                                \
    \      (if (empty? chars)\n                                          (length txt)\n\
    \                                          (let ((chars (string->list txt)))\n\
    \                                            (if (empty? chars)\n            \
    \                                    (length txt)\n                          \
    \                      (let ((chars (string->list txt)))\n                   \
    \                               (if (empty? chars)\n                         \
    \                             (length txt)\n                                 \
    \                     (let ((chars (string->list txt)))\n                    \
    \                                    (if (empty? chars)\n                    \
    \                                        (length txt)\n                      \
    \                                      (let ((chars (string->list txt)))\n   \
    \                                                           (if (empty? chars)\n\
    \                                                                  (length txt)\n\
    \                                                                  (let ((chars\
    \ (string->list txt)))\n                                                     \
    \               (if (empty? chars)\n                                         \
    \                               (length txt)\n                               \
    \                                         (let ((chars (string->list txt)))\n\
    \                                                                          (if\
    \ (empty? chars)\n                                                           \
    \                   (length txt)\n                                           \
    \                                   (let ((chars (string->list txt)))\n      \
    \                                                                          (if\
    \ (empty? chars)\n                                                           \
    \                         (length txt)\n                                     \
    \                                               (let ((chars (string->list txt)))\n\
    \                                                                            \
    \          (if (empty? chars)\n                                              \
    \                                            (length txt)\n                  \
    \                                                                        (let\
    \ ((chars (string->list txt)))\n                                             \
    \                                               (if (empty? chars)\n         \
    \                                                                            \
    \           (length txt)\n                                                   \
    \                                             (let ((chars (string->list txt)))\n\
    \                                                                            \
    \                      (if (empty? chars)\n                                  \
    \                                                                    (length txt)\n\
    \                                                                            \
    \                          (let ((chars (string->list txt)))\n               \
    \                                                                            \
    \             (if (empty? chars)\n                                           \
    \                                                                 (length txt)\n\
    \                                                                            \
    \                                (let ((chars (string->list txt)))\n         \
    \                                                                            \
    \                         (if (empty? chars)\n                               \
    \                                                                            \
    \       (length txt)\n                                                       \
    \                                                           (let ((chars (string->list\
    \ txt)))\n                                                                   \
    \                                                 (if (empty? chars)", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') '()]\n    [(equal? (first\
    \ txt) '-) '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first txt)\
    \ ')') '()]\n    [(equal? (first txt) '-') '()]\n    [(equal? (first txt) '(')\
    \ '()]\n    [(equal? (first txt) ')') '()]\n    [(equal? (first txt) '-') '()]\n\
    \    [(equal? (first txt) '(') '()]\n    [(equal? (first txt) ')') '()]\n    [(equal?\
    \ (first txt) '-') '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first\
    \ txt) ')') '()]\n    [(equal? (first txt) '-') '()]\n    [(equal? (first txt)\
    \ '(') '()]\n    [(equal? (first txt) ')') '()]\n    [(equal? (first txt) '-')\
    \ '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first txt) ')') '()]\n\
    \    [(equal? (first txt) '-') '()]\n    [(equal? (first txt) '(') '()]\n    [(equal?\
    \ (first txt) ')') '()]\n    [(equal? (first txt) '-') '()]\n    [(equal? (first\
    \ txt) '(') '()]\n    [(equal? (first txt) ')') '()]\n    [(equal? (first txt)\
    \ '-') '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first txt) ')')\
    \ '()]\n    [(equal? (first txt) '-') '()]\n    [(equal? (first txt) '(') '()]\n\
    \    [(equal? (first txt) ')') '()]\n    [(equal? (first txt) '-') '()]\n    [(equal?\
    \ (first txt) '(') '()]\n    [(equal? (first txt) ')') '()]\n    [(equal? (first\
    \ txt) '-') '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first txt)\
    \ ')') '()]\n    [(equal? (first txt) '-') '()]\n    [(equal? (first txt) '(')\
    \ '()]\n    [(equal? (first txt", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (let ([chars (string->list (string->string txt))])\n    (cond\n\
    \      [(empty? chars) '()]\n      [(not (whitespace? chars)) '()]\n      [(not\
    \ (comma? chars)) (string-length txt)]\n      [else (/ (string-length txt) (length\
    \ (string->list (string->string chars)))) ]\n      )))\n", "  (let ([chars (string->list\
    \ (string->string txt))])\n    (cond\n      [(empty? chars) '()]\n      [(char=?\
    \ (first chars) #\\space) '()]\n      [(char=? (first chars) #\\,) ',']\n    \
    \  [(char=? (first chars) #\\a) '(#\\a)]\n      [(char=? (first chars) #\\b) '(#\\\
    b)]\n      [(char=? (first chars) #\\c) '(#\\c)]\n      [(char=? (first chars)\
    \ #\\d) '(#\\d)]\n      [(char=? (first chars) #\\e) '(#\\e)]\n      [(char=?\
    \ (first chars) #\\F) '(#\\F)]\n      [(char=? (first chars) #\\G) '(#\\G)]\n\
    \      [(char=? (first chars) #\\h) '(#\\h)]\n      [(char=? (first chars) #\\\
    i) '(#\\i)]\n      [(char=? (first chars) #\\j) '(#\\j)]\n      [(char=? (first\
    \ chars) #\\k) '(#\\k)]\n      [(char=? (first chars) #\\l) '(#\\l)]\n      [(char=?\
    \ (first chars) #\\n) '(#\\n)]\n      [(char=? (first chars) #\\o) '(#\\o)]\n\
    \      [(char=? (first chars) #\\p) '(#\\p)]\n      [(char=? (first chars) #\\\
    q) '(#\\q)]\n      [(char=? (first chars) #\\r) '(#\\r)]\n      [(char=? (first\
    \ chars) #\\s) '(#\\s)]\n      [(char=? (first chars) #\\t) '(#\\t)]\n      [(char=?\
    \ (first chars) #\\v) '(#\\v)]\n      [(char=? (first chars) #\\w) '(#\\w)]\n\
    \      [(char=? (first chars) #\\X) '(#\\X)]\n      [(char=? (first chars) #\\\
    Y) '(#\\Y)]\n      [(char=? (first chars) #\\Z) '(#\\Z)]\n      [(char=? (first\
    \ chars) #\\_) '(#\\_", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (if\
    \ (empty? txt)\n      '()\n      (let ((chars (string->list txt)))\n        (if\
    \ (empty? chars)\n            (length chars)\n            (let ((char (first chars)))\n\
    \              (if (string=? char #\\space)\n                  (split_words (rest\
    \ chars))\n                  (cons char (split_words (rest chars)))))))\n    \
    \  (length (string->list txt))))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (let loop ((text txt) (words ()))\n    (cond\n      [(empty?\
    \ text) words]\n      [(char=? (first text) #\\Space) loop (rest text) (cons (first\
    \ text) words)]\n      [(char=? (first text) #\\Comma) loop (rest text) (cons\
    \ (first text) words)]\n      [(char=? (first text) #\\Newline) loop (rest text)\
    \ (cons (first text) words)]\n      [else (loop (rest text) (cons (first text)\
    \ words))])))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(not (whitespace? chars)) (list txt)]\n      [else (append\
    \ (split_words (string->string chars)) (list (string->string chars)))])))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
