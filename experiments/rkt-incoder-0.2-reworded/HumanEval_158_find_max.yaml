name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n;; >>> (find_max (list\
  \ \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"\
  enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"\
  ))\n;; \"aaaaaaa\"\n(define (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? words) empty]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (first words)])\n            (cond\n  \
    \            [(empty? (rest words)) (first words)]\n              [(equal? (length\
    \ words) 1) (first words)]\n              [else (let ([count (count (first words))])\n\
    \                       (cond\n                        [(> count max) (first words)]\n\
    \                        [(< count max) (find_max (rest words))]\n           \
    \             [else (find_max (rest words))])))])))])\n", "  (cond\n    [(empty?\
    \ words) empty]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (first words)])\n            (cond\n              [(empty? (rest words))\
    \ max]\n              [(equal? (length words) (length (rest words))) (find_max\
    \ (rest words))]\n              [else (let ([count (count (first words) max)])\n\
    \                      (cond\n                        [(> count (count (first\
    \ words) max)) max]\n                        [else (find_max (rest words))])))])))])\n",
  "  (let loop ((max-count 0)\n             (max-word (first words))\n           \
    \  (max-list '()))\n    (if (null? words)\n        (reverse max-list)\n      \
    \  (let ((word (first words))\n              (count (length word)))\n        \
    \  (if (> count max-count)\n              (set! max-count count)\n           \
    \   (set! max-word word)\n              (set! max-list (cons word max-list))\n\
    \              (loop (+ count (length word))\n                    (first words)\n\
    \                    (cons word max-list)))))\n    (loop (length words) (first\
    \ words) max-list)))\n", "  (cond\n    [(empty? words) empty]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [(equal? (length words) 2) (first words)]\n  \
    \  [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (length words) (length max)) max]\n              [(equal? (length words) (length\
    \ max)) (first words)]\n              [else (let ([count 0])\n               \
    \        (for [word words]\n                           (cond\n               \
    \              [(equal? (length word) (length word)) word]\n                 \
    \            [(equal? (length word) (length word)) (first word)]\n           \
    \                  [else (set! count (+ count 1))]\n                         \
    \    [(> count (length max)) (set! max (first words))]\n                     \
    \        [(< count (length max)) (set! max (first words))]\n                 \
    \            [(> count (length max)) (set! max (first words))]\n             \
    \                [(< count (length max)) (set! max (first words))]\n         \
    \                    [else (set! count (+ count 1))]\n                       \
    \      [(> count (length max)) (set! max (first words))]\n                   \
    \          [(< count (length max)) (set! max (first words))]\n               \
    \              [else (set! count (+ count 1))]\n                             [(>\
    \ count (length max)) (set! max (first words))]\n                            \
    \ [(< count (length max)) (set! max (first words))]\n                        \
    \     [else (set! count (+ count 1))]\n                             [(> count\
    \ (length max)) (set! max (first words))]\n                             [(< count\
    \ (length max)) (set! max (first words))]\n                             [else\
    \ (set! count (+ count 1))]\n                             [(> count (length max))\
    \ (set! max (first words))]\n                             [(< count (length max))\
    \ (set! max (first words))]\n                             [else (set! count (+\
    \ count 1))]\n                             [(> count (length max)) (set! max (first\
    \ words))]\n                             [(< count (length max)) (set! max (first\
    \ words))]\n                             [else (set! count (+ count 1))]\n   \
    \                          [(> count (length max)) (set! max (first words))]\n\
    \                             [(< count (length max)) (set! max (first words))]\n\
    \                             [", "  (let loop ((max-count (count (distinct (map\
    \ string-length words))))\n             (max-word (first words))\n           \
    \  (max-words (rest words))\n             (count 0))\n    (if (null? max-words)\n\
    \        (if (= count max-count)\n            max-word\n            (loop (max\
    \ max-count count) max-word max-words))\n        (loop (max max-count count) (first\
    \ max-words) max-words (rest max-words)))))\n", "  (let loop ((max-count (max\
    \ 0 (length words))\n                (max-word (first words))\n              \
    \  (count 0))\n             (words (rest words)))\n    (cond ((null? words) max-word)\n\
    \          ((> (length words) max-count)\n           (loop (max max-count (length\
    \ words))\n                 (first words) count))\n          ((equal? (count max-count)\
    \ 0)\n           (loop (max max-count (length words))\n                 (first\
    \ words) count))\n          (else\n           (loop (max max-count (length words))\n\
    \                 (first words) (+ count 1))))))\n", "  (cond\n    [(empty? words)\
    \ empty]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max\
    \ (first words)])\n            (cond\n              [(equal? (length words) 1)\
    \ max]\n              [(equal? (length words) 2) (cons max words)]\n         \
    \     [else (let ([count (length words)])\n                       (cond\n    \
    \                     [(> count max) (cons max words)]\n                     \
    \    [(< count max) (cons count (find_max (rest words)))]\n                  \
    \       [else (find_max (rest words))])))])))]))\n", "  (cond\n    [(empty? words)\
    \ empty]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max\
    \ (first words)])\n            (cond\n              [(empty? (rest words)) max]\n\
    \              [(equal? (length words) (length max)) (find_max (rest words))]\n\
    \              [else (let ([count (length max)])\n                    (cond\n\
    \                      [(empty? (rest words)) (cons max count)]\n            \
    \          [(equal? (length words) (length max)) (find_max (rest words))]\n  \
    \                    [else (let ([count (length max)])\n                     \
    \       (cond\n                              [(empty? (rest words)) (cons (first\
    \ words) count)]\n                              [(equal? (length words) (length\
    \ max)) (cons (first words) (find_max (rest words)))]\n                      \
    \        [else (let ([count (length max)])\n                                 \
    \   (cond\n                                      [(empty? (rest words)) (cons\
    \ (first words) count)]\n                                      [(equal? (length\
    \ words) (length max)) (cons (first words) (find_max (rest words)))]\n       \
    \                               [else (let ([count (length max)])\n          \
    \                                    (cond\n                                 \
    \               [(empty? (rest words)) (cons (first words) count)]\n         \
    \                                       [(equal? (length words) (length max))\
    \ (cons (first words) (find_max (rest words)))]\n                            \
    \                    [else (let ([count (length max)])\n                     \
    \                                 (cond\n                                    \
    \                    [(empty? (rest words)) (cons (first words) count)]\n    \
    \                                                    [(equal? (length words) (length\
    \ max)) (cons (first words) (find_max (rest words)))]\n                      \
    \                                  [else (let ([count (length max)])\n       \
    \                                                       (cond\n              \
    \                                                  [(empty? (rest words)) (cons\
    \ (first words) count)]\n                                                    \
    \            [(equal? (length words) (length max)) (cons (first words) (find_max\
    \ (rest words)))]\n                                                          \
    \      [else (let ([count (length max)])\n                                   \
    \                                     (cond\n          [(empty? (rest words))\
    \ (cons (first words) count)]\n          [(equal? (length words) (length max))\
    \ (cons (first words) (find_max (rest words)))]\n          [else (let ([count\
    \ (length max)])\n                (cond\n                  [(empty? (rest words))\
    \ (cons (first words) count)]\n                  [(equal? (length words) (length\
    \ max)) (cons (first words) (find_max (rest ", "  (cond\n    [(empty? words) empty]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (length words)])\n\
    \             (let ([chars (count-chars words)])\n               (cond\n     \
    \            [(< max chars) (first words)]\n                 [(= max chars) (find_max\
    \ (rest words))]\n                 [else (find_max (rest words))])))])))\n", " \
    \ (cond\n    [(empty? words) empty]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (find_max (rest words))]))\n", "  (let ((max-count 0))\n    (for ([word\
    \ (sort words (< string) string<)])\n      (let ((count (count word)))\n     \
    \   (if (> count max-count)\n            (set! max-count count)\n            word))))\n\
    \  max-count)\n", "  (cond\n    [(empty? words) empty]\n    [(equal? (length words)\
    \ 1) (first words)]\n    [else (let ([max (first words)])\n            (cond\n\
    \              [(empty? (rest words)) (max)]\n              [(equal? (length words)\
    \ (length max)) (max)]\n              [else (find_max (rest words))])))]))\n",
  "  (define (helper word count)\n    (cond\n      [(empty? words) (cons word count)]\n\
    \      [(equal? (length word) count) (cons word count)]\n      [else (helper (cdr\
    \ word) (+ count 1))]))\n  (helper words 0))\n", "  (define (helper word count)\n\
    \    (cond\n      [(empty? words) word]\n      [(equal? (length word) count) (helper\
    \ word count)]\n      [else (helper (append word (list count)) (+ count 1))]))\n\
    \  (helper '() 0))\n", "  (cond\n    [(empty? words) empty]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (first words)])\n           \
    \ (cond\n              [(empty? (rest words)) max]\n              [(equal? (length\
    \ words) (length max)) (find_max (rest words))]\n              [else (let ([count\
    \ (length words)])\n                       (cond\n                         [(>\
    \ count max) (find_max (rest words))]\n                         [(< count max)\
    \ (cons max words)]\n                         [else (find_max (rest words))])))])))])\n",
  "  (define (helper word count)\n    (cond\n      [(empty? words) word]\n      [(equal?\
    \ (count (first word)) count) (helper (rest word) (+ count 1))]\n      [else (helper\
    \ (rest word) count)]\n    ))\n  (helper words 0))\n", "  (define (helper word\
    \ count)\n    (cond\n      [(empty? words) word]\n      [(equal? count (length\
    \ (string->list word)))\n       (helper (rest word) (+ count 1))]\n      [else\
    \ (helper (rest word) count)]\n      ))\n  (helper words 0))\n", "  (let ((max-count\
    \ 0))\n    (for ([word words]\n          (count-chars word max-count))\n     \
    \ (if (> max-count count)\n          word\n          (set! max-count count))))\n\
    \  (define (count-chars word max-count)\n    (cond ((null? word) max-count)\n\
    \          ((char=? (car word) (car max-count)) (count-chars (cdr word) (add1\
    \ (car max-count)))\n          (else (count-chars (cdr word) (add1 (car max-count))))))\n\
    \  (define (lexicographical a b)\n    (if (null? a) (null? b) (string-compare\
    \ (car a) (car b)))\n    (lexicographical (cdr a) b))\n  (lexicographical words\
    \ max-count))\n", "  (let loop ((max-count (count (sort (map string->list (map\
    \ string->string words))))\n              (max-word (first words))\n         \
    \     (count 0))\n            (words words))\n    (cond ((< count max-count) max-word)\n\
    \          ((null? words) max-word)\n          (else (loop (+ count 1) (first\
    \ words) count)))))\n", "  (cond\n    [(empty? words) empty]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (first words)])\n           \
    \ (cond\n              [(empty? (rest words)) max]\n              [(equal? (length\
    \ words) (length max)) (find_max (rest words))]\n              [else (let ([count\
    \ (length words)])\n                       (cond\n                         [(<\
    \ count (length max)) (find_max (rest words))]\n                         [(> count\
    \ (length max)) max]\n                         [else (find_max (rest words))])))])))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
