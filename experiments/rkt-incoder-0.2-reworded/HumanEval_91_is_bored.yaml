name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The\
  \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"\
    !\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\"\
    ) 1]\n        [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond [(string=? (first S) \"I\") 1]\n\
    \        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"\
    I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\
    \ [(empty? S) #f]\n        [(equal? (first S) \"I\") 1]\n        [(equal? (first\
    \ S) \".\") 0]\n        [(equal? (first S) \"?\") 0]\n        [(equal? (first\
    \ S) \"!\") 0]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ([S (string->list\
    \ S)])\n    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") 1]\n\
    \      [else (+ 1 (is_bored (rest S)))])))\n", "  (let ((bored 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match \"^\\.\"\
    \ S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^?\" S) (set! bored 1)]\n      [(string-match \"\\.\\.\" S) (set! bored 2)]\n\
    \      [(string-match \"\\.!\" S) (set! bored 2)]\n      [(string-match \"\\.?\"\
    \ S) (set! bored 2)]\n      [(string-match \"!\\.\" S) (set! bored 2)]\n     \
    \ [(string-match \"!?\" S) (set! bored 2)]\n      [(string-match \"?\\.\" S) (set!\
    \ bored 2)]\n      [(string-match \"?!\" S) (set! bored 2)]\n      [(string-match\
    \ \"!\\.\" S) (set! bored 2)]\n      [(string-match \"!?\" S) (set! bored 2)]\n\
    \      [(string-match \"\\.\\.\" S) (set! bored 3)]\n      [(string-match \"\\\
    .!\" S) (set! bored 3)]\n      [(string-match \"\\.?\" S) (set! bored 3)]\n  \
    \    [(string-match \"!\\.\" S) (set! bored 3)]\n      [(string-match \"!?\" S)\
    \ (set! bored 3)]\n      [(string-match \"?\\.\" S) (set! bored 3)]\n      [(string-match\
    \ \"?!\" S) (set! bored 3)]\n      [(string-match \"!\\.\" S) (set! bored 3)]\n\
    \      [(string-match \"!?\" S) (set! bored 3)]\n      [(string-match \"\\.\\\
    .\" S) (set! bored 4)]\n      [(string-match \"\\.!\" S) (set! bored 4)]\n   \
    \   [(string-match \"\\.?\" S) (set! bored 4)]\n      [(string-match \"!\\.\"\
    \ S) (set! bored 4)]\n      [(string-match \"!?\" S) (set! bored 4)]\n      [(string-match\
    \ \"?\\.\" S) (set! bored 4)]\n      [(string-match \"?!\" S) (set! bored 4)]\n\
    \      [(string-match \"!\\.\" S) (set! bored 4)]\n      [(string-match \"!?\"\
    \ S) (set! bored ", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored (rest\
    \ S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\"\
    ) 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(empty? S)\
    \ #f]\n        [(equal? (first S) \"I\") 1]\n        [(equal? (first S) \"!\"\
    ) 1]\n        [(equal? (first S) \".\") 1]\n        [(equal? (first S) \"?\")\
    \ 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(string=?\
    \ (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
