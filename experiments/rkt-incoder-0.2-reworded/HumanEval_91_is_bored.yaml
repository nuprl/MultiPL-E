name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The\
  \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"\
    !\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\"\
    ) 1]\n        [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond [(string=? (first S) \"I\") 1]\n\
    \        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"\
    I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\
    \ [(empty? S) #f]\n        [(equal? (first S) \"I\") 1]\n        [(equal? (first\
    \ S) \".\") 0]\n        [(equal? (first S) \"?\") 0]\n        [(equal? (first\
    \ S) \"!\") 0]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ([S (string->list\
    \ S)])\n    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") 1]\n\
    \      [else (+ 1 (is_bored (rest S)))])))\n", "  (let ((bored 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match \"^\\.\"\
    \ S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^?\" S) (set! bored 1)]\n      [(string-match \"\\.\\.\" S) (set! bored 2)]\n\
    \      [(string-match \"\\.!\" S) (set! bored 2)]\n      [(string-match \"\\.?\"\
    \ S) (set! bored 2)]\n      [(string-match \"!\\.\" S) (set! bored 2)]\n     \
    \ [(string-match \"!?\" S) (set! bored 2)]\n      [(string-match \"?\\.\" S) (set!\
    \ bored 2)]\n      [(string-match \"?!\" S) (set! bored 2)]\n      [(string-match\
    \ \"!\\.\" S) (set! bored 2)]\n      [(string-match \"!?\" S) (set! bored 2)]\n\
    \      [(string-match \"\\.\\.\" S) (set! bored 3)]\n      [(string-match \"\\\
    .!\" S) (set! bored 3)]\n      [(string-match \"\\.?\" S) (set! bored 3)]\n  \
    \    [(string-match \"!\\.\" S) (set! bored 3)]\n      [(string-match \"!?\" S)\
    \ (set! bored 3)]\n      [(string-match \"?\\.\" S) (set! bored 3)]\n      [(string-match\
    \ \"?!\" S) (set! bored 3)]\n      [(string-match \"!\\.\" S) (set! bored 3)]\n\
    \      [(string-match \"!?\" S) (set! bored 3)]\n      [(string-match \"\\.\\\
    .\" S) (set! bored 4)]\n      [(string-match \"\\.!\" S) (set! bored 4)]\n   \
    \   [(string-match \"\\.?\" S) (set! bored 4)]\n      [(string-match \"!\\.\"\
    \ S) (set! bored 4)]\n      [(string-match \"!?\" S) (set! bored 4)]\n      [(string-match\
    \ \"?\\.\" S) (set! bored 4)]\n      [(string-match \"?!\" S) (set! bored 4)]\n\
    \      [(string-match \"!\\.\" S) (set! bored 4)]\n      [(string-match \"!?\"\
    \ S) (set! bored ", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored (rest\
    \ S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\"\
    ) 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(empty? S)\
    \ #f]\n        [(equal? (first S) \"I\") 1]\n        [(equal? (first S) \"!\"\
    ) 1]\n        [(equal? (first S) \".\") 1]\n        [(equal? (first S) \"?\")\
    \ 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(string=?\
    \ (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond [(string-match \"^I\" S) 0]\n        [else 1]))\n", " \
    \ (let ((bored-count 0))\n    (loop for c across S\n          for char '(. ? !)\n\
    \          for char-count (length c)\n          while (char-count > 0)\n     \
    \     for char-index (- char-count 1)\n          while (char-index > 0)\n    \
    \      for char-char (substring c char-index char-count)\n          while (char-char\
    \ = \"I\")\n          for char-index (+ char-count 1)\n          while (char-index\
    \ > 0)\n          for char-char (substring c char-index char-count)\n        \
    \  while (char-char = \"I\")\n          for char-index (+ char-count 1)\n    \
    \      while (char-index > 0)\n          for char-char (substring c char-index\
    \ char-count)\n          while (char-char = \"I\")\n          for char-index (+\
    \ char-count 1)\n          while (char-index > 0)\n          for char-char (substring\
    \ c char-index char-count)\n          while (char-char = \"I\")\n          for\
    \ char-index (+ char-count 1)\n          while (char-index > 0)\n          for\
    \ char-char (substring c char-index char-count)\n          while (char-char =\
    \ \"I\")\n          for char-index (+ char-count 1)\n          while (char-index\
    \ > 0)\n          for char-char (substring c char-index char-count)\n        \
    \  while (char-char = \"I\")\n          for char-index (+ char-count 1)\n    \
    \      while (char-index > 0)\n          for char-char (substring c char-index\
    \ char-count)\n          while (char-char = \"I\")\n          for char-index (+\
    \ char-count 1)\n          while (char-index > 0)\n          for char-char (substring\
    \ c char-index char-count)\n          while (char-char = \"I\")\n          for\
    \ char-index (+ char-count 1)\n          while (char-index > 0)\n          for\
    \ char-char (substring c char-index char-count)\n          while (char-char =\
    \ \"I\")\n          for char-index (+ char-count 1)\n          while (char-index\
    \ > 0)\n          for char-char (substring c char-index char-count)\n        \
    \  while (char-char = \"I\")\n          for char-index (+ char-count 1)\n    \
    \      while (char-index > 0)", "  (cond\n    [(equal? (first S) \"I\") 0]\n \
    \   [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"\
    I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n\
    \    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (let ((bored-count\
    \ 0))\n    (cond\n      [(equal? (first S) \"I\") (set! bored-count (+ bored-count\
    \ 1))]\n      [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   [else (set! bored-count (+ bored-count 0))]\n      [else (set! bored-count\
    \ (+ bored-count 0))]\n      [else (set! bored", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((boredom-count 0))\n\
    \    (loop for char = (char-code S)\n          while char\n          collect (if\
    \ (char-equal? char #\\I)\n                      (add1 boredom-count)\n      \
    \                (add1 boredom-count)))))\n", "  (let ((boredom 0))\n    (cond\n\
    \      [(string=? (first S) \"I\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! boredom 1)]\n      [(string=? (rest S)\
    \ \".\") (set! boredom 1)]\n      [(string=? (rest S) \"?\") (set! boredom 1)]\n\
    \      [(string=? (rest S) \"!\") (set! bore", "  (cond\n    [(equal? (first S)\
    \ \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n\
    \    [(equal? (first S) \".\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S)\
    \ \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [else 0]))\n", "  (let ((bored\
    \ 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 1)]\n      [(string-match \"[.?!]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.?!]\" S) (set! bored 1)]\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S)\
    \ \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal?\
    \ (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [(equal? (first S) \"!\") 1]\n        [else 0]))\n",
  "  (let ((bored-count 0))\n    (cond\n      [(string=? (substring S 0 3) \"I\")\
    \ (set! bored-count (+ bored-count 1))]\n      [(string=? (substring S 0 4) \"\
    I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring S 0 5)\
    \ \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring S\
    \ 0 6) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 7) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 8) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 9) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 10) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 11) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 12) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 13) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 14) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 15) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 16) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 17) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 18) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring\
    \ S 0 19) \"I\") (set! bored-count (+ bored-count 1))]\n      [(string=? (substring ",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [(equal?\
    \ (first S) \"!\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (let ((bored-count 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count\
    \ 0))]\n    )\n    bored-count\n  )\n)\n", "  (cond\n    [(equal? (first S) \"\
    I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n   \
    \ [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal?\
    \ (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(string=? (substring S 0 1)\
    \ \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n\
    \    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else\
    \ (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n\
    \    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+\
    \ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest\
    \ S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n \
    \   [(equal? (first S) \".\") 1]\n    [else 0]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(string-match \"^I\" S) 0]\n        [else 1]))\n", "  (let ((bored-count\
    \ 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"^\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"^!\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"^?\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\\
    .\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\\
    .\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\\
    .\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\
    \\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n    \
    \  [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\"\
    ) 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond [(empty? S)\
    \ 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n\
    \        [else 0]))\n", "  (let ((bored-count 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored-count 1)]\n      [(string-match \"^\\.\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"^!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"^?\" S) (set! bored-count 1)]\n      [(string-match \"\\.\\.\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"\\.!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"!\\.\" S) (set! bored-count 1)]\n      [(string-match \"!?\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"?\\.\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"?!\" S) (set! bored-count 1)]\n      [(string-match \"\\.?\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"\\.!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"!?\" S) (set! bored-count 1)]\n      [(string-match \"!\\.\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"?!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"\\.?\" S) (set! bored-count 1)]\n      [(string-match \"\\.!\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"?!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"!?\" S) (set! bored-count 1)]\n      [(string-match \"\\.?\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"\\.!\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"?!\" S) (set! bored-count 1)]\n      [(string-match \"!\\.\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"?\\.\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"\\.?\" S) (set! bored-count 1)]\n      [(string-match \"\\.!\" S) (set! bored-count\
    \ 1)]\n      [(string-match \"!?\" S) (set! bored-count 1)]\n      [(string-match\
    \ \"!\\.\" S) (set! bored", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n\
    \    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(string=? (substring\
    \ S 0 1) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (cond [(string=? (substring S 0 1) \"I\") 1]\n   \
    \     [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 0]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored 1)]\n      [(string-match \"^.\" S) (set! bored 1)]\n\
    \      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match \"^?\" S)\
    \ (set! bored 1)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n \
    \   [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else\
    \ 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n  \
    \  [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [else 0]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S)\
    \ \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((boredom\
    \ 0))\n    (cond [(string-match \"^I\" S) (set! boredom 1)]\n          [(string-match\
    \ \"^.\" S) (set! boredom 1)]\n          [(string-match \"^!\" S) (set! boredom\
    \ 1)]\n          [(string-match \"^?\" S) (set! boredom 1)]\n          [else (set!\
    \ boredom 0)]))\n  boredom)\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n \
    \   [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else\
    \ (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n\
    \    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 1]))\n", "  (let loop ((S S) (count 0))\n   \
    \ (cond\n      [(empty? S) count]\n      [(equal? (first S) \"I\") (loop (rest\
    \ S) (+ count 1))]\n      [else (loop (rest S) count)])))\n", "  (let ((bored\
    \ 0))\n    (cond\n      [(string=? (substring S 0 1) \"I\") (set! bored 1)]\n\
    \      [(string=? (substring S 0 2) \"I\") (set! bored 2)]\n      [(string=? (substring\
    \ S 0 3) \"I\") (set! bored 3)]\n      [(string=? (substring S 0 4) \"I\") (set!\
    \ bored 4)]\n      [(string=? (substring S 0 5) \"I\") (set! bored 5)]\n     \
    \ [(string=? (substring S 0 6) \"I\") (set! bored 6)]\n      [(string=? (substring\
    \ S 0 7) \"I\") (set! bored 7)]\n      [(string=? (substring S 0 8) \"I\") (set!\
    \ bored 8)]\n      [(string=? (substring S 0 9) \"I\") (set! bored 9)]\n     \
    \ [(string=? (substring S 0 10) \"I\") (set! bored 10)]\n      [(string=? (substring\
    \ S 0 11) \"I\") (set! bored 11)]\n      [(string=? (substring S 0 12) \"I\")\
    \ (set! bored 12)]\n      [(string=? (substring S 0 13) \"I\") (set! bored 13)]\n\
    \      [(string=? (substring S 0 14) \"I\") (set! bored 14)]\n      [(string=?\
    \ (substring S 0 15) \"I\") (set! bored 15)]\n      [(string=? (substring S 0\
    \ 16) \"I\") (set! bored 16)]\n      [(string=? (substring S 0 17) \"I\") (set!\
    \ bored 17)]\n      [(string=? (substring S 0 18) \"I\") (set! bored 18)]\n  \
    \    [(string=? (substring S 0 19) \"I\") (set! bored 19)]\n      [(string=? (substring\
    \ S 0 20) \"I\") (set! bored 20)]\n      [(string=? (substring S 0 21) \"I\")\
    \ (set! bored 21)]\n      [(string=? (substring S 0 22) \"I\") (set! bored 22)]\n\
    \      [(string=? (substring S 0 23) \"I\") (set! bored 23)]\n      [(string=?\
    \ (substring S 0 24) \"I\") (set! bored 24)]\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\"\
    ) 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \".\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"?\") (+\
    \ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else 0]))\n", "  (let loop ((S S) (count 0))\n    (cond\n      [(empty?\
    \ S) count]\n      [(equal? (first S) \"I\") (loop (rest S) (+ count 1))]\n  \
    \    [else (loop (rest S) count)])))\n", "  (let ((bored-count 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"!\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"?\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \".\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count 1))]\n   \
    \   )))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n \
    \   [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [(equal? (first S) \"!\") 1]\n        [(equal?\
    \ (first S) \".\") 1]\n        [else 0]))\n", "  (let ((bored-count 0))\n    (loop\
    \ for (i . rest) on S\n          when (and (char=? (first i) 'I) (char=? (rest\
    \ 0) '.'))\n          (set! bored-count (add1 bored-count))\n          (return\
    \ bored-count)\n          )\n    ))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [(equal? (first S) \"!\") 1]\n        [else 0]))\n",
  "  (cond [(string-match \"^I\" S) 0]\n        [else 1]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n\
    \    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond [(empty? S) #f]\n        [(equal? (first S) \"I\") #t]\n\
    \        [(equal? (first S) \".\") #t]\n        [(equal? (first S) \"?\") #t]\n\
    \        [(equal? (first S) \"!\") #t]\n        [else (is_bored (rest S))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n \
    \   [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else\
    \ 0]))\n", "  (let ((bored-count 0))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))\n    (loop for char = (char-code (first S))\n\
    \          while char\n          collect (char-code char))\n    (loop for char\
    \ = (char-code (first S))\n          while char\n          collect (char-code\
    \ char))\n    (loop for char = (char-code (first S))\n          while char\n \
    \         collect (char-code char))", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (let\
    \ ((bored-count 0))\n    (loop for char = (char-code S)\n          while char\
    \ > 64\n          collect (if (char-equal? char #\\I) (add1 bored-count) bored-count)\n\
    \          finally (return bored-count))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let loop ((S S) (count 0))\n    (cond ((eq? (car S) 'I) (set! count (+ count\
    \ 1)))\n          ((eq? (car S) '.') (loop (cdr S) (+ count 1)))\n          ((eq?\
    \ (car S) '?') (loop (cdr S) (+ count 1)))\n          ((eq? (car S) '!') (loop\
    \ (cdr S) (+ count 1)))\n          (else (loop (cdr S) count)))))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(string=?\
    \ (substring S 0 1) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+\
    \ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest\
    \ S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n",
  "  (let ((bored (count (lambda (x) (equal? (first x) \"I\"))\n                 \
    \      (split-string S \".?!\"))))\n    (if (= bored 0)\n        0\n        1)))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [(equal?\
    \ (first S) \"!\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", "  (let ((boredom-count\
    \ 0))\n    (loop for char = (char-code S)\n          while char\n          collect\
    \ (if (char-equal? char #\\I)\n                      (add1 boredom-count)\n  \
    \                    (add1 boredom-count)))))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else 0]))\n", "  (let ((bored 0))\n    (loop for char = (char-code\
    \ S)\n          while char\n          collect (if (char-equal? char 'I)\n    \
    \                 (add1 bored)\n                     (add1 bored)))))\n", "  (cond\
    \ [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") (+ 1\
    \ (is_bored (rest S)))]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \".\") (+ 1 (is_bored\
    \ (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored (rest S)))]\n    [(equal?\
    \ (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S)\
    \ \".\") (+ 1 (is_bored (rest S)))]\n    [(equal? (first S) \"?\") (+ 1 (is_bored\
    \ (rest S)))]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n  \
    \  [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count 0))\n    (loop\
    \ for c across S\n          for char = (char-code c)\n          while (char >\
    \ 64) ; ASCII codes go up to 64\n          while (char < 91) ; ASCII codes go\
    \ up to 91\n          while (char < 96) ; ASCII codes go up to 96\n          while\
    \ (char < 123) ; ASCII codes go up to 123\n          while (char < 126) ; ASCII\
    \ codes go up to 126\n          while (char < 32) ; ASCII codes go up to 32\n\
    \          while (char < 47) ; ASCII codes go up to 47\n          while (char\
    \ < 58) ; ASCII codes go up to 58\n          while (char < 64) ; ASCII codes go\
    \ up to 64\n          while (char < 91) ; ASCII codes go up to 91\n          while\
    \ (char < 96) ; ASCII codes go up to 96\n          while (char < 123) ; ASCII\
    \ codes go up to 123\n          while (char < 126) ; ASCII codes go up to 126\n\
    \          while (char < 32) ; ASCII codes go up to 32\n          while (char\
    \ < 47) ; ASCII codes go up to 47\n          while (char < 58) ; ASCII codes go\
    \ up to 58\n          while (char < 64) ; ASCII codes go up to 64\n          while\
    \ (char < 91) ; ASCII codes go up to 91\n          while (char < 96) ; ASCII codes\
    \ go up to 96\n          while (char < 123) ; ASCII codes go up to 123\n     \
    \     while (char < 126) ; ASCII codes go up to 126\n          while (char < 32)\
    \ ; ASCII codes go up to 32\n          while (char < 47) ; ASCII codes go up to\
    \ 47\n          while (char < 58) ; ASCII codes go up to 58\n          while (char\
    \ < 64) ; ASCII codes go up to 64\n          while (char < 91) ; ASCII codes go\
    \ up to 91\n          while (char < 96) ; ASCII codes go up to 96\n          while\
    \ (char < 123) ; ASCII codes go up to 123\n          while (char < 126) ; ASCII\
    \ codes go up to 126\n          while (char < 32) ; ASCII codes go up to 32\n\
    \          while (char < 47) ; ASCII codes go up to 47\n          while (char\
    \ < 58) ; ASCII codes go up to 58\n          while (char < 64) ; ASCII codes go\
    \ up to 64\n          while (char < 91) ; ASCII codes go up to 91\n          while\
    \ (char < 96) ; ASCII codes go ", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n   \
    \ [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((boredoms (count-boredoms S)))\n    (if (= boredoms 0)\n        0\n   \
    \     1)))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal?\
    \ (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(string=? (substring S 0 1)\
    \ \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [else 0]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (let ((bored 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n\
    \      [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n   \
    \     [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S)\
    \ \"?\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored 0))\n\
    \    (loop for c across S\n          for c across (cond [(char=? (char-code c)\
    \ ?I) (set! bored 1)]\n                              [(char=? (char-code c) ?!)\
    \ (set! bored 0)]\n                              [(char=? (char-code c) ?.) (set!\
    \ bored 0)]\n                              [(char=? (char-code c) ??) (set! bored\
    \ 0)]\n                              [else (set! bored 0)]))\n    bored))\n",
  "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n  \
    \  [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal?\
    \ (first S) \"?\") 1]\n    [else 0]))\n", "  (let ((bored-count 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"^.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^!\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^?\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\\
    .\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n    \
    \  [(string-match \"\\.\\.\\.\\.\\.\\.\\.", "  (cond\n    [(equal? (first S) \"\
    I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n\
    \    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S)\
    \ \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S)\
    \ \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n \
    \   [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else\
    \ 0]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
