name: HumanEval_116_sort_array
language: rkt
prompt: "#lang racket\n\n;; In this Kata, you have to sort a list of non-negative\
  \ integers according to\n;; number of ones in their binary representation in ascending\
  \ order.\n;; For similar number of ones, sort based on decimal value.\n;; It must\
  \ be implemented like this:\n;; >>> (sort_array (list 1 5 2 3 4))\n;; (list 1 2\
  \ 3 4 5)\n;; >>> (sort_array (list -2 -3 -4 -5 -6))\n;; (list -6 -5 -4 -3 -2)\n\
  ;; >>> (sort_array (list 1 0 2 3 4))\n;; (list 0 1 2 3 4)\n(define (sort_array arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5))\n    (check-equal?\
  \ (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3))\n    (check-equal? (candidate\
  \ (list 1 0 2 3 4)) (list 0 1 2 4 3))\n    (check-equal? (candidate (list )) (list\
  \ ))\n    (check-equal? (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4\
  \ 3 3 5 5 5 7 77))\n    (check-equal? (candidate (list 3 6 44 12 32 5)) (list 32\
  \ 3 5 6 12 44))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16\
  \ 32))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32))\n))\n\
  \n(test-humaneval)"
completions: ["  (sort (lambda (x y)\n          (if (< x y)\n              (+ 1 (count_ones\
    \ (binary-string x)))\n              (+ 1 (count_ones (binary-string y))))\n \
    \         arr))\n  )\n", "  (define (helper arr acc i)\n    (if (null? arr)\n\
    \        acc\n        (helper (cdr arr) (cons (car arr) (cons i (car acc))) (cdr\
    \ acc))))\n  (helper arr '() 0))\n", "  (sort (lambda (x y)\n          (if (<\
    \ x y)\n              (+ 1 ((length x) 1))\n              (+ 1 ((length y) 1))))\n\
    \        arr))\n", "  (sort (lambda (x y)\n          (if (= (length x) 0)\n  \
    \            (length y)\n              (if (= (length y) 0)\n                \
    \  (length x)\n                  (if (= (length x) 1)\n                      (if\
    \ (= (first x) 0)\n                          (length y)\n                    \
    \      (if (= (first y) 0)\n                              (length x)\n       \
    \                       (if (= (first x) 1)\n                                \
    \  (if (= (first y) 1)\n                                      (if (= (second x)\
    \ 0)\n                                          (length y)\n                 \
    \                         (if (= (second y) 0)\n                             \
    \                 (length x)\n                                              (if\
    \ (= (second x) 1)\n                                                  (if (= (second\
    \ y) 1)\n                                                      (if (= (third x)\
    \ 0)\n                                                          (length y)\n \
    \                                                         (if (= (third y) 0)\n\
    \                                                              (length x)\n  \
    \                                                            (if (= (third x)\
    \ 1)\n                                                                  (if (=\
    \ (third y) 1)\n                                                             \
    \         (if (= (fourth x) 0)\n                                             \
    \                             (length y)\n                                   \
    \                                       (if (= (fourth y) 0)\n               \
    \                                                               (length x)\n \
    \                                                                            \
    \ (if (= (fourth x) 1)\n                                                     \
    \                             (if (= (fourth y) 1)\n                         \
    \                                                             (if (= (fifth x)\
    \ 0)\n                                                                       \
    \                   (length y)\n                                             \
    \                                             (if (= (fifth y) 0)\n          \
    \                                                                            \
    \        (length x)\n                                                        \
    \                                      (if (= (fifth x) 1)\n                 \
    \                                                                            \
    \     (if (= (fifth y) 1)\n                                                  \
    \                                                    (if (= (sixth x) 0)\n   \
    \                                                                            \
    \                           (length y)\n                                     \
    \                                                                     (if (= (sixth\
    \ y) 0)\n                                                                    \
    \                                          (length x)\n                      \
    \                                                                            \
    \            (if (= (sixth x) 1)\n                                           \
    \                                                                       (if (=\
    \ (sixth y) 1)\n                                                             \
    \                                                         (if (= (seventh x) 0)\n\
    \                                                                            \
    \                                              (length y)\n                  \
    \                                                                            \
    \                            (if (= (seventh y) 0)\n                         \
    \                                                                            \
    \                         (length x)\n                                       \
    \                                                                            \
    \           (if (= (seventh x) 1)\n                                          \
    \                                                                            \
    \            (if (= (seventh y) 1)\n                                         \
    \                                                                            \
    \                 (if (= (eigth x) 0)\n                                      \
    \                                                                            \
    \                        (length y)\n                                        \
    \                                                                            \
    \                      (if (= (eigth y) 0)\n                                 \
    \                                                                            \
    \                                 (length x)\n                               \
    \                                                                            \
    \                                   (if (= (eigth x) 1)\n                    \
    \                                                                            \
    \                                                  (if (= (eigth y) 1)\n     \
    \                                                                            \
    \                                                                     (if (= (ninth\
    \ x) 0)\n                                                                    \
    \                                                                            \
    \          (length y)\n                                                      \
    \                                                                            \
    \                        (if (= (ninth y) 0)\n                               \
    \                                                                            \
    \                                                   (length x)\n             \
    \                                                                            \
    \                                                                     ", "  (sort\
    \ (lambda (x y)\n          (if (= (length x) 0)\n              (if (= (length\
    \ y) 0)\n                  (= x y)\n                  (= (substring x 0 1) (substring\
    \ y 0 1)))\n              (= (substring x 0 1) (substring y 0 1))\n          \
    \    (= (substring x 0 1) (substring y 0 1))\n              (= (substring x 0\
    \ 1) (substring y 0 1))\n              (= (substring x 0 1) (substring y 0 1))\n\
    \              (= (substring x 0 1) (substring y 0 1))\n              (= (substring\
    \ x 0 1) (substring y 0 1))\n              (= (substring x 0 1) (substring y 0\
    \ 1))\n              (= (substring x 0 1) (substring y 0 1))\n              (=\
    \ (substring x 0 1) (substring y 0 1))\n              (= (substring x 0 1) (substring\
    \ y 0 1))\n              (= (substring x 0 1) (substring y 0 1))\n           \
    \   (= (substring x 0 1) (substring y 0 1))\n              (= (substring x 0 1)\
    \ (substring y 0 1))\n              (= (substring x 0 1) (substring y 0 1))\n\
    \              (= (substring x 0 1) (substring y 0 1))\n              (= (substring\
    \ x 0 1) (substring y 0 1))\n              (= (substring x 0 1) (substring y 0\
    \ 1))\n              (= (substring x 0 1) (substring y 0 1))\n              (=\
    \ (substring x 0 1) (substring y 0 1))\n              (= (substring x 0 1) (substring\
    \ y 0 1))\n              (= (substring x 0 1) (substring y 0 1))\n           \
    \   (= (substring x 0 1) (substring y 0 1))\n              (= (substring x 0 1)\
    \ (substring y 0 1))\n              (= (substring x 0 1) (substring y 0 1))\n\
    \              (= (substring x 0 1) (substring y 0 1))\n              (= (substring\
    \ x 0 1) (substring y 0 1))\n              (= (substring x 0 1) (substring y 0\
    \ 1))\n              (= (substring x 0 1) (substring y 0 1))\n              (=\
    \ (substring x 0 1) (substring y 0 1))\n", "  (sort (lambda (x y)\n          (if\
    \ (= (length x) 0)\n              (length y)\n              (if (= (length y)\
    \ 0)\n                  (length x)\n                  (if (= (bit-count x) 0)\n\
    \                      (if (= (bit-count y) 0)\n                          (if\
    \ (= (bit-count (bit-reverse x)) 0)\n                              (if (= (bit-count\
    \ (bit-reverse y)) 0)\n                                  (if (= (bit-count (bit-reverse\
    \ (bit-reverse x))) 0)\n                                      (if (= (bit-count\
    \ (bit-reverse (bit-reverse y))) 0)\n                                        \
    \  (if (= (bit-count (bit-reverse (bit-reverse (bit-reverse x))))) 0\n       \
    \                                       (if (= (bit-count (bit-reverse (bit-reverse\
    \ (bit-reverse y))))) 0\n                                                  (if\
    \ (= (bit-count (bit-reverse (bit-reverse (bit-reverse (bit-reverse x))))) 0)\n\
    \                                                      (if (= (bit-count (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse y))))) 0)\n                         \
    \                                 (if (= (bit-count (bit-reverse (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse x))))))) 0\n                        \
    \                                      (if (= (bit-count (bit-reverse (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse y))))))) 0\n                        \
    \                                          (if (= (bit-count (bit-reverse (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse (bit-reverse x))))))) 0)\n          \
    \                                                            (if (= (bit-count\
    \ (bit-reverse (bit-reverse (bit-reverse (bit-reverse (bit-reverse (bit-reverse\
    \ y))))))) 0)\n                                                              \
    \            (if (= (bit-count (bit-reverse (bit-reverse (bit-reverse (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse x))))))) 0)\n                       \
    \                                                       (if (= (bit-count (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse (bit-reverse (bit-reverse (bit-reverse\
    \ y))))))) 0)\n                                                              \
    \                    (if (= (bit-count (bit-reverse (bit-reverse (bit-reverse\
    \ (bit-reverse (bit-reverse (bit-reverse (bit-reverse (bit-reverse x))))))", " \
    \ (sort (lambda (x y)\n           (if (= (length x) 0)\n               y\n   \
    \            (if (= (length y) 0)\n                   x\n                   (if\
    \ (= (length x) 1)\n                       (if (= (first x) 0)\n             \
    \              (if (< y x)\n                               (cons x (cons y '()))\n\
    \                               (cons y (cons x '())))\n                     \
    \      (cons x (cons y '())))\n                       (if (< y x)\n          \
    \                 (cons x (cons y (cons x '())))\n                           (cons\
    \ y (cons x (cons x '()))))))))\n         arr))\n", "  (sort (lambda (x y)\n \
    \         (if (< x y)\n              (+ 1 (count_ones (binary-representation x)))\n\
    \              (+ 1 (count_ones (binary-representation y))))\n          arr))\n\
    \  ;; count_ones is an auxiliary function which counts the number of ones\n  ;;\
    \ of a given binary number\n  ;; binary-representation is another auxiliary function\
    \ which converts a\n  ;; given number to a binary string\n  ;; sort is a built-in\
    \ function which sorts given list according to a\n  ;; given comparison function\n\
    \  ;; sort returns a new sorted list\n  )\n", "  (define (helper arr acc k)\n\
    \    (cond [(empty? arr) (reverse acc)]\n          [(equal? (first arr) k) (helper\
    \ (rest arr) (cons (first arr) acc) k)]\n          [else (helper (rest arr) (cons\
    \ (first arr) (cons (second arr) (cons (third arr) (cons (fourth arr) (cons (fifth\
    \ arr) (cons (sixth arr) (cons (seventh arr) (cons (eighth arr) (cons (ninth arr)\
    \ (cons (tenth arr) (cons (eleventh arr) (cons (twelfth arr) (cons (thirteenth\
    \ arr) (cons (fourteenth arr) (cons (fifteenth arr) (cons (sixteenth arr) (cons\
    \ (seventeenth arr) (cons (eighteenth arr) (cons (nineteenth arr) (cons (twentieth\
    \ arr) (cons (thirtieth arr) (cons (fourtieth arr) (cons (fiftieth arr) (cons\
    \ (sixtieth arr) (cons (seventieth arr) (cons (eightieth arr) (cons (ninetieth\
    \ arr) (cons (twentyeth arr) (cons (thirtyeth arr) (cons (fortyeth arr) (cons\
    \ (fiftyeth arr) (cons (sixtyeth arr) (cons (seventyeth arr) (cons (eightyeth\
    \ arr) (cons (ninetyeth arr) (cons (hundredth arr) (cons (thousandth arr) (cons\
    \ (millionth arr) (cons (billionth arr) (cons (trillionth arr) (cons (quadrillionth\
    \ arr) (cons (quintillionth arr) (cons (sextillionth arr) (cons (septillionth\
    \ arr) (cons (octillionth arr) (cons (nonillionth arr) (cons (decillionth arr)\
    \ (cons (undecillionth arr) (cons (duodecillionth arr) (cons (tredecillionth arr)\
    \ (cons (quattuordecillionth arr) (cons (quindecillionth arr) (cons (sexdecillionth\
    \ arr) (cons (septendecillionth arr) (cons (octodecillionth arr) (cons (novemdecillionth\
    \ arr) (cons (vigintillionth arr) (cons (unvigintil", "  (sort (lambda (x y)\n\
    \           (if (= (ones-count x) 0)\n               (if (= (ones-count y) 0)\n\
    \                   (if (< x y)\n                       (- y)\n              \
    \         (- x))\n                   (- x))\n               (if (< x y)\n    \
    \               (- x)\n                   (- y))))\n         arr))\n", "  (sort\
    \ (lambda (x y)\n           (cond\n             ((= (length x) 1) (= (length y)\
    \ 1))\n             ((= (length x) 0) (= (length y) 0))\n             ((= (length\
    \ x) 1) (= (length y) 0))\n             ((= (length x) 0) (= (length y) 1))\n\
    \             ((= (length x) 1) (= (length y) 1))\n             ((= (length x)\
    \ 0) (= (length y) 0))\n             ((= (length x) 1) (= (length y) 0))\n   \
    \          ((= (length x) 0) (= (length y) 1))\n             ((= (length x) 1)\
    \ (= (length y) 1))\n             ((= (length x) 0) (= (length y) 0))\n      \
    \       ((= (length x) 1) (= (length y) 0))\n             ((= (length x) 0) (=\
    \ (length y) 1))\n             ((= (length x) 1) (= (length y) 1))\n         \
    \    ((= (length x) 0) (= (length y) 0))\n             ((= (length x) 1) (= (length\
    \ y) 0))\n             ((= (length x) 0) (= (length y) 1))\n             ((= (length\
    \ x) 1) (= (length y) 1))\n             ((= (length x) 0) (= (length y) 0))\n\
    \             ((= (length x) 1) (= (length y) 0))\n             ((= (length x)\
    \ 0) (= (length y) 1))\n             ((= (length x) 1) (= (length y) 1))\n   \
    \          ((= (length x) 0) (= (length y) 0))\n             ((= (length x) 1)\
    \ (= (length y) 0))\n             ((= (length x) 0) (= (length y) 1))\n      \
    \       ((= (length x) 1) (= (length y) 1))\n             ((= (length x) 0) (=\
    \ (length y) 0))\n             ((= (length x) 1) (= (length y) 0))\n         \
    \    ((= (length x) 0) (= (length y) 1))\n             ((= (length x) 1) (= (length\
    \ y) 1))\n             ((= (length x) 0) (= (length y) 0))\n             ((= (length\
    \ x) 1) (= (length y) 0))\n             ((= (length x) 0) (= (length y) 1))\n\
    \             ((= (length x) 1) (= (length y) 1))\n             ((= (length x)\
    \ 0) (= (length y) 0))\n             ((= (length x) 1) (= (length y) 0))\n   \
    \          ((= (length x) 0) (= (length ", "  (let loop ((arr (reverse arr))\n\
    \             (result '()))\n    (if (null? arr)\n        result\n        (loop\
    \ (rest arr)\n              (cons (if (= (length result) 0)\n                \
    \         (first arr)\n                         (first result))\n            \
    \        result)))))\n", "  (sort (lambda (x y)\n          (if (= (count x) 1)\n\
    \              (if (= (count y) 1)\n                  (if (= (- x y) 0)\n    \
    \                  (- x y)\n                      (- y x))\n                 \
    \ (- x y))\n              (- x y)))\n        arr))\n", "  (sort (lambda (x y)\n\
    \          (if (= (length x) 0)\n              (if (= (length y) 0)\n        \
    \          0\n                  (if (= (first x) 0)\n                      (if\
    \ (= (first y) 0)\n                          (if (= (second x) 0)\n          \
    \                    (if (= (second y) 0)\n                                  (if\
    \ (= (third x) 0)\n                                      (if (= (third y) 0)\n\
    \                                          (if (= (fourth x) 0)\n            \
    \                                  (if (= (fourth y) 0)\n                    \
    \                              (if (= (fifth x) 0)\n                         \
    \                             (if (= (fifth y) 0)\n                          \
    \                                (if (= (sixth x) 0)\n                       \
    \                                       (if (= (sixth y) 0)\n                \
    \                                                  (if (= (seventh x) 0)\n   \
    \                                                                   (if (= (seventh\
    \ y) 0)\n                                                                    \
    \      (if (= (eigth x) 0)\n                                                 \
    \                             (if (= (eigth y) 0)\n                          \
    \                                                        (if (= (ninth x) 0)\n\
    \                                                                            \
    \          (if (= (ninth y) 0)\n                                             \
    \                                             (if (= (tenth x) 0)\n          \
    \                                                                            \
    \        (if (= (tenth y) 0)\n                                               \
    \                                                   (if (= (eleventh x) 0)\n \
    \                                                                            \
    \                         (if (= (eleventh y) 0)\n                           \
    \                                                                            \
    \   (if (= (twelfth x) 0)\n                                                  \
    \                                                            (if (= (twelfth y)\
    \ 0)\n                                                                       \
    \                                           (if (= (thirteenth x) 0)\n       \
    \                                                                            \
    \                                   (if (= (thirteenth y) 0)\n               \
    \                                                                            \
    \                               (if (= (fourteenth x) 0)\n                   \
    \                                                                            \
    \                               (if (= (fourteenth y) 0)\n                   \
    \                                                                            \
    \                                   (if (= (fifteenth x) 0)\n                \
    \                                                                            \
    \                                          (if (= (fifteenth y) 0)\n         \
    \                                                                            \
    \                                                     (if (= (sixteenth x) 0)\n\
    \                                                                            \
    \                                                                  (if (= (sixteenth\
    \ y) 0)\n                                                                    \
    \                                                                            \
    \  (if (= (seventeenth x) 0)\n                                               \
    \                                                                            \
    \                           (if (= (seventeenth y) 0)\n                      \
    \                                                                            \
    \                                                        (if (= (eighteenth x)\
    \ 0)\n                                                                       \
    \                                                                            \
    \           (if (= (eighteenth y) 0)\n                                       \
    \                                                                            \
    \                                               (if (= (nineteenth x) 0)\n   \
    \                                                                            \
    \                                                                            \
    \           (if (= (nineteenth y) 0)\n                                       \
    \                                                                            \
    \                                                       (if (= (twentieth x) 0)\n\
    \                                                                            \
    \                                                                            \
    \                      (if (= (twentieth y) 0)\n                             \
    \                                                                            \
    \                                                                         (if\
    \ (= (thirtieth x) 0)\n                                                      \
    \                                                                            \
    \                                                    (if (= (thirtieth y) 0)",
  "  (let loop ((arr arr) (result '()))\n    (if (null? arr)\n        result\n   \
    \     (loop (rest arr) (cons (first arr) (loop (rest arr) (cons (first arr) (cons\
    \ (first arr) result))))))))\n", "  (let loop ((arr arr) (acc '()))\n    (cond\
    \ ((null? arr) acc)\n          ((= (length arr) 1) (cons (car arr) acc))\n   \
    \       ((= (length arr) 2) (cons (car arr) (loop (cdr arr) (cons (car arr) acc))))\n\
    \          ((= (length arr) 3) (cons (car arr) (loop (cdr arr) (cons (car arr)\
    \ (loop (cdr arr) acc))))\n          ((= (length arr) 4) (cons (car arr) (loop\
    \ (cdr arr) (cons (car arr) (loop (cdr arr) (cons (car arr) acc))))))\n  (loop\
    \ (reverse arr) '())))\n", "  (sort (lambda (x y) (< (count-ones (binary-representation\
    \ x)) (count-ones (binary-representation y))) \n              (< (decimal-value\
    \ x) \n                  (decimal-value y))) arr))\n", "  (define (helper arr\
    \ acc)\n    (if (null? arr)\n        acc\n        (helper (cdr arr) (cons (car\
    \ arr) (helper acc))))\n  (helper arr null))\n", "  (sort (lambda (x y)\n    \
    \       (if (< x y)\n               (+ 1 (count_ones (binary-string x)))\n   \
    \            (+ 1 (count_ones (binary-string y))))\n           arr))\n  ;; count_ones\
    \ is implemented like this:\n  ;; (define (count_ones s)\n  ;;   (if (empty? s)\n\
    \  ;;     0\n  ;;     (+ 1 (count_ones (rest s)))))\n", "  (sort (lambda (x y)\n\
    \           (if (= (ones-count x) 1)\n               (if (= (ones-count y) 1)\n\
    \                   (compare-decimals x y)\n                   (compare-decimals\
    \ y x))\n               (compare-decimals x y)))\n        arr))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
