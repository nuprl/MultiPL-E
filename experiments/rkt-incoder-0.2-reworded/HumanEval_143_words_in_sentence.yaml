name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is\
  \ a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\"\
  )\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (re", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?h) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (re", "  (define (helper sentence result)\n   \
    \ (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence) ?a)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?z) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?Z) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?0) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?9) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?!) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?.) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?,) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?;) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?:) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?;) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?!) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?-) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?_) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?+) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?%) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?$) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?%) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?&) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?') (helper (", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) (cons (first\
    \ sentence) result))))])))\n", "  (let loop ((sentence sentence)\n           \
    \  (result '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first\
    \ sentence) ?space) result)\n          ((char=? (first sentence) ?.) result)\n\
    \          ((char=? (first sentence) ?!) result)\n          ((char=? (first sentence)\
    \ ?-) result)\n          ((char=? (first sentence) ?!?) result)\n          ((char=?\
    \ (first sentence) ?!?!) result)\n          ((char=? (first sentence) ?!?!?) result)\n\
    \          ((char=? (first sentence) ?!?!?!) result)\n          ((char=? (first\
    \ sentence) ?!?!?!?) result)\n          ((char=? (first sentence) ?!?!?!?!) result)\n\
    \          ((char=? (first sentence) ?!?!?!?!?) result)\n          ((char=? (first\
    \ sentence) ?!?!?!?!?!) result)\n          ((char=? (first sentence) ?!?!?!?!?!?)\
    \ result)\n          ((char=? (first sentence) ?!?!?!?!?!?!) result)\n       \
    \   ((char=? (first sentence) ?!?!?!?!?!?!?) result)\n          ((char=? (first\
    \ sentence) ?!?!?!?!?!?!?!) result)\n          ((char=? (first sentence) ?!?!?!?!?!?!?!?)\
    \ result)\n          ((char=? (first sentence) ?!?!?!?!?!?!?!?!) result)\n   \
    \       ((char=? (first sentence) ?!?!?!?!?!?!?!?!?) result)\n          ((char=?\
    \ (first sentence) ?!?!?!?!?!?!?!?!?) result)\n          ((char=? (first sentence)\
    \ ?!?!?!?!?!?!?!?!?!) result)\n          ((char=? (first sentence) ?!?!?!?!?!?!?!?!?!?)\
    \ result)\n          ((char=? (first sentence) ?!?!?!?!?!?!?!?!?!?!) result)\n\
    \          ((char", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (string-length\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\n\
    \                  (list (first sentence))\n                  (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?U) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?Y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (", "  (let loop ((sentence sentence)\n \
    \            (result '()))\n    (if (empty? sentence)\n        result\n      \
    \  (loop (rest sentence)\n              (cons (first sentence)\n             \
    \       (loop (rest sentence)\n                          result))))))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((empty? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\space)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\newline))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\tab)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\return)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\space))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\newline)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\tab)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(#\\return)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop", "  (let loop ((sentence sentence)\n        \
    \     (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) ?space) result)\n          ((char=? (first sentence) ?newline)\
    \ result)\n          ((char=? (first sentence) ?tab) result)\n          ((char=?\
    \ (first sentence) ?return) result)\n          ((char=? (first sentence) ?(newline|return|tab|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space)) result)\n\
    \          ((char=? (first sentence) ?(return|newline|tab|space|space)) result)\n\
    \          ((char=? (first sentence) ?(return|newline|tab|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ?(return|newline|tab|space|space|space|space|space|space|space|space|space|space|space))\
    \ result)\n          ((char=? (first sentence) ", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else\n       (loop (rest sentence) (cons (first\
    \ sentence) (cons (first sentence) result)))])))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) result)))])))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?O) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?U) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?b) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?f) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?h) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (re", "  (cond [(empty? sentence) \"\"]\n     \
    \   [(empty? (rest sentence)) \"\"]\n        [(even? (length (rest sentence)))\n\
    \         (cons (first sentence) (words_in_sentence (rest sentence)))]\n     \
    \   [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?O) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?U) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest ", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(equal? (first sentence) \"\") \"\"]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?z) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?A) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?Z) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?0) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?9) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?1) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?8) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?2) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?7) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?3) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?6) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?4) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?7) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?6) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?5) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?4) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?3) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?2) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence) result)\n          ((char=? (car sentence) \" \"\
    )\n           (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          (else\n\
    \           (loop (cdr sentence) (cons (car sentence) result)))))\n  result)\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(equal? (first sentence) \"\") (helper (rest sentence) result)]\n    \
    \  [(equal? (first sentence) \"\\n\") (helper (rest sentence) result)]\n     \
    \ [(equal? (first sentence) \" \") (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(equal? (first sentence) \".\") (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(equal? (first sentence) \"?\") (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ \"!\") (helper (rest sentence) (cons (first sentence) result))]\n      [(equal?\
    \ (first sentence) \"!.\") (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(equal? (first sentence) \"!?\") (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) \"!?!\") (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ \"!?!.\") (helper (rest sentence) (cons (first sentence) result))]\n      [(equal?\
    \ (first sentence) \"!?!?\") (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(equal? (first sentence) \"!?!?!\") (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) \"!?!?!.\") (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ \"!?!?!?\") (helper (rest sentence) (cons (first sentence) result))]\n     \
    \ [(equal? (first sentence) \"!?!?!?!\") (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) \"!?!?!?!.\") (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ \"!?!?!?!?\") (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(equal? (first sentence) \"!?!?!?!?!\") (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) \"!?!?!?!?!.\") (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ \"", "  (let loop ((sentence sentence)\n             (result '()))\n    (if\
    \ (empty? sentence)\n        result\n        (loop (rest sentence)\n         \
    \     (cons (first sentence)\n                    (loop (rest sentence)\n    \
    \                      result))))))\n", "  (define (helper sentence result)\n\
    \    (if (empty? sentence)\n        result\n        (helper (rest sentence) (cons\
    \ (first sentence) result)))))\n  (helper sentence '()))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(equal? (first sentence) \"\") (words_in_sentence (rest\
    \ sentence))]\n    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence) (cons (first sentence) result))))\n  (helper\
    \ sentence '()))\n", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (re", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char-alphabetic? (car sentence))\n           (loop (cdr\
    \ sentence)\n                 (cons (car sentence) result)))\n          ((char-digit?\
    \ (car sentence))\n           (loop (cdr sentence)\n                 (cons (car\
    \ sentence) result)))\n          ((char-whitespace? (car sentence))\n        \
    \   (loop (cdr sentence)\n                 (cons (car sentence) result)))\n  \
    \        (else\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result))))))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first\
    \ sentence) \"\") \"\"]\n    [(equal? (first sentence) (first sentence)) (words_in_sentence\
    \ (rest sentence))]\n    [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) result)))]\n    )))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?O) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?U) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest ", "  (let loop ((sentence sentence)\n  \
    \           (result '()))\n    (cond\n      [(empty? sentence) result]\n     \
    \ [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else\n       (loop (rest sentence) (cons (first\
    \ sentence) (loop (rest sentence) result)))]\n      )))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons\
    \ (first sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ (loop (rest sentence) result)))])))\n", "  (cond\n    [(empty? sentence) \"\"\
    ]\n    [(number? (length sentence)) \"\"]\n    [else (append (words_in_word (first\
    \ sentence))\n                  (words_in_sentence (rest sentence)))]))\n", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (cond\n    \
    \  [(empty? sentence) result]\n      [(char? (car sentence))\n       (loop (cdr\
    \ sentence) (cons (car sentence) result))]\n      [else\n       (loop (cdr sentence)\
    \ (cons (car sentence) (loop (cdr sentence) result)))]\n      )))\n", "  (define\
    \ (helper sentence result)\n    (cond [(empty? sentence) result]\n          [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [else (helper (rest sentence) (cons (first sentence) (helper result\
    \ (cons (first sentence) result))))]))\n  (helper sentence '()))\n", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else\
    \ (append (words_in_sentence (rest sentence)) (list (first sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (append (words_in_sentence (rest sentence)) (list (first sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_word (first sentence))\n                  (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_word (first sentence))\n                  (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((empty? sentence) result)\n          ((char-alphabetic? (first\
    \ sentence))\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char-alphabetic? (first sentence))\n      \
    \     (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))))\n  result)\n", "  (let loop ((sentence sentence)\n   \
    \          (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) #\\space) loop (rest sentence) (cons (first sentence) result)]\n\
    \      [else (loop (rest sentence) (cons (first sentence) result))])))\n", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (if (empty?\
    \ sentence)\n        result\n        (loop (rest sentence)\n              (cons\
    \ (first sentence)\n                    (loop (rest sentence)\n              \
    \            result))))))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ (cons (first sentence) result))))])))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (substring sentence\
    \ 0 (floor (length sentence)))) (words_in_sentence (substring sentence (floor\
    \ (length sentence)) (length sentence))))]))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?O) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?U) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?Y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest ", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((empty? sentence)\n           result)\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                   (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                   (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence)\n                   (cons (first\
    \ sentence) result))))))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal?\
    \ (first sentence) \"\") (words_in_sentence (rest sentence))]\n    [else (cons\
    \ (first sentence) (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((empty? sentence) result)\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                  (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                  result))\n\
    \          (else\n           (loop (rest sentence)\n                  (cons (first\
    \ sentence)\n                        result)))))\n  result)\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(equal?\
    \ (first sentence) '#\\Space) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(equal? (first sentence) '#\\Newline) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) '#\\Space) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ '#\\Newline) (helper (rest sentence) (cons (first sentence) result))]\n    \
    \  [(equal? (first sentence) '#\\Space) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(equal? (first sentence) '#\\Newline) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(equal? (first sentence) '#\\Space)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [(equal? (first\
    \ sentence) '#\\Newline) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(equal? (first sentence) '#\\Space) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) '#\\Newline) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ '#\\Space) (helper (rest sentence) (cons (first sentence) result))]\n      [(equal?\
    \ (first sentence) '#\\Newline) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(equal? (first sentence) '#\\Space) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(equal? (first sentence) '#\\Newline)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [(equal? (first\
    \ sentence) '#\\Space) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(equal? (first sentence) '#\\Newline) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(equal? (first sentence) '#\\Space) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(equal? (first sentence)\
    \ '#\\Newline) (helper (rest sentence) (cons (first sentence) result))]\n    \
    \  [(equal? (first sentence) '#\\Space) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(equal? (first sentence) '#", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime? (string-length\
    \ sentence)) (cons (first sentence) (words_in_sentence (rest sentence)))]\n  \
    \      [else (words_in_sentence (rest sentence))]))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char=? (first sentence) \" \")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence)\n                      result)))\n\
    \          ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n  \
    \        ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      result)))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) (cons (first sentence) result))))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char-alphabetic? (first sentence))\n        \
    \   (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          (else\n        \
    \   (loop (rest sentence)\n                 (cons (first sentence) result))))))\n",
  "  (cond [(empty? sentence) \"\"]\n        [(empty? (rest sentence)) \"\"]\n   \
    \     [(number? (length sentence)) \"\"]\n        [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?O) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?U) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?Y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest ", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) (cons (first sentence) result))))]))\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=racket,scheme |>\n<code>", "  (define (helper sentence\
    \ result)\n    (if (empty? sentence)\n        result\n        (helper (rest sentence)\n\
    \                (cons (first sentence)\n                      (helper (rest sentence)\n\
    \                              result))))))\n  (helper sentence '()))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (loop (rest sentence) (cons (first\
    \ sentence) (loop (rest sentence) result)))])))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ (loop (rest sentence) result)))])))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (first sentence) ?space) result)\n          ((char=? (first sentence) ?newline)\
    \ result)\n          ((char=? (first sentence) ?tab) result)\n          ((char=?\
    \ (first sentence) ?return) result)\n          ((char=? (first sentence) ?(#\\\
    a)) result)\n          ((char=? (first sentence) ?(#\\z)) result)\n          ((char=?\
    \ (first sentence) ?(#\\A)) result)\n          ((char=? (first sentence) ?(#\\\
    Z)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=?\
    \ (first sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\\
    8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=?\
    \ (first sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\\
    5)) result)\n          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=?\
    \ (first sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\\
    2)) result)\n          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=?\
    \ (first sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\\
    9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=?\
    \ (first sentence) ?(#\\7)) result)\n          ((char=? (first sentence) ?(#\\\
    6)) result)\n          ((char=? (first sentence) ?(#\\5)) result)\n          ((char=?\
    \ (first sentence) ?(#\\4)) result)\n          ((char=? (first sentence) ?(#\\\
    3)) result)\n          ((char=? (first sentence) ?(#\\2)) result)\n          ((char=?\
    \ (first sentence) ?(#\\1)) result)\n          ((char=? (first sentence) ?(#\\\
    0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=?\
    \ (first sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\\
    7)) result)", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence)\n           result)\n          ((char=? (first sentence)\
    \ \" \")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \".\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \",\")\n           (loop (rest sentence)\n                \
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"?\"\
    )\n           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"?\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \",\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \",\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \",\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \",\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \",\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first ", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) ?a) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?e) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?y) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?a) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?i) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (loop (cdr sentence) (cons (car sentence) result)))\n          ((", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((empty? sentence)\
    \ result)\n          ((char-alphabetic? (first sentence))\n           (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char-alphabetic? (first\
    \ sentence))\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence) (cons (first sentence) result))))))\n",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ result)))])))\n", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence)) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [else (helper (rest sentence)\
    \ (cons (first sentence) (helper sentence result)))]))\n  (helper sentence '()))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (rest sentence))\n                  (list\
    \ (first sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond\n      [(empty? sentence) result]\n      [(char? (car sentence))\
    \ (loop (cdr sentence) (cons (car sentence) result))]\n      [else (loop (cdr\
    \ sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence) (loop (rest\
    \ sentence) (cons (first sentence) result))))])))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ length (first sentence))))) (words_in_sentence\
    \ (substring sentence (floor (/ length (first sentence))) (floor (/ length (first\
    \ sentence))))))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((null? sentence) result)\n          ((char=? (car sentence)\
    \ ?space) result)\n          ((char=? (car sentence) ?newline) result)\n     \
    \     ((char=? (car sentence) ?tab) result)\n          ((char=? (car sentence)\
    \ ?return) result)\n          ((char=? (car sentence) ?(#\\space)) (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?(#\\newline)) (loop (cdr sentence) (cons (car sentence) result)))\n       \
    \   ((char=? (car sentence) ?(#\\tab)) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?(#\\return)) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?(#\\space))\
    \ (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) ?(#\\newline)) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?(#\\tab)) (loop (cdr sentence) (cons (car\
    \ sentence) result)))\n          ((char=? (car sentence) ?(#\\return)) (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?(#\\space)) (loop (cdr sentence) (cons (car sentence) result)))\n         \
    \ ((char=? (car sentence) ?(#\\newline)) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?(#\\tab)) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?(#\\return))\
    \ (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) ?(#\\space)) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?(#\\newline)) (loop (cdr sentence) (cons (car\
    \ sentence) result", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?O) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?U) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?Y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest ", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?z) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?Z) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?0) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?9) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?!) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?.) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?-) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?_) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?+) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?/) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?;) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?:) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?!) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?-) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?_) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?+) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?/) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?;) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first ", "  (cond\n    [(empty? sentence) \"\"]\n\
    \    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nYou're welcome. By the way, I added a solution that uses `filter` instead\
    \ of `map`.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/\
    \ c |>\n<| c |>\nYou're welcome. By the way, I added a solution that uses `filter`\
    \ instead of `map`.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (re", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence)\n                 (cons (first sentence)\n  \
    \                    (helper (rest sentence)\n                              result))))))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (if (empty? sentence)\n        result\n        (loop (rest\
    \ sentence)\n              (cons (first sentence)\n                    (loop (rest\
    \ sentence)\n                          result))))))\n", "  (define (helper sentence\
    \ result)\n    (cond [(empty? sentence) result]\n          [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [else (helper (rest sentence) (cons (first sentence) (helper result\
    \ (first sentence))))]))\n  (helper sentence '()))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (", "  (cond\n    [(empty? sentence) \"\"]\n  \
    \  [(number? (string-length sentence)) \"\"]\n    [else (append (words_in_word\
    \ (first sentence))\n                  (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?p) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?d) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?r) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (re", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (if (empty? sentence)\n        result\n     \
    \   (loop (rest sentence)\n              (cons (first sentence)\n            \
    \        (loop (rest sentence)\n                          result))))))\n", " \
    \ (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence) (cons (first sentence) result))))\n  (helper\
    \ sentence '()))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\
    \ (list (first sentence)))]))\n", "  (cond [(empty? sentence) \"\"]\n        [(number?\
    \ (length sentence)) sentence]\n        [else (append (words_in_sentence (substring\
    \ sentence 0 (floor (/ length (first sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ length (first sentence))) (length (first sentence))))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you so much! This was really\
    \ helpful!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm new to racket and I didn't\
    \ know that there are so many ways to do things. I appreciate your help.\n<|/\
    \ c |>\n<| c |>\nNo problem! I hope you enjoy racket and find it useful!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? sentence) \"\"]\n  \
    \  [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n)\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else\n       (loop\
    \ (rest sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?u) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?t) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?h) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first ", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence))\n                   (map #(cons (first sentence) %)\n     \
    \                    (map #(words_in_sentence %)\n                           \
    \    (rest sentence))))]))\n", "  (let loop ((sentence sentence)\n           \
    \  (result '()))\n    (cond ((null? sentence)\n           (reverse result))\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n \
    \                (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          (else\n           (loop (cdr sentence)\n              \
    \   (cons (car sentence) result))))))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?O) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?U) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?Y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest ", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((null? sentence)\n           result)\n          ((char=? (first\
    \ sentence) \" \")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \",\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"?\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"?\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)", "  (define (helper sentence\
    \ result)\n    (cond [(empty? sentence) result]\n          [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n          [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?r) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?m) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?h) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?w) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest ", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first sentence)\
    \ \"\") \"\"]\n    [else (append (words_in_sentence (rest sentence)) (list (first\
    \ sentence)))]))\n", "  (cond [(empty? sentence) empty]\n        [(empty? (rest\
    \ sentence)) sentence]\n        [else (cons (first sentence)\n               \
    \     (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n     \
    \        (cons (first sentence) result))]\n      [else (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      (loop (rest sentence)\n\
    \                            result)))])))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?h) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (", "  (define (helper sentence result)\n    (cond [(empty? sentence)\
    \ result]\n          [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [else (helper (rest sentence) (cons (first\
    \ sentence) (helper result (first sentence))))]))\n  (helper sentence '()))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper (rest sentence) (cons (first sentence) result))))]))\n  (helper sentence\
    \ '()))\n", "  (cond [(empty? sentence) \"\"]\n        [(number? (length sentence))\
    \ \"\"]\n        [(prime? (length sentence)) sentence]\n        [else (cons (first\
    \ sentence) (words_in_sentence (rest sentence)))]))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [else (helper (rest sentence) (cons (first sentence) (helper (rest sentence)\
    \ result)))]))\n  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n     \
    \        (cons (first sentence) result))]\n      [else\n       (loop (rest sentence)\n\
    \             (cons (first sentence) (loop (rest sentence) result)))]\n    )))\n",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence)\n                (cons (first sentence)\n   \
    \                   (helper (rest sentence)\n                              result))))))\n\
    \  (helper sentence '()))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?o) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?u) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?y) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?a) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?e) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?i) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?y) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?i) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence) ",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_word (first sentence))\n                   (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) result)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any helper functions. I hope you find it useful.\n\
    <|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((empty? sentence) result)\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                   (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                   (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence)\n                   (cons (first\
    \ sentence) result))))))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (re",
  "  (cond [(empty? sentence) empty]\n        [(empty? (rest sentence)) sentence]\n\
    \        [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (cond [(empty? sentence) empty]\n        [(empty? (rest sentence)) sentence]\n\
    \        [else (cons (first sentence)\n                    (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) ?a) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?e) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?a) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?y) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (if (empty? sentence)\n        result\n     \
    \   (loop (rest sentence)\n              (cons (first sentence)\n            \
    \        (loop (rest sentence)\n                          result))))))\n", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (cond\n    \
    \  [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?s) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?f) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?i) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first ", "  (define (helper sentence result)\n\
    \    (if (empty? sentence)\n        result\n        (helper (rest sentence) (cons\
    \ (first sentence) result)))))\n  (helper sentence '()))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append\
    \ (words_in_sentence (rest sentence)) (list (first sentence)))]))\n", "  (define\
    \ (helper sentence result)\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) ?a) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?e) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?y) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?o) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?a) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?e) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?y) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?o) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ", "  (define (helper\
    \ sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=? (first\
    \ sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?U) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?Y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?!) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?.) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?-) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?_) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?+) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?/) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?:) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?;) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?-) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?_", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (cond ((null? sentence) result)\n          ((char-alphabetic?\
    \ (car sentence))\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char-alphabetic? (car sentence))\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char-numeric? (car sentence))\n\
    \           (loop (cdr sentence) (cons (car sentence) result)))\n          ((char-numeric?\
    \ (car sentence))\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          (else\n           (loop (cdr sentence) (cons (car sentence) result))))))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) (cons (first sentence) result))))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) ?a) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?e) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?a) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?y) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((", "  (cond\n    [(empty? sentence) \"\
    \"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence))\n                  (list (first sentence)))]))\n", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (helper (rest sentence) (cons (first sentence) (helper\
    \ result (first sentence))))]))\n  (helper sentence '()))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char? (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n\
    \      [else (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper result (first sentence))))]))\n  (helper sentence '()))\n", "  (cond\
    \ [(empty? sentence) \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime?\
    \ (length sentence)) (cons (first sentence) (words_in_sentence (rest sentence)))]\n\
    \        [else (words_in_sentence (rest sentence))]))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [else (helper (rest sentence) (cons (first sentence) (helper sentence result)))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond ((null? sentence)\n           result)\n          ((char=?\
    \ (first sentence) \" \")\n           (loop (rest sentence)\n                \
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \" \"\
    )\n           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result))))))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (string-length sentence)) sentence]\n    [else (append (words_in_word (first\
    \ sentence))\n                  (words_in_sentence (rest sentence)))]))\n", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char? (car sentence)) (helper (cdr sentence) (cons (car sentence) result))]\n\
    \      [else (helper (cdr sentence) (cons (car sentence) (helper result \"\")))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond ((null? sentence)\n           result)\n          ((char=?\
    \ (car sentence) \" \")\n           (loop (cdr sentence)\n                 (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence)\n                 (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n  \
    \               (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          (else\n           (loop (cdr sentence)\n              \
    \   (cons (car sentence) result))))))\n", "  (define (helper sentence result)\n\
    \    (if (empty? sentence)\n        result\n        (helper (rest sentence)\n\
    \                 (cons (first sentence)\n                      (helper (rest\
    \ sentence)\n                              result))))))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n   \
    \    (loop (rest sentence) (cons (first sentence) result))]\n      [else (loop\
    \ (rest sentence) (cons (first sentence) (cons (first sentence) (loop (rest sentence)\
    \ result))))])))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\n\
    \                  (list (first sentence)))]))\n", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(number? (length sentence)) \"\"]\n        [else (append (words_in_word\
    \ (first sentence))\n                     (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?a) (helper (rest ", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (re", "  (let loop ((sentence sentence)\n     \
    \        (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) ?space) result)\n          ((char=? (car sentence) ?newline)\
    \ result)\n          ((char=? (car sentence) ?tab) result)\n          ((char=?\
    \ (car sentence) ?return) result)\n          ((char=? (car sentence) ?(#\\newline))\
    \ result)\n          ((char=? (car sentence) ?(#\\tab)) result)\n          ((char=?\
    \ (car sentence) ?(#\\return)) result)\n          ((char=? (car sentence) ?(#\\\
    space)) result)\n          ((char=? (car sentence) ?(#\\newline)) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?(#\\tab))\
    \ (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) ?(#\\return)) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?(#\\space)) (loop (cdr sentence) (cons (car\
    \ sentence) result)))\n          ((char=? (car sentence) ?(#\\newline)) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?(#\\tab)) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?(#\\return)) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?(#\\space)) (loop (cdr sentence) (cons (car\
    \ sentence) result)))\n          ((char=? (car sentence) ?(#\\newline)) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?(#\\tab)) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?(#\\return)) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?(#\\space)) (loop (cdr sentence) (con", " \
    \ (define (helper sentence result)\n    (cond [(empty? sentence) result]\n   \
    \       [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [else (helper (rest sentence) (cons (first sentence) (helper\
    \ result (first sentence))))]))\n  (helper sentence '()))\n", "  (define (helper\
    \ sentence result)\n    (cond [(empty? sentence) result]\n          [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [else (helper (rest sentence) (cons (first sentence) (helper result (first\
    \ sentence))))]))\n  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ (loop (rest sentence) result)))]\n      )))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?O) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?U) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?b) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?f) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?h) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (re", "  (define (helper sentence result)\n   \
    \ (if (empty? sentence)\n        result\n        (helper (rest sentence) (cons\
    \ (first sentence) result))))\n  (helper sentence '()))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((empty? sentence) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?return) result)\n          ((char=? (first\
    \ sentence) ?(space|newline|tab|return)) result)\n          ((char=? (first sentence)\
    \ ?(letter|digit)) (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) ?(letter|digit|(space|newline|tab|return)))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          (else (loop\
    \ (rest sentence) (cons (first sentence) result))))))\n", "  (cond [(empty? sentence)\
    \ empty]\n        [else (append (map car (split-string (first sentence) \" \"\
    ))\n                      (words_in_sentence (rest sentence)))]))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((empty? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(newline)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(tab)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(return)) (loop (rest sentence) (cons (first sentence) result)))\n        \
    \  ((char=? (first sentence) ?(letter)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(digit)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(other)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(other)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(other)) (loop (rest\
    \ sentence) (cons (", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?O) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?U) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?Y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest ", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(#\\a)) result)\n          ((char=? (first sentence) ?(#\\\
    z)) result)\n          ((char=? (first sentence) ?(#\\A)) result)\n          ((char=?\
    \ (first sentence) ?(#\\Z)) result)\n          ((char=? (first sentence) ?(#\\\
    0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=?\
    \ (first sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\\
    7)) result)\n          ((char=? (first sentence) ?(#\\6)) result)\n          ((char=?\
    \ (first sentence) ?(#\\5)) result)\n          ((char=? (first sentence) ?(#\\\
    4)) result)\n          ((char=? (first sentence) ?(#\\3)) result)\n          ((char=?\
    \ (first sentence) ?(#\\2)) result)\n          ((char=? (first sentence) ?(#\\\
    1)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=?\
    \ (first sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\\
    8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=?\
    \ (first sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\\
    5)) result)\n          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=?\
    \ (first sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\\
    2)) result)\n          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=?\
    \ (first sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\\
    9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=?\
    \ (first sentence) ?(#\\7)) result)\n          ((", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence)))]))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(equal? (first sentence) \"\") (words_in_sentence (rest sentence))]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char? (car sentence)) (loop (cdr sentence)\
    \ (cons (car sentence) result))]\n      [else (loop (cdr sentence) (cons (car\
    \ sentence) (loop (cdr sentence) result)))])))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (if (empty? sentence)\n        result\n     \
    \   (loop (rest sentence)\n              (cons (first sentence)\n            \
    \        (loop (rest sentence)\n                          result))))))\n", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (if (empty?\
    \ sentence)\n        result\n        (loop (rest sentence)\n              (cons\
    \ (first sentence)\n                    (loop (rest sentence)\n              \
    \            result))))))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char? (car sentence))\n           (loop (cdr\
    \ sentence)\n                 (cons (car sentence) result)))\n          ((char?\
    \ (car sentence))\n           (loop (cdr sentence)\n                 (cons (car\
    \ sentence) result)))\n          (else\n           (loop (cdr sentence)\n    \
    \             (cons (car sentence) result))))))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (", "  (define (helper sentence result)\n    (cond\
    \ [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [else (helper (rest\
    \ sentence) (cons (first sentence) (helper result (first sentence))))]))\n  (helper\
    \ sentence '()))\n", "  (define (helper sentence result)\n    (if (empty? sentence)\n\
    \        result\n        (helper (rest sentence) (cons (first sentence) result))))\n\
    \  (helper sentence '()))\n", "  (cond [(empty? sentence) empty]\n        [(empty?\
    \ (rest sentence)) sentence]\n        [(prime? (length sentence)) sentence]\n\
    \        [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond ((null? sentence) result)\n     \
    \     ((char=? (car sentence) \" \") (helper (cdr sentence) result))\n       \
    \   ((char=? (car sentence) \".\") (helper (cdr sentence) result))\n         \
    \ ((char=? (car sentence) \"/\") (helper (cdr sentence) result))\n          ((char=?\
    \ (car sentence) \":\") (helper (cdr sentence) result))\n          ((char=? (car\
    \ sentence) \"?\") (helper (cdr sentence) result))\n          ((char=? (car sentence)\
    \ \"!\") (helper (cdr sentence) result))\n          ((char=? (car sentence) \"\
    (\") (helper (cdr sentence) result))\n          ((char=? (car sentence) \")\"\
    ) (helper (cdr sentence) result))\n          ((char=? (car sentence) \"[\") (helper\
    \ (cdr sentence) result))\n          ((char=? (car sentence) \"]\") (helper (cdr\
    \ sentence) result))\n          ((char=? (car sentence) \"{\") (helper (cdr sentence)\
    \ result))\n          ((char=? (car sentence) \"}\") (helper (cdr sentence) result))\n\
    \          ((char=? (car sentence) \"|\") (helper (cdr sentence) result))\n  \
    \        ((char=? (car sentence) \",\") (helper (cdr sentence) result))\n    \
    \      ((char=? (car sentence) \".\") (helper (cdr sentence) result))\n      \
    \    ((char=? (car sentence) \";\") (helper (cdr sentence) result))\n        \
    \  ((char=? (car sentence) \":\") (helper (cdr sentence) result))\n          ((char=?\
    \ (car sentence) \"!\") (helper (cdr sentence) result))\n          ((char=? (car\
    \ sentence) \"?\") (helper (cdr sentence) result))\n          ((char=? (car sentence)\
    \ \".\") (helper (cdr sentence) result))\n          ((char=? (car sentence) \"\
    ;\") (helper (cdr sentence) result))\n          ((char=? (car sentence) \":\"\
    ) (helper (cdr sentence) result))\n          ((char=? (car sentence) \".\") (helper\
    \ (cdr sentence) result))\n          ((char=? (car sentence) \";\") (helper (cdr\
    \ sentence) ", "  (define (helper sentence result)\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?period) result)\n          ((char=?\
    \ (first sentence) ?apostrophe) result)\n          ((char=? (first sentence) ?exclamation)\
    \ result)\n          ((char=? (first sentence) ?colon) result)\n          ((char=?\
    \ (first sentence) ?semicolon) result)\n          ((char=? (first sentence) ?comma)\
    \ result)\n          ((char=? (first sentence) ?apostrophe) result)\n        \
    \  ((char=? (first sentence) ?quotation) result)\n          ((char=? (first sentence)\
    \ ?dollar) result)\n          ((char=? (first sentence) ?percent) result)\n  \
    \        ((char=? (first sentence) ?ampersand) result)\n          ((char=? (first\
    \ sentence) ?asterisk) result)\n          ((char=? (first sentence) ?plus) result)\n\
    \          ((char=? (first sentence) ?hyphen) result)\n          ((char=? (first\
    \ sentence) ?asterisk) result)\n          ((char=? (first sentence) ?equal) result)\n\
    \          ((char=? (first sentence) ?dash) result)\n          ((char=? (first\
    \ sentence) ?underscore) result)\n          ((char=? (first sentence) ?colon)\
    \ result)\n          ((char=? (first sentence) ?semicolon) result)\n         \
    \ ((char=? (first sentence) ?comma) result)\n          ((char=? (first sentence)\
    \ ?apostrophe) result)\n          ((char=? (first sentence) ?quotation) result)\n\
    \          ((char=? (first sentence) ?dollar) result)\n          ((char=? (first\
    \ sentence) ?percent) result)\n          ((char=? (first sentence) ?ampersand)\
    \ result)\n          ((char=? (first sentence) ?asterisk) result)\n          ((char=?\
    \ (first sentence) ?plus) result)\n          ((char=? (first sentence) ?hyphen)\
    \ result)\n          ((char=? (first sentence) ?asterisk) result)\n          ((char=?\
    \ (first sentence) ?equal) result)\n          ((char=? (first sentence) ?dash)\
    \ result)\n          ((char=? (first sentence) ?underscore) result)", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence)\n         \
    \         (loop (rest sentence)\n                        (cons (first sentence)\n\
    \                              result))))])))\n", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime? (length (rest\
    \ sentence)))\n         (cons (first sentence) (words_in_sentence (rest sentence)))]\n\
    \        [else (words_in_sentence (rest sentence))]))\n", "  (define (helper sentence\
    \ result)\n    (cond [(empty? sentence) result]\n          [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n          [else\
    \ (helper (rest sentence) (cons (first sentence) (helper result (first sentence))))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) (list result)]\n      [(char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?z) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?Z) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?0) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?9) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?1) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?8) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?2) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?7) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?3) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?6) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?4) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?5) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?4) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?6) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?7) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?8) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?9) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper (rest sentence) result)))]))\n  (helper sentence '()))\n", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (helper (rest sentence) (cons (first sentence) (helper\
    \ (rest sentence) (cons (first sentence) result))))]))\n  (helper sentence '()))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?O) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?U) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest ", "  (define (helper sentence\
    \ result)\n    (if (empty? sentence)\n        result\n        (helper (rest sentence)\n\
    \                 (cons (first sentence)\n                      (helper (rest\
    \ sentence)\n                              result))))))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (first sentence) ?space) result)\n   \
    \       ((char=? (first sentence) ?newline) result)\n          ((char=? (first\
    \ sentence) ?tab) result)\n          ((char=? (first sentence) ?return) result)\n\
    \          ((char=? (first sentence) ?(space)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(newline)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(tab)) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?(return)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(letter)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(digit)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(other)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(other)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(other)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (", "  (define (helper sentence result)\n    (cond\
    \ [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [else (helper (rest\
    \ sentence) (cons (first sentence) (helper result (cons (first sentence) result))))]))\n\
    \  (helper sentence '()))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty?\
    \ (rest sentence)) sentence]\n    [else (cons (first sentence)\n             \
    \   (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (first sentence) \" \") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"\\n\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"\\r\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"\\t\") (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"!\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"?\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"-\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"(\") (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \")\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \".\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \",\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"-\") (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"_\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"*\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"/\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"=\") (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \";\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"#\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"@\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"[\")\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"]\")\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n)\n", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n  \
    \  [else (append (words_in_sentence (substring sentence 0 (floor (/ length (first\
    \ sentence))))) (words_in_sentence (substring sentence (floor (/ length (first\
    \ sentence)) (length sentence))))]))\n)\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nThanks for your answer! I didn't know about `floor` function. I was trying\
    \ to solve this problem using recursion and I didn't know about `floor` function.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I added a solution using recursion\
    \ as well, just in case you wanted to see how it could be done with recursion.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (define (helper sentence result)\n   \
    \ (if (empty? sentence)\n        result\n        (helper (rest sentence)\n   \
    \              (cons (first sentence)\n                      (helper (rest sentence)\n\
    \                              result))))))\n  (helper sentence '()))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) (list result)]\n      [(char-alphabetic? (first sentence))\n\
    \       (loop (rest sentence)\n             (cons (first sentence) result))]\n\
    \      [else\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ (loop (rest sentence) result)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer! I understand your solution, but I cannot understand why you\
    \ use \"(loop (rest sentence)\" in the second condition of the \"if\" statement.\
    \ Could you please explain it to me? Thanks!\n<|/ c |>\n<| c |>\nThe `loop` function\
    \ takes two arguments: the first one is the current element in the list and the\
    \ second one is the result so far. `(rest sentence)` returns the rest of the list\
    \ without the first element. `(rest '(a b c))` returns `(b c)`.\n<|/ c |>\n<|\
    \ c |>\nThanks for your explanation! I understand it now!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence))\
    \ sentence]\n    [else (cons (first sentence)\n                (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((null? sentence) result)\n          ((char-alphabetic? (car\
    \ sentence))\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          (else (loop (cdr sentence) (cons (car sentence) result))))))\n", " \
    \ (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (substring sentence 0 (floor (/ 1 (length\
    \ sentence))))) (words_in_sentence (substring sentence (floor (/ 1 (length sentence))\
    \ (length sentence))))]))\n)\n", "  (let loop ((sentence sentence)\n         \
    \    (result '()))\n    (cond ((null? sentence) result)\n          ((char=? (car\
    \ sentence) ?a) (loop (cdr sentence) (cons (car sentence) result)))\n        \
    \  ((char=? (car sentence) ?e) (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?A) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?E) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?I) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?O) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?U) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?1) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?2) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?3) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?4) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?5) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?6) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?7) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?8) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((", "  (define (helper\
    \ sentence result)\n    (cond [(empty? sentence) result]\n          [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [else (helper (rest sentence) (cons (first sentence) (helper result (cons\
    \ (first sentence) result))))]))\n  (helper sentence '()))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append\
    \ (words_in_sentence (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence\
    \ (substring sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n\
    )\n", "  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char-alphabetic? (first sentence)) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (helper (rest sentence) (cons\
    \ (first sentence) (helper result (first sentence))))]))\n  (helper sentence '()))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?h) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (re", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) ?a) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?e) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?y) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?a) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?i) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?u) (loop (cdr sentence) (cons (car sentence) result)))\n          ((", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(equal? (first sentence) \"\") \"\"]\n   \
    \ [else (append (words_in_sentence (rest sentence)) (list (first sentence))) (words_in_sentence\
    \ (rest sentence))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
