name: HumanEval_147_get_max_triples
language: rkt
prompt: "#lang racket\n\n;; You are given a positive integer n. You have to create\
  \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of\
  \ a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
  \ :\n;; >>> (get_max_triples 5)\n;; 1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n\
  ;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
  \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
  \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\
    \ 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\
    \ 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\
    \ 97 98 99 100)) (i 1))\n    (cond ((= i n) (length a))\n          ((< i n) (loop\
    \ (append a (list i) (list i i i)) (+ i 1)))\n          (else (loop a (+ i 1))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k))\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n   \
    \   [(< j k) (if (= (* j j k) (* i i k)) (+ 1 (helper (+ j 1) i k) (helper (+\
    \ i 1) j k) (helper (+ k 1) j i)))]\n      [(< k i) (if (= (* k k k) (* i i i))\
    \ (+ 1 (helper (+ k 1) i k) (helper (+ i 1) k k) (helper (+ k 1) k i)))]\n   \
    \   [(= i j) (if (= (* i i k) (* j j k)) (+ 1 (helper (+ i 1) j k) (helper (+\
    \ j 1) i k) (helper (+ k 1) i j)))]\n      [(= j k) (if (= (* j j k) (* i i k))\
    \ (+ 1 (helper (+ j 1) i k) (helper (+ i 1) j k) (helper (+ k 1) j i)))]\n   \
    \   [(= k i) (if (= (* k k k) (* i i i)) (+ 1 (helper (+ k 1) i k) (helper (+\
    \ i 1) k k) (helper (+ k 1) k i)))]\n      [else 0]))\n  (if (= n 0)\n      0\n\
    \      (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n",
  "  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n      \
    \    ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k\
    \ k k))))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i\
    \ k) 0)\n          ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j\
    \ k)) (* k (* k k k))))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n \
    \         ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i (* i i j))\
    \ (* j (* j j k)) (* k (* k k k))))))\n  (define (helper i j k)\n    (cond ((=\
    \ i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (*\
    \ i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n       \
    \   (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n\
    \          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((=\
    \ j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n    \
    \      ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< j k)\n            (if (= (+ (* i i)\
    \ (* j j) (* k k)) 3)\n                (helper i (+ j 1) k)\n                (helper\
    \ i (+ j 1) (+ k 1))))\n        (if (< k j)\n            (if (= (+ (* i i) (*\
    \ k k) (* j j)) 3)\n                (helper i (+ k 1) j)\n                (helper\
    \ i (+ k 1) (+ j 1))))\n        (if (= (+ (* i i) (* j j) (* k k)) 3)\n      \
    \      (helper i (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(= i j) (+ 1 (helper (+\
    \ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let ([a (make-array n initial-contents '())])\n    (define (helper\
    \ i j k)\n      (cond ((= i j) (+ 1 (* i i k)))\n            ((= j k) (+ 1 (*\
    \ j j k)))\n            (else (+ 1 (* i j k))))\n      (set! a\n            (map\
    \ (lambda (i) (helper i i k))\n                   (range (+ i 1)))))\n    (length\
    \ (filter (lambda (i) (= (+ i 1) (* i i 3))) a))))\n", "  (define (helper i j\
    \ k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n        \
    \        (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper\
    \ i k (+ j k)))\n                    (+ 1 (helper i (+ j k) k))\n            \
    \        (+ 1 (helper i (+ k j) k))\n                    (+ 1 (helper i (+ k j)\
    \ j))\n                    (+ 1 (helper i (+ k k) j))\n                    (+\
    \ 1 (helper i (+ k k) k))\n                    (+ 1 (helper i (+ j k) j))\n  \
    \                  (+ 1 (helper i (+ j k) k))\n                    (+ 1 (helper\
    \ i (+ k j) j))\n                    (+ 1 (helper i (+ k j) k))\n            \
    \        (+ 1 (helper i (+ k k) j))\n                    (+ 1 (helper i (+ k k)\
    \ k))\n                    (+ 1 (helper j k (+ i k)))\n                    (+\
    \ 1 (helper j k (+ i j)))\n                    (+ 1 (helper j k (+ i k)))\n  \
    \                  (+ 1 (helper j k (+ j i)))\n                    (+ 1 (helper\
    \ j k (+ j i)))\n                    (+ 1 (helper j k (+ j k)))\n            \
    \        (+ 1 (helper j k (+ k i)))\n                    (+ 1 (helper j k (+ k\
    \ i)))\n                    (+ 1 (helper j k (+ k j)))\n                    (+\
    \ 1 (helper j k (+ k j)))\n                    (+ 1 (helper k i (+ i j)))\n  \
    \                  (+ 1 (helper k i (+ i j)))\n                    (+ 1 (helper\
    \ k i (+ i k)))\n                    (+ 1 (helper k i (+ j i)))\n            \
    \        (+ 1 (helper k i (+ j i)))\n                    (+ 1 (helper k i (+ j\
    \ k)))\n                    (+ 1 (helper k i (+ k i)))\n                    (+\
    \ 1 (helper k i (+ k j)))\n                    (+ 1 (helper k i (+ k j)))\n  \
    \                  (+ 1 (helper k j (+ i i)))\n                    (+ 1 (helper\
    \ k j (+ i i)))\n                    (+ 1 (helper k j (+ i k)))\n            \
    \        (+ 1 (helper k j (+ j i)))\n                    (+ 1 (helper k j (+ j\
    \ i)))\n                    (+ 1 (helper k j (+ j k)))\n                    (+\
    \ 1 (helper k j (+ k i)))\n                    (+ 1 (helper k j (+ k i)))\n  \
    \                  (+ 1 (helper k j (+ k j)))\n                    (+ 1 (", " \
    \ (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n \
    \       (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", " \
    \ (let loop ((a #(list 1 3 7 13 21 ))\n             (i 1))\n    (if (< i n)\n\
    \        (loop (append a i) (i + 1))\n        (loop a (+ i 1)))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(=\
    \ i j) (if (= (+ i j k) 3) 1 0)]\n      [(= i k) (if (= (+ i j k) 3) 1 0)]\n \
    \     [else (helper i (+ j 1) k)]\n    )\n  )\n  (helper 1 2 n)\n)\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(<\
    \ j k) (helper (+ j 1) i k)]\n      [(< k n) (helper (+ k 1) i j)]\n      [(=\
    \ i j) (helper (+ i 1) k k)]\n      [(= j k) (helper (+ j 1) i k)]\n      [(=\
    \ k n) (helper (+ k 1) i j)]\n      [(= i k) (helper (+ i 1) j k)]\n      [(=\
    \ j i) (helper (+ j 1) k k)]\n      [(= k j) (helper (+ k 1) i k)]\n      [(=\
    \ i j) (helper (+ i 1) k k)]\n      [(= j k) (helper (+ j 1) i k)]\n      [(=\
    \ k n) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1)\
    \ j k)]\n      [(< j k) (helper (+ i 1) k (+ j 1))]\n      [(= i j) (helper (+\
    \ i 1) k (+ j 1))]\n      [else (+ i (+ j (+ k 1)))]))\n  (helper 1 n n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i k) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [(< k j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [else 0]))\n  (if (= n 0)\n      0\n\
    \      (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< k j)\n            (if (= (+ (* i i)\
    \ (* j j)) (* k k))\n                (+ 1 (helper (+ i 1) (+ j 1) k))\n      \
    \          (+ 1 (helper (+ i 1) j k))\n                (+ 1 (helper i (+ j 1)\
    \ k))\n            )\n            (helper (+ i 1) (+ j 1) k)\n        )\n    \
    \    (helper (+ i 1) j k)\n    )\n  )\n  (helper 1 2 n)\n)\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1\
    \ 2 3))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (cons a i))\n        (if (= (+ a i) 3)\n            (+ 1 (loop (+ i\
    \ 1) a))\n            (loop (+ i 1) a))))))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n   \
    \   [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+\
    \ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(<\
    \ i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1)\
    \ j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i\
    \ j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j\
    \ k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j)\
    \ (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n\
    \      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(<\
    \ i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+\
    \ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k)\
    \ (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1)\
    \ (+ j 1) k))]\n      ", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n  \
    \                (if (= (+ i k) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k\
    \ (+ j k)))\n                  (if (= (+ k j) i) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k i) j) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k j) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) ", "  (let loop ((a #(list\
    \ 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n        (loop (append a\
    \ (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (let loop ((a #(list\
    \ 1 2 3 4 5))\n             (i 0))\n    (if (< i n)\n        (loop (append a (list\
    \ i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (define (helper a i j k)\n\
    \    (cond\n      [(= i j) (+ a 1)]\n      [(= i k) (+ a 1)]\n      [(= j k) (+\
    \ a 1)]\n      [else (helper (+ a 1) i (+ j 1) k)]\n      ))\n  (helper 0 1 2\
    \ n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n    \
    \  [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n      [else (helper (+ i 1) (+\
    \ j 1) (+ k 1))]))\n  (helper 1 2 3))\n", "  (define (helper a i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i j) i k) \n               \
    \                           (helper (+ i j) j k) \n                          \
    \                (helper (+ i j) i k)))]\n      [(= i j) (+ 1 (helper (+ i j)\
    \ i k) (helper (+ i j) j k))]\n      [else (+ 1 (helper (+ i j) i k) (helper (+\
    \ i j) j k))]))\n  (helper '() 1 n n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ j 1) i k)] \n\
    \      [(< k i) (helper (+ k 1) j k)]\n      [else (+ 1 (helper (+ i 1) (+ j 1)\
    \ (+ k 1)))]))\n  (helper 1 1 n))\n", "  (let loop ((i 1) (a #(list 1)))\n   \
    \ (if (< i n)\n        (loop (+ i 1) (cons a i))\n        (+ 1 (loop (+ i 1) (cons\
    \ a (+ i 1)))))))\n", "  (let loop ((a #(list 1 3 7 13 21 ))\n             (i\
    \ 1))\n    (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop\
    \ a (+ i 1)))))\n", "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n\
    \    (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop a\
    \ (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k)\
    \ (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k n) (if (= (+ i j) (+ j k)) (+ 1\
    \ (helper i (+ j 1) k)) 0)]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (if (= (+\
    \ i j k) (* 3 i))\n                (helper i (+ j 1) k)\n                (helper\
    \ i (+ j 1) (+ k 1))))\n        (if (< k n)\n            (if (= (+ i j k) (* 3\
    \ j))\n                (helper i (+ j 1) k)\n                (helper i (+ j 1)\
    \ (+ k 1))))\n        (if (< k n)\n            (if (= (+ i j k) (* 3 k))\n   \
    \             (helper i (+ j 1) k)\n                (helper i (+ j 1) (+ k 1))))))\n\
    \  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n              \
    \    (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(= i j) (+ 1 (helper (+ i 1) j\
    \ k))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n   \
    \   [(< k n) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ i (+ j (+ k 1)))\
    \ (+ j (+ k 1))]))\n  (helper 1 1 1))\n", "  (let loop ((a (ref (list n)))\n \
    \            (i 1))\n    (if (< i n)\n        (loop (cdr a) (+ i 1))\n       \
    \ (+ 1 (loop (cdr a) (+ i 1))))))\n", "  (let ((a (rev (in-range 1 (- n 1)))))\n\
    \    (cond\n      [(< n 0) 0]\n      [(< a 0) 0]\n      [(= (mod a (- 3 n)) 0)\
    \ (+ 1 (get_max_triples (- n 1)))]\n      [else (+ 1 (get_max_triples (- n 1)))])))\n",
  "  (define (helper i j k)\n    (if (< i j)\n        (if (< k i)\n            (if\
    \ (< k j)\n                (if (= (+ (* i i) (* j j)) (* k k))\n             \
    \       (+ 1 (helper i k (+ j k)))\n                    (+ 1 (helper k (+ j i))))\n\
    \                (+ 1 (helper i (+ j k) k)))\n            (+ 1 (helper i (+ j\
    \ k) j)))\n        (+ 1 (helper i (+ j k) k)))\n    (+ 1 (helper i (+ j k) k)))\n\
    \  (helper 1 n 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n   \
    \ (if (< i j)\n        (if (< k i)\n            (if (< k j)\n                (if\
    \ (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper (+ i 1) (+\
    \ j 1) k))\n                    (+ 1 (helper (+ i 1) (+ j k) k))\n           \
    \         (+ 1 (helper (+ i k) (+ j 1) k))\n                    (+ 1 (helper (+\
    \ i k) (+ j k) k))\n                )\n            )\n        )\n    )\n  )\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (helper 1 2 n))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k)\
    \ (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i\
    \ j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i\
    \ j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i\
    \ j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i\
    \ j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (if (= (*\
    \ i i j) (* 3 k))\n                (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i\
    \ k) (helper (+ k 1) i j))\n                0))\n        0))\n  (helper 1 1 n))\n",
  "  (define (helper i j k)\n    (if (< i j)\n        (if (< k i)\n            (if\
    \ (< k j)\n                (if (= (+ (* i i) (* j j)) (* k k))\n             \
    \       (+ 1 (helper i k (+ j k)))\n                    (+ 1 (helper k (+ j i))))\n\
    \                (+ 1 (helper i (+ j k) k)))\n            (+ 1 (helper i (+ j\
    \ k) j))))\n    (if (= i j)\n        (+ 1 (helper i j k)))\n    (if (= i k)\n\
    \        (+ 1 (helper i j k)))\n    (if (= j k)\n        (+ 1 (helper i j k)))\n\
    \    (if (= i j)\n        (+ 1 (helper i j k)))\n    (if (= i k)\n        (+ 1\
    \ (helper i j k)))\n    (if (= j k)\n        (+ 1 (helper i j k)))\n    (if (=\
    \ i j)\n        (+ 1 (helper i j k)))\n    (if (= i k)\n        (+ 1 (helper i\
    \ j k)))\n    (if (= j k)\n        (+ 1 (helper i j k)))\n    (if (= i j)\n  \
    \      (+ 1 (helper i j k)))\n    (if (= i k)\n        (+ 1 (helper i j k)))\n\
    \    (if (= j k)\n        (+ 1 (helper i j k)))\n    (if (= i j)\n        (+ 1\
    \ (helper i j k)))\n    (if (= i k)\n        (+ 1 (helper i j k)))\n    (if (=\
    \ j k)\n        (+ 1 (helper i j k)))\n    (if (= i j)\n        (+ 1 (helper i\
    \ j k)))\n    (if (= i k)\n        (+ 1 (helper i j k)))\n    (if (= j k)\n  \
    \      (+ 1 (helper i j k)))\n    (if (= i j)\n        (+ 1 (helper i j k)))\n\
    \    (if (= i k)\n        (+ 1 (helper i j k)))\n    (if (= j k)\n        (+ 1\
    \ (helper i j k)))\n    (if (= i j)\n        (+ 1 (helper i j k)))\n    (if (=\
    \ i k)\n        (+ 1 (helper i j k)))\n    (if (= j k)\n        (+ 1 (helper i\
    \ j k)))\n    (if (= i j)\n        (+ 1 (helper i j k)))\n    (if (= i k)\n  \
    \      (+ 1 (helper i j k)))\n    (if (= j k)\n        (+ 1 (helper i j k)))\n\
    \    (if (= i j)\n        (+ 1 (helper i j k)))\n    (", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k)\
    \ (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n\
    \      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [else (if (= (+ i j) (+ j\
    \ k)) (+ i j) (+ j k))]\n      ))\n  (define (helper i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ j k) k) (+\
    \ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (=\
    \ (+ j k) k) (+ j k) 0)]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n\
    \      ))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) 0)]\n      [(< j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j)\
    \ (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n\
    \      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n      ))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j\
    \ k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n\
    \      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [else (if (= (+ i j) (+ j\
    \ k)) (+ i j) (+ j k))]\n      ))\n  (define (helper i j k)\n", "  (let loop ((i\
    \ 1) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a i))\n    \
    \    (+ 1 (loop (+ i 1) (cons a (+ i 1))))))))\n", "  (define (helper a i j k)\n\
    \    (cond\n      [(< i j) (+ 0 (helper (+ a i) j k))]\n      [(< j k) (+ 0 (helper\
    \ (+ a i) j k))]\n      [(< k i) (+ 0 (helper (+ a i) j k))]\n      [else (+ 0\
    \ (helper (+ a i) j k))]\n    )\n  )\n  (helper 0 1 2 n)\n)\n", "  (define (helper\
    \ a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n    \
    \  [else (helper (+ a i) i (+ j 1) (+ k 1))]))\n  (helper 0 1 2 n))\n", "  (let\
    \ ((a (ref n)))\n    (if (= n 0)\n        0\n        (let ((i (ref 0)))\n    \
    \      (if (= i n)\n              0\n              (let ((j (ref 0)))\n      \
    \          (if (= j n)\n                    0\n                    (let ((k (ref\
    \ 0)))\n                      (if (= k n)\n                          0\n     \
    \                     (let ((sum (+ (* i i) (* j j) (* k k))))\n             \
    \               (if (= (mod sum 3) 0)\n                                (set! i\
    \ (+ i 1))\n                                (set! j (+ j 1))\n               \
    \                 (set! k (+ k 1))\n                                (set! a (+\
    \ a (list i j k))))))))))))))\n", "  (define (helper i j k)\n    (cond\n     \
    \ [(= i j) 0]\n      [(= i k) 1]\n      [(= j k) 0]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) k) (helper (+ i 1) j k) (helper i (+ j 1) k))]\n    )\n  )\n\
    \  (helper 1 1 n)\n)\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else 0]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< i k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else 0]))\n  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(<\
    \ j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+\
    \ i j) (+ i j))]\n      [else 0]))\n  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else 0]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else 0]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+\
    \ i j) ", "  (let loop ((i 1) (a #() (+ i 1)))\n    (if (< i n)\n        a\n \
    \       (loop (+ i 1) (cons a (* i i i i)) (+ a 1)))))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1\
    \ 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i\
    \ k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n\
    \      [(< j k) (if (= (* j j k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1)\
    \ i k) (helper (+ k 1) i j)))]\n      [(< k i) (if (= (* k k k) 3) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [else 0]))\n\
    \  (helper 1 1 n))\n", "  (define (helper a i j k)\n    (cond\n      [(< i j)\
    \ (+ 1 (helper (+ a i) i k (+ k 1)))]\n      [(< j k) (+ 1 (helper (+ a i) k (+\
    \ j 1)))]\n      [else (+ 1 (helper (+ a i) j (+ k 1)))]))\n  (helper '() 1 n\
    \ 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1)\
    \ j k)] \n      [(< j k) (helper (+ i 1) k (+ j 1))]\n      [(< k n) (helper (+\
    \ i 1) k (+ j 1))]\n      [else (+ 1 (helper (+ i 1) j (+ k 1)))]))\n  (helper\
    \ 1 2 3))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< j k)\n\
    \            (if (= (+ i j k) 3)\n                (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1)))\n                (+ 1 (helper (+ i 1) j (+ k 1))))\n   \
    \         (if (= (+ i j k) 3)\n                (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1)))\n                (+ 1 (helper (+ i 1) j (+ k 1))))\n   \
    \     (if (< i k)\n            (if (< j k)\n                (if (= (+ i j k) 3)\n\
    \                    (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n \
    \                   (+ 1 (helper (+ i 1) j (+ k 1))))\n            (if (= (+ i\
    \ j k) 3)\n                (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n\
    \                (+ 1 (helper (+ i 1) j (+ k 1))))\n        (if (= (+ i j k) 3)\n\
    \            (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n         \
    \   (+ 1 (helper (+ i 1) j (+ k 1))))\n        (if (= (+ i j k) 3)\n         \
    \   (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n            (+ 1 (helper\
    \ (+ i 1) j (+ k 1))))\n        (if (= (+ i j k) 3)\n            (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n            (+ 1 (helper (+ i 1) j\
    \ (+ k 1))))\n        (if (= (+ i j k) 3)\n            (+ 1 (helper (+ i 1) j\
    \ k) (helper (+ i 1) k (+ j 1)))\n            (+ 1 (helper (+ i 1) j (+ k 1))))\n\
    \        (if (= (+ i j k) 3)\n            (+ 1 (helper (+ i 1) j k) (helper (+\
    \ i 1) k (+ j 1)))\n            (+ 1 (helper (+ i 1) j (+ k 1))))\n        (if\
    \ (= (+ i j k) 3)\n            (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j 1)))\n            (+ 1 (helper (+ i 1) j (+ k 1))))\n", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< j k)\n            (if (= (+ (* i i)\
    \ (* j j) (* k k)) 3)\n                (+ 1 (helper (+ i 1) j k) (helper (+ j\
    \ 1) i k) (helper (+ k 1) i j))\n                0))\n        0))\n  (helper 1\
    \ n n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper\
    \ i (+ j 1) k)) 0)]\n      [(< k n) (if (= (+ k n) k) (+ 1 (helper i (+ k 1) k))\
    \ 0)]\n      [else 0]))\n  (helper 1 2 n))\n", "  (let ([a (make-array n initial-contents\
    \ '())])\n    (do ([i 1 (+ i 1)])\n        ((< i n) (set! a (+ a (* i i i)))\n\
    \        (set! i (+ i 1)))))\n  ", "  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+\
    \ 1 (helper (+ i k) k (+ j k))))]\n      [(< i k) (if (= (+ i j) k)\n        \
    \          (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k)\
    \ k (+ j k))))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (let ([a (make-array\
    \ n #:initial-contents '())])\n    (define (helper i j k)\n      (cond\n     \
    \   ((< i j) (+ 1 (helper (+ i 1) j k)))\n        ((< j k) (+ 1 (helper (+ i 1)\
    \ (+ j 1) k)))\n        ((< i k) (+ 1 (helper (+ i 1) (+ j 1) k)))\n        (else\
    \ (+ 1 (helper (+ i 1) (+ j 1) k))))\n    (helper (+ 1 n) n n)))\n", "  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) k (+ j 1))) 0)]\n      [(< k n) (if (= (+ i j) k) (+\
    \ 1 (helper (+ i k) j k)) 0)]\n      [else (+ 1 (helper (+ i k) j k))]\n     \
    \ ))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n       \
    \           (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+ i j)\
    \ k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper\
    \ (+ i k) k (+ j k))))]\n      [(< k n) (if (= (+ i j) k)\n                  (+\
    \ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n\
    \      [else 0]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i k) (if (= (+\
    \ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (helper (+\
    \ i 1) (+ j 1) (+ k 1))\n            (helper (+ i 1) (+ j 1) k))\n        (if\
    \ (< k n)\n            (helper (+ i 1) (+ j 1) k)\n            (helper (+ i 1)\
    \ j k)))\n    (if (< i j)\n        (if (= (+ i j) (+ k n))\n            (+ i j)\n\
    \            (helper (+ i 1) (+ j 1) (+ k 1))))\n  (helper 1 1 1))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n      [(< j\
    \ k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 n n))\n",
  "  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\
    \ 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\
    \ 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74\
    \ 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100))\
    \ (i 1))\n    (if (< i n)\n        (loop (append a (list i) (list i (* i i i)\
    \ (+ i (* i i i))))\n              (+ i 1))\n        (loop a (+ i 1)))))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n  \
    \    [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j\
    \ 1) (+ k 1))]\n      [(= i j) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= j\
    \ k) (helper (+ i 1) j k)]\n      [(= i k) (helper (+ i 1) (+ j 1) k)]\n     \
    \ [else (+ 1 (helper (+ i 1) (+ j 1) k))]\n    )\n  )\n  (helper 1 n n)\n)\n",
  "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n  \
    \      (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", " \
    \ (let loop ((i n) (a #() (+ i 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons\
    \ a i))\n        (loop (+ i 1) a))))\n", "  (let loop ((i n) (a #() (+ i 1)))\n\
    \    (cond ((= i 0) a)\n          ((= i 1) a)\n          ((= (modulo i 3) 0) (loop\
    \ (- i 1) (cons a (* i i))))\n          (else (loop (- i 1) (cons a (* i i)))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(= i j) (+\
    \ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))]\n      [else\
    \ 0]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (=\
    \ (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k k) (if (= (+ k k) k)\
    \ (+ 1 (helper i (+ k 1) j)) 0)]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n  \
    \    [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n      [(< k i) (if (= (+ i j) k)\
    \ 0 (+ i j))]\n      [else (+ i j k)]))\n  (cond\n    [(< n 0) 0]\n    [else (helper\
    \ 1 (+ n 1) 0)]))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+\
    \ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n\
    \      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j k) (+\
    \ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1 2 3))\n",
  "  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\
    \ 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\
    \ 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74\
    \ 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100))\
    \ (i 1))\n    (if (< i n)\n        (loop (conj a\n                       (* i\
    \ i i)\n                       (+ i (+ i 1) (+ i 1) (+ i 1)))\n              (+\
    \ i 1))\n        0)))\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i\
    \ j) k) (+ 1 (helper (+ i 1) k (+ j 1))) 0)]\n      [(< k n) (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i k) (+ j k) n)) 0)]\n      [else 0]))\n  (helper 1 1 1))\n",
  "  (define (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (if\
    \ (= (+ i j k) (* 3 i))\n                (helper i (+ j 1) k)\n              \
    \  (helper i (+ j 1) (+ k 1)))\n            (helper i (+ j 1) (+ k 1)))\n    \
    \    (if (< k n)\n            (if (= (+ i j k) (* 3 i))\n                (helper\
    \ i (+ j 1) k)\n                (helper i (+ j 1) (+ k 1)))\n            (helper\
    \ i (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k n) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [else (+ i j)]\n      ))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+\
    \ i j) k) (+ i j) (+ i j))]\n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [else (+ i j)]\n      ))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+\
    \ i j) (+ i j))]\n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else\
    \ (+ i j)]\n      ))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (+ i\
    \ j)]\n      ))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (+ i j)]\n  \
    \    ))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ (+ i j) (+ i j))]\n      [(< j k) (if (", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j k) 3)\n                  (+ 1 (helper (+ i 1) j\
    \ k) (helper (+ i 1) (+ j 1) k) (helper (+ i 1) (+ j 1) (+ k 1)))\n          \
    \        0)]\n      [(< j k) (if (= (+ i j k) 3)\n                  (+ 1 (helper\
    \ (+ i 1) j (+ k 1))\n                  0)]\n      [(< k i) (if (= (+ i j k) 3)\n\
    \                  (+ 1 (helper (+ i 1) (+ j 1) k)\n                  0)]\n  \
    \    [else 0]))\n  (helper 1 2 n))\n", "  (let loop ((i n) (a #() (+ i 1)))\n\
    \    (if (< i n)\n        (loop (+ i 1) a)\n        (if (= (modulo a) 3)\n   \
    \         (+ 1 (loop (+ i 1) (cons a (+ i 1))))\n            (loop (+ i 1) a))))))\n",
  "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (cond\n      [(=\
    \ i n) 1]\n      [(= (length a) n) 0]\n      [(= (modulo (+ i (first a)) 3) 0)\
    \ (loop (rest a) (+ i 1))]\n      [else (loop (rest a) (+ i 1))])))\n", "  (let\
    \ ((a (ref (make-array n))))\n    (define (helper i j k)\n      (set! (aref a\
    \ i) (* i (* i i k)))\n      (set! (aref a j) (* j (* j j k)))\n      (set! (aref\
    \ a k) (* k (* k k k)))\n      (cond\n        ((< i j) (helper (+ i 1) j k))\n\
    \        ((< j k) (helper (+ j 1) k k))\n        ((< k k) (helper (+ k 1) k k)))\n\
    \      (cond\n        ((= (modulo (aref a i) 3) 0)\n         (+ 1 (+ (aref a i)\
    \ (aref a j) (aref a k))))\n        ((= (modulo (aref a j) 3) 0)\n         (+\
    \ 1 (+ (aref a j) (aref a k) (aref a k))))\n        ((= (modulo (aref a k) 3)\
    \ 0)\n         (+ 1 (+ (aref a k) (aref a k) (aref a k))))\n      (cond\n    \
    \    ((< i j) (helper (+ i 1) j k))\n        ((< j k) (helper (+ j 1) k k))\n\
    \        ((< k k) (helper (+ k 1) k k))))\n    (helper 1 n n)))\n", "  (let loop\
    \ ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n        (loop\
    \ (append a i)\n              (+ i 1))\n        (length a))))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) (+ 1 (helper (+ i 1) j\
    \ k))]\n      [(= j k) (+ 1 (helper (+ i 1) k (+ j 1)))]\n      [(= i k) (+ 1\
    \ (helper (+ i 1) k (+ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n\
    \      [(= i j) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper\
    \ (+ i 1) k (+ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n   \
    \   [(= i j) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+\
    \ i 1) k (+ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(=\
    \ i j) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1)\
    \ k (+ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i\
    \ j) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) k\
    \ (+ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i j)\
    \ (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) k (+\
    \ j 1)))]\n      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i j) (+\
    \ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) k (+ j 1)))]\n\
    \      [(= j k) (+ 1 (helper (+ i 1) j (+ k 1)))]\n      [(= i j) (+ 1 (helper\
    \ (+ i 1) j (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) k (+ j 1)))]\n   \
    \   [(= j k) (+ 1 (helper (+ i 1) j (+ ", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (* i i j) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1)\
    \ i k) (helper (+ k 1) i j)))]\n      [(= i j) (if (= (* i i j) 3) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(< i k) (if\
    \ (= (* i i k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k\
    \ 1) i j)))]\n      [(= i k) (if (= (* i i k) 3) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ j 1) i k) (helper (+ k 1) i j)))]\n      [else 0]))\n  (helper (+ 1 n) n\
    \ n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n  \
    \    [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i k) (helper i\
    \ (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper i\
    \ (- j k) k)]\n", "  (define (helper a i j k)\n    (cond\n      [(< i j) (+ 1\
    \ (helper (+ a i) i (+ j 1) k))] \n      [(< j k) (+ 1 (helper (+ a i) i (+ j\
    \ k) k))] \n      [(< k i) (+ 1 (helper (+ a i) i (+ k j) k))] \n      [else (+\
    \ 1 (helper (+ a i) i (+ k j) k))]\n    )\n  )\n  (helper '() 1 n n)\n)\n", '  (let
    loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
    25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
    51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
    77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) (b #(1
    2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
    57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
    83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) (c #(1 2 3 4 5 6 7 8 9
    10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
    36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
    88 89 90 91 92 93 94 95 96 97 98 99 100) (dummy #(1 2 3 4 5 6 7 8 9 10 11 12 13
    14 15 16 17 18 19 20 21 22 23 24 25 26 27 ', "  (let loop ((i n) (a #() (+ i 1)))\n\
    \    (if (< i n)\n        (loop (+ i 1) a)\n        (if (= (+ a i) 3)\n      \
    \      (+ 1 (loop (+ i 1) a))\n            (loop (+ i 1) a))))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k))\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper i (+ j 1) k)) 0)]\n     \
    \ [else 0]))\n  (if (= n 0)\n      0\n      (+ 1 (helper (- n 1) 0 0))))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+\
    \ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j k) (* i\
    \ i k)) (+ j k i) 0)]\n      [(< k i) (if (= (* k k i) (* i i k)) (+ k i j) 0)]\n\
    \      [else (if (= (* k k i) (* j j k)) (+ k j i) 0)]))\n  (define (helper-helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n\
    \      [(< j k) (if (= (* j j k) (* i i k)) (+ j k i) 0)]\n      [(< k i) (if\
    \ (= (* k k i) (* i i k)) (+ k i j) 0)]\n      [else (if (= (* k k i) (* j j k))\
    \ (+ k j i) 0)]))\n  (define (helper-helper-helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j\
    \ k) (* i i k)) (+ j k i) 0)]\n      [(< k i) (if (= (* k k i) (* i i k)) (+ k\
    \ i j) 0)]\n      [else (if (= (* k k i) (* j j k)) (+ k j i) 0)]))\n  (define\
    \ (helper-helper-helper-helper i j k)\n    (cond\n      [(< i j) (if (= (* i i\
    \ k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j k) (* i i k)) (+ j\
    \ k i) 0)]\n      [(< k i) (if (= (* k k i) (* i i k)) (+ k i j) 0)]\n      [else\
    \ (if (= (* k k i) (* j j k)) (+ k j i) 0)]))\n  (define (helper-helper-helper-helper-helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+\
    \ i 1) k (+ j k)))\n                  (helper (+ i 1) j k))] \n      [(< j k)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k))] \n\
    \      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ k k)) (helper (+ i\
    \ 1) k (+ j k)))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j\
    \ k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [else (+ 1 (helper\
    \ i (+ j 1) k))]\n      ))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (=\
    \ (+ j k) k) (+ j k) 0)]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n\
    \      ))\n  (cond\n    [(< n 1) 0]\n    [else (helper 1 (+ n 1) (+ n 1))]))\n",
  "  (define (helper a i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) 0))]\n      [(= i j) (+ 1 (helper (+ i 1) j k) 0)]\n      [else\
    \ (+ 1 (helper (+ i 1) j k) 0)]))\n  (helper a 1 n n))\n", "  (define (helper\
    \ a i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ a i) i k k) (helper (+ a\
    \ j) j k k))]\n      [(< j k) (+ 0 (helper (+ a i) i j k) (helper (+ a j) j k\
    \ k))]\n      [(< k i) (+ 0 (helper (+ a i) i j k) (helper (+ a j) j k k))]\n\
    \      [else (+ 0 (helper (+ a i) i j k) (helper (+ a j) j k k))]\n    ))\n  (helper\
    \ '() 1 2 n))\n", "  (define (helper i j k)\n    (cond ((= i j) 0)\n         \
    \ ((= i k) 0)\n          ((= j k) 0)\n          ((= (+ (* i i) (* j j) (* k k))\
    \ 3) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1))))\n          (else (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ j k) n)\n                  (+ 1 (helper (+ j 1) i k))\n                  (+\
    \ 1 (helper (+ j 1) k (+ i k))))]\n      [(< k n) (if (= (+ k n) n)\n        \
    \          (+ 1 (helper (+ k 1) i (+ j k)))\n                  (+ 1 (helper (+\
    \ k 1) j (+ i k))))]\n      [else 0]))\n  (helper 1 2 3))\n", "  (let loop ((i\
    \ 1)\n             (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1)\n  \
    \             (cons a (list i)))\n        (if (= (+ (car a) (car a)) 3)\n    \
    \        (+ 1 (loop (+ i (car a)) (cdr a)))\n            (loop (+ i (car a)) (cdr\
    \ a)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer.\
    \ Your solution works. But I still don't understand why my code doesn't work.\
    \ Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. I understand it now. Your code\
    \ works because you use recursion to solve the problem. But the problem I encountered\
    \ is that the code doesn't work if I try to solve the problem without recursion.\
    \ Could you please explain why?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (define (helper i j k)\n\
    \    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((= j k)\
    \ (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n         \
    \ ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n \
    \         ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+\
    \ j 1))\n          ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1)\
    \ (+ k 1)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n       \
    \   ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else (helper (+\
    \ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ k\
    \ 1))\n          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else\
    \ (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n    (cond ((=\
    \ i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n  \
    \        (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((= j k)\
    \ (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n         \
    \ ((= j k) (+ i 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k)\
    \ k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper\
    \ i (+ j 1) k)) 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k))\
    \ 0)]\n      [else 0]))\n  (if (= n 0)\n      0\n      (+ 1 (helper (- n 1) 0\
    \ 0))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper\
    \ i (+ j 1) k)) 0)]\n      [(< k n) (if (= (+ i j) (+ j k)) (+ 1 (helper (+ i\
    \ 1) (+ j 1) k)) 0)]\n      [else 0]))\n  (helper 1 1 n))\n", "  (let loop ((i\
    \ 1) (a #() (+ i 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a (* i i i)))\n\
    \        a)))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) k (+ j 1))) 0)]\n      [(< k n) (if (= (+ i j) k) (+ 1\
    \ (helper (+ i k) j (+ j 1))) 0)]\n      [else 0]))\n  (helper 1 2 3))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k", "  (define (helper i j k)\n    (if\
    \ (< i j)\n        (if (< k n)\n            (if (= (* i i j) (* 3 k))\n      \
    \          (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))\n\
    \                0))\n        0))\n  (helper 1 1 n))\n", "  (define (helper i\
    \ j k)\n    (cond ((< i j) (+ 1 (helper (+ i 1) j k)))\n          ((< j k) (+\
    \ 1 (helper (+ i 1) (+ j 1) k)))\n          ((< i k) (+ 1 (helper (+ i 1) (+ j\
    \ 1) (+ k 1)))))\n  (if (< n 0)\n      0\n      (+ 1 (helper (+ 1 1) 0 0))))\n",
  "  (let ((a (ref (make-array n))))\n    (loop for i from 0 to n\n          for j\
    \ from 0 to n\n          for k from 0 to n\n          when (and (< i j)\n    \
    \               (< j k)\n                   (< k n))\n          do (set! a\n \
    \                (+ (* i i i)\n                    (* j j j)\n               \
    \     (* k k k)))\n          until (= (+ i j k) n)\n          do (set! a\n   \
    \              (+ (* i i i)\n                    (* j j j)\n                 \
    \   (* k k k)))\n          until (= (+ i j k) n)\n          do (set! a\n     \
    \            (+ (* i i i)\n                    (* j j j)\n                   \
    \ (* k k k)))\n          until (= (+ i j k) n)\n          do (set! a\n       \
    \          (+ (* i i i)\n                    (* j j j)\n                    (*\
    \ k k k)))\n          until (= (+ i j k) n)\n          do (set! a\n          \
    \       (+ (* i i i)\n                    (* j j j)\n                    (* k\
    \ k k)))\n          until (= (+ i j k) n)\n          do (set! a\n            \
    \     (+ (* i i i)\n                    (* j j j)\n                    (* k k\
    \ k)))\n          until (= (+ i j k) n)\n          do (set! a\n              \
    \   (+ (* i i i)\n                    (* j j j)\n                    (* k k k)))\n\
    \          until (= (+ i j k) n)\n          do (set! a\n                 (+ (*\
    \ i i i)\n                    (* j j j)\n                    (* k k k)))\n   \
    \       until (= (+ i j k) n)\n          do (set! a\n                 (+ (* i\
    \ i i)\n                    (* j j j)\n                    (* k k k)))\n     \
    \     until (= (+ i j k) n)\n          do (set! a\n                 (+ (* i i\
    \ i)\n                    (* j j j)\n                    (* k k k)))\n       \
    \   until (= (+ i j k) n)\n          do (set! a\n                 (+ (* i i i)\n\
    \                    (* j j j)\n                    (* k k k)))\n          until\
    \ (= (+ i j k) n)\n          do (set! a\n                 (+ (* i i i)\n     \
    \               (* j j j)\n                    (* k k k)))\n          until",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (+ (helper (- n 1) 0 0)\n  \
    \           (helper (- n 1) (- n 1) 0)\n             (helper (- n 1) (- n 1) (-\
    \ n 1)))]))\n", "  (define (helper i j k)\n    (cond ((< i j) (if (= (* i i j)\
    \ 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))))\n\
    \          ((< j k) (if (= (* j j k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j\
    \ 1) i k) (helper (+ k 1) i j))))\n          ((< k i) (if (= (* k k i) 3) (+ 1\
    \ (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))))\n        \
    \  (else 0)))\n  (helper 1 2 n))\n", "  (let loop ((a (ref (make-array n :initial-element\
    \ 0))\n               (i 1))\n             (j 1))\n    (if (< i n)\n        (loop\
    \ (+ (ref a i) (* i i) (+ 1 i)) j)\n        (loop (+ (ref a i) (* i i) (+ 1 i))\
    \ (+ j 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n     \
    \ [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j)\
    \ k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]", "  (define (helper i j k)\n    (if (< i j)\n\
    \        (if (< k j)\n            (if (= (* i i k) (* j j k))\n              \
    \  (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))\n    \
    \            0)\n            0)\n        0))\n  (if (= n 0)\n      0\n      (helper\
    \ (+ n 1) 0 n)))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (<\
    \ k n)\n            (if (= (+ i j k) (* 3 i))\n                (helper i (+ j\
    \ 1) k)\n                (helper i (+ j 1) (+ k 1)))\n            (helper i (+\
    \ j 1) (+ k 1)))\n        (if (< k n)\n            (if (= (+ i j k) (* 3 i))\n\
    \                (helper i (+ j 1) k)\n                (helper i (+ j 1) (+ k\
    \ 1)))\n            (helper i (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(<\
    \ j k) (helper (+ i 1) (+ j 1) k)] \n      [(< i k) (helper (+ i 1) (+ j 1) (+\
    \ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 n\
    \ n))\n", "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if\
    \ (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) 3) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(< j k) (if\
    \ (= (* j j k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k\
    \ 1) i j)))]\n      [(< k i) (if (= (* k k k) 3) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ j 1) i k) (helper (+ k 1) i j)))]\n      [else 0]))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n      [(< k n) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [else (+ 1 (helper (+ i 1) (+ j 1) k))]))\n  (helper 1 1\
    \ 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ i (+ j k))]\
    \ \n      [(< j k) (+ j (+ i k))] \n      [(< k i) (+ k (+ i j))]\n      [else\
    \ 0]))\n  (cond\n    [(< n 0) 0]\n    [else (helper 1 (+ n 1) 0)]))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j\
    \ k) 0)]\n      [(< j k) (if (= (* j j k) (* i i k)) (+ j k i) 0)]\n      [(<\
    \ k i) (if (= (* k k k) (* i i k)) (+ k k i) 0)]\n      [else (if (= (* k k k)\
    \ (* j j k)) (+ k k j) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j k)\
    \ (* i i k)) (+ j k i) 0)]\n      [(< k i) (if (= (* k k k) (* i i k)) (+ k k\
    \ i) 0)]\n      [else (if (= (* k k k) (* j j k)) (+ k k j) 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n\
    \      [(< j k) (if (= (* j j k) (* i i k)) (+ j k i) 0)]\n      [(< k i) (if\
    \ (= (* k k k) (* i i k)) (+ k k i) 0)]\n      [else (if (= (* k k k) (* j j k))\
    \ (+ k k j) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j k) (* i i k))\
    \ (+ j k i) 0)]\n      [(< k i) (if (= (* k k k) (* i i k)) (+ k k i) 0)]\n  \
    \    [else (if (= (* k k k) (* j j k)) (+ k k j) 0)]))\n  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n  \
    \    ", "  (define (helper a i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+\
    \ a i) i (+ j 1) k))]\n      [(< j k) (+ 1 (helper (+ a i) i (+ j k) k))]\n  \
    \    [else (+ 1 (helper (+ a i) i (+ j k) k))]\n    )\n  )\n  (helper '() 1 n\
    \ n)\n)\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k j)\n\
    \            (if (= (+ i k) (+ j k))\n                (+ 1 (helper (+ i 1) (+\
    \ j 1) k))\n                (+ 1 (helper (+ i 1) (+ k 1) j))\n               \
    \ (+ 1 (helper (+ i k) (+ j 1) j))\n            )\n            (helper (+ i 1)\
    \ (+ j 1) k)\n        )\n        (helper (+ i 1) (+ j 1) k)\n    )\n  )\n  (helper\
    \ 1 2 n)\n)\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (cons a (list i)))\n        (if (= (+ (car a) (car a)) 3)\n        \
    \    (+ 1 (loop (+ i (car a)) (cdr a)))\n            (loop (+ i (car a)) (cdr\
    \ a)))))) \n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n\
    \      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n      [else (helper (+ i 1)\
    \ (+ j 1) (+ k 1))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (if\
    \ (< i j)\n        (if (< k n)\n            (if (= (+ i j k) 3)\n            \
    \    (+ 1 (helper i (+ j 1) k))\n                0))\n        0))\n  (helper 1\
    \ 0 0))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+\
    \ i 1) j k))] \n      [(< j k) (+ 0 (helper i (+ j 1) k))] \n      [(< k n) (+\
    \ 0 (helper i (+ j k) n))]\n      [else 0]))\n  (helper 1 1 1))", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n  \
    \    [(< k i) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [(< k\
    \ i) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [(< k i) (+ i j k)]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (+ i j k)]\n      [(< j k) (+ i j k)]\n      [(< k i) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [(< k i) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ i j k)]\n      [(< k i) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n  \
    \    [(< k i) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [(< k\
    \ i) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [(< k i) (+ i j k)]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n", "  (let loop ((a #(list\
    \ 1 2 3 4 5))\n             (i 0))\n    (if (< i n)\n        (loop (append a i)\
    \ (i + 1))\n        (loop a (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i\
    \ 1) (+ j 1) k))]\n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n  \
    \    [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n", " \
    \ (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j\
    \ 1))\n          ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+\
    \ k 1)))))\n  (helper 1 2 3))\n", "  (let ((a (rev (map (lambda (i) (* i i i))\
    \ (range n))))\n        (count 0))\n    (for ((i 0) (j n) (k n) (l 0))\n     \
    \ (if (< i j)\n          (if (< j k)\n              (if (= (+ i j k) 3)\n    \
    \              (set! count (+ count l))\n                  (set! i (+ i 1))\n\
    \                  (set! j (+ j 1))\n                  (set! k (+ k 1))\n    \
    \              (set! l (+ l 1)))\n              (set! i (+ i 1))\n           \
    \   (set! j (+ j 1))\n              (set! k (+ k 1))\n              (set! l (+\
    \ l 1)))\n          (set! i (+ i 1))\n          (set! j (+ j 1))\n          (set!\
    \ k (+ k 1))\n          (set! l (+ l 1))))\n    (set! count (+ count l))\n   \
    \ count))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (cons a i))\n        (if (= (+ (car a) (car a)) 3)\n            (+ 1\
    \ (loop (+ i 1) (cdr a)))\n            0))))\n", "  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< i k) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ n 1) 0 0)\
    \ (helper (+ n 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (=\
    \ (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k n) (if (= (+ k n) k)\
    \ (+ 1 (helper i (+ k 1) k)) 0)]\n      [else 0]))\n  (helper 1 1 n))\n", "  (let\
    \ loop ((i n) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) a)\n    \
    \    (if (= (+ a i) 3)\n            (+ 1 (loop (+ i 1) a))\n            (loop\
    \ (+ i 1) a))))))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (helper 1 2 3))\n", "  (let loop ((i 1) (a #(list 1)))\n\
    \    (if (< i n)\n        (loop (+ i 1) (cons a (list i)))\n        (if (= (+\
    \ (car a) (car a)) 3)\n            (+ 1 (loop (+ i 1) (cdr a)))\n            (loop\
    \ (+ i 1) (cdr a)))))) \n", "  (define (helper i j k)\n    (cond ((= i j) (+ k\
    \ 1))\n          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else\
    \ (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k)\
    \ (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j\
    \ 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (if\
    \ (< n 0)\n      0\n      (helper (- n 1) 0 0)))\n", "  (define (helper a i j\
    \ k)\n    (cond\n      [(< i j) (+ 0 (helper (+ a i) i k (+ k 1)))]\n      [(<\
    \ j k) (+ 0 (helper (+ a i) j (+ k 1)))]\n      [else (+ 0 (helper (+ a i) j (+\
    \ k 1)))]))\n  (helper '() 1 n 1))\n", "  (define (helper i j k)\n    (if (< i\
    \ j)\n        (if (< k n)\n            (if (= (* i i k) (* j j k))\n         \
    \       (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))\n\
    \                0))\n        0))\n  (helper 1 1 1))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI appreciate your answer, but I'm looking for a solution without\
    \ using recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  (define (helper a i j k)\n    (cond\n\
    \      [(< i j) (+ 0 (helper (append a i) i k j))])\n      (else\n      (cond\n\
    \        [(= i k) (+ 0 (helper (append a i) i j k))])\n        [(= j k) (+ 0 (helper\
    \ (append a i) i j k))])\n        [else (+ 0 (helper (append a i) i j k))])))\n\
    \  (helper '() 1 n n))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ 1\
    \ (* i i k)))\n          ((= i k) (+ 1 (* j j k)))\n          ((= j k) (+ 1 (*\
    \ i j k)))\n          (else (+ 1 (* i j k))))\n    (helper 1 2 3))\n  (helper\
    \ 1 2 n))\n", "  (define (helper i j k)\n    (cond ((< i j) (+ i j k))\n     \
    \     ((< j k) (+ i j k))\n          ((< k i) (+ i j k))\n          (else (+ i\
    \ j k))))\n  (define (helper i j k)\n    (cond ((< i j) (+ i j k))\n         \
    \ ((< j k) (+ i j k))\n          ((< k i) (+ i j k))\n          (else (+ i j k))))\n\
    \  (define (helper i j k)\n    (cond ((< i j) (+ i j k))\n          ((< j k) (+\
    \ i j k))\n          ((< k i) (+ i j k))\n          (else (+ i j k))))\n  (define\
    \ (helper i j k)\n    (cond ((< i j) (+ i j k))\n          ((< j k) (+ i j k))\n\
    \          ((< k i) (+ i j k))\n          (else (+ i j k))))\n  (define (helper\
    \ i j k)\n    (cond ((< i j) (+ i j k))\n          ((< j k) (+ i j k))\n     \
    \     ((< k i) (+ i j k))\n          (else (+ i j k))))\n  (define (helper i j\
    \ k)\n    (cond ((< i j) (+ i j k))\n          ((< j k) (+ i j k))\n         \
    \ ((< k i) (+ i j k))\n          (else (+ i j k))))\n  (define (helper i j k)\n\
    \    (cond ((< i j) (+ i j k))\n          ((< j k) (+ i j k))\n          ((< k\
    \ i) (+ i j k))\n          (else (+ i j k))))\n  (define (helper i j k)\n    (cond\
    \ ((< i j) (+ i j k))\n          ((< j k) (+ i j k))\n          ((< k i) (+ i\
    \ j k))\n          (else (+ i j k))))\n  (define (helper i j k)\n    (cond ((<\
    \ i j) (+ i j k))\n          ((< j k) (+ i j k))\n          ((< k i) (+ i j k))\n\
    \          (else (+ i j k))))\n  (define (helper i j k)\n    (cond ((< i j) (+\
    \ i j k))\n          ((< j k) (+ i j k))\n          ((< ", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (+ 1\
    \ (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k)))]\n\
    \      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n\
    \                  (+ 1 (helper (+ i k) k (+ j k)))]\n      [(< i k) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+\
    \ 1 (helper (+ i k) k (+ j k)))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (let\
    \ loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n      \
    \  (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n              \
    \    (+ 1 (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j\
    \ k))))]\n      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+\
    \ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [(<\
    \ k i) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n     \
    \             (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (cons a i))\n        (+ 1 (loop (+ i 1) a))))))\n", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n    \
    \            (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i k (+ j 1)))\n                    (+ 1 (helper k (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i (+ j 1) k))\n                    (+ 1 (helper i (+ j 1) k)))\n           \
    \     (if (= (", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k\
    \ j)\n            (if (= (* i i) (* j j) (* k k))\n                (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))\n                0)\n\
    \            0)\n        0))\n  (helper 1 n n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) 3) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(< j k) (if\
    \ (= (* j j k) 3) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k\
    \ 1) i j)))]\n      [(< k i) (if (= (* k k k) 3) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ j 1) i k) (helper (+ k 1) i j)))]\n      [else 0]))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k\
    \ i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ i (+ j k))] \n\
    \      [(< j k) (+ j (+ i k))] \n      [else (+ i (+ j k))]\n    )\n  )\n  (cond\n\
    \    [(< n 0) 0]\n    [else (+ (helper (- n 1) (- n 1) (- n 1))\n            (helper\
    \ (- n 2) (- n 2) (- n 2))\n            (helper (- n 3) (- n 3) (- n 3))\n   \
    \         (helper (- n 4) (- n 4) (- n 4))\n            (helper (- n 5) (- n 5)\
    \ (- n 5))\n            (helper (- n 6) (- n 6) (- n 6))\n            (helper\
    \ (- n 7) (- n 7) (- n 7))\n            (helper (- n 8) (- n 8) (- n 8))\n   \
    \         (helper (- n 9) (- n 9) (- n 9))\n            (helper (- n 10) (- n\
    \ 10) (- n 10))\n            (helper (- n 11) (- n 11) (- n 11))\n           \
    \ (helper (- n 12) (- n 12) (- n 12))\n            (helper (- n 13) (- n 13) (-\
    \ n 13))\n            (helper (- n 14) (- n 14) (- n 14))\n            (helper\
    \ (- n 15) (- n 15) (- n 15))\n            (helper (- n 16) (- n 16) (- n 16))\n\
    \            (helper (- n 17) (- n 17) (- n 17))\n            (helper (- n 18)\
    \ (- n 18) (- n 18))\n            (helper (- n 19) (- n 19) (- n 19))\n      \
    \      (helper (- n 20) (- n 20) (- n 20))\n            (helper (- n 21) (- n\
    \ 21) (- n 21))\n            (helper (- n 22) (- n 22) (- n 22))\n           \
    \ (helper (- n 23) (- n 23) (- n 23))\n            (helper (- n 24) (- n 24) (-\
    \ n 24))\n            (helper (- n 25) (- n 25) (- n 25))\n            (helper\
    \ (- n 26) (- n 26) (- n 26))\n            (helper (- n 27) (- n 27) (- n 27))\n\
    \            (helper (- n 28) (- n 28) (- n 28))\n            (helper (- n 29)\
    \ (- ", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k n)\n    \
    \        (if (= (* i i k) (* j j k) (* k k n))\n                (helper i (+ j\
    \ 1) k)\n                (helper i (+ j 1) (+ k 1)))\n            (helper i (+\
    \ j 1) (+ k 1)))\n        (if (< k n)\n            (if (= (* i i k) (* j j k)\
    \ (* k k n))\n                (helper i (+ j 1) k)\n                (helper i\
    \ (+ j 1) (+ k 1)))\n            (helper i (+ j 1) (+ k 1)))))\n  (helper 1 2\
    \ n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+\
    \ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< k n)\
    \ (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i 1) (+\
    \ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+\
    \ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (", "  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(= i j) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(=\
    \ i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+\
    \ i 1) j k))]\n      [(= k n) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= i j)\
    \ (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= j k) (+ 0 (helper (+ i 1) j k))]\n\
    \      [(= k n) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= i k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) j k))]\n   \
    \   [(= k n) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= i j) (+ 0 (helper (+\
    \ i 1) (+ j 1) k))]\n      [(= j k) (+ 0 (helper (+ i 1) j k))]\n      [(= k n)\
    \ (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= i k) (+ 0 (helper (+ i 1) (+ j\
    \ 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) j k))]\n      [(= k n) (+\
    \ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= i j) (+ 0 (helper (+ i 1) (+ j 1)\
    \ k))]\n      [(= j k) (+ 0 (helper (+ i 1) j k))]\n      [(= k n) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(= i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(= j k) (+ ", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) (+ k\
    \ i))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j\
    \ k) (* i i k)) (+ j k i) 0)]\n      [(< k i) (if (= (* k k i) (* j j k)) (+ k\
    \ i j) 0)]\n      [else (if (= (* k k i) (* i i k)) (+ i j k) 0)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j\
    \ k) 0)]\n      [(< j k) (if (= (* j j k) (* i i k)) (+ j k i) 0)]\n      [(<\
    \ k i) (if (= (* k k i) (* j j k)) (+ k i j) 0)]\n      [else (if (= (* k k i)\
    \ (* i i k)) (+ i j k) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n      [(< j k) (if (= (* j j k)\
    \ (* i i k)) (+ j k i) 0)]\n      [(< k i) (if (= (* k k i) (* j j k)) (+ k i\
    \ j) 0)]\n      [else (if (= (* k k i) (* i i k)) (+ i j k) 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k)) (+ i j k) 0)]\n\
    \      [(< j k) (if (= (* j j k) (* i i k)) (+ j k i) 0)]\n      [(< k i) (if\
    \ (= (* k k i) (* j j k)) (+ k i j) 0)]\n      [else (if (= (* k k i) (* i i k))\
    \ (+ i j k) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (* i i k) (* j j k)) (+ i j k) ", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0\
    \ (+ i j))]\n      [(< k n) (if (= (+ i j) k) 0 (+ i j))]\n      [else (if (=\
    \ (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i\
    \ j))]\n      [(< k n) (if (= (+ i j) k) 0 (+ i j))]\n      [else (if (= (+ i\
    \ j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n\
    \      [(< k n) (if (= (+ i j) k) 0 (+ i j))]\n      [else (if (= (+ i j) k) (+\
    \ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n     \
    \ [(< k n) (if (= (+ i j) k) 0 (+ i j))]\n      [else (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n      [(< k\
    \ n) (if (= (+ i j) k) 0 (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+ i\
    \ j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ 0 (+ i j))]\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n                 \
    \ (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+ i j) k)\n     \
    \             (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i\
    \ k) k (+ j k))))]\n      [(< k n) (if (= (+ i j) k)\n                  (+ 1 (helper\
    \ (+ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [else\
    \ 0]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ j k) k) (+ j k)\
    \ k)]\n      [(< k i) (if (= (+ k i) k) (+ k i) k)]\n      [else (if (= (+ i j)\
    \ (+ j k) (+ k i)) (+ i j) (+ j k) (+ k i))]))\n  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+\
    \ j k) k) (+ j k) k)]\n      [(< k i) (if (= (+ k i) k) (+ k i) k)]\n      [else\
    \ (if (= (+ i j) (+ j k) (+ k i)) (+ i j) (+ j k) (+ k i))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j\
    \ k) (if (= (+ j k) k) (+ j k) k)]\n      [(< k i) (if (= (+ k i) k) (+ k i) k)]\n\
    \      [else (if (= (+ i j) (+ j k) (+ k i)) (+ i j) (+ j k) (+ k i))]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ j k) k) (+ j k) k)]\n      [(< k i) (if (= (+ k i) k)\
    \ (+ k i) k)]\n      [else (if (= (+ i j) (+ j k) (+ k i)) (+ i j) (+ j k) (+\
    \ k i))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) k)]\n      [(< j k) (if (= (+ j k) k) (+ j k) k)]\n      [(< k i)\
    \ (if (= (+ k i) k) (+ k i) k)]\n      [else (if (= (+ i j", "  (let loop ((i\
    \ n) (a #() (+ i 1)))\n    (if (< i n)\n        a\n        (loop (+ i 1) (cons\
    \ (* i i i) a))))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [else (+ 1 (helper (+ i 1) (+ j 1)\
    \ k))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond ((= i j)\
    \ 0)\n          ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i i\
    \ j) (* j j k) (* k k 3)))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n\
    \          ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i i j) (*\
    \ j j k) (* k k 3)))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n    \
    \      ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i i j) (* j j\
    \ k) (* k k 3)))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n        \
    \  ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i i j) (* j j k)\
    \ (* k k 3)))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((=\
    \ i k) 0)\n          ((= j k) 0)\n          (else (+ (* i i j) (* j j k) (* k\
    \ k 3)))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k)\
    \ 0)\n          ((= j k) 0)\n          (else (+ (* i i j) (* j j k) (* k k 3)))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n    \
    \      ((= j k) 0)\n          (else (+ (* i i j) (* j j k) (* k k 3)))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((=\
    \ j k) 0)\n          (else (+ (* i i j) (* j j k) (* k k 3)))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n\
    \          (else (+ (* i i j) (* j j k) (* k k 3)))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) 0)", "  (define (helper i j k)\n    (if (< i j)\n        (if\
    \ (< k i)\n            (if (< k j)\n                (if (= (+ (* i i) (* j j))\
    \ (* k k))\n                    (+ 1 (helper i k (+ j k)))\n                 \
    \   (+ 1 (helper k (+ j k) j)))\n                (+ 1 (helper i (+ j k) k)))\n\
    \            (+ 1 (helper i (+ j k) j)))\n        (+ 1 (helper i (+ j k) k)))\n\
    \    (+ 1 (helper i (+ j k) k)))\n  (helper 1 n 1))\n", "  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((=\
    \ j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (helper\
    \ 1 2 n))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n \
    \         ((= i k) (+ 1 (* j k)))\n          ((= j k) (+ 1 (* i k)))\n       \
    \   (else (+ 1 (* i j) (* j k) (* i k))))\n  (if (= n 0)\n      0\n      (+ 1\
    \ (helper (- n 1) (- n 1) (- n 1)))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (cond\n    [(< n 1) 0]\n    [else (+ 1 (helper (-\
    \ n 1) 0 0))]))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (* i i k) (* j j k)) (helper (+ i 1) j k) (helper (+ i 1) (+ j 1) k))] \n  \
    \    [(< j k) (if (= (* j j k) (* i i k)) (helper (+ j 1) i k) (helper (+ j 1)\
    \ (+ i 1) k))] \n      [(< k n) (if (= (* k k k) (* i i k) (* j j k)) (helper\
    \ (+ k 1) i j) (helper (+ k 1) (+ j 1) k))] \n      [else (+ 1 (helper (+ i 1)\
    \ (+ j 1) k))]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+\
    \ 1 (helper (+ i k) k (+ j k))))]\n      [(< k i) (if (= (+ i j) k)\n        \
    \          (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k)\
    \ k (+ j k))))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(= i j) (+ i j k)]\n    \
    \  [(= i k) (+ i j k)]\n      [else (helper (+ i 1) j k)]\n    )\n  )\n  (helper\
    \ 1 n n)\n)\n", "  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n     \
    \     ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))))\n  (if (= n 0)\n      0\n      (helper 1 2 3)))\n",
  "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) a)\n\
    \        (if (= (+ i 1) (+ n 1))\n            (+ 1 (loop (+ i 1) a))\n       \
    \     (loop (+ i 1) (cons (+ i 1) a))))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (cond\n    [(= n\
    \ 0) 0]\n    [else (+ (helper (- n 1) 0 0)\n            (helper (- n 1) (- n 1)\
    \ 0)\n            (helper (- n 1) (- n 1) (- n 1)))]))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n\
    \      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j\
    \ k)) 0 (+ i j))]))\n  (cond\n    [(< n 0) 0]\n    [else (+ (helper (- n 1) 0\
    \ 0) (helper (- n 1) 1 0) (helper (- n 1) 2 0))]))\n", "  (let loop ((i 1) (a\
    \ #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a i))\n        (if\
    \ (= (apply + a) 3)\n            (+ 1 (loop (+ i 1) (cons a i)))\n           \
    \ (loop (+ i 1) a))))))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n\
    \        (loop (+ i 1) (cons a i))\n        (+ 1 (loop (+ i 1) a))))))\n", " \
    \ (let ((a (ref (make-array n :initial-element 0)))\n        (count 0))\n    (loop\
    \ for i from 0 to (- n 1)\n          for j from i to n\n          for k from j\
    \ to n\n          when (= (+ i j k) 0)\n          do (set! a\n               \
    \    (cons (+ i j k) a))\n          when (= (+ i j k) 3)\n          do (set! count\
    \ (+ count 1)))\n    (set! count (- count 1))\n    (set! a (ref (sort a #<)))\n\
    \    count))\n", "  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\
    \ 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68\
    \ 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94\
    \ 95 96 97 98 99 100) \n               (i 1))\n    (if (< i n)\n        (loop\
    \ (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (let loop ((i\
    \ 1) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a (list i)))\n\
    \        (if (= (length a) 3)\n            (+ 1 (loop (+ i 1) (cons a (list i))))\n\
    \            (loop (+ i 1) (cons a (list i))))))))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n\
    \      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k\
    \ n) (if (= (+ k n) k) (+ 1 (helper i (+ k 1) k)) 0)]\n      [else (+ 1 (helper\
    \ i (+ j 1) k))]\n      ))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i\
    \ 1) (+ j 1) k)] \n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else\
    \ (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 n n))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n              \
    \    (+ 1 (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j\
    \ k)))]\n      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i\
    \ k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k)))]\n      [(< i k)\
    \ (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n          \
    \        (+ 1 (helper (+ i k) k (+ j k)))]\n      [else 0]))\n  (if (= n 0)\n\
    \      0\n      (+ 1 (helper (+ n 1) 0 0))))\n", "  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j (+ k 1))))\n      [(< j k) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1))) (+ 1 (helper\
    \ (+ i 1) j (+ k 1))))]\n      [(< i k) (if (= (+ i j) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j (+ k 1))))]\n      [else\
    \ 0]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1)\
    \ k))]\n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= i j)\
    \ (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1)\
    \ (+ j 1) k))]\n      [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i k) (+\
    \ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+\
    \ j 1) k))]\n      [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i j) (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n\
    \      [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i k) (+ 0 (helper (+ i\
    \ 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n  \
    \    [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i j) (+ 0 (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n     \
    \ [(= k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i k) (+ 0 (helper (+ i 1) (+\
    \ j 1) (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(=\
    \ k n) (+ 0 (helper (+ i 1) j k))]\n      [(= i j) (+ 0 (helper (+ i 1) (+ j 1)\
    \ (+ k 1)))]\n      [(= j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(= k n)\
    \ (+ 0 (helper (+ i 1) j k))]\n      [(= i k) (+ 0 (helper (+ i 1) (+ j 1) (+\
    \ k 1)))", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) n) (+ 1 (helper\
    \ (+ j 1) i k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k))\
    \ 0)]\n      [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n     \
    \ [else 0]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j 1)))\n                  (helper (+ i 1) j (+ k 1)))]\n      [(< j k) (if (=\
    \ (+ j k) k) (+ 1 (helper (+ j 1) i k) (helper (+ j 1) k (+ i 1)))\n         \
    \         (helper (+ j 1) i (+ k 1)))]\n      [(< k i) (if (= (+ k i) k) (+ 1\
    \ (helper (+ k 1) i k) (helper (+ k 1) k (+ i 1)))\n                  (helper\
    \ (+ k 1) i (+ j 1)))]\n      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper\
    \ (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+\
    \ 1 (helper (+ i k) k (+ j k))))]\n      [(< i k) (if (= (+ i j) k)\n        \
    \          (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k)\
    \ k (+ j k))))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (let loop ((i 1) (a\
    \ #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) a)\n        (if (= (+ (car\
    \ a) (car a)) 3)\n            (+ 1 (loop (+ i 1) (cdr a)))\n            (loop\
    \ (+ i 1) (cons (car a) a))))))\n", "  (let loop ((i n) (a #() (+ i 1)))\n   \
    \ (cond ((= i 0) a)\n          ((= i 1) a)\n          ((= (mod i 3) 0) (loop (-\
    \ i 1) (cons a (+ i 1))))\n          (else (loop (- i 1) (cons a (+ i 1)))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+\
    \ j 1)]\n      [(= j k) (+ i 1)]\n      [(= i k) (helper i j k)]\n      [(= j\
    \ k) (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i\
    \ j k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n    \
    \  [(= i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper\
    \ i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n  \
    \    [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k)\
    \ (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i j\
    \ k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n      [(=\
    \ i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper\
    \ i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n  \
    \    [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k)\
    \ (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i j\
    \ k)]\n      [(= i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n      [(=\
    \ i j) (helper i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper\
    \ i j k)]\n      [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n  \
    \    [(= j k) (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= j k)\
    \ (helper i j k)]\n      [(= i j) (helper i j k)]\n      [(= ", "  (let ([a (make-array\
    \ n #:initial-contents nil)])\n    (do ([i (in-range n)]\n         [j (in-range\
    \ n)]\n         [k (in-range n)])\n        ((< i j k) (set! a[i] i\n         \
    \                 a[j] j\n                          a[k] k)))\n    (let ([sum\
    \ (+ (* a[i] a[j]) a[k])])\n      (if (= sum (* 3 n))\n          (+ 1 (get_max_triples\
    \ n))\n          (if (= sum (* 3 n))\n              (+ 1 (get_max_triples n))\n\
    \              0)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(<\
    \ i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+\
    \ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
