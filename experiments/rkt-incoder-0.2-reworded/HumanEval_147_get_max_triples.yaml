name: HumanEval_147_get_max_triples
language: rkt
prompt: "#lang racket\n\n;; You are given a positive integer n. You have to create\
  \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of\
  \ a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
  \ :\n;; >>> (get_max_triples 5)\n;; 1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n\
  ;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
  \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
  \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\
    \ 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\
    \ 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\
    \ 97 98 99 100)) (i 1))\n    (cond ((= i n) (length a))\n          ((< i n) (loop\
    \ (append a (list i) (list i i i)) (+ i 1)))\n          (else (loop a (+ i 1))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (* i i k) (* j j k))\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n   \
    \   [(< j k) (if (= (* j j k) (* i i k)) (+ 1 (helper (+ j 1) i k) (helper (+\
    \ i 1) j k) (helper (+ k 1) j i)))]\n      [(< k i) (if (= (* k k k) (* i i i))\
    \ (+ 1 (helper (+ k 1) i k) (helper (+ i 1) k k) (helper (+ k 1) k i)))]\n   \
    \   [(= i j) (if (= (* i i k) (* j j k)) (+ 1 (helper (+ i 1) j k) (helper (+\
    \ j 1) i k) (helper (+ k 1) i j)))]\n      [(= j k) (if (= (* j j k) (* i i k))\
    \ (+ 1 (helper (+ j 1) i k) (helper (+ i 1) j k) (helper (+ k 1) j i)))]\n   \
    \   [(= k i) (if (= (* k k k) (* i i i)) (+ 1 (helper (+ k 1) i k) (helper (+\
    \ i 1) k k) (helper (+ k 1) k i)))]\n      [else 0]))\n  (if (= n 0)\n      0\n\
    \      (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n",
  "  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n      \
    \    ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k\
    \ k k))))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i\
    \ k) 0)\n          ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j\
    \ k)) (* k (* k k k))))))\n  (define (helper i j k)\n    (cond ((= i j) 0)\n \
    \         ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (* i (* i i j))\
    \ (* j (* j j k)) (* k (* k k k))))))\n  (define (helper i j k)\n    (cond ((=\
    \ i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n          (else (+ (*\
    \ i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n       \
    \   (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n\
    \          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((=\
    \ j k) 0)\n          (else (+ (* i (* i i j)) (* j (* j j k)) (* k (* k k k))))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n    \
    \      ((= j k) 0)\n          (else (+ (* i (* i i j)) (* j (", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< j k)\n            (if (= (+ (* i i)\
    \ (* j j) (* k k)) 3)\n                (helper i (+ j 1) k)\n                (helper\
    \ i (+ j 1) (+ k 1))))\n        (if (< k j)\n            (if (= (+ (* i i) (*\
    \ k k) (* j j)) 3)\n                (helper i (+ k 1) j)\n                (helper\
    \ i (+ k 1) (+ j 1))))\n        (if (= (+ (* i i) (* j j) (* k k)) 3)\n      \
    \      (helper i (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ j 1) i k) (helper (+ k 1) i j)))]\n      [(= i j) (+ 1 (helper (+\
    \ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let ([a (make-array n initial-contents '())])\n    (define (helper\
    \ i j k)\n      (cond ((= i j) (+ 1 (* i i k)))\n            ((= j k) (+ 1 (*\
    \ j j k)))\n            (else (+ 1 (* i j k))))\n      (set! a\n            (map\
    \ (lambda (i) (helper i i k))\n                   (range (+ i 1)))))\n    (length\
    \ (filter (lambda (i) (= (+ i 1) (* i i 3))) a))))\n", "  (define (helper i j\
    \ k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n        \
    \        (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper\
    \ i k (+ j k)))\n                    (+ 1 (helper i (+ j k) k))\n            \
    \        (+ 1 (helper i (+ k j) k))\n                    (+ 1 (helper i (+ k j)\
    \ j))\n                    (+ 1 (helper i (+ k k) j))\n                    (+\
    \ 1 (helper i (+ k k) k))\n                    (+ 1 (helper i (+ j k) j))\n  \
    \                  (+ 1 (helper i (+ j k) k))\n                    (+ 1 (helper\
    \ i (+ k j) j))\n                    (+ 1 (helper i (+ k j) k))\n            \
    \        (+ 1 (helper i (+ k k) j))\n                    (+ 1 (helper i (+ k k)\
    \ k))\n                    (+ 1 (helper j k (+ i k)))\n                    (+\
    \ 1 (helper j k (+ i j)))\n                    (+ 1 (helper j k (+ i k)))\n  \
    \                  (+ 1 (helper j k (+ j i)))\n                    (+ 1 (helper\
    \ j k (+ j i)))\n                    (+ 1 (helper j k (+ j k)))\n            \
    \        (+ 1 (helper j k (+ k i)))\n                    (+ 1 (helper j k (+ k\
    \ i)))\n                    (+ 1 (helper j k (+ k j)))\n                    (+\
    \ 1 (helper j k (+ k j)))\n                    (+ 1 (helper k i (+ i j)))\n  \
    \                  (+ 1 (helper k i (+ i j)))\n                    (+ 1 (helper\
    \ k i (+ i k)))\n                    (+ 1 (helper k i (+ j i)))\n            \
    \        (+ 1 (helper k i (+ j i)))\n                    (+ 1 (helper k i (+ j\
    \ k)))\n                    (+ 1 (helper k i (+ k i)))\n                    (+\
    \ 1 (helper k i (+ k j)))\n                    (+ 1 (helper k i (+ k j)))\n  \
    \                  (+ 1 (helper k j (+ i i)))\n                    (+ 1 (helper\
    \ k j (+ i i)))\n                    (+ 1 (helper k j (+ i k)))\n            \
    \        (+ 1 (helper k j (+ j i)))\n                    (+ 1 (helper k j (+ j\
    \ i)))\n                    (+ 1 (helper k j (+ j k)))\n                    (+\
    \ 1 (helper k j (+ k i)))\n                    (+ 1 (helper k j (+ k i)))\n  \
    \                  (+ 1 (helper k j (+ k j)))\n                    (+ 1 (", " \
    \ (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n \
    \       (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", " \
    \ (let loop ((a #(list 1 3 7 13 21 ))\n             (i 1))\n    (if (< i n)\n\
    \        (loop (append a i) (i + 1))\n        (loop a (+ i 1)))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(=\
    \ i j) (if (= (+ i j k) 3) 1 0)]\n      [(= i k) (if (= (+ i j k) 3) 1 0)]\n \
    \     [else (helper i (+ j 1) k)]\n    )\n  )\n  (helper 1 2 n)\n)\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(<\
    \ j k) (helper (+ j 1) i k)]\n      [(< k n) (helper (+ k 1) i j)]\n      [(=\
    \ i j) (helper (+ i 1) k k)]\n      [(= j k) (helper (+ j 1) i k)]\n      [(=\
    \ k n) (helper (+ k 1) i j)]\n      [(= i k) (helper (+ i 1) j k)]\n      [(=\
    \ j i) (helper (+ j 1) k k)]\n      [(= k j) (helper (+ k 1) i k)]\n      [(=\
    \ i j) (helper (+ i 1) k k)]\n      [(= j k) (helper (+ j 1) i k)]\n      [(=\
    \ k n) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= j i) (helper (+ j 1) k k)]\n      [(=\
    \ k j) (helper (+ k 1) i k)]\n      [(= i j) (helper (+ i 1) k k)]\n      [(=\
    \ j k) (helper (+ j 1) i k)]\n      [(= k n) (helper (+ k 1) i j)]\n      [(=\
    \ i k) (", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1)\
    \ j k)]\n      [(< j k) (helper (+ i 1) k (+ j 1))]\n      [(= i j) (helper (+\
    \ i 1) k (+ j 1))]\n      [else (+ i (+ j (+ k 1)))]))\n  (helper 1 n n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i k) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [(< k j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [else 0]))\n  (if (= n 0)\n      0\n\
    \      (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< k j)\n            (if (= (+ (* i i)\
    \ (* j j)) (* k k))\n                (+ 1 (helper (+ i 1) (+ j 1) k))\n      \
    \          (+ 1 (helper (+ i 1) j k))\n                (+ 1 (helper i (+ j 1)\
    \ k))\n            )\n            (helper (+ i 1) (+ j 1) k)\n        )\n    \
    \    (helper (+ i 1) j k)\n    )\n  )\n  (helper 1 2 n)\n)\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1\
    \ 2 3))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (cons a i))\n        (if (= (+ a i) 3)\n            (+ 1 (loop (+ i\
    \ 1) a))\n            (loop (+ i 1) a))))))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n   \
    \   [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+\
    \ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(<\
    \ i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1)\
    \ j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i\
    \ j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j\
    \ k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j)\
    \ (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n\
    \      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper\
    \ (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(<\
    \ i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+\
    \ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k)\
    \ (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1)\
    \ (+ j 1) k))]\n      ", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n  \
    \                (if (= (+ i k) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k\
    \ (+ j k)))\n                  (if (= (+ k j) i) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k i) j) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k j) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) ", "  (let loop ((a #(list\
    \ 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n        (loop (append a\
    \ (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (let loop ((a #(list\
    \ 1 2 3 4 5))\n             (i 0))\n    (if (< i n)\n        (loop (append a (list\
    \ i)) (+ i 1))\n        (loop a (+ i 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
