name: HumanEval_57_monotonic
language: rkt
prompt: "#lang racket\n\n;; Return #t is list elements are monotonically increasing\
  \ or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list\
  \ 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n       \
    \ (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else #f]))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [else #f]))\n", "  (cond ((null? l) #f)\n   \
    \     ((null? (cdr l)) #t)\n        (else (and (< (car l) (car (cdr l)))\n   \
    \                (monotonic (cdr l))))))\n", "  (cond ((null? l) #f)\n       \
    \ ((< (car l) (cadr l)) #t)\n        (else (monotonic (cdr l)))))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n", " \
    \ (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else #f]))\n", "  (cond ((null? l) #f)\n        ((< (car l) (cadr l))\
    \ #t)\n        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n    \
    \    [(< (car l) (cadr l)) #t]\n        [else #f]))\n", "  (cond ((null? l) #f)\n\
    \        ((< (car l) (cadr l)) #t)\n        (else (monotonic (cdr l)))))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n",
  "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [else #f]))\n", "  (cond ((null? l) #f)\n   \
    \     ((< (car l) (cadr l)) #t)\n        (else (monotonic (cdr l)))))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
