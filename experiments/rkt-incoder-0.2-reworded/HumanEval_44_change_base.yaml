name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>>\
  \ (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n     \
    \ (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base base))\n      (number->string x\
    \ (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (number->string x)]\n    [else (number->string (quotient\
    \ x base))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n  \
    \    (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string x (- base 10))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 5) (string-append (number->string x) (number->string base))\n         \
    \     (cond\n               [(< base 6) (string-append (number->string x) (number->string\
    \ base))\n                (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (number->string x)]\n                      [else (number->string\
    \ x)]\n                      )]\n                    [else (number->string x)]\n\
    \                    )]\n                 [else (number->string x)]\n        \
    \         )]\n              [else (number->string x)]\n              )]\n    \
    \        [else (number->string x)]\n            [else (number->string x)]\n  \
    \          )]\n         [else (number->string x)]\n         )]\n       [else (number->string\
    \ x)]\n       )]\n     [else (number->string x)]\n     ))])\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base (- base base)))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (number->string x (/ base 10))]\n\
    \    [else (number->string x (* base 10))]))\n", "  (if (< base 10)\n      (*\
    \ base x)\n      (quotient x base)))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(= base 10) (string-append \"0\" (number->string x))]\n  \
    \     [else (string-append \"0\" \"\" (number->string x))])]\n    [else (number->string\
    \ x (+ base 10))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10)\n   \
    \  (string-append (number->string x) (number->string base))]\n    [else\n    \
    \ (string-append (number->string x) (number->string (- base 10)))]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(< base 2) (string-append (number->string x) (number->string base))\n    \
    \    (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n              (cond\n           \
    \    [(< base 6) (string-append (number->string x) (number->string base))\n  \
    \              (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 11) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 12) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 17) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                            (cond\n                \
    \                             [(< base 21) (string-append (number->string x) (number->string\
    \ base))\n                                              (cond", "  (cond\n   \
    \ [(< base 10) (string-append (number->string x) (number->string base))]\n   \
    \ [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (* base x)\n      (quotient x base)))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient (- x base) base))))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string (quotient x base) (quotient (- x\
    \ base) base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 4) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 5) (string-append (number->string x) (number->string base))\n\
    \              (cond\n               [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                (cond\n                 [(< base\
    \ 7) (string-append (number->string x) (number->string base))\n              \
    \    (cond\n                   [(< base 8) (string-append (number->string x) (number->string\
    \ base))\n                    (cond\n                     [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                      (cond\n   \
    \                    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                        (number->string x)]\n                      [else\
    \ (number->string x)]\n                      )]\n                    [else (number->string\
    \ x)]\n                    )]\n                 [else (number->string x)]\n  \
    \               )]\n              [else (number->string x)]\n              )]\n\
    \            [else (number->string x)]\n            [else (number->string x)]\n\
    \            )]\n         [else (number->string x)]\n         )]\n       [else\
    \ (number->string x)]\n       )]\n     [else (number->string x)]\n     ))])\n",
  "  (cond\n    [(< base 10) (* x base)]\n    [else (change_base (/ x base) (+ base\
    \ 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n  \
    \    (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< base\
    \ 3) (string-append (number->string x) (number->string base))\n          (cond\n\
    \            [(< base 4) (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(< base 5) (string-append (number->string\
    \ x) (number->string base))\n               (cond\n                 [(< base 6)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (cond\n                     [(< base 7) (string-append (number->string x) (number->string\
    \ base))\n                       (cond\n                         [(< base 8) (string-append\
    \ (number->string x) (number->string base))\n                           (cond\n\
    \                             [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                 '()\n                                 ]\n  \
    \                               [(< base 11) (string-append (number->string x)\
    \ (number->string base))\n                                  '()\n            \
    \                     ]\n                                 [(< base 12) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()\n                                 ]\n                                 [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                          '()\n                                 ]\n         \
    \                        [(< base 14) (string-append (number->string x) (number->string\
    \ base))\n                                  '()\n                            \
    \     ]\n                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  '()\n         \
    \                        ]\n                                 [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()\n                                 ]\n                                 [(<\
    \ base 17) (string-append (number->string x) (number->string base))\n        \
    \                          '()\n                                 ]\n         \
    \                        [(< base 18) (string-append (number->string x) (number->string\
    \ base))\n                                  '()\n                            \
    \     ]\n                                 [(< base 19) (string-append (number->string\
    \ x) (number->string base))\n                                  '()\n         \
    \                        ]\n                                 [(< base 20) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()\n                                 ]", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(= base 10) (string-append\
    \ \"0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n      \
    \    (cond\n            [(< x 100) (string-append \"00\" x)\n             (cond\n\
    \              [(< x 1000) (string-append \"000\" x)\n               (cond\n \
    \                [(< x 10000) (string-append \"0000\" x)\n                   (cond\n\
    \                     [(< x 100000) (string-append \"00000\" x)\n            \
    \           (cond\n                         [(< x 1000000) (string-append \"000000\"\
    \ x)\n                           (cond\n                             [(< x 10000000)\
    \ (string-append \"0000000\" x)\n                               (cond\n      \
    \                           [(< x 100000000) (string-append \"00000000\" x)\n\
    \                                   (cond\n                                  \
    \   [(< x 1000000000) (string-append \"000000000\" x)\n                      \
    \                 (cond\n                                         [(< x 10000000000)\
    \ (string-append \"0000000000\" x)\n                                         \
    \  (cond\n                                             [(< x 100000000000) (string-append\
    \ \"00000000000\" x)\n                                               (cond\n \
    \                                                [(< x 1000000000000) (string-append\
    \ \"000000000000\" x)\n                                                   (cond\n\
    \                                                     [(< x 10000000000000) (string-append\
    \ \"0000000000000\" x)\n                                                     \
    \  (cond\n                                                         [(< x 100000000000000)\
    \ (string-append \"00000000000000\" x)\n                                     \
    \                      (cond\n                                               \
    \              [(< x 1000000000000000) (string-append \"000000000000000\" x)\n\
    \                                                               (cond\n      \
    \                                                           [(< x 10000000000000000)\
    \ (string-append \"0000000000000000\" x)\n                                   \
    \                              (cond\n                                       \
    \                            [(< x 100000000000000000) (string-append \"00000000000000000\"\
    \ x)\n                                                                     (cond\n\
    \                                                                     [(< x 1000000000000000000)\
    \ (string-append \"000000000000000000\" x)\n                                 \
    \                                     (cond\n                                \
    \                                        [(< x 10000000000000000000) (string-append\
    \ \"0000000000000000000\" x)\n                                               \
    \                         (cond\n                                            \
    \                              [(< x 100000000000000000000) (string-append \"\
    00000000000000000000\" x)\n                                                  \
    \                         (cond\n                                            \
    \                                  [(< x 1000000000000000000000) (string-append\
    \ \"000000000000000000000\" x)\n                                             \
    \                                  (cond\n                                   \
    \                                              [(< x 10000000000000000000000)\
    \ (string-append \"0000000000000000000000\" x)\n                             \
    \                                                      (cond\n               \
    \                                                                      [(< x 100000000000000000000000)\
    \ (string-append \"00000000000000000000000\" x)\n                            \
    \                                                           (cond\n          \
    \                                                      ", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient (- x base) base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (/ base 10))\n      (number->string x (+ (* base\
    \ 10) (- base 10))))\n  )\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(< base 2) (string-append (number->string x) (number->string base))\n    \
    \    (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 6) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 8) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  '()\n         \
    \                        ])\n                             ])\n               \
    \          ])\n                     ])\n                 ])\n              ])\n\
    \             ])\n          ])\n        ])\n       ])\n     ])\n   ])\n)\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base 1))\n      (number->string x (- base 1))))\n", " \
    \ (if (< base 10)\n      (number->string x)\n      (number->string (expt x base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append \"\
    0\" (number->string x))]\n       [else (string-append (number->string x) (number->string\
    \ base))]))]\n    [else (error \"Base must be less than 10\")]))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base 1))\n      (number->string x (- base\
    \ 1))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient x base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (* base 10))))\n", "  (if (< base 10)\n\
    \      (number->string x (/ base 10))\n      (number->string x (+ (/ base 10)\
    \ (* base 10))))\n  )\n", "  (if (< base 10)\n      (number->string x (+ base\
    \ base))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n  \
    \    (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (* base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (number->string x)]\n    [else (number->string (/ x base))]))\n", "  (cond\n\
    \    [(< base 10) (number->string x)]\n    [else (number->string (remainder x\
    \ base))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n \
    \     (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base (- base\
    \ base)))\n      (number->string x (- base base))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string (quotient x base) (quotient x base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond [(< base 10)\n         (string-append (number->string\
    \ x) (number->string base))\n         ]\n        [(= base 10)\n         (number->string\
    \ x)\n         ]\n        [else\n         (number->string x (change_base base\
    \ (- base 10)))\n         ]\n        ))\n", "  (if (< base 10)\n      (* base\
    \ x)\n      (quotient x base)))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n         (< base 100) (number->string\
    \ x)\n         (< base 1000) (number->string x)\n         (< base 10000) (number->string\
    \ x)\n         (< base 100000) (number->string x)\n         (< base 1000000) (number->string\
    \ x)\n         (< base 10000000) (number->string x)\n         (< base 100000000)\
    \ (number->string x)\n         (< base 1000000000) (number->string x)\n      \
    \   (< base 10000000000) (number->string x)\n         (< base 100000000000) (number->string\
    \ x)\n         (< base 1000000000000) (number->string x)\n         (< base 10000000000000)\
    \ (number->string x)\n         (< base 100000000000000) (number->string x)\n \
    \        (< base 1000000000000000) (number->string x)\n         (< base 10000000000000000)\
    \ (number->string x)\n         (< base 100000000000000000) (number->string x)\n\
    \         (< base 1000000000000000000) (number->string x)\n         (< base 10000000000000000000)\
    \ (number->string x)\n         (< base 100000000000000000000) (number->string\
    \ x)\n         (< base 1000000000000000000000) (number->string x)\n         (<\
    \ base 10000000000000000000000) (number->string x)\n         (< base 100000000000000000000000)\
    \ (number->string x)\n         (< base 1000000000000000000000000) (number->string\
    \ x)\n         (< base 10000000000000000000000000) (number->string x)\n      \
    \   (< base 100000000000000000000000000) (number->string x)\n         (< base\
    \ 1000000000000000000000000000) (number->string x)\n         (< base 10000000000000000000000000000)\
    \ (number->string x)\n         (< base 100000000000000000000000000000) (number->string\
    \ x)\n         (< base 1000000000000000000000000000000) (number->string x)\n \
    \        (< base 10000000000000000000000000000000) (number->string x)\n      \
    \   (< base 100000000000000000000000000000000) (number->string x)\n         (<\
    \ base 1000000000000000000000000000000000) (number->string x)\n         (< base\
    \ 10000000000000000000000000000000000) (number->string x)\n         (< base 100000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 1000000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 10000000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 100000000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 1000000000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 10000000000000000000000000000000000000000)\
    \ (number->string x)\n         (< base 100000000000000000000000000000000000000000)\
    \ (number->string x)\n         (< ", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n\
    \      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string x (- base 10))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(= base 10) (string-append \"0\" x)\n        (cond\n     \
    \    [(= base 10) \"0\"]\n         [else (string-append \"0\" x)]))]\n    [else\
    \ (change_base (/ x base) (- base 1))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| a dscore=0 |>\n<code>", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base (- base 10)))\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (number->string x)]\n                     \
    \            [else (number->string x)]\n                                 )]\n\
    \                             [else (number->string x)]\n                    \
    \         )]\n                         [else (number->string x)]\n           \
    \              )]\n                     [else (number->string x)]\n          \
    \           )]\n                 [else (number->string x)]\n                 )]\n\
    \             [else (number->string x)]\n             )]\n         [else (number->string\
    \ x)]\n         )]\n       [else (number->string x)]\n       )]\n    [else (number->string\
    \ x)]\n    ))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution. My only\
    \ concern is that it's very hard to read. Is there a way to make it more readable?\n\
    <|/ c |>\n<| c |>\nI added a more readable version. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI like your solution. My only concern is that it's very hard to read.\
    \ Is there a way to make it more readable?\n<|/ c |>\n<| c |>\nI added a more\
    \ readable version. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nI like your solution.\
    \ My only concern is that it's very hard to read. Is there a way to make it more ",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10)\
    \ (* base x)]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n\
    \    [(< base 10)\n     (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 2)\n        (string-append \"10\" (number->string\
    \ x))\n        (cond\n         [(= x 0)\n          (cond\n           [(= x 0)\n\
    \            (cond\n             [(= x 0)\n               (string-append \"0\"\
    \ \"0\")\n               (cond\n                 [(= x 0)\n                  \
    \ (string-append \"0\" \"0\")\n                   (cond\n                    \
    \ [(= x 0)\n                       (string-append \"0\" \"0\")\n             \
    \          (cond\n                         [(= x 0)\n                        \
    \   (string-append \"0\" \"0\")\n                           (cond\n          \
    \                   [(= x 0)\n                               (string-append \"\
    0\" \"0\")\n                               (cond\n                           \
    \      [(= x 0)\n                                   (string-append \"0\" \"0\"\
    )\n                                   (cond\n                                \
    \     [(= x 0)\n                                       (string-append \"0\" \"\
    0\")\n                                       (cond\n                         \
    \                [(= x 0)\n                                           (string-append\
    \ \"0\" \"0\")\n                                           (cond\n           \
    \                                  [(= x 0)\n                                \
    \               (string-append \"0\" \"0\")\n                                \
    \               (cond\n                                                 [(= x\
    \ 0)\n                                                   (string-append \"0\"\
    \ \"0\")\n                                                   (cond\n         \
    \                                            [(= x 0)\n                      \
    \                                 (string-append \"0\" \"0\")\n              \
    \                                         (cond\n                            \
    \                             [(= x 0)\n                                     \
    \                      (string-append \"0\" \"0\")\n                         \
    \                                  (cond\n                                   \
    \                          [(= x 0)\n                                        \
    \                       (string-append \"0\" \"0\")\n                        \
    \                                       (cond\n                              \
    \                                   [(= x 0)\n                               \
    \                                    (string-append \"0\" \"0\")\n           \
    \                                                        (cond\n             \
    \                                                        [(= x 0)\n          \
    \                                                            (string-append \"\
    0\" \"0\")\n                                                                 \
    \     (string-append \"0\" \"0\")\n                                          \
    \                            (string-append \"0\" \"0\")\n                   \
    \                                                   (string-append \"0\" \"0\"\
    )\n                                                                      (string-append\
    \ \"0\" \"0\")\n                                                             \
    \         (string-append \"0\" \"0\")\n                                      \
    \                                (string-append \"0\" \"0\")\n               \
    \                                                       (string-append \"0\" \"\
    0\")\n                                                                      (string-append\
    \ \"0\" \"0\")\n                                                             \
    \         (string-append \"0\" \"0\")\n                                      \
    \                                (string-append \"0\" \"0\")\n               \
    \                                                       (string-append \"0\" \"\
    0\")\n                                                                      (string-append\
    \ \"0\" \"0\")\n                                                             \
    \         (string-append \"0\" \"0\")\n                                      \
    \                                (string-append \"0\" \"0\")\n               \
    \                                                       (string-append \"0\" \"\
    0\")\n                                                                      (string-append\
    \ \"0\" \"0\")\n                                                             \
    \         ", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (/ base 10))\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (* x base)]\n    [else (change_base (/ x base) base)]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 1) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 0) (string-append\
    \ \"0\" (number->string base))\n            (cond\n             [(< base -1) (string-append\
    \ \"-1\" (number->string base))\n              (cond\n               [(< base\
    \ -2) (string-append \"-2\" (number->string base))\n                (cond\n  \
    \               [(< base -3) (string-append \"-3\" (number->string base))\n  \
    \                (cond\n                   [(< base -4) (string-append \"-4\"\
    \ (number->string base))\n                    (cond\n                     [(<\
    \ base -5) (string-append \"-5\" (number->string base))\n                    \
    \  (cond\n                       [(< base -6) (string-append \"-6\" (number->string\
    \ base))\n                        (cond\n                         [(< base -7)\
    \ (string-append \"-7\" (number->string base))\n                          (cond\n\
    \                           [(< base -8) (string-append \"-8\" (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base -9) (string-append \"-9\" (number->string base))\n                    \
    \          (cond\n                               [(< base -10) (string-append\
    \ \"-10\" (number->string base))\n                                (cond\n    \
    \                             [(< base -11) (string-append \"-11\" (number->string\
    \ base))\n                                  (cond\n                          \
    \         [(< base -12) (string-append \"-12\" (number->string base))\n      \
    \                              (cond\n                                     [(<\
    \ base -13) (string-append \"-13\" (number->string base))\n                  \
    \                    (cond\n                                       [(< base -14)\
    \ (string-append \"-14\" (number->string base))\n                            \
    \            (cond\n                                         [(< base -15) (string-append\
    \ \"-15\" (number->string base))\n                                          (cond\n\
    \                                           [(< base -16) (string-append \"-16\"\
    \ (number->string base))\n                                             (cond\n\
    \                                              [(< base -17) (string-append \"\
    -17\" (number->string base))\n                                               \
    \ (cond\n                                                 [(< base -18) (string-append\
    \ \"-18\" (number->string base))\n                                           \
    \       (cond\n                                                   [(< base -19)\
    \ (string-append \"-19\" (number->string base))\n                            \
    \                        (cond\n                                             \
    \        [(< base -20", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (number->string x)]\n    [else\
    \ (number->string (remainder x base))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(<\
    \ base 4) (string-append (number->string x) (number->string base))\n         \
    \    (cond\n              [(< base 5) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 9) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(< base 11) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(< base 12) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 13) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(< base 17) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(< base 18) (string-append (number->string\
    \ x) (number->string base))\n                                             (cond\n\
    \                                              [(< base 19) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 20) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                  (cond\n                                                   [(<\
    \ base 21) (string-append (number->string x) (number->string base))\n        \
    \                                            ", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (* x base)]\n    [else (change_base (/ x base) (+ base\
    \ 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n    \
    \  (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (number->string x)]\n    [else\
    \ (number->string (remainder x base))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 9) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                            (number->string\
    \ x)\n                           ])\n                         ])\n           \
    \           ])\n                   ])\n                 ])\n              ])\n\
    \           ])\n         ])\n       ])\n     ])\n   ])\n)\n", "  (cond\n    [(<\
    \ base 10)\n     (string-append (number->string x) (number->string base))]\n \
    \   [else\n     (string-append (number->string x) (number->string (- base 10)))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(<\
    \ base 4) (string-append (number->string x) (number->string base))\n         \
    \    (cond\n              [(< base 5) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 9) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(< base 11) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(< base 12) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 13) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(< base 17) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(< base 18) (string-append (number->string\
    \ x) (number->string base))\n                                             (cond\n\
    \                                              [(< base 19) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 20) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \ [(< base 21) (string-append (number->string x) (number->string base))\n    \
    \                                                ", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base (- base base)))\n      (number->string x (- base base))))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base base))\n      (number->string x (-\
    \ base base))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))]\n  \
    \  [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n     \
    \ (number->string x (+ base 1))\n      (number->string x (- base 1))))\n", " \
    \ (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (* base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (+ (/ base 10) 10))))\n", "  (if (< base 10)\n      (number->string x)\n \
    \     (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ \"0\" (number->string x))\n        (cond\n         [(< base 3) (string-append\
    \ \"00\" (number->string x))\n          (cond\n           [(< base 4) (string-append\
    \ \"000\" (number->string x))\n            (cond\n             [(< base 5) (string-append\
    \ \"0000\" (number->string x))\n              (cond\n               [(< base 6)\
    \ (string-append \"00000\" (number->string x))\n                (cond\n      \
    \           [(< base 7) (string-append \"000000\" (number->string x))\n      \
    \            (cond\n                   [(< base 8) (string-append \"0000000\"\
    \ (number->string x))\n                    (cond\n                     [(< base\
    \ 9) (string-append \"00000000\" (number->string x))\n                      (cond\n\
    \                       [(< base 10) (string-append \"000000000\" (number->string\
    \ x))\n                        (cond\n                         [(< base 11) (string-append\
    \ \"0000000000\" (number->string x))\n                          (cond\n      \
    \                     [(< base 12) (string-append \"00000000000\" (number->string\
    \ x))\n                            (cond\n                             [(< base\
    \ 13) (string-append \"000000000000\" (number->string x))\n                  \
    \            (cond\n                               [(< base 14) (string-append\
    \ \"0000000000000\" (number->string x))\n                                (cond\n\
    \                                 [(< base 15) (string-append \"00000000000000\"\
    \ (number->string x))\n                                  (cond\n             \
    \                      [(< base 16) (string-append \"000000000000000\" (number->string\
    \ x))\n                                    (cond\n                           \
    \          [(< base 17) (string-append \"0000000000000000\" (number->string x))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append \"00000000000000000\" (number->string x))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append \"000000000000000000\" (number->string\
    \ x))\n                                          (cond\n                     \
    \                      [(< base 20) (string-append \"0000000000000000000\" (number->string\
    \ x))\n                                             (cond\n                  \
    \                           [(< base 21) (string-append \"00000000000000000000\"\
    \ (number->string x))\n                                              (cond\n \
    \                                              [(< base 22) (string-append \"\
    000000000000000000000\" (number->string x))\n                                \
    \                (cond\n                                                 [(< base\
    \ 23) (string-append \"0000000000000000000000\" (number->string x))\n        \
    \                                          (cond\n                           \
    \                        [(< base 24) (string-append \"00000000000000000000000\"\
    \ (number->string x))\n                                                    (cond\n\
    \                                                     [(", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (number->string x)]\n    [else (number->string (remainder x base))]))\n", " \
    \ (if (< base 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n    \
    \  (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (cond [(< base 10) (string-append (number->string x)\
    \ (number->string base))])\n        [(= base 0) (number->string x)]\n        [else\
    \ (number->string (quotient x base) (quotient (- x base) base))]))\n", "  (if\
    \ (< base 10)\n      (number->string x)\n      (number->string (quotient x base)\
    \ (quotient (- x base) base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10)\n     (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(= base 2)\n        (string-append \"10\" (number->string\
    \ x))\n        (cond\n         [(= x 0)\n          (cond\n           [(= x 1)\n\
    \            (string-append \"0\" \"1\")]\n           [else\n            (string-append\
    \ \"0\" (number->string x))])]\n         [else\n          (cond\n           [(=\
    \ x 1)\n            (string-append \"1\" \"0\")]\n           [else\n         \
    \   (string-append \"1\" (number->string x))])])]\n       [else\n        (cond\n\
    \         [(= x 1)\n          (cond\n           [(= x 2)\n            (string-append\
    \ \"11\" \"10\")\n            (cond\n             [(= x 3)\n              (cond\n\
    \               [(= x 4)\n                (string-append \"111\" \"100\")\n  \
    \              (cond\n                 [(= x 5)\n                  (cond\n   \
    \                [(= x 6)\n                    (string-append \"1111\" \"1000\"\
    )\n                    (cond\n                     [(= x 7)\n                \
    \      (cond\n                       [(= x 8)\n                        (string-append\
    \ \"11111\" \"10000\")\n                        (cond\n                      \
    \   [(= x 9)\n                          (string-append \"111111\" \"100000\")\n\
    \                          (cond\n                           [(= x 10)\n     \
    \                       (string-append \"1111111\" \"1000000\")\n            \
    \                (cond\n                             [(= x 11)\n             \
    \                 (string-append \"11111111\" \"10000000\")\n                \
    \              (cond\n                               [(= x 12)\n             \
    \                   (string-append \"111111111\" \"100000000\")\n            \
    \                    (cond\n                                 [(= x 13)\n     \
    \                             (string-append \"1111111111\" \"1000000000\")\n\
    \                                  (cond\n                                   [(=\
    \ x 14)\n                                    (string-append \"11111111111\" \"\
    10000000000\")\n                                    (cond\n                  \
    \                   [(= x 15)\n                                      (string-append\
    \ \"111111111111\" \"100000000000\")\n                                      (cond\n\
    \                                       [(= x 16)\n                          \
    \              (string-append \"1111111111111\" \"1000000000000\")\n         \
    \                               (cond\n                                      \
    \   [(= x 17)\n                                          (string-append \"11111111111111\"\
    \ \"10000000000000\")\n                                          (cond\n     \
    \                                      [(= x 18)\n                           \
    \                 (string-append \"111111111111111\" \"100000000000000\")\n  \
    \                                          (cond\n                           \
    \                  [(= x 19)\n                                              (string-append\
    \ \"1111111111111110\" \"1000000000000000\")\n                               \
    \               (cond\n                                               [(= x 20)\n\
    \                                                (string-append \"111111111111",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (number->string x)]\n                     \
    \            [else (number->string x)]\n                                 )]\n\
    \                             [else (number->string x)]\n                    \
    \         )]\n                         [else (number->string x)]\n           \
    \              )]\n                     [else (number->string x)]\n          \
    \           )]\n                 [else (number->string x)]\n                 )]\n\
    \             [else (number->string x)]\n             )]\n         [else (number->string\
    \ x)]\n         )]\n       [else (number->string x)]\n       )]\n    [else (number->string\
    \ x)]\n    ))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  (if (<\
    \ base 10)\n      (number->string x (+ base base))\n      (number->string x (-\
    \ base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n     (cond\n\
    \       [(< base 2) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n              (cond\n           \
    \    [(< base 6) (string-append (number->string x) (number->string base))\n  \
    \              (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 11) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 12) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 17) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                                [(< base 21) (string-append (number->string x)\
    \ (number->string base))\n                                                (cond",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 1) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(<\
    \ base 0) (string-append \"0\" (number->string base))\n             (cond\n  \
    \            [(< base -1) (string-append \"-1\" (number->string base))\n     \
    \          (cond\n                 [(< base -2) (string-append \"-2\" (number->string\
    \ base))\n                   (cond\n                     [(< base -3) (string-append\
    \ \"-3\" (number->string base))\n                       (cond\n              \
    \           [(< base -4) (string-append \"-4\" (number->string base))\n      \
    \                     (cond\n                             [(< base -5) (string-append\
    \ \"-5\" (number->string base))\n                               (cond\n      \
    \                           [(< base -6) (string-append \"-6\" (number->string\
    \ base))\n                                   (cond\n                         \
    \            [(< base -7) (string-append \"-7\" (number->string base))\n     \
    \                                  (cond\n                                   \
    \      [(< base -8) (string-append \"-8\" (number->string base))\n           \
    \                                (cond\n                                     \
    \        [(< base -9) (string-append \"-9\" (number->string base))\n         \
    \                                      (cond\n                               \
    \                  [(< base -10) (string-append \"-10\" (number->string base))\n\
    \                                                   (cond\n                  \
    \                                   [(< base -11) (string-append \"-11\" (number->string\
    \ base))\n                                                       (cond\n     \
    \                                                    [(< base -12) (string-append\
    \ \"-12\" (number->string base))\n                                           \
    \                (cond\n                                                     \
    \        [(< base -13) (string-append \"-13\" (number->string base))\n       \
    \                                                        (cond\n             \
    \                                                    [(< base -14) (string-append\
    \ \"-14\" (number->string base))\n                                           \
    \                        (cond\n                                             \
    \                        [(< base -15) (string-append \"-15\" (number->string\
    \ base))\n                                                                   \
    \  (cond\n                                                                   \
    \  [(< base -16) (string-append \"-16\" (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                        [(< base -17) (string-append\
    \ \"-17\" (number->string base))\n                                           \
    \                          (cond\n                                           \
    \                          [(< base -18) (string-append \"-18\" (number->string\
    \ base))\n                                                                   \
    \  (cond\n                                                                   \
    \  [(< base -19) (string-append \"-19\" (number->"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
