name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>>\
  \ (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n     \
    \ (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base base))\n      (number->string x\
    \ (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (number->string x)]\n    [else (number->string (quotient\
    \ x base))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n  \
    \    (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string x (- base 10))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 5) (string-append (number->string x) (number->string base))\n         \
    \     (cond\n               [(< base 6) (string-append (number->string x) (number->string\
    \ base))\n                (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (number->string x)]\n                      [else (number->string\
    \ x)]\n                      )]\n                    [else (number->string x)]\n\
    \                    )]\n                 [else (number->string x)]\n        \
    \         )]\n              [else (number->string x)]\n              )]\n    \
    \        [else (number->string x)]\n            [else (number->string x)]\n  \
    \          )]\n         [else (number->string x)]\n         )]\n       [else (number->string\
    \ x)]\n       )]\n     [else (number->string x)]\n     ))])\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base (- base base)))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
